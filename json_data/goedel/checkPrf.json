{
    "filename": "checkPrf.v",
    "coq_project": "goedel",
    "vernac_cmds": [
        [
            "Require Import primRec.",
            "VernacRequire",
            "75a83dde535ddae28126e82cc7ff15f05b8e505b"
        ],
        [
            "Require Import codeFreeVar.",
            "VernacRequire",
            "9bac589f02953c6cbf63fd2225c4656e154dce09"
        ],
        [
            "Require Import codeSubFormula.",
            "VernacRequire",
            "17a759017d538ee0b31f71d62a29134c3482384b"
        ],
        [
            "Require Import cPair.",
            "VernacRequire",
            "245e4bc1e0b715e3965e2d304aa9ad9f5eb93662"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import code.",
            "VernacRequire",
            "2d8bc6295195cee8bb6ef6c570d4e03c177e5352"
        ],
        [
            "Require Import folProp.",
            "VernacRequire",
            "9a8c9e707f6075129a70023b069f5369c9a9b295"
        ],
        [
            "Require Import extEqualNat.",
            "VernacRequire",
            "b54dcb28a918e1b7add174b81952c2b30a6e435b"
        ],
        [
            "Require Import wellFormed.",
            "VernacRequire",
            "9c415b02cb384d989029d6ce72087b914926bfef"
        ],
        [
            "Require Import folProof.",
            "VernacRequire",
            "a0193d39f532e35a330dca71bfab163ef1b5dd49"
        ],
        [
            "Require Import prLogic.",
            "VernacRequire",
            "1bf74122c61349de52ce00bc261911cfb4de3d35"
        ],
        [
            "Section Check_Proof.",
            "VernacBeginSection",
            "6ad68d581df0aecdd32224d0c3fd9a3a0a3a01dc"
        ],
        [
            "Variable L : Language.",
            "VernacAssumption",
            "96b36a9b874de21fe37f18071cb929f4dd758042"
        ],
        [
            "Variable codeF : Functions L -> nat.",
            "VernacAssumption",
            "e65cb5fe4d2652e9939910dda9b921e5afc07e18"
        ],
        [
            "Variable codeR : Relations L -> nat.",
            "VernacAssumption",
            "7d46e7172e4f8afe9c452578494a18d04f3dd4f3"
        ],
        [
            "Variable codeArityF : nat -> nat.",
            "VernacAssumption",
            "247239a6aca1ccb6563a187bf100fc3cb63526ae"
        ],
        [
            "Variable codeArityR : nat -> nat.",
            "VernacAssumption",
            "a256d5c64bca82e39c471a89fd58c5699363ab22"
        ],
        [
            "Hypothesis codeArityFIsPR : isPR 1 codeArityF.",
            "VernacAssumption",
            "003b639d5db3c052e25944bd6e7d66f21169096e"
        ],
        [
            "Hypothesis codeArityFIsCorrect1 : forall f : Functions L, codeArityF (codeF f) = S (arity L (inr _ f)).",
            "VernacAssumption",
            "2a0ff7ddf4c082721188bdcaeaf774eba3fca95a"
        ],
        [
            "Hypothesis codeArityFIsCorrect2 : forall n : nat, codeArityF n <> 0 -> exists f : Functions L, codeF f = n.",
            "VernacAssumption",
            "3f09454e466cadf4617c26cd2e5b40955f21fe34"
        ],
        [
            "Hypothesis codeArityRIsPR : isPR 1 codeArityR.",
            "VernacAssumption",
            "58841c745f3e49fe40624a36f9031c8f3e8a099a"
        ],
        [
            "Hypothesis codeArityRIsCorrect1 : forall r : Relations L, codeArityR (codeR r) = S (arity L (inl _ r)).",
            "VernacAssumption",
            "5f7c32b690fe101c78258f13e87d6ab7f5ce37d9"
        ],
        [
            "Hypothesis codeArityRIsCorrect2 : forall n : nat, codeArityR n <> 0 -> exists r : Relations L, codeR r = n.",
            "VernacAssumption",
            "96a65721bbd45bc4a94cb6025c85f0fd79ae501e"
        ],
        [
            "Hypothesis codeFInj : forall f g : Functions L, codeF f = codeF g -> f = g.",
            "VernacAssumption",
            "4b0b91012823ec8b2df957736530fa372d1dd248"
        ],
        [
            "Hypothesis codeRInj : forall R S : Relations L, codeR R = codeR S -> R = S.",
            "VernacAssumption",
            "e4c0a75f6c8e28817a24963d05324e3490fd84e4"
        ],
        [
            "Let Term := Term L.",
            "VernacDefinition",
            "38e1762c57b9701000a89090666997db5d597a34"
        ],
        [
            "Let Terms := Terms L.",
            "VernacDefinition",
            "ac274971655c7d87e7a366522fa4f11f94117e84"
        ],
        [
            "Let var := var L.",
            "VernacDefinition",
            "387b134d06ce79979638575c6631443c7143b913"
        ],
        [
            "Let apply := apply L.",
            "VernacDefinition",
            "171f7b3946ad56564d4a09c4656739ed07770a44"
        ],
        [
            "Let Formula := Formula L.",
            "VernacDefinition",
            "3d32ab58ebf838c2a87fdc2e6124bfb77b6c785b"
        ],
        [
            "Let equal := equal L.",
            "VernacDefinition",
            "a97cb35845ad0374b8596fd6d66f5c04065714a3"
        ],
        [
            "Let atomic := atomic L.",
            "VernacDefinition",
            "7638f14f126e2c8e95075078253a597eea7fd9ac"
        ],
        [
            "Let impH := impH L.",
            "VernacDefinition",
            "b3d855010528c91b0d1d6c2d64740a3e6e7417a6"
        ],
        [
            "Let notH := notH L.",
            "VernacDefinition",
            "096b324518e16c165cd803fe11de91b995393f24"
        ],
        [
            "Let forallH := forallH L.",
            "VernacDefinition",
            "eaf4bad969f5571f26e0bbda77b3d70e626f3102"
        ],
        [
            "Let wellFormedTerm := wellFormedTerm codeArityF.",
            "VernacDefinition",
            "e82c0a81bf4730ee098b2b9fefb7bf3888e5537a"
        ],
        [
            "Let wellFormedFormula := wellFormedFormula codeArityF codeArityR.",
            "VernacDefinition",
            "76ff0ef9ed3956585ceed94e87f269112715376c"
        ],
        [
            "Let Prf := Prf L.",
            "VernacDefinition",
            "d67c53d8c574b544ea8a06853dee07e5d9b2b128"
        ],
        [
            "Definition checkPrfAXM (p recs : nat) := switchPR (charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) (cPairPi1 p)) (S (S (cPair (cPairPi1 p) 0))) 0.",
            "VernacDefinition",
            "18181d4280869048a72ffd806526204996b60120"
        ],
        [
            "Lemma checkPrfAXMIsPR : isPR 2 checkPrfAXM.",
            "VernacStartTheoremProof",
            "70bd1df773fa698a6e328e0c1c8efddac5e11380"
        ],
        [
            "unfold checkPrfAXM in |- *.",
            "VernacExtend",
            "c60a622321b3bfab3e2563e7932853b17f85782b"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => switchPR (charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) (cPairPi1 p)) (S (S (cPair (cPairPi1 p) 0))) 0).",
            "VernacExtend",
            "092274073c9f90da8261bd7eda3005037cdcb270"
        ],
        [
            "apply compose1_3IsPR with (f1 := fun p : nat => charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) (cPairPi1 p)) (f2 := fun p : nat => S (S (cPair (cPairPi1 p) 0))) (f3 := fun p : nat => 0).",
            "VernacExtend",
            "3d2c207f367af38cccd12e96568c2fa4ce10de5e"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "2c56e6458aa54c48016a4665c866ba48aa416d3a"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => S (cPair (cPairPi1 p) 0)).",
            "VernacExtend",
            "57c6ecdf4e70ceeb811db3e65f956684d19e163d"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPair (cPairPi1 p) 0).",
            "VernacExtend",
            "cc05b7992b82493591c08bcc77661377c3066b18"
        ],
        [
            "apply compose1_2IsPR with (f' := fun p : nat => 0).",
            "VernacExtend",
            "1e6cf9992d95acd8d5c9fa23362a3d574b9cdc80"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfMP (p recs : nat) := switchPR (wellFormedFormula (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) * (charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p)) * (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs * codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs))) (S (codeApp (pred (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs)) (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))) 0.",
            "VernacDefinition",
            "47147d96fb816c210b2c1746e9d2c0d7112beafb"
        ],
        [
            "Lemma checkPrfMPIsPR : isPR 2 checkPrfMP.",
            "VernacStartTheoremProof",
            "1b837b77cc81428fd1fe111d68c8dcf4b3fa6e16"
        ],
        [
            "unfold checkPrfMP in |- *.",
            "VernacExtend",
            "c8332ce9f1d1b928a4151c79f1f072ee044c194d"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun p recs : nat => wellFormedFormula (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) * (charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p)) * (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs * codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs))) (f2 := fun p recs : nat => S (codeApp (pred (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs)) (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))) (f3 := fun p recs : nat => 0).",
            "VernacExtend",
            "962ab68c8f8e15df1516895c3c1c0b38b3ae7a50"
        ],
        [
            "apply compose2_2IsPR with (f := fun p recs : nat => wellFormedFormula (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (g := fun p recs : nat => charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p)) * (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs * codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)).",
            "VernacExtend",
            "90767b22602dcd28c1bed5745370783678f00cb1"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => wellFormedFormula (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "62570267bbbd8188ac4662896d06384d8ca7a83e"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "e20d978fe5a11ac750d4d439a45b6da0c3272397"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "unfold wellFormedFormula in |- *.",
            "VernacExtend",
            "8ee3e5409e20ff24a1dd69fc3761bb8c5fa24cde"
        ],
        [
            "apply wellFormedFormulaIsPR.",
            "VernacExtend",
            "88de7a17a4d8bc9d27add2356da5143cd1e49d78"
        ],
        [
            "apply codeArityFIsPR.",
            "VernacExtend",
            "eab601a7a9a83684a31eb2c9739040d03a0fd095"
        ],
        [
            "apply codeArityRIsPR.",
            "VernacExtend",
            "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
        ],
        [
            "apply compose2_2IsPR with (f := fun p recs : nat => charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p))) (g := fun p recs : nat => codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs * codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs).",
            "VernacExtend",
            "17e187aa049045797d3f99d2916295e21b6f433f"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p))).",
            "VernacExtend",
            "737c01b2a8d5239f3c1b228b9e67b0cb18165309"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p)).",
            "VernacExtend",
            "307b45acd0133ecf86035ba7af274d73f4b44342"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "055868f2232333d4afea95583b0ff77da0857f40"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "70100804ae5bbc624f13ad4aee0038be6b3ed36d"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply compose2_2IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs) (g := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs).",
            "VernacExtend",
            "02ac1f4e64f189608ce32e82119370cb0dd019e2"
        ],
        [
            "apply callIsPR with (g := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "db719baf4d92f9000aac6b1981a0f05d77b4f60b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "1aee1ef4a894fb427e61568f54c13ec5664386a8"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply compose2_1IsPR with (f := fun p recs : nat => codeApp (pred (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs)) (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs))).",
            "VernacExtend",
            "88a8826f0eca669bd447518cb07f532596e0cca2"
        ],
        [
            "apply compose2_2IsPR with (f := fun p recs : nat => pred (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs)) (g := fun p recs : nat => pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)).",
            "VernacExtend",
            "972fea7298a6a0c718cc2312f0cd07cf85f6ebc2"
        ],
        [
            "apply compose2_1IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs).",
            "VernacExtend",
            "d40ca6bb362a07a85974a2ce1dfc60e5150dc511"
        ],
        [
            "apply callIsPR with (g := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "db719baf4d92f9000aac6b1981a0f05d77b4f60b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply compose2_1IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs).",
            "VernacExtend",
            "ef45606f8ab3509a3ac01baab20bd1b32a61fadf"
        ],
        [
            "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "1aee1ef4a894fb427e61568f54c13ec5664386a8"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply codeAppIsPR.",
            "VernacExtend",
            "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 0).",
            "VernacExtend",
            "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfGEN (p recs : nat) := switchPR (charFunction 2 beq_nat (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPairPi1 p) * (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs * (1 - codeIn (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))))) (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs) 0.",
            "VernacDefinition",
            "97c20cd2c494502e51709ee6d68df352bed89f30"
        ],
        [
            "Lemma checkPrfGENIsPR : isPR 2 checkPrfGEN.",
            "VernacStartTheoremProof",
            "7cf07236a605e35652842e0ee6fabd69fe57a9f4"
        ],
        [
            "unfold checkPrfGEN in |- *.",
            "VernacExtend",
            "d7758d9bd2adff6d581e6ae47a8a17e1160c3e26"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun p recs : nat => charFunction 2 beq_nat (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPairPi1 p) * (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs * (1 - codeIn (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))))) (f2 := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs) (f3 := fun p recs : nat => 0).",
            "VernacExtend",
            "a391ea26a868c5d336795a787c681087346ebf4a"
        ],
        [
            "apply compose2_2IsPR with (f := fun p recs : nat => charFunction 2 beq_nat (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPairPi1 p)) (g := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs * (1 - codeIn (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs))))).",
            "VernacExtend",
            "09d486d650afb7a0a89df88890311f7221ab69e4"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPairPi1 p)).",
            "VernacExtend",
            "8789ce39658681b739e6bccf8126f75ef4c40371"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => cPairPi1 p).",
            "VernacExtend",
            "51ed0a455326a37c38aeb43cda2c3d979e138b36"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => 3) (f' := fun p : nat => cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "5120936c4b650278cda18d972dfd9ac95060e8b2"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "dd6071c10f7c30a2c424f8ae332bf48ad5c38302"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply compose2_2IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs) (g := fun p recs : nat => 1 - codeIn (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))).",
            "VernacExtend",
            "41609326cd888c6bb5cfb1df6ff01f5bb6aef1b8"
        ],
        [
            "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "1aee1ef4a894fb427e61568f54c13ec5664386a8"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply compose2_2IsPR with (f := fun p recs : nat => 1) (g := fun p recs : nat => codeIn (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))).",
            "VernacExtend",
            "281dd5b1962c420cf705a6aab65904b12d24172a"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 1).",
            "VernacExtend",
            "b23baeb83b401cb3543a338ae23a5f8c3e580492"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply compose2_2IsPR with (f := fun p recs : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (g := fun p recs : nat => codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs))).",
            "VernacExtend",
            "b9e4369d0395a6d7024c971cd0f97ecf50bec3ae"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "5b3ac6cd87152e0c980d70b3e6123d1800f35a77"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose2_1IsPR with (f := fun p recs : nat => pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)).",
            "VernacExtend",
            "d54a74c71210f629c1fb5db6aae87f70a0803ad5"
        ],
        [
            "apply compose2_1IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs).",
            "VernacExtend",
            "ef45606f8ab3509a3ac01baab20bd1b32a61fadf"
        ],
        [
            "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "1aee1ef4a894fb427e61568f54c13ec5664386a8"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply codeFreeVarListFormulaIsPR.",
            "VernacExtend",
            "bcff41d33e5cfd03476e43a32f18eac7e7cf8d9e"
        ],
        [
            "apply codeInIsPR.",
            "VernacExtend",
            "4b880ac4afef6fdb973e1e6625aea0cfc3d82d57"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "1aee1ef4a894fb427e61568f54c13ec5664386a8"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 0).",
            "VernacExtend",
            "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfIMP1 (p recs : nat) := let A := cPairPi1 (cPairPi2 (cPairPi2 p)) in let B := cPairPi2 (cPairPi2 (cPairPi2 p)) in charFunction 2 beq_nat (cPair 1 (cPair A (cPair 1 (cPair B A)))) (cPairPi1 p).",
            "VernacDefinition",
            "df30949039886d867dc45a3c2ac25f520d6bfd2e"
        ],
        [
            "Lemma checkPrfIMP1IsPR : isPR 2 checkPrfIMP1.",
            "VernacStartTheoremProof",
            "55516e6cd044710470594f6ac70bc2bf55b43045"
        ],
        [
            "unfold checkPrfIMP1 in |- *.",
            "VernacExtend",
            "9e211d9a93d5fcf92c9116ed225fcc05fc33f3c5"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
            "VernacExtend",
            "4f59e9cfcb03c09460526aeead9f19431e48be15"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "ebd86c5276731665c5041d8a61b0b321fc05b517"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "2c7b5fdbe9a3aa6723425cc4b28aa221a1063f53"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))).",
            "VernacExtend",
            "d86f627409cd9a7fe7fe411824ea59458b602f27"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => 1) (f' := fun p : nat => cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p)))))).",
            "VernacExtend",
            "566174d100c400d3a008edbd541a90e71e9a89ee"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "d8923ad75fa8bab2134f3cd4a5a0959481aa06f4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => 1) (f' := fun p : nat => cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "cecb258751e91943f5fa50d653d3811839e78449"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "3740445dae8958959915616c4f7174690de8b815"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfIMP2 (p recs : nat) := let A := cPairPi1 (cPairPi2 (cPairPi2 p)) in let B := cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))) in let C := cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))) in charFunction 2 beq_nat (cPair 1 (cPair (cPair 1 (cPair A (cPair 1 (cPair B C)))) (cPair 1 (cPair (cPair 1 (cPair A B)) (cPair 1 (cPair A C)))))) (cPairPi1 p).",
            "VernacDefinition",
            "87474e7bbd56d0b8e9998f2a5e5881bf6fc79c63"
        ],
        [
            "Lemma checkPrfIMP2IsPR : isPR 2 checkPrfIMP2.",
            "VernacStartTheoremProof",
            "2ecc173b329d57ce50478b5df279db731ba8ffcc"
        ],
        [
            "unfold checkPrfIMP2 in |- *.",
            "VernacExtend",
            "1361bbd8ad719579122b16c5de608a39dbefba1f"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))) (cPairPi1 p)).",
            "VernacExtend",
            "e779727eb11061b0fdbde3d868df619fe10671f4"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "ebd86c5276731665c5041d8a61b0b321fc05b517"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "628e39b7ac3ae8796e86d880e0712c251bfdbd70"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "0b8d546e70715ecfa5374b260a2b265e4596d37d"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))).",
            "VernacExtend",
            "a79ee9707f8026a41740875b3bec110338027004"
        ],
        [
            "replace (fun p : nat => cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))) with (fun p : nat => codeImp (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (codeImp (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))); [ idtac | reflexivity ].",
            "VernacExtend",
            "39f812a928ed59080a3c3c94d60639a5fad249ee"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => codeImp (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))).",
            "VernacExtend",
            "3e3af5056aec2c204c16a61eebf43df667d05866"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "52ed5d09ceb2483ad112e0c686df3eb2ddb48994"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "110efca78549347ba0818f540749e059398b7802"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "acd041d6ae5ac0a0c27ab5f3fa53b9cf58881c11"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "dd6071c10f7c30a2c424f8ae332bf48ad5c38302"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "e960482deea59db39ff9845d1e16e11045ec6a7b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfCP (p recs : nat) := let A := cPairPi1 (cPairPi2 (cPairPi2 p)) in let B := cPairPi2 (cPairPi2 (cPairPi2 p)) in charFunction 2 beq_nat (cPair 1 (cPair (cPair 1 (cPair (cPair 2 A) (cPair 2 B))) (cPair 1 (cPair B A)))) (cPairPi1 p).",
            "VernacDefinition",
            "c3bbc7fa818a1a529de738253dff920b1d132faf"
        ],
        [
            "Lemma checkPrfCPIsPR : isPR 2 checkPrfCP.",
            "VernacStartTheoremProof",
            "73a20b2f86273eda6c458b5e07b79856ae474fa2"
        ],
        [
            "unfold checkPrfCP in |- *.",
            "VernacExtend",
            "799d0befaa01a8f618c800fc2ba767228d597966"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPair 1 (cPair (cPair 2 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (cPair 2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
            "VernacExtend",
            "a2355c9d811a67a9bc4939b57f5409de926a513d"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "ebd86c5276731665c5041d8a61b0b321fc05b517"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "2c7b5fdbe9a3aa6723425cc4b28aa221a1063f53"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPair 1 (cPair (cPair 2 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (cPair 2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))).",
            "VernacExtend",
            "0deb24d532e379d6cf18beddefd728ac62fd8647"
        ],
        [
            "replace (fun p : nat => cPair 1 (cPair (cPair 1 (cPair (cPair 2 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (cPair 2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) with (fun p : nat => codeImp (codeImp (codeNot (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeNot (cPairPi2 (cPairPi2 (cPairPi2 p))))) (codeImp (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))); [ idtac | reflexivity ].",
            "VernacExtend",
            "d4ccc9500f3bab37afc8d7260cae78ffeb963d01"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => codeImp (codeNot (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeNot (cPairPi2 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => codeImp (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "a7cff091a148c9cec34d528389a263c41f6dd88d"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => codeNot (cPairPi1 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => codeNot (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "a3f454cf0376a1610d43e5cf7445d093675d9d0e"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "055868f2232333d4afea95583b0ff77da0857f40"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeNotIsPR.",
            "VernacExtend",
            "0a35a59c766204b86ed2d04c6013e7d0330a6062"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeNotIsPR.",
            "VernacExtend",
            "0a35a59c766204b86ed2d04c6013e7d0330a6062"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "3740445dae8958959915616c4f7174690de8b815"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfFA1 (p recs : nat) := let A := cPairPi1 (cPairPi2 (cPairPi2 p)) in let v := cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))) in let t := cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))) in wellFormedTerm t * charFunction 2 beq_nat (cPair 1 (cPair (cPair 3 (cPair v A)) (codeSubFormula A v t))) (cPairPi1 p).",
            "VernacDefinition",
            "e12dba639661936cc6757736f4d542b0d6d68a67"
        ],
        [
            "Lemma checkPrfFA1IsPR : isPR 2 checkPrfFA1.",
            "VernacStartTheoremProof",
            "874b5751d11a89afc912b8b74775f80765e171bd"
        ],
        [
            "unfold checkPrfFA1 in |- *.",
            "VernacExtend",
            "061b7fea3c9480423a4e7847563359e1b9ab2050"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => wellFormedTerm (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) * charFunction 2 beq_nat (cPair 1 (cPair (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
            "VernacExtend",
            "8fbc1c40be1bd87595dc2da5da1bf2d11e424a17"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "ebd86c5276731665c5041d8a61b0b321fc05b517"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "628e39b7ac3ae8796e86d880e0712c251bfdbd70"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "0b8d546e70715ecfa5374b260a2b265e4596d37d"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => wellFormedTerm (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
            "VernacExtend",
            "c8e8a83187dd87c2c56abd8085a5dca5fdfefae6"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "2b9417a3702ff58e128cf8bb18c40956987bf06a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold wellFormedTerm in |- *.",
            "VernacExtend",
            "6a2372d2b2b4dff7000df5cbcd2c9a6e26d14e05"
        ],
        [
            "apply wellFormedTermIsPR.",
            "VernacExtend",
            "867e283982fb20f5d2de0d694c7bdc426da2daaf"
        ],
        [
            "apply codeArityFIsPR.",
            "VernacExtend",
            "eab601a7a9a83684a31eb2c9739040d03a0fd095"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))).",
            "VernacExtend",
            "95cb6f0c802ec3de26ed8546d48c0d5b4cbd263a"
        ],
        [
            "replace (fun p : nat => cPair 1 (cPair (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) with (fun p : nat => codeImp (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))); [ idtac | reflexivity ].",
            "VernacExtend",
            "35e8f4cd241e408fa8c0e3e6b60ec9cab1ea15af"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "fe565e09d101bff497d07335e068194f4820b3f7"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (g := fun a b : nat => cPair 3 (cPair a b)).",
            "VernacExtend",
            "2b87a28ac058bc90729dcc062c20a873bd26f9c2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeForallIsPR.",
            "VernacExtend",
            "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
        ],
        [
            "apply compose1_3IsPR with (f1 := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f2 := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f3 := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))); try assumption.",
            "VernacExtend",
            "8c68bcbbcf21ab22d7959788ecaccbf54a3695a9"
        ],
        [
            "apply codeSubFormulaIsPR.",
            "VernacExtend",
            "5d0bf0a7be6161c032b98eb84f0dede00ad6da7c"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfFA2 (p recs : nat) := let A := cPairPi1 (cPairPi2 (cPairPi2 p)) in let v := cPairPi2 (cPairPi2 (cPairPi2 p)) in (1 - codeIn v (codeFreeVarFormula A)) * charFunction 2 beq_nat (cPair 1 (cPair A (cPair 3 (cPair v A)))) (cPairPi1 p).",
            "VernacDefinition",
            "bb3962a65369478efa0e034eaaf1f83572f10381"
        ],
        [
            "Lemma checkPrfFA2IsPR : isPR 2 checkPrfFA2.",
            "VernacStartTheoremProof",
            "7520b86cf34bfd605bc2b45e75533522e6dbbcad"
        ],
        [
            "unfold checkPrfFA2 in |- *.",
            "VernacExtend",
            "b2deab87271068f57bb61dcd1e9df76bcbbbefa3"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => (1 - codeIn (cPairPi2 (cPairPi2 (cPairPi2 p))) (codeFreeVarFormula (cPairPi1 (cPairPi2 (cPairPi2 p))))) * charFunction 2 beq_nat (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
            "VernacExtend",
            "30418f443c5c4469bb09f70f9251dcb260966fc2"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "ebd86c5276731665c5041d8a61b0b321fc05b517"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "2c7b5fdbe9a3aa6723425cc4b28aa221a1063f53"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => 1 - codeIn (cPairPi2 (cPairPi2 (cPairPi2 p))) (codeFreeVarFormula (cPairPi1 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
            "VernacExtend",
            "bee8abfd27e7724d59896419888a859dbca57f26"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => 1) (f' := fun p : nat => codeIn (cPairPi2 (cPairPi2 (cPairPi2 p))) (codeFreeVarFormula (cPairPi1 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "4abbbfcd3733b6f58b25cef50118be11f2a22eb9"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => codeFreeVarFormula (cPairPi1 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "f8aab24f86a16cc9d9ee8019321bb5b361fd7dbf"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "055868f2232333d4afea95583b0ff77da0857f40"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeFreeVarFormulaIsPR.",
            "VernacExtend",
            "ec41269457e6eb685ba7d57f77bd65d355ac33d5"
        ],
        [
            "apply codeInIsPR.",
            "VernacExtend",
            "4b880ac4afef6fdb973e1e6625aea0cfc3d82d57"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))).",
            "VernacExtend",
            "47d581dd327a69009b178ad7d82c648bf9a32dc7"
        ],
        [
            "replace (fun p : nat => cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) with (fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p)))))); [ idtac | reflexivity ].",
            "VernacExtend",
            "3ffbdadaeb0d0138b1b50aef8f212d501fbea2aa"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "8e7b9594a600e43c9371f4307cec133e0befad94"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (g := fun a b : nat => cPair 3 (cPair a b)).",
            "VernacExtend",
            "f3f71ea1f1aad5103821b6b0e7171b2bc24bbea3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeForallIsPR.",
            "VernacExtend",
            "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfFA3 (p recs : nat) := let A := cPairPi1 (cPairPi2 (cPairPi2 p)) in let B := cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))) in let v := cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))) in charFunction 2 beq_nat (cPair 1 (cPair (cPair 3 (cPair v (cPair 1 (cPair A B)))) (cPair 1 (cPair (cPair 3 (cPair v A)) (cPair 3 (cPair v B)))))) (cPairPi1 p).",
            "VernacDefinition",
            "309617c5fb43012e4e5be8628f0b8297ba2b2435"
        ],
        [
            "Lemma checkPrfFA3IsPR : isPR 2 checkPrfFA3.",
            "VernacStartTheoremProof",
            "9d8f61dd1bdcdb8083353f98a123f89fe8c56e25"
        ],
        [
            "unfold checkPrfFA3 in |- *.",
            "VernacExtend",
            "a3384a6d8e38d95e1c7379c75d1184665cd9ef64"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))) (cPairPi1 p)).",
            "VernacExtend",
            "75d5bba9f10c351ea7be578ad93b8552a7b201e7"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "ebd86c5276731665c5041d8a61b0b321fc05b517"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "628e39b7ac3ae8796e86d880e0712c251bfdbd70"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "0b8d546e70715ecfa5374b260a2b265e4596d37d"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))).",
            "VernacExtend",
            "b08046a4e6f59df7d7e3fe40b4dc5382b70819fd"
        ],
        [
            "replace (fun p : nat => cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))) with (fun p : nat => codeImp (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) (codeImp (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))); [ idtac | reflexivity ].",
            "VernacExtend",
            "7d90fbb62feed1a8160f77bf2d6243d391906df7"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) (f' := fun p : nat => codeImp (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))))).",
            "VernacExtend",
            "05961731ceb8713ca1d6d73bedebd90958a521b0"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (g := fun a b : nat => cPair 3 (cPair a b)).",
            "VernacExtend",
            "39e1db5c440a890e7b695951052064ba044ed036"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "dd6071c10f7c30a2c424f8ae332bf48ad5c38302"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply codeForallIsPR.",
            "VernacExtend",
            "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))).",
            "VernacExtend",
            "3586b9c1266bcb45089fd8c5d69976e93e82a89c"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (g := fun a b : nat => cPair 3 (cPair a b)).",
            "VernacExtend",
            "a5e062cc4fb25f853ea4fdeea45715efd5a90a5c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeForallIsPR.",
            "VernacExtend",
            "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (g := fun a b : nat => cPair 3 (cPair a b)).",
            "VernacExtend",
            "94e6249d8e8b1be3be11c58ade45d308574f3e35"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeForallIsPR.",
            "VernacExtend",
            "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfEQ1 (p recs : nat) := charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) 0 * charFunction 2 beq_nat (codeFormula L codeF codeR (fol.equal L (fol.var L 0) (fol.var L 0))) (cPairPi1 p).",
            "VernacDefinition",
            "43df7035a82cdf3cbe973fe123b6dbc024a849d2"
        ],
        [
            "Lemma checkPrfEQnIsPR : forall n : nat, isPR 2 (fun p recs : nat => charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) 0 * charFunction 2 beq_nat n (cPairPi1 p)).",
            "VernacStartTheoremProof",
            "f19042280aa66c73147323700c83a31f4026fed9"
        ],
        [
            "unfold checkPrfEQ1 in |- *.",
            "VernacExtend",
            "178cc75d9ba430f8c70f713dca5d06129738fbd1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) 0 * charFunction 2 beq_nat n (cPairPi1 p)).",
            "VernacExtend",
            "57e8524be56af1957bca82a424fc34d5532dd08c"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) 0) (f' := fun p : nat => charFunction 2 beq_nat n (cPairPi1 p)).",
            "VernacExtend",
            "3141e2a96adf317158f24b9e6035c23fa520d454"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)) (f' := fun p : nat => 0).",
            "VernacExtend",
            "a8d64a9f8512ce0ac5148227eca0f1a2872a41e8"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => n).",
            "VernacExtend",
            "288198270d37bdf43b92a09a72448b94eb6b81bd"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma checkPrfEQ1IsPR : isPR 2 checkPrfEQ1.",
            "VernacStartTheoremProof",
            "0128f11f11988ce3b56b1c9a60188560ac751d2c"
        ],
        [
            "unfold checkPrfEQ1 in |- *.",
            "VernacExtend",
            "178cc75d9ba430f8c70f713dca5d06129738fbd1"
        ],
        [
            "apply checkPrfEQnIsPR.",
            "VernacExtend",
            "e5a0872af1cbc955ec7d6ec50291f9d5aac16e94"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfEQ2 (p recs : nat) := charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) 0 * charFunction 2 beq_nat (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.equal L (fol.var L 1) (fol.var L 0)))) (cPairPi1 p).",
            "VernacDefinition",
            "b9bfd31e530e746581ada5d381e1c5d9554fade2"
        ],
        [
            "Lemma checkPrfEQ2IsPR : isPR 2 checkPrfEQ2.",
            "VernacStartTheoremProof",
            "cdb8ca350a08cf6ce2fbeab4aee4acc4ba3ff0c2"
        ],
        [
            "unfold checkPrfEQ2 in |- *.",
            "VernacExtend",
            "bcdf94971d4e033b1ca65e812d1250f6a73e9828"
        ],
        [
            "apply checkPrfEQnIsPR.",
            "VernacExtend",
            "e5a0872af1cbc955ec7d6ec50291f9d5aac16e94"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfEQ3 (p recs : nat) := charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) 0 * charFunction 2 beq_nat (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.impH L (fol.equal L (fol.var L 1) (fol.var L 2)) (fol.equal L (fol.var L 0) (fol.var L 2))))) (cPairPi1 p).",
            "VernacDefinition",
            "fe3bad0231fd2c6386844527f5978de266fe4987"
        ],
        [
            "Lemma checkPrfEQ3IsPR : isPR 2 checkPrfEQ3.",
            "VernacStartTheoremProof",
            "70c47d0f51b099437820bdd3a17e599373673d71"
        ],
        [
            "unfold checkPrfEQ3 in |- *.",
            "VernacExtend",
            "5b92a9c028a7a0dc790bb93010330866e4454caa"
        ],
        [
            "apply checkPrfEQnIsPR.",
            "VernacExtend",
            "e5a0872af1cbc955ec7d6ec50291f9d5aac16e94"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeAxmEqHelp (n f : nat) : nat := nat_rec (fun _ => nat) f (fun m rec : nat => cPair 1 (cPair (cPair 0 (cPair (cPair 0 (m + m)) (cPair 0 (S (m + m))))) rec)) n.",
            "VernacDefinition",
            "c82797c7ab2a87d1485d33c56a6c02940d60716a"
        ],
        [
            "Lemma codeAxmEqHelpIsPR : isPR 2 codeAxmEqHelp.",
            "VernacStartTheoremProof",
            "150f725da7a5fb6dd50175a59e3f94f6b4338497"
        ],
        [
            "unfold codeAxmEqHelp in |- *.",
            "VernacExtend",
            "13b43db87a4c730327f54d15447248cef2146d8b"
        ],
        [
            "apply ind1ParamIsPR with (g := fun f : nat => f) (f := fun m rec f : nat => cPair 1 (cPair (cPair 0 (cPair (cPair 0 (m + m)) (cPair 0 (S (m + m))))) rec)).",
            "VernacExtend",
            "aa69822cbd0e4453a973ef1faa2d8f18257c4019"
        ],
        [
            "apply filter110IsPR with (g := fun m rec : nat => codeImp (cPair 0 (cPair (cPair 0 (m + m)) (cPair 0 (S (m + m))))) rec).",
            "VernacExtend",
            "0e63a746e39bba5529c352bc94b1a6cf583b6b09"
        ],
        [
            "apply compose2_2IsPR with (f := fun m rec : nat => cPair 0 (cPair (cPair 0 (m + m)) (cPair 0 (S (m + m))))) (g := fun m rec : nat => rec).",
            "VernacExtend",
            "ba74d8ee7596edf283918ae18cf5296b749d5c01"
        ],
        [
            "apply filter10IsPR with (g := fun m : nat => cPair 0 (cPair (cPair 0 (m + m)) (cPair 0 (S (m + m))))).",
            "VernacExtend",
            "ccc05a283e660078a84bd52098815d7e25fcf577"
        ],
        [
            "assert (forall g : nat -> nat, isPR 1 g -> isPR 1 (fun a : nat => cPair 0 (g a))).",
            "VernacExtend",
            "8a75a2de155cf8c9e80d8e8d23c76bdaa4123cd1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply compose1_2IsPR with (f := fun a : nat => 0).",
            "VernacExtend",
            "094b4a5ba85a3313c6d9694451ce8fa01a8b2bd9"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply H with (g := fun m : nat => cPair (cPair 0 (m + m)) (cPair 0 (S (m + m)))).",
            "VernacExtend",
            "9645d4aa7668f1df74b16fa7c0d10d6e7ad606b2"
        ],
        [
            "apply compose1_2IsPR with (f := fun m : nat => cPair 0 (m + m)) (f' := fun m : nat => cPair 0 (S (m + m))).",
            "VernacExtend",
            "a18d78c64eb078dd3f1da0874bc922f0f949fd77"
        ],
        [
            "apply H with (g := fun m : nat => m + m).",
            "VernacExtend",
            "5f8b4f680b66a1d464a6610f7a5e70085355c568"
        ],
        [
            "apply compose1_2IsPR with (f := fun m : nat => m) (f' := fun m : nat => m).",
            "VernacExtend",
            "ab86682a81834404654b493667bd66e2e82102f2"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply plusIsPR.",
            "VernacExtend",
            "3b0a74ba0921212c33f63b79cd048faf8df5a016"
        ],
        [
            "apply H with (g := fun m : nat => S (m + m)).",
            "VernacExtend",
            "e4cdd134cfa8374a1ae6f3ee92c900307262649e"
        ],
        [
            "apply compose1_1IsPR with (f := fun m : nat => m + m).",
            "VernacExtend",
            "590054dc715d61fb144fcf6b33ab7d7b13ebb4f3"
        ],
        [
            "apply compose1_2IsPR with (f := fun m : nat => m) (f' := fun m : nat => m).",
            "VernacExtend",
            "ab86682a81834404654b493667bd66e2e82102f2"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply plusIsPR.",
            "VernacExtend",
            "3b0a74ba0921212c33f63b79cd048faf8df5a016"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeNVars1 (n : nat) : nat := nat_rec (fun _ => nat) 0 (fun m rec : nat => S (cPair (cPair 0 (m + m)) rec)) n.",
            "VernacDefinition",
            "1e7fc0529752b9463f2fc54f87b8daf0147039b8"
        ],
        [
            "Lemma codeNVars1IsPR : isPR 1 codeNVars1.",
            "VernacStartTheoremProof",
            "b23212cb2511caf70996f57c283a1d8824c05b4e"
        ],
        [
            "unfold codeNVars1 in |- *.",
            "VernacExtend",
            "c13e339545047db1b72361fe334b95a7c4a12e41"
        ],
        [
            "apply indIsPR with (f := fun m rec : nat => S (cPair (cPair 0 (m + m)) rec)).",
            "VernacExtend",
            "ddf470f4db8e02dfc1e11a75a96097ea9b2dfaa1"
        ],
        [
            "apply compose2_1IsPR with (f := fun m rec : nat => cPair (cPair 0 (m + m)) rec).",
            "VernacExtend",
            "73bbe30a00302a5872cd0a46895a8b2e0c27d4ef"
        ],
        [
            "apply compose2_2IsPR with (f := fun m rec : nat => cPair 0 (m + m)) (g := fun m rec : nat => rec).",
            "VernacExtend",
            "ef52b410b5b5ce7dba04937769da143ecec4f2c5"
        ],
        [
            "apply filter10IsPR with (g := fun m : nat => cPair 0 (m + m)).",
            "VernacExtend",
            "67dd60a87f8514e0f2776fa8c7c0073c13ee3ae2"
        ],
        [
            "apply compose1_2IsPR with (f := fun m : nat => 0) (f' := fun m : nat => m + m).",
            "VernacExtend",
            "17735e8022a1022acd3f046c63723322fb56028f"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply compose1_2IsPR with (f := fun m : nat => m) (f' := fun m : nat => m).",
            "VernacExtend",
            "ab86682a81834404654b493667bd66e2e82102f2"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply plusIsPR.",
            "VernacExtend",
            "3b0a74ba0921212c33f63b79cd048faf8df5a016"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeNVars2 (n : nat) : nat := nat_rec (fun _ => nat) 0 (fun m rec : nat => S (cPair (cPair 0 (S (m + m))) rec)) n.",
            "VernacDefinition",
            "f63282e8a5de0ad1d940318c177221e758c6b0db"
        ],
        [
            "Lemma codeNVars2IsPR : isPR 1 codeNVars2.",
            "VernacStartTheoremProof",
            "30e354171ba56cd4a5ce853c3e336a564f405d09"
        ],
        [
            "unfold codeNVars2 in |- *.",
            "VernacExtend",
            "ac945ed7f9b962e8266793456152c8fa82ebd9b4"
        ],
        [
            "apply indIsPR with (f := fun m rec : nat => S (cPair (cPair 0 (S (m + m))) rec)).",
            "VernacExtend",
            "87ac4fbe6c8c02339f5a5c758b22a7cfb7e7b90e"
        ],
        [
            "apply compose2_1IsPR with (f := fun m rec : nat => cPair (cPair 0 (S (m + m))) rec).",
            "VernacExtend",
            "9d2a162818d84968a77fa3b69646a1d77d83291d"
        ],
        [
            "apply compose2_2IsPR with (f := fun m rec : nat => cPair 0 (S (m + m))) (g := fun m rec : nat => rec).",
            "VernacExtend",
            "c84c8edb8440262736eb1fb9a5d41681dddade72"
        ],
        [
            "apply filter10IsPR with (g := fun m : nat => cPair 0 (S (m + m))).",
            "VernacExtend",
            "8b561cde95113038d9ec3c38ded0c283215fab8f"
        ],
        [
            "apply compose1_2IsPR with (f := fun m : nat => 0) (f' := fun m : nat => S (m + m)).",
            "VernacExtend",
            "a5df16ee950d13b4a161256df854fb00de6e7f01"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply compose1_1IsPR with (f := fun m : nat => m + m).",
            "VernacExtend",
            "590054dc715d61fb144fcf6b33ab7d7b13ebb4f3"
        ],
        [
            "apply compose1_2IsPR with (f := fun m : nat => m) (f' := fun m : nat => m).",
            "VernacExtend",
            "ab86682a81834404654b493667bd66e2e82102f2"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply plusIsPR.",
            "VernacExtend",
            "3b0a74ba0921212c33f63b79cd048faf8df5a016"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeNVarsCorrect : forall n : nat, codeNVars1 n = codeTerms L codeF n (fst (nVars L n)) /\\ codeNVars2 n = codeTerms L codeF n (snd (nVars L n)).",
            "VernacStartTheoremProof",
            "8c9d0869068e3f7d876c9e4261a0f1e7a15b813d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Hrecn.",
            "VernacExtend",
            "9f2f9eb25208250dc135a15348250f012f2be502"
        ],
        [
            "induction (nVars L n).",
            "VernacExtend",
            "41dd578a29209204de567c43fa10392192a0a327"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Hrecn.",
            "VernacExtend",
            "9f2f9eb25208250dc135a15348250f012f2be502"
        ],
        [
            "induction (nVars L n).",
            "VernacExtend",
            "41dd578a29209204de567c43fa10392192a0a327"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfEQ4 (p recs : nat) := let r := cPairPi2 (cPairPi2 p) in let A := cPair (S (S (S (S r)))) (codeNVars1 (pred (codeArityR r))) in let B := cPair (S (S (S (S r)))) (codeNVars2 (pred (codeArityR r))) in notZero (codeArityR r) * charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityR r)) (codeIff A B)) (cPairPi1 p).",
            "VernacDefinition",
            "fdd72ae582954bf81f6921792067724dfa46b155"
        ],
        [
            "Lemma codeOrIsPR : isPR 2 codeOr.",
            "VernacStartTheoremProof",
            "5c5d374879c3c0918b2a94c041c2d05815553921"
        ],
        [
            "unfold codeOr in |- *.",
            "VernacExtend",
            "297733ae9259c3a7afb8b02e7165cf8250a6e670"
        ],
        [
            "apply compose2_2IsPR with (f := fun a b : nat => codeNot a) (g := fun a b : nat => b).",
            "VernacExtend",
            "a9d74d5e54358e81f6d205948e5565a621fa8735"
        ],
        [
            "apply filter10IsPR.",
            "VernacExtend",
            "a511891d7a43751c68939783b674e14f242f8594"
        ],
        [
            "apply codeNotIsPR.",
            "VernacExtend",
            "0a35a59c766204b86ed2d04c6013e7d0330a6062"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeAndIsPR : isPR 2 codeAnd.",
            "VernacStartTheoremProof",
            "a54ce59d55775b4cb39da3e2c4fe501a66f3de24"
        ],
        [
            "unfold codeAnd in |- *.",
            "VernacExtend",
            "bfe6b4aa8d0998282fb153a206936854febe7c0f"
        ],
        [
            "apply compose2_1IsPR with (f := fun a b : nat => codeOr (codeNot a) (codeNot b)).",
            "VernacExtend",
            "038a9595f26541d0b9b127d7b6410825e20d3125"
        ],
        [
            "apply compose2_2IsPR with (f := fun a b : nat => codeNot a) (g := fun a b : nat => codeNot b).",
            "VernacExtend",
            "2b69accfeabfe30fc739c2c6082fe44f278ebdfa"
        ],
        [
            "apply filter10IsPR.",
            "VernacExtend",
            "a511891d7a43751c68939783b674e14f242f8594"
        ],
        [
            "apply codeNotIsPR.",
            "VernacExtend",
            "0a35a59c766204b86ed2d04c6013e7d0330a6062"
        ],
        [
            "apply filter01IsPR.",
            "VernacExtend",
            "6554c96f4a11a34fca739d2e17d9266f8548438c"
        ],
        [
            "apply codeNotIsPR.",
            "VernacExtend",
            "0a35a59c766204b86ed2d04c6013e7d0330a6062"
        ],
        [
            "apply codeOrIsPR.",
            "VernacExtend",
            "3f3b6663c25f3b018c01638b8a6ff9b5c825cfec"
        ],
        [
            "apply codeNotIsPR.",
            "VernacExtend",
            "0a35a59c766204b86ed2d04c6013e7d0330a6062"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeIffIsPR : isPR 2 codeIff.",
            "VernacStartTheoremProof",
            "1f5fbebd73b94ab39f31adf97c0ac9afc3d5fa7c"
        ],
        [
            "unfold codeIff in |- *.",
            "VernacExtend",
            "bb5ec5e27978ece837b2b322e197aeb0b3e2b4de"
        ],
        [
            "apply compose2_2IsPR with (g := fun a b : nat => codeImp b a).",
            "VernacExtend",
            "7ce3bfeeaba5898d7d418f0b746ffe44bdca45c8"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply swapIsPR.",
            "VernacExtend",
            "df1101069b402c0319f06625614023d04b616873"
        ],
        [
            "apply codeImpIsPR.",
            "VernacExtend",
            "407e5875356c42a3b76ea5603a597b9e316f7652"
        ],
        [
            "apply codeAndIsPR.",
            "VernacExtend",
            "8ef5d95ed6e70e9c9c28ca6f1d0e5907cba4e423"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma checkPrfEQ4IsPR : isPR 2 checkPrfEQ4.",
            "VernacStartTheoremProof",
            "d041bb99be3d97a2cba2daafd2b074d2861fb1bc"
        ],
        [
            "unfold checkPrfEQ4 in |- *.",
            "VernacExtend",
            "652864d151913bb5f29d5ef850669fbef1f7cc75"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => notZero (codeArityR (cPairPi2 (cPairPi2 p))) * charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityR (cPairPi2 (cPairPi2 p)))) (codeIff (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))))) (cPairPi1 p)).",
            "VernacExtend",
            "b05ad6e95a32437f78770b144ff7ff4c53cb88b9"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2630f28b5949bc596d99f2a2710f40312039d62b"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => notZero (codeArityR (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityR (cPairPi2 (cPairPi2 p)))) (codeIff (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))))) (cPairPi1 p)).",
            "VernacExtend",
            "4a1c9dbedb1ae78304263bdd2b0f88370abe2e49"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => codeArityR (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "46d32fc87bfd7259f9809036fcbc48b86b9b4754"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeArityRIsPR.",
            "VernacExtend",
            "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
        ],
        [
            "apply notZeroIsPR.",
            "VernacExtend",
            "d560836695e6a004a1fd240990803d448a999c93"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => codeAxmEqHelp (pred (codeArityR (cPairPi2 (cPairPi2 p)))) (codeIff (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))))).",
            "VernacExtend",
            "6fdee9b7e475235f198bae256a64f887675b8388"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => pred (codeArityR (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => codeIff (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p))))))).",
            "VernacExtend",
            "eed4231c2682e0c35dab2faa6ec9102fa9f8951f"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => codeArityR (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "46d32fc87bfd7259f9809036fcbc48b86b9b4754"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeArityRIsPR.",
            "VernacExtend",
            "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))).",
            "VernacExtend",
            "eaf5eb3063e9fa3e604bb307c0756186a11f4ae5"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => S (S (S (S (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "f24c00b528b94601fe8628046ae3c8bda81adb70"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)) (g := iterate S 4).",
            "VernacExtend",
            "1f60c3959b5f9444c49aa95ea8bac7bf370afe6c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply iterateIsPR.",
            "VernacExtend",
            "23f2ec9f239a02136a9ab4eaecd36305d8bf56e6"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => pred (codeArityR (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "e2449728667752bdc25d71b281df85f8c434b7b8"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => codeArityR (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "46d32fc87bfd7259f9809036fcbc48b86b9b4754"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeArityRIsPR.",
            "VernacExtend",
            "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply codeNVars1IsPR.",
            "VernacExtend",
            "1b7c92290fcf117e23dbe3ab151b5f72b609c3e2"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => S (S (S (S (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "3ea746e4ff1587f5753281fbcd729dfef70c4e07"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)) (g := iterate S 4).",
            "VernacExtend",
            "1f60c3959b5f9444c49aa95ea8bac7bf370afe6c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply iterateIsPR.",
            "VernacExtend",
            "23f2ec9f239a02136a9ab4eaecd36305d8bf56e6"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => pred (codeArityR (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "e2449728667752bdc25d71b281df85f8c434b7b8"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => codeArityR (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "46d32fc87bfd7259f9809036fcbc48b86b9b4754"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeArityRIsPR.",
            "VernacExtend",
            "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply codeNVars2IsPR.",
            "VernacExtend",
            "bf702bb691236d7562f2f71318cb972c1c34d58d"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply codeIffIsPR.",
            "VernacExtend",
            "5c3d180a045c0ded62b867b1bc81d6a5698054cf"
        ],
        [
            "apply codeAxmEqHelpIsPR.",
            "VernacExtend",
            "d75c9acde4f9510c692afba4febad546324d4340"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfEQ5 (p recs : nat) := let f := cPairPi2 (cPairPi2 p) in notZero (codeArityF f) * charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityF f)) (cPair 0 (cPair (cPair (S f) (codeNVars1 (pred (codeArityF f)))) (cPair (S f) (codeNVars2 (pred (codeArityF f))))))) (cPairPi1 p).",
            "VernacDefinition",
            "fc56c9f30307df506283d56a85a7d08c67807f17"
        ],
        [
            "Lemma checkPrfEQ5IsPR : isPR 2 checkPrfEQ5.",
            "VernacStartTheoremProof",
            "be215ec8da7837beffcfff2e265f224b1643a9a3"
        ],
        [
            "unfold checkPrfEQ5 in |- *.",
            "VernacExtend",
            "7bd6b34ffd4637c0de2ab12288d9f039fd39ea9a"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => notZero (codeArityF (cPairPi2 (cPairPi2 p))) * charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityF (cPairPi2 (cPairPi2 p)))) (cPair 0 (cPair (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p))))))))) (cPairPi1 p)).",
            "VernacExtend",
            "a3450cc16a2e402776ec0e2fe78ef025b27a8a6b"
        ],
        [
            "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "2630f28b5949bc596d99f2a2710f40312039d62b"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => notZero (codeArityF (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityF (cPairPi2 (cPairPi2 p)))) (cPair 0 (cPair (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p))))))))) (cPairPi1 p)).",
            "VernacExtend",
            "405914cbfafa604195784700f9adbbec86e76425"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => codeArityF (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "e480e9925decaa9451effa054739f20a9a5485fa"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeArityFIsPR.",
            "VernacExtend",
            "eab601a7a9a83684a31eb2c9739040d03a0fd095"
        ],
        [
            "apply notZeroIsPR.",
            "VernacExtend",
            "d560836695e6a004a1fd240990803d448a999c93"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => codeAxmEqHelp (pred (codeArityF (cPairPi2 (cPairPi2 p)))) (cPair 0 (cPair (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p))))))))).",
            "VernacExtend",
            "9e4413e366e99771027a6f953d99d6c7e45f315f"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => pred (codeArityF (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPair 0 (cPair (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))))).",
            "VernacExtend",
            "a0fc1679f56f64b501fbb2bec0520d69c610a8d1"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => codeArityF (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "e480e9925decaa9451effa054739f20a9a5485fa"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeArityFIsPR.",
            "VernacExtend",
            "eab601a7a9a83684a31eb2c9739040d03a0fd095"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (g := fun a b : nat => cPair 0 (cPair a b)).",
            "VernacExtend",
            "0439ed1c7009f7ffca15bd7bd590d65380465f9c"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => S (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "ce7ec3373de0a8d2d28605477492f2989d570332"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => pred (codeArityF (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "5594fdf5d5a6ab53404d9dea82aa575198ea3af8"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => codeArityF (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "e480e9925decaa9451effa054739f20a9a5485fa"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeArityFIsPR.",
            "VernacExtend",
            "eab601a7a9a83684a31eb2c9739040d03a0fd095"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply codeNVars1IsPR.",
            "VernacExtend",
            "1b7c92290fcf117e23dbe3ab151b5f72b609c3e2"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply compose1_2IsPR with (f := fun p : nat => S (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p))))).",
            "VernacExtend",
            "c50508dd2fbfd8f5f935ade018c6dc3e4e8d0067"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => pred (codeArityF (cPairPi2 (cPairPi2 p)))).",
            "VernacExtend",
            "5594fdf5d5a6ab53404d9dea82aa575198ea3af8"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => codeArityF (cPairPi2 (cPairPi2 p))).",
            "VernacExtend",
            "e480e9925decaa9451effa054739f20a9a5485fa"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
            "VernacExtend",
            "9210bc3d6fdc95edad86ae1e055939900b42a540"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply codeArityFIsPR.",
            "VernacExtend",
            "eab601a7a9a83684a31eb2c9739040d03a0fd095"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply codeNVars2IsPR.",
            "VernacExtend",
            "bf702bb691236d7562f2f71318cb972c1c34d58d"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply compose2_2IsPR with (f := fun a b : nat => 0).",
            "VernacExtend",
            "115a68521a28bcac552cdde780124b403f88a455"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 0).",
            "VernacExtend",
            "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply codeAxmEqHelpIsPR.",
            "VernacExtend",
            "d75c9acde4f9510c692afba4febad546324d4340"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply eqIsPR.",
            "VernacExtend",
            "493018d16fb870ceb55150454019ccac18f41f8a"
        ],
        [
            "apply multIsPR.",
            "VernacExtend",
            "e81beaf90a6eafd17be42571cffda5efa424c833"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrfHelp : nat -> nat := evalStrongRec 0 (fun p recs : nat => let type := cPairPi1 (cPairPi2 p) in switchPR type (switchPR (pred type) (switchPR (pred (pred type)) (switchPR (pred (pred (pred type))) (switchPR (pred (pred (pred (pred type)))) (switchPR (pred (pred (pred (pred (pred type))))) (switchPR (pred (pred (pred (pred (pred (pred type)))))) (switchPR (pred (pred (pred (pred (pred (pred (pred type))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred type)))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred type))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type)))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type)))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type))))))))))))) 0 (checkPrfEQ5 p recs)) (checkPrfEQ4 p recs)) (checkPrfEQ3 p recs)) (checkPrfEQ2 p recs)) (checkPrfEQ1 p recs)) (checkPrfFA3 p recs)) (checkPrfFA2 p recs)) (checkPrfFA1 p recs)) (checkPrfCP p recs)) (checkPrfIMP2 p recs)) (checkPrfIMP1 p recs)) (checkPrfGEN p recs)) (checkPrfMP p recs)) (checkPrfAXM p recs)).",
            "VernacDefinition",
            "ff15afaa6c8a1e59d16ebdb6cff4af1726cc13c6"
        ],
        [
            "Lemma checkPrfHelpIsPR : isPR 1 checkPrfHelp.",
            "VernacStartTheoremProof",
            "aeee71045ce1c80697f22ccd8ffb204b15150ce8"
        ],
        [
            "set (f := list_rec (fun _ => nat -> nat -> nat -> nat) (fun _ _ _ : nat => 0) (fun (a : nat -> nat -> nat) (l : list (nat -> nat -> nat)) (rec : nat -> nat -> nat -> nat) (n p recs : nat) => switchPR (iterate pred n (cPairPi1 (cPairPi2 p))) (rec (S n) p recs) (a p recs))) in *.",
            "VernacExtend",
            "86c77258482f973e066ac7f343bf8da8f49597c1"
        ],
        [
            "set (l := checkPrfAXM :: checkPrfMP :: checkPrfGEN :: checkPrfIMP1 :: checkPrfIMP2 :: checkPrfCP :: checkPrfFA1 :: checkPrfFA2 :: checkPrfFA3 :: checkPrfEQ1 :: checkPrfEQ2 :: checkPrfEQ3 :: checkPrfEQ4 :: checkPrfEQ5 :: nil) in *.",
            "VernacExtend",
            "22bdbe0ca08e61a24dae9c66ef22bbccc3974e50"
        ],
        [
            "assert (forall (l : list (nat -> nat -> nat)) (n : nat), list_rect (fun _ => Set) unit (fun (a : nat -> nat -> nat) _ (rec : Set) => (isPR 2 a * rec)%type) l -> isPR 2 (f l n)).",
            "VernacExtend",
            "dc4d0c9e908e60e30aca3c57b253c465bfa20749"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction l0 as [| a l0 Hrecl0].",
            "VernacExtend",
            "355e1ba76e42cd2257f7b95848bf9c873a316dd2"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 0).",
            "VernacExtend",
            "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun p recs : nat => iterate pred n (cPairPi1 (cPairPi2 p))).",
            "VernacExtend",
            "34bbb95518672074687adf20f2d960f6cee83780"
        ],
        [
            "apply filter10IsPR with (g := fun p : nat => iterate pred n (cPairPi1 (cPairPi2 p))).",
            "VernacExtend",
            "ce7cdeb75e4b06ab0d2ef0c342eed18b8929a907"
        ],
        [
            "apply compose1_1IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 p)).",
            "VernacExtend",
            "e527e949f9b3aad929590e607cd524e050d6e5d8"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply iterateIsPR.",
            "VernacExtend",
            "23f2ec9f239a02136a9ab4eaecd36305d8bf56e6"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply Hrecl0.",
            "VernacExtend",
            "62008c4cf40472fec8c2fae3bc14e53df63be561"
        ],
        [
            "eapply snd.",
            "VernacExtend",
            "c1d4f0f7bd16d788199c4b8821a23663fc96eac3"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "eapply fst.",
            "VernacExtend",
            "31e126a7065c8dfd4a5364712018d1d23a2adc05"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "assert (isPR 2 (f l 0)).",
            "VernacExtend",
            "0b70493124aee9dc91700c927cc466ee3ed89a5b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "apply checkPrfAXMIsPR.",
            "VernacExtend",
            "334eba3718841cabd6e34323fcf5b5a9fc577db2"
        ],
        [
            "apply checkPrfMPIsPR.",
            "VernacExtend",
            "ac81133ff074e56504890865a81e8663fe6602c4"
        ],
        [
            "apply checkPrfGENIsPR.",
            "VernacExtend",
            "5e25cf960afb482d673934fa7768345165f34490"
        ],
        [
            "apply checkPrfIMP1IsPR.",
            "VernacExtend",
            "2956761aa5eab3f456f44e0d76a40690102d54a4"
        ],
        [
            "apply checkPrfIMP2IsPR.",
            "VernacExtend",
            "3b476ab14b4eae8600c4a7081462676c43995e8a"
        ],
        [
            "apply checkPrfCPIsPR.",
            "VernacExtend",
            "13296a5b390c7c4e71d3997a423f6b40a922cf81"
        ],
        [
            "apply checkPrfFA1IsPR.",
            "VernacExtend",
            "6967ca922a31193bd951fd9b4f1c5f0e69766b4f"
        ],
        [
            "apply checkPrfFA2IsPR.",
            "VernacExtend",
            "4b333ad1371416e6cd96223e42b56c4ec1e78c6a"
        ],
        [
            "apply checkPrfFA3IsPR.",
            "VernacExtend",
            "43150b0ab36e47faef2d528fe0243e17212b56c4"
        ],
        [
            "apply checkPrfEQ1IsPR.",
            "VernacExtend",
            "b826a78f7387ddc37fbc8886d5ce00e53aa1ddab"
        ],
        [
            "apply checkPrfEQ2IsPR.",
            "VernacExtend",
            "3a8343af2afe276d2c6ef1110246fd3b0d0adae3"
        ],
        [
            "apply checkPrfEQ3IsPR.",
            "VernacExtend",
            "ba991ba6e7cdcb126b6d768d0adcebace18feac4"
        ],
        [
            "apply checkPrfEQ4IsPR.",
            "VernacExtend",
            "f00fd5c7efb1741f0b2d61a4a2c7157007e8b0ca"
        ],
        [
            "apply checkPrfEQ5IsPR.",
            "VernacExtend",
            "7fb6ea337ccac9df1964a4ed0a5b90322d04f7bf"
        ],
        [
            "unfold checkPrfHelp in |- *.",
            "VernacExtend",
            "86faaeb06d53cc78f8842bf324f53cef27f34514"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition checkPrf (f p : nat) : nat := switchPR (wellFormedFormula f) (checkPrfHelp (cPair f p)) 0.",
            "VernacDefinition",
            "75b2ed0fa062228e0e59ccdaf6c8f33dcdc90313"
        ],
        [
            "Lemma checkPrfIsPR : isPR 2 checkPrf.",
            "VernacStartTheoremProof",
            "6eb66df22de16644ea9309bd1657d3ea9a02d8ef"
        ],
        [
            "unfold checkPrf in |- *.",
            "VernacExtend",
            "3e453d7494fa7091bc79e9374a2cef4d256cd59c"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun f p : nat => wellFormedFormula f) (f2 := fun f p : nat => checkPrfHelp (cPair f p)) (f3 := fun f p : nat => 0).",
            "VernacExtend",
            "8d7eb622624f0c96d229b5db3f1f6b811abc0225"
        ],
        [
            "apply filter10IsPR.",
            "VernacExtend",
            "a511891d7a43751c68939783b674e14f242f8594"
        ],
        [
            "unfold wellFormedFormula in |- *.",
            "VernacExtend",
            "8ee3e5409e20ff24a1dd69fc3761bb8c5fa24cde"
        ],
        [
            "apply wellFormedFormulaIsPR.",
            "VernacExtend",
            "88de7a17a4d8bc9d27add2356da5143cd1e49d78"
        ],
        [
            "apply codeArityFIsPR.",
            "VernacExtend",
            "eab601a7a9a83684a31eb2c9739040d03a0fd095"
        ],
        [
            "apply codeArityRIsPR.",
            "VernacExtend",
            "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
        ],
        [
            "apply compose2_1IsPR.",
            "VernacExtend",
            "445bc7d854d3d7e2a09e4a95de2fd77f9491716b"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply checkPrfHelpIsPR.",
            "VernacExtend",
            "42eb1aea9a570b854c5eb684059d5b4ed8f9e683"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 0).",
            "VernacExtend",
            "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma checkPrfCorrect1 : forall (l : list Formula) (f : Formula) (p : Prf l f), checkPrf (codeFormula L codeF codeR f) (codePrf L codeF codeR l f p) = S (codeList (map (codeFormula L codeF codeR) l)).",
            "VernacStartTheoremProof",
            "291db44597e4f5acf74bf59d60c3764bee2ba047"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold checkPrf in |- *.",
            "VernacExtend",
            "3e453d7494fa7091bc79e9374a2cef4d256cd59c"
        ],
        [
            "rewrite (wellFormedFormulaCorrect1 L codeF codeArityF codeArityFIsCorrect1 codeR codeArityR codeArityRIsCorrect1).",
            "VernacExtend",
            "9eb8a453d21b8d0bee69a5f4f892e0ec32d38ac5"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "lazy beta delta [checkPrfHelp] in |- *.",
            "VernacExtend",
            "ee8246cc641f951a48923a9da3f8b305b7f8a2e3"
        ],
        [
            "set (A := fun p0 recs : nat => let type := cPairPi1 (cPairPi2 p0) in switchPR type (switchPR (pred type) (switchPR (pred (pred type)) (switchPR (pred (pred (pred type))) (switchPR (pred (pred (pred (pred type)))) (switchPR (pred (pred (pred (pred (pred type))))) (switchPR (pred (pred (pred (pred (pred (pred type)))))) (switchPR (pred (pred (pred (pred (pred (pred (pred type))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred type)))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred type))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type)))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type)))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type))))))))))))) 0 (checkPrfEQ5 p0 recs)) (checkPrfEQ4 p0 recs)) (checkPrfEQ3 p0 recs)) (checkPrfEQ2 p0 recs)) (checkPrfEQ1 p0 recs)) (checkPrfFA3 p0 recs)) (checkPrfFA2 p0 recs)) (checkPrfFA1 p0 recs)) (checkPrfCP p0 recs)) (checkPrfIMP2 p0 recs)) (checkPrfIMP1 p0 recs)) (checkPrfGEN p0 recs)) (checkPrfMP p0 recs)) (checkPrfAXM p0 recs)) in *.",
            "VernacExtend",
            "78797e3c772e80170c31ec787db67097606c5ce4"
        ],
        [
            "induction p as [A0| Axm1 Axm2 A0 B p1 Hrecp1 p0 Hrecp0| Axm A0 v n p Hrecp| A0 B| A0 B C| A0 B| A0 v t| A0 v n| A0 B v| | | | R| f]; unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *; rewrite computeEvalStrongRecHelp; unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *; simpl in |- *; rewrite cPairProjections1.",
            "VernacExtend",
            "4ec40cc4b4d63ff0a7b32c9c6052a897f4511223"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ]; simpl in |- *.",
            "VernacExtend",
            "77317dca6c73d8f2b5096c2aeafae79bf2914645"
        ],
        [
            "unfold checkPrfAXM in |- *.",
            "VernacExtend",
            "c60a622321b3bfab3e2563e7932853b17f85782b"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ]; simpl in |- *.",
            "VernacExtend",
            "77317dca6c73d8f2b5096c2aeafae79bf2914645"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "set (C := cPair (cPair (cPair 1 (cPair (codeFormula L codeF codeR A0) (codeFormula L codeF codeR B))) (codePrf L codeF codeR Axm1 (fol.impH L A0 B) p1)) (cPair (codeFormula L codeF codeR A0) (codePrf L codeF codeR Axm2 A0 p0))) in *.",
            "VernacExtend",
            "692afde33580b0a404680f3f2963b7705a25e896"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold C at 1 in |- *.",
            "VernacExtend",
            "1a8675f6d5537599c2151ca97acf91c1d18617d9"
        ],
        [
            "unfold checkPrfMP in |- *.",
            "VernacExtend",
            "c8332ce9f1d1b928a4151c79f1f072ee044c194d"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "rewrite Hrecp0.",
            "VernacExtend",
            "32c1f58115cc56d4ff0c9c49da0e833d1296449d"
        ],
        [
            "replace (cPair 1 (cPair (codeFormula L codeF codeR A0) (codeFormula L codeF codeR B))) with (codeFormula L codeF codeR (fol.impH L A0 B)); [ idtac | reflexivity ].",
            "VernacExtend",
            "383bc4908b651c3d293d1c95436848a4c62424d1"
        ],
        [
            "rewrite Hrecp1.",
            "VernacExtend",
            "a5ac074cecc349f8ce92655e13a1b749e5049837"
        ],
        [
            "rewrite (wellFormedFormulaCorrect1 L codeF codeArityF codeArityFIsCorrect1 codeR codeArityR codeArityRIsCorrect1).",
            "VernacExtend",
            "9eb8a453d21b8d0bee69a5f4f892e0ec32d38ac5"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (map (codeFormula L codeF codeR) (Axm1 ++ Axm2)) with (map (codeFormula L codeF codeR) Axm1 ++ map (codeFormula L codeF codeR) Axm2).",
            "VernacExtend",
            "0e4f54cd59aa4483e88b1bd5cd5089c6b59320c1"
        ],
        [
            "rewrite codeAppCorrect.",
            "VernacExtend",
            "2449e46e9b0d3ec4da65240655ab28b554eed145"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "generalize (codeFormula L codeF codeR); intro.",
            "VernacExtend",
            "45d78b5bd02e3e3315588fceadb32d2193dbfe50"
        ],
        [
            "clear p1 A Hrecp1 Hrecp0 C.",
            "VernacExtend",
            "2be14b762002da72584dd106d22b9f29523fde0d"
        ],
        [
            "induction Axm1 as [| a Axm1 HrecAxm1].",
            "VernacExtend",
            "b19b5937975f128f2fc6c2be7e37eaff6ad19a9d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite HrecAxm1.",
            "VernacExtend",
            "00907bebd1b46a677526b06d26381d04c52f8b63"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply lt_le_trans; [ idtac | apply cPairLe2 ].",
            "VernacExtend",
            "25981248bba4d843213e95c7e307c6135695057a"
        ],
        [
            "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
            "VernacExtend",
            "b3aa85d967c3629158b50c3cda1ad7596272868f"
        ],
        [
            "unfold C in |- *.",
            "VernacExtend",
            "cb35f243768bdbad0fe05a3ae5cac30a865b5759"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "eapply lt_le_trans; [ idtac | apply cPairLe2 ].",
            "VernacExtend",
            "25981248bba4d843213e95c7e307c6135695057a"
        ],
        [
            "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
            "VernacExtend",
            "b3aa85d967c3629158b50c3cda1ad7596272868f"
        ],
        [
            "unfold C in |- *.",
            "VernacExtend",
            "cb35f243768bdbad0fe05a3ae5cac30a865b5759"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfGEN in |- *.",
            "VernacExtend",
            "d7758d9bd2adff6d581e6ae47a8a17e1160c3e26"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "repeat rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
        ],
        [
            "rewrite Hrecp.",
            "VernacExtend",
            "f20127a12a278a3a40a00386df7a771f34199aab"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "rewrite codeFreeVarListFormulaCorrect.",
            "VernacExtend",
            "23736b457f22db179c614bd7c90c806e8c754c19"
        ],
        [
            "rewrite codeInCorrect.",
            "VernacExtend",
            "dd48b7b346befe83481fe8e1e05cd1e924730a51"
        ],
        [
            "induction (In_dec eq_nat_dec v (freeVarListFormula L Axm)).",
            "VernacExtend",
            "dca2c5f4c7bb2b0e980412537d49efd674dfbb6b"
        ],
        [
            "elim n.",
            "VernacExtend",
            "c68f766a88bb5402d72ee6adaca953661a5d18b2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (charFunction 2 beq_nat (cPair 3 (cPair v (codeFormula L codeF codeR A0))) (cPair 3 (cPair v (codeFormula L codeF codeR A0)))) with 1.",
            "VernacExtend",
            "644b1cbe275500412db43510828d05bb239f2801"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply lt_le_trans; [ idtac | apply cPairLe2 ].",
            "VernacExtend",
            "25981248bba4d843213e95c7e307c6135695057a"
        ],
        [
            "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
            "VernacExtend",
            "b3aa85d967c3629158b50c3cda1ad7596272868f"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfIMP1 in |- *.",
            "VernacExtend",
            "9e211d9a93d5fcf92c9116ed225fcc05fc33f3c5"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfIMP2 in |- *.",
            "VernacExtend",
            "1361bbd8ad719579122b16c5de608a39dbefba1f"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfCP in |- *.",
            "VernacExtend",
            "799d0befaa01a8f618c800fc2ba767228d597966"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfFA1 in |- *.",
            "VernacExtend",
            "061b7fea3c9480423a4e7847563359e1b9ab2050"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "rewrite codeSubFormulaCorrect.",
            "VernacExtend",
            "2942294961d93b57caac2eb594398e69db92c545"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "rewrite (wellFormedTermCorrect1 L codeF codeArityF codeArityFIsCorrect1).",
            "VernacExtend",
            "581807f07f14ef969d45f1ea03de4275a8aded46"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfFA2 in |- *.",
            "VernacExtend",
            "b2deab87271068f57bb61dcd1e9df76bcbbbefa3"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "rewrite codeFreeVarFormulaCorrect.",
            "VernacExtend",
            "163540a693c0f8ae9a21f61ca5d4354dddf570b8"
        ],
        [
            "rewrite codeInCorrect.",
            "VernacExtend",
            "dd48b7b346befe83481fe8e1e05cd1e924730a51"
        ],
        [
            "induction (In_dec eq_nat_dec v (freeVarFormula L A0)).",
            "VernacExtend",
            "1bf61855c49484c4f151e2906bf7e7b5b8ff4eb9"
        ],
        [
            "elim n.",
            "VernacExtend",
            "c68f766a88bb5402d72ee6adaca953661a5d18b2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfFA3 in |- *.",
            "VernacExtend",
            "a3384a6d8e38d95e1c7379c75d1184665cd9ef64"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "set (C := cPair 0 (cPair (codeTerm L codeF (fol.var L 0)) (codeTerm L codeF (fol.var L 0)))) in *.",
            "VernacExtend",
            "d100260ea1e955b722acc6cc00d91ed0da3c52ce"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "cut (cPairPi1 (cPairPi2 (cPair C (cPair 9 0))) = 9); [ intro H; rewrite H; clear H | idtac ].",
            "VernacExtend",
            "bdc60714079645b130ddde30712f2492a1b62cfb"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfEQ1 in |- *.",
            "VernacExtend",
            "178cc75d9ba430f8c70f713dca5d06129738fbd1"
        ],
        [
            "rewrite (cPairProjections2 C (cPair 9 0)).",
            "VernacExtend",
            "e8ded0c204f8d74b1cf6f8c49cc4e029ab12abf7"
        ],
        [
            "rewrite (cPairProjections1 C (cPair 9 0)).",
            "VernacExtend",
            "4c31c1b2cc4a6334296b6be0c2276da0d3a9e34f"
        ],
        [
            "rewrite (cPairProjections2 9 0).",
            "VernacExtend",
            "495fa74b764ae6d3abd390a275b9175bfc57ccfb"
        ],
        [
            "unfold C in |- *.",
            "VernacExtend",
            "cb35f243768bdbad0fe05a3ae5cac30a865b5759"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite <- beq_nat_refl.",
            "VernacExtend",
            "6483e653b28875693c3c92037ba92da24c711ae3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite (cPairProjections2 C (cPair 9 0)).",
            "VernacExtend",
            "e8ded0c204f8d74b1cf6f8c49cc4e029ab12abf7"
        ],
        [
            "rewrite (cPairProjections1 9 0).",
            "VernacExtend",
            "5b9cc1da1edde13ce8a109d80a518df7bf8eecff"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "set (C := cPair 1 (cPair (cPair 0 (cPair (codeTerm L codeF (fol.var L 0)) (codeTerm L codeF (fol.var L 1)))) (cPair 0 (cPair (codeTerm L codeF (fol.var L 1)) (codeTerm L codeF (fol.var L 0)))))) in *.",
            "VernacExtend",
            "90e569e7060b5977869665d8b3319637ea0d5094"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "cut (cPairPi1 (cPairPi2 (cPair C (cPair 10 0))) = 10).",
            "VernacExtend",
            "74ab024f3a1d936a93d0af627b1491b8bea3bd03"
        ],
        [
            "generalize (cPairPi1 (cPairPi2 (cPair C (cPair 10 0)))).",
            "VernacExtend",
            "b0549e3de5891231b641bc1081e380815d1877f5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfEQ2 in |- *.",
            "VernacExtend",
            "bcdf94971d4e033b1ca65e812d1250f6a73e9828"
        ],
        [
            "replace (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.equal L (fol.var L 1) (fol.var L 0)))) with C; [ idtac | reflexivity ].",
            "VernacExtend",
            "c91e5a3ce6ef9875c745c81435174196992b6ec5"
        ],
        [
            "generalize C; intros.",
            "VernacExtend",
            "fc16a19222e1448723ca8824b6d08e85c0b27aa4"
        ],
        [
            "rewrite (cPairProjections2 C0 (cPair 10 0)).",
            "VernacExtend",
            "83b88431610cfa58108da55432bba35a662098e8"
        ],
        [
            "rewrite (cPairProjections2 10 0).",
            "VernacExtend",
            "f79c11a15f73c297ce7e11060c27aaf2fd2cb363"
        ],
        [
            "rewrite (cPairProjections1 C0 (cPair 10 0)).",
            "VernacExtend",
            "1035279a01ed4a0c384827ec3f363b8e450935f2"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "repeat rewrite <- beq_nat_refl.",
            "VernacExtend",
            "53174f94e0df20ef958a89885ff7427a6c519153"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite (cPairProjections2 C (cPair 10 0)).",
            "VernacExtend",
            "35e75a74a81209462e35c160acfcb43be0623e95"
        ],
        [
            "rewrite (cPairProjections1 10 0).",
            "VernacExtend",
            "fe55b0cff72f843c02e3a8d7015d51b36a7e6452"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "set (C := cPair 1 (cPair (cPair 0 (cPair (codeTerm L codeF (fol.var L 0)) (codeTerm L codeF (fol.var L 1)))) (cPair 1 (cPair (cPair 0 (cPair (codeTerm L codeF (fol.var L 1)) (codeTerm L codeF (fol.var L 2)))) (cPair 0 (cPair (codeTerm L codeF (fol.var L 0)) (codeTerm L codeF (fol.var L 2)))))))) in *.",
            "VernacExtend",
            "0bcf49df0a0ecfcb4738cff5a6299d30a92bfc1b"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "cut (cPairPi1 (cPairPi2 (cPair C (cPair 11 0))) = 11).",
            "VernacExtend",
            "c1ad2b4f9d91d0bb1077ee0d13c4d3878d0e4ca0"
        ],
        [
            "generalize (cPairPi1 (cPairPi2 (cPair C (cPair 11 0)))).",
            "VernacExtend",
            "cd8aa0d9e8e8448c952704412ebb2964fc957bdc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfEQ3 in |- *.",
            "VernacExtend",
            "5b92a9c028a7a0dc790bb93010330866e4454caa"
        ],
        [
            "replace (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.impH L (fol.equal L (fol.var L 1) (fol.var L 2)) (fol.equal L (fol.var L 0) (fol.var L 2))))) with C; [ idtac | reflexivity ].",
            "VernacExtend",
            "d1a78c3d7160d50c4daf7bca36cfc396d69c1135"
        ],
        [
            "generalize C; intros.",
            "VernacExtend",
            "fc16a19222e1448723ca8824b6d08e85c0b27aa4"
        ],
        [
            "rewrite (cPairProjections2 C0 (cPair 11 0)).",
            "VernacExtend",
            "129d016dc85765ad3ec778172a16573e25882174"
        ],
        [
            "rewrite (cPairProjections1 C0 (cPair 11 0)).",
            "VernacExtend",
            "3321a1ea85d9310b83e89a7daafaf93acf3a5b66"
        ],
        [
            "rewrite (cPairProjections2 11 0).",
            "VernacExtend",
            "53cf02c914743ab8b508730519e4b397a0d85f86"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "repeat rewrite <- beq_nat_refl.",
            "VernacExtend",
            "53174f94e0df20ef958a89885ff7427a6c519153"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite (cPairProjections2 C (cPair 11 0)).",
            "VernacExtend",
            "90e0629aefe1108ce77c38b412cedd362cdf47b4"
        ],
        [
            "rewrite (cPairProjections1 11 0).",
            "VernacExtend",
            "0f7ba73a9ea1f5a722009f470c870ca85abb6cba"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfEQ4 in |- *.",
            "VernacExtend",
            "652864d151913bb5f29d5ef850669fbef1f7cc75"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "rewrite codeArityRIsCorrect1.",
            "VernacExtend",
            "6da173dea381617cce613489b7df589af3b4106c"
        ],
        [
            "replace (codeAxmEqHelp (pred (S (arity L (inl (Functions L) R)))) (codeIff (cPair (S (S (S (S (codeR R))))) (codeNVars1 (pred (S (arity L (inl (Functions L) R)))))) (cPair (S (S (S (S (codeR R))))) (codeNVars2 (pred (S (arity L (inl (Functions L) R)))))))) with (codeFormula L codeF codeR (AxmEq4 L R)).",
            "VernacExtend",
            "3aa1449fdb914995eddca997dce1194fac7f8d48"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "repeat rewrite <- beq_nat_refl.",
            "VernacExtend",
            "53174f94e0df20ef958a89885ff7427a6c519153"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold AxmEq4 in |- *.",
            "VernacExtend",
            "44e9ba0324ffc11cc8d1454bd91ebcf7e0f9ee51"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction (codeNVarsCorrect (arity L (inl (Functions L) R))).",
            "VernacExtend",
            "67512770b57593ae43a96186a7b87d6cc3d22d9c"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "clear H H0.",
            "VernacExtend",
            "a743351ff441835fe992d483bf3a5b58c3fccd77"
        ],
        [
            "induction (nVars L (arity L (inl (Functions L) R))).",
            "VernacExtend",
            "96180f71b5ef66961b8a75151e0cca137a56d3cc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (codeIff (cPair (S (S (S (S (codeR R))))) (codeTerms L codeF (arity L (inl (Functions L) R)) a)) (cPair (S (S (S (S (codeR R))))) (codeTerms L codeF (arity L (inl (Functions L) R)) b))) with (codeFormula L codeF codeR (iffH L (fol.atomic L R a) (fol.atomic L R b))).",
            "VernacExtend",
            "54090068fb05038d280ddca41eee20cc46263610"
        ],
        [
            "generalize (arity L (inl (Functions L) R)).",
            "VernacExtend",
            "7c42af5ff6c2cfa0a4a1661050a8bd8b89c81d43"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Hrecn.",
            "VernacExtend",
            "9f2f9eb25208250dc135a15348250f012f2be502"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite <- codeIffCorrect.",
            "VernacExtend",
            "449a58f30a385bca04ecd9fe58ea16eb5a94a75f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfEQ5 in |- *.",
            "VernacExtend",
            "7bd6b34ffd4637c0de2ab12288d9f039fd39ea9a"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "rewrite codeArityFIsCorrect1.",
            "VernacExtend",
            "2e9851d53f2b7325903df1c7b78179a866aa3d93"
        ],
        [
            "replace (codeAxmEqHelp (pred (S (arity L (inr (Relations L) f)))) (cPair 0 (cPair (cPair (S (codeF f)) (codeNVars1 (pred (S (arity L (inr (Relations L) f)))))) (cPair (S (codeF f)) (codeNVars2 (pred (S (arity L (inr (Relations L) f))))))))) with (codeFormula L codeF codeR (AxmEq5 L f)).",
            "VernacExtend",
            "f45285b3f4a06f86da0df0c9ade0ec67782f245d"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "repeat rewrite <- beq_nat_refl.",
            "VernacExtend",
            "53174f94e0df20ef958a89885ff7427a6c519153"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold AxmEq5 in |- *.",
            "VernacExtend",
            "d3fab2e6c8c2978249a69425e337d98d868d7e83"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction (codeNVarsCorrect (arity L (inr (Relations L) f))).",
            "VernacExtend",
            "5c5b4c535538d5f7dbf022fcd8d6d573cbcbdda3"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "clear H H0.",
            "VernacExtend",
            "a743351ff441835fe992d483bf3a5b58c3fccd77"
        ],
        [
            "induction (nVars L (arity L (inr (Relations L) f))).",
            "VernacExtend",
            "03c142b39df6d413ec04711d0b5fa7d851875d71"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (cPair 0 (cPair (cPair (S (codeF f)) (codeTerms L codeF (arity L (inr (Relations L) f)) a)) (cPair (S (codeF f)) (codeTerms L codeF (arity L (inr (Relations L) f)) b)))) with (codeFormula L codeF codeR (fol.equal L (fol.apply L f a) (fol.apply L f b))).",
            "VernacExtend",
            "a0bee7c7b5c5433446eb45fee4d6600dc6a9c505"
        ],
        [
            "generalize (arity L (inr (Relations L) f)).",
            "VernacExtend",
            "04693de6612937e2347fd7390d2a9b7c2594930a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Hrecn.",
            "VernacExtend",
            "9f2f9eb25208250dc135a15348250f012f2be502"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma checkPrfCorrect2 : forall n m : nat, checkPrf n m <> 0 -> exists f : Formula, codeFormula L codeF codeR f = n /\\ (exists l : list Formula, (exists p : Prf l f, codePrf L codeF codeR l f p = m)).",
            "VernacStartTheoremProof",
            "f8c832aeebf6885c033f86d0eef59adfba78b9b8"
        ],
        [
            "assert (multLemma1 : forall a b : nat, a * b <> 0 -> a <> 0).",
            "VernacExtend",
            "c05ab5446e530325aafe1a84a681ad058f9c949d"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assert (multLemma2 : forall a b : nat, a * b <> 0 -> b <> 0).",
            "VernacExtend",
            "439214b58dedbb3c0e8a0a0c8b368b7464242bb3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite mult_comm in H.",
            "VernacExtend",
            "88ad7b6d9a017501016b4bb662a768f49183dbd5"
        ],
        [
            "eapply multLemma1.",
            "VernacExtend",
            "4a8c7080238246299ca7a2ee85bafcecd7724344"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "assert (forall m n : nat, n < m -> checkPrf (cPairPi1 n) (cPairPi2 n) <> 0 -> exists f : Formula, (exists l : list Formula, (exists p : Prf l f, cPair (codeFormula L codeF codeR f) (codePrf L codeF codeR l f p) = n))).",
            "VernacExtend",
            "9c23c4a93879f5171dc8f39738cd35830bc17dbb"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "induction m as [| m Hrecm].",
            "VernacExtend",
            "93d2b60c268fff5d958c27bdb803738ea66bba5b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (lt_n_O _ H).",
            "VernacExtend",
            "b93451b1a30fa3f24613ad7b0441907b3427a80f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction (le_lt_or_eq _ _ (lt_n_Sm_le _ _ H)).",
            "VernacExtend",
            "f23b1ce155198053064660d260659ef1be20a5a3"
        ],
        [
            "apply Hrecm; assumption.",
            "VernacExtend",
            "c090a6d65a75e602f1b6e90ee5fd89273a6cba2f"
        ],
        [
            "unfold checkPrf in H0.",
            "VernacExtend",
            "5196cfb7aa2224ddcbfe9e9e94a0d72f6dae8943"
        ],
        [
            "assert (wellFormedFormula (cPairPi1 n) <> 0).",
            "VernacExtend",
            "dc08a79bf144c94c6d9ae27e5717864b85c34c7d"
        ],
        [
            "destruct (wellFormedFormula (cPairPi1 n)).",
            "VernacExtend",
            "e958119bbc7e8e6a24afafcb8c299631ecd548f3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "induction (wellFormedFormulaCorrect2 L codeF codeArityF codeArityFIsCorrect1 codeArityFIsCorrect2 codeR codeArityR codeArityRIsCorrect1 codeArityRIsCorrect2 _ H2).",
            "VernacExtend",
            "800d1576338289e5b5d7de9533b834eadf4e18a2"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "destruct (wellFormedFormula (cPairPi1 n)).",
            "VernacExtend",
            "e958119bbc7e8e6a24afafcb8c299631ecd548f3"
        ],
        [
            "elim H2.",
            "VernacExtend",
            "b5361db8e79787430270ea77170dc29bbb9de7b4"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "clear H2.",
            "VernacExtend",
            "d86cdda4c02f9faf6d4c6694d967beddb27ce36a"
        ],
        [
            "unfold checkPrfHelp in H0.",
            "VernacExtend",
            "90c34628761f04a27e2b7e09896cae2d1182ba48"
        ],
        [
            "set (A := fun p recs : nat => switchPR (cPairPi1 (cPairPi2 p)) (switchPR (pred (cPairPi1 (cPairPi2 p))) (switchPR (pred (pred (cPairPi1 (cPairPi2 p)))) (switchPR (pred (pred (pred (cPairPi1 (cPairPi2 p))))) (switchPR (pred (pred (pred (pred (cPairPi1 (cPairPi2 p)))))) (switchPR (pred (pred (pred (pred (pred (cPairPi1 (cPairPi2 p))))))) (switchPR (pred (pred (pred (pred (pred (pred (cPairPi1 (cPairPi2 p)))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (cPairPi1 (cPairPi2 p))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (cPairPi1 (cPairPi2 p)))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (cPairPi1 (cPairPi2 p))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (cPairPi1 (cPairPi2 p)))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (cPairPi1 (cPairPi2 p))))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (cPairPi1 (cPairPi2 p)))))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (cPairPi1 (cPairPi2 p))))))))))))))) 0 (checkPrfEQ5 p recs)) (checkPrfEQ4 p recs)) (checkPrfEQ3 p recs)) (checkPrfEQ2 p recs)) (checkPrfEQ1 p recs)) (checkPrfFA3 p recs)) (checkPrfFA2 p recs)) (checkPrfFA1 p recs)) (checkPrfCP p recs)) (checkPrfIMP2 p recs)) (checkPrfIMP1 p recs)) (checkPrfGEN p recs)) (checkPrfMP p recs)) (checkPrfAXM p recs)) in *.",
            "VernacExtend",
            "86f91753efcd748cb44f0698541fea7aeb27b61a"
        ],
        [
            "unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in H0; rewrite computeEvalStrongRecHelp in H0; unfold compose2, evalComposeFunc, evalOneParamList, evalList in H0; simpl in H0.",
            "VernacExtend",
            "f8eae11f2774f243ba4319a79e6d278b08efb7ba"
        ],
        [
            "rewrite cPairProjections1 in H0.",
            "VernacExtend",
            "2fa9c99490d4673d3e4ca2483a4598652150a982"
        ],
        [
            "assert (cPair (cPairPi1 (cPairPi2 n)) (cPairPi2 (cPairPi2 n)) = cPairPi2 n).",
            "VernacExtend",
            "c871ebbd7dffb0e98f7cb3478914492a25dd968d"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "unfold A at 1 in H0.",
            "VernacExtend",
            "82230658577565fea9200c53f696e14988025690"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "destruct (cPairPi1 (cPairPi2 n)).",
            "VernacExtend",
            "e6fe9b4928b35c6dd63edb4eaf08ffd89461cacf"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfAXM in H0.",
            "VernacExtend",
            "d2da0aaefd81b0cc0657d8e6e5b9f413e797704c"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "induction (eq_nat_dec (cPairPi2 (cPairPi2 n)) (codeFormula L codeF codeR x)).",
            "VernacExtend",
            "082cd8d81fa5a881f194ca73b05388225ef108a0"
        ],
        [
            "exists (x :: nil).",
            "VernacExtend",
            "fa08ea0e193fe3c85ca3756bf64ffc635b334dad"
        ],
        [
            "exists (AXM L x).",
            "VernacExtend",
            "c0095811c9fd8586d13ae345296baea7f79b56a5"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite a in H2.",
            "VernacExtend",
            "2891b62a88c1b5d12d9b6a73b369b520acce3ea0"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfMP in H0.",
            "VernacExtend",
            "850cf77a1b9064c8ae18492ceaea4ee71d06a1e2"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "assert (cPairPi2 (cPairPi2 n) < n).",
            "VernacExtend",
            "b770834a39c17080f8045daa8ce4036109043955"
        ],
        [
            "apply lt_le_trans with (cPair 1 (cPairPi2 (cPairPi2 n))); [ idtac | rewrite H2; apply cPairLe2A ].",
            "VernacExtend",
            "9e396f3d88eb77e42da2848f1e9c108aa79208d6"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "assert (cPairPi1 (cPairPi2 (cPairPi2 n)) < n).",
            "VernacExtend",
            "e704e07659c45b0f1805bed1c52f6fb55e08b177"
        ],
        [
            "apply le_lt_trans with (cPairPi2 (cPairPi2 n)).",
            "VernacExtend",
            "23ed366b89cfc85c66c44605c6a1f822532a6ceb"
        ],
        [
            "apply cPairLe1A.",
            "VernacExtend",
            "389f4f2fd495d370c1345c3d01e327b3f7bd8d1d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (cPairPi2 (cPairPi2 (cPairPi2 n)) < n).",
            "VernacExtend",
            "91c65c351965f2425c325be591e04c61ff45beed"
        ],
        [
            "apply le_lt_trans with (cPairPi2 (cPairPi2 n)).",
            "VernacExtend",
            "23ed366b89cfc85c66c44605c6a1f822532a6ceb"
        ],
        [
            "apply cPairLe2A.",
            "VernacExtend",
            "104875cf507bcf9dffcd9a2aff3d4356d12cc0aa"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite evalStrongRecHelp1 in H0.",
            "VernacExtend",
            "8110da64efcb28fb84dc94284b48820f979d8c75"
        ],
        [
            "rewrite evalStrongRecHelp1 in H0.",
            "VernacExtend",
            "8110da64efcb28fb84dc94284b48820f979d8c75"
        ],
        [
            "assert (wellFormedFormula (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) <> 0).",
            "VernacExtend",
            "3817247364c390bbc24d59d5068073b621e08f4c"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "rewrite H7.",
            "VernacExtend",
            "2b0de906e9dfacfe89c031c2266760d29b5450f6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "induction (eq_nat_dec (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 n)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi1 n))).",
            "VernacExtend",
            "fe9691db7dca2f8c581ce742015998fee3cbbaab"
        ],
        [
            "induction (wellFormedFormulaCorrect2 L codeF codeArityF codeArityFIsCorrect1 codeArityFIsCorrect2 codeR codeArityR codeArityRIsCorrect1 codeArityRIsCorrect2 _ H7).",
            "VernacExtend",
            "4955db755984bba6dd55088c470341c99b0ff7fe"
        ],
        [
            "assert (checkPrf (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 n)))) (cPairPi2 (cPairPi1 (cPairPi2 (cPairPi2 n)))) <> 0).",
            "VernacExtend",
            "c5f66b309137131edaf341b263306292111b3898"
        ],
        [
            "unfold checkPrf in |- *.",
            "VernacExtend",
            "3e453d7494fa7091bc79e9374a2cef4d256cd59c"
        ],
        [
            "rewrite a.",
            "VernacExtend",
            "905c705a182fa776d319d2bbb7fe34c13fe7d244"
        ],
        [
            "rewrite <- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "rewrite <- H8.",
            "VernacExtend",
            "0720c15b6e403369a21d612bc9ad229fe4216088"
        ],
        [
            "rewrite codeImpCorrect.",
            "VernacExtend",
            "c47ab7eedba6c2b178647376950cedc93605ab10"
        ],
        [
            "rewrite (wellFormedFormulaCorrect1 L codeF codeArityF codeArityFIsCorrect1 codeR codeArityR codeArityRIsCorrect1).",
            "VernacExtend",
            "9eb8a453d21b8d0bee69a5f4f892e0ec32d38ac5"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfHelp in |- *.",
            "VernacExtend",
            "86faaeb06d53cc78f8842bf324f53cef27f34514"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "rewrite H8.",
            "VernacExtend",
            "ef335154f8a1120928ddce71bc7a2456078d36bc"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "replace (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi1 n))) with (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 n)))).",
            "VernacExtend",
            "0ead2f82c3921dfc6441b21df4616234a7e82d05"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "destruct (evalStrongRec 0 A (cPairPi1 (cPairPi2 (cPairPi2 n)))).",
            "VernacExtend",
            "2e2884b72510a183319f6126175b2b8c61273468"
        ],
        [
            "rewrite mult_comm in H0.",
            "VernacExtend",
            "93aeaf3ce81d7951f99736686c9704cc6d311bc0"
        ],
        [
            "rewrite (mult_comm (charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 n)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi1 n)))) in H0.",
            "VernacExtend",
            "2092a529640beb6865de5d599e4f7e200abee29d"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "assert (checkPrf (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))) <> 0).",
            "VernacExtend",
            "620a8936de5975c581b8ffb581f5c064dcb05cc0"
        ],
        [
            "unfold checkPrf in |- *.",
            "VernacExtend",
            "3e453d7494fa7091bc79e9374a2cef4d256cd59c"
        ],
        [
            "rewrite <- H8.",
            "VernacExtend",
            "0720c15b6e403369a21d612bc9ad229fe4216088"
        ],
        [
            "rewrite (wellFormedFormulaCorrect1 L codeF codeArityF codeArityFIsCorrect1 codeR codeArityR codeArityRIsCorrect1).",
            "VernacExtend",
            "9eb8a453d21b8d0bee69a5f4f892e0ec32d38ac5"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfHelp in |- *.",
            "VernacExtend",
            "86faaeb06d53cc78f8842bf324f53cef27f34514"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "rewrite H8.",
            "VernacExtend",
            "ef335154f8a1120928ddce71bc7a2456078d36bc"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "destruct (evalStrongRec 0 A (cPairPi2 (cPairPi2 (cPairPi2 n)))).",
            "VernacExtend",
            "fd00ae95a680f2e8ad07a7b022b8f145c225dd92"
        ],
        [
            "rewrite mult_comm in H0.",
            "VernacExtend",
            "93aeaf3ce81d7951f99736686c9704cc6d311bc0"
        ],
        [
            "rewrite (mult_comm (charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 n)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi1 n)))) in H0.",
            "VernacExtend",
            "2092a529640beb6865de5d599e4f7e200abee29d"
        ],
        [
            "rewrite (mult_comm (evalStrongRec 0 A (cPairPi1 (cPairPi2 (cPairPi2 n))))) in H0.",
            "VernacExtend",
            "4e5669325ec97588e287b63f70ed1aa060da5eaa"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "assert (cPairPi1 (cPairPi2 (cPairPi2 n)) < m).",
            "VernacExtend",
            "8a199ac466842fc70453ff5e16db8876ede22020"
        ],
        [
            "apply lt_le_trans with n.",
            "VernacExtend",
            "cfbf944838de4f2e7f431e1ad105b7f33a7df954"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "assert (cPairPi2 (cPairPi2 (cPairPi2 n)) < m).",
            "VernacExtend",
            "6a4bf8c958c2ba046442dec1d21860769616428f"
        ],
        [
            "apply lt_le_trans with n.",
            "VernacExtend",
            "cfbf944838de4f2e7f431e1ad105b7f33a7df954"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "induction (Hrecm _ H11 H9).",
            "VernacExtend",
            "0f374d14ec2276358a8215e1f7d4114cc3dca369"
        ],
        [
            "induction (Hrecm _ H12 H10).",
            "VernacExtend",
            "53cac628fa31f2451cf7ffc4bf6d42dc290c1dd7"
        ],
        [
            "induction H13 as (x3, H13).",
            "VernacExtend",
            "05cda68b7f9ae348f782ddb8b9e64384433b40aa"
        ],
        [
            "induction H13 as (x4, H13).",
            "VernacExtend",
            "c50dddffde7ab935237f3f22797fe950dd892289"
        ],
        [
            "induction H14 as (x5, H14).",
            "VernacExtend",
            "832252932009d44b851923f712596fc888a77e3e"
        ],
        [
            "induction H14 as (x6, H14).",
            "VernacExtend",
            "c7f606eacdc475b1c5afa1e099c5b3327df62b18"
        ],
        [
            "exists (x3 ++ x5).",
            "VernacExtend",
            "c5e34028108e33577ec8827775093807f7f7ec57"
        ],
        [
            "rewrite <- H13 in a.",
            "VernacExtend",
            "4cfca223ca042e9337f02007ba68d5a0196cd814"
        ],
        [
            "rewrite <- H14 in a.",
            "VernacExtend",
            "bf6c4fa0bdc3930ac8cc55b1ecee5be415c83b45"
        ],
        [
            "repeat rewrite cPairProjections1 in a.",
            "VernacExtend",
            "f622ef5341f405b60360518c254168b2ce4fe90c"
        ],
        [
            "rewrite <- H3 in a.",
            "VernacExtend",
            "f66b97411850166a4f3c8bd3d7197b8fcec18e74"
        ],
        [
            "rewrite codeImpCorrect in a.",
            "VernacExtend",
            "1ff0521ef6330691147feae2cd819aba744f8d85"
        ],
        [
            "assert (x1 = impH x2 x).",
            "VernacExtend",
            "c2da31b199c4341658ce6c7d9939e380c532a17d"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (cPair (codeFormula L codeF codeR x1) (codePrf L codeF codeR x3 x1 x4) = cPairPi1 (cPairPi2 (cPairPi2 n))).",
            "VernacExtend",
            "70788307fae95b410db637f6aca9b5218cc3b179"
        ],
        [
            "generalize x4.",
            "VernacExtend",
            "38054802b97dd3704fed1e96e3dd1fb29a9dfa50"
        ],
        [
            "clear H13 x4.",
            "VernacExtend",
            "af83204fea5da1fbc044b82b5142fdb34ad4faaf"
        ],
        [
            "rewrite H15.",
            "VernacExtend",
            "63b8b0d0c08cef2e135c7c663a2c78a6e22fdeb6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists (MP L x3 x5 x2 x x4 x6).",
            "VernacExtend",
            "74e57e701c72fbd69b2dce8ebbb565ce04804d0e"
        ],
        [
            "rewrite <- (cPairProjections n).",
            "VernacExtend",
            "f64fcb9f86576a0029ed098ba3d2a073a67f1d61"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "replace (cPair 1 (cPair (codeFormula L codeF codeR x2) (codeFormula L codeF codeR x))) with (codeFormula L codeF codeR x1).",
            "VernacExtend",
            "4ade6e4462ea7553b32b041be7abc8ce8de0344d"
        ],
        [
            "rewrite H14.",
            "VernacExtend",
            "b53d81c05d6007e728db7abfa7c98c200268f9e7"
        ],
        [
            "fold impH in |- *.",
            "VernacExtend",
            "9f4823aaa6f7230ef50033e333c28ad5f1bee7a1"
        ],
        [
            "rewrite H15.",
            "VernacExtend",
            "63b8b0d0c08cef2e135c7c663a2c78a6e22fdeb6"
        ],
        [
            "rewrite H13.",
            "VernacExtend",
            "bc2d32522e887645239b994008e234c058557cd9"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold charFunction in H0.",
            "VernacExtend",
            "3e0bea15380dcbbd394185dd859082a77ee939a6"
        ],
        [
            "rewrite beq_nat_not_refl in H0.",
            "VernacExtend",
            "298fdee318007935a50d4f97688edb59924cba44"
        ],
        [
            "rewrite mult_comm in H0.",
            "VernacExtend",
            "93aeaf3ce81d7951f99736686c9704cc6d311bc0"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfGEN in H0.",
            "VernacExtend",
            "bde6b9120a15d2449890e62a466f45ec69f868ef"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "assert (cPairPi2 (cPairPi2 (cPairPi2 n)) < n).",
            "VernacExtend",
            "91c65c351965f2425c325be591e04c61ff45beed"
        ],
        [
            "eapply le_lt_trans.",
            "VernacExtend",
            "60bcd6ce718d6396ed7e9217398f9f6dc800e8b4"
        ],
        [
            "apply cPairLe2A.",
            "VernacExtend",
            "104875cf507bcf9dffcd9a2aff3d4356d12cc0aa"
        ],
        [
            "apply lt_le_trans with (cPair 2 (cPairPi2 (cPairPi2 n))); [ idtac | rewrite H2; apply cPairLe2A ].",
            "VernacExtend",
            "d08896c59744e83f31f50fa977dac5ceb828800f"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "rewrite evalStrongRecHelp1 in H0.",
            "VernacExtend",
            "8110da64efcb28fb84dc94284b48820f979d8c75"
        ],
        [
            "induction (eq_nat_dec (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 n))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))))) (cPairPi1 n)).",
            "VernacExtend",
            "3b0d25487cac844828905cf2fd4bccb70fb95ede"
        ],
        [
            "rewrite <- a in H3.",
            "VernacExtend",
            "3953118653723131df1854287e43f3f9ba5f8620"
        ],
        [
            "destruct x as [t t0| r t| f f0| f| n1 f]; simpl in H3; try match goal with | H:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply H ] end.",
            "VernacExtend",
            "6e652c6e0c4d446f8231e6ccbedb645e27c83513"
        ],
        [
            "assert (n1 = cPairPi1 (cPairPi2 (cPairPi2 n))).",
            "VernacExtend",
            "8370eb092ddb51c4f8b7c94d5d3dc6b687120307"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "assert (codeFormula L codeF codeR f = cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))).",
            "VernacExtend",
            "429f3cdea3bd17f41165b656a9f09a6aefed465f"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "assert (checkPrf (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))) <> 0).",
            "VernacExtend",
            "620a8936de5975c581b8ffb581f5c064dcb05cc0"
        ],
        [
            "unfold checkPrf in |- *.",
            "VernacExtend",
            "3e453d7494fa7091bc79e9374a2cef4d256cd59c"
        ],
        [
            "rewrite <- H6.",
            "VernacExtend",
            "87f0bbdef7718e8c7d1d8eeab2d9828935bcf389"
        ],
        [
            "rewrite (wellFormedFormulaCorrect1 L codeF codeArityF codeArityFIsCorrect1 codeR codeArityR codeArityRIsCorrect1).",
            "VernacExtend",
            "9eb8a453d21b8d0bee69a5f4f892e0ec32d38ac5"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold checkPrfHelp in |- *.",
            "VernacExtend",
            "86faaeb06d53cc78f8842bf324f53cef27f34514"
        ],
        [
            "fold A in |- *.",
            "VernacExtend",
            "b7f1ad38c1ebbed475f7c9e8b4dd626d9f8bb464"
        ],
        [
            "rewrite H6.",
            "VernacExtend",
            "ff6a429844c59cba51300abb872460dbdbab812d"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "destruct (evalStrongRec 0 A (cPairPi2 (cPairPi2 (cPairPi2 n)))).",
            "VernacExtend",
            "fd00ae95a680f2e8ad07a7b022b8f145c225dd92"
        ],
        [
            "rewrite mult_comm in H0.",
            "VernacExtend",
            "93aeaf3ce81d7951f99736686c9704cc6d311bc0"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "assert (cPairPi2 (cPairPi2 (cPairPi2 n)) < m).",
            "VernacExtend",
            "6a4bf8c958c2ba046442dec1d21860769616428f"
        ],
        [
            "apply lt_le_trans with n.",
            "VernacExtend",
            "cfbf944838de4f2e7f431e1ad105b7f33a7df954"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "induction (Hrecm _ H8 H7).",
            "VernacExtend",
            "59fad5daa9a1eb0b57752d55c488b07bd8cae85a"
        ],
        [
            "induction H9 as (x0, H9).",
            "VernacExtend",
            "5a1018a750dd01f334ac72ce8b80a58dd4e6fe60"
        ],
        [
            "induction H9 as (x1, H9).",
            "VernacExtend",
            "651c1dee20a91bc15b19370c454049c902b700d8"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "rewrite <- H5 in H0.",
            "VernacExtend",
            "8934667721ff4a36dc434a13e084e3cd6064ae6b"
        ],
        [
            "rewrite <- H9 in H0.",
            "VernacExtend",
            "63dc1ffad5f4c72e9e66d40b2165bc43287a8a4f"
        ],
        [
            "assert (checkPrf (codeFormula L codeF codeR x) (codePrf L codeF codeR x0 x x1) = S (codeList (map (codeFormula L codeF codeR) x0))).",
            "VernacExtend",
            "77e3aff71b3fdf85f37632f8d4fff616cfc61ea2"
        ],
        [
            "apply checkPrfCorrect1.",
            "VernacExtend",
            "f645fcfd1a1062980b150973588a11da9760cb83"
        ],
        [
            "unfold checkPrf in H10.",
            "VernacExtend",
            "c9cc4457e78eb0b7780a3f5300f2461319cd51ce"
        ],
        [
            "rewrite (wellFormedFormulaCorrect1 L codeF codeArityF codeArityFIsCorrect1 codeR codeArityR codeArityRIsCorrect1) in H10.",
            "VernacExtend",
            "502a41152d152aafdc5c64621f364f13157bc302"
        ],
        [
            "simpl in H10.",
            "VernacExtend",
            "6acaa2af25fff35ccd9e9f70e896f9c83855b8e6"
        ],
        [
            "unfold checkPrfHelp in H10.",
            "VernacExtend",
            "69b904eb0556255b323494b7c797851251435dd2"
        ],
        [
            "fold A in H10.",
            "VernacExtend",
            "e8e66021c596b05c5d57c14c7f469eef35fc7052"
        ],
        [
            "rewrite H10 in H0.",
            "VernacExtend",
            "87412b9f3b4392d0e58405031f4bc18cebc3079b"
        ],
        [
            "unfold pred in H0.",
            "VernacExtend",
            "cf3e3e097d2b7aaeb2cb896741e9af73a40ccd6a"
        ],
        [
            "rewrite codeFreeVarListFormulaCorrect in H0.",
            "VernacExtend",
            "74f3c7e867e3cc33b6216603eb3f530ee4bbac3d"
        ],
        [
            "rewrite codeInCorrect in H0.",
            "VernacExtend",
            "af350d5b00c889b42807098fe6e002533fe02526"
        ],
        [
            "induction (In_dec eq_nat_dec n1 (freeVarListFormula L x0)).",
            "VernacExtend",
            "cf600008fece7783b66af73ce942810764d38b42"
        ],
        [
            "rewrite (mult_comm (S (codeList (map (codeFormula L codeF codeR) x0)))) in H0.",
            "VernacExtend",
            "bacad807092b4ba43db5f6102239697dea346421"
        ],
        [
            "rewrite mult_comm in H0.",
            "VernacExtend",
            "93aeaf3ce81d7951f99736686c9704cc6d311bc0"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "elim H0; reflexivity.",
            "VernacExtend",
            "4320c35310a38800a625b1a7c3e58940d517df16"
        ],
        [
            "rewrite <- H9 in H6.",
            "VernacExtend",
            "56e6e07e0e59dd8bf94b6ee2e01b7d73d0337c08"
        ],
        [
            "rewrite cPairProjections1 in H6.",
            "VernacExtend",
            "495087e456730740ff65eadba92458d2157989bb"
        ],
        [
            "cut (cPair (codeFormula L codeF codeR x) (codePrf L codeF codeR x0 x x1) = cPairPi2 (cPairPi2 (cPairPi2 n))).",
            "VernacExtend",
            "9e4d50bd2a074b109300ab26c1855d9abc62cb1c"
        ],
        [
            "generalize x1.",
            "VernacExtend",
            "d06363aea195b7c30752ed148577e79f190762e4"
        ],
        [
            "clear H10 H0 x1 H9.",
            "VernacExtend",
            "23a86be72bf67c3bac37067550c5ca4492356290"
        ],
        [
            "replace x with f.",
            "VernacExtend",
            "efca2e7ba14b1684cee9b4770a51d90abf281874"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists (GEN L x0 f n1 b x1).",
            "VernacExtend",
            "0bf4d888bfd832028b113bc771da8052b695a0cd"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "rewrite a.",
            "VernacExtend",
            "905c705a182fa776d319d2bbb7fe34c13fe7d244"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold charFunction in H0.",
            "VernacExtend",
            "3e0bea15380dcbbd394185dd859082a77ee939a6"
        ],
        [
            "rewrite beq_nat_not_refl in H0.",
            "VernacExtend",
            "298fdee318007935a50d4f97688edb59924cba44"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfIMP1 in H0.",
            "VernacExtend",
            "dd88a600e6608017542cf54b1261a53340589996"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "induction (eq_nat_dec (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 n))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 n))) (cPairPi1 (cPairPi2 (cPairPi2 n))))))) (codeFormula L codeF codeR x)).",
            "VernacExtend",
            "26a07c6467ffeeadd82d4325dcaa4ebe18d92e35"
        ],
        [
            "destruct x as [t t0| r t| f f0| f| n1 f]; simpl in a; try match goal with | H:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply H ] end.",
            "VernacExtend",
            "6dc99ee06177e65f74d6a6f1ccac102da06dfd0e"
        ],
        [
            "assert (cPairPi1 (cPairPi2 (cPairPi2 n)) = codeFormula L codeF codeR f).",
            "VernacExtend",
            "b2c6cdddd902a1c652db8e66f2791038788d7163"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply a.",
            "VernacExtend",
            "efcb795685660eed264bd6d68e41b35603ede4a5"
        ],
        [
            "assert (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 n))) (cPairPi1 (cPairPi2 (cPairPi2 n)))) = codeFormula L codeF codeR f0).",
            "VernacExtend",
            "33b59a3d3b0a653eaa9294398dbcce8d459cf4b6"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply a.",
            "VernacExtend",
            "efcb795685660eed264bd6d68e41b35603ede4a5"
        ],
        [
            "clear a.",
            "VernacExtend",
            "1345621158f2a53dd32925dfdcefd78c46dd29d5"
        ],
        [
            "destruct f0 as [t t0| r t| f0 f1| f0| n1 f0]; simpl in H5; try match goal with | H:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply H ] end.",
            "VernacExtend",
            "b34525a7d06dc57cbbe8e70362ed098c75ed6ccc"
        ],
        [
            "assert (cPairPi2 (cPairPi2 (cPairPi2 n)) = codeFormula L codeF codeR f0).",
            "VernacExtend",
            "79d1ff0e637e770dd09e12549f78a0cf98e76aa4"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "assert (cPairPi1 (cPairPi2 (cPairPi2 n)) = codeFormula L codeF codeR f1).",
            "VernacExtend",
            "d8067ae60e0148ac6cb26d6312e304258c6869ed"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "assert (f1 = f).",
            "VernacExtend",
            "5bd93e2a050c2bffc6aa43f6eeacbf5eda8d3342"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi1 (cPairPi2 (cPairPi2 n))).",
            "VernacExtend",
            "8b1653445591a1dda2cec7dec986d17aa6d94583"
        ],
        [
            "symmetry in |- *.",
            "VernacExtend",
            "dc33a39a53e296ef5e59fd831d55212be2a42f22"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H8.",
            "VernacExtend",
            "ef335154f8a1120928ddce71bc7a2456078d36bc"
        ],
        [
            "rewrite H8 in H3.",
            "VernacExtend",
            "92121e6027d4f2d3073b05c17d7381d9c9743e71"
        ],
        [
            "exists (IMP1 L f f0).",
            "VernacExtend",
            "a983bc241549ea0cd8d991476c2eb54a3828b1a5"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H4.",
            "VernacExtend",
            "15801069338f53d2cf64b6951fc88c5758e631f8"
        ],
        [
            "rewrite <- H6.",
            "VernacExtend",
            "87f0bbdef7718e8c7d1d8eeab2d9828935bcf389"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfIMP2 in H0.",
            "VernacExtend",
            "0adf4ed75d6f19c9219a96609c548e6ce5b314af"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "rename x into f.",
            "VernacExtend",
            "de148e876a3eb01df927caed33825b5b94fa8106"
        ],
        [
            "induction (eq_nat_dec (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 n))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))))))) (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 n))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 n))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))))))))) (codeFormula L codeF codeR f)).",
            "VernacExtend",
            "96bae0def111ec124103f33f2c6d7e2ebe0cca30"
        ],
        [
            "repeat match goal with | H:(cPair ?X1 (cPair ?X2 ?X3) = cPair ?X1 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair ?X1 (cPair _ _) = codeFormula L codeF codeR ?X2) |- _ => destruct X2; simpl in H; try match goal with | J:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply J ] end end.",
            "VernacExtend",
            "651f11f78f1bd948268dd0371c6b707312e37c48"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "replace f2_2_1 with f1_1.",
            "VernacExtend",
            "538fd3e5763901dff36e4fb70735b5432e355aa8"
        ],
        [
            "replace f1_2_2 with f2_2_2.",
            "VernacExtend",
            "e2757a7fd5541917cee5df727684071ef6bb5782"
        ],
        [
            "replace f1_2_1 with f2_1_2.",
            "VernacExtend",
            "488a726aa88ba94b74cd60107ea8125cc369e297"
        ],
        [
            "replace f2_1_1 with f1_1.",
            "VernacExtend",
            "4278cb7fd7e75c7e4fe18553972e6665d551ee49"
        ],
        [
            "exists (IMP2 L f1_1 f2_1_2 f2_2_2).",
            "VernacExtend",
            "85710e4c60884420524321e3d83e7a0a817c5ae4"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H9.",
            "VernacExtend",
            "9575559b4e4b5658029033bee2aac6031ac75e67"
        ],
        [
            "rewrite <- H8.",
            "VernacExtend",
            "0720c15b6e403369a21d612bc9ad229fe4216088"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "rewrite <- H6.",
            "VernacExtend",
            "87f0bbdef7718e8c7d1d8eeab2d9828935bcf389"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi1 (cPairPi2 (cPairPi2 n))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "28ae063745a263df9111fa3a03ce9ea6c2501831"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "9eb646c7eaadc8be688b211a052626701ac422b6"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "b6725e187e1189f79cd258043d0043233d91f135"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi1 (cPairPi2 (cPairPi2 n))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "28ae063745a263df9111fa3a03ce9ea6c2501831"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfCP in H0.",
            "VernacExtend",
            "0fd3761ade82dcb820671c8ceb17949f9fe84593"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "rename x into f.",
            "VernacExtend",
            "de148e876a3eb01df927caed33825b5b94fa8106"
        ],
        [
            "induction (eq_nat_dec (cPair 1 (cPair (cPair 1 (cPair (cPair 2 (cPairPi1 (cPairPi2 (cPairPi2 n)))) (cPair 2 (cPairPi2 (cPairPi2 (cPairPi2 n)))))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 n))) (cPairPi1 (cPairPi2 (cPairPi2 n))))))) (codeFormula L codeF codeR f)).",
            "VernacExtend",
            "d23557f927923f5a67f249ba4560b7c1d60aac69"
        ],
        [
            "repeat match goal with | H:(cPair 1 (cPair ?X2 ?X3) = cPair 1 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair 2 ?X2 = cPair 2 ?X4) |- _ => assert (X2 = X4); [ eapply cPairInj2; apply H | clear H ] | H:(cPair ?X1 _ = codeFormula L codeF codeR ?X2) |- _ => destruct X2; simpl in H; try match goal with | J:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply J ] end end.",
            "VernacExtend",
            "178af15b50befd64beb4996550658d6448040fe2"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "replace f2_2 with f1_1.",
            "VernacExtend",
            "824001d1f72d187cd99c9054cb5ce261df25dde4"
        ],
        [
            "replace f1_2 with f2_1.",
            "VernacExtend",
            "cc79de078280676d3c5afebc86fee2b713144b4f"
        ],
        [
            "exists (CP L f1_1 f2_1).",
            "VernacExtend",
            "836e9d2c72d5b0a8b1bde7539888c0df461c3453"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H8.",
            "VernacExtend",
            "0720c15b6e403369a21d612bc9ad229fe4216088"
        ],
        [
            "rewrite <- H6.",
            "VernacExtend",
            "87f0bbdef7718e8c7d1d8eeab2d9828935bcf389"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi2 (cPairPi2 (cPairPi2 n))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "3b57d7f30f89180346cfc2ff9a48a9809cd0a477"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi1 (cPairPi2 (cPairPi2 n))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "28ae063745a263df9111fa3a03ce9ea6c2501831"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfFA1 in H0.",
            "VernacExtend",
            "ba9cc4b5e73818d6ac95b79065f8c1997a264d34"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "rename x into f.",
            "VernacExtend",
            "de148e876a3eb01df927caed33825b5b94fa8106"
        ],
        [
            "induction (eq_nat_dec (cPair 1 (cPair (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi1 (cPairPi2 (cPairPi2 n))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 n))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n))))))) (codeFormula L codeF codeR f)).",
            "VernacExtend",
            "c61e38e7a9da89803aa514207336b3a3a6b867c8"
        ],
        [
            "repeat match goal with | H:(cPair 1 (cPair ?X2 ?X3) = cPair 1 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair 3 (cPair ?X2 ?X3) = cPair 3 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair ?X1 _ = codeFormula L codeF codeR ?X2) |- _ => destruct X2; simpl in H; try match goal with | J:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply J ] end end.",
            "VernacExtend",
            "742521818b1b20603c5f15ace635cb33c2c98a84"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "rewrite H6 in H5.",
            "VernacExtend",
            "ed70d7168a6bcc1ec53641b79efde511d389f83a"
        ],
        [
            "rewrite H7 in H5.",
            "VernacExtend",
            "e92784956538dea547fb4d09620f99424e4a73cc"
        ],
        [
            "assert (wellFormedTerm (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))) <> 0).",
            "VernacExtend",
            "603ab23c62d3270527cd7cd9cd0d04b3280ecb92"
        ],
        [
            "eapply multLemma1.",
            "VernacExtend",
            "4a8c7080238246299ca7a2ee85bafcecd7724344"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "induction (wellFormedTermCorrect2 L codeF codeArityF codeArityFIsCorrect1 codeArityFIsCorrect2 _ H4).",
            "VernacExtend",
            "812194a6bc516ee93bf8240951648683b26f2683"
        ],
        [
            "rewrite <- H8 in H5.",
            "VernacExtend",
            "8ecf4af5f5828d16bb1d4c593b0ec2f81ea4ba5a"
        ],
        [
            "rewrite codeSubFormulaCorrect in H5.",
            "VernacExtend",
            "b079e151e6b05901e4b5346c32fee5f483ffa2b9"
        ],
        [
            "replace f2 with (substituteFormula L f1 n1 x).",
            "VernacExtend",
            "95c4832ab97e0068e09975fc84a602e6caf24905"
        ],
        [
            "exists (FA1 L f1 n1 x).",
            "VernacExtend",
            "b78f98db0c7e54830234e9c63f3e2400763c90a6"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H7.",
            "VernacExtend",
            "15eb34513c3298e9d5b8731fdb6616cb0a4f6a80"
        ],
        [
            "rewrite <- H6.",
            "VernacExtend",
            "87f0bbdef7718e8c7d1d8eeab2d9828935bcf389"
        ],
        [
            "rewrite H8.",
            "VernacExtend",
            "ef335154f8a1120928ddce71bc7a2456078d36bc"
        ],
        [
            "repeat rewrite cPairProjections.",
            "VernacExtend",
            "b98e3b6d2bebac68ef9b17a0b434dd862791aa38"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "rewrite mult_comm.",
            "VernacExtend",
            "1618bf07e1d67d2e2ac34824fd6979892b5cec8f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfFA2 in H0.",
            "VernacExtend",
            "0409982d21bec30665ead81d821f4f7b38fb674a"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "rename x into f.",
            "VernacExtend",
            "de148e876a3eb01df927caed33825b5b94fa8106"
        ],
        [
            "induction (eq_nat_dec (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 n))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 n))) (cPairPi1 (cPairPi2 (cPairPi2 n))))))) (codeFormula L codeF codeR f)).",
            "VernacExtend",
            "8bbd35ef5370c7d776a43fc6937214e39daf7fc5"
        ],
        [
            "repeat match goal with | H:(cPair 1 (cPair ?X2 ?X3) = cPair 1 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair 3 (cPair ?X2 ?X3) = cPair 3 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair ?X1 _ = codeFormula L codeF codeR ?X2) |- _ => destruct X2; simpl in H; try match goal with | J:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply J ] end end.",
            "VernacExtend",
            "742521818b1b20603c5f15ace635cb33c2c98a84"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "replace f2 with f1.",
            "VernacExtend",
            "b2b379a1ca8a8b8f8869a024dac078467746251b"
        ],
        [
            "rewrite H6 in H0.",
            "VernacExtend",
            "62fb32e4c27bdc9bb1f2db6e8ccb492493e234ca"
        ],
        [
            "rewrite H4 in H0.",
            "VernacExtend",
            "bc6050c4f81ef639c3f0ca7ff4d97aeaa9d64e5a"
        ],
        [
            "rewrite codeFreeVarFormulaCorrect in H0.",
            "VernacExtend",
            "2d7ba60dc42f3760a569e41da0b0140fdddc6099"
        ],
        [
            "rewrite codeInCorrect in H0.",
            "VernacExtend",
            "af350d5b00c889b42807098fe6e002533fe02526"
        ],
        [
            "induction (In_dec eq_nat_dec n1 (freeVarFormula L f1)).",
            "VernacExtend",
            "352e089503d0fff730448ff478af2f2c0ba1f7fe"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "exists (FA2 L f1 n1 b).",
            "VernacExtend",
            "4076edab2b2cd7325557c81e21a3eee6f3ee6223"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H4.",
            "VernacExtend",
            "15801069338f53d2cf64b6951fc88c5758e631f8"
        ],
        [
            "rewrite <- H6.",
            "VernacExtend",
            "87f0bbdef7718e8c7d1d8eeab2d9828935bcf389"
        ],
        [
            "rewrite cPairProjections.",
            "VernacExtend",
            "c3175365627fe539261822cb2060e943f0ca0952"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi1 (cPairPi2 (cPairPi2 n))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "28ae063745a263df9111fa3a03ce9ea6c2501831"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "rewrite mult_comm.",
            "VernacExtend",
            "1618bf07e1d67d2e2ac34824fd6979892b5cec8f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfFA3 in H0.",
            "VernacExtend",
            "4fdc6a41e60cce477597ad9a7a21cdec59dc69de"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "repeat first [ rewrite cPairProjections1 in H0 | rewrite cPairProjections2 in H0 ].",
            "VernacExtend",
            "31d53ed5790822a8ba4c31f7c9fd081c613c60fd"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "rename x into f.",
            "VernacExtend",
            "de148e876a3eb01df927caed33825b5b94fa8106"
        ],
        [
            "induction (eq_nat_dec (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 n))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))))))) (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi1 (cPairPi2 (cPairPi2 n))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))))))))) (codeFormula L codeF codeR f)).",
            "VernacExtend",
            "f1f40b9e10b274460e39ce78e9089e51dee6c9af"
        ],
        [
            "repeat match goal with | H:(cPair 1 (cPair ?X2 ?X3) = cPair 1 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair 3 (cPair ?X2 ?X3) = cPair 3 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair ?X1 _ = codeFormula L codeF codeR ?X2) |- _ => destruct X2; simpl in H; try match goal with | J:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply J ] end end.",
            "VernacExtend",
            "742521818b1b20603c5f15ace635cb33c2c98a84"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "replace f2_1 with f1_1.",
            "VernacExtend",
            "af730c496197b28d5ef5eee9221eab27ec2b0b6a"
        ],
        [
            "replace f1_2 with f2_2.",
            "VernacExtend",
            "15ec9d89839868889581e9d1709efb21c0f35386"
        ],
        [
            "replace n3 with n1.",
            "VernacExtend",
            "3e923d8497bc86d55171850b33da2df3e286a33b"
        ],
        [
            "replace n2 with n1.",
            "VernacExtend",
            "144563f0315afda9b2580aa0101fcd048477da3e"
        ],
        [
            "exists (FA3 L f1_1 f2_2 n1).",
            "VernacExtend",
            "0be67a07544cd1d285133a410d2faf372d15921c"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- H4.",
            "VernacExtend",
            "15801069338f53d2cf64b6951fc88c5758e631f8"
        ],
        [
            "rewrite <- H8.",
            "VernacExtend",
            "0720c15b6e403369a21d612bc9ad229fe4216088"
        ],
        [
            "rewrite <- H5.",
            "VernacExtend",
            "7e7c68e08488a5f01b85c6a7ae27738d3a8af897"
        ],
        [
            "repeat rewrite cPairProjections.",
            "VernacExtend",
            "b98e3b6d2bebac68ef9b17a0b434dd862791aa38"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "transitivity (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "b6725e187e1189f79cd258043d0043233d91f135"
        ],
        [
            "transitivity (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 n)))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "b6725e187e1189f79cd258043d0043233d91f135"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 n)))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "9eb646c7eaadc8be688b211a052626701ac422b6"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "transitivity (cPairPi1 (cPairPi2 (cPairPi2 n))); [ symmetry in |- *; assumption | assumption ].",
            "VernacExtend",
            "28ae063745a263df9111fa3a03ce9ea6c2501831"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfEQ1 in H0.",
            "VernacExtend",
            "25f38d300d80bea21e07ed009fcb9bd84a370a37"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "induction (eq_nat_dec (codeFormula L codeF codeR (fol.equal L (fol.var L 0) (fol.var L 0))) (codeFormula L codeF codeR x)).",
            "VernacExtend",
            "322388e6c0114a5212caffcd1765a76dd049dcaf"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "replace x with (fol.equal L (fol.var L 0) (fol.var L 0)).",
            "VernacExtend",
            "969d50af71c0259df5ffe00ab4b8538829639d14"
        ],
        [
            "exists (EQ1 L).",
            "VernacExtend",
            "95e437310882a8a69207c8fb1fad33f7ffd5c4c5"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction (eq_nat_dec (cPairPi2 (cPairPi2 n)) 0).",
            "VernacExtend",
            "48d14606e434c05b4530de96d2a38f5dce02d9d8"
        ],
        [
            "rewrite a0 in H2.",
            "VernacExtend",
            "d135c442e4d161df7af7724c160e3b8470df2cac"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite (beq_nat_not_refl (codeFormula L codeF codeR (fol.equal L (fol.var L 0) (fol.var L 0)))) .",
            "VernacExtend",
            "dc7d27e0bf3f68818adf6c6bf7babaf638a6f34e"
        ],
        [
            "rewrite mult_comm.",
            "VernacExtend",
            "1618bf07e1d67d2e2ac34824fd6979892b5cec8f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfEQ2 in H0.",
            "VernacExtend",
            "79c70952def94fe75544e65d4b6309a667a86613"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "induction (eq_nat_dec (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.equal L (fol.var L 1) (fol.var L 0)))) (codeFormula L codeF codeR x)).",
            "VernacExtend",
            "477787242dfb42f9d114e02e7dd37481cad6aea3"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "replace x with (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.equal L (fol.var L 1) (fol.var L 0))).",
            "VernacExtend",
            "6b2036d17fb05be0016b7119ef099eba34f1afbd"
        ],
        [
            "exists (EQ2 L).",
            "VernacExtend",
            "ddf436ce32bfd8c2848da0e1a15c1f9aa1060f33"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "induction (eq_nat_dec (cPairPi2 (cPairPi2 n)) 0).",
            "VernacExtend",
            "48d14606e434c05b4530de96d2a38f5dce02d9d8"
        ],
        [
            "rewrite a0 in H2.",
            "VernacExtend",
            "d135c442e4d161df7af7724c160e3b8470df2cac"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite (beq_nat_not_refl (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.equal L (fol.var L 1) (fol.var L 0))))) .",
            "VernacExtend",
            "081bf6ae2f4d3094e6ad4cb1daff4efe08083b31"
        ],
        [
            "rewrite mult_comm.",
            "VernacExtend",
            "1618bf07e1d67d2e2ac34824fd6979892b5cec8f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "repeat rewrite <- pred_Sn in H0.",
            "VernacExtend",
            "74f5de83e38ea1997dec8b0562614808e48d9435"
        ],
        [
            "assert (H4 : forall n2 p q : nat, switchPR (S n2) p q = p).",
            "VernacExtend",
            "8ab0e039ad0dc4d90460858733b4580427ef7f9e"
        ],
        [
            "simple destruct n2; trivial.",
            "VernacExtend",
            "5f2e7fae731f6a5501b749578359fffb12037904"
        ],
        [
            "repeat rewrite H4 in H0.",
            "VernacExtend",
            "1a191d9dbd6a4851b97d1435035e0b7acc547fac"
        ],
        [
            "clear H4.",
            "VernacExtend",
            "b63698fbba7b38f68086944744e776a2fb5bc886"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfEQ3 in H0.",
            "VernacExtend",
            "269dee491f2334a96243d9384949d6b67a6b4c65"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "induction (eq_nat_dec (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.impH L (fol.equal L (fol.var L 1) (fol.var L 2)) (fol.equal L (fol.var L 0) (fol.var L 2))))) (codeFormula L codeF codeR x)).",
            "VernacExtend",
            "66987f397daded935154948aadad4a3659a6d805"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "replace x with (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.impH L (fol.equal L (fol.var L 1) (fol.var L 2)) (fol.equal L (fol.var L 0) (fol.var L 2)))).",
            "VernacExtend",
            "d60b7e7030ff6a9be3942818393137846f1019c4"
        ],
        [
            "exists (EQ3 L).",
            "VernacExtend",
            "cdaea83a1dd1f8215eed900a397caa2e61391609"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections2 in H0.",
            "VernacExtend",
            "2a87e91134f1c4e99d71321512885e75857ca4a3"
        ],
        [
            "rewrite cPairProjections1 in H0.",
            "VernacExtend",
            "2fa9c99490d4673d3e4ca2483a4598652150a982"
        ],
        [
            "induction (eq_nat_dec (cPairPi2 (cPairPi2 n)) 0).",
            "VernacExtend",
            "48d14606e434c05b4530de96d2a38f5dce02d9d8"
        ],
        [
            "rewrite a0 in H2.",
            "VernacExtend",
            "d135c442e4d161df7af7724c160e3b8470df2cac"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "unfold charFunction in |- *.",
            "VernacExtend",
            "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
        ],
        [
            "rewrite (beq_nat_not_refl (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.impH L (fol.equal L (fol.var L 1) (fol.var L 2)) (fol.equal L (fol.var L 0) (fol.var L 2)))))) .",
            "VernacExtend",
            "c4292e88040514ab5384405d309d43dd71c100f2"
        ],
        [
            "rewrite mult_comm.",
            "VernacExtend",
            "1618bf07e1d67d2e2ac34824fd6979892b5cec8f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfEQ4 in H0.",
            "VernacExtend",
            "2e93ef97b67ce0f06ca70159f13b650d0fd739f1"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "repeat rewrite cPairProjections2 in H0.",
            "VernacExtend",
            "a80d00cce2d6ae06a23b8428168fb59f02455115"
        ],
        [
            "repeat rewrite cPairProjections1 in H0.",
            "VernacExtend",
            "b5c1d9f8aaa346287fc1aeed7672226fafa46bf4"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "assert (codeArityR (cPairPi2 (cPairPi2 n)) <> 0).",
            "VernacExtend",
            "2cd0b4af3f14d3962e503a2fa65bc5162b048256"
        ],
        [
            "unfold notZero in H0.",
            "VernacExtend",
            "1abb388d2ab1251ad04869d4e98fcf5ec6cf6138"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "rewrite H4 in H0.",
            "VernacExtend",
            "bc6050c4f81ef639c3f0ca7ff4d97aeaa9d64e5a"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "induction (codeArityRIsCorrect2 _ H4).",
            "VernacExtend",
            "b0ae7bc2a81f8427a6e6ee08db179998d9d17979"
        ],
        [
            "rewrite <- H5 in H0.",
            "VernacExtend",
            "8934667721ff4a36dc434a13e084e3cd6064ae6b"
        ],
        [
            "rewrite codeArityRIsCorrect1 in H0.",
            "VernacExtend",
            "f1a5650be2118c73d2fecd05c4984908f1b0680c"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "induction (codeNVarsCorrect (arity L (inl (Functions L) x0))).",
            "VernacExtend",
            "23cdae22c2551ac37e0f0837be71ff5d3d9b8d3a"
        ],
        [
            "rewrite H6 in H0.",
            "VernacExtend",
            "62fb32e4c27bdc9bb1f2db6e8ccb492493e234ca"
        ],
        [
            "rewrite H7 in H0.",
            "VernacExtend",
            "c2bca32bfe72648353a4377565c5741a3b230cba"
        ],
        [
            "clear H6 H7.",
            "VernacExtend",
            "a407da2699a69042e3d6b8475e0ab1383066ed16"
        ],
        [
            "assert (codeIff (cPair (S (S (S (S (codeR x0))))) (codeTerms L codeF (arity L (inl (Functions L) x0)) (fst (nVars L (arity L (inl (Functions L) x0)))))) (cPair (S (S (S (S (codeR x0))))) (codeTerms L codeF (arity L (inl (Functions L) x0)) (snd (nVars L (arity L (inl (Functions L) x0)))))) = codeIff (codeFormula L codeF codeR (atomic x0 (fst (nVars L (arity L (inl (Functions L) x0)))))) (codeFormula L codeF codeR (atomic x0 (snd (nVars L (arity L (inl (Functions L) x0))))))).",
            "VernacExtend",
            "8c03f35746623e242710885f6da469ad72e3cf56"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite H6 in H0.",
            "VernacExtend",
            "62fb32e4c27bdc9bb1f2db6e8ccb492493e234ca"
        ],
        [
            "clear H6.",
            "VernacExtend",
            "bcbf4d43ebfb4ad30f31b4264dcdbf754a920d28"
        ],
        [
            "rewrite codeIffCorrect in H0.",
            "VernacExtend",
            "b39ce9532501238f685e3ae063928af41a543f5f"
        ],
        [
            "assert (AxmEq4 L x0 = x).",
            "VernacExtend",
            "3ee56551feceb5eec326de1f6dd0d2534cdbfbd6"
        ],
        [
            "clear H5.",
            "VernacExtend",
            "27e7490763b843a17bd590552e39601d3a9ed430"
        ],
        [
            "unfold AxmEq4 in |- *.",
            "VernacExtend",
            "44e9ba0324ffc11cc8d1454bd91ebcf7e0f9ee51"
        ],
        [
            "induction (nVars L (arity L (inl (Functions L) x0))).",
            "VernacExtend",
            "afb9115ce799e28a4b67cc7db4a51c2a594409b7"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold fst, snd in H0.",
            "VernacExtend",
            "7e60aa10a196f08d343eec433ce19564598326f3"
        ],
        [
            "cut ((if beq_nat (codeAxmEqHelp (arity L (inl (Functions L) x0)) (codeFormula L codeF codeR (iffH L (atomic x0 a) (atomic x0 b)))) (codeFormula L codeF codeR x) then 1 else 0) + 0 <> 0).",
            "VernacExtend",
            "dfe2ed6a6c6974a5867473ec8288db9cef6c0b1c"
        ],
        [
            "fold atomic in |- *.",
            "VernacExtend",
            "37cd7a5cb57a3b45766697f4beacd2f11986e35f"
        ],
        [
            "generalize (iffH L (atomic x0 a) (atomic x0 b)).",
            "VernacExtend",
            "6f5e89920a43b3748bd73ae83d32246bf2f176f0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "clear H0.",
            "VernacExtend",
            "fe72360cf92275fb4ba47f89dfeb905e6d21c4a9"
        ],
        [
            "clear a b.",
            "VernacExtend",
            "bb09739861afe8daf24928254439c86f555c24f9"
        ],
        [
            "cut (codeAxmEqHelp (arity L (inl (Functions L) x0)) (codeFormula L codeF codeR f) = codeFormula L codeF codeR x).",
            "VernacExtend",
            "c23398124f41554b4ae47c221b8de74f3e36a67d"
        ],
        [
            "generalize x.",
            "VernacExtend",
            "9f4cd42877a803c4bca301f1a36acd2e7bec3480"
        ],
        [
            "clear H5.",
            "VernacExtend",
            "27e7490763b843a17bd590552e39601d3a9ed430"
        ],
        [
            "induction (arity L (inl (Functions L) x0)); simpl in |- *; intros.",
            "VernacExtend",
            "260a4d70bd2a5e486d0833a1cb612c57456a9b18"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rename x1 into f0.",
            "VernacExtend",
            "86497b074c63f4d24dde95e9735f14005f0fac5a"
        ],
        [
            "repeat match goal with | H:(cPair 1 (cPair ?X2 ?X3) = cPair 1 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair 0 (cPair ?X2 ?X3) = cPair 0 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair ?X1 _ = codeFormula L codeF codeR ?X2) |- _ => destruct X2; simpl in H; try match goal with | J:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply J ] end end.",
            "VernacExtend",
            "913b7987f6e822ff29ab8c4894f053666c776185"
        ],
        [
            "rewrite (IHn1 f0_2).",
            "VernacExtend",
            "8614554db18d835ca3cfb28ea2083381436575f5"
        ],
        [
            "destruct t.",
            "VernacExtend",
            "03d3fc39431171b40684d8dff6748881af772fc7"
        ],
        [
            "replace n2 with (n1 + n1).",
            "VernacExtend",
            "9a479316c419e4c935043b898d8b9c2f976d6c6b"
        ],
        [
            "destruct t0.",
            "VernacExtend",
            "487a81e74508747c56186a8fe1f20da05a726010"
        ],
        [
            "replace n3 with (S (n1 + n1)).",
            "VernacExtend",
            "ff27971db95e324f6b419b6179b5588627d7065a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply cPairInj2 with 0 0.",
            "VernacExtend",
            "8801ae12afff3ca236463366a1f01bb39ba53e7e"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "elim O_S with (codeF f0).",
            "VernacExtend",
            "72f994262e826727c9a44c8abc2e84f01a853ef6"
        ],
        [
            "apply cPairInj1 with (S (n1 + n1)) (codeTerms L codeF (arity L (inr (Relations L) f0)) t).",
            "VernacExtend",
            "6c89b5353907f8b6c6ba70ef96742baaed50c99e"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "apply cPairInj2 with 0 0.",
            "VernacExtend",
            "8801ae12afff3ca236463366a1f01bb39ba53e7e"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "elim O_S with (codeF f0).",
            "VernacExtend",
            "72f994262e826727c9a44c8abc2e84f01a853ef6"
        ],
        [
            "apply cPairInj1 with (n1 + n1) (codeTerms L codeF (arity L (inr (Relations L) f0)) t).",
            "VernacExtend",
            "ac9c5910089c15cce7db7dd284f19ca468e6cb10"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "induction (eq_nat_dec (codeAxmEqHelp (arity L (inl (Functions L) x0)) (codeFormula L codeF codeR f)) (codeFormula L codeF codeR x)).",
            "VernacExtend",
            "2203a76278bc364d59ff770bf4404d9d98acf7a4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H5.",
            "VernacExtend",
            "d649d41a7a1aea4dafe45e4b1d582e7e7df0a9a2"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "rewrite <- H6.",
            "VernacExtend",
            "87f0bbdef7718e8c7d1d8eeab2d9828935bcf389"
        ],
        [
            "exists (EQ4 L x0).",
            "VernacExtend",
            "658ad7ed516b19cc9ed68b2c2e88427e067d2216"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "destruct n1.",
            "VernacExtend",
            "01b5c5f5657001bf3a94e8a7d426d69583c27afb"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "unfold checkPrfEQ5 in H0.",
            "VernacExtend",
            "ef8bf0eb43a2421fb3ff7560b0cdf74ba8378f00"
        ],
        [
            "clear A.",
            "VernacExtend",
            "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
        ],
        [
            "repeat rewrite cPairProjections2 in H0.",
            "VernacExtend",
            "a80d00cce2d6ae06a23b8428168fb59f02455115"
        ],
        [
            "repeat rewrite cPairProjections1 in H0.",
            "VernacExtend",
            "b5c1d9f8aaa346287fc1aeed7672226fafa46bf4"
        ],
        [
            "exists (nil (A:=Formula)).",
            "VernacExtend",
            "3b38b5e114c133c8be5629e529cc4807867b4594"
        ],
        [
            "rewrite <- H3 in H0.",
            "VernacExtend",
            "797164d65571e3c8e3177434b7092977c3ba31ea"
        ],
        [
            "assert (codeArityF (cPairPi2 (cPairPi2 n)) <> 0).",
            "VernacExtend",
            "17394138a727a0135f6a28d1b57e661318955e19"
        ],
        [
            "unfold notZero in H0.",
            "VernacExtend",
            "1abb388d2ab1251ad04869d4e98fcf5ec6cf6138"
        ],
        [
            "unfold not in |- *; intros.",
            "VernacExtend",
            "a373869c1c99731a8797825160ba5f5ab7a057a9"
        ],
        [
            "rewrite H4 in H0.",
            "VernacExtend",
            "bc6050c4f81ef639c3f0ca7ff4d97aeaa9d64e5a"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "induction (codeArityFIsCorrect2 _ H4).",
            "VernacExtend",
            "e2eeb3f963d063db22e213c01b6aafa134e3a42c"
        ],
        [
            "rewrite <- H5 in H0.",
            "VernacExtend",
            "8934667721ff4a36dc434a13e084e3cd6064ae6b"
        ],
        [
            "rewrite codeArityFIsCorrect1 in H0.",
            "VernacExtend",
            "6423a465a616f876a2e42304aee188a34f5a1438"
        ],
        [
            "simpl in H0.",
            "VernacExtend",
            "a4a6a8421870dbf7255f8d031744eec32f12a941"
        ],
        [
            "induction (codeNVarsCorrect (arity L (inr (Relations L) x0))).",
            "VernacExtend",
            "23b824f1cb89afe846fb24beeec0e1b77e54b2e1"
        ],
        [
            "rewrite H6 in H0.",
            "VernacExtend",
            "62fb32e4c27bdc9bb1f2db6e8ccb492493e234ca"
        ],
        [
            "rewrite H7 in H0.",
            "VernacExtend",
            "c2bca32bfe72648353a4377565c5741a3b230cba"
        ],
        [
            "clear H6 H7.",
            "VernacExtend",
            "a407da2699a69042e3d6b8475e0ab1383066ed16"
        ],
        [
            "assert (cPair 0 (cPair (cPair (S (codeF x0)) (codeTerms L codeF (arity L (inr (Relations L) x0)) (fst (nVars L (arity L (inr (Relations L) x0)))))) (cPair (S (codeF x0)) (codeTerms L codeF (arity L (inr (Relations L) x0)) (snd (nVars L (arity L (inr (Relations L) x0))))))) = codeFormula L codeF codeR (equal (apply x0 (fst (nVars L (arity L (inr (Relations L) x0))))) (apply x0 (snd (nVars L (arity L (inr (Relations L) x0))))))).",
            "VernacExtend",
            "123726651b680e173ae3f58e5d523e49bb5aa178"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite H6 in H0.",
            "VernacExtend",
            "62fb32e4c27bdc9bb1f2db6e8ccb492493e234ca"
        ],
        [
            "clear H6.",
            "VernacExtend",
            "bcbf4d43ebfb4ad30f31b4264dcdbf754a920d28"
        ],
        [
            "assert (AxmEq5 L x0 = x).",
            "VernacExtend",
            "7b1d10cd7eb7d0c2e06d9d9405d8115124a4cf29"
        ],
        [
            "clear H5.",
            "VernacExtend",
            "27e7490763b843a17bd590552e39601d3a9ed430"
        ],
        [
            "unfold AxmEq5 in |- *.",
            "VernacExtend",
            "d3fab2e6c8c2978249a69425e337d98d868d7e83"
        ],
        [
            "induction (nVars L (arity L (inr (Relations L) x0))).",
            "VernacExtend",
            "3d8386eeb16413545e47cc5ff2ea5d965d5376ed"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold fst, snd in H0.",
            "VernacExtend",
            "7e60aa10a196f08d343eec433ce19564598326f3"
        ],
        [
            "cut ((if beq_nat (codeAxmEqHelp (arity L (inr (Relations L) x0)) (codeFormula L codeF codeR (equal (apply x0 a) (apply x0 b)))) (codeFormula L codeF codeR x) then 1 else 0) + 0 <> 0).",
            "VernacExtend",
            "eed14e393dfcdd1a3fdadca92ca50ea4e740d8d9"
        ],
        [
            "fold apply equal in |- *.",
            "VernacExtend",
            "ec09e0f58fc648aa3d08cecdd3a7862326a21174"
        ],
        [
            "generalize (equal (apply x0 a) (apply x0 b)).",
            "VernacExtend",
            "fbdfc73c50aa99e0b34690541887dc844ffdac89"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "clear H0.",
            "VernacExtend",
            "fe72360cf92275fb4ba47f89dfeb905e6d21c4a9"
        ],
        [
            "clear a b.",
            "VernacExtend",
            "bb09739861afe8daf24928254439c86f555c24f9"
        ],
        [
            "cut (codeAxmEqHelp (arity L (inr (Relations L) x0)) (codeFormula L codeF codeR f) = codeFormula L codeF codeR x).",
            "VernacExtend",
            "af0dca5783c459393e2117643b8b55670e621849"
        ],
        [
            "generalize x.",
            "VernacExtend",
            "9f4cd42877a803c4bca301f1a36acd2e7bec3480"
        ],
        [
            "clear H5.",
            "VernacExtend",
            "27e7490763b843a17bd590552e39601d3a9ed430"
        ],
        [
            "induction (arity L (inr (Relations L) x0)); simpl in |- *; intros.",
            "VernacExtend",
            "0c5deced629c6a3ffd7726abbc44811459318132"
        ],
        [
            "apply (codeFormulaInj L codeF codeR codeFInj codeRInj).",
            "VernacExtend",
            "710c69feea57118c4563aaf5d489a38ddc3ec4a9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "repeat match goal with | H:(cPair 1 (cPair ?X2 ?X3) = cPair 1 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair 0 (cPair ?X2 ?X3) = cPair 0 (cPair ?X4 ?X5)) |- _ => assert (X2 = X4); [ eapply cPairInj1; eapply cPairInj2; apply H | assert (X3 = X5); [ eapply cPairInj2; eapply cPairInj2; apply H | clear H ] ] | H:(cPair ?X1 _ = codeFormula L codeF codeR ?X2) |- _ => destruct X2; simpl in H; try match goal with | J:(cPair ?X1 _ = cPair ?X2 _) |- _ => cut (X1 = X2); [ intro I; discriminate I | eapply cPairInj1; apply J ] end end.",
            "VernacExtend",
            "913b7987f6e822ff29ab8c4894f053666c776185"
        ],
        [
            "rewrite (IHn1 x1_2).",
            "VernacExtend",
            "464a7903422cd609c9e9d30aa2310d7fe90b3b0f"
        ],
        [
            "destruct t.",
            "VernacExtend",
            "03d3fc39431171b40684d8dff6748881af772fc7"
        ],
        [
            "replace n2 with (n1 + n1).",
            "VernacExtend",
            "9a479316c419e4c935043b898d8b9c2f976d6c6b"
        ],
        [
            "destruct t0.",
            "VernacExtend",
            "487a81e74508747c56186a8fe1f20da05a726010"
        ],
        [
            "replace n3 with (S (n1 + n1)).",
            "VernacExtend",
            "ff27971db95e324f6b419b6179b5588627d7065a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply cPairInj2 with 0 0.",
            "VernacExtend",
            "8801ae12afff3ca236463366a1f01bb39ba53e7e"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "elim O_S with (codeF f0).",
            "VernacExtend",
            "72f994262e826727c9a44c8abc2e84f01a853ef6"
        ],
        [
            "apply cPairInj1 with (S (n1 + n1)) (codeTerms L codeF (arity L (inr (Relations L) f0)) t).",
            "VernacExtend",
            "6c89b5353907f8b6c6ba70ef96742baaed50c99e"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "apply cPairInj2 with 0 0.",
            "VernacExtend",
            "8801ae12afff3ca236463366a1f01bb39ba53e7e"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "elim O_S with (codeF f0).",
            "VernacExtend",
            "72f994262e826727c9a44c8abc2e84f01a853ef6"
        ],
        [
            "apply cPairInj1 with (n1 + n1) (codeTerms L codeF (arity L (inr (Relations L) f0)) t).",
            "VernacExtend",
            "ac9c5910089c15cce7db7dd284f19ca468e6cb10"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "induction (eq_nat_dec (codeAxmEqHelp (arity L (inr (Relations L) x0)) (codeFormula L codeF codeR f)) (codeFormula L codeF codeR x)).",
            "VernacExtend",
            "6f1115e1e3ceef1b5a92df2f9d234212116897dc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H5.",
            "VernacExtend",
            "d649d41a7a1aea4dafe45e4b1d582e7e7df0a9a2"
        ],
        [
            "rewrite beq_nat_not_refl.",
            "VernacExtend",
            "1233302f99cf1c86d83f4544c8d696eababc6902"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H3.",
            "VernacExtend",
            "c5485dd62873b0ea9ab7d37c26265fb7eea7e9ba"
        ],
        [
            "rewrite <- H6.",
            "VernacExtend",
            "87f0bbdef7718e8c7d1d8eeab2d9828935bcf389"
        ],
        [
            "exists (EQ5 L x0).",
            "VernacExtend",
            "c558ff7df5cb05c721bd2f6a2cb7ceb3d92d00ae"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite H5.",
            "VernacExtend",
            "d39eba0f5559f57239c887c68680638084d28197"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply cPairProjections.",
            "VernacExtend",
            "d1c3d722c37fedf330b19fca639298bac8f69a1d"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (exists f : Formula, (exists l : list Formula, (exists p : Prf l f, cPair (codeFormula L codeF codeR f) (codePrf L codeF codeR l f p) = cPair n m))).",
            "VernacExtend",
            "53a815cea5e5d2b06864724661d9d88e552da8ed"
        ],
        [
            "eapply H.",
            "VernacExtend",
            "cf02e2445d256ebbbf0bbedfdc7f26983e04ec5a"
        ],
        [
            "apply lt_n_Sn.",
            "VernacExtend",
            "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "decompose record H1.",
            "VernacExtend",
            "fc89bc5e30950f44e0dd70feb01cfe1cc8129126"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "eapply cPairInj1.",
            "VernacExtend",
            "262e1daf4eaf0fb3221dfc5a198c6499be7ec520"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "exists x1.",
            "VernacExtend",
            "41149f92e5f2a0109418d3e02971541f67fbd3df"
        ],
        [
            "eapply cPairInj2.",
            "VernacExtend",
            "6b9372f6160aa5f6b58d385e2be52f8ca9195711"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Check_Proof.",
            "VernacEndSegment",
            "e8e1b6ac1389920d8b31f9f12c2450f63c12cab2"
        ]
    ],
    "proofs": [
        {
            "name": "checkPrfAXMIsPR",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfAXM in |- *.",
                        "VernacExtend",
                        "c60a622321b3bfab3e2563e7932853b17f85782b"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => switchPR (charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) (cPairPi1 p)) (S (S (cPair (cPairPi1 p) 0))) 0).",
                        "VernacExtend",
                        "092274073c9f90da8261bd7eda3005037cdcb270"
                    ]
                },
                {
                    "command": [
                        "apply compose1_3IsPR with (f1 := fun p : nat => charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) (cPairPi1 p)) (f2 := fun p : nat => S (S (cPair (cPairPi1 p) 0))) (f3 := fun p : nat => 0).",
                        "VernacExtend",
                        "3d2c207f367af38cccd12e96568c2fa4ce10de5e"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "2c56e6458aa54c48016a4665c866ba48aa416d3a"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => S (cPair (cPairPi1 p) 0)).",
                        "VernacExtend",
                        "57c6ecdf4e70ceeb811db3e65f956684d19e163d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPair (cPairPi1 p) 0).",
                        "VernacExtend",
                        "cc05b7992b82493591c08bcc77661377c3066b18"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f' := fun p : nat => 0).",
                        "VernacExtend",
                        "1e6cf9992d95acd8d5c9fa23362a3d574b9cdc80"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfMPIsPR",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfMP in |- *.",
                        "VernacExtend",
                        "c8332ce9f1d1b928a4151c79f1f072ee044c194d"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun p recs : nat => wellFormedFormula (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) * (charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p)) * (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs * codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs))) (f2 := fun p recs : nat => S (codeApp (pred (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs)) (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))) (f3 := fun p recs : nat => 0).",
                        "VernacExtend",
                        "962ab68c8f8e15df1516895c3c1c0b38b3ae7a50"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun p recs : nat => wellFormedFormula (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (g := fun p recs : nat => charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p)) * (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs * codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)).",
                        "VernacExtend",
                        "90767b22602dcd28c1bed5745370783678f00cb1"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => wellFormedFormula (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "62570267bbbd8188ac4662896d06384d8ca7a83e"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "e20d978fe5a11ac750d4d439a45b6da0c3272397"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedFormula in |- *.",
                        "VernacExtend",
                        "8ee3e5409e20ff24a1dd69fc3761bb8c5fa24cde"
                    ]
                },
                {
                    "command": [
                        "apply wellFormedFormulaIsPR.",
                        "VernacExtend",
                        "88de7a17a4d8bc9d27add2356da5143cd1e49d78"
                    ]
                },
                {
                    "command": [
                        "apply codeArityFIsPR.",
                        "VernacExtend",
                        "eab601a7a9a83684a31eb2c9739040d03a0fd095"
                    ]
                },
                {
                    "command": [
                        "apply codeArityRIsPR.",
                        "VernacExtend",
                        "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun p recs : nat => charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p))) (g := fun p recs : nat => codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs * codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs).",
                        "VernacExtend",
                        "17e187aa049045797d3f99d2916295e21b6f433f"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p))).",
                        "VernacExtend",
                        "737c01b2a8d5239f3c1b228b9e67b0cb18165309"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 p)).",
                        "VernacExtend",
                        "307b45acd0133ecf86035ba7af274d73f4b44342"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "055868f2232333d4afea95583b0ff77da0857f40"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "70100804ae5bbc624f13ad4aee0038be6b3ed36d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs) (g := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs).",
                        "VernacExtend",
                        "02ac1f4e64f189608ce32e82119370cb0dd019e2"
                    ]
                },
                {
                    "command": [
                        "apply callIsPR with (g := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "db719baf4d92f9000aac6b1981a0f05d77b4f60b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "1aee1ef4a894fb427e61568f54c13ec5664386a8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun p recs : nat => codeApp (pred (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs)) (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs))).",
                        "VernacExtend",
                        "88a8826f0eca669bd447518cb07f532596e0cca2"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun p recs : nat => pred (codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs)) (g := fun p recs : nat => pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)).",
                        "VernacExtend",
                        "972fea7298a6a0c718cc2312f0cd07cf85f6ebc2"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi1 (cPairPi2 (cPairPi2 p)))) recs).",
                        "VernacExtend",
                        "d40ca6bb362a07a85974a2ce1dfc60e5150dc511"
                    ]
                },
                {
                    "command": [
                        "apply callIsPR with (g := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "db719baf4d92f9000aac6b1981a0f05d77b4f60b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs).",
                        "VernacExtend",
                        "ef45606f8ab3509a3ac01baab20bd1b32a61fadf"
                    ]
                },
                {
                    "command": [
                        "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "1aee1ef4a894fb427e61568f54c13ec5664386a8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply codeAppIsPR.",
                        "VernacExtend",
                        "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 0).",
                        "VernacExtend",
                        "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfGENIsPR",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfGEN in |- *.",
                        "VernacExtend",
                        "d7758d9bd2adff6d581e6ae47a8a17e1160c3e26"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun p recs : nat => charFunction 2 beq_nat (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPairPi1 p) * (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs * (1 - codeIn (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))))) (f2 := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs) (f3 := fun p recs : nat => 0).",
                        "VernacExtend",
                        "a391ea26a868c5d336795a787c681087346ebf4a"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun p recs : nat => charFunction 2 beq_nat (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPairPi1 p)) (g := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs * (1 - codeIn (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs))))).",
                        "VernacExtend",
                        "09d486d650afb7a0a89df88890311f7221ab69e4"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "8789ce39658681b739e6bccf8126f75ef4c40371"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => cPairPi1 p).",
                        "VernacExtend",
                        "51ed0a455326a37c38aeb43cda2c3d979e138b36"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => 3) (f' := fun p : nat => cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "5120936c4b650278cda18d972dfd9ac95060e8b2"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "dd6071c10f7c30a2c424f8ae332bf48ad5c38302"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs) (g := fun p recs : nat => 1 - codeIn (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))).",
                        "VernacExtend",
                        "41609326cd888c6bb5cfb1df6ff01f5bb6aef1b8"
                    ]
                },
                {
                    "command": [
                        "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "1aee1ef4a894fb427e61568f54c13ec5664386a8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun p recs : nat => 1) (g := fun p recs : nat => codeIn (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)))).",
                        "VernacExtend",
                        "281dd5b1962c420cf705a6aab65904b12d24172a"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 1).",
                        "VernacExtend",
                        "b23baeb83b401cb3543a338ae23a5f8c3e580492"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun p recs : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (g := fun p recs : nat => codeFreeVarListFormula (pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs))).",
                        "VernacExtend",
                        "b9e4369d0395a6d7024c971cd0f97ecf50bec3ae"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "5b3ac6cd87152e0c980d70b3e6123d1800f35a77"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun p recs : nat => pred (codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs)).",
                        "VernacExtend",
                        "d54a74c71210f629c1fb5db6aae87f70a0803ad5"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun p recs : nat => codeNth (p - S (cPairPi2 (cPairPi2 (cPairPi2 p)))) recs).",
                        "VernacExtend",
                        "ef45606f8ab3509a3ac01baab20bd1b32a61fadf"
                    ]
                },
                {
                    "command": [
                        "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "1aee1ef4a894fb427e61568f54c13ec5664386a8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply codeFreeVarListFormulaIsPR.",
                        "VernacExtend",
                        "bcff41d33e5cfd03476e43a32f18eac7e7cf8d9e"
                    ]
                },
                {
                    "command": [
                        "apply codeInIsPR.",
                        "VernacExtend",
                        "4b880ac4afef6fdb973e1e6625aea0cfc3d82d57"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "apply callIsPR with (g := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "1aee1ef4a894fb427e61568f54c13ec5664386a8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 0).",
                        "VernacExtend",
                        "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfIMP1IsPR",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfIMP1 in |- *.",
                        "VernacExtend",
                        "9e211d9a93d5fcf92c9116ed225fcc05fc33f3c5"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "4f59e9cfcb03c09460526aeead9f19431e48be15"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "ebd86c5276731665c5041d8a61b0b321fc05b517"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "2c7b5fdbe9a3aa6723425cc4b28aa221a1063f53"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))).",
                        "VernacExtend",
                        "d86f627409cd9a7fe7fe411824ea59458b602f27"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => 1) (f' := fun p : nat => cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p)))))).",
                        "VernacExtend",
                        "566174d100c400d3a008edbd541a90e71e9a89ee"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "d8923ad75fa8bab2134f3cd4a5a0959481aa06f4"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => 1) (f' := fun p : nat => cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "cecb258751e91943f5fa50d653d3811839e78449"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "3740445dae8958959915616c4f7174690de8b815"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfIMP2IsPR",
            "line_nb": 210,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfIMP2 in |- *.",
                        "VernacExtend",
                        "1361bbd8ad719579122b16c5de608a39dbefba1f"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "e779727eb11061b0fdbde3d868df619fe10671f4"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "ebd86c5276731665c5041d8a61b0b321fc05b517"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "628e39b7ac3ae8796e86d880e0712c251bfdbd70"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "0b8d546e70715ecfa5374b260a2b265e4596d37d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))).",
                        "VernacExtend",
                        "a79ee9707f8026a41740875b3bec110338027004"
                    ]
                },
                {
                    "command": [
                        "replace (fun p : nat => cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))) with (fun p : nat => codeImp (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (codeImp (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "39f812a928ed59080a3c3c94d60639a5fad249ee"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => codeImp (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))).",
                        "VernacExtend",
                        "3e3af5056aec2c204c16a61eebf43df667d05866"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "52ed5d09ceb2483ad112e0c686df3eb2ddb48994"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "110efca78549347ba0818f540749e059398b7802"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "acd041d6ae5ac0a0c27ab5f3fa53b9cf58881c11"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "dd6071c10f7c30a2c424f8ae332bf48ad5c38302"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "e960482deea59db39ff9845d1e16e11045ec6a7b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfCPIsPR",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfCP in |- *.",
                        "VernacExtend",
                        "799d0befaa01a8f618c800fc2ba767228d597966"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPair 1 (cPair (cPair 2 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (cPair 2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "a2355c9d811a67a9bc4939b57f5409de926a513d"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "ebd86c5276731665c5041d8a61b0b321fc05b517"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "2c7b5fdbe9a3aa6723425cc4b28aa221a1063f53"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPair 1 (cPair (cPair 2 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (cPair 2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))).",
                        "VernacExtend",
                        "0deb24d532e379d6cf18beddefd728ac62fd8647"
                    ]
                },
                {
                    "command": [
                        "replace (fun p : nat => cPair 1 (cPair (cPair 1 (cPair (cPair 2 (cPairPi1 (cPairPi2 (cPairPi2 p)))) (cPair 2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))) (cPair 1 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) with (fun p : nat => codeImp (codeImp (codeNot (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeNot (cPairPi2 (cPairPi2 (cPairPi2 p))))) (codeImp (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "d4ccc9500f3bab37afc8d7260cae78ffeb963d01"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => codeImp (codeNot (cPairPi1 (cPairPi2 (cPairPi2 p)))) (codeNot (cPairPi2 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => codeImp (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "a7cff091a148c9cec34d528389a263c41f6dd88d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => codeNot (cPairPi1 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => codeNot (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "a3f454cf0376a1610d43e5cf7445d093675d9d0e"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "055868f2232333d4afea95583b0ff77da0857f40"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeNotIsPR.",
                        "VernacExtend",
                        "0a35a59c766204b86ed2d04c6013e7d0330a6062"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeNotIsPR.",
                        "VernacExtend",
                        "0a35a59c766204b86ed2d04c6013e7d0330a6062"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "3740445dae8958959915616c4f7174690de8b815"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfFA1IsPR",
            "line_nb": 285,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfFA1 in |- *.",
                        "VernacExtend",
                        "061b7fea3c9480423a4e7847563359e1b9ab2050"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => wellFormedTerm (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) * charFunction 2 beq_nat (cPair 1 (cPair (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "8fbc1c40be1bd87595dc2da5da1bf2d11e424a17"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "ebd86c5276731665c5041d8a61b0b321fc05b517"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "628e39b7ac3ae8796e86d880e0712c251bfdbd70"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "0b8d546e70715ecfa5374b260a2b265e4596d37d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => wellFormedTerm (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "c8e8a83187dd87c2c56abd8085a5dca5fdfefae6"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "2b9417a3702ff58e128cf8bb18c40956987bf06a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedTerm in |- *.",
                        "VernacExtend",
                        "6a2372d2b2b4dff7000df5cbcd2c9a6e26d14e05"
                    ]
                },
                {
                    "command": [
                        "apply wellFormedTermIsPR.",
                        "VernacExtend",
                        "867e283982fb20f5d2de0d694c7bdc426da2daaf"
                    ]
                },
                {
                    "command": [
                        "apply codeArityFIsPR.",
                        "VernacExtend",
                        "eab601a7a9a83684a31eb2c9739040d03a0fd095"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))).",
                        "VernacExtend",
                        "95cb6f0c802ec3de26ed8546d48c0d5b4cbd263a"
                    ]
                },
                {
                    "command": [
                        "replace (fun p : nat => cPair 1 (cPair (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) with (fun p : nat => codeImp (cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))))); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "35e8f4cd241e408fa8c0e3e6b60ec9cab1ea15af"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 3 (cPair (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => codeSubFormula (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "fe565e09d101bff497d07335e068194f4820b3f7"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (g := fun a b : nat => cPair 3 (cPair a b)).",
                        "VernacExtend",
                        "2b87a28ac058bc90729dcc062c20a873bd26f9c2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeForallIsPR.",
                        "VernacExtend",
                        "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
                    ]
                },
                {
                    "command": [
                        "apply compose1_3IsPR with (f1 := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f2 := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f3 := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))); try assumption.",
                        "VernacExtend",
                        "8c68bcbbcf21ab22d7959788ecaccbf54a3695a9"
                    ]
                },
                {
                    "command": [
                        "apply codeSubFormulaIsPR.",
                        "VernacExtend",
                        "5d0bf0a7be6161c032b98eb84f0dede00ad6da7c"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfFA2IsPR",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfFA2 in |- *.",
                        "VernacExtend",
                        "b2deab87271068f57bb61dcd1e9df76bcbbbefa3"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => (1 - codeIn (cPairPi2 (cPairPi2 (cPairPi2 p))) (codeFreeVarFormula (cPairPi1 (cPairPi2 (cPairPi2 p))))) * charFunction 2 beq_nat (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "30418f443c5c4469bb09f70f9251dcb260966fc2"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "ebd86c5276731665c5041d8a61b0b321fc05b517"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "2c7b5fdbe9a3aa6723425cc4b28aa221a1063f53"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => 1 - codeIn (cPairPi2 (cPairPi2 (cPairPi2 p))) (codeFreeVarFormula (cPairPi1 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "bee8abfd27e7724d59896419888a859dbca57f26"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => 1) (f' := fun p : nat => codeIn (cPairPi2 (cPairPi2 (cPairPi2 p))) (codeFreeVarFormula (cPairPi1 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "4abbbfcd3733b6f58b25cef50118be11f2a22eb9"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => codeFreeVarFormula (cPairPi1 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "f8aab24f86a16cc9d9ee8019321bb5b361fd7dbf"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "055868f2232333d4afea95583b0ff77da0857f40"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeFreeVarFormulaIsPR.",
                        "VernacExtend",
                        "ec41269457e6eb685ba7d57f77bd65d355ac33d5"
                    ]
                },
                {
                    "command": [
                        "apply codeInIsPR.",
                        "VernacExtend",
                        "4b880ac4afef6fdb973e1e6625aea0cfc3d82d57"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))).",
                        "VernacExtend",
                        "47d581dd327a69009b178ad7d82c648bf9a32dc7"
                    ]
                },
                {
                    "command": [
                        "replace (fun p : nat => cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))))) with (fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p)))))); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "3ffbdadaeb0d0138b1b50aef8f212d501fbea2aa"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "8e7b9594a600e43c9371f4307cec133e0befad94"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (g := fun a b : nat => cPair 3 (cPair a b)).",
                        "VernacExtend",
                        "f3f71ea1f1aad5103821b6b0e7171b2bc24bbea3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeForallIsPR.",
                        "VernacExtend",
                        "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfFA3IsPR",
            "line_nb": 360,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfFA3 in |- *.",
                        "VernacExtend",
                        "a3384a6d8e38d95e1c7379c75d1184665cd9ef64"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "75d5bba9f10c351ea7be578ad93b8552a7b201e7"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "ebd86c5276731665c5041d8a61b0b321fc05b517"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "628e39b7ac3ae8796e86d880e0712c251bfdbd70"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "0b8d546e70715ecfa5374b260a2b265e4596d37d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2e66f58592c8d34d78abd43f1d330b16d81ec93b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))).",
                        "VernacExtend",
                        "b08046a4e6f59df7d7e3fe40b4dc5382b70819fd"
                    ]
                },
                {
                    "command": [
                        "replace (fun p : nat => cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPair 1 (cPair (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))) (cPair 1 (cPair (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))))) with (fun p : nat => codeImp (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) (codeImp (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))))); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "7d90fbb62feed1a8160f77bf2d6243d391906df7"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))))) (f' := fun p : nat => codeImp (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))))).",
                        "VernacExtend",
                        "05961731ceb8713ca1d6d73bedebd90958a521b0"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => codeImp (cPairPi1 (cPairPi2 (cPairPi2 p))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p))))) (g := fun a b : nat => cPair 3 (cPair a b)).",
                        "VernacExtend",
                        "39e1db5c440a890e7b695951052064ba044ed036"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "dd6071c10f7c30a2c424f8ae332bf48ad5c38302"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply codeForallIsPR.",
                        "VernacExtend",
                        "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 p))))) (f' := fun p : nat => cPair 3 (cPair (cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))))).",
                        "VernacExtend",
                        "3586b9c1266bcb45089fd8c5d69976e93e82a89c"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 p))) (g := fun a b : nat => cPair 3 (cPair a b)).",
                        "VernacExtend",
                        "a5e062cc4fb25f853ea4fdeea45715efd5a90a5c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeForallIsPR.",
                        "VernacExtend",
                        "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPairPi1 (cPairPi2 (cPairPi2 (cPairPi2 p)))) (g := fun a b : nat => cPair 3 (cPair a b)).",
                        "VernacExtend",
                        "94e6249d8e8b1be3be11c58ade45d308574f3e35"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeForallIsPR.",
                        "VernacExtend",
                        "daba1e3a87846ffa070d78ec8f4c3a0e93b46d7f"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfEQnIsPR",
            "line_nb": 404,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfEQ1 in |- *.",
                        "VernacExtend",
                        "178cc75d9ba430f8c70f713dca5d06129738fbd1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) 0 * charFunction 2 beq_nat n (cPairPi1 p)).",
                        "VernacExtend",
                        "57e8524be56af1957bca82a424fc34d5532dd08c"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => charFunction 2 beq_nat (cPairPi2 (cPairPi2 p)) 0) (f' := fun p : nat => charFunction 2 beq_nat n (cPairPi1 p)).",
                        "VernacExtend",
                        "3141e2a96adf317158f24b9e6035c23fa520d454"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)) (f' := fun p : nat => 0).",
                        "VernacExtend",
                        "a8d64a9f8512ce0ac5148227eca0f1a2872a41e8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => n).",
                        "VernacExtend",
                        "288198270d37bdf43b92a09a72448b94eb6b81bd"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfEQ1IsPR",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfEQ1 in |- *.",
                        "VernacExtend",
                        "178cc75d9ba430f8c70f713dca5d06129738fbd1"
                    ]
                },
                {
                    "command": [
                        "apply checkPrfEQnIsPR.",
                        "VernacExtend",
                        "e5a0872af1cbc955ec7d6ec50291f9d5aac16e94"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfEQ2IsPR",
            "line_nb": 424,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfEQ2 in |- *.",
                        "VernacExtend",
                        "bcdf94971d4e033b1ca65e812d1250f6a73e9828"
                    ]
                },
                {
                    "command": [
                        "apply checkPrfEQnIsPR.",
                        "VernacExtend",
                        "e5a0872af1cbc955ec7d6ec50291f9d5aac16e94"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfEQ3IsPR",
            "line_nb": 429,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfEQ3 in |- *.",
                        "VernacExtend",
                        "5b92a9c028a7a0dc790bb93010330866e4454caa"
                    ]
                },
                {
                    "command": [
                        "apply checkPrfEQnIsPR.",
                        "VernacExtend",
                        "e5a0872af1cbc955ec7d6ec50291f9d5aac16e94"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeAxmEqHelpIsPR",
            "line_nb": 434,
            "steps": [
                {
                    "command": [
                        "unfold codeAxmEqHelp in |- *.",
                        "VernacExtend",
                        "13b43db87a4c730327f54d15447248cef2146d8b"
                    ]
                },
                {
                    "command": [
                        "apply ind1ParamIsPR with (g := fun f : nat => f) (f := fun m rec f : nat => cPair 1 (cPair (cPair 0 (cPair (cPair 0 (m + m)) (cPair 0 (S (m + m))))) rec)).",
                        "VernacExtend",
                        "aa69822cbd0e4453a973ef1faa2d8f18257c4019"
                    ]
                },
                {
                    "command": [
                        "apply filter110IsPR with (g := fun m rec : nat => codeImp (cPair 0 (cPair (cPair 0 (m + m)) (cPair 0 (S (m + m))))) rec).",
                        "VernacExtend",
                        "0e63a746e39bba5529c352bc94b1a6cf583b6b09"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun m rec : nat => cPair 0 (cPair (cPair 0 (m + m)) (cPair 0 (S (m + m))))) (g := fun m rec : nat => rec).",
                        "VernacExtend",
                        "ba74d8ee7596edf283918ae18cf5296b749d5c01"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun m : nat => cPair 0 (cPair (cPair 0 (m + m)) (cPair 0 (S (m + m))))).",
                        "VernacExtend",
                        "ccc05a283e660078a84bd52098815d7e25fcf577"
                    ]
                },
                {
                    "command": [
                        "assert (forall g : nat -> nat, isPR 1 g -> isPR 1 (fun a : nat => cPair 0 (g a))).",
                        "VernacExtend",
                        "8a75a2de155cf8c9e80d8e8d23c76bdaa4123cd1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun a : nat => 0).",
                        "VernacExtend",
                        "094b4a5ba85a3313c6d9694451ce8fa01a8b2bd9"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply H with (g := fun m : nat => cPair (cPair 0 (m + m)) (cPair 0 (S (m + m)))).",
                        "VernacExtend",
                        "9645d4aa7668f1df74b16fa7c0d10d6e7ad606b2"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun m : nat => cPair 0 (m + m)) (f' := fun m : nat => cPair 0 (S (m + m))).",
                        "VernacExtend",
                        "a18d78c64eb078dd3f1da0874bc922f0f949fd77"
                    ]
                },
                {
                    "command": [
                        "apply H with (g := fun m : nat => m + m).",
                        "VernacExtend",
                        "5f8b4f680b66a1d464a6610f7a5e70085355c568"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun m : nat => m) (f' := fun m : nat => m).",
                        "VernacExtend",
                        "ab86682a81834404654b493667bd66e2e82102f2"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply plusIsPR.",
                        "VernacExtend",
                        "3b0a74ba0921212c33f63b79cd048faf8df5a016"
                    ]
                },
                {
                    "command": [
                        "apply H with (g := fun m : nat => S (m + m)).",
                        "VernacExtend",
                        "e4cdd134cfa8374a1ae6f3ee92c900307262649e"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun m : nat => m + m).",
                        "VernacExtend",
                        "590054dc715d61fb144fcf6b33ab7d7b13ebb4f3"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun m : nat => m) (f' := fun m : nat => m).",
                        "VernacExtend",
                        "ab86682a81834404654b493667bd66e2e82102f2"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply plusIsPR.",
                        "VernacExtend",
                        "3b0a74ba0921212c33f63b79cd048faf8df5a016"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeNVars1IsPR",
            "line_nb": 466,
            "steps": [
                {
                    "command": [
                        "unfold codeNVars1 in |- *.",
                        "VernacExtend",
                        "c13e339545047db1b72361fe334b95a7c4a12e41"
                    ]
                },
                {
                    "command": [
                        "apply indIsPR with (f := fun m rec : nat => S (cPair (cPair 0 (m + m)) rec)).",
                        "VernacExtend",
                        "ddf470f4db8e02dfc1e11a75a96097ea9b2dfaa1"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun m rec : nat => cPair (cPair 0 (m + m)) rec).",
                        "VernacExtend",
                        "73bbe30a00302a5872cd0a46895a8b2e0c27d4ef"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun m rec : nat => cPair 0 (m + m)) (g := fun m rec : nat => rec).",
                        "VernacExtend",
                        "ef52b410b5b5ce7dba04937769da143ecec4f2c5"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun m : nat => cPair 0 (m + m)).",
                        "VernacExtend",
                        "67dd60a87f8514e0f2776fa8c7c0073c13ee3ae2"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun m : nat => 0) (f' := fun m : nat => m + m).",
                        "VernacExtend",
                        "17735e8022a1022acd3f046c63723322fb56028f"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun m : nat => m) (f' := fun m : nat => m).",
                        "VernacExtend",
                        "ab86682a81834404654b493667bd66e2e82102f2"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply plusIsPR.",
                        "VernacExtend",
                        "3b0a74ba0921212c33f63b79cd048faf8df5a016"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeNVars2IsPR",
            "line_nb": 484,
            "steps": [
                {
                    "command": [
                        "unfold codeNVars2 in |- *.",
                        "VernacExtend",
                        "ac945ed7f9b962e8266793456152c8fa82ebd9b4"
                    ]
                },
                {
                    "command": [
                        "apply indIsPR with (f := fun m rec : nat => S (cPair (cPair 0 (S (m + m))) rec)).",
                        "VernacExtend",
                        "87ac4fbe6c8c02339f5a5c758b22a7cfb7e7b90e"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun m rec : nat => cPair (cPair 0 (S (m + m))) rec).",
                        "VernacExtend",
                        "9d2a162818d84968a77fa3b69646a1d77d83291d"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun m rec : nat => cPair 0 (S (m + m))) (g := fun m rec : nat => rec).",
                        "VernacExtend",
                        "c84c8edb8440262736eb1fb9a5d41681dddade72"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun m : nat => cPair 0 (S (m + m))).",
                        "VernacExtend",
                        "8b561cde95113038d9ec3c38ded0c283215fab8f"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun m : nat => 0) (f' := fun m : nat => S (m + m)).",
                        "VernacExtend",
                        "a5df16ee950d13b4a161256df854fb00de6e7f01"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun m : nat => m + m).",
                        "VernacExtend",
                        "590054dc715d61fb144fcf6b33ab7d7b13ebb4f3"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun m : nat => m) (f' := fun m : nat => m).",
                        "VernacExtend",
                        "ab86682a81834404654b493667bd66e2e82102f2"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply plusIsPR.",
                        "VernacExtend",
                        "3b0a74ba0921212c33f63b79cd048faf8df5a016"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeNVarsCorrect",
            "line_nb": 503,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecn.",
                        "VernacExtend",
                        "9f2f9eb25208250dc135a15348250f012f2be502"
                    ]
                },
                {
                    "command": [
                        "induction (nVars L n).",
                        "VernacExtend",
                        "41dd578a29209204de567c43fa10392192a0a327"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecn.",
                        "VernacExtend",
                        "9f2f9eb25208250dc135a15348250f012f2be502"
                    ]
                },
                {
                    "command": [
                        "induction (nVars L n).",
                        "VernacExtend",
                        "41dd578a29209204de567c43fa10392192a0a327"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeOrIsPR",
            "line_nb": 524,
            "steps": [
                {
                    "command": [
                        "unfold codeOr in |- *.",
                        "VernacExtend",
                        "297733ae9259c3a7afb8b02e7165cf8250a6e670"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun a b : nat => codeNot a) (g := fun a b : nat => b).",
                        "VernacExtend",
                        "a9d74d5e54358e81f6d205948e5565a621fa8735"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR.",
                        "VernacExtend",
                        "a511891d7a43751c68939783b674e14f242f8594"
                    ]
                },
                {
                    "command": [
                        "apply codeNotIsPR.",
                        "VernacExtend",
                        "0a35a59c766204b86ed2d04c6013e7d0330a6062"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeAndIsPR",
            "line_nb": 532,
            "steps": [
                {
                    "command": [
                        "unfold codeAnd in |- *.",
                        "VernacExtend",
                        "bfe6b4aa8d0998282fb153a206936854febe7c0f"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun a b : nat => codeOr (codeNot a) (codeNot b)).",
                        "VernacExtend",
                        "038a9595f26541d0b9b127d7b6410825e20d3125"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun a b : nat => codeNot a) (g := fun a b : nat => codeNot b).",
                        "VernacExtend",
                        "2b69accfeabfe30fc739c2c6082fe44f278ebdfa"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR.",
                        "VernacExtend",
                        "a511891d7a43751c68939783b674e14f242f8594"
                    ]
                },
                {
                    "command": [
                        "apply codeNotIsPR.",
                        "VernacExtend",
                        "0a35a59c766204b86ed2d04c6013e7d0330a6062"
                    ]
                },
                {
                    "command": [
                        "apply filter01IsPR.",
                        "VernacExtend",
                        "6554c96f4a11a34fca739d2e17d9266f8548438c"
                    ]
                },
                {
                    "command": [
                        "apply codeNotIsPR.",
                        "VernacExtend",
                        "0a35a59c766204b86ed2d04c6013e7d0330a6062"
                    ]
                },
                {
                    "command": [
                        "apply codeOrIsPR.",
                        "VernacExtend",
                        "3f3b6663c25f3b018c01638b8a6ff9b5c825cfec"
                    ]
                },
                {
                    "command": [
                        "apply codeNotIsPR.",
                        "VernacExtend",
                        "0a35a59c766204b86ed2d04c6013e7d0330a6062"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeIffIsPR",
            "line_nb": 543,
            "steps": [
                {
                    "command": [
                        "unfold codeIff in |- *.",
                        "VernacExtend",
                        "bb5ec5e27978ece837b2b322e197aeb0b3e2b4de"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (g := fun a b : nat => codeImp b a).",
                        "VernacExtend",
                        "7ce3bfeeaba5898d7d418f0b746ffe44bdca45c8"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply swapIsPR.",
                        "VernacExtend",
                        "df1101069b402c0319f06625614023d04b616873"
                    ]
                },
                {
                    "command": [
                        "apply codeImpIsPR.",
                        "VernacExtend",
                        "407e5875356c42a3b76ea5603a597b9e316f7652"
                    ]
                },
                {
                    "command": [
                        "apply codeAndIsPR.",
                        "VernacExtend",
                        "8ef5d95ed6e70e9c9c28ca6f1d0e5907cba4e423"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfEQ4IsPR",
            "line_nb": 551,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfEQ4 in |- *.",
                        "VernacExtend",
                        "652864d151913bb5f29d5ef850669fbef1f7cc75"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => notZero (codeArityR (cPairPi2 (cPairPi2 p))) * charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityR (cPairPi2 (cPairPi2 p)))) (codeIff (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "b05ad6e95a32437f78770b144ff7ff4c53cb88b9"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2630f28b5949bc596d99f2a2710f40312039d62b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => notZero (codeArityR (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityR (cPairPi2 (cPairPi2 p)))) (codeIff (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "4a1c9dbedb1ae78304263bdd2b0f88370abe2e49"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => codeArityR (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "46d32fc87bfd7259f9809036fcbc48b86b9b4754"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeArityRIsPR.",
                        "VernacExtend",
                        "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
                    ]
                },
                {
                    "command": [
                        "apply notZeroIsPR.",
                        "VernacExtend",
                        "d560836695e6a004a1fd240990803d448a999c93"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => codeAxmEqHelp (pred (codeArityR (cPairPi2 (cPairPi2 p)))) (codeIff (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))))).",
                        "VernacExtend",
                        "6fdee9b7e475235f198bae256a64f887675b8388"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => pred (codeArityR (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => codeIff (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p))))))).",
                        "VernacExtend",
                        "eed4231c2682e0c35dab2faa6ec9102fa9f8951f"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => codeArityR (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "46d32fc87bfd7259f9809036fcbc48b86b9b4754"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeArityRIsPR.",
                        "VernacExtend",
                        "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => cPair (S (S (S (S (cPairPi2 (cPairPi2 p)))))) (codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p)))))).",
                        "VernacExtend",
                        "eaf5eb3063e9fa3e604bb307c0756186a11f4ae5"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => S (S (S (S (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => codeNVars1 (pred (codeArityR (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "f24c00b528b94601fe8628046ae3c8bda81adb70"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)) (g := iterate S 4).",
                        "VernacExtend",
                        "1f60c3959b5f9444c49aa95ea8bac7bf370afe6c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply iterateIsPR.",
                        "VernacExtend",
                        "23f2ec9f239a02136a9ab4eaecd36305d8bf56e6"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => pred (codeArityR (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "e2449728667752bdc25d71b281df85f8c434b7b8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => codeArityR (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "46d32fc87bfd7259f9809036fcbc48b86b9b4754"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeArityRIsPR.",
                        "VernacExtend",
                        "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply codeNVars1IsPR.",
                        "VernacExtend",
                        "1b7c92290fcf117e23dbe3ab151b5f72b609c3e2"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => S (S (S (S (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => codeNVars2 (pred (codeArityR (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "3ea746e4ff1587f5753281fbcd729dfef70c4e07"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)) (g := iterate S 4).",
                        "VernacExtend",
                        "1f60c3959b5f9444c49aa95ea8bac7bf370afe6c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply iterateIsPR.",
                        "VernacExtend",
                        "23f2ec9f239a02136a9ab4eaecd36305d8bf56e6"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => pred (codeArityR (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "e2449728667752bdc25d71b281df85f8c434b7b8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => codeArityR (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "46d32fc87bfd7259f9809036fcbc48b86b9b4754"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeArityRIsPR.",
                        "VernacExtend",
                        "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply codeNVars2IsPR.",
                        "VernacExtend",
                        "bf702bb691236d7562f2f71318cb972c1c34d58d"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply codeIffIsPR.",
                        "VernacExtend",
                        "5c3d180a045c0ded62b867b1bc81d6a5698054cf"
                    ]
                },
                {
                    "command": [
                        "apply codeAxmEqHelpIsPR.",
                        "VernacExtend",
                        "d75c9acde4f9510c692afba4febad546324d4340"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfEQ5IsPR",
            "line_nb": 603,
            "steps": [
                {
                    "command": [
                        "unfold checkPrfEQ5 in |- *.",
                        "VernacExtend",
                        "7bd6b34ffd4637c0de2ab12288d9f039fd39ea9a"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun p : nat => notZero (codeArityF (cPairPi2 (cPairPi2 p))) * charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityF (cPairPi2 (cPairPi2 p)))) (cPair 0 (cPair (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p))))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "a3450cc16a2e402776ec0e2fe78ef025b27a8a6b"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun p : nat => cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "2630f28b5949bc596d99f2a2710f40312039d62b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => notZero (codeArityF (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => charFunction 2 beq_nat (codeAxmEqHelp (pred (codeArityF (cPairPi2 (cPairPi2 p)))) (cPair 0 (cPair (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p))))))))) (cPairPi1 p)).",
                        "VernacExtend",
                        "405914cbfafa604195784700f9adbbec86e76425"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => codeArityF (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "e480e9925decaa9451effa054739f20a9a5485fa"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeArityFIsPR.",
                        "VernacExtend",
                        "eab601a7a9a83684a31eb2c9739040d03a0fd095"
                    ]
                },
                {
                    "command": [
                        "apply notZeroIsPR.",
                        "VernacExtend",
                        "d560836695e6a004a1fd240990803d448a999c93"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => codeAxmEqHelp (pred (codeArityF (cPairPi2 (cPairPi2 p)))) (cPair 0 (cPair (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p))))))))).",
                        "VernacExtend",
                        "9e4413e366e99771027a6f953d99d6c7e45f315f"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => pred (codeArityF (cPairPi2 (cPairPi2 p)))) (f' := fun p : nat => cPair 0 (cPair (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))))).",
                        "VernacExtend",
                        "a0fc1679f56f64b501fbb2bec0520d69c610a8d1"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => codeArityF (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "e480e9925decaa9451effa054739f20a9a5485fa"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeArityFIsPR.",
                        "VernacExtend",
                        "eab601a7a9a83684a31eb2c9739040d03a0fd095"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (f' := fun p : nat => cPair (S (cPairPi2 (cPairPi2 p))) (codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p)))))) (g := fun a b : nat => cPair 0 (cPair a b)).",
                        "VernacExtend",
                        "0439ed1c7009f7ffca15bd7bd590d65380465f9c"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => S (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => codeNVars1 (pred (codeArityF (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "ce7ec3373de0a8d2d28605477492f2989d570332"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => pred (codeArityF (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "5594fdf5d5a6ab53404d9dea82aa575198ea3af8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => codeArityF (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "e480e9925decaa9451effa054739f20a9a5485fa"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeArityFIsPR.",
                        "VernacExtend",
                        "eab601a7a9a83684a31eb2c9739040d03a0fd095"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply codeNVars1IsPR.",
                        "VernacExtend",
                        "1b7c92290fcf117e23dbe3ab151b5f72b609c3e2"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun p : nat => S (cPairPi2 (cPairPi2 p))) (f' := fun p : nat => codeNVars2 (pred (codeArityF (cPairPi2 (cPairPi2 p))))).",
                        "VernacExtend",
                        "c50508dd2fbfd8f5f935ade018c6dc3e4e8d0067"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => pred (codeArityF (cPairPi2 (cPairPi2 p)))).",
                        "VernacExtend",
                        "5594fdf5d5a6ab53404d9dea82aa575198ea3af8"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => codeArityF (cPairPi2 (cPairPi2 p))).",
                        "VernacExtend",
                        "e480e9925decaa9451effa054739f20a9a5485fa"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun p : nat => cPairPi2 (cPairPi2 p)).",
                        "VernacExtend",
                        "9210bc3d6fdc95edad86ae1e055939900b42a540"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply codeArityFIsPR.",
                        "VernacExtend",
                        "eab601a7a9a83684a31eb2c9739040d03a0fd095"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply codeNVars2IsPR.",
                        "VernacExtend",
                        "bf702bb691236d7562f2f71318cb972c1c34d58d"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun a b : nat => 0).",
                        "VernacExtend",
                        "115a68521a28bcac552cdde780124b403f88a455"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 0).",
                        "VernacExtend",
                        "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply codeAxmEqHelpIsPR.",
                        "VernacExtend",
                        "d75c9acde4f9510c692afba4febad546324d4340"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply eqIsPR.",
                        "VernacExtend",
                        "493018d16fb870ceb55150454019ccac18f41f8a"
                    ]
                },
                {
                    "command": [
                        "apply multIsPR.",
                        "VernacExtend",
                        "e81beaf90a6eafd17be42571cffda5efa424c833"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfIsPR",
            "line_nb": 706,
            "steps": [
                {
                    "command": [
                        "unfold checkPrf in |- *.",
                        "VernacExtend",
                        "3e453d7494fa7091bc79e9374a2cef4d256cd59c"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun f p : nat => wellFormedFormula f) (f2 := fun f p : nat => checkPrfHelp (cPair f p)) (f3 := fun f p : nat => 0).",
                        "VernacExtend",
                        "8d7eb622624f0c96d229b5db3f1f6b811abc0225"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR.",
                        "VernacExtend",
                        "a511891d7a43751c68939783b674e14f242f8594"
                    ]
                },
                {
                    "command": [
                        "unfold wellFormedFormula in |- *.",
                        "VernacExtend",
                        "8ee3e5409e20ff24a1dd69fc3761bb8c5fa24cde"
                    ]
                },
                {
                    "command": [
                        "apply wellFormedFormulaIsPR.",
                        "VernacExtend",
                        "88de7a17a4d8bc9d27add2356da5143cd1e49d78"
                    ]
                },
                {
                    "command": [
                        "apply codeArityFIsPR.",
                        "VernacExtend",
                        "eab601a7a9a83684a31eb2c9739040d03a0fd095"
                    ]
                },
                {
                    "command": [
                        "apply codeArityRIsPR.",
                        "VernacExtend",
                        "01672d9295a7c0884a1dedf54d54cc957aba0ebf"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR.",
                        "VernacExtend",
                        "445bc7d854d3d7e2a09e4a95de2fd77f9491716b"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply checkPrfHelpIsPR.",
                        "VernacExtend",
                        "42eb1aea9a570b854c5eb684059d5b4ed8f9e683"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 0).",
                        "VernacExtend",
                        "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "checkPrfCorrect1",
            "line_nb": 721,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrf in |- *.",
                        "VernacExtend",
                        "3e453d7494fa7091bc79e9374a2cef4d256cd59c"
                    ]
                },
                {
                    "command": [
                        "rewrite (wellFormedFormulaCorrect1 L codeF codeArityF codeArityFIsCorrect1 codeR codeArityR codeArityRIsCorrect1).",
                        "VernacExtend",
                        "9eb8a453d21b8d0bee69a5f4f892e0ec32d38ac5"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "lazy beta delta [checkPrfHelp] in |- *.",
                        "VernacExtend",
                        "ee8246cc641f951a48923a9da3f8b305b7f8a2e3"
                    ]
                },
                {
                    "command": [
                        "set (A := fun p0 recs : nat => let type := cPairPi1 (cPairPi2 p0) in switchPR type (switchPR (pred type) (switchPR (pred (pred type)) (switchPR (pred (pred (pred type))) (switchPR (pred (pred (pred (pred type)))) (switchPR (pred (pred (pred (pred (pred type))))) (switchPR (pred (pred (pred (pred (pred (pred type)))))) (switchPR (pred (pred (pred (pred (pred (pred (pred type))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred type)))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred type))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type)))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type)))))))))))) (switchPR (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred (pred type))))))))))))) 0 (checkPrfEQ5 p0 recs)) (checkPrfEQ4 p0 recs)) (checkPrfEQ3 p0 recs)) (checkPrfEQ2 p0 recs)) (checkPrfEQ1 p0 recs)) (checkPrfFA3 p0 recs)) (checkPrfFA2 p0 recs)) (checkPrfFA1 p0 recs)) (checkPrfCP p0 recs)) (checkPrfIMP2 p0 recs)) (checkPrfIMP1 p0 recs)) (checkPrfGEN p0 recs)) (checkPrfMP p0 recs)) (checkPrfAXM p0 recs)) in *.",
                        "VernacExtend",
                        "78797e3c772e80170c31ec787db67097606c5ce4"
                    ]
                },
                {
                    "command": [
                        "induction p as [A0| Axm1 Axm2 A0 B p1 Hrecp1 p0 Hrecp0| Axm A0 v n p Hrecp| A0 B| A0 B C| A0 B| A0 v t| A0 v n| A0 B v| | | | R| f]; unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *; rewrite computeEvalStrongRecHelp; unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *; simpl in |- *; rewrite cPairProjections1.",
                        "VernacExtend",
                        "4ec40cc4b4d63ff0a7b32c9c6052a897f4511223"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ]; simpl in |- *.",
                        "VernacExtend",
                        "77317dca6c73d8f2b5096c2aeafae79bf2914645"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfAXM in |- *.",
                        "VernacExtend",
                        "c60a622321b3bfab3e2563e7932853b17f85782b"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ]; simpl in |- *.",
                        "VernacExtend",
                        "77317dca6c73d8f2b5096c2aeafae79bf2914645"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "set (C := cPair (cPair (cPair 1 (cPair (codeFormula L codeF codeR A0) (codeFormula L codeF codeR B))) (codePrf L codeF codeR Axm1 (fol.impH L A0 B) p1)) (cPair (codeFormula L codeF codeR A0) (codePrf L codeF codeR Axm2 A0 p0))) in *.",
                        "VernacExtend",
                        "692afde33580b0a404680f3f2963b7705a25e896"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold C at 1 in |- *.",
                        "VernacExtend",
                        "1a8675f6d5537599c2151ca97acf91c1d18617d9"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfMP in |- *.",
                        "VernacExtend",
                        "c8332ce9f1d1b928a4151c79f1f072ee044c194d"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite evalStrongRecHelp1.",
                        "VernacExtend",
                        "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecp0.",
                        "VernacExtend",
                        "32c1f58115cc56d4ff0c9c49da0e833d1296449d"
                    ]
                },
                {
                    "command": [
                        "replace (cPair 1 (cPair (codeFormula L codeF codeR A0) (codeFormula L codeF codeR B))) with (codeFormula L codeF codeR (fol.impH L A0 B)); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "383bc4908b651c3d293d1c95436848a4c62424d1"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecp1.",
                        "VernacExtend",
                        "a5ac074cecc349f8ce92655e13a1b749e5049837"
                    ]
                },
                {
                    "command": [
                        "rewrite (wellFormedFormulaCorrect1 L codeF codeArityF codeArityFIsCorrect1 codeR codeArityR codeArityRIsCorrect1).",
                        "VernacExtend",
                        "9eb8a453d21b8d0bee69a5f4f892e0ec32d38ac5"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (map (codeFormula L codeF codeR) (Axm1 ++ Axm2)) with (map (codeFormula L codeF codeR) Axm1 ++ map (codeFormula L codeF codeR) Axm2).",
                        "VernacExtend",
                        "0e4f54cd59aa4483e88b1bd5cd5089c6b59320c1"
                    ]
                },
                {
                    "command": [
                        "rewrite codeAppCorrect.",
                        "VernacExtend",
                        "2449e46e9b0d3ec4da65240655ab28b554eed145"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "generalize (codeFormula L codeF codeR); intro.",
                        "VernacExtend",
                        "45d78b5bd02e3e3315588fceadb32d2193dbfe50"
                    ]
                },
                {
                    "command": [
                        "clear p1 A Hrecp1 Hrecp0 C.",
                        "VernacExtend",
                        "2be14b762002da72584dd106d22b9f29523fde0d"
                    ]
                },
                {
                    "command": [
                        "induction Axm1 as [| a Axm1 HrecAxm1].",
                        "VernacExtend",
                        "b19b5937975f128f2fc6c2be7e37eaff6ad19a9d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite HrecAxm1.",
                        "VernacExtend",
                        "00907bebd1b46a677526b06d26381d04c52f8b63"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "eapply lt_le_trans; [ idtac | apply cPairLe2 ].",
                        "VernacExtend",
                        "25981248bba4d843213e95c7e307c6135695057a"
                    ]
                },
                {
                    "command": [
                        "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
                        "VernacExtend",
                        "b3aa85d967c3629158b50c3cda1ad7596272868f"
                    ]
                },
                {
                    "command": [
                        "unfold C in |- *.",
                        "VernacExtend",
                        "cb35f243768bdbad0fe05a3ae5cac30a865b5759"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "eapply lt_le_trans; [ idtac | apply cPairLe2 ].",
                        "VernacExtend",
                        "25981248bba4d843213e95c7e307c6135695057a"
                    ]
                },
                {
                    "command": [
                        "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
                        "VernacExtend",
                        "b3aa85d967c3629158b50c3cda1ad7596272868f"
                    ]
                },
                {
                    "command": [
                        "unfold C in |- *.",
                        "VernacExtend",
                        "cb35f243768bdbad0fe05a3ae5cac30a865b5759"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe1.",
                        "VernacExtend",
                        "273d467bdcab30f1cf5e460652e5c74f67b1471b"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfGEN in |- *.",
                        "VernacExtend",
                        "d7758d9bd2adff6d581e6ae47a8a17e1160c3e26"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite evalStrongRecHelp1.",
                        "VernacExtend",
                        "19a120738c89e08bc33958d9b76cd7cd9bc38e04"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecp.",
                        "VernacExtend",
                        "f20127a12a278a3a40a00386df7a771f34199aab"
                    ]
                },
                {
                    "command": [
                        "unfold pred in |- *.",
                        "VernacExtend",
                        "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
                    ]
                },
                {
                    "command": [
                        "rewrite codeFreeVarListFormulaCorrect.",
                        "VernacExtend",
                        "23736b457f22db179c614bd7c90c806e8c754c19"
                    ]
                },
                {
                    "command": [
                        "rewrite codeInCorrect.",
                        "VernacExtend",
                        "dd48b7b346befe83481fe8e1e05cd1e924730a51"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec v (freeVarListFormula L Axm)).",
                        "VernacExtend",
                        "dca2c5f4c7bb2b0e980412537d49efd674dfbb6b"
                    ]
                },
                {
                    "command": [
                        "elim n.",
                        "VernacExtend",
                        "c68f766a88bb5402d72ee6adaca953661a5d18b2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (charFunction 2 beq_nat (cPair 3 (cPair v (codeFormula L codeF codeR A0))) (cPair 3 (cPair v (codeFormula L codeF codeR A0)))) with 1.",
                        "VernacExtend",
                        "644b1cbe275500412db43510828d05bb239f2801"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "eapply lt_le_trans; [ idtac | apply cPairLe2 ].",
                        "VernacExtend",
                        "25981248bba4d843213e95c7e307c6135695057a"
                    ]
                },
                {
                    "command": [
                        "eapply le_lt_trans; [ idtac | apply cPairLt2 ].",
                        "VernacExtend",
                        "b3aa85d967c3629158b50c3cda1ad7596272868f"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfIMP1 in |- *.",
                        "VernacExtend",
                        "9e211d9a93d5fcf92c9116ed225fcc05fc33f3c5"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfIMP2 in |- *.",
                        "VernacExtend",
                        "1361bbd8ad719579122b16c5de608a39dbefba1f"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfCP in |- *.",
                        "VernacExtend",
                        "799d0befaa01a8f618c800fc2ba767228d597966"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfFA1 in |- *.",
                        "VernacExtend",
                        "061b7fea3c9480423a4e7847563359e1b9ab2050"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "rewrite codeSubFormulaCorrect.",
                        "VernacExtend",
                        "2942294961d93b57caac2eb594398e69db92c545"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "rewrite (wellFormedTermCorrect1 L codeF codeArityF codeArityFIsCorrect1).",
                        "VernacExtend",
                        "581807f07f14ef969d45f1ea03de4275a8aded46"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfFA2 in |- *.",
                        "VernacExtend",
                        "b2deab87271068f57bb61dcd1e9df76bcbbbefa3"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "rewrite codeFreeVarFormulaCorrect.",
                        "VernacExtend",
                        "163540a693c0f8ae9a21f61ca5d4354dddf570b8"
                    ]
                },
                {
                    "command": [
                        "rewrite codeInCorrect.",
                        "VernacExtend",
                        "dd48b7b346befe83481fe8e1e05cd1e924730a51"
                    ]
                },
                {
                    "command": [
                        "induction (In_dec eq_nat_dec v (freeVarFormula L A0)).",
                        "VernacExtend",
                        "1bf61855c49484c4f151e2906bf7e7b5b8ff4eb9"
                    ]
                },
                {
                    "command": [
                        "elim n.",
                        "VernacExtend",
                        "c68f766a88bb5402d72ee6adaca953661a5d18b2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfFA3 in |- *.",
                        "VernacExtend",
                        "a3384a6d8e38d95e1c7379c75d1184665cd9ef64"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "set (C := cPair 0 (cPair (codeTerm L codeF (fol.var L 0)) (codeTerm L codeF (fol.var L 0)))) in *.",
                        "VernacExtend",
                        "d100260ea1e955b722acc6cc00d91ed0da3c52ce"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "cut (cPairPi1 (cPairPi2 (cPair C (cPair 9 0))) = 9); [ intro H; rewrite H; clear H | idtac ].",
                        "VernacExtend",
                        "bdc60714079645b130ddde30712f2492a1b62cfb"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfEQ1 in |- *.",
                        "VernacExtend",
                        "178cc75d9ba430f8c70f713dca5d06129738fbd1"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections2 C (cPair 9 0)).",
                        "VernacExtend",
                        "e8ded0c204f8d74b1cf6f8c49cc4e029ab12abf7"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections1 C (cPair 9 0)).",
                        "VernacExtend",
                        "4c31c1b2cc4a6334296b6be0c2276da0d3a9e34f"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections2 9 0).",
                        "VernacExtend",
                        "495fa74b764ae6d3abd390a275b9175bfc57ccfb"
                    ]
                },
                {
                    "command": [
                        "unfold C in |- *.",
                        "VernacExtend",
                        "cb35f243768bdbad0fe05a3ae5cac30a865b5759"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "6483e653b28875693c3c92037ba92da24c711ae3"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections2 C (cPair 9 0)).",
                        "VernacExtend",
                        "e8ded0c204f8d74b1cf6f8c49cc4e029ab12abf7"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections1 9 0).",
                        "VernacExtend",
                        "5b9cc1da1edde13ce8a109d80a518df7bf8eecff"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "set (C := cPair 1 (cPair (cPair 0 (cPair (codeTerm L codeF (fol.var L 0)) (codeTerm L codeF (fol.var L 1)))) (cPair 0 (cPair (codeTerm L codeF (fol.var L 1)) (codeTerm L codeF (fol.var L 0)))))) in *.",
                        "VernacExtend",
                        "90e569e7060b5977869665d8b3319637ea0d5094"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "cut (cPairPi1 (cPairPi2 (cPair C (cPair 10 0))) = 10).",
                        "VernacExtend",
                        "74ab024f3a1d936a93d0af627b1491b8bea3bd03"
                    ]
                },
                {
                    "command": [
                        "generalize (cPairPi1 (cPairPi2 (cPair C (cPair 10 0)))).",
                        "VernacExtend",
                        "b0549e3de5891231b641bc1081e380815d1877f5"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfEQ2 in |- *.",
                        "VernacExtend",
                        "bcdf94971d4e033b1ca65e812d1250f6a73e9828"
                    ]
                },
                {
                    "command": [
                        "replace (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.equal L (fol.var L 1) (fol.var L 0)))) with C; [ idtac | reflexivity ].",
                        "VernacExtend",
                        "c91e5a3ce6ef9875c745c81435174196992b6ec5"
                    ]
                },
                {
                    "command": [
                        "generalize C; intros.",
                        "VernacExtend",
                        "fc16a19222e1448723ca8824b6d08e85c0b27aa4"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections2 C0 (cPair 10 0)).",
                        "VernacExtend",
                        "83b88431610cfa58108da55432bba35a662098e8"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections2 10 0).",
                        "VernacExtend",
                        "f79c11a15f73c297ce7e11060c27aaf2fd2cb363"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections1 C0 (cPair 10 0)).",
                        "VernacExtend",
                        "1035279a01ed4a0c384827ec3f363b8e450935f2"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "53174f94e0df20ef958a89885ff7427a6c519153"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections2 C (cPair 10 0)).",
                        "VernacExtend",
                        "35e75a74a81209462e35c160acfcb43be0623e95"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections1 10 0).",
                        "VernacExtend",
                        "fe55b0cff72f843c02e3a8d7015d51b36a7e6452"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "set (C := cPair 1 (cPair (cPair 0 (cPair (codeTerm L codeF (fol.var L 0)) (codeTerm L codeF (fol.var L 1)))) (cPair 1 (cPair (cPair 0 (cPair (codeTerm L codeF (fol.var L 1)) (codeTerm L codeF (fol.var L 2)))) (cPair 0 (cPair (codeTerm L codeF (fol.var L 0)) (codeTerm L codeF (fol.var L 2)))))))) in *.",
                        "VernacExtend",
                        "0bcf49df0a0ecfcb4738cff5a6299d30a92bfc1b"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "cut (cPairPi1 (cPairPi2 (cPair C (cPair 11 0))) = 11).",
                        "VernacExtend",
                        "c1ad2b4f9d91d0bb1077ee0d13c4d3878d0e4ca0"
                    ]
                },
                {
                    "command": [
                        "generalize (cPairPi1 (cPairPi2 (cPair C (cPair 11 0)))).",
                        "VernacExtend",
                        "cd8aa0d9e8e8448c952704412ebb2964fc957bdc"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfEQ3 in |- *.",
                        "VernacExtend",
                        "5b92a9c028a7a0dc790bb93010330866e4454caa"
                    ]
                },
                {
                    "command": [
                        "replace (codeFormula L codeF codeR (fol.impH L (fol.equal L (fol.var L 0) (fol.var L 1)) (fol.impH L (fol.equal L (fol.var L 1) (fol.var L 2)) (fol.equal L (fol.var L 0) (fol.var L 2))))) with C; [ idtac | reflexivity ].",
                        "VernacExtend",
                        "d1a78c3d7160d50c4daf7bca36cfc396d69c1135"
                    ]
                },
                {
                    "command": [
                        "generalize C; intros.",
                        "VernacExtend",
                        "fc16a19222e1448723ca8824b6d08e85c0b27aa4"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections2 C0 (cPair 11 0)).",
                        "VernacExtend",
                        "129d016dc85765ad3ec778172a16573e25882174"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections1 C0 (cPair 11 0)).",
                        "VernacExtend",
                        "3321a1ea85d9310b83e89a7daafaf93acf3a5b66"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections2 11 0).",
                        "VernacExtend",
                        "53cf02c914743ab8b508730519e4b397a0d85f86"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "53174f94e0df20ef958a89885ff7427a6c519153"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections2 C (cPair 11 0)).",
                        "VernacExtend",
                        "90e0629aefe1108ce77c38b412cedd362cdf47b4"
                    ]
                },
                {
                    "command": [
                        "rewrite (cPairProjections1 11 0).",
                        "VernacExtend",
                        "0f7ba73a9ea1f5a722009f470c870ca85abb6cba"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfEQ4 in |- *.",
                        "VernacExtend",
                        "652864d151913bb5f29d5ef850669fbef1f7cc75"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "rewrite codeArityRIsCorrect1.",
                        "VernacExtend",
                        "6da173dea381617cce613489b7df589af3b4106c"
                    ]
                },
                {
                    "command": [
                        "replace (codeAxmEqHelp (pred (S (arity L (inl (Functions L) R)))) (codeIff (cPair (S (S (S (S (codeR R))))) (codeNVars1 (pred (S (arity L (inl (Functions L) R)))))) (cPair (S (S (S (S (codeR R))))) (codeNVars2 (pred (S (arity L (inl (Functions L) R)))))))) with (codeFormula L codeF codeR (AxmEq4 L R)).",
                        "VernacExtend",
                        "3aa1449fdb914995eddca997dce1194fac7f8d48"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "53174f94e0df20ef958a89885ff7427a6c519153"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold AxmEq4 in |- *.",
                        "VernacExtend",
                        "44e9ba0324ffc11cc8d1454bd91ebcf7e0f9ee51"
                    ]
                },
                {
                    "command": [
                        "clear A.",
                        "VernacExtend",
                        "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "induction (codeNVarsCorrect (arity L (inl (Functions L) R))).",
                        "VernacExtend",
                        "67512770b57593ae43a96186a7b87d6cc3d22d9c"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "clear H H0.",
                        "VernacExtend",
                        "a743351ff441835fe992d483bf3a5b58c3fccd77"
                    ]
                },
                {
                    "command": [
                        "induction (nVars L (arity L (inl (Functions L) R))).",
                        "VernacExtend",
                        "96180f71b5ef66961b8a75151e0cca137a56d3cc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (codeIff (cPair (S (S (S (S (codeR R))))) (codeTerms L codeF (arity L (inl (Functions L) R)) a)) (cPair (S (S (S (S (codeR R))))) (codeTerms L codeF (arity L (inl (Functions L) R)) b))) with (codeFormula L codeF codeR (iffH L (fol.atomic L R a) (fol.atomic L R b))).",
                        "VernacExtend",
                        "54090068fb05038d280ddca41eee20cc46263610"
                    ]
                },
                {
                    "command": [
                        "generalize (arity L (inl (Functions L) R)).",
                        "VernacExtend",
                        "7c42af5ff6c2cfa0a4a1661050a8bd8b89c81d43"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecn.",
                        "VernacExtend",
                        "9f2f9eb25208250dc135a15348250f012f2be502"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- codeIffCorrect.",
                        "VernacExtend",
                        "449a58f30a385bca04ecd9fe58ea16eb5a94a75f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold checkPrfEQ5 in |- *.",
                        "VernacExtend",
                        "7bd6b34ffd4637c0de2ab12288d9f039fd39ea9a"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "rewrite codeArityFIsCorrect1.",
                        "VernacExtend",
                        "2e9851d53f2b7325903df1c7b78179a866aa3d93"
                    ]
                },
                {
                    "command": [
                        "replace (codeAxmEqHelp (pred (S (arity L (inr (Relations L) f)))) (cPair 0 (cPair (cPair (S (codeF f)) (codeNVars1 (pred (S (arity L (inr (Relations L) f)))))) (cPair (S (codeF f)) (codeNVars2 (pred (S (arity L (inr (Relations L) f))))))))) with (codeFormula L codeF codeR (AxmEq5 L f)).",
                        "VernacExtend",
                        "f45285b3f4a06f86da0df0c9ade0ec67782f245d"
                    ]
                },
                {
                    "command": [
                        "unfold charFunction in |- *.",
                        "VernacExtend",
                        "3fa9f8d5b51a5f7383040f3784de7e25ce796e3e"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- beq_nat_refl.",
                        "VernacExtend",
                        "53174f94e0df20ef958a89885ff7427a6c519153"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold AxmEq5 in |- *.",
                        "VernacExtend",
                        "d3fab2e6c8c2978249a69425e337d98d868d7e83"
                    ]
                },
                {
                    "command": [
                        "clear A.",
                        "VernacExtend",
                        "fbdd99430851a30d90ba7f1a3c1ae4e2cfda06b5"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "induction (codeNVarsCorrect (arity L (inr (Relations L) f))).",
                        "VernacExtend",
                        "5c5b4c535538d5f7dbf022fcd8d6d573cbcbdda3"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "clear H H0.",
                        "VernacExtend",
                        "a743351ff441835fe992d483bf3a5b58c3fccd77"
                    ]
                },
                {
                    "command": [
                        "induction (nVars L (arity L (inr (Relations L) f))).",
                        "VernacExtend",
                        "03c142b39df6d413ec04711d0b5fa7d851875d71"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (cPair 0 (cPair (cPair (S (codeF f)) (codeTerms L codeF (arity L (inr (Relations L) f)) a)) (cPair (S (codeF f)) (codeTerms L codeF (arity L (inr (Relations L) f)) b)))) with (codeFormula L codeF codeR (fol.equal L (fol.apply L f a) (fol.apply L f b))).",
                        "VernacExtend",
                        "a0bee7c7b5c5433446eb45fee4d6600dc6a9c505"
                    ]
                },
                {
                    "command": [
                        "generalize (arity L (inr (Relations L) f)).",
                        "VernacExtend",
                        "04693de6612937e2347fd7390d2a9b7c2594930a"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecn.",
                        "VernacExtend",
                        "9f2f9eb25208250dc135a15348250f012f2be502"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}