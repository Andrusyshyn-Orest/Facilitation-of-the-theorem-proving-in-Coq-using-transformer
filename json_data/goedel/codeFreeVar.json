{
    "filename": "codeFreeVar.v",
    "coq_project": "goedel",
    "vernac_cmds": [
        [
            "Require Import primRec.",
            "VernacRequire",
            "75a83dde535ddae28126e82cc7ff15f05b8e505b"
        ],
        [
            "Require Import cPair.",
            "VernacRequire",
            "245e4bc1e0b715e3965e2d304aa9ad9f5eb93662"
        ],
        [
            "Require Import Coq.Lists.List.",
            "VernacRequire",
            "3f8620a911f16f9e8918ea7512dbb594c917da38"
        ],
        [
            "Require Import ListExt.",
            "VernacRequire",
            "8c4c029b2c43ab5886e4af5e6402bea050085fed"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Export codeList.",
            "VernacRequire",
            "2fbc43823e34b3031e7ecc5962031d2574efae52"
        ],
        [
            "Require Import folProp.",
            "VernacRequire",
            "9a8c9e707f6075129a70023b069f5369c9a9b295"
        ],
        [
            "Require Import code.",
            "VernacRequire",
            "2d8bc6295195cee8bb6ef6c570d4e03c177e5352"
        ],
        [
            "Section Code_Free_Vars.",
            "VernacBeginSection",
            "7f677ffb5261f7ce2fad3dabeb0704de0f3d5f1a"
        ],
        [
            "Variable L : Language.",
            "VernacAssumption",
            "96b36a9b874de21fe37f18071cb929f4dd758042"
        ],
        [
            "Variable codeF : Functions L -> nat.",
            "VernacAssumption",
            "e65cb5fe4d2652e9939910dda9b921e5afc07e18"
        ],
        [
            "Variable codeR : Relations L -> nat.",
            "VernacAssumption",
            "7d46e7172e4f8afe9c452578494a18d04f3dd4f3"
        ],
        [
            "Let Formula := Formula L.",
            "VernacDefinition",
            "3d32ab58ebf838c2a87fdc2e6124bfb77b6c785b"
        ],
        [
            "Let Formulas := Formulas L.",
            "VernacDefinition",
            "3e58c6132e0d63871e6929fdf8514df1ca805073"
        ],
        [
            "Let System := System L.",
            "VernacDefinition",
            "cca6eba541a212b17367017275b463c5608aa66d"
        ],
        [
            "Let Term := Term L.",
            "VernacDefinition",
            "38e1762c57b9701000a89090666997db5d597a34"
        ],
        [
            "Let Terms := Terms L.",
            "VernacDefinition",
            "ac274971655c7d87e7a366522fa4f11f94117e84"
        ],
        [
            "Let var := var L.",
            "VernacDefinition",
            "387b134d06ce79979638575c6631443c7143b913"
        ],
        [
            "Let apply := apply L.",
            "VernacDefinition",
            "171f7b3946ad56564d4a09c4656739ed07770a44"
        ],
        [
            "Let equal := equal L.",
            "VernacDefinition",
            "a97cb35845ad0374b8596fd6d66f5c04065714a3"
        ],
        [
            "Let atomic := atomic L.",
            "VernacDefinition",
            "7638f14f126e2c8e95075078253a597eea7fd9ac"
        ],
        [
            "Let impH := impH L.",
            "VernacDefinition",
            "b3d855010528c91b0d1d6c2d64740a3e6e7417a6"
        ],
        [
            "Let notH := notH L.",
            "VernacDefinition",
            "096b324518e16c165cd803fe11de91b995393f24"
        ],
        [
            "Let forallH := forallH L.",
            "VernacDefinition",
            "eaf4bad969f5571f26e0bbda77b3d70e626f3102"
        ],
        [
            "Let orH := orH L.",
            "VernacDefinition",
            "0ac8832e88ec1801dd7f8e764071579c4014e425"
        ],
        [
            "Let andH := andH L.",
            "VernacDefinition",
            "4daa82892653c0883a5d6ebec876be8ae9f5ec12"
        ],
        [
            "Let existH := existH L.",
            "VernacDefinition",
            "0ba7f517f2c1b7f1a555803e43ae56c5f61ebcae"
        ],
        [
            "Let iffH := iffH L.",
            "VernacDefinition",
            "c97762ff458ff51e91985121c0ae88a85a82e865"
        ],
        [
            "Let ifThenElseH := ifThenElseH L.",
            "VernacDefinition",
            "34c02609686a38b645af860458ab18a92957ea25"
        ],
        [
            "Definition codeFreeVarTermTerms : nat -> nat := evalStrongRec 0 (fun t recs : nat => cPair (switchPR (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) (S (cPair (cPairPi2 t) 0))) (switchPR t (codeApp (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))) 0)).",
            "VernacDefinition",
            "62e54f18d287c40d0dbd660ebbf15cb1602ae204"
        ],
        [
            "Definition codeFreeVarTerm (t : nat) : nat := cPairPi1 (codeFreeVarTermTerms t).",
            "VernacDefinition",
            "3774513256a417fa4bf5c6743e2e872cc9d21573"
        ],
        [
            "Definition codeFreeVarTerms (t : nat) : nat := cPairPi2 (codeFreeVarTermTerms t).",
            "VernacDefinition",
            "ae777ab06985910d8169dad71774e831ea376ac4"
        ],
        [
            "Lemma codeFreeVarTermCorrect : forall t : Term, codeFreeVarTerm (codeTerm L codeF t) = codeList (freeVarTerm L t).",
            "VernacStartTheoremProof",
            "e56701344cda8fcfd1f8afd3df5794e0fa6f0ac6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim t using Term_Terms_ind with (P0 := fun (n : nat) (ts : fol.Terms L n) => codeFreeVarTerms (codeTerms L codeF n ts) = codeList (freeVarTerms L n ts)); intros.",
            "VernacExtend",
            "43382c0c327873a41e91ee378b666a2ed388d15c"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold codeTerm in |- *.",
            "VernacExtend",
            "e7ce9af3a746913a0ec916c493740f219decb444"
        ],
        [
            "unfold codeFreeVarTerm in |- *.",
            "VernacExtend",
            "ca8be59e7423452507c81920af0712386c4f4acb"
        ],
        [
            "unfold codeFreeVarTermTerms in |- *.",
            "VernacExtend",
            "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold freeVarTerm in |- *.",
            "VernacExtend",
            "9b2658fd9dd67504b9da6550231f431d9a5043e5"
        ],
        [
            "fold (freeVarTerms L (arity L (inr (Relations L) f)) t0) in |- *.",
            "VernacExtend",
            "f711387ff0b365530faee950e752dbed992ba83a"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "unfold codeTerm in |- *.",
            "VernacExtend",
            "e7ce9af3a746913a0ec916c493740f219decb444"
        ],
        [
            "fold (codeTerms L codeF (arity L (inr (Relations L) f)) t0) in |- *.",
            "VernacExtend",
            "35bfc7a3abb4934bcb68411988e361231a88a9f8"
        ],
        [
            "generalize (codeTerms L codeF (arity L (inr (Relations L) f)) t0).",
            "VernacExtend",
            "a10c2750e67b722f31e6aca58b2bd92a2738d3f6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeFreeVarTerm in |- *.",
            "VernacExtend",
            "ca8be59e7423452507c81920af0712386c4f4acb"
        ],
        [
            "unfold codeFreeVarTermTerms in |- *.",
            "VernacExtend",
            "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
        ],
        [
            "set (g := fun t1 recs : nat => cPair (switchPR (cPairPi1 t1) (cPairPi2 (codeNth (t1 - S (cPairPi2 t1)) recs)) (S (cPair (cPairPi2 t1) 0))) (switchPR t1 (codeApp (cPairPi1 (codeNth (t1 - S (cPairPi1 (pred t1))) recs)) (cPairPi2 (codeNth (t1 - S (cPairPi2 (pred t1))) recs))) 0)) in *.",
            "VernacExtend",
            "40cd159fc30a1b1d5c485b3bb071454c29e34504"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "rewrite (evalStrongRecHelp1 g (cPair (S (codeF f)) n) n).",
            "VernacExtend",
            "e179b6215079757a63a92e9283fd644efdff1808"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "unfold codeFreeVarTerms in |- *.",
            "VernacExtend",
            "285dc28e7b720922daa7a79d7bc7b70a7a2be715"
        ],
        [
            "unfold codeFreeVarTermTerms in |- *.",
            "VernacExtend",
            "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
        ],
        [
            "fold g in |- *.",
            "VernacExtend",
            "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold codeTerms in |- *.",
            "VernacExtend",
            "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
        ],
        [
            "unfold codeFreeVarTerms in |- *.",
            "VernacExtend",
            "285dc28e7b720922daa7a79d7bc7b70a7a2be715"
        ],
        [
            "unfold codeFreeVarTermTerms in |- *.",
            "VernacExtend",
            "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold freeVarTerms in |- *.",
            "VernacExtend",
            "8c502f1a4c0f7a93638e7808b7a031296e3ffbd7"
        ],
        [
            "fold (freeVarTerm L t0) in |- *.",
            "VernacExtend",
            "a8a27871e3b902d94e711aa8df2afaef97633515"
        ],
        [
            "fold (freeVarTerms L n t1) in |- *.",
            "VernacExtend",
            "17508cb6dfdc9503163fa6cd13496719787a52a9"
        ],
        [
            "rewrite <- codeAppCorrect.",
            "VernacExtend",
            "1ae995e2faf253d9513acf8078ffaee8665e7f42"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "clear H H0.",
            "VernacExtend",
            "a743351ff441835fe992d483bf3a5b58c3fccd77"
        ],
        [
            "unfold codeTerms in |- *.",
            "VernacExtend",
            "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
        ],
        [
            "fold (codeTerm L codeF t0) in |- *.",
            "VernacExtend",
            "2c5867b09de0d934adf0cbae6f96535a574511c3"
        ],
        [
            "fold (codeTerms L codeF n t1) in |- *.",
            "VernacExtend",
            "80de9b41abe86e8a6ea6f8f897a8248c5d477507"
        ],
        [
            "generalize (codeTerm L codeF t0) (codeTerms L codeF n t1).",
            "VernacExtend",
            "cb2536daee453f107c4f3a1fbc3f2692d3497572"
        ],
        [
            "clear t0 t1.",
            "VernacExtend",
            "ac1d4af3c1014db47d11daadb7529e20e7617beb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeFreeVarTerms at 1 in |- *.",
            "VernacExtend",
            "4c815e1beb99dd21ba525eec5b75d24845076983"
        ],
        [
            "unfold codeFreeVarTermTerms in |- *.",
            "VernacExtend",
            "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "set (g := fun t0 recs : nat => cPair (switchPR (cPairPi1 t0) (cPairPi2 (codeNth (t0 - S (cPairPi2 t0)) recs)) (S (cPair (cPairPi2 t0) 0))) (switchPR t0 (codeApp (cPairPi1 (codeNth (t0 - S (cPairPi1 (pred t0))) recs)) (cPairPi2 (codeNth (t0 - S (cPairPi2 (pred t0))) recs))) 0)) in *.",
            "VernacExtend",
            "6c3356998c9418f8a1882d42a8340ff91e5f158e"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "rewrite (evalStrongRecHelp1 g (S (cPair n0 n1)) (cPairPi1 (pred (S (cPair n0 n1))))) .",
            "VernacExtend",
            "5fe13027c054676c93a78c125b16d4a7d61aeb70"
        ],
        [
            "rewrite (evalStrongRecHelp1 g (S (cPair n0 n1)) (cPairPi2 (pred (S (cPair n0 n1))))) .",
            "VernacExtend",
            "07408a597f95653b9a01a9d041dda28123daf09b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeFreeVarTermsCorrect : forall (n : nat) (ts : Terms n), codeFreeVarTerms (codeTerms L codeF n ts) = codeList (freeVarTerms L n ts).",
            "VernacStartTheoremProof",
            "034287a485aec99c88ffe26230bea708d5b8491e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction ts as [| n t ts Hrects].",
            "VernacExtend",
            "4a72ca30982cf76b6ad63620c27c0db203f25a01"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold codeTerms in |- *.",
            "VernacExtend",
            "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
        ],
        [
            "unfold codeFreeVarTerms in |- *.",
            "VernacExtend",
            "285dc28e7b720922daa7a79d7bc7b70a7a2be715"
        ],
        [
            "unfold codeFreeVarTermTerms in |- *.",
            "VernacExtend",
            "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold freeVarTerms in |- *.",
            "VernacExtend",
            "8c502f1a4c0f7a93638e7808b7a031296e3ffbd7"
        ],
        [
            "fold (freeVarTerm L t) in |- *.",
            "VernacExtend",
            "25de0f41b21c12aa79ec4951f1214456e69c04ee"
        ],
        [
            "fold (freeVarTerms L n ts) in |- *.",
            "VernacExtend",
            "4485807e495aa0fec8a2a8c670a097164bd3f0f2"
        ],
        [
            "rewrite <- codeAppCorrect.",
            "VernacExtend",
            "1ae995e2faf253d9513acf8078ffaee8665e7f42"
        ],
        [
            "rewrite <- Hrects.",
            "VernacExtend",
            "48886e32242bc9c4c3c27d5b6de856a5ece8a1b2"
        ],
        [
            "rewrite <- codeFreeVarTermCorrect.",
            "VernacExtend",
            "413b0c06aee3100303d602db2ddcbc05df693346"
        ],
        [
            "clear Hrects.",
            "VernacExtend",
            "bfbcd4aff7e1dbab64158074f4734b1b02ee67d9"
        ],
        [
            "unfold codeTerms in |- *.",
            "VernacExtend",
            "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
        ],
        [
            "fold (codeTerm L codeF t) in |- *.",
            "VernacExtend",
            "a1d64d923b8429c756c00d77d1d47934c11c52b9"
        ],
        [
            "fold (codeTerms L codeF n ts) in |- *.",
            "VernacExtend",
            "cf363af623b8e03afbd6155fe3b2f7fac9819131"
        ],
        [
            "generalize (codeTerm L codeF t) (codeTerms L codeF n ts).",
            "VernacExtend",
            "9db89fdb4bfe6ab0b892473035454b148f9d024f"
        ],
        [
            "clear t ts.",
            "VernacExtend",
            "b7b53d4183781fde5db5c9280619c3d2a0d9c1f4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeFreeVarTerms at 1 in |- *.",
            "VernacExtend",
            "4c815e1beb99dd21ba525eec5b75d24845076983"
        ],
        [
            "unfold codeFreeVarTermTerms in |- *.",
            "VernacExtend",
            "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "set (g := fun t0 recs : nat => cPair (switchPR (cPairPi1 t0) (cPairPi2 (codeNth (t0 - S (cPairPi2 t0)) recs)) (S (cPair (cPairPi2 t0) 0))) (switchPR t0 (codeApp (cPairPi1 (codeNth (t0 - S (cPairPi1 (pred t0))) recs)) (cPairPi2 (codeNth (t0 - S (cPairPi2 (pred t0))) recs))) 0)) in *.",
            "VernacExtend",
            "6c3356998c9418f8a1882d42a8340ff91e5f158e"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "rewrite (evalStrongRecHelp1 g (S (cPair n0 n1)) (cPairPi1 (pred (S (cPair n0 n1))))) .",
            "VernacExtend",
            "5fe13027c054676c93a78c125b16d4a7d61aeb70"
        ],
        [
            "rewrite (evalStrongRecHelp1 g (S (cPair n0 n1)) (cPairPi2 (pred (S (cPair n0 n1))))) .",
            "VernacExtend",
            "07408a597f95653b9a01a9d041dda28123daf09b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections2.",
            "VernacExtend",
            "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeFreeVarTermTermsIsPR : isPR 1 codeFreeVarTermTerms.",
            "VernacStartTheoremProof",
            "544fefa09da03d162747c1dad6d2d07371d1c952"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeFreeVarTermTerms in |- *.",
            "VernacExtend",
            "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => switchPR (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) (S (cPair (cPairPi2 t) 0))) (g := fun t recs : nat => switchPR t (codeApp (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))) 0).",
            "VernacExtend",
            "80ee6280bbd91736513f74e1de2634647c1e3d0b"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun t recs : nat => cPairPi1 t) (f2 := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) (f3 := fun t recs : nat => S (cPair (cPairPi2 t) 0)).",
            "VernacExtend",
            "5fe55923cceaead8fdd6faa377f47b8c05a2e3ee"
        ],
        [
            "apply filter10IsPR.",
            "VernacExtend",
            "a511891d7a43751c68939783b674e14f242f8594"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 t)) recs).",
            "VernacExtend",
            "d614a65ac413ecc35815e5fc3c5414c484bffa05"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 t)) (g := fun t recs : nat => recs).",
            "VernacExtend",
            "9eadffc2b52fca69266f1655ef040654847ca2ed"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 t)).",
            "VernacExtend",
            "c982afba640099fcfebdc10cbe162871f7b6724d"
        ],
        [
            "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 t)).",
            "VernacExtend",
            "57b9f62eba3bb3f0734a7f303b0e9575a4633d04"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => S (cPair (cPairPi2 t) 0)).",
            "VernacExtend",
            "dade5c78e7cebe0de5e33e3c3d8bdee07b969d3a"
        ],
        [
            "apply compose1_1IsPR with (f := fun t : nat => cPair (cPairPi2 t) 0).",
            "VernacExtend",
            "2752f0f39ae5b1bc3e4000e368f6de28f3abfd55"
        ],
        [
            "apply compose1_2IsPR with (f := cPairPi2) (f' := fun _ : nat => 0).",
            "VernacExtend",
            "82e0f53b1a8d9d6c483e6bb2d3dff3bd0eb79281"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun t recs : nat => t) (f2 := fun t recs : nat => codeApp (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))) (f3 := fun t recs : nat => 0).",
            "VernacExtend",
            "fcc95f2153c847bc65c0f6e95c7572917b5aeb2a"
        ],
        [
            "apply pi1_2IsPR.",
            "VernacExtend",
            "de83e3a673d46ec194b97a67a98b94cf405137bf"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)).",
            "VernacExtend",
            "f1971737ccff06d4a4f9987d7058a10fcab655ee"
        ],
        [
            "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi1 (pred t))) recs).",
            "VernacExtend",
            "31ba85eb98d67b3ce4cc8d0bf59cc1e23549ab11"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi1 (pred t))) (g := fun t recs : nat => recs).",
            "VernacExtend",
            "a94fc8df4ba3a80f7649053c5fc78b91f5016dec"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi1 (pred t))).",
            "VernacExtend",
            "12ff2e5e475f7d08cb53b6496dc024bfc2270092"
        ],
        [
            "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi1 (pred t))).",
            "VernacExtend",
            "a15b11f1d26c349a5c34395d162c9070ec98db7f"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun t : nat => cPairPi1 (pred t)).",
            "VernacExtend",
            "77ea5fe9a3ba393be8cbb69691c385780e90e6a0"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 (pred t))) recs).",
            "VernacExtend",
            "f81e5492c00a44c6832854ae2a92de0b477ad453"
        ],
        [
            "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 (pred t))) (g := fun t recs : nat => recs).",
            "VernacExtend",
            "a3ca4a0445d9f1fce0efc2c54e2293d65613dc2b"
        ],
        [
            "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 (pred t))).",
            "VernacExtend",
            "93e57755221ff92e574ff83c95be23dc61c2066a"
        ],
        [
            "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 (pred t))).",
            "VernacExtend",
            "a10f4b250b35d7c96f4a7ecc6bc2428d9e9d4594"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun t : nat => cPairPi2 (pred t)).",
            "VernacExtend",
            "679bbf589e33855726e50e51ab8f9c5f4b86aa78"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply codeAppIsPR.",
            "VernacExtend",
            "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
        ],
        [
            "exists (composeFunc 2 0 (PRnil _) zeroFunc).",
            "VernacExtend",
            "6d1f0f8ee83bc990d5d6792d2988e872621e2024"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply cPairIsPR.",
            "VernacExtend",
            "f8a5b87c0a2d77125868da28d8368de40c2103e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeFreeVarTermIsPR : isPR 1 codeFreeVarTerm.",
            "VernacStartTheoremProof",
            "6268355120332e3c6a21a01829e283e3e16e299d"
        ],
        [
            "unfold codeFreeVarTerm in |- *.",
            "VernacExtend",
            "ca8be59e7423452507c81920af0712386c4f4acb"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply codeFreeVarTermTermsIsPR.",
            "VernacExtend",
            "cacfb33c8d5b319c1f481018964f7c8c7448fb6c"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeFreeVarTermsIsPR : isPR 1 codeFreeVarTerms.",
            "VernacStartTheoremProof",
            "6913934059121938d3970f84a29033f49bc752fc"
        ],
        [
            "unfold codeFreeVarTerms in |- *.",
            "VernacExtend",
            "285dc28e7b720922daa7a79d7bc7b70a7a2be715"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply codeFreeVarTermTermsIsPR.",
            "VernacExtend",
            "cacfb33c8d5b319c1f481018964f7c8c7448fb6c"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeFreeVarFormula : nat -> nat := evalStrongRec 0 (fun f recs : nat => switchPR (cPairPi1 f) (switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (codeFreeVarTerms (cPairPi2 f)) (codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (codeNth (f - S (cPairPi2 f)) recs)) (codeApp (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (codeApp (codeFreeVarTerm (cPairPi1 (cPairPi2 f))) (codeFreeVarTerm (cPairPi2 (cPairPi2 f))))).",
            "VernacDefinition",
            "d6fd49c9d3eb843d71dcffea6543a106e68ad392"
        ],
        [
            "Lemma codeFreeVarFormulaCorrect : forall f : Formula, codeFreeVarFormula (codeFormula L codeF codeR f) = codeList (freeVarFormula L f).",
            "VernacStartTheoremProof",
            "62e2fb0046c417f68e70ddcf37bc57b99f050602"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "set (g := fun f recs : nat => switchPR (cPairPi1 f) (switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (codeFreeVarTerms (cPairPi2 f)) (codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (codeNth (f - S (cPairPi2 f)) recs)) (codeApp (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (codeApp (codeFreeVarTerm (cPairPi1 (cPairPi2 f))) (codeFreeVarTerm (cPairPi2 (cPairPi2 f))))) in *.",
            "VernacExtend",
            "e3f7d9a274d5eb36f2e33bf13934665f4ef57593"
        ],
        [
            "induction f as [t t0| r t| f1 Hrecf1 f0 Hrecf0| f Hrecf| n f Hrecf].",
            "VernacExtend",
            "226ec1284c23286e580ea5e04e2dff8e6fe7a632"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- codeAppCorrect.",
            "VernacExtend",
            "1ae995e2faf253d9513acf8078ffaee8665e7f42"
        ],
        [
            "repeat rewrite <- codeFreeVarTermCorrect.",
            "VernacExtend",
            "109af82242c3353e4ae95e16c368d4f0f9ae80a9"
        ],
        [
            "generalize (codeTerm L codeF t) (codeTerm L codeF t0).",
            "VernacExtend",
            "aa6af556df75b775e8c57c2dee33b60ffe7d258f"
        ],
        [
            "clear t t0.",
            "VernacExtend",
            "3298dcb8ce69121a745332dbeaa136df1439ee67"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeFreeVarFormula in |- *.",
            "VernacExtend",
            "95529c2d8f192fad7b2da12e9876258fe02d09b8"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- codeFreeVarTermsCorrect.",
            "VernacExtend",
            "be917abbc93d7bddbebb00622a9e835f7e127c31"
        ],
        [
            "generalize (codeTerms L codeF (arity L (inl (Functions L) r)) t).",
            "VernacExtend",
            "3ef073306f88bf5c3dc6334b70865fd3c0db5221"
        ],
        [
            "clear t.",
            "VernacExtend",
            "e3a5df4b3da0228c75fd9cefa03c878ee29feeb2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeFreeVarFormula in |- *.",
            "VernacExtend",
            "95529c2d8f192fad7b2da12e9876258fe02d09b8"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalStrongRecHelp in |- *.",
            "VernacExtend",
            "5b0f3071c6ffa54c20053804eb3ee6e205169d9c"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "unfold evalPrimRecFunc in |- *.",
            "VernacExtend",
            "56e2cff78f0db8531fd981ce2ab984310a57ad1d"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- codeAppCorrect.",
            "VernacExtend",
            "1ae995e2faf253d9513acf8078ffaee8665e7f42"
        ],
        [
            "rewrite <- Hrecf1.",
            "VernacExtend",
            "4aefd857946cc1a5045068dd4d7b7360467538e1"
        ],
        [
            "rewrite <- Hrecf0.",
            "VernacExtend",
            "8593988b260401f03b4a4de34eb35a681c874452"
        ],
        [
            "clear Hrecf0 Hrecf1.",
            "VernacExtend",
            "a654c8c4be1c8401f575e9f83feaf0c100e7051e"
        ],
        [
            "unfold codeFreeVarFormula in |- *.",
            "VernacExtend",
            "95529c2d8f192fad7b2da12e9876258fe02d09b8"
        ],
        [
            "fold g in |- *.",
            "VernacExtend",
            "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "rewrite (evalStrongRecHelp1 g (cPair 1 (cPair (codeFormula L codeF codeR f1) (codeFormula L codeF codeR f0))) (codeFormula L codeF codeR f1)).",
            "VernacExtend",
            "3cbc926724232ea7c91ccc09bae4bdc9e5fbe29d"
        ],
        [
            "rewrite (evalStrongRecHelp1 g (cPair 1 (cPair (codeFormula L codeF codeR f1) (codeFormula L codeF codeR f0))) (codeFormula L codeF codeR f0)).",
            "VernacExtend",
            "eee2f5377e0073fefb83fde2bc5f3f56c4261096"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply lt_le_trans.",
            "VernacExtend",
            "042d590b5417a6b6962f8a6c75b0734ff7de748e"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "apply cPairLe3.",
            "VernacExtend",
            "637d2bda9396a0f0e28157e1a4a409cfcdba918f"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "eapply lt_le_trans.",
            "VernacExtend",
            "042d590b5417a6b6962f8a6c75b0734ff7de748e"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "apply cPairLe3.",
            "VernacExtend",
            "637d2bda9396a0f0e28157e1a4a409cfcdba918f"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "apply cPairLe1.",
            "VernacExtend",
            "273d467bdcab30f1cf5e460652e5c74f67b1471b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- Hrecf.",
            "VernacExtend",
            "7e3d2373c8575c64beffd22d595eba667869f7e0"
        ],
        [
            "clear Hrecf.",
            "VernacExtend",
            "b583bb3d94583af810340d903ce4a8d1a59a5bc9"
        ],
        [
            "generalize (codeFormula L codeF codeR f).",
            "VernacExtend",
            "9535b1b99c90a7852d123fc1d3da10d85e7177fd"
        ],
        [
            "clear f.",
            "VernacExtend",
            "b84e9d55a497fb1207b6551a50098d584ea8ce6c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeFreeVarFormula at 1 in |- *.",
            "VernacExtend",
            "7a80f30ce4aa07b46454bc67d634354a9f60c2c3"
        ],
        [
            "fold g in |- *.",
            "VernacExtend",
            "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalList in |- *.",
            "VernacExtend",
            "9e114072a6c3cda0c8e35f9bb831c36bb04e2baf"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "rewrite (evalStrongRecHelp1 g (cPair 2 n) n).",
            "VernacExtend",
            "78b6cb895d4163c5b04033c1566060760b5d6dc3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- codeListRemoveCorrect.",
            "VernacExtend",
            "64a7a684687a84e9d3514ee6cd264ba7ca63f89b"
        ],
        [
            "rewrite <- Hrecf.",
            "VernacExtend",
            "7e3d2373c8575c64beffd22d595eba667869f7e0"
        ],
        [
            "generalize (codeFormula L codeF codeR f).",
            "VernacExtend",
            "9535b1b99c90a7852d123fc1d3da10d85e7177fd"
        ],
        [
            "clear Hrecf f.",
            "VernacExtend",
            "a1cebc2768c4f02f1466c388cf73b8943dfed73f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeFreeVarFormula at 1 in |- *.",
            "VernacExtend",
            "7a80f30ce4aa07b46454bc67d634354a9f60c2c3"
        ],
        [
            "fold g in |- *.",
            "VernacExtend",
            "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
        ],
        [
            "unfold evalStrongRec in |- *.",
            "VernacExtend",
            "4cf49f2247395396309d3b668fa7008ed75287b9"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold evalOneParamList in |- *.",
            "VernacExtend",
            "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
        ],
        [
            "unfold evalList in |- *.",
            "VernacExtend",
            "9e114072a6c3cda0c8e35f9bb831c36bb04e2baf"
        ],
        [
            "rewrite computeEvalStrongRecHelp.",
            "VernacExtend",
            "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
        ],
        [
            "unfold evalComposeFunc in |- *.",
            "VernacExtend",
            "39ada200228fdc8c2cef55ef1448531290850600"
        ],
        [
            "unfold compose2 in |- *.",
            "VernacExtend",
            "761ead24699f05895393de12eaa0744422d777d7"
        ],
        [
            "unfold evalList in |- *.",
            "VernacExtend",
            "9e114072a6c3cda0c8e35f9bb831c36bb04e2baf"
        ],
        [
            "unfold pred in |- *.",
            "VernacExtend",
            "6e45067cb52c62b8c79e0cd80f271215f39c71fa"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "unfold g at 1 in |- *.",
            "VernacExtend",
            "e37b385734119cd559605192bae01db86557d77a"
        ],
        [
            "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
            "VernacExtend",
            "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
        ],
        [
            "rewrite (evalStrongRecHelp1 g (cPair 3 (cPair n n0)) n0).",
            "VernacExtend",
            "26fc2d00fe9a8ff5a8eb229f9614110f2d4c5d17"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "eapply lt_le_trans.",
            "VernacExtend",
            "042d590b5417a6b6962f8a6c75b0734ff7de748e"
        ],
        [
            "apply cPairLt2.",
            "VernacExtend",
            "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
        ],
        [
            "apply cPairLe3.",
            "VernacExtend",
            "637d2bda9396a0f0e28157e1a4a409cfcdba918f"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "apply cPairLe2.",
            "VernacExtend",
            "318e030685487083b7f09f04b3c45f941127c60e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeFreeVarFormulaIsPR : isPR 1 codeFreeVarFormula.",
            "VernacStartTheoremProof",
            "7e7f268d7313826422a16e14e8f9c53aacb8991e"
        ],
        [
            "unfold codeFreeVarFormula in |- *.",
            "VernacExtend",
            "95529c2d8f192fad7b2da12e9876258fe02d09b8"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "assert (isPR 1 (fun x : nat => pred (cPairPi1 x))).",
            "VernacExtend",
            "82932b81b96113f495fc3f164efa721e625ca619"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "assert (isPR 1 (fun x : nat => pred (pred (cPairPi1 x)))).",
            "VernacExtend",
            "7b54d9016f4b9246e04e1fe4ca474008c8aaba4e"
        ],
        [
            "apply compose1_1IsPR with (f := fun x : nat => pred (cPairPi1 x)).",
            "VernacExtend",
            "92796491cfb6c5dddee956e92f3ef14a95af4db5"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "assert (isPR 1 (fun x : nat => pred (pred (pred (cPairPi1 x))))).",
            "VernacExtend",
            "081fe9bba1629edb9fd4919e5c0a701cceac6297"
        ],
        [
            "apply compose1_1IsPR with (f := fun x : nat => pred (pred (cPairPi1 x))).",
            "VernacExtend",
            "17809ce47556eb354bf0ae2578942c2bb1df55de"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun f recs : nat => cPairPi1 f) (f2 := fun f recs : nat => switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (codeFreeVarTerms (cPairPi2 f)) (codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (codeNth (f - S (cPairPi2 f)) recs)) (codeApp (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (f3 := fun f recs : nat => codeApp (codeFreeVarTerm (cPairPi1 (cPairPi2 f))) (codeFreeVarTerm (cPairPi2 (cPairPi2 f)))).",
            "VernacExtend",
            "2d6e493b55df873e0d2ec637d10a3528d2b9e68d"
        ],
        [
            "apply filter10IsPR.",
            "VernacExtend",
            "a511891d7a43751c68939783b674e14f242f8594"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (cPairPi1 f)) (f2 := fun f recs : nat => switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (codeFreeVarTerms (cPairPi2 f)) (codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (codeNth (f - S (cPairPi2 f)) recs)) (f3 := fun f recs : nat => codeApp (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)).",
            "VernacExtend",
            "e02f0fdd06ebb64a208ebb9b06c8af9e6806d6bb"
        ],
        [
            "apply filter10IsPR with (g := fun x : nat => pred (cPairPi1 x)).",
            "VernacExtend",
            "519507057dfb4a8a033cee47f0d46250f6c8b71f"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (pred (cPairPi1 f))) (f2 := fun f recs : nat => switchPR (pred (pred (pred (cPairPi1 f)))) (codeFreeVarTerms (cPairPi2 f)) (codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (f3 := fun f recs : nat => codeNth (f - S (cPairPi2 f)) recs).",
            "VernacExtend",
            "44bb30892d353c3b16c2eec65fabeb02fc6da7e1"
        ],
        [
            "apply filter10IsPR with (g := fun x : nat => pred (pred (cPairPi1 x))).",
            "VernacExtend",
            "b5a3500563e022a406739986fe13e092455ef730"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (pred (pred (cPairPi1 f)))) (f2 := fun f recs : nat => codeFreeVarTerms (cPairPi2 f)) (f3 := fun f recs : nat => codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)).",
            "VernacExtend",
            "b79064e0383959fe778f5ecd8928b783ee52ae63"
        ],
        [
            "apply filter10IsPR with (g := fun x : nat => pred (pred (pred (cPairPi1 x)))).",
            "VernacExtend",
            "da82f94a3854d5d2ed3fb5509b43d0abd697e012"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => codeFreeVarTerms (cPairPi2 f)).",
            "VernacExtend",
            "9927c868258e30f8e4904dfcec444584cf321b85"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply codeFreeVarTermsIsPR.",
            "VernacExtend",
            "c4f21bca21c57c1e24af114869bf731397175b44"
        ],
        [
            "apply compose2_2IsPR with (f := fun f recs : nat => cPairPi1 (cPairPi2 f)) (g := fun f recs : nat => codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
            "VernacExtend",
            "8c601fdcf3e81269a225fd9749b88600a1e888d9"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => cPairPi1 (cPairPi2 f)).",
            "VernacExtend",
            "ded35cc53a4b866e59331c4228e834dd07fc0dba"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply compose2_2IsPR with (f := fun f recs : nat => f - S (cPairPi2 (cPairPi2 f))) (g := fun f recs : nat => recs).",
            "VernacExtend",
            "4227f6456fe7127c9686bb21877d191cf54f3c57"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => f - S (cPairPi2 (cPairPi2 f))).",
            "VernacExtend",
            "55839d7ade7820203986cdb61a11c35dad88e918"
        ],
        [
            "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (cPairPi2 (cPairPi2 f))).",
            "VernacExtend",
            "4f5a008c28cc717c11329a970d1d8b4486d4544f"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => cPairPi2 (cPairPi2 f)).",
            "VernacExtend",
            "cf13d98900b7072887a0e260da9ee6122b2d0283"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply codeListRemoveIsPR.",
            "VernacExtend",
            "0b2fb3cddbc04063fa7b2b5fd90541c80be085ae"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply compose2_2IsPR with (f := fun f recs : nat => f - S (cPairPi2 f)) (g := fun f recs : nat => recs).",
            "VernacExtend",
            "22cb05f1cf73640d06fd4002f7546b2d20946cb9"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => f - S (cPairPi2 f)).",
            "VernacExtend",
            "b76d4c92b77ca6102d1fe46e4648b4437128a6ee"
        ],
        [
            "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (cPairPi2 f)).",
            "VernacExtend",
            "55eef893cdd7dad98b48b576aed1a273e59dcf3c"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply compose2_2IsPR with (f := fun f recs : nat => codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (g := fun f recs : nat => codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
            "VernacExtend",
            "577c575ee5d0347efbd61a155a291ff3dc622602"
        ],
        [
            "apply compose2_2IsPR with (f := fun f recs : nat => f - S (cPairPi1 (cPairPi2 f))) (g := fun f recs : nat => recs).",
            "VernacExtend",
            "f4915c938b67dc1f9af959c85f0d140937bfc078"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => f - S (cPairPi1 (cPairPi2 f))).",
            "VernacExtend",
            "51155480d9f065901a319ca7dd525de80b8f37e0"
        ],
        [
            "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (cPairPi1 (cPairPi2 f))).",
            "VernacExtend",
            "a08738edee3fcc9a973e0266f05a45a6477c69fd"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => cPairPi1 (cPairPi2 f)).",
            "VernacExtend",
            "574d639638c0c8658ff9d2386dea0df6984f8209"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply compose2_2IsPR with (f := fun f recs : nat => f - S (cPairPi2 (cPairPi2 f))) (g := fun f recs : nat => recs).",
            "VernacExtend",
            "4227f6456fe7127c9686bb21877d191cf54f3c57"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => f - S (cPairPi2 (cPairPi2 f))).",
            "VernacExtend",
            "55839d7ade7820203986cdb61a11c35dad88e918"
        ],
        [
            "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (cPairPi2 (cPairPi2 f))).",
            "VernacExtend",
            "4f5a008c28cc717c11329a970d1d8b4486d4544f"
        ],
        [
            "apply idIsPR.",
            "VernacExtend",
            "53dbd586054559f4d155667fb58fd24add718135"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => cPairPi2 (cPairPi2 f)).",
            "VernacExtend",
            "cf13d98900b7072887a0e260da9ee6122b2d0283"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply succIsPR.",
            "VernacExtend",
            "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
        ],
        [
            "apply minusIsPR.",
            "VernacExtend",
            "065f2551340f5d516a958dedbc9b9d09920c86cc"
        ],
        [
            "apply pi2_2IsPR.",
            "VernacExtend",
            "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
        ],
        [
            "apply codeNthIsPR.",
            "VernacExtend",
            "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
        ],
        [
            "apply codeAppIsPR.",
            "VernacExtend",
            "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "apply filter10IsPR with (g := fun f : nat => codeApp (codeFreeVarTerm (cPairPi1 (cPairPi2 f))) (codeFreeVarTerm (cPairPi2 (cPairPi2 f)))).",
            "VernacExtend",
            "113450363a100c4a484a261d5211bac031d5b3ab"
        ],
        [
            "apply compose1_2IsPR with (f := fun f : nat => codeFreeVarTerm (cPairPi1 (cPairPi2 f))) (f' := fun f : nat => codeFreeVarTerm (cPairPi2 (cPairPi2 f))).",
            "VernacExtend",
            "a7e1d661561cdc1c9bb956617a386d236f6f5305"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => cPairPi1 (cPairPi2 f)).",
            "VernacExtend",
            "574d639638c0c8658ff9d2386dea0df6984f8209"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply codeFreeVarTermIsPR.",
            "VernacExtend",
            "355ae6aa1dfaa8c3575ba4d2bacbef55f6ed3613"
        ],
        [
            "apply compose1_1IsPR with (f := fun f : nat => cPairPi2 (cPairPi2 f)).",
            "VernacExtend",
            "cf13d98900b7072887a0e260da9ee6122b2d0283"
        ],
        [
            "apply compose1_1IsPR; apply cPairPi2IsPR.",
            "VernacExtend",
            "bf3e410f50d7a97a2832561047f2528d9093a994"
        ],
        [
            "apply codeFreeVarTermIsPR.",
            "VernacExtend",
            "355ae6aa1dfaa8c3575ba4d2bacbef55f6ed3613"
        ],
        [
            "apply codeAppIsPR.",
            "VernacExtend",
            "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition codeFreeVarListFormula : nat -> nat := evalStrongRec 0 (fun l recs : nat => switchPR l (codeApp (codeFreeVarFormula (cPairPi1 (pred l))) (codeNth (l - S (cPairPi2 (pred l))) recs)) 0).",
            "VernacDefinition",
            "9772f2724b194df2ae4b93d992b04308fd80bdc2"
        ],
        [
            "Lemma codeFreeVarListFormulaCorrect : forall l : list Formula, codeFreeVarListFormula (codeList (map (codeFormula L codeF codeR) l)) = codeList (freeVarListFormula L l).",
            "VernacStartTheoremProof",
            "e8427b318bdd66838a6eb8210ad824047c571b9c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold codeFreeVarListFormula in |- *.",
            "VernacExtend",
            "3c54c32a860ddebe71d12413cd3ea6a6915dd640"
        ],
        [
            "set (A := fun l0 recs : nat => switchPR l0 (codeApp (codeFreeVarFormula (cPairPi1 (pred l0))) (codeNth (l0 - S (cPairPi2 (pred l0))) recs)) 0) in *.",
            "VernacExtend",
            "a6907a236ab9cd53db0d30ac7c5de7606566bf99"
        ],
        [
            "induction l as [| a l Hrecl]; unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *; rewrite computeEvalStrongRecHelp; unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
            "VernacExtend",
            "cc28e3be05a5f0478c94004e9b21b1f2a3dd6aef"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite cPairProjections1.",
            "VernacExtend",
            "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold A at 1 in |- *.",
            "VernacExtend",
            "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
        ],
        [
            "rewrite evalStrongRecHelp1.",
            "VernacExtend",
            "33915b331332e6d02e82cb6dd3cc4264cf1b6d2b"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
            "VernacExtend",
            "451b6262760e7503cd5319a8decdd41c06c099bc"
        ],
        [
            "rewrite Hrecl.",
            "VernacExtend",
            "a328513bb3b35e223eb11cf215df9e9470d5af7e"
        ],
        [
            "rewrite codeFreeVarFormulaCorrect.",
            "VernacExtend",
            "163540a693c0f8ae9a21f61ca5d4354dddf570b8"
        ],
        [
            "apply codeAppCorrect.",
            "VernacExtend",
            "54adfa1dd5dfe16a1dbbe5d670b5c06ff6f56035"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply le_lt_n_Sm.",
            "VernacExtend",
            "f92329fc5a21d6fff46401efc5d5a45be946b12c"
        ],
        [
            "apply cPairLe2A.",
            "VernacExtend",
            "104875cf507bcf9dffcd9a2aff3d4356d12cc0aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma codeFreeVarListFormulaIsPR : isPR 1 codeFreeVarListFormula.",
            "VernacStartTheoremProof",
            "5ab3b2e2704e64c2189421fb22d2c93d1024d75c"
        ],
        [
            "unfold codeFreeVarListFormula in |- *.",
            "VernacExtend",
            "3c54c32a860ddebe71d12413cd3ea6a6915dd640"
        ],
        [
            "apply evalStrongRecIsPR.",
            "VernacExtend",
            "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
        ],
        [
            "apply compose2_3IsPR with (f1 := fun l recs : nat => l) (f2 := fun l recs : nat => codeApp (codeFreeVarFormula (cPairPi1 (pred l))) (codeNth (l - S (cPairPi2 (pred l))) recs)) (f3 := fun l recs : nat => 0).",
            "VernacExtend",
            "3f6048e349512ae5af1c5cf3ac64a21e03fea597"
        ],
        [
            "apply pi1_2IsPR.",
            "VernacExtend",
            "de83e3a673d46ec194b97a67a98b94cf405137bf"
        ],
        [
            "apply compose2_2IsPR with (f := fun l recs : nat => codeFreeVarFormula (cPairPi1 (pred l))) (g := fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs).",
            "VernacExtend",
            "31a010f6a8cbe37ca661b25304043ae87e54e2dd"
        ],
        [
            "apply filter10IsPR with (g := fun l : nat => codeFreeVarFormula (cPairPi1 (pred l))).",
            "VernacExtend",
            "9c661e639a82f7143e848405a56581e8869c4428"
        ],
        [
            "apply compose1_1IsPR with (f := fun l : nat => cPairPi1 (pred l)).",
            "VernacExtend",
            "2ef709b25ad6bf4f0c8b784e1bbe621f4d4ffc3d"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi1IsPR.",
            "VernacExtend",
            "4bac551b247f32e958ed42e3ad9b87d435edb811"
        ],
        [
            "apply codeFreeVarFormulaIsPR.",
            "VernacExtend",
            "ec41269457e6eb685ba7d57f77bd65d355ac33d5"
        ],
        [
            "apply callIsPR with (g := fun l : nat => cPairPi2 (pred l)).",
            "VernacExtend",
            "2a6702accb58f7c4ae440aefdaa440f075649b0b"
        ],
        [
            "apply compose1_1IsPR.",
            "VernacExtend",
            "9921406eb1ce66f3429e19cb4b6f5468429ee619"
        ],
        [
            "apply predIsPR.",
            "VernacExtend",
            "997e71cc9af65178f66c42c7c23c11ad0d929df2"
        ],
        [
            "apply cPairPi2IsPR.",
            "VernacExtend",
            "576d617c91a7b31dc0407d020f8adc0e8302f05d"
        ],
        [
            "apply codeAppIsPR.",
            "VernacExtend",
            "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
        ],
        [
            "apply filter10IsPR with (g := fun _ : nat => 0).",
            "VernacExtend",
            "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
        ],
        [
            "apply const1_NIsPR.",
            "VernacExtend",
            "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
        ],
        [
            "apply switchIsPR.",
            "VernacExtend",
            "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Code_Free_Vars.",
            "VernacEndSegment",
            "f7d0f1ac16bc6866f875032eea4bb4cd535d8fd4"
        ]
    ],
    "proofs": [
        {
            "name": "codeFreeVarTermCorrect",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim t using Term_Terms_ind with (P0 := fun (n : nat) (ts : fol.Terms L n) => codeFreeVarTerms (codeTerms L codeF n ts) = codeList (freeVarTerms L n ts)); intros.",
                        "VernacExtend",
                        "43382c0c327873a41e91ee378b666a2ed388d15c"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold codeTerm in |- *.",
                        "VernacExtend",
                        "e7ce9af3a746913a0ec916c493740f219decb444"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTerm in |- *.",
                        "VernacExtend",
                        "ca8be59e7423452507c81920af0712386c4f4acb"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTermTerms in |- *.",
                        "VernacExtend",
                        "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold freeVarTerm in |- *.",
                        "VernacExtend",
                        "9b2658fd9dd67504b9da6550231f431d9a5043e5"
                    ]
                },
                {
                    "command": [
                        "fold (freeVarTerms L (arity L (inr (Relations L) f)) t0) in |- *.",
                        "VernacExtend",
                        "f711387ff0b365530faee950e752dbed992ba83a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "unfold codeTerm in |- *.",
                        "VernacExtend",
                        "e7ce9af3a746913a0ec916c493740f219decb444"
                    ]
                },
                {
                    "command": [
                        "fold (codeTerms L codeF (arity L (inr (Relations L) f)) t0) in |- *.",
                        "VernacExtend",
                        "35bfc7a3abb4934bcb68411988e361231a88a9f8"
                    ]
                },
                {
                    "command": [
                        "generalize (codeTerms L codeF (arity L (inr (Relations L) f)) t0).",
                        "VernacExtend",
                        "a10c2750e67b722f31e6aca58b2bd92a2738d3f6"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTerm in |- *.",
                        "VernacExtend",
                        "ca8be59e7423452507c81920af0712386c4f4acb"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTermTerms in |- *.",
                        "VernacExtend",
                        "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
                    ]
                },
                {
                    "command": [
                        "set (g := fun t1 recs : nat => cPair (switchPR (cPairPi1 t1) (cPairPi2 (codeNth (t1 - S (cPairPi2 t1)) recs)) (S (cPair (cPairPi2 t1) 0))) (switchPR t1 (codeApp (cPairPi1 (codeNth (t1 - S (cPairPi1 (pred t1))) recs)) (cPairPi2 (codeNth (t1 - S (cPairPi2 (pred t1))) recs))) 0)) in *.",
                        "VernacExtend",
                        "40cd159fc30a1b1d5c485b3bb071454c29e34504"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold evalOneParamList in |- *.",
                        "VernacExtend",
                        "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2 in |- *.",
                        "VernacExtend",
                        "761ead24699f05895393de12eaa0744422d777d7"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold g at 1 in |- *.",
                        "VernacExtend",
                        "e37b385734119cd559605192bae01db86557d77a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "rewrite (evalStrongRecHelp1 g (cPair (S (codeF f)) n) n).",
                        "VernacExtend",
                        "e179b6215079757a63a92e9283fd644efdff1808"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTerms in |- *.",
                        "VernacExtend",
                        "285dc28e7b720922daa7a79d7bc7b70a7a2be715"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTermTerms in |- *.",
                        "VernacExtend",
                        "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
                    ]
                },
                {
                    "command": [
                        "fold g in |- *.",
                        "VernacExtend",
                        "dac664ffedcdc748da016ff5fd3eb8cf63d93b5e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply cPairLt2.",
                        "VernacExtend",
                        "e6d709923844c4458dc3dd7bf0ec89a5aff595fb"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold codeTerms in |- *.",
                        "VernacExtend",
                        "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTerms in |- *.",
                        "VernacExtend",
                        "285dc28e7b720922daa7a79d7bc7b70a7a2be715"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTermTerms in |- *.",
                        "VernacExtend",
                        "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold freeVarTerms in |- *.",
                        "VernacExtend",
                        "8c502f1a4c0f7a93638e7808b7a031296e3ffbd7"
                    ]
                },
                {
                    "command": [
                        "fold (freeVarTerm L t0) in |- *.",
                        "VernacExtend",
                        "a8a27871e3b902d94e711aa8df2afaef97633515"
                    ]
                },
                {
                    "command": [
                        "fold (freeVarTerms L n t1) in |- *.",
                        "VernacExtend",
                        "17508cb6dfdc9503163fa6cd13496719787a52a9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- codeAppCorrect.",
                        "VernacExtend",
                        "1ae995e2faf253d9513acf8078ffaee8665e7f42"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "clear H H0.",
                        "VernacExtend",
                        "a743351ff441835fe992d483bf3a5b58c3fccd77"
                    ]
                },
                {
                    "command": [
                        "unfold codeTerms in |- *.",
                        "VernacExtend",
                        "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
                    ]
                },
                {
                    "command": [
                        "fold (codeTerm L codeF t0) in |- *.",
                        "VernacExtend",
                        "2c5867b09de0d934adf0cbae6f96535a574511c3"
                    ]
                },
                {
                    "command": [
                        "fold (codeTerms L codeF n t1) in |- *.",
                        "VernacExtend",
                        "80de9b41abe86e8a6ea6f8f897a8248c5d477507"
                    ]
                },
                {
                    "command": [
                        "generalize (codeTerm L codeF t0) (codeTerms L codeF n t1).",
                        "VernacExtend",
                        "cb2536daee453f107c4f3a1fbc3f2692d3497572"
                    ]
                },
                {
                    "command": [
                        "clear t0 t1.",
                        "VernacExtend",
                        "ac1d4af3c1014db47d11daadb7529e20e7617beb"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTerms at 1 in |- *.",
                        "VernacExtend",
                        "4c815e1beb99dd21ba525eec5b75d24845076983"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTermTerms in |- *.",
                        "VernacExtend",
                        "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "set (g := fun t0 recs : nat => cPair (switchPR (cPairPi1 t0) (cPairPi2 (codeNth (t0 - S (cPairPi2 t0)) recs)) (S (cPair (cPairPi2 t0) 0))) (switchPR t0 (codeApp (cPairPi1 (codeNth (t0 - S (cPairPi1 (pred t0))) recs)) (cPairPi2 (codeNth (t0 - S (cPairPi2 (pred t0))) recs))) 0)) in *.",
                        "VernacExtend",
                        "6c3356998c9418f8a1882d42a8340ff91e5f158e"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold evalOneParamList in |- *.",
                        "VernacExtend",
                        "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2 in |- *.",
                        "VernacExtend",
                        "761ead24699f05895393de12eaa0744422d777d7"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold g at 1 in |- *.",
                        "VernacExtend",
                        "e37b385734119cd559605192bae01db86557d77a"
                    ]
                },
                {
                    "command": [
                        "rewrite (evalStrongRecHelp1 g (S (cPair n0 n1)) (cPairPi1 (pred (S (cPair n0 n1))))) .",
                        "VernacExtend",
                        "5fe13027c054676c93a78c125b16d4a7d61aeb70"
                    ]
                },
                {
                    "command": [
                        "rewrite (evalStrongRecHelp1 g (S (cPair n0 n1)) (cPairPi2 (pred (S (cPair n0 n1))))) .",
                        "VernacExtend",
                        "07408a597f95653b9a01a9d041dda28123daf09b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe1.",
                        "VernacExtend",
                        "273d467bdcab30f1cf5e460652e5c74f67b1471b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeFreeVarTermsCorrect",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction ts as [| n t ts Hrects].",
                        "VernacExtend",
                        "4a72ca30982cf76b6ad63620c27c0db203f25a01"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold codeTerms in |- *.",
                        "VernacExtend",
                        "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTerms in |- *.",
                        "VernacExtend",
                        "285dc28e7b720922daa7a79d7bc7b70a7a2be715"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTermTerms in |- *.",
                        "VernacExtend",
                        "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold freeVarTerms in |- *.",
                        "VernacExtend",
                        "8c502f1a4c0f7a93638e7808b7a031296e3ffbd7"
                    ]
                },
                {
                    "command": [
                        "fold (freeVarTerm L t) in |- *.",
                        "VernacExtend",
                        "25de0f41b21c12aa79ec4951f1214456e69c04ee"
                    ]
                },
                {
                    "command": [
                        "fold (freeVarTerms L n ts) in |- *.",
                        "VernacExtend",
                        "4485807e495aa0fec8a2a8c670a097164bd3f0f2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- codeAppCorrect.",
                        "VernacExtend",
                        "1ae995e2faf253d9513acf8078ffaee8665e7f42"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hrects.",
                        "VernacExtend",
                        "48886e32242bc9c4c3c27d5b6de856a5ece8a1b2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- codeFreeVarTermCorrect.",
                        "VernacExtend",
                        "413b0c06aee3100303d602db2ddcbc05df693346"
                    ]
                },
                {
                    "command": [
                        "clear Hrects.",
                        "VernacExtend",
                        "bfbcd4aff7e1dbab64158074f4734b1b02ee67d9"
                    ]
                },
                {
                    "command": [
                        "unfold codeTerms in |- *.",
                        "VernacExtend",
                        "553c0c0fcf66902e47d6da387a074e25eb3e7cbc"
                    ]
                },
                {
                    "command": [
                        "fold (codeTerm L codeF t) in |- *.",
                        "VernacExtend",
                        "a1d64d923b8429c756c00d77d1d47934c11c52b9"
                    ]
                },
                {
                    "command": [
                        "fold (codeTerms L codeF n ts) in |- *.",
                        "VernacExtend",
                        "cf363af623b8e03afbd6155fe3b2f7fac9819131"
                    ]
                },
                {
                    "command": [
                        "generalize (codeTerm L codeF t) (codeTerms L codeF n ts).",
                        "VernacExtend",
                        "9db89fdb4bfe6ab0b892473035454b148f9d024f"
                    ]
                },
                {
                    "command": [
                        "clear t ts.",
                        "VernacExtend",
                        "b7b53d4183781fde5db5c9280619c3d2a0d9c1f4"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTerms at 1 in |- *.",
                        "VernacExtend",
                        "4c815e1beb99dd21ba525eec5b75d24845076983"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTermTerms in |- *.",
                        "VernacExtend",
                        "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
                    ]
                },
                {
                    "command": [
                        "unfold evalStrongRec in |- *.",
                        "VernacExtend",
                        "4cf49f2247395396309d3b668fa7008ed75287b9"
                    ]
                },
                {
                    "command": [
                        "set (g := fun t0 recs : nat => cPair (switchPR (cPairPi1 t0) (cPairPi2 (codeNth (t0 - S (cPairPi2 t0)) recs)) (S (cPair (cPairPi2 t0) 0))) (switchPR t0 (codeApp (cPairPi1 (codeNth (t0 - S (cPairPi1 (pred t0))) recs)) (cPairPi2 (codeNth (t0 - S (cPairPi2 (pred t0))) recs))) 0)) in *.",
                        "VernacExtend",
                        "6c3356998c9418f8a1882d42a8340ff91e5f158e"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold evalOneParamList in |- *.",
                        "VernacExtend",
                        "1fd99ff56ff0a3524386ef61bbc42bc2d9937afc"
                    ]
                },
                {
                    "command": [
                        "rewrite computeEvalStrongRecHelp.",
                        "VernacExtend",
                        "74b97e1ef9e685ac7c00b8175fdc06413a9fcb77"
                    ]
                },
                {
                    "command": [
                        "unfold compose2 in |- *.",
                        "VernacExtend",
                        "761ead24699f05895393de12eaa0744422d777d7"
                    ]
                },
                {
                    "command": [
                        "unfold evalComposeFunc in |- *.",
                        "VernacExtend",
                        "39ada200228fdc8c2cef55ef1448531290850600"
                    ]
                },
                {
                    "command": [
                        "unfold g at 1 in |- *.",
                        "VernacExtend",
                        "e37b385734119cd559605192bae01db86557d77a"
                    ]
                },
                {
                    "command": [
                        "rewrite (evalStrongRecHelp1 g (S (cPair n0 n1)) (cPairPi1 (pred (S (cPair n0 n1))))) .",
                        "VernacExtend",
                        "5fe13027c054676c93a78c125b16d4a7d61aeb70"
                    ]
                },
                {
                    "command": [
                        "rewrite (evalStrongRecHelp1 g (S (cPair n0 n1)) (cPairPi2 (pred (S (cPair n0 n1))))) .",
                        "VernacExtend",
                        "07408a597f95653b9a01a9d041dda28123daf09b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite cPairProjections1 || rewrite cPairProjections2.",
                        "VernacExtend",
                        "a50ae9bc4f0a7dcd57d50fca050ea83192416a72"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections2.",
                        "VernacExtend",
                        "5bd47b0daf0681544cbcd4c74faab75db0fb1e6c"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2.",
                        "VernacExtend",
                        "318e030685487083b7f09f04b3c45f941127c60e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe1.",
                        "VernacExtend",
                        "273d467bdcab30f1cf5e460652e5c74f67b1471b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeFreeVarTermTermsIsPR",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarTermTerms in |- *.",
                        "VernacExtend",
                        "d0576e1e4285df409e47e3dc682aa7b7d1ae7096"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => switchPR (cPairPi1 t) (cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) (S (cPair (cPairPi2 t) 0))) (g := fun t recs : nat => switchPR t (codeApp (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))) 0).",
                        "VernacExtend",
                        "80ee6280bbd91736513f74e1de2634647c1e3d0b"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun t recs : nat => cPairPi1 t) (f2 := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 t)) recs)) (f3 := fun t recs : nat => S (cPair (cPairPi2 t) 0)).",
                        "VernacExtend",
                        "5fe55923cceaead8fdd6faa377f47b8c05a2e3ee"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR.",
                        "VernacExtend",
                        "a511891d7a43751c68939783b674e14f242f8594"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 t)) recs).",
                        "VernacExtend",
                        "d614a65ac413ecc35815e5fc3c5414c484bffa05"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 t)) (g := fun t recs : nat => recs).",
                        "VernacExtend",
                        "9eadffc2b52fca69266f1655ef040654847ca2ed"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 t)).",
                        "VernacExtend",
                        "c982afba640099fcfebdc10cbe162871f7b6724d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 t)).",
                        "VernacExtend",
                        "57b9f62eba3bb3f0734a7f303b0e9575a4633d04"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => S (cPair (cPairPi2 t) 0)).",
                        "VernacExtend",
                        "dade5c78e7cebe0de5e33e3c3d8bdee07b969d3a"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun t : nat => cPair (cPairPi2 t) 0).",
                        "VernacExtend",
                        "2752f0f39ae5b1bc3e4000e368f6de28f3abfd55"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := cPairPi2) (f' := fun _ : nat => 0).",
                        "VernacExtend",
                        "82e0f53b1a8d9d6c483e6bb2d3dff3bd0eb79281"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun t recs : nat => t) (f2 := fun t recs : nat => codeApp (cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs))) (f3 := fun t recs : nat => 0).",
                        "VernacExtend",
                        "fcc95f2153c847bc65c0f6e95c7572917b5aeb2a"
                    ]
                },
                {
                    "command": [
                        "apply pi1_2IsPR.",
                        "VernacExtend",
                        "de83e3a673d46ec194b97a67a98b94cf405137bf"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => cPairPi1 (codeNth (t - S (cPairPi1 (pred t))) recs)) (g := fun t recs : nat => cPairPi2 (codeNth (t - S (cPairPi2 (pred t))) recs)).",
                        "VernacExtend",
                        "f1971737ccff06d4a4f9987d7058a10fcab655ee"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi1 (pred t))) recs).",
                        "VernacExtend",
                        "31ba85eb98d67b3ce4cc8d0bf59cc1e23549ab11"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi1 (pred t))) (g := fun t recs : nat => recs).",
                        "VernacExtend",
                        "a94fc8df4ba3a80f7649053c5fc78b91f5016dec"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi1 (pred t))).",
                        "VernacExtend",
                        "12ff2e5e475f7d08cb53b6496dc024bfc2270092"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi1 (pred t))).",
                        "VernacExtend",
                        "a15b11f1d26c349a5c34395d162c9070ec98db7f"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun t : nat => cPairPi1 (pred t)).",
                        "VernacExtend",
                        "77ea5fe9a3ba393be8cbb69691c385780e90e6a0"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose2_1IsPR with (f := fun t recs : nat => codeNth (t - S (cPairPi2 (pred t))) recs).",
                        "VernacExtend",
                        "f81e5492c00a44c6832854ae2a92de0b477ad453"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun t recs : nat => t - S (cPairPi2 (pred t))) (g := fun t recs : nat => recs).",
                        "VernacExtend",
                        "a3ca4a0445d9f1fce0efc2c54e2293d65613dc2b"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun t : nat => t - S (cPairPi2 (pred t))).",
                        "VernacExtend",
                        "93e57755221ff92e574ff83c95be23dc61c2066a"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun t : nat => t) (f' := fun t : nat => S (cPairPi2 (pred t))).",
                        "VernacExtend",
                        "a10f4b250b35d7c96f4a7ecc6bc2428d9e9d4594"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun t : nat => cPairPi2 (pred t)).",
                        "VernacExtend",
                        "679bbf589e33855726e50e51ab8f9c5f4b86aa78"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply codeAppIsPR.",
                        "VernacExtend",
                        "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
                    ]
                },
                {
                    "command": [
                        "exists (composeFunc 2 0 (PRnil _) zeroFunc).",
                        "VernacExtend",
                        "6d1f0f8ee83bc990d5d6792d2988e872621e2024"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply cPairIsPR.",
                        "VernacExtend",
                        "f8a5b87c0a2d77125868da28d8368de40c2103e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeFreeVarTermIsPR",
            "line_nb": 230,
            "steps": [
                {
                    "command": [
                        "unfold codeFreeVarTerm in |- *.",
                        "VernacExtend",
                        "ca8be59e7423452507c81920af0712386c4f4acb"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply codeFreeVarTermTermsIsPR.",
                        "VernacExtend",
                        "cacfb33c8d5b319c1f481018964f7c8c7448fb6c"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeFreeVarTermsIsPR",
            "line_nb": 236,
            "steps": [
                {
                    "command": [
                        "unfold codeFreeVarTerms in |- *.",
                        "VernacExtend",
                        "285dc28e7b720922daa7a79d7bc7b70a7a2be715"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply codeFreeVarTermTermsIsPR.",
                        "VernacExtend",
                        "cacfb33c8d5b319c1f481018964f7c8c7448fb6c"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeFreeVarFormulaIsPR",
            "line_nb": 360,
            "steps": [
                {
                    "command": [
                        "unfold codeFreeVarFormula in |- *.",
                        "VernacExtend",
                        "95529c2d8f192fad7b2da12e9876258fe02d09b8"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun x : nat => pred (cPairPi1 x))).",
                        "VernacExtend",
                        "82932b81b96113f495fc3f164efa721e625ca619"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun x : nat => pred (pred (cPairPi1 x)))).",
                        "VernacExtend",
                        "7b54d9016f4b9246e04e1fe4ca474008c8aaba4e"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun x : nat => pred (cPairPi1 x)).",
                        "VernacExtend",
                        "92796491cfb6c5dddee956e92f3ef14a95af4db5"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "assert (isPR 1 (fun x : nat => pred (pred (pred (cPairPi1 x))))).",
                        "VernacExtend",
                        "081fe9bba1629edb9fd4919e5c0a701cceac6297"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun x : nat => pred (pred (cPairPi1 x))).",
                        "VernacExtend",
                        "17809ce47556eb354bf0ae2578942c2bb1df55de"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun f recs : nat => cPairPi1 f) (f2 := fun f recs : nat => switchPR (pred (cPairPi1 f)) (switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (codeFreeVarTerms (cPairPi2 f)) (codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (codeNth (f - S (cPairPi2 f)) recs)) (codeApp (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (f3 := fun f recs : nat => codeApp (codeFreeVarTerm (cPairPi1 (cPairPi2 f))) (codeFreeVarTerm (cPairPi2 (cPairPi2 f)))).",
                        "VernacExtend",
                        "2d6e493b55df873e0d2ec637d10a3528d2b9e68d"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR.",
                        "VernacExtend",
                        "a511891d7a43751c68939783b674e14f242f8594"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (cPairPi1 f)) (f2 := fun f recs : nat => switchPR (pred (pred (cPairPi1 f))) (switchPR (pred (pred (pred (cPairPi1 f)))) (codeFreeVarTerms (cPairPi2 f)) (codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (codeNth (f - S (cPairPi2 f)) recs)) (f3 := fun f recs : nat => codeApp (codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)).",
                        "VernacExtend",
                        "e02f0fdd06ebb64a208ebb9b06c8af9e6806d6bb"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun x : nat => pred (cPairPi1 x)).",
                        "VernacExtend",
                        "519507057dfb4a8a033cee47f0d46250f6c8b71f"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (pred (cPairPi1 f))) (f2 := fun f recs : nat => switchPR (pred (pred (pred (cPairPi1 f)))) (codeFreeVarTerms (cPairPi2 f)) (codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs))) (f3 := fun f recs : nat => codeNth (f - S (cPairPi2 f)) recs).",
                        "VernacExtend",
                        "44bb30892d353c3b16c2eec65fabeb02fc6da7e1"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun x : nat => pred (pred (cPairPi1 x))).",
                        "VernacExtend",
                        "b5a3500563e022a406739986fe13e092455ef730"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun f recs : nat => pred (pred (pred (cPairPi1 f)))) (f2 := fun f recs : nat => codeFreeVarTerms (cPairPi2 f)) (f3 := fun f recs : nat => codeListRemove (cPairPi1 (cPairPi2 f)) (codeNth (f - S (cPairPi2 (cPairPi2 f))) recs)).",
                        "VernacExtend",
                        "b79064e0383959fe778f5ecd8928b783ee52ae63"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun x : nat => pred (pred (pred (cPairPi1 x)))).",
                        "VernacExtend",
                        "da82f94a3854d5d2ed3fb5509b43d0abd697e012"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => codeFreeVarTerms (cPairPi2 f)).",
                        "VernacExtend",
                        "9927c868258e30f8e4904dfcec444584cf321b85"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply codeFreeVarTermsIsPR.",
                        "VernacExtend",
                        "c4f21bca21c57c1e24af114869bf731397175b44"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun f recs : nat => cPairPi1 (cPairPi2 f)) (g := fun f recs : nat => codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
                        "VernacExtend",
                        "8c601fdcf3e81269a225fd9749b88600a1e888d9"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => cPairPi1 (cPairPi2 f)).",
                        "VernacExtend",
                        "ded35cc53a4b866e59331c4228e834dd07fc0dba"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun f recs : nat => f - S (cPairPi2 (cPairPi2 f))) (g := fun f recs : nat => recs).",
                        "VernacExtend",
                        "4227f6456fe7127c9686bb21877d191cf54f3c57"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => f - S (cPairPi2 (cPairPi2 f))).",
                        "VernacExtend",
                        "55839d7ade7820203986cdb61a11c35dad88e918"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (cPairPi2 (cPairPi2 f))).",
                        "VernacExtend",
                        "4f5a008c28cc717c11329a970d1d8b4486d4544f"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => cPairPi2 (cPairPi2 f)).",
                        "VernacExtend",
                        "cf13d98900b7072887a0e260da9ee6122b2d0283"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply codeListRemoveIsPR.",
                        "VernacExtend",
                        "0b2fb3cddbc04063fa7b2b5fd90541c80be085ae"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun f recs : nat => f - S (cPairPi2 f)) (g := fun f recs : nat => recs).",
                        "VernacExtend",
                        "22cb05f1cf73640d06fd4002f7546b2d20946cb9"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => f - S (cPairPi2 f)).",
                        "VernacExtend",
                        "b76d4c92b77ca6102d1fe46e4648b4437128a6ee"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (cPairPi2 f)).",
                        "VernacExtend",
                        "55eef893cdd7dad98b48b576aed1a273e59dcf3c"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun f recs : nat => codeNth (f - S (cPairPi1 (cPairPi2 f))) recs) (g := fun f recs : nat => codeNth (f - S (cPairPi2 (cPairPi2 f))) recs).",
                        "VernacExtend",
                        "577c575ee5d0347efbd61a155a291ff3dc622602"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun f recs : nat => f - S (cPairPi1 (cPairPi2 f))) (g := fun f recs : nat => recs).",
                        "VernacExtend",
                        "f4915c938b67dc1f9af959c85f0d140937bfc078"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => f - S (cPairPi1 (cPairPi2 f))).",
                        "VernacExtend",
                        "51155480d9f065901a319ca7dd525de80b8f37e0"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (cPairPi1 (cPairPi2 f))).",
                        "VernacExtend",
                        "a08738edee3fcc9a973e0266f05a45a6477c69fd"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => cPairPi1 (cPairPi2 f)).",
                        "VernacExtend",
                        "574d639638c0c8658ff9d2386dea0df6984f8209"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun f recs : nat => f - S (cPairPi2 (cPairPi2 f))) (g := fun f recs : nat => recs).",
                        "VernacExtend",
                        "4227f6456fe7127c9686bb21877d191cf54f3c57"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => f - S (cPairPi2 (cPairPi2 f))).",
                        "VernacExtend",
                        "55839d7ade7820203986cdb61a11c35dad88e918"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun f : nat => f) (f' := fun f : nat => S (cPairPi2 (cPairPi2 f))).",
                        "VernacExtend",
                        "4f5a008c28cc717c11329a970d1d8b4486d4544f"
                    ]
                },
                {
                    "command": [
                        "apply idIsPR.",
                        "VernacExtend",
                        "53dbd586054559f4d155667fb58fd24add718135"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => cPairPi2 (cPairPi2 f)).",
                        "VernacExtend",
                        "cf13d98900b7072887a0e260da9ee6122b2d0283"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply succIsPR.",
                        "VernacExtend",
                        "8bfc3f4d0ef3b0bdd90dab2898a992eb6e87c92c"
                    ]
                },
                {
                    "command": [
                        "apply minusIsPR.",
                        "VernacExtend",
                        "065f2551340f5d516a958dedbc9b9d09920c86cc"
                    ]
                },
                {
                    "command": [
                        "apply pi2_2IsPR.",
                        "VernacExtend",
                        "0862bd39580a3d0b83fb77cdd507ddcf5e34cc7f"
                    ]
                },
                {
                    "command": [
                        "apply codeNthIsPR.",
                        "VernacExtend",
                        "c8fe7117bd7c4ce7a2c8812ec8e21dd42b250732"
                    ]
                },
                {
                    "command": [
                        "apply codeAppIsPR.",
                        "VernacExtend",
                        "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun f : nat => codeApp (codeFreeVarTerm (cPairPi1 (cPairPi2 f))) (codeFreeVarTerm (cPairPi2 (cPairPi2 f)))).",
                        "VernacExtend",
                        "113450363a100c4a484a261d5211bac031d5b3ab"
                    ]
                },
                {
                    "command": [
                        "apply compose1_2IsPR with (f := fun f : nat => codeFreeVarTerm (cPairPi1 (cPairPi2 f))) (f' := fun f : nat => codeFreeVarTerm (cPairPi2 (cPairPi2 f))).",
                        "VernacExtend",
                        "a7e1d661561cdc1c9bb956617a386d236f6f5305"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => cPairPi1 (cPairPi2 f)).",
                        "VernacExtend",
                        "574d639638c0c8658ff9d2386dea0df6984f8209"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply codeFreeVarTermIsPR.",
                        "VernacExtend",
                        "355ae6aa1dfaa8c3575ba4d2bacbef55f6ed3613"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun f : nat => cPairPi2 (cPairPi2 f)).",
                        "VernacExtend",
                        "cf13d98900b7072887a0e260da9ee6122b2d0283"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR; apply cPairPi2IsPR.",
                        "VernacExtend",
                        "bf3e410f50d7a97a2832561047f2528d9093a994"
                    ]
                },
                {
                    "command": [
                        "apply codeFreeVarTermIsPR.",
                        "VernacExtend",
                        "355ae6aa1dfaa8c3575ba4d2bacbef55f6ed3613"
                    ]
                },
                {
                    "command": [
                        "apply codeAppIsPR.",
                        "VernacExtend",
                        "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeFreeVarListFormulaCorrect",
            "line_nb": 458,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold codeFreeVarListFormula in |- *.",
                        "VernacExtend",
                        "3c54c32a860ddebe71d12413cd3ea6a6915dd640"
                    ]
                },
                {
                    "command": [
                        "set (A := fun l0 recs : nat => switchPR l0 (codeApp (codeFreeVarFormula (cPairPi1 (pred l0))) (codeNth (l0 - S (cPairPi2 (pred l0))) recs)) 0) in *.",
                        "VernacExtend",
                        "a6907a236ab9cd53db0d30ac7c5de7606566bf99"
                    ]
                },
                {
                    "command": [
                        "induction l as [| a l Hrecl]; unfold evalStrongRec, evalComposeFunc, evalOneParamList, evalList in |- *; rewrite computeEvalStrongRecHelp; unfold compose2, evalComposeFunc, evalOneParamList, evalList in |- *.",
                        "VernacExtend",
                        "cc28e3be05a5f0478c94004e9b21b1f2a3dd6aef"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite cPairProjections1.",
                        "VernacExtend",
                        "2aeb03f60ab3e427170cb96956a5648ecc7ae528"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold A at 1 in |- *.",
                        "VernacExtend",
                        "7a2d533fc0d138a21830f7fdd35da0bfa016f989"
                    ]
                },
                {
                    "command": [
                        "rewrite evalStrongRecHelp1.",
                        "VernacExtend",
                        "33915b331332e6d02e82cb6dd3cc4264cf1b6d2b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat first [ rewrite cPairProjections1 | rewrite cPairProjections2 ].",
                        "VernacExtend",
                        "451b6262760e7503cd5319a8decdd41c06c099bc"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecl.",
                        "VernacExtend",
                        "a328513bb3b35e223eb11cf215df9e9470d5af7e"
                    ]
                },
                {
                    "command": [
                        "rewrite codeFreeVarFormulaCorrect.",
                        "VernacExtend",
                        "163540a693c0f8ae9a21f61ca5d4354dddf570b8"
                    ]
                },
                {
                    "command": [
                        "apply codeAppCorrect.",
                        "VernacExtend",
                        "54adfa1dd5dfe16a1dbbe5d670b5c06ff6f56035"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_n_Sm.",
                        "VernacExtend",
                        "f92329fc5a21d6fff46401efc5d5a45be946b12c"
                    ]
                },
                {
                    "command": [
                        "apply cPairLe2A.",
                        "VernacExtend",
                        "104875cf507bcf9dffcd9a2aff3d4356d12cc0aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "codeFreeVarListFormulaIsPR",
            "line_nb": 477,
            "steps": [
                {
                    "command": [
                        "unfold codeFreeVarListFormula in |- *.",
                        "VernacExtend",
                        "3c54c32a860ddebe71d12413cd3ea6a6915dd640"
                    ]
                },
                {
                    "command": [
                        "apply evalStrongRecIsPR.",
                        "VernacExtend",
                        "f12840d75e2be8f2c437a32ed7b12f63fef0bf96"
                    ]
                },
                {
                    "command": [
                        "apply compose2_3IsPR with (f1 := fun l recs : nat => l) (f2 := fun l recs : nat => codeApp (codeFreeVarFormula (cPairPi1 (pred l))) (codeNth (l - S (cPairPi2 (pred l))) recs)) (f3 := fun l recs : nat => 0).",
                        "VernacExtend",
                        "3f6048e349512ae5af1c5cf3ac64a21e03fea597"
                    ]
                },
                {
                    "command": [
                        "apply pi1_2IsPR.",
                        "VernacExtend",
                        "de83e3a673d46ec194b97a67a98b94cf405137bf"
                    ]
                },
                {
                    "command": [
                        "apply compose2_2IsPR with (f := fun l recs : nat => codeFreeVarFormula (cPairPi1 (pred l))) (g := fun l recs : nat => codeNth (l - S (cPairPi2 (pred l))) recs).",
                        "VernacExtend",
                        "31a010f6a8cbe37ca661b25304043ae87e54e2dd"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun l : nat => codeFreeVarFormula (cPairPi1 (pred l))).",
                        "VernacExtend",
                        "9c661e639a82f7143e848405a56581e8869c4428"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR with (f := fun l : nat => cPairPi1 (pred l)).",
                        "VernacExtend",
                        "2ef709b25ad6bf4f0c8b784e1bbe621f4d4ffc3d"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi1IsPR.",
                        "VernacExtend",
                        "4bac551b247f32e958ed42e3ad9b87d435edb811"
                    ]
                },
                {
                    "command": [
                        "apply codeFreeVarFormulaIsPR.",
                        "VernacExtend",
                        "ec41269457e6eb685ba7d57f77bd65d355ac33d5"
                    ]
                },
                {
                    "command": [
                        "apply callIsPR with (g := fun l : nat => cPairPi2 (pred l)).",
                        "VernacExtend",
                        "2a6702accb58f7c4ae440aefdaa440f075649b0b"
                    ]
                },
                {
                    "command": [
                        "apply compose1_1IsPR.",
                        "VernacExtend",
                        "9921406eb1ce66f3429e19cb4b6f5468429ee619"
                    ]
                },
                {
                    "command": [
                        "apply predIsPR.",
                        "VernacExtend",
                        "997e71cc9af65178f66c42c7c23c11ad0d929df2"
                    ]
                },
                {
                    "command": [
                        "apply cPairPi2IsPR.",
                        "VernacExtend",
                        "576d617c91a7b31dc0407d020f8adc0e8302f05d"
                    ]
                },
                {
                    "command": [
                        "apply codeAppIsPR.",
                        "VernacExtend",
                        "bcd9c9b2eadfd05f4acac09bbc7fee89d17713a3"
                    ]
                },
                {
                    "command": [
                        "apply filter10IsPR with (g := fun _ : nat => 0).",
                        "VernacExtend",
                        "156c3c0463b732ca0e6820cee0addd1a6c03e9fe"
                    ]
                },
                {
                    "command": [
                        "apply const1_NIsPR.",
                        "VernacExtend",
                        "00c0b76d6f6c60e4e2e3bfe166558fe58f636da3"
                    ]
                },
                {
                    "command": [
                        "apply switchIsPR.",
                        "VernacExtend",
                        "7b5d2ec2b1d37cbe480c313dc5f99ab6809a396f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}