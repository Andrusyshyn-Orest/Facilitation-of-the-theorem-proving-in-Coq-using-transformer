{
    "filename": "theories/Restrict.v",
    "coq_project": "huffman",
    "vernac_cmds": [
        [
            "From Huffman Require Export Code.",
            "VernacRequire",
            "5227f20726b4537018d694126ac5e021d2a55dd0"
        ],
        [
            "From Huffman Require Export Frequency.",
            "VernacRequire",
            "e646295d5130bdb5b3cd1ba630f95092a07693fc"
        ],
        [
            "From Huffman Require Export ISort.",
            "VernacRequire",
            "a319c1dbaf0356c37229de9183bebe5c710b8fd8"
        ],
        [
            "From Huffman Require Export Permutation.",
            "VernacRequire",
            "37394a3a1204d537581ecd2116a50dc029e15045"
        ],
        [
            "From Huffman Require Export UniqueKey.",
            "VernacRequire",
            "3e16aad401d6b127c82271c87b0e0aae2a3a5736"
        ],
        [
            "From Huffman Require Export PBTree2BTree.",
            "VernacRequire",
            "800ba22d6fc6f1267ca51b71403b36adccf4d928"
        ],
        [
            "Section Restrict.",
            "VernacBeginSection",
            "457b91c4635da7a08fdf3f3bda44e7aa7a4a51b1"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable empty : A.",
            "VernacAssumption",
            "9bda1a8ce5f65b54cf16331e6806aa4357a2db46"
        ],
        [
            "Variable eqA_dec : forall a b : A, {a = b} + {a <> b}.",
            "VernacAssumption",
            "c7dce40a1a1159550fac93e6bff94107f0f6b383"
        ],
        [
            "Variable m : list A.",
            "VernacAssumption",
            "68908da473f0e0fe113af17f2c72010e2a9a4ba3"
        ],
        [
            "Definition restrict_code (m : list A) (c : code A) : code A := map (fun x => (fst x, find_code eqA_dec (fst x) c)) (frequency_list eqA_dec m).",
            "VernacDefinition",
            "22de854fd4435d581b772798515db23279c562d6"
        ],
        [
            "Theorem restrict_code_unique_key : forall c : code A, unique_key (restrict_code m c).",
            "VernacStartTheoremProof",
            "f6ff3d8dbee610e6a5d3513e1301ca03038bd530"
        ],
        [
            "intros c; apply ulist_unique_key.",
            "VernacExtend",
            "e6798a51407e0c9cc6c8ec8bf4d0af4588aaca77"
        ],
        [
            "unfold restrict_code in |- *.",
            "VernacExtend",
            "5db3466aa09bdc6fa696206bcb6e73fc854ecb33"
        ],
        [
            "replace (map (fst (B:=_)) (map (fun x : A * nat => (fst x, find_code eqA_dec (fst x) c)) (frequency_list eqA_dec m))) with (map (fst (B:=_)) (frequency_list eqA_dec m)).",
            "VernacExtend",
            "b3f5eedf70509fae23a7b997fdc32309c350eb75"
        ],
        [
            "apply unique_key_ulist; auto.",
            "VernacExtend",
            "571dec336c3beb4163415700ebc9515c3b083977"
        ],
        [
            "elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "6a6385c2b4a96188e2167b147d357f5a5bcc2299"
        ],
        [
            "intros a l H; apply f_equal2 with (f := cons (A:=A)); auto.",
            "VernacExtend",
            "771acd8e0b9923a80132012aa1135d426bb16da7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_code_in : forall (a : A) (c : code A), In a m -> find_code eqA_dec a c = find_code eqA_dec a (restrict_code m c).",
            "VernacStartTheoremProof",
            "911cd80189ccbb0942767c17f05eca33da01214a"
        ],
        [
            "intros a c H.",
            "VernacExtend",
            "fd9b51e3aa24533a80fcbc7c838e3fffc7cdbabe"
        ],
        [
            "apply sym_equal; apply find_code_correct2; auto.",
            "VernacExtend",
            "32279f583792cc90b2f97e742bd1d12cab4d7d8c"
        ],
        [
            "apply restrict_code_unique_key.",
            "VernacExtend",
            "e583a9930c8542ee75b6b90a2a7edeec6d462f24"
        ],
        [
            "generalize (in_frequency_map _ eqA_dec m a H).",
            "VernacExtend",
            "1a8653ae3f62bd98a74d4a1523fc4c9ab4fedaa5"
        ],
        [
            "unfold restrict_code in |- *; elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "f5037ebc485f5258da8d88fffbdfaa0d2a6ec92f"
        ],
        [
            "intros a0; case a0; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "3eafb4d7b6951b945a65820421884233f6cac575"
        ],
        [
            "intros a1 n l H0 [H1| H1]; try rewrite H1; auto.",
            "VernacExtend",
            "eb35cbab79e1679c12f592f0631e56b64704db1d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_code_encode_incl : forall (m1 : list A) (c : code A), incl m1 m -> encode eqA_dec c m1 = encode eqA_dec (restrict_code m c) m1.",
            "VernacStartTheoremProof",
            "d0a3da0c8054603f9189c1f9cca1bb57b3aeb95b"
        ],
        [
            "intros m1 c; elim m1; simpl in |- *; auto.",
            "VernacExtend",
            "f3398628e9707dcef608a8900db40e06c4401eef"
        ],
        [
            "intros a l H H0.",
            "VernacExtend",
            "44b7bfa42942133b9b1d286440d30e6a97d59cb7"
        ],
        [
            "apply f_equal2 with (f := app (A:=bool)); auto with datatypes.",
            "VernacExtend",
            "0c99236edb9f2442d4ca6a1add522916ff831f9e"
        ],
        [
            "apply restrict_code_in; auto with datatypes.",
            "VernacExtend",
            "e1f504ead1efe9d895061dda504d419ed18e641d"
        ],
        [
            "apply H; apply incl_tran with (2 := H0); auto with datatypes.",
            "VernacExtend",
            "36501322ffce0c32eed72312b4a85e08c6ffdd14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_code_encode : forall c : code A, encode eqA_dec c m = encode eqA_dec (restrict_code m c) m.",
            "VernacStartTheoremProof",
            "0aa3acb1f86954b734584d5faae693c7e10eeeca"
        ],
        [
            "intros c; apply restrict_code_encode_incl; auto with datatypes.",
            "VernacExtend",
            "e71f998fdb85a21f3849ac2c43dc4cac0b86e8bc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_unique_prefix : forall c : code A, not_null c -> in_alphabet m c -> unique_prefix c -> unique_prefix (restrict_code m c).",
            "VernacStartTheoremProof",
            "acee24fa32ddc138a108d5b0fbfcec625f87bb35"
        ],
        [
            "intros c HH HH0 (HH1, HH2); split.",
            "VernacExtend",
            "206531bf596a73811ff82188032a282c6ae5c686"
        ],
        [
            "intros a1 a2 lb1 lb2 H0 H1 H2; apply HH1 with (lb1 := lb1) (lb2 := lb2); auto.",
            "VernacExtend",
            "ac8fe1cb7baf92fb79a178085d5c841e14d1e144"
        ],
        [
            "unfold restrict_code in H0.",
            "VernacExtend",
            "a5462d7ac0b5a488b59bf55b39335da5961b90e6"
        ],
        [
            "case in_map_inv with (1 := H0).",
            "VernacExtend",
            "82a2dfbdf6bdc2d9f059ffe3fa1ab282cb61affd"
        ],
        [
            "intros x; case x; simpl in |- *.",
            "VernacExtend",
            "2434d5e4a0ff4aad202ddde8d652d6081a113660"
        ],
        [
            "intros a0 n (HP1, HP2).",
            "VernacExtend",
            "e373a7aeb2705947904b50434c2d2c23649c427a"
        ],
        [
            "rewrite HP2.",
            "VernacExtend",
            "04dc7fb498239509f599df1f08a606edcddce221"
        ],
        [
            "case (HH0 a0); auto.",
            "VernacExtend",
            "8e0b1d3a7bae1a663d66c08524c0e1e91e3ed634"
        ],
        [
            "apply frequency_list_in with (1 := HP1).",
            "VernacExtend",
            "ec61109cf36681417857a9de5c98393a2f3c6f3f"
        ],
        [
            "intros x0 H; rewrite find_code_correct2 with (2 := H); auto.",
            "VernacExtend",
            "e7370eebfca323a8c798dc29d377c650896a0111"
        ],
        [
            "unfold restrict_code in H1.",
            "VernacExtend",
            "b231c1128ecd0302b85836f60ef87a0ca215000c"
        ],
        [
            "case in_map_inv with (1 := H1).",
            "VernacExtend",
            "fd0cd0d988325e4254074f387648f53ec4a77b4a"
        ],
        [
            "intros x; case x; simpl in |- *.",
            "VernacExtend",
            "2434d5e4a0ff4aad202ddde8d652d6081a113660"
        ],
        [
            "intros a0 n (HP1, HP2).",
            "VernacExtend",
            "e373a7aeb2705947904b50434c2d2c23649c427a"
        ],
        [
            "rewrite HP2.",
            "VernacExtend",
            "04dc7fb498239509f599df1f08a606edcddce221"
        ],
        [
            "case (HH0 a0); auto.",
            "VernacExtend",
            "8e0b1d3a7bae1a663d66c08524c0e1e91e3ed634"
        ],
        [
            "apply frequency_list_in with (1 := HP1).",
            "VernacExtend",
            "ec61109cf36681417857a9de5c98393a2f3c6f3f"
        ],
        [
            "intros x0 H; rewrite find_code_correct2 with (2 := H); auto.",
            "VernacExtend",
            "e7370eebfca323a8c798dc29d377c650896a0111"
        ],
        [
            "unfold restrict_code in |- *.",
            "VernacExtend",
            "5db3466aa09bdc6fa696206bcb6e73fc854ecb33"
        ],
        [
            "apply unique_key_map; auto.",
            "VernacExtend",
            "f34d15647c1a549c3b657b1113cf9ba828547e53"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem frequency_list_restric_code_map : forall c, map (fst (B:=_)) (frequency_list eqA_dec m) = map (fst (B:=_)) (restrict_code m c).",
            "VernacStartTheoremProof",
            "9311664029dfae050fc9411540717457ddc25cf3"
        ],
        [
            "intros c; unfold restrict_code in |- *; elim (frequency_list eqA_dec m); simpl in |- *; auto.",
            "VernacExtend",
            "88a037ac3e13abf8359c2b8932aa8b03a9473efd"
        ],
        [
            "intros a0 l H; apply f_equal2 with (f := cons (A:=A)); auto.",
            "VernacExtend",
            "88a8daa95f20e9c0018e036db71d0850c63f6414"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_not_null : forall c, m <> nil -> restrict_code m c <> nil.",
            "VernacStartTheoremProof",
            "3f3544b940ba9fce82ec5862f117f66843c1fb1a"
        ],
        [
            "case m; simpl in |- *; auto.",
            "VernacExtend",
            "4bc2def571a58fd72d840de7e567a45e2a7626d5"
        ],
        [
            "unfold restrict_code in |- *.",
            "VernacExtend",
            "5db3466aa09bdc6fa696206bcb6e73fc854ecb33"
        ],
        [
            "intros a0 l c H H1.",
            "VernacExtend",
            "43c66971cc4b26c1fea3ff8e0af27ab66b761ba7"
        ],
        [
            "absurd (In ((fun x : A * nat => (fst x, find_code eqA_dec (fst x) c)) (a0, number_of_occurrences eqA_dec a0 (a0 :: l))) nil); auto with datatypes.",
            "VernacExtend",
            "d20a2e35d86062f8851735bc1d865a3605adccb7"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "apply in_map with (f := fun x : A * nat => (fst x, find_code eqA_dec (fst x) c)).",
            "VernacExtend",
            "72b4c583d43daa03f0e489428da5e15f3b15b688"
        ],
        [
            "apply frequency_number_of_occurrences; auto with datatypes.",
            "VernacExtend",
            "10e4fa61e7f8930e5e18188b1ffd6900a008ea37"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_code_pbbuild : forall c : code A, not_null c -> unique_prefix c -> in_alphabet m c -> m <> nil -> permutation (map fst (frequency_list eqA_dec m)) (all_pbleaves (pbbuild empty (restrict_code m c))).",
            "VernacStartTheoremProof",
            "08c1076aa83ffd2dc6bf66d3e79c28c543e94f74"
        ],
        [
            "intros c H H0 H1 H2.",
            "VernacExtend",
            "04d49fe8d42881d191e5091c17ad15f559cfb437"
        ],
        [
            "rewrite frequency_list_restric_code_map with (c := c).",
            "VernacExtend",
            "78648e53249d95f997da0f96110992a2d362f2c2"
        ],
        [
            "apply all_pbleaves_pbbuild; auto.",
            "VernacExtend",
            "5877ec7f0687c4273962a85e6a676db96cc385e1"
        ],
        [
            "apply restrict_not_null; auto.",
            "VernacExtend",
            "80475c7b73214ef54ee3e1478e3bc30d90d24b9f"
        ],
        [
            "apply restrict_unique_prefix; auto.",
            "VernacExtend",
            "394755454b15c9b8bd07d5fb4c024d2968893241"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Restrict.",
            "VernacEndSegment",
            "746f669aebca461bfe6449478db2d94d3e29eaab"
        ],
        [
            "Arguments restrict_code [A].",
            "VernacArguments",
            "322e5fc29a5303b058a02b6a2d606442de6a90b1"
        ]
    ],
    "proofs": [
        {
            "name": "restrict_code_unique_key",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros c; apply ulist_unique_key.",
                        "VernacExtend",
                        "e6798a51407e0c9cc6c8ec8bf4d0af4588aaca77"
                    ]
                },
                {
                    "command": [
                        "unfold restrict_code in |- *.",
                        "VernacExtend",
                        "5db3466aa09bdc6fa696206bcb6e73fc854ecb33"
                    ]
                },
                {
                    "command": [
                        "replace (map (fst (B:=_)) (map (fun x : A * nat => (fst x, find_code eqA_dec (fst x) c)) (frequency_list eqA_dec m))) with (map (fst (B:=_)) (frequency_list eqA_dec m)).",
                        "VernacExtend",
                        "b3f5eedf70509fae23a7b997fdc32309c350eb75"
                    ]
                },
                {
                    "command": [
                        "apply unique_key_ulist; auto.",
                        "VernacExtend",
                        "571dec336c3beb4163415700ebc9515c3b083977"
                    ]
                },
                {
                    "command": [
                        "elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "6a6385c2b4a96188e2167b147d357f5a5bcc2299"
                    ]
                },
                {
                    "command": [
                        "intros a l H; apply f_equal2 with (f := cons (A:=A)); auto.",
                        "VernacExtend",
                        "771acd8e0b9923a80132012aa1135d426bb16da7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_code_in",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intros a c H.",
                        "VernacExtend",
                        "fd9b51e3aa24533a80fcbc7c838e3fffc7cdbabe"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply find_code_correct2; auto.",
                        "VernacExtend",
                        "32279f583792cc90b2f97e742bd1d12cab4d7d8c"
                    ]
                },
                {
                    "command": [
                        "apply restrict_code_unique_key.",
                        "VernacExtend",
                        "e583a9930c8542ee75b6b90a2a7edeec6d462f24"
                    ]
                },
                {
                    "command": [
                        "generalize (in_frequency_map _ eqA_dec m a H).",
                        "VernacExtend",
                        "1a8653ae3f62bd98a74d4a1523fc4c9ab4fedaa5"
                    ]
                },
                {
                    "command": [
                        "unfold restrict_code in |- *; elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "f5037ebc485f5258da8d88fffbdfaa0d2a6ec92f"
                    ]
                },
                {
                    "command": [
                        "intros a0; case a0; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "3eafb4d7b6951b945a65820421884233f6cac575"
                    ]
                },
                {
                    "command": [
                        "intros a1 n l H0 [H1| H1]; try rewrite H1; auto.",
                        "VernacExtend",
                        "eb35cbab79e1679c12f592f0631e56b64704db1d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_code_encode_incl",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "intros m1 c; elim m1; simpl in |- *; auto.",
                        "VernacExtend",
                        "f3398628e9707dcef608a8900db40e06c4401eef"
                    ]
                },
                {
                    "command": [
                        "intros a l H H0.",
                        "VernacExtend",
                        "44b7bfa42942133b9b1d286440d30e6a97d59cb7"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 with (f := app (A:=bool)); auto with datatypes.",
                        "VernacExtend",
                        "0c99236edb9f2442d4ca6a1add522916ff831f9e"
                    ]
                },
                {
                    "command": [
                        "apply restrict_code_in; auto with datatypes.",
                        "VernacExtend",
                        "e1f504ead1efe9d895061dda504d419ed18e641d"
                    ]
                },
                {
                    "command": [
                        "apply H; apply incl_tran with (2 := H0); auto with datatypes.",
                        "VernacExtend",
                        "36501322ffce0c32eed72312b4a85e08c6ffdd14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_code_encode",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "intros c; apply restrict_code_encode_incl; auto with datatypes.",
                        "VernacExtend",
                        "e71f998fdb85a21f3849ac2c43dc4cac0b86e8bc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_unique_prefix",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "intros c HH HH0 (HH1, HH2); split.",
                        "VernacExtend",
                        "206531bf596a73811ff82188032a282c6ae5c686"
                    ]
                },
                {
                    "command": [
                        "intros a1 a2 lb1 lb2 H0 H1 H2; apply HH1 with (lb1 := lb1) (lb2 := lb2); auto.",
                        "VernacExtend",
                        "ac8fe1cb7baf92fb79a178085d5c841e14d1e144"
                    ]
                },
                {
                    "command": [
                        "unfold restrict_code in H0.",
                        "VernacExtend",
                        "a5462d7ac0b5a488b59bf55b39335da5961b90e6"
                    ]
                },
                {
                    "command": [
                        "case in_map_inv with (1 := H0).",
                        "VernacExtend",
                        "82a2dfbdf6bdc2d9f059ffe3fa1ab282cb61affd"
                    ]
                },
                {
                    "command": [
                        "intros x; case x; simpl in |- *.",
                        "VernacExtend",
                        "2434d5e4a0ff4aad202ddde8d652d6081a113660"
                    ]
                },
                {
                    "command": [
                        "intros a0 n (HP1, HP2).",
                        "VernacExtend",
                        "e373a7aeb2705947904b50434c2d2c23649c427a"
                    ]
                },
                {
                    "command": [
                        "rewrite HP2.",
                        "VernacExtend",
                        "04dc7fb498239509f599df1f08a606edcddce221"
                    ]
                },
                {
                    "command": [
                        "case (HH0 a0); auto.",
                        "VernacExtend",
                        "8e0b1d3a7bae1a663d66c08524c0e1e91e3ed634"
                    ]
                },
                {
                    "command": [
                        "apply frequency_list_in with (1 := HP1).",
                        "VernacExtend",
                        "ec61109cf36681417857a9de5c98393a2f3c6f3f"
                    ]
                },
                {
                    "command": [
                        "intros x0 H; rewrite find_code_correct2 with (2 := H); auto.",
                        "VernacExtend",
                        "e7370eebfca323a8c798dc29d377c650896a0111"
                    ]
                },
                {
                    "command": [
                        "unfold restrict_code in H1.",
                        "VernacExtend",
                        "b231c1128ecd0302b85836f60ef87a0ca215000c"
                    ]
                },
                {
                    "command": [
                        "case in_map_inv with (1 := H1).",
                        "VernacExtend",
                        "fd0cd0d988325e4254074f387648f53ec4a77b4a"
                    ]
                },
                {
                    "command": [
                        "intros x; case x; simpl in |- *.",
                        "VernacExtend",
                        "2434d5e4a0ff4aad202ddde8d652d6081a113660"
                    ]
                },
                {
                    "command": [
                        "intros a0 n (HP1, HP2).",
                        "VernacExtend",
                        "e373a7aeb2705947904b50434c2d2c23649c427a"
                    ]
                },
                {
                    "command": [
                        "rewrite HP2.",
                        "VernacExtend",
                        "04dc7fb498239509f599df1f08a606edcddce221"
                    ]
                },
                {
                    "command": [
                        "case (HH0 a0); auto.",
                        "VernacExtend",
                        "8e0b1d3a7bae1a663d66c08524c0e1e91e3ed634"
                    ]
                },
                {
                    "command": [
                        "apply frequency_list_in with (1 := HP1).",
                        "VernacExtend",
                        "ec61109cf36681417857a9de5c98393a2f3c6f3f"
                    ]
                },
                {
                    "command": [
                        "intros x0 H; rewrite find_code_correct2 with (2 := H); auto.",
                        "VernacExtend",
                        "e7370eebfca323a8c798dc29d377c650896a0111"
                    ]
                },
                {
                    "command": [
                        "unfold restrict_code in |- *.",
                        "VernacExtend",
                        "5db3466aa09bdc6fa696206bcb6e73fc854ecb33"
                    ]
                },
                {
                    "command": [
                        "apply unique_key_map; auto.",
                        "VernacExtend",
                        "f34d15647c1a549c3b657b1113cf9ba828547e53"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "frequency_list_restric_code_map",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "intros c; unfold restrict_code in |- *; elim (frequency_list eqA_dec m); simpl in |- *; auto.",
                        "VernacExtend",
                        "88a037ac3e13abf8359c2b8932aa8b03a9473efd"
                    ]
                },
                {
                    "command": [
                        "intros a0 l H; apply f_equal2 with (f := cons (A:=A)); auto.",
                        "VernacExtend",
                        "88a8daa95f20e9c0018e036db71d0850c63f6414"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_not_null",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "case m; simpl in |- *; auto.",
                        "VernacExtend",
                        "4bc2def571a58fd72d840de7e567a45e2a7626d5"
                    ]
                },
                {
                    "command": [
                        "unfold restrict_code in |- *.",
                        "VernacExtend",
                        "5db3466aa09bdc6fa696206bcb6e73fc854ecb33"
                    ]
                },
                {
                    "command": [
                        "intros a0 l c H H1.",
                        "VernacExtend",
                        "43c66971cc4b26c1fea3ff8e0af27ab66b761ba7"
                    ]
                },
                {
                    "command": [
                        "absurd (In ((fun x : A * nat => (fst x, find_code eqA_dec (fst x) c)) (a0, number_of_occurrences eqA_dec a0 (a0 :: l))) nil); auto with datatypes.",
                        "VernacExtend",
                        "d20a2e35d86062f8851735bc1d865a3605adccb7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "apply in_map with (f := fun x : A * nat => (fst x, find_code eqA_dec (fst x) c)).",
                        "VernacExtend",
                        "72b4c583d43daa03f0e489428da5e15f3b15b688"
                    ]
                },
                {
                    "command": [
                        "apply frequency_number_of_occurrences; auto with datatypes.",
                        "VernacExtend",
                        "10e4fa61e7f8930e5e18188b1ffd6900a008ea37"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_code_pbbuild",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "intros c H H0 H1 H2.",
                        "VernacExtend",
                        "04d49fe8d42881d191e5091c17ad15f559cfb437"
                    ]
                },
                {
                    "command": [
                        "rewrite frequency_list_restric_code_map with (c := c).",
                        "VernacExtend",
                        "78648e53249d95f997da0f96110992a2d362f2c2"
                    ]
                },
                {
                    "command": [
                        "apply all_pbleaves_pbbuild; auto.",
                        "VernacExtend",
                        "5877ec7f0687c4273962a85e6a676db96cc385e1"
                    ]
                },
                {
                    "command": [
                        "apply restrict_not_null; auto.",
                        "VernacExtend",
                        "80475c7b73214ef54ee3e1478e3bc30d90d24b9f"
                    ]
                },
                {
                    "command": [
                        "apply restrict_unique_prefix; auto.",
                        "VernacExtend",
                        "394755454b15c9b8bd07d5fb4c024d2968893241"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}