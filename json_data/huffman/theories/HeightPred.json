{
    "filename": "theories/HeightPred.v",
    "coq_project": "huffman",
    "vernac_cmds": [
        [
            "From Huffman Require Export OrderedCover.",
            "VernacRequire",
            "36d1773f59468f636390987966dae3d337546497"
        ],
        [
            "From Huffman Require Export WeightTree.",
            "VernacRequire",
            "eb4b440017fe2b87730eb4b43044934cb09064a4"
        ],
        [
            "Require Import ArithRing.",
            "VernacRequire",
            "4bc385370568ddd53384be919634bc0439bf028f"
        ],
        [
            "From Huffman Require Export Ordered.",
            "VernacRequire",
            "77de947c353dd2c96810316f90fdf903390444da"
        ],
        [
            "From Huffman Require Export Prod2List.",
            "VernacRequire",
            "227ffe6e08d07fe10646cad79f2ed49e7688bedb"
        ],
        [
            "Section HeightPred.",
            "VernacBeginSection",
            "ec585ccd67d129ce672b3f74b6fb29316f9236a2"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable f : A -> nat.",
            "VernacAssumption",
            "9f23c668cb9b44da0a7007cf5e6e948fbeb3f99a"
        ],
        [
            "Variable eqA_dec : forall a b : A, {a = b} + {a <> b}.",
            "VernacAssumption",
            "c7dce40a1a1159550fac93e6bff94107f0f6b383"
        ],
        [
            "Inductive height_pred : nat -> list nat -> list (btree A) -> btree A -> Prop := | height_pred_nil : forall (n : nat) (t : btree A), height_pred n (n :: nil) (t :: nil) t | height_pred_node : forall (n : nat) (ln1 ln2 : list nat) (t1 t2 : btree A) (l1 l2 : list (btree A)), height_pred (S n) ln1 l1 t1 -> height_pred (S n) ln2 l2 t2 -> height_pred n (ln1 ++ ln2) (l1 ++ l2) (node t1 t2).",
            "VernacInductive",
            "24d22dc089affd2e123df9a78fcf7ef02445f378"
        ],
        [
            "Hint Resolve height_pred_nil height_pred_node : core.",
            "VernacHints",
            "5d05f18ea7a27fa120bc295412d3854a96df3637"
        ],
        [
            "Theorem height_pred_ordered_cover : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ordered_cover l t.",
            "VernacStartTheoremProof",
            "42f8fb576c970e2864065df4fc170226c0ddf18f"
        ],
        [
            "intros n ln t l H; elim H; simpl in |- *; auto.",
            "VernacExtend",
            "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_not_nil1 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> ln <> nil.",
            "VernacStartTheoremProof",
            "bc21bf8ec4ee868601b772bae77c4027ddbe2b11"
        ],
        [
            "intros n ln t l H; elim H; simpl in |- *; auto.",
            "VernacExtend",
            "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "intros n0 ln1 ln2 t1 t2 l1 l2 H0; case ln1; simpl in |- *; auto.",
            "VernacExtend",
            "27f78f02038a8ac2d9ef58fe0b9f1dee502f818e"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_not_nil2 : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> l <> nil.",
            "VernacStartTheoremProof",
            "aada62d0f63422c4751fc6042e65c2a6601f4be1"
        ],
        [
            "intros n ln t l H; elim H; simpl in |- *; auto.",
            "VernacExtend",
            "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "intros n0 ln1 ln2 t1 t2 l1 l2 H0; case l1; simpl in |- *; auto.",
            "VernacExtend",
            "19092b9e0ceb4f694afc265748e90ecdc3c43bb7"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_length : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> length ln = length l.",
            "VernacStartTheoremProof",
            "cf925f92928e4dad30f6fe4dd203317b6cd76353"
        ],
        [
            "intros n ln t l H; elim H; simpl in |- *; auto.",
            "VernacExtend",
            "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
        ],
        [
            "intros; repeat rewrite length_app; auto with arith.",
            "VernacExtend",
            "e77add7fe381887cdc46c62e67d565af3a2cdff8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_weight : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> n * sum_leaves f t + weight_tree f t = prod2list f ln l.",
            "VernacStartTheoremProof",
            "37632650512a7f11718931ca46961b2ff75c3359"
        ],
        [
            "intros n ln t l H; elim H; simpl in |- *; auto.",
            "VernacExtend",
            "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
        ],
        [
            "intros n0 ln1 ln2 t1 t2 l1 l2 H0 H1 H2 H3.",
            "VernacExtend",
            "d30d50964806e578bae8fc2849e3d5197e890dda"
        ],
        [
            "rewrite prod2list_app; auto with arith.",
            "VernacExtend",
            "04e752553a6042f6d1869b1afb380fd6f9f659dd"
        ],
        [
            "rewrite <- H3; rewrite <- H1; ring.",
            "VernacExtend",
            "c317535cdecfb45c8f169e1b62160878a6349d3f"
        ],
        [
            "apply height_pred_length with (1 := H0); auto.",
            "VernacExtend",
            "2c87c9a316f56730825fc2e4f4e11da44acbf713"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ordered_cover_height_pred : forall (n : nat) (t : btree A) (l : list (btree A)), ordered_cover l t -> exists ln : list nat, height_pred n ln l t.",
            "VernacStartTheoremProof",
            "b7685d56100129dd2ca903c237cc602bd986fe40"
        ],
        [
            "intros n t l H; generalize n; elim H; clear n t l H.",
            "VernacExtend",
            "a4f34c85fed882ea3d9dc177818976538f58c8d2"
        ],
        [
            "intros t l n; exists (n :: nil); auto.",
            "VernacExtend",
            "2b36ec9d13c9d62f459f4440802a47bd3926ce65"
        ],
        [
            "intros t1 t2 l1 l2 l3 H H0 H1 H2 n.",
            "VernacExtend",
            "13642166487ab634f6d778221a881fdc2cf76538"
        ],
        [
            "case (H0 (S n)); intros ln1 HH1.",
            "VernacExtend",
            "06bfded00b9b0eb460c6b7cb2897c639cd02d536"
        ],
        [
            "case (H2 (S n)); intros ln2 HH2.",
            "VernacExtend",
            "a7f1f8e48bc83ec6d87d40338de46a6d4c181b6c"
        ],
        [
            "exists (ln1 ++ ln2); auto.",
            "VernacExtend",
            "3964bbb242b675e3855be7ec2bbf5398c6c5a658"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_larger : forall (n n1 : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> In n1 ln -> n <= n1.",
            "VernacStartTheoremProof",
            "0cce741c9a84551ce95d589b2fb93636b99fee0e"
        ],
        [
            "intros n n1 ln t l H; generalize n1; elim H; clear H n ln t l n1; auto with arith.",
            "VernacExtend",
            "6587ad6d812dd8a884b5dfb253c2c82b0a4272be"
        ],
        [
            "intros n t n1 [H2| H2]; [ rewrite H2 | case H2 ]; auto.",
            "VernacExtend",
            "f612295db22901534e6af72ed0d37c21ebc74a52"
        ],
        [
            "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 n1 H3; apply le_trans with (S n); auto with arith.",
            "VernacExtend",
            "f33f74bb574f694405e0a2ebfef13107dc59195d"
        ],
        [
            "case in_app_or with (1 := H3); auto.",
            "VernacExtend",
            "e175fe972492223aa430aca5c4bf3b21f9e65d5a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_larger_strict : forall (n n1 : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> In n1 ln -> n < n1 \\/ ln = n :: nil /\\ l = t :: nil.",
            "VernacStartTheoremProof",
            "3049221f69c42e3b36874d27b4d695c9370ad0c5"
        ],
        [
            "intros n n1 ln t l H; generalize n1; elim H; clear H n ln t l n1; auto.",
            "VernacExtend",
            "d01335476bef31e5d862778f8e5d6e836292f4f6"
        ],
        [
            "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 n1 H3; left; apply lt_le_trans with (S n); auto.",
            "VernacExtend",
            "fafe2611ecbc9617186e6bf6831d9dde74adb632"
        ],
        [
            "case in_app_or with (1 := H3).",
            "VernacExtend",
            "1c0906c352f6ba5a92b6810035fb0397a77ce231"
        ],
        [
            "intros H4; apply height_pred_larger with (1 := H); auto.",
            "VernacExtend",
            "e6f923950c36e55be9d983c068576882b2ce684d"
        ],
        [
            "intros H4; apply height_pred_larger with (1 := H1); auto.",
            "VernacExtend",
            "a916c96d3db679a7e6bcd12f7d02c9e5d4967a9a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_larger_ex : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> exists n1 : _, In n1 ln /\\ n <= n1.",
            "VernacStartTheoremProof",
            "4fe41eae61517b4108269ad3270bb82db90f57ce"
        ],
        [
            "intros n ln t l H; elim H; clear H n ln t l.",
            "VernacExtend",
            "0a62956ea0b65667eeea911c9990b5d6bf433a1d"
        ],
        [
            "intros n t; exists n; auto with datatypes.",
            "VernacExtend",
            "67b5ebdc2c98f17c3bf811ed0b43b94e723aff6f"
        ],
        [
            "intros n ln1 ln2 t1 t2 l1 l2 H (n1, (HH1, HH2)) H1 H2.",
            "VernacExtend",
            "d337fbd822ad1ae8053b73ba9d28eda06cf61280"
        ],
        [
            "exists n1; auto with datatypes arith.",
            "VernacExtend",
            "e39e91cc30f50a579dc94c6a9568419ee2843271"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma height_pred_disj_larger_aux : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> forall ln1 ln2 a, ln = ln1 ++ a :: ln2 -> (forall n1 : nat, In n1 ln1 -> n1 < a) -> (forall n1 : nat, In n1 ln2 -> n1 <= a) -> (exists ln3 : _, ln2 = a :: ln3) \\/ ln = n :: nil /\\ l = t :: nil.",
            "VernacStartTheoremProof",
            "e78e8bc7416aee8ffe9157efb45f46cd63a87057"
        ],
        [
            "intros n ln t l H; elim H; clear H n ln t l.",
            "VernacExtend",
            "0a62956ea0b65667eeea911c9990b5d6bf433a1d"
        ],
        [
            "intros n t l ln1 ln2 a; case ln1; simpl in |- *; auto.",
            "VernacExtend",
            "f32d727cb2708b28ab8300fe3263d72064bfb5e0"
        ],
        [
            "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 ln0 ln3 a H3 H4 H5.",
            "VernacExtend",
            "aa9b19da85f0f9d156c5869edb58174e86ec7b00"
        ],
        [
            "case app_inv_app with (1 := H3).",
            "VernacExtend",
            "4e621218db1b24f241547d635f54a218cb4ae30d"
        ],
        [
            "intros (ln4, H7); auto.",
            "VernacExtend",
            "459ee580c62b7f29a992812d06b30d8cf1628a83"
        ],
        [
            "cut (ln3 = ln4 ++ ln2); [ intros E1 | apply app_inv_head with (l1 := ln0 ++ a :: nil); repeat rewrite app_ass; simpl in |- *; rewrite <- H3; rewrite H7; rewrite app_ass; auto ].",
            "VernacExtend",
            "ef81733532802177f1bf748cfcb3281d61976b40"
        ],
        [
            "case H0 with (1 := H7); auto; clear H0 H2.",
            "VernacExtend",
            "db86eceb3112221ca95d92eaad77e7b88820cd6e"
        ],
        [
            "intros n1 H8; apply H5; rewrite E1; auto with datatypes.",
            "VernacExtend",
            "97db6faf924860de71389ce880d22a1cbb6d00d5"
        ],
        [
            "intros (ln5, HH); left; exists (ln5 ++ ln2).",
            "VernacExtend",
            "bc571fe1c3a45fbc1bb67611114709f8b3c04cc4"
        ],
        [
            "apply trans_equal with (1 := E1); rewrite HH; auto.",
            "VernacExtend",
            "455b73d2e2fc2fb0e358031697f5938425e49059"
        ],
        [
            "intros (HH1, HH2).",
            "VernacExtend",
            "2ca60d1e5e37402bbb96bf82f8f01e54be811da0"
        ],
        [
            "cut (ln0 = nil /\\ ln4 = nil /\\ a = S n); [ intros (HH3, (HH4, HH5)) | generalize HH1; rewrite H7; case ln0; simpl in |- *; [ case ln4; try (intros; discriminate); (intros HH6; injection HH6; auto) | intros n0 l; case l; simpl in |- *; intros; discriminate ] ].",
            "VernacExtend",
            "f05d58e0115fc1dc4252e34b65dba6488bded73c"
        ],
        [
            "generalize E1 H1; case ln2; simpl in |- *; auto; clear E1 H1.",
            "VernacExtend",
            "77ca457a0592f7e94862205ed64b022472fd354b"
        ],
        [
            "intros E1 H1; case height_pred_not_nil2 with (1 := H1); auto.",
            "VernacExtend",
            "3634e686e7f52ddd29000ff6133a26afb63b4124"
        ],
        [
            "generalize (height_pred_length _ _ _ _ H1); case l2; simpl in |- *; auto; intros; discriminate.",
            "VernacExtend",
            "9e6834813c40bc6bda2f9d34467e4290b8490a45"
        ],
        [
            "intros n0 ln5 E1 H1; case height_pred_larger_strict with (n1 := n0) (1 := H1); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "4691ad8da607062da3f42a163c89a227044c2536"
        ],
        [
            "intros HH6; Contradict HH6; apply le_not_lt; rewrite <- HH5; apply H5; rewrite E1; auto with datatypes.",
            "VernacExtend",
            "512413c1b8708464a0da5d515701cc6edd3d8046"
        ],
        [
            "intros (H8, H9); left; exists (nil (A:=nat)); injection H8.",
            "VernacExtend",
            "a8b88bbbd0b1839feda1cab1bf29a4ac14afdf32"
        ],
        [
            "intros HH7 HH8; rewrite HH5; rewrite <- HH8; rewrite <- HH7; rewrite E1; rewrite HH4; auto.",
            "VernacExtend",
            "1a3d66c8ea588954fbe31641ebfd8f0196133f58"
        ],
        [
            "intros (ln4, H7); auto.",
            "VernacExtend",
            "459ee580c62b7f29a992812d06b30d8cf1628a83"
        ],
        [
            "cut (ln0 = ln1 ++ ln4); [ intros E1 | apply app_inv_tail with (l1 := a :: ln3); rewrite <- H3; rewrite H7; rewrite app_ass; auto ].",
            "VernacExtend",
            "10da254721cca2b70b5bbd531e6f4849a10db53c"
        ],
        [
            "case H2 with (1 := H7); auto.",
            "VernacExtend",
            "ecfd01052b128a4b3a50b57f585c022735720895"
        ],
        [
            "intros n1 H6; apply H4; rewrite E1; auto with datatypes.",
            "VernacExtend",
            "b15b55adc433658760ec9215bf1f169e6d81a6ff"
        ],
        [
            "intros (HH1, HH2).",
            "VernacExtend",
            "2ca60d1e5e37402bbb96bf82f8f01e54be811da0"
        ],
        [
            "cut (ln3 = nil /\\ ln4 = nil /\\ a = S n); [ intros (HH3, (HH4, HH5)) | generalize HH1; rewrite H7; case ln4; simpl in |- *; [ case ln3; try (intros; discriminate); (intros HH6; injection HH6; auto) | intros n0 l; case l; simpl in |- *; intros; discriminate ] ].",
            "VernacExtend",
            "c319bfb9b56b2896d9fc4887d7b6e7448a105645"
        ],
        [
            "case height_pred_larger_ex with (1 := H); auto.",
            "VernacExtend",
            "ea1018edd18525ef390a6ec7b4a1e6186019a395"
        ],
        [
            "intros n1; rewrite <- HH5; intros (HH6, HH7).",
            "VernacExtend",
            "21d0dabc4858ae2da1d2f4085c6f4898f8362fff"
        ],
        [
            "Contradict HH7; apply lt_not_le; apply H4; rewrite E1; auto with datatypes.",
            "VernacExtend",
            "1651f9640fb09e8ee4fb4909555a83d4088ba997"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_disj_larger : forall (n a : nat) (ln1 ln2 : list nat) (t : btree A) (l : list (btree A)), height_pred n (ln1 ++ a :: ln2) l t -> (forall n1 : nat, In n1 ln1 -> n1 < a) -> (forall n1 : nat, In n1 ln2 -> n1 <= a) -> (exists ln3 : _, ln2 = a :: ln3) \\/ (ln1 = nil /\\ a = n /\\ ln2 = nil) /\\ l = t :: nil.",
            "VernacStartTheoremProof",
            "9a94b587c0ecd026c7095726d49f85bbe18de5fe"
        ],
        [
            "intros n a ln1 ln2 t l H H0 H1; case height_pred_disj_larger_aux with (a := a) (ln1 := ln1) (ln2 := ln2) (1 := H); auto; case ln1; simpl in |- *; [ intros (HH1, HH2); injection HH1; auto | intros n0 l1; case l1; simpl in |- *; intuition; try discriminate ].",
            "VernacExtend",
            "e978a06fb8f4f107a857013f954fd8ec342669d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma height_pred_disj_larger2_aux : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> forall ln1 ln2 a, ln = ln1 ++ a :: ln2 -> (exists n1 : _, In n1 ln1 /\\ a <= n1) \\/ (exists n1 : _, In n1 ln2 /\\ a <= n1) \\/ ln = n :: nil /\\ l = t :: nil.",
            "VernacStartTheoremProof",
            "32211864709ae84d11a45f6bf0027f8fb3ac7bfa"
        ],
        [
            "intros n ln t l H; elim H; clear H n ln t l.",
            "VernacExtend",
            "0a62956ea0b65667eeea911c9990b5d6bf433a1d"
        ],
        [
            "intros n t l ln1 ln2 a; case ln1; simpl in |- *; auto.",
            "VernacExtend",
            "f32d727cb2708b28ab8300fe3263d72064bfb5e0"
        ],
        [
            "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 ln0 ln3 a H3.",
            "VernacExtend",
            "29298bd385027b08df94874b2cbe9b752f4bf739"
        ],
        [
            "case app_inv_app with (1 := H3).",
            "VernacExtend",
            "4e621218db1b24f241547d635f54a218cb4ae30d"
        ],
        [
            "intros (ln4, H4); auto.",
            "VernacExtend",
            "840022564c42a4f83a8370b826eb5b23551bfca9"
        ],
        [
            "cut (ln3 = ln4 ++ ln2); [ intros E1 | apply app_inv_head with (l1 := ln0 ++ a :: nil); repeat rewrite app_ass; simpl in |- *; rewrite <- H3; rewrite H4; rewrite app_ass; auto ].",
            "VernacExtend",
            "2e4371446836290e292fc157b39317118e1985ad"
        ],
        [
            "case H0 with (1 := H4); auto; intros [(n1, (HH1, HH2))| (HH1, HH2)]; auto; clear H0 H2.",
            "VernacExtend",
            "6c1912c90374ec7e85c8dfd6f0dd2230155cf547"
        ],
        [
            "right; left; exists n1; split; auto; rewrite E1; auto with datatypes.",
            "VernacExtend",
            "dd4a0d6fbe57b101bd397f8e2da9d7dde4ac276a"
        ],
        [
            "cut (ln0 = nil /\\ ln4 = nil /\\ a = S n); [ intros (HH3, (HH4, HH5)) | generalize HH1; rewrite H4; case ln0; simpl in |- *; [ case ln4; try (intros; discriminate); (intros HH6; injection HH6; auto) | intros n0 l; case l; simpl in |- *; intros; discriminate ] ].",
            "VernacExtend",
            "131f03498ce29bd57af787ced50b1f0456cd171a"
        ],
        [
            "case height_pred_larger_ex with (1 := H1); auto.",
            "VernacExtend",
            "afede2fb1176c6e76a07cae63b626a23ad1cded2"
        ],
        [
            "intros n1; rewrite <- HH5; intros (HM1, HM2).",
            "VernacExtend",
            "27aa2e0a59c18e4db21305b1d6543a72ab63acd5"
        ],
        [
            "right; left; exists n1; split; auto; rewrite E1; auto with datatypes.",
            "VernacExtend",
            "dd4a0d6fbe57b101bd397f8e2da9d7dde4ac276a"
        ],
        [
            "intros (ln4, H4); auto.",
            "VernacExtend",
            "840022564c42a4f83a8370b826eb5b23551bfca9"
        ],
        [
            "cut (ln0 = ln1 ++ ln4); [ intros E1 | apply app_inv_tail with (l1 := a :: ln3); rewrite <- H3; rewrite H4; rewrite app_ass; auto ].",
            "VernacExtend",
            "11bd837002bedee610f7a96b667f5b1a9c0c31c2"
        ],
        [
            "case H2 with (1 := H4); auto; clear H0 H2.",
            "VernacExtend",
            "b394142f00a0b295e033e8c6d6719a6a625bb932"
        ],
        [
            "intros (n1, (HH1, HH2)); left; exists n1; split; auto; rewrite E1; auto with datatypes.",
            "VernacExtend",
            "74e1c129dc787cf0057dcd02a60e68eb5d6fdc38"
        ],
        [
            "intros [HH1| (HH1, HH2)]; auto.",
            "VernacExtend",
            "c5d9a0e84eb13229e5b4a97ea693206911b0a7a0"
        ],
        [
            "cut (ln3 = nil /\\ ln4 = nil /\\ a = S n); [ intros (HH3, (HH4, HH5)) | generalize HH1; rewrite H4; case ln4; simpl in |- *; [ case ln3; try (intros; discriminate); (intros HH6; injection HH6; auto) | intros n0 l; case l; simpl in |- *; intros; discriminate ] ].",
            "VernacExtend",
            "d96fc301026930bec6ad647c129ce38899762870"
        ],
        [
            "case height_pred_larger_ex with (1 := H); auto.",
            "VernacExtend",
            "ea1018edd18525ef390a6ec7b4a1e6186019a395"
        ],
        [
            "intros n1; rewrite <- HH5; intros (HM1, HM2).",
            "VernacExtend",
            "27aa2e0a59c18e4db21305b1d6543a72ab63acd5"
        ],
        [
            "left; exists n1; split; auto; rewrite E1; auto with datatypes.",
            "VernacExtend",
            "c34df458edf8d921959f9e3b8cb24b9fcc3b9e6b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_disj_larger2 : forall (n a : nat) (ln1 ln2 : list nat) (t : btree A) (l : list (btree A)), height_pred n (ln1 ++ a :: ln2) l t -> (exists n1 : _, In n1 ln1 /\\ a <= n1) \\/ (exists n1 : _, In n1 ln2 /\\ a <= n1) \\/ (ln1 = nil /\\ a = n /\\ ln2 = nil) /\\ l = t :: nil.",
            "VernacStartTheoremProof",
            "7151f90ccd1580cc572cc65027b23ac7a41e93cc"
        ],
        [
            "intros n a ln1 ln2 t l H; case height_pred_disj_larger2_aux with (a := a) (ln1 := ln1) (ln2 := ln2) (1 := H); auto.",
            "VernacExtend",
            "89394848b2ddb1212d8cbf976f1608330d4f27c8"
        ],
        [
            "intros [H1| (H1, H2)]; auto.",
            "VernacExtend",
            "7f9552c7907335f76385300e21d50cb1244c20f8"
        ],
        [
            "generalize H1 H2; case ln1; simpl in |- *; [ intros H3; injection H3; auto with datatypes | idtac ].",
            "VernacExtend",
            "473dd994c048d82973188d48ca9071d13ebc5e99"
        ],
        [
            "intros H0 H4 H5; repeat right; auto.",
            "VernacExtend",
            "04c7b3cae27bb3b44d2d0239655357de311675aa"
        ],
        [
            "intros n0 l0; case l0; simpl in |- *; intros; discriminate.",
            "VernacExtend",
            "ca1fea8013ed8452552e47006ab68ecbd4b7a603"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let height_pred_shrink_aux : forall (n : nat) (ln : list nat) (t : btree A) (l : list (btree A)), height_pred n ln l t -> forall l1 l2 ln1 ln2 a b t1 t2, ln = ln1 ++ a :: b :: ln2 -> (forall n1 : nat, In n1 ln1 -> n1 < a) -> (forall n1 : nat, In n1 (b :: ln2) -> n1 <= a) -> length ln1 = length l1 -> l = l1 ++ t1 :: t2 :: l2 -> height_pred n (ln1 ++ pred a :: ln2) (l1 ++ node t1 t2 :: l2) t.",
            "VernacDefinition",
            "09cfc00946ede79bfe92ea980154e03902cd753b"
        ],
        [
            "intros n ln t l H; elim H; clear n ln t l H; auto.",
            "VernacExtend",
            "100bde50ba3d3fe0f2f92f119b07ecb3283dae84"
        ],
        [
            "intros n t l1 l2 ln1 ln2 a b t1 t2; case ln1; try (simpl in |- *; intros; discriminate).",
            "VernacExtend",
            "ac31eda6c506adf8120883219fe2e6b6bd122c6b"
        ],
        [
            "intros n0 l0; case l0; try (simpl in |- *; intros; discriminate).",
            "VernacExtend",
            "35c401fe5064a3f9560a095358cc9f306135b61f"
        ],
        [
            "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 l0 l3 ln0 ln3 a b t0 t3 H3 H4 H5 H6 H7.",
            "VernacExtend",
            "d42bb7100ff6d015e7c5f3d71b76b5bb4a235d1b"
        ],
        [
            "cut (length ln1 = length l1); [ intros Eq2 | apply height_pred_length with (1 := H) ].",
            "VernacExtend",
            "363ffa781c5f8b5c76373a4d435f56d3a31c15ae"
        ],
        [
            "cut (length ln2 = length l2); [ intros Eq3 | apply height_pred_length with (1 := H1) ].",
            "VernacExtend",
            "cdeb9ea87baebeb120a4ee6d59fc0cb42c68a053"
        ],
        [
            "cut (length ln3 = length l3); [ intros Eq4 | apply plus_reg_l with (length (ln0 ++ a :: b :: nil)); rewrite <- length_app; rewrite app_ass; simpl in |- *; rewrite <- H3; repeat rewrite length_app; simpl in |- *; rewrite Eq2; rewrite Eq3; rewrite <- length_app; rewrite H7; repeat rewrite length_app; simpl in |- *; repeat rewrite (fun x y => plus_comm x (S y)); simpl in |- *; rewrite plus_comm; auto ].",
            "VernacExtend",
            "510efaa46def3204c10fae804810409ca650977c"
        ],
        [
            "case app_inv_app2 with (1 := H3); auto.",
            "VernacExtend",
            "d2e266215719e9cbc93a30065c994edbec9b4666"
        ],
        [
            "intros (ln4, Hp1).",
            "VernacExtend",
            "ba8b7ac0d5e796b4dd258dbf670017fe0bc094f4"
        ],
        [
            "cut (ln3 = ln4 ++ ln2); [ intros E1 | apply app_inv_head with (l1 := ln0 ++ a :: b :: nil); repeat rewrite app_ass; simpl in |- *; rewrite <- H3; rewrite Hp1; repeat rewrite app_ass; auto ].",
            "VernacExtend",
            "d9ac500e305e64dcb90fa96cddab464f58ee9006"
        ],
        [
            "replace (ln0 ++ pred a :: ln3) with ((ln0 ++ pred a :: ln4) ++ ln2); [ idtac | rewrite app_ass; rewrite E1; auto ].",
            "VernacExtend",
            "ec586dadc34c32fe735e60c450ddfb1c1202f69b"
        ],
        [
            "cut (l3 = first_n l3 (length ln4) ++ l2).",
            "VernacExtend",
            "f8213742bf0ec4f3634e74438f3e9272afe4ba03"
        ],
        [
            "intros HH; replace (l0 ++ node t0 t3 :: l3) with ((l0 ++ node t0 t3 :: first_n l3 (length ln4)) ++ l2); [ idtac | pattern l3 at 2 in |- *; rewrite HH; rewrite app_ass; auto ].",
            "VernacExtend",
            "00216cc59f6a214bdf714f7732ad9f934a260142"
        ],
        [
            "apply height_pred_node; auto.",
            "VernacExtend",
            "05c594725e1ed93d7011a7bf6bb210234eb0fafe"
        ],
        [
            "apply H0 with (1 := Hp1); auto.",
            "VernacExtend",
            "30c5a5048a7f9225a7850f8b61b3dcd990006178"
        ],
        [
            "intros n1 HH1; (apply H5; auto).",
            "VernacExtend",
            "4ca7c746266b5847deefa6f8604dbdf5d468b04e"
        ],
        [
            "simpl in HH1; case HH1; intros H9; try rewrite H9; auto with datatypes.",
            "VernacExtend",
            "3442493d0ee747eb0d7aedecc826bfdb55d6f655"
        ],
        [
            "rewrite E1; auto with datatypes.",
            "VernacExtend",
            "45b1bddeb9907ab6a68287ceac1fb8a8899d403b"
        ],
        [
            "apply app_inv_tail with (l1 := l2).",
            "VernacExtend",
            "89aa57bf2d82c59e188736eaa180d5a739a70b44"
        ],
        [
            "repeat rewrite app_ass; apply trans_equal with (1 := H7); auto.",
            "VernacExtend",
            "77d455584496f8b8e62bc6f166f8acca8ba2c3a6"
        ],
        [
            "pattern l3 at 1 in |- *; rewrite HH; auto.",
            "VernacExtend",
            "a2b501c14445b7ee0ab078d04c537b1852ab873d"
        ],
        [
            "apply sym_equal; apply trans_equal with (2 := first_n_skip_n_app _ (length ln4) l3).",
            "VernacExtend",
            "d0606b5e0fce14073b6248c74cc473151266ced0"
        ],
        [
            "apply f_equal2 with (f := app (A:=btree A)); auto.",
            "VernacExtend",
            "96a9fa8afb41377780757a8a3e663c3c1fb6afce"
        ],
        [
            "apply trans_equal with (skip_n l2 (length l1 - length l1)).",
            "VernacExtend",
            "29f3f0931aff613b45890442e4f0affafe55733d"
        ],
        [
            "rewrite <- minus_n_n; simpl in |- *; auto.",
            "VernacExtend",
            "80dd2e58878844361e7759b8c6d753d61c76ac61"
        ],
        [
            "rewrite <- skip_n_app1; auto.",
            "VernacExtend",
            "d6b56c02adfb6092f00ae26699c4be727a781ccc"
        ],
        [
            "rewrite H7.",
            "VernacExtend",
            "2b0de906e9dfacfe89c031c2266760d29b5450f6"
        ],
        [
            "rewrite <- Eq2; rewrite Hp1.",
            "VernacExtend",
            "855e0d191a050ff0bdd864e10a56530e965f55f5"
        ],
        [
            "rewrite skip_n_app1.",
            "VernacExtend",
            "487984086e8d19a4ad63bcd000e30d050c198b9f"
        ],
        [
            "rewrite length_app.",
            "VernacExtend",
            "1c046c46b7c1b4b6eec400308b7c849d0b94f9f5"
        ],
        [
            "rewrite H6; rewrite minus_plus; simpl in |- *; auto.",
            "VernacExtend",
            "a8eecbd909c434e959a5d101fdf9ca60f190324d"
        ],
        [
            "rewrite <- H6; rewrite length_app; simpl in |- *; auto with arith.",
            "VernacExtend",
            "f0c34b9e12a978feff72de1a72483940b2cc8ca9"
        ],
        [
            "intros [(ln4, HH)| (HH1, HH2)].",
            "VernacExtend",
            "f7e9067d6a02bc85b5c2e621ad1f7893bd114534"
        ],
        [
            "cut (ln0 = ln1 ++ ln4); [ intros E1 | apply app_inv_tail with (l1 := a :: b :: ln3); rewrite <- H3; rewrite HH; rewrite app_ass; auto ].",
            "VernacExtend",
            "63106c56435bdbeb87236bc079193624e143869f"
        ],
        [
            "cut (l0 = l1 ++ skip_n l0 (length l1)).",
            "VernacExtend",
            "83656cf1696ecd2b00218dd2225859ee430d6417"
        ],
        [
            "intros Eq1; rewrite Eq1; rewrite E1; repeat rewrite app_ass.",
            "VernacExtend",
            "c9eac6d52ae2b9436905441159a8bee42a4a2f2a"
        ],
        [
            "apply height_pred_node; auto.",
            "VernacExtend",
            "05c594725e1ed93d7011a7bf6bb210234eb0fafe"
        ],
        [
            "apply H2 with (b := b); auto.",
            "VernacExtend",
            "3f58e761f0b31dd00b3df1d4188e655c501b1bd7"
        ],
        [
            "intros n1 H8; apply H4; (rewrite E1; auto with datatypes).",
            "VernacExtend",
            "c35e24dd799ef53438ae7fb98a43636c63b9a361"
        ],
        [
            "rewrite skip_n_length; rewrite <- Eq2; rewrite <- H6; rewrite <- skip_n_length; rewrite E1; rewrite skip_n_app2; auto; rewrite skip_n_id; simpl in |- *; auto.",
            "VernacExtend",
            "e5a57f4954a7bacbc3cff0891bff1e7ccfa5e8d5"
        ],
        [
            "apply app_inv_head with (l1 := l1).",
            "VernacExtend",
            "5e042db767497b67fb6b7e24fb2edf359b57b041"
        ],
        [
            "rewrite <- app_ass; rewrite <- Eq1; auto.",
            "VernacExtend",
            "b0752bb7a9dcd6e0fcae6c1710c43591189ac7bb"
        ],
        [
            "apply sym_equal; apply trans_equal with (2 := first_n_skip_n_app _ (length l1) l0).",
            "VernacExtend",
            "3d7d6a40e050755786e5f6bca9d53e8ddab988bf"
        ],
        [
            "apply f_equal2 with (f := app (A:=btree A)); auto.",
            "VernacExtend",
            "96a9fa8afb41377780757a8a3e663c3c1fb6afce"
        ],
        [
            "apply trans_equal with (first_n (l1 ++ l2) (length l1)).",
            "VernacExtend",
            "42f9f865a0b917331731badf138b1d93711c32a8"
        ],
        [
            "rewrite first_n_app1; auto; rewrite <- minus_n_n; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "b35a9964229c28b247c495c0e1be3dcd4491bdb7"
        ],
        [
            "rewrite H7; rewrite first_n_app2; auto.",
            "VernacExtend",
            "86ebf2079460563fe5dc277db8fa23800ee914b2"
        ],
        [
            "rewrite <- H6; rewrite <- Eq2; rewrite E1; rewrite length_app; auto with arith.",
            "VernacExtend",
            "67730c4f7b53a9c11a0d0ba8b3d138e2c20b9595"
        ],
        [
            "rewrite HH1 in H; case height_pred_disj_larger2 with (1 := H); simpl in |- *; auto.",
            "VernacExtend",
            "cea226752b6712441c7d9711b412a17b8adc5b22"
        ],
        [
            "intros (n1, (HH3, HH4)); Contradict HH4; auto with arith.",
            "VernacExtend",
            "2f4a9356da3f868c51d4eafa92d7e5f275b3a12f"
        ],
        [
            "intros [(n1, (HH3, HH4))| ((HH3, (HH4, HH5)), HH6)]; [ case HH3 | idtac ].",
            "VernacExtend",
            "f0b7260c87365f1a7ef003db7b98142296dc6ae2"
        ],
        [
            "case height_pred_larger_strict with (1 := H1) (n1 := b); auto.",
            "VernacExtend",
            "3111933698bf4f31889b1692b55f924108c63377"
        ],
        [
            "rewrite HH2; auto with datatypes.",
            "VernacExtend",
            "f81fd3275e2379a7433df95a7e016d0bc232c647"
        ],
        [
            "rewrite <- HH4; intros HH7; Contradict HH7; apply le_not_lt; auto with arith datatypes.",
            "VernacExtend",
            "7e8ab4b46e7be05adcdb83971831546f6feaf3c9"
        ],
        [
            "intros (H8, H9); rewrite HH4; rewrite HH3; simpl in |- *.",
            "VernacExtend",
            "920e0c02c55ea874d386cc614656cd9cd2d6cab2"
        ],
        [
            "cut (l0 = nil); [ intros HM1; rewrite HM1 | idtac ].",
            "VernacExtend",
            "1b3a655ed524028d95c0bb4c86c5e79e14f04ed0"
        ],
        [
            "cut (ln3 = nil); [ intros HM2; rewrite HM2 | idtac ].",
            "VernacExtend",
            "84625c207ef7aca83981141aed5c32c1ec8f527e"
        ],
        [
            "replace l3 with (nil (A:=btree A)); simpl in |- *; auto.",
            "VernacExtend",
            "1c0e88455e814748960eae5d4276d1be1663c349"
        ],
        [
            "rewrite HH6 in H7; rewrite H9 in H7; rewrite HM1 in H7; simpl in H7; injection H7.",
            "VernacExtend",
            "15ba824596422fb2562c4e99688c7f1226119eae"
        ],
        [
            "intros Ht1 Ht2 Ht3; rewrite Ht2; rewrite Ht3; auto.",
            "VernacExtend",
            "591b4f927d4992a4a0a8f2913006771977d75970"
        ],
        [
            "generalize Eq4; rewrite HM2; case l3; simpl in |- *; auto; intros; discriminate.",
            "VernacExtend",
            "28c61ed25e91a0b95f7dc019ae3870e1c5b863aa"
        ],
        [
            "rewrite HH2 in H8; injection H8; auto.",
            "VernacExtend",
            "43458824c7d102c4d67deec56f6396915a009654"
        ],
        [
            "generalize H6; rewrite HH3; case l0; simpl in |- *; auto; intros; discriminate.",
            "VernacExtend",
            "1a78e310adc40c0988c2919f73640d37baca2101"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_shrink : forall (n a b : nat) (ln1 ln2 : list nat) (t t1 t2 : btree A) (l1 l2 : list (btree A)), height_pred n (ln1 ++ a :: b :: ln2) (l1 ++ t1 :: t2 :: l2) t -> (forall n1 : nat, In n1 ln1 -> n1 < a) -> (forall n1 : nat, In n1 (b :: ln2) -> n1 <= a) -> length ln1 = length l1 -> height_pred n (ln1 ++ pred a :: ln2) (l1 ++ node t1 t2 :: l2) t.",
            "VernacStartTheoremProof",
            "6e52ee3fab4c401002af2e10860c61165cdfb5ed"
        ],
        [
            "intros n a b ln1 ln2 t t1 t2 l1 l2 H H0 H1 H2; apply height_pred_shrink_aux with (1 := H) (b := b); auto.",
            "VernacExtend",
            "47703b4648eafd68683520b976d622fa0222df2a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem height_pred_compute_code : forall (n : nat) (t : btree A), height_pred n (map (fun x => length (snd x) + n) (compute_code t)) (map (fun x => leaf (fst x)) (compute_code t)) t.",
            "VernacStartTheoremProof",
            "835df920ea8b7dd29238f3fd964e36e1e75a14f4"
        ],
        [
            "intros n t; generalize n; elim t; clear t n; simpl in |- *; auto.",
            "VernacExtend",
            "ce8e4ba7d93f6ad68b3b64eed42cac44567053b5"
        ],
        [
            "intros b H b0 H0 n.",
            "VernacExtend",
            "9cab4484f1580c54394bfd6065b614da8ed5ed02"
        ],
        [
            "repeat rewrite map_app.",
            "VernacExtend",
            "b6a6ee1d9a8c82aa32dd632bf20f37a46c6ebb72"
        ],
        [
            "cut (forall (b : bool) l, map (fun x : A * list bool => length (snd x) + n) (map (fun v : A * list bool => let (a1, b1) := v in (a1, b :: b1)) l) = map (fun x : A * list bool => length (snd x) + S n) l); [ intros E1 | idtac ].",
            "VernacExtend",
            "d5985dace32914ac8146fbb1c5b272c0f1a85b71"
        ],
        [
            "cut (forall b l, map (fun x : A * list bool => leaf (fst x)) (map (fun v : A * list bool => let (a1, b1) := v in (a1, b :: b1)) l) = map (fun x : A * list bool => leaf (fst x)) l); [ intros E2 | idtac ].",
            "VernacExtend",
            "f09fe1c8eaac554cc04eb8ab6585a078333dfa5c"
        ],
        [
            "apply height_pred_node; repeat rewrite E1; repeat rewrite E2; auto.",
            "VernacExtend",
            "c6e6a08300ca37facd7381c4dcfb9cc994a58b9d"
        ],
        [
            "intros b1 l; elim l; simpl in |- *; auto.",
            "VernacExtend",
            "80afb638e1d999c66046dcea10ce18c8f6f6f802"
        ],
        [
            "intros a; case a; simpl in |- *; auto.",
            "VernacExtend",
            "28ba63d30187f6bdeff212a2551a486f5d5a3bbc"
        ],
        [
            "intros a0 l0 l1 H1; apply f_equal2 with (f := cons (A:=btree A)); auto.",
            "VernacExtend",
            "8ae8a6b4b6221f9947ba785dde347a99a9c13556"
        ],
        [
            "intros b1 l; elim l; simpl in |- *; auto.",
            "VernacExtend",
            "80afb638e1d999c66046dcea10ce18c8f6f6f802"
        ],
        [
            "intros a; case a; simpl in |- *; auto.",
            "VernacExtend",
            "28ba63d30187f6bdeff212a2551a486f5d5a3bbc"
        ],
        [
            "intros a0 l0 l1 H1; apply f_equal2 with (f := cons (A:=nat)); auto.",
            "VernacExtend",
            "5e9aa66e5bfb28d27db21ce378b71f69bacd7a45"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem weight_tree_compute : forall (m : list A) t, distinct_leaves t -> (forall a : A, f a = number_of_occurrences eqA_dec a m) -> length (encode eqA_dec (compute_code t) m) = weight_tree f t.",
            "VernacStartTheoremProof",
            "b037ff6c50630fd79139814d3b12abd846d09897"
        ],
        [
            "intros m t H0 H.",
            "VernacExtend",
            "2c0d87aea24e34673a17cb78b66fd28490ae9899"
        ],
        [
            "rewrite frequency_length; auto.",
            "VernacExtend",
            "e4596d679ed941c201624caa28051358582a057a"
        ],
        [
            "apply trans_equal with (0 * sum_leaves f t + weight_tree f t); auto.",
            "VernacExtend",
            "6d8b725733f1c447ed7801b0b4b3a20463fad5c6"
        ],
        [
            "rewrite height_pred_weight with (1 := height_pred_compute_code 0 t).",
            "VernacExtend",
            "471468ad244c910009c6b10b45d8cb533dda4dd9"
        ],
        [
            "unfold prod2list in |- *.",
            "VernacExtend",
            "4ef69e2feea46be27ccac71c947179b516506c8b"
        ],
        [
            "rewrite fold_left_eta with (f := fun (a : nat) (b : A * list bool) => a + number_of_occurrences eqA_dec (fst b) m * length (snd b)) (f1 := fun (a : nat) (b : A * list bool) => a + (fun b => f (fst b) * length (snd b)) b); auto.",
            "VernacExtend",
            "a4eae2f462fe52dca3e2a0544271a2e4f3cc1297"
        ],
        [
            "rewrite <- (fold_left_map _ _ (fun a b : nat => a + b) _ 0 (compute_code t) (fun b : A * list bool => f (fst b) * length (snd b))) .",
            "VernacExtend",
            "cfb69228e950782c2066c576669c6a71c4078465"
        ],
        [
            "rewrite fold_left_eta with (f := fun a b : nat => a + b) (f1 := plus); auto.",
            "VernacExtend",
            "4ae84a222892bb067482492b9fc2abf8a403053b"
        ],
        [
            "apply f_equal3 with (f := fold_left (A:=nat) (B:=nat)); auto.",
            "VernacExtend",
            "f7edd8656808af759d28193e36144a91f58933e7"
        ],
        [
            "elim (compute_code t); simpl in |- *; auto.",
            "VernacExtend",
            "182150bf55d1ba56e479704565db330167f1e788"
        ],
        [
            "intros a l H1; apply f_equal2 with (f := cons (A:=nat)); auto with arith.",
            "VernacExtend",
            "21108501478440a022b917a9b7baf6dba7b85404"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply btree_unique_prefix2; auto.",
            "VernacExtend",
            "2b3e1a998a914bc89f9f9e0d83237bf701ef2d35"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End HeightPred.",
            "VernacEndSegment",
            "e60feb1dbd1efedc72d952967433b066fcd411ca"
        ],
        [
            "Arguments height_pred [A].",
            "VernacArguments",
            "cc68e548bde420ad85b7eb8b9322d5dcac7cf06a"
        ],
        [
            "Hint Resolve height_pred_nil height_pred_node : core.",
            "VernacHints",
            "5d05f18ea7a27fa120bc295412d3854a96df3637"
        ]
    ],
    "proofs": [
        {
            "name": "height_pred_ordered_cover",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros n ln t l H; elim H; simpl in |- *; auto.",
                        "VernacExtend",
                        "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_not_nil1",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros n ln t l H; elim H; simpl in |- *; auto.",
                        "VernacExtend",
                        "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "intros n0 ln1 ln2 t1 t2 l1 l2 H0; case ln1; simpl in |- *; auto.",
                        "VernacExtend",
                        "27f78f02038a8ac2d9ef58fe0b9f1dee502f818e"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_not_nil2",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intros n ln t l H; elim H; simpl in |- *; auto.",
                        "VernacExtend",
                        "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "intros n0 ln1 ln2 t1 t2 l1 l2 H0; case l1; simpl in |- *; auto.",
                        "VernacExtend",
                        "19092b9e0ceb4f694afc265748e90ecdc3c43bb7"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_length",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "intros n ln t l H; elim H; simpl in |- *; auto.",
                        "VernacExtend",
                        "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
                    ]
                },
                {
                    "command": [
                        "intros; repeat rewrite length_app; auto with arith.",
                        "VernacExtend",
                        "e77add7fe381887cdc46c62e67d565af3a2cdff8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_weight",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "intros n ln t l H; elim H; simpl in |- *; auto.",
                        "VernacExtend",
                        "7789853d57ff5d86b9f7799566e6fc3bf4d78a08"
                    ]
                },
                {
                    "command": [
                        "intros n0 ln1 ln2 t1 t2 l1 l2 H0 H1 H2 H3.",
                        "VernacExtend",
                        "d30d50964806e578bae8fc2849e3d5197e890dda"
                    ]
                },
                {
                    "command": [
                        "rewrite prod2list_app; auto with arith.",
                        "VernacExtend",
                        "04e752553a6042f6d1869b1afb380fd6f9f659dd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H3; rewrite <- H1; ring.",
                        "VernacExtend",
                        "c317535cdecfb45c8f169e1b62160878a6349d3f"
                    ]
                },
                {
                    "command": [
                        "apply height_pred_length with (1 := H0); auto.",
                        "VernacExtend",
                        "2c87c9a316f56730825fc2e4f4e11da44acbf713"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ordered_cover_height_pred",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "intros n t l H; generalize n; elim H; clear n t l H.",
                        "VernacExtend",
                        "a4f34c85fed882ea3d9dc177818976538f58c8d2"
                    ]
                },
                {
                    "command": [
                        "intros t l n; exists (n :: nil); auto.",
                        "VernacExtend",
                        "2b36ec9d13c9d62f459f4440802a47bd3926ce65"
                    ]
                },
                {
                    "command": [
                        "intros t1 t2 l1 l2 l3 H H0 H1 H2 n.",
                        "VernacExtend",
                        "13642166487ab634f6d778221a881fdc2cf76538"
                    ]
                },
                {
                    "command": [
                        "case (H0 (S n)); intros ln1 HH1.",
                        "VernacExtend",
                        "06bfded00b9b0eb460c6b7cb2897c639cd02d536"
                    ]
                },
                {
                    "command": [
                        "case (H2 (S n)); intros ln2 HH2.",
                        "VernacExtend",
                        "a7f1f8e48bc83ec6d87d40338de46a6d4c181b6c"
                    ]
                },
                {
                    "command": [
                        "exists (ln1 ++ ln2); auto.",
                        "VernacExtend",
                        "3964bbb242b675e3855be7ec2bbf5398c6c5a658"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_larger",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros n n1 ln t l H; generalize n1; elim H; clear H n ln t l n1; auto with arith.",
                        "VernacExtend",
                        "6587ad6d812dd8a884b5dfb253c2c82b0a4272be"
                    ]
                },
                {
                    "command": [
                        "intros n t n1 [H2| H2]; [ rewrite H2 | case H2 ]; auto.",
                        "VernacExtend",
                        "f612295db22901534e6af72ed0d37c21ebc74a52"
                    ]
                },
                {
                    "command": [
                        "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 n1 H3; apply le_trans with (S n); auto with arith.",
                        "VernacExtend",
                        "f33f74bb574f694405e0a2ebfef13107dc59195d"
                    ]
                },
                {
                    "command": [
                        "case in_app_or with (1 := H3); auto.",
                        "VernacExtend",
                        "e175fe972492223aa430aca5c4bf3b21f9e65d5a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_larger_strict",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "intros n n1 ln t l H; generalize n1; elim H; clear H n ln t l n1; auto.",
                        "VernacExtend",
                        "d01335476bef31e5d862778f8e5d6e836292f4f6"
                    ]
                },
                {
                    "command": [
                        "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 n1 H3; left; apply lt_le_trans with (S n); auto.",
                        "VernacExtend",
                        "fafe2611ecbc9617186e6bf6831d9dde74adb632"
                    ]
                },
                {
                    "command": [
                        "case in_app_or with (1 := H3).",
                        "VernacExtend",
                        "1c0906c352f6ba5a92b6810035fb0397a77ce231"
                    ]
                },
                {
                    "command": [
                        "intros H4; apply height_pred_larger with (1 := H); auto.",
                        "VernacExtend",
                        "e6f923950c36e55be9d983c068576882b2ce684d"
                    ]
                },
                {
                    "command": [
                        "intros H4; apply height_pred_larger with (1 := H1); auto.",
                        "VernacExtend",
                        "a916c96d3db679a7e6bcd12f7d02c9e5d4967a9a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_larger_ex",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros n ln t l H; elim H; clear H n ln t l.",
                        "VernacExtend",
                        "0a62956ea0b65667eeea911c9990b5d6bf433a1d"
                    ]
                },
                {
                    "command": [
                        "intros n t; exists n; auto with datatypes.",
                        "VernacExtend",
                        "67b5ebdc2c98f17c3bf811ed0b43b94e723aff6f"
                    ]
                },
                {
                    "command": [
                        "intros n ln1 ln2 t1 t2 l1 l2 H (n1, (HH1, HH2)) H1 H2.",
                        "VernacExtend",
                        "d337fbd822ad1ae8053b73ba9d28eda06cf61280"
                    ]
                },
                {
                    "command": [
                        "exists n1; auto with datatypes arith.",
                        "VernacExtend",
                        "e39e91cc30f50a579dc94c6a9568419ee2843271"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_disj_larger_aux",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "intros n ln t l H; elim H; clear H n ln t l.",
                        "VernacExtend",
                        "0a62956ea0b65667eeea911c9990b5d6bf433a1d"
                    ]
                },
                {
                    "command": [
                        "intros n t l ln1 ln2 a; case ln1; simpl in |- *; auto.",
                        "VernacExtend",
                        "f32d727cb2708b28ab8300fe3263d72064bfb5e0"
                    ]
                },
                {
                    "command": [
                        "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 ln0 ln3 a H3 H4 H5.",
                        "VernacExtend",
                        "aa9b19da85f0f9d156c5869edb58174e86ec7b00"
                    ]
                },
                {
                    "command": [
                        "case app_inv_app with (1 := H3).",
                        "VernacExtend",
                        "4e621218db1b24f241547d635f54a218cb4ae30d"
                    ]
                },
                {
                    "command": [
                        "intros (ln4, H7); auto.",
                        "VernacExtend",
                        "459ee580c62b7f29a992812d06b30d8cf1628a83"
                    ]
                },
                {
                    "command": [
                        "cut (ln3 = ln4 ++ ln2); [ intros E1 | apply app_inv_head with (l1 := ln0 ++ a :: nil); repeat rewrite app_ass; simpl in |- *; rewrite <- H3; rewrite H7; rewrite app_ass; auto ].",
                        "VernacExtend",
                        "ef81733532802177f1bf748cfcb3281d61976b40"
                    ]
                },
                {
                    "command": [
                        "case H0 with (1 := H7); auto; clear H0 H2.",
                        "VernacExtend",
                        "db86eceb3112221ca95d92eaad77e7b88820cd6e"
                    ]
                },
                {
                    "command": [
                        "intros n1 H8; apply H5; rewrite E1; auto with datatypes.",
                        "VernacExtend",
                        "97db6faf924860de71389ce880d22a1cbb6d00d5"
                    ]
                },
                {
                    "command": [
                        "intros (ln5, HH); left; exists (ln5 ++ ln2).",
                        "VernacExtend",
                        "bc571fe1c3a45fbc1bb67611114709f8b3c04cc4"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (1 := E1); rewrite HH; auto.",
                        "VernacExtend",
                        "455b73d2e2fc2fb0e358031697f5938425e49059"
                    ]
                },
                {
                    "command": [
                        "intros (HH1, HH2).",
                        "VernacExtend",
                        "2ca60d1e5e37402bbb96bf82f8f01e54be811da0"
                    ]
                },
                {
                    "command": [
                        "cut (ln0 = nil /\\ ln4 = nil /\\ a = S n); [ intros (HH3, (HH4, HH5)) | generalize HH1; rewrite H7; case ln0; simpl in |- *; [ case ln4; try (intros; discriminate); (intros HH6; injection HH6; auto) | intros n0 l; case l; simpl in |- *; intros; discriminate ] ].",
                        "VernacExtend",
                        "f05d58e0115fc1dc4252e34b65dba6488bded73c"
                    ]
                },
                {
                    "command": [
                        "generalize E1 H1; case ln2; simpl in |- *; auto; clear E1 H1.",
                        "VernacExtend",
                        "77ca457a0592f7e94862205ed64b022472fd354b"
                    ]
                },
                {
                    "command": [
                        "intros E1 H1; case height_pred_not_nil2 with (1 := H1); auto.",
                        "VernacExtend",
                        "3634e686e7f52ddd29000ff6133a26afb63b4124"
                    ]
                },
                {
                    "command": [
                        "generalize (height_pred_length _ _ _ _ H1); case l2; simpl in |- *; auto; intros; discriminate.",
                        "VernacExtend",
                        "9e6834813c40bc6bda2f9d34467e4290b8490a45"
                    ]
                },
                {
                    "command": [
                        "intros n0 ln5 E1 H1; case height_pred_larger_strict with (n1 := n0) (1 := H1); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "4691ad8da607062da3f42a163c89a227044c2536"
                    ]
                },
                {
                    "command": [
                        "intros HH6; Contradict HH6; apply le_not_lt; rewrite <- HH5; apply H5; rewrite E1; auto with datatypes.",
                        "VernacExtend",
                        "512413c1b8708464a0da5d515701cc6edd3d8046"
                    ]
                },
                {
                    "command": [
                        "intros (H8, H9); left; exists (nil (A:=nat)); injection H8.",
                        "VernacExtend",
                        "a8b88bbbd0b1839feda1cab1bf29a4ac14afdf32"
                    ]
                },
                {
                    "command": [
                        "intros HH7 HH8; rewrite HH5; rewrite <- HH8; rewrite <- HH7; rewrite E1; rewrite HH4; auto.",
                        "VernacExtend",
                        "1a3d66c8ea588954fbe31641ebfd8f0196133f58"
                    ]
                },
                {
                    "command": [
                        "intros (ln4, H7); auto.",
                        "VernacExtend",
                        "459ee580c62b7f29a992812d06b30d8cf1628a83"
                    ]
                },
                {
                    "command": [
                        "cut (ln0 = ln1 ++ ln4); [ intros E1 | apply app_inv_tail with (l1 := a :: ln3); rewrite <- H3; rewrite H7; rewrite app_ass; auto ].",
                        "VernacExtend",
                        "10da254721cca2b70b5bbd531e6f4849a10db53c"
                    ]
                },
                {
                    "command": [
                        "case H2 with (1 := H7); auto.",
                        "VernacExtend",
                        "ecfd01052b128a4b3a50b57f585c022735720895"
                    ]
                },
                {
                    "command": [
                        "intros n1 H6; apply H4; rewrite E1; auto with datatypes.",
                        "VernacExtend",
                        "b15b55adc433658760ec9215bf1f169e6d81a6ff"
                    ]
                },
                {
                    "command": [
                        "intros (HH1, HH2).",
                        "VernacExtend",
                        "2ca60d1e5e37402bbb96bf82f8f01e54be811da0"
                    ]
                },
                {
                    "command": [
                        "cut (ln3 = nil /\\ ln4 = nil /\\ a = S n); [ intros (HH3, (HH4, HH5)) | generalize HH1; rewrite H7; case ln4; simpl in |- *; [ case ln3; try (intros; discriminate); (intros HH6; injection HH6; auto) | intros n0 l; case l; simpl in |- *; intros; discriminate ] ].",
                        "VernacExtend",
                        "c319bfb9b56b2896d9fc4887d7b6e7448a105645"
                    ]
                },
                {
                    "command": [
                        "case height_pred_larger_ex with (1 := H); auto.",
                        "VernacExtend",
                        "ea1018edd18525ef390a6ec7b4a1e6186019a395"
                    ]
                },
                {
                    "command": [
                        "intros n1; rewrite <- HH5; intros (HH6, HH7).",
                        "VernacExtend",
                        "21d0dabc4858ae2da1d2f4085c6f4898f8362fff"
                    ]
                },
                {
                    "command": [
                        "Contradict HH7; apply lt_not_le; apply H4; rewrite E1; auto with datatypes.",
                        "VernacExtend",
                        "1651f9640fb09e8ee4fb4909555a83d4088ba997"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_disj_larger",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "intros n a ln1 ln2 t l H H0 H1; case height_pred_disj_larger_aux with (a := a) (ln1 := ln1) (ln2 := ln2) (1 := H); auto; case ln1; simpl in |- *; [ intros (HH1, HH2); injection HH1; auto | intros n0 l1; case l1; simpl in |- *; intuition; try discriminate ].",
                        "VernacExtend",
                        "e978a06fb8f4f107a857013f954fd8ec342669d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_disj_larger2_aux",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "intros n ln t l H; elim H; clear H n ln t l.",
                        "VernacExtend",
                        "0a62956ea0b65667eeea911c9990b5d6bf433a1d"
                    ]
                },
                {
                    "command": [
                        "intros n t l ln1 ln2 a; case ln1; simpl in |- *; auto.",
                        "VernacExtend",
                        "f32d727cb2708b28ab8300fe3263d72064bfb5e0"
                    ]
                },
                {
                    "command": [
                        "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 ln0 ln3 a H3.",
                        "VernacExtend",
                        "29298bd385027b08df94874b2cbe9b752f4bf739"
                    ]
                },
                {
                    "command": [
                        "case app_inv_app with (1 := H3).",
                        "VernacExtend",
                        "4e621218db1b24f241547d635f54a218cb4ae30d"
                    ]
                },
                {
                    "command": [
                        "intros (ln4, H4); auto.",
                        "VernacExtend",
                        "840022564c42a4f83a8370b826eb5b23551bfca9"
                    ]
                },
                {
                    "command": [
                        "cut (ln3 = ln4 ++ ln2); [ intros E1 | apply app_inv_head with (l1 := ln0 ++ a :: nil); repeat rewrite app_ass; simpl in |- *; rewrite <- H3; rewrite H4; rewrite app_ass; auto ].",
                        "VernacExtend",
                        "2e4371446836290e292fc157b39317118e1985ad"
                    ]
                },
                {
                    "command": [
                        "case H0 with (1 := H4); auto; intros [(n1, (HH1, HH2))| (HH1, HH2)]; auto; clear H0 H2.",
                        "VernacExtend",
                        "6c1912c90374ec7e85c8dfd6f0dd2230155cf547"
                    ]
                },
                {
                    "command": [
                        "right; left; exists n1; split; auto; rewrite E1; auto with datatypes.",
                        "VernacExtend",
                        "dd4a0d6fbe57b101bd397f8e2da9d7dde4ac276a"
                    ]
                },
                {
                    "command": [
                        "cut (ln0 = nil /\\ ln4 = nil /\\ a = S n); [ intros (HH3, (HH4, HH5)) | generalize HH1; rewrite H4; case ln0; simpl in |- *; [ case ln4; try (intros; discriminate); (intros HH6; injection HH6; auto) | intros n0 l; case l; simpl in |- *; intros; discriminate ] ].",
                        "VernacExtend",
                        "131f03498ce29bd57af787ced50b1f0456cd171a"
                    ]
                },
                {
                    "command": [
                        "case height_pred_larger_ex with (1 := H1); auto.",
                        "VernacExtend",
                        "afede2fb1176c6e76a07cae63b626a23ad1cded2"
                    ]
                },
                {
                    "command": [
                        "intros n1; rewrite <- HH5; intros (HM1, HM2).",
                        "VernacExtend",
                        "27aa2e0a59c18e4db21305b1d6543a72ab63acd5"
                    ]
                },
                {
                    "command": [
                        "right; left; exists n1; split; auto; rewrite E1; auto with datatypes.",
                        "VernacExtend",
                        "dd4a0d6fbe57b101bd397f8e2da9d7dde4ac276a"
                    ]
                },
                {
                    "command": [
                        "intros (ln4, H4); auto.",
                        "VernacExtend",
                        "840022564c42a4f83a8370b826eb5b23551bfca9"
                    ]
                },
                {
                    "command": [
                        "cut (ln0 = ln1 ++ ln4); [ intros E1 | apply app_inv_tail with (l1 := a :: ln3); rewrite <- H3; rewrite H4; rewrite app_ass; auto ].",
                        "VernacExtend",
                        "11bd837002bedee610f7a96b667f5b1a9c0c31c2"
                    ]
                },
                {
                    "command": [
                        "case H2 with (1 := H4); auto; clear H0 H2.",
                        "VernacExtend",
                        "b394142f00a0b295e033e8c6d6719a6a625bb932"
                    ]
                },
                {
                    "command": [
                        "intros (n1, (HH1, HH2)); left; exists n1; split; auto; rewrite E1; auto with datatypes.",
                        "VernacExtend",
                        "74e1c129dc787cf0057dcd02a60e68eb5d6fdc38"
                    ]
                },
                {
                    "command": [
                        "intros [HH1| (HH1, HH2)]; auto.",
                        "VernacExtend",
                        "c5d9a0e84eb13229e5b4a97ea693206911b0a7a0"
                    ]
                },
                {
                    "command": [
                        "cut (ln3 = nil /\\ ln4 = nil /\\ a = S n); [ intros (HH3, (HH4, HH5)) | generalize HH1; rewrite H4; case ln4; simpl in |- *; [ case ln3; try (intros; discriminate); (intros HH6; injection HH6; auto) | intros n0 l; case l; simpl in |- *; intros; discriminate ] ].",
                        "VernacExtend",
                        "d96fc301026930bec6ad647c129ce38899762870"
                    ]
                },
                {
                    "command": [
                        "case height_pred_larger_ex with (1 := H); auto.",
                        "VernacExtend",
                        "ea1018edd18525ef390a6ec7b4a1e6186019a395"
                    ]
                },
                {
                    "command": [
                        "intros n1; rewrite <- HH5; intros (HM1, HM2).",
                        "VernacExtend",
                        "27aa2e0a59c18e4db21305b1d6543a72ab63acd5"
                    ]
                },
                {
                    "command": [
                        "left; exists n1; split; auto; rewrite E1; auto with datatypes.",
                        "VernacExtend",
                        "c34df458edf8d921959f9e3b8cb24b9fcc3b9e6b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_disj_larger2",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "intros n a ln1 ln2 t l H; case height_pred_disj_larger2_aux with (a := a) (ln1 := ln1) (ln2 := ln2) (1 := H); auto.",
                        "VernacExtend",
                        "89394848b2ddb1212d8cbf976f1608330d4f27c8"
                    ]
                },
                {
                    "command": [
                        "intros [H1| (H1, H2)]; auto.",
                        "VernacExtend",
                        "7f9552c7907335f76385300e21d50cb1244c20f8"
                    ]
                },
                {
                    "command": [
                        "generalize H1 H2; case ln1; simpl in |- *; [ intros H3; injection H3; auto with datatypes | idtac ].",
                        "VernacExtend",
                        "473dd994c048d82973188d48ca9071d13ebc5e99"
                    ]
                },
                {
                    "command": [
                        "intros H0 H4 H5; repeat right; auto.",
                        "VernacExtend",
                        "04c7b3cae27bb3b44d2d0239655357de311675aa"
                    ]
                },
                {
                    "command": [
                        "intros n0 l0; case l0; simpl in |- *; intros; discriminate.",
                        "VernacExtend",
                        "ca1fea8013ed8452552e47006ab68ecbd4b7a603"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_shrink_aux",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "intros n ln t l H; elim H; clear n ln t l H; auto.",
                        "VernacExtend",
                        "100bde50ba3d3fe0f2f92f119b07ecb3283dae84"
                    ]
                },
                {
                    "command": [
                        "intros n t l1 l2 ln1 ln2 a b t1 t2; case ln1; try (simpl in |- *; intros; discriminate).",
                        "VernacExtend",
                        "ac31eda6c506adf8120883219fe2e6b6bd122c6b"
                    ]
                },
                {
                    "command": [
                        "intros n0 l0; case l0; try (simpl in |- *; intros; discriminate).",
                        "VernacExtend",
                        "35c401fe5064a3f9560a095358cc9f306135b61f"
                    ]
                },
                {
                    "command": [
                        "intros n ln1 ln2 t1 t2 l1 l2 H H0 H1 H2 l0 l3 ln0 ln3 a b t0 t3 H3 H4 H5 H6 H7.",
                        "VernacExtend",
                        "d42bb7100ff6d015e7c5f3d71b76b5bb4a235d1b"
                    ]
                },
                {
                    "command": [
                        "cut (length ln1 = length l1); [ intros Eq2 | apply height_pred_length with (1 := H) ].",
                        "VernacExtend",
                        "363ffa781c5f8b5c76373a4d435f56d3a31c15ae"
                    ]
                },
                {
                    "command": [
                        "cut (length ln2 = length l2); [ intros Eq3 | apply height_pred_length with (1 := H1) ].",
                        "VernacExtend",
                        "cdeb9ea87baebeb120a4ee6d59fc0cb42c68a053"
                    ]
                },
                {
                    "command": [
                        "cut (length ln3 = length l3); [ intros Eq4 | apply plus_reg_l with (length (ln0 ++ a :: b :: nil)); rewrite <- length_app; rewrite app_ass; simpl in |- *; rewrite <- H3; repeat rewrite length_app; simpl in |- *; rewrite Eq2; rewrite Eq3; rewrite <- length_app; rewrite H7; repeat rewrite length_app; simpl in |- *; repeat rewrite (fun x y => plus_comm x (S y)); simpl in |- *; rewrite plus_comm; auto ].",
                        "VernacExtend",
                        "510efaa46def3204c10fae804810409ca650977c"
                    ]
                },
                {
                    "command": [
                        "case app_inv_app2 with (1 := H3); auto.",
                        "VernacExtend",
                        "d2e266215719e9cbc93a30065c994edbec9b4666"
                    ]
                },
                {
                    "command": [
                        "intros (ln4, Hp1).",
                        "VernacExtend",
                        "ba8b7ac0d5e796b4dd258dbf670017fe0bc094f4"
                    ]
                },
                {
                    "command": [
                        "cut (ln3 = ln4 ++ ln2); [ intros E1 | apply app_inv_head with (l1 := ln0 ++ a :: b :: nil); repeat rewrite app_ass; simpl in |- *; rewrite <- H3; rewrite Hp1; repeat rewrite app_ass; auto ].",
                        "VernacExtend",
                        "d9ac500e305e64dcb90fa96cddab464f58ee9006"
                    ]
                },
                {
                    "command": [
                        "replace (ln0 ++ pred a :: ln3) with ((ln0 ++ pred a :: ln4) ++ ln2); [ idtac | rewrite app_ass; rewrite E1; auto ].",
                        "VernacExtend",
                        "ec586dadc34c32fe735e60c450ddfb1c1202f69b"
                    ]
                },
                {
                    "command": [
                        "cut (l3 = first_n l3 (length ln4) ++ l2).",
                        "VernacExtend",
                        "f8213742bf0ec4f3634e74438f3e9272afe4ba03"
                    ]
                },
                {
                    "command": [
                        "intros HH; replace (l0 ++ node t0 t3 :: l3) with ((l0 ++ node t0 t3 :: first_n l3 (length ln4)) ++ l2); [ idtac | pattern l3 at 2 in |- *; rewrite HH; rewrite app_ass; auto ].",
                        "VernacExtend",
                        "00216cc59f6a214bdf714f7732ad9f934a260142"
                    ]
                },
                {
                    "command": [
                        "apply height_pred_node; auto.",
                        "VernacExtend",
                        "05c594725e1ed93d7011a7bf6bb210234eb0fafe"
                    ]
                },
                {
                    "command": [
                        "apply H0 with (1 := Hp1); auto.",
                        "VernacExtend",
                        "30c5a5048a7f9225a7850f8b61b3dcd990006178"
                    ]
                },
                {
                    "command": [
                        "intros n1 HH1; (apply H5; auto).",
                        "VernacExtend",
                        "4ca7c746266b5847deefa6f8604dbdf5d468b04e"
                    ]
                },
                {
                    "command": [
                        "simpl in HH1; case HH1; intros H9; try rewrite H9; auto with datatypes.",
                        "VernacExtend",
                        "3442493d0ee747eb0d7aedecc826bfdb55d6f655"
                    ]
                },
                {
                    "command": [
                        "rewrite E1; auto with datatypes.",
                        "VernacExtend",
                        "45b1bddeb9907ab6a68287ceac1fb8a8899d403b"
                    ]
                },
                {
                    "command": [
                        "apply app_inv_tail with (l1 := l2).",
                        "VernacExtend",
                        "89aa57bf2d82c59e188736eaa180d5a739a70b44"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite app_ass; apply trans_equal with (1 := H7); auto.",
                        "VernacExtend",
                        "77d455584496f8b8e62bc6f166f8acca8ba2c3a6"
                    ]
                },
                {
                    "command": [
                        "pattern l3 at 1 in |- *; rewrite HH; auto.",
                        "VernacExtend",
                        "a2b501c14445b7ee0ab078d04c537b1852ab873d"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply trans_equal with (2 := first_n_skip_n_app _ (length ln4) l3).",
                        "VernacExtend",
                        "d0606b5e0fce14073b6248c74cc473151266ced0"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 with (f := app (A:=btree A)); auto.",
                        "VernacExtend",
                        "96a9fa8afb41377780757a8a3e663c3c1fb6afce"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (skip_n l2 (length l1 - length l1)).",
                        "VernacExtend",
                        "29f3f0931aff613b45890442e4f0affafe55733d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- minus_n_n; simpl in |- *; auto.",
                        "VernacExtend",
                        "80dd2e58878844361e7759b8c6d753d61c76ac61"
                    ]
                },
                {
                    "command": [
                        "rewrite <- skip_n_app1; auto.",
                        "VernacExtend",
                        "d6b56c02adfb6092f00ae26699c4be727a781ccc"
                    ]
                },
                {
                    "command": [
                        "rewrite H7.",
                        "VernacExtend",
                        "2b0de906e9dfacfe89c031c2266760d29b5450f6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Eq2; rewrite Hp1.",
                        "VernacExtend",
                        "855e0d191a050ff0bdd864e10a56530e965f55f5"
                    ]
                },
                {
                    "command": [
                        "rewrite skip_n_app1.",
                        "VernacExtend",
                        "487984086e8d19a4ad63bcd000e30d050c198b9f"
                    ]
                },
                {
                    "command": [
                        "rewrite length_app.",
                        "VernacExtend",
                        "1c046c46b7c1b4b6eec400308b7c849d0b94f9f5"
                    ]
                },
                {
                    "command": [
                        "rewrite H6; rewrite minus_plus; simpl in |- *; auto.",
                        "VernacExtend",
                        "a8eecbd909c434e959a5d101fdf9ca60f190324d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H6; rewrite length_app; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "f0c34b9e12a978feff72de1a72483940b2cc8ca9"
                    ]
                },
                {
                    "command": [
                        "intros [(ln4, HH)| (HH1, HH2)].",
                        "VernacExtend",
                        "f7e9067d6a02bc85b5c2e621ad1f7893bd114534"
                    ]
                },
                {
                    "command": [
                        "cut (ln0 = ln1 ++ ln4); [ intros E1 | apply app_inv_tail with (l1 := a :: b :: ln3); rewrite <- H3; rewrite HH; rewrite app_ass; auto ].",
                        "VernacExtend",
                        "63106c56435bdbeb87236bc079193624e143869f"
                    ]
                },
                {
                    "command": [
                        "cut (l0 = l1 ++ skip_n l0 (length l1)).",
                        "VernacExtend",
                        "83656cf1696ecd2b00218dd2225859ee430d6417"
                    ]
                },
                {
                    "command": [
                        "intros Eq1; rewrite Eq1; rewrite E1; repeat rewrite app_ass.",
                        "VernacExtend",
                        "c9eac6d52ae2b9436905441159a8bee42a4a2f2a"
                    ]
                },
                {
                    "command": [
                        "apply height_pred_node; auto.",
                        "VernacExtend",
                        "05c594725e1ed93d7011a7bf6bb210234eb0fafe"
                    ]
                },
                {
                    "command": [
                        "apply H2 with (b := b); auto.",
                        "VernacExtend",
                        "3f58e761f0b31dd00b3df1d4188e655c501b1bd7"
                    ]
                },
                {
                    "command": [
                        "intros n1 H8; apply H4; (rewrite E1; auto with datatypes).",
                        "VernacExtend",
                        "c35e24dd799ef53438ae7fb98a43636c63b9a361"
                    ]
                },
                {
                    "command": [
                        "rewrite skip_n_length; rewrite <- Eq2; rewrite <- H6; rewrite <- skip_n_length; rewrite E1; rewrite skip_n_app2; auto; rewrite skip_n_id; simpl in |- *; auto.",
                        "VernacExtend",
                        "e5a57f4954a7bacbc3cff0891bff1e7ccfa5e8d5"
                    ]
                },
                {
                    "command": [
                        "apply app_inv_head with (l1 := l1).",
                        "VernacExtend",
                        "5e042db767497b67fb6b7e24fb2edf359b57b041"
                    ]
                },
                {
                    "command": [
                        "rewrite <- app_ass; rewrite <- Eq1; auto.",
                        "VernacExtend",
                        "b0752bb7a9dcd6e0fcae6c1710c43591189ac7bb"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply trans_equal with (2 := first_n_skip_n_app _ (length l1) l0).",
                        "VernacExtend",
                        "3d7d6a40e050755786e5f6bca9d53e8ddab988bf"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 with (f := app (A:=btree A)); auto.",
                        "VernacExtend",
                        "96a9fa8afb41377780757a8a3e663c3c1fb6afce"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (first_n (l1 ++ l2) (length l1)).",
                        "VernacExtend",
                        "42f9f865a0b917331731badf138b1d93711c32a8"
                    ]
                },
                {
                    "command": [
                        "rewrite first_n_app1; auto; rewrite <- minus_n_n; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "b35a9964229c28b247c495c0e1be3dcd4491bdb7"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; rewrite first_n_app2; auto.",
                        "VernacExtend",
                        "86ebf2079460563fe5dc277db8fa23800ee914b2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H6; rewrite <- Eq2; rewrite E1; rewrite length_app; auto with arith.",
                        "VernacExtend",
                        "67730c4f7b53a9c11a0d0ba8b3d138e2c20b9595"
                    ]
                },
                {
                    "command": [
                        "rewrite HH1 in H; case height_pred_disj_larger2 with (1 := H); simpl in |- *; auto.",
                        "VernacExtend",
                        "cea226752b6712441c7d9711b412a17b8adc5b22"
                    ]
                },
                {
                    "command": [
                        "intros (n1, (HH3, HH4)); Contradict HH4; auto with arith.",
                        "VernacExtend",
                        "2f4a9356da3f868c51d4eafa92d7e5f275b3a12f"
                    ]
                },
                {
                    "command": [
                        "intros [(n1, (HH3, HH4))| ((HH3, (HH4, HH5)), HH6)]; [ case HH3 | idtac ].",
                        "VernacExtend",
                        "f0b7260c87365f1a7ef003db7b98142296dc6ae2"
                    ]
                },
                {
                    "command": [
                        "case height_pred_larger_strict with (1 := H1) (n1 := b); auto.",
                        "VernacExtend",
                        "3111933698bf4f31889b1692b55f924108c63377"
                    ]
                },
                {
                    "command": [
                        "rewrite HH2; auto with datatypes.",
                        "VernacExtend",
                        "f81fd3275e2379a7433df95a7e016d0bc232c647"
                    ]
                },
                {
                    "command": [
                        "rewrite <- HH4; intros HH7; Contradict HH7; apply le_not_lt; auto with arith datatypes.",
                        "VernacExtend",
                        "7e8ab4b46e7be05adcdb83971831546f6feaf3c9"
                    ]
                },
                {
                    "command": [
                        "intros (H8, H9); rewrite HH4; rewrite HH3; simpl in |- *.",
                        "VernacExtend",
                        "920e0c02c55ea874d386cc614656cd9cd2d6cab2"
                    ]
                },
                {
                    "command": [
                        "cut (l0 = nil); [ intros HM1; rewrite HM1 | idtac ].",
                        "VernacExtend",
                        "1b3a655ed524028d95c0bb4c86c5e79e14f04ed0"
                    ]
                },
                {
                    "command": [
                        "cut (ln3 = nil); [ intros HM2; rewrite HM2 | idtac ].",
                        "VernacExtend",
                        "84625c207ef7aca83981141aed5c32c1ec8f527e"
                    ]
                },
                {
                    "command": [
                        "replace l3 with (nil (A:=btree A)); simpl in |- *; auto.",
                        "VernacExtend",
                        "1c0e88455e814748960eae5d4276d1be1663c349"
                    ]
                },
                {
                    "command": [
                        "rewrite HH6 in H7; rewrite H9 in H7; rewrite HM1 in H7; simpl in H7; injection H7.",
                        "VernacExtend",
                        "15ba824596422fb2562c4e99688c7f1226119eae"
                    ]
                },
                {
                    "command": [
                        "intros Ht1 Ht2 Ht3; rewrite Ht2; rewrite Ht3; auto.",
                        "VernacExtend",
                        "591b4f927d4992a4a0a8f2913006771977d75970"
                    ]
                },
                {
                    "command": [
                        "generalize Eq4; rewrite HM2; case l3; simpl in |- *; auto; intros; discriminate.",
                        "VernacExtend",
                        "28c61ed25e91a0b95f7dc019ae3870e1c5b863aa"
                    ]
                },
                {
                    "command": [
                        "rewrite HH2 in H8; injection H8; auto.",
                        "VernacExtend",
                        "43458824c7d102c4d67deec56f6396915a009654"
                    ]
                },
                {
                    "command": [
                        "generalize H6; rewrite HH3; case l0; simpl in |- *; auto; intros; discriminate.",
                        "VernacExtend",
                        "1a78e310adc40c0988c2919f73640d37baca2101"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_shrink",
            "line_nb": 192,
            "steps": [
                {
                    "command": [
                        "intros n a b ln1 ln2 t t1 t2 l1 l2 H H0 H1 H2; apply height_pred_shrink_aux with (1 := H) (b := b); auto.",
                        "VernacExtend",
                        "47703b4648eafd68683520b976d622fa0222df2a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "height_pred_compute_code",
            "line_nb": 195,
            "steps": [
                {
                    "command": [
                        "intros n t; generalize n; elim t; clear t n; simpl in |- *; auto.",
                        "VernacExtend",
                        "ce8e4ba7d93f6ad68b3b64eed42cac44567053b5"
                    ]
                },
                {
                    "command": [
                        "intros b H b0 H0 n.",
                        "VernacExtend",
                        "9cab4484f1580c54394bfd6065b614da8ed5ed02"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite map_app.",
                        "VernacExtend",
                        "b6a6ee1d9a8c82aa32dd632bf20f37a46c6ebb72"
                    ]
                },
                {
                    "command": [
                        "cut (forall (b : bool) l, map (fun x : A * list bool => length (snd x) + n) (map (fun v : A * list bool => let (a1, b1) := v in (a1, b :: b1)) l) = map (fun x : A * list bool => length (snd x) + S n) l); [ intros E1 | idtac ].",
                        "VernacExtend",
                        "d5985dace32914ac8146fbb1c5b272c0f1a85b71"
                    ]
                },
                {
                    "command": [
                        "cut (forall b l, map (fun x : A * list bool => leaf (fst x)) (map (fun v : A * list bool => let (a1, b1) := v in (a1, b :: b1)) l) = map (fun x : A * list bool => leaf (fst x)) l); [ intros E2 | idtac ].",
                        "VernacExtend",
                        "f09fe1c8eaac554cc04eb8ab6585a078333dfa5c"
                    ]
                },
                {
                    "command": [
                        "apply height_pred_node; repeat rewrite E1; repeat rewrite E2; auto.",
                        "VernacExtend",
                        "c6e6a08300ca37facd7381c4dcfb9cc994a58b9d"
                    ]
                },
                {
                    "command": [
                        "intros b1 l; elim l; simpl in |- *; auto.",
                        "VernacExtend",
                        "80afb638e1d999c66046dcea10ce18c8f6f6f802"
                    ]
                },
                {
                    "command": [
                        "intros a; case a; simpl in |- *; auto.",
                        "VernacExtend",
                        "28ba63d30187f6bdeff212a2551a486f5d5a3bbc"
                    ]
                },
                {
                    "command": [
                        "intros a0 l0 l1 H1; apply f_equal2 with (f := cons (A:=btree A)); auto.",
                        "VernacExtend",
                        "8ae8a6b4b6221f9947ba785dde347a99a9c13556"
                    ]
                },
                {
                    "command": [
                        "intros b1 l; elim l; simpl in |- *; auto.",
                        "VernacExtend",
                        "80afb638e1d999c66046dcea10ce18c8f6f6f802"
                    ]
                },
                {
                    "command": [
                        "intros a; case a; simpl in |- *; auto.",
                        "VernacExtend",
                        "28ba63d30187f6bdeff212a2551a486f5d5a3bbc"
                    ]
                },
                {
                    "command": [
                        "intros a0 l0 l1 H1; apply f_equal2 with (f := cons (A:=nat)); auto.",
                        "VernacExtend",
                        "5e9aa66e5bfb28d27db21ce378b71f69bacd7a45"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "weight_tree_compute",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "intros m t H0 H.",
                        "VernacExtend",
                        "2c0d87aea24e34673a17cb78b66fd28490ae9899"
                    ]
                },
                {
                    "command": [
                        "rewrite frequency_length; auto.",
                        "VernacExtend",
                        "e4596d679ed941c201624caa28051358582a057a"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (0 * sum_leaves f t + weight_tree f t); auto.",
                        "VernacExtend",
                        "6d8b725733f1c447ed7801b0b4b3a20463fad5c6"
                    ]
                },
                {
                    "command": [
                        "rewrite height_pred_weight with (1 := height_pred_compute_code 0 t).",
                        "VernacExtend",
                        "471468ad244c910009c6b10b45d8cb533dda4dd9"
                    ]
                },
                {
                    "command": [
                        "unfold prod2list in |- *.",
                        "VernacExtend",
                        "4ef69e2feea46be27ccac71c947179b516506c8b"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_left_eta with (f := fun (a : nat) (b : A * list bool) => a + number_of_occurrences eqA_dec (fst b) m * length (snd b)) (f1 := fun (a : nat) (b : A * list bool) => a + (fun b => f (fst b) * length (snd b)) b); auto.",
                        "VernacExtend",
                        "a4eae2f462fe52dca3e2a0544271a2e4f3cc1297"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (fold_left_map _ _ (fun a b : nat => a + b) _ 0 (compute_code t) (fun b : A * list bool => f (fst b) * length (snd b))) .",
                        "VernacExtend",
                        "cfb69228e950782c2066c576669c6a71c4078465"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_left_eta with (f := fun a b : nat => a + b) (f1 := plus); auto.",
                        "VernacExtend",
                        "4ae84a222892bb067482492b9fc2abf8a403053b"
                    ]
                },
                {
                    "command": [
                        "apply f_equal3 with (f := fold_left (A:=nat) (B:=nat)); auto.",
                        "VernacExtend",
                        "f7edd8656808af759d28193e36144a91f58933e7"
                    ]
                },
                {
                    "command": [
                        "elim (compute_code t); simpl in |- *; auto.",
                        "VernacExtend",
                        "182150bf55d1ba56e479704565db330167f1e788"
                    ]
                },
                {
                    "command": [
                        "intros a l H1; apply f_equal2 with (f := cons (A:=nat)); auto with arith.",
                        "VernacExtend",
                        "21108501478440a022b917a9b7baf6dba7b85404"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply btree_unique_prefix2; auto.",
                        "VernacExtend",
                        "2b3e1a998a914bc89f9f9e0d83237bf701ef2d35"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}