{
    "filename": "theories/Weight.v",
    "coq_project": "huffman",
    "vernac_cmds": [
        [
            "From Huffman Require Export Code.",
            "VernacRequire",
            "5227f20726b4537018d694126ac5e021d2a55dd0"
        ],
        [
            "From Huffman Require Export Frequency.",
            "VernacRequire",
            "e646295d5130bdb5b3cd1ba630f95092a07693fc"
        ],
        [
            "From Huffman Require Export ISort.",
            "VernacRequire",
            "a319c1dbaf0356c37229de9183bebe5c710b8fd8"
        ],
        [
            "From Huffman Require Export Permutation.",
            "VernacRequire",
            "37394a3a1204d537581ecd2116a50dc029e15045"
        ],
        [
            "From Huffman Require Export UniqueKey.",
            "VernacRequire",
            "3e16aad401d6b127c82271c87b0e0aae2a3a5736"
        ],
        [
            "Section Weight.",
            "VernacBeginSection",
            "11563bc19067dd7143480aa48687718446795178"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable eqA_dec : forall a b : A, {a = b} + {a <> b}.",
            "VernacAssumption",
            "c7dce40a1a1159550fac93e6bff94107f0f6b383"
        ],
        [
            "Theorem fold_plus_split : forall (B : Type) (l : list B) (c : nat) (f : B -> nat), c + fold_left (fun (a : nat) (b : B) => a + f b) l 0 = fold_left (fun (a : nat) (b : B) => a + f b) l c.",
            "VernacStartTheoremProof",
            "e9768609665463893fedaffe8af944bec6b005a2"
        ],
        [
            "intros B l; elim l; simpl in |- *; auto.",
            "VernacExtend",
            "faedd4b2f7fdcc013c3c9143b4b6f482a12dc768"
        ],
        [
            "intros a l0 H c f.",
            "VernacExtend",
            "113432884a967bc1a61f722d9c7a61a8c8243039"
        ],
        [
            "rewrite <- (H (f a)).",
            "VernacExtend",
            "5a43d36e2cc13d6ee8950d1ef540b0cc0b8bd667"
        ],
        [
            "rewrite <- (H (c + f a)).",
            "VernacExtend",
            "168d07746720397f7973ce37912a37721cf63fd5"
        ],
        [
            "rewrite plus_assoc_reverse; auto.",
            "VernacExtend",
            "582076491984298f8d53244e70f41532da9bf705"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem fold_plus_permutation : forall (B : Type) (l1 l2 : list B) (c : nat) (f : B -> nat), permutation l1 l2 -> fold_left (fun (a : nat) (b : B) => a + f b) l1 c = fold_left (fun (a : nat) (b : B) => a + f b) l2 c.",
            "VernacStartTheoremProof",
            "d18ad0255d44a6382e9f9b034bc834eef7ac27ad"
        ],
        [
            "intros B l1 l2 c f H; generalize c f; elim H; clear H l1 l2 c f; simpl in |- *; auto.",
            "VernacExtend",
            "9110c1cba444fe3ada61bbf7561f328d48dc76ca"
        ],
        [
            "intros a b L c f; repeat rewrite <- plus_assoc; rewrite (plus_comm (f a)); auto.",
            "VernacExtend",
            "69c32d7a28ae1fc3eb7c98d07775f25699e55c6a"
        ],
        [
            "intros L1 L2 L3 H H0 H1 H2 c f; apply trans_equal with (1 := H0 c f); auto.",
            "VernacExtend",
            "1b84c0630c7d039f2fe509141caedfe78b646a89"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem length_encode_nId : forall a l1 l n, length (encode eqA_dec ((a, l1) :: l) (id_list a n)) = n * length l1.",
            "VernacStartTheoremProof",
            "148947b73a3822a36f4fc74f48c96778942f9e10"
        ],
        [
            "intros a l1 l n; elim n; simpl in |- *; auto.",
            "VernacExtend",
            "8f1ccacf7c445ed783a490b2ca1621ee5738e639"
        ],
        [
            "intros n0 H; case (eqA_dec a a); auto.",
            "VernacExtend",
            "142485dd76fe5c6526b4512cfcdd857dae7b2f93"
        ],
        [
            "intros e; rewrite length_app; rewrite H; auto.",
            "VernacExtend",
            "b03a5154c2b1f0d1ba2d2a42f65db1d8de65e993"
        ],
        [
            "intros H1; case H1; auto.",
            "VernacExtend",
            "015a69b480d31356ace0a84c5b7204ea84f3fdb3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem frequency_length : forall (m : list A) (c : code A), unique_key c -> length (encode eqA_dec c m) = fold_left (fun a b => a + number_of_occurrences eqA_dec (fst b) m * length (snd b)) c 0.",
            "VernacStartTheoremProof",
            "97a5d4ef947b319aaec827bd043c49815ea9271f"
        ],
        [
            "intros m c; generalize m; elim c; clear c m; simpl in |- *; auto.",
            "VernacExtend",
            "06161c8b12d2b4d1313aef48e769026771952b09"
        ],
        [
            "intros m; elim m; simpl in |- *; auto.",
            "VernacExtend",
            "2fc3f017969b336e40869746966e57ca7316c270"
        ],
        [
            "intros (a, l1) l Rec m H; simpl in |- *.",
            "VernacExtend",
            "c2ae9fffac074007203989edfb70637f6caad3e6"
        ],
        [
            "case (number_of_occurrences_permutation_ex A eqA_dec m a); intros m1 (Hm1, Hm2).",
            "VernacExtend",
            "47ce4f5f496713ffefa4291ae8291de8ae60942a"
        ],
        [
            "rewrite permutation_length with (1 := encode_permutation_val _ eqA_dec _ _ ((a, l1) :: l) Hm1).",
            "VernacExtend",
            "90139d2caf068e4b2d05615d0167273145dceb92"
        ],
        [
            "rewrite encode_app; auto.",
            "VernacExtend",
            "6140a06df3bb1840742df26f5c94210859d578d5"
        ],
        [
            "rewrite length_app; auto.",
            "VernacExtend",
            "a789f06c9d9b4488dfde7d4ec038dbeb048b8a06"
        ],
        [
            "rewrite length_encode_nId.",
            "VernacExtend",
            "17e700093c02b01946880ff544c401b8d23fb2db"
        ],
        [
            "rewrite encode_cons_inv; auto.",
            "VernacExtend",
            "f9e2285ef16a12e79507a291432abad4f619e23d"
        ],
        [
            "rewrite Rec; simpl in |- *; auto.",
            "VernacExtend",
            "6a9c833fdd489d4dbc353ba26eb5350d011f9970"
        ],
        [
            "rewrite <- fold_plus_split with (f := fun b : A * list bool => number_of_occurrences eqA_dec (fst b) m * length (snd b)) (c := number_of_occurrences eqA_dec a m * length l1).",
            "VernacExtend",
            "b5aff918086a325f6f2c546edc79303c5a02bfb1"
        ],
        [
            "apply f_equal2 with (f := plus); auto.",
            "VernacExtend",
            "df2b05fd4759a7bae2a0b591601a15152b036e47"
        ],
        [
            "cut (forall l2, ~ In (a, l2) l).",
            "VernacExtend",
            "fb7e3279ed2be38af69da7ab7f1f58b6611b49b9"
        ],
        [
            "elim l; simpl in |- *; auto.",
            "VernacExtend",
            "efddb6c0bd56fa9e9c6bbcaa47c91115e5628de3"
        ],
        [
            "intros (a2, l2) l3; simpl in |- *; intros Rec1 H4.",
            "VernacExtend",
            "b8b47227bbeb8d8309f99afa1dbb86f33615a9a9"
        ],
        [
            "rewrite <- fold_plus_split with (c := number_of_occurrences eqA_dec a2 m1 * length l2) (f := fun b : A * list bool => number_of_occurrences eqA_dec (fst b) m1 * length (snd b)).",
            "VernacExtend",
            "b093baab46c3f07023925ecb6332180f81f6c95e"
        ],
        [
            "rewrite <- fold_plus_split with (c := number_of_occurrences eqA_dec a2 m * length l2) (f := fun b : A * list bool => number_of_occurrences eqA_dec (fst b) m * length (snd b)).",
            "VernacExtend",
            "0413a44c6e76f3c5ba48f301741482d14a79d8d0"
        ],
        [
            "apply f_equal2 with (f := plus); auto.",
            "VernacExtend",
            "df2b05fd4759a7bae2a0b591601a15152b036e47"
        ],
        [
            "2: apply Rec1; auto.",
            "VernacExtend",
            "14fd928ce6ed0d3afae50324e3b8d7d0b1e2cdda"
        ],
        [
            "2: intros l0; red in |- *; intros H0; case (H4 l0); auto.",
            "VernacExtend",
            "7ff64c35655d5ebbf26dc14b407e5b8b919d7367"
        ],
        [
            "2: intros l2; red in |- *; intros H0; case unique_key_in with (1 := H) (a := a) (b2 := l2); auto.",
            "VernacExtend",
            "9cf3f0610c3450ae4505adb1f0dfc143105f2d0c"
        ],
        [
            "2: apply unique_key_inv with (1 := H); auto.",
            "VernacExtend",
            "449dee2be5f22d03b29ccc10c007341b98061e8c"
        ],
        [
            "apply f_equal2 with (f := mult); auto.",
            "VernacExtend",
            "c1e606f990938d71e18c3d95d2def54a853b43a6"
        ],
        [
            "apply trans_equal with (2 := number_of_occurrences_permutation _ eqA_dec _ _ a2 (permutation_sym _ _ _ Hm1)).",
            "VernacExtend",
            "b59601f0742de008edd5be87f584979f156fdd48"
        ],
        [
            "rewrite number_of_occurrences_app.",
            "VernacExtend",
            "edc18a139fbca26f697466685a8211a3343a424b"
        ],
        [
            "replace (number_of_occurrences eqA_dec a2 (id_list a (number_of_occurrences eqA_dec a m))) with 0; auto.",
            "VernacExtend",
            "ff2a7becb20b50c0956b0b6cae48e1fd41694045"
        ],
        [
            "cut (a2 <> a).",
            "VernacExtend",
            "c48908c28da1c7a0b58890cf63d18b60f22bf939"
        ],
        [
            "elim (number_of_occurrences eqA_dec a m); simpl in |- *; auto.",
            "VernacExtend",
            "7573af0793e60cab7eb49dfebd3b77a64bee8224"
        ],
        [
            "intros n H0 H1; case (eqA_dec a2 a); simpl in |- *; auto.",
            "VernacExtend",
            "eea7e6dc2f53fa559a7a4905c39a362018d80916"
        ],
        [
            "intros e; case H1; auto.",
            "VernacExtend",
            "645a6ad0102d3578c2413717aa7056f519a7558f"
        ],
        [
            "red in |- *; intros H0; case (H4 l2); left; apply f_equal2 with (f := pair (A:=A) (B:=list bool)); auto.",
            "VernacExtend",
            "ac4e54c1f056aab37570f78bf554e46032147afd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition weight m c := length (encode eqA_dec c m).",
            "VernacDefinition",
            "6e1a48a2d30896e1df55f39b1130ccc261318a8c"
        ],
        [
            "Theorem weight_permutation : forall m c1 c2, unique_prefix c1 -> permutation c1 c2 -> weight m c1 = weight m c2.",
            "VernacStartTheoremProof",
            "a770dc3218bb63f2f555869387da4bb26e15e68a"
        ],
        [
            "intros m c1 c2 H H0; unfold weight in |- *.",
            "VernacExtend",
            "13fa1c8786a617a4f8a01ccebd7d2d8a206af401"
        ],
        [
            "apply f_equal with (f := length (A:=bool)).",
            "VernacExtend",
            "9c47ddcdefa888701582c3a8dc88441ebe7e6769"
        ],
        [
            "apply encode_permutation; auto.",
            "VernacExtend",
            "287ae077553ed6d41ddcf1f0eb05cf7af61db085"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition restrict_code (m : list A) (c : code A) : code A := map (fun x => (fst x, find_code eqA_dec (fst x) c)) (frequency_list eqA_dec m).",
            "VernacDefinition",
            "22de854fd4435d581b772798515db23279c562d6"
        ],
        [
            "Theorem ulist_unique_key : forall (A B : Type) (l : list (A * B)), ulist (map (fst (B:=_)) l) -> unique_key l.",
            "VernacStartTheoremProof",
            "8b5ef91c8a276e08083e793e15441c28c23e3241"
        ],
        [
            "intros AA BB l; elim l; simpl in |- *; auto.",
            "VernacExtend",
            "077a8804263d5a638c6124d80bd299b058158a88"
        ],
        [
            "intros a; case a.",
            "VernacExtend",
            "81bdd498856e52e8d5896689c32d4f8fce64751d"
        ],
        [
            "intros a0 b l0 H H0; apply unique_key_cons; auto.",
            "VernacExtend",
            "6e61732dcaa98db5b2ac84894dc6f19dd3672691"
        ],
        [
            "intros b0; red in |- *; intros H1; absurd (In a0 (map (fst (B:=_)) l0)); auto.",
            "VernacExtend",
            "c830da68b19130f8f43af8ff63c3bda70eb1d2d8"
        ],
        [
            "inversion H0; auto.",
            "VernacExtend",
            "12fae341427cd6865cca9c90d8ed75497b95c5c8"
        ],
        [
            "change (In (fst (a0, b0)) (map (fst (B:=_)) l0)) in |- *; auto with datatypes.",
            "VernacExtend",
            "335b8e89c73018fe8c56cf8567a1d0d76eba2ab7"
        ],
        [
            "apply in_map; auto.",
            "VernacExtend",
            "2059af05b402fab7c36eaeb726ab8ef5abc28e20"
        ],
        [
            "apply H; apply ulist_inv with (1 := H0); auto.",
            "VernacExtend",
            "eaf700db6db1f64505e7f322b6481c6a2c83c64d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_code_unique_key : forall (m : list A) (c : code A), unique_key (restrict_code m c).",
            "VernacStartTheoremProof",
            "83af2962bea25ba6d1779d907943a1109b602cb6"
        ],
        [
            "intros m c; apply ulist_unique_key.",
            "VernacExtend",
            "a04ab4eb2aa2c87fe82ad53efbeec50b4fda7f0a"
        ],
        [
            "unfold restrict_code in |- *.",
            "VernacExtend",
            "5db3466aa09bdc6fa696206bcb6e73fc854ecb33"
        ],
        [
            "replace (map (fst (B:=_)) (map (fun x : A * nat => (fst x, find_code eqA_dec (fst x) c)) (frequency_list eqA_dec m))) with (map (fst (B:=_)) (frequency_list eqA_dec m)).",
            "VernacExtend",
            "b3f5eedf70509fae23a7b997fdc32309c350eb75"
        ],
        [
            "apply unique_key_ulist; auto.",
            "VernacExtend",
            "571dec336c3beb4163415700ebc9515c3b083977"
        ],
        [
            "elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "6a6385c2b4a96188e2167b147d357f5a5bcc2299"
        ],
        [
            "intros a l H; apply f_equal2 with (f := cons (A:=A)); auto.",
            "VernacExtend",
            "771acd8e0b9923a80132012aa1135d426bb16da7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_code_in : forall (m : list A) (a : A) (c : code A), In a m -> find_code eqA_dec a c = find_code eqA_dec a (restrict_code m c).",
            "VernacStartTheoremProof",
            "1b938b85d7d0f32237ce52f800d3591ed7deef11"
        ],
        [
            "intros m a c H.",
            "VernacExtend",
            "381237db10f64be6a3404f39042810470125dbbe"
        ],
        [
            "apply sym_equal; apply find_code_correct2; auto.",
            "VernacExtend",
            "32279f583792cc90b2f97e742bd1d12cab4d7d8c"
        ],
        [
            "apply restrict_code_unique_key.",
            "VernacExtend",
            "e583a9930c8542ee75b6b90a2a7edeec6d462f24"
        ],
        [
            "generalize (in_frequency_map _ eqA_dec m a H).",
            "VernacExtend",
            "1a8653ae3f62bd98a74d4a1523fc4c9ab4fedaa5"
        ],
        [
            "unfold restrict_code in |- *; elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "f5037ebc485f5258da8d88fffbdfaa0d2a6ec92f"
        ],
        [
            "intros a0; case a0; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "3eafb4d7b6951b945a65820421884233f6cac575"
        ],
        [
            "intros a1 n l H0 [H1| H1]; try rewrite H1; auto.",
            "VernacExtend",
            "eb35cbab79e1679c12f592f0631e56b64704db1d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_code_encode_length_inc : forall (m m1 : list A) (c : code A), incl m1 m -> encode eqA_dec c m1 = encode eqA_dec (restrict_code m c) m1.",
            "VernacStartTheoremProof",
            "26f5c8b22dbfc0cdc62f04a7e6db3e198713e110"
        ],
        [
            "intros m m1 c; elim m1; simpl in |- *; auto.",
            "VernacExtend",
            "6d6a624ecb4f2c243613eca725c02a544dc69ed8"
        ],
        [
            "intros a l H H0.",
            "VernacExtend",
            "44b7bfa42942133b9b1d286440d30e6a97d59cb7"
        ],
        [
            "apply f_equal2 with (f := app (A:=bool)); auto with datatypes.",
            "VernacExtend",
            "0c99236edb9f2442d4ca6a1add522916ff831f9e"
        ],
        [
            "apply restrict_code_in; auto with datatypes.",
            "VernacExtend",
            "e1f504ead1efe9d895061dda504d419ed18e641d"
        ],
        [
            "apply H; apply incl_tran with (2 := H0); auto with datatypes.",
            "VernacExtend",
            "36501322ffce0c32eed72312b4a85e08c6ffdd14"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem restrict_code_encode_length : forall (m : list A) (c : code A), encode eqA_dec c m = encode eqA_dec (restrict_code m c) m.",
            "VernacStartTheoremProof",
            "0cf65452ec993bbff73f638448900e8f79a4d433"
        ],
        [
            "intros m c; apply restrict_code_encode_length_inc; auto with datatypes.",
            "VernacExtend",
            "e6ae54b193767557f19ad494d72cc4be4db0386b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Weight.",
            "VernacEndSegment",
            "9506bf6407e58e83948d6bb22f843bbf14c34379"
        ],
        [
            "Arguments weight [A].",
            "VernacArguments",
            "ce37a803244677fa1762c15f0044d9f8d859c491"
        ],
        [
            "Arguments restrict_code [A].",
            "VernacArguments",
            "322e5fc29a5303b058a02b6a2d606442de6a90b1"
        ]
    ],
    "proofs": [
        {
            "name": "fold_plus_split",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros B l; elim l; simpl in |- *; auto.",
                        "VernacExtend",
                        "faedd4b2f7fdcc013c3c9143b4b6f482a12dc768"
                    ]
                },
                {
                    "command": [
                        "intros a l0 H c f.",
                        "VernacExtend",
                        "113432884a967bc1a61f722d9c7a61a8c8243039"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (H (f a)).",
                        "VernacExtend",
                        "5a43d36e2cc13d6ee8950d1ef540b0cc0b8bd667"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (H (c + f a)).",
                        "VernacExtend",
                        "168d07746720397f7973ce37912a37721cf63fd5"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_assoc_reverse; auto.",
                        "VernacExtend",
                        "582076491984298f8d53244e70f41532da9bf705"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fold_plus_permutation",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "intros B l1 l2 c f H; generalize c f; elim H; clear H l1 l2 c f; simpl in |- *; auto.",
                        "VernacExtend",
                        "9110c1cba444fe3ada61bbf7561f328d48dc76ca"
                    ]
                },
                {
                    "command": [
                        "intros a b L c f; repeat rewrite <- plus_assoc; rewrite (plus_comm (f a)); auto.",
                        "VernacExtend",
                        "69c32d7a28ae1fc3eb7c98d07775f25699e55c6a"
                    ]
                },
                {
                    "command": [
                        "intros L1 L2 L3 H H0 H1 H2 c f; apply trans_equal with (1 := H0 c f); auto.",
                        "VernacExtend",
                        "1b84c0630c7d039f2fe509141caedfe78b646a89"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "length_encode_nId",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intros a l1 l n; elim n; simpl in |- *; auto.",
                        "VernacExtend",
                        "8f1ccacf7c445ed783a490b2ca1621ee5738e639"
                    ]
                },
                {
                    "command": [
                        "intros n0 H; case (eqA_dec a a); auto.",
                        "VernacExtend",
                        "142485dd76fe5c6526b4512cfcdd857dae7b2f93"
                    ]
                },
                {
                    "command": [
                        "intros e; rewrite length_app; rewrite H; auto.",
                        "VernacExtend",
                        "b03a5154c2b1f0d1ba2d2a42f65db1d8de65e993"
                    ]
                },
                {
                    "command": [
                        "intros H1; case H1; auto.",
                        "VernacExtend",
                        "015a69b480d31356ace0a84c5b7204ea84f3fdb3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "weight_permutation",
            "line_nb": 60,
            "steps": [
                {
                    "command": [
                        "intros m c1 c2 H H0; unfold weight in |- *.",
                        "VernacExtend",
                        "13fa1c8786a617a4f8a01ccebd7d2d8a206af401"
                    ]
                },
                {
                    "command": [
                        "apply f_equal with (f := length (A:=bool)).",
                        "VernacExtend",
                        "9c47ddcdefa888701582c3a8dc88441ebe7e6769"
                    ]
                },
                {
                    "command": [
                        "apply encode_permutation; auto.",
                        "VernacExtend",
                        "287ae077553ed6d41ddcf1f0eb05cf7af61db085"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ulist_unique_key",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "intros AA BB l; elim l; simpl in |- *; auto.",
                        "VernacExtend",
                        "077a8804263d5a638c6124d80bd299b058158a88"
                    ]
                },
                {
                    "command": [
                        "intros a; case a.",
                        "VernacExtend",
                        "81bdd498856e52e8d5896689c32d4f8fce64751d"
                    ]
                },
                {
                    "command": [
                        "intros a0 b l0 H H0; apply unique_key_cons; auto.",
                        "VernacExtend",
                        "6e61732dcaa98db5b2ac84894dc6f19dd3672691"
                    ]
                },
                {
                    "command": [
                        "intros b0; red in |- *; intros H1; absurd (In a0 (map (fst (B:=_)) l0)); auto.",
                        "VernacExtend",
                        "c830da68b19130f8f43af8ff63c3bda70eb1d2d8"
                    ]
                },
                {
                    "command": [
                        "inversion H0; auto.",
                        "VernacExtend",
                        "12fae341427cd6865cca9c90d8ed75497b95c5c8"
                    ]
                },
                {
                    "command": [
                        "change (In (fst (a0, b0)) (map (fst (B:=_)) l0)) in |- *; auto with datatypes.",
                        "VernacExtend",
                        "335b8e89c73018fe8c56cf8567a1d0d76eba2ab7"
                    ]
                },
                {
                    "command": [
                        "apply in_map; auto.",
                        "VernacExtend",
                        "2059af05b402fab7c36eaeb726ab8ef5abc28e20"
                    ]
                },
                {
                    "command": [
                        "apply H; apply ulist_inv with (1 := H0); auto.",
                        "VernacExtend",
                        "eaf700db6db1f64505e7f322b6481c6a2c83c64d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_code_unique_key",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "intros m c; apply ulist_unique_key.",
                        "VernacExtend",
                        "a04ab4eb2aa2c87fe82ad53efbeec50b4fda7f0a"
                    ]
                },
                {
                    "command": [
                        "unfold restrict_code in |- *.",
                        "VernacExtend",
                        "5db3466aa09bdc6fa696206bcb6e73fc854ecb33"
                    ]
                },
                {
                    "command": [
                        "replace (map (fst (B:=_)) (map (fun x : A * nat => (fst x, find_code eqA_dec (fst x) c)) (frequency_list eqA_dec m))) with (map (fst (B:=_)) (frequency_list eqA_dec m)).",
                        "VernacExtend",
                        "b3f5eedf70509fae23a7b997fdc32309c350eb75"
                    ]
                },
                {
                    "command": [
                        "apply unique_key_ulist; auto.",
                        "VernacExtend",
                        "571dec336c3beb4163415700ebc9515c3b083977"
                    ]
                },
                {
                    "command": [
                        "elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "6a6385c2b4a96188e2167b147d357f5a5bcc2299"
                    ]
                },
                {
                    "command": [
                        "intros a l H; apply f_equal2 with (f := cons (A:=A)); auto.",
                        "VernacExtend",
                        "771acd8e0b9923a80132012aa1135d426bb16da7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_code_in",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "intros m a c H.",
                        "VernacExtend",
                        "381237db10f64be6a3404f39042810470125dbbe"
                    ]
                },
                {
                    "command": [
                        "apply sym_equal; apply find_code_correct2; auto.",
                        "VernacExtend",
                        "32279f583792cc90b2f97e742bd1d12cab4d7d8c"
                    ]
                },
                {
                    "command": [
                        "apply restrict_code_unique_key.",
                        "VernacExtend",
                        "e583a9930c8542ee75b6b90a2a7edeec6d462f24"
                    ]
                },
                {
                    "command": [
                        "generalize (in_frequency_map _ eqA_dec m a H).",
                        "VernacExtend",
                        "1a8653ae3f62bd98a74d4a1523fc4c9ab4fedaa5"
                    ]
                },
                {
                    "command": [
                        "unfold restrict_code in |- *; elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "f5037ebc485f5258da8d88fffbdfaa0d2a6ec92f"
                    ]
                },
                {
                    "command": [
                        "intros a0; case a0; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "3eafb4d7b6951b945a65820421884233f6cac575"
                    ]
                },
                {
                    "command": [
                        "intros a1 n l H0 [H1| H1]; try rewrite H1; auto.",
                        "VernacExtend",
                        "eb35cbab79e1679c12f592f0631e56b64704db1d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_code_encode_length_inc",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "intros m m1 c; elim m1; simpl in |- *; auto.",
                        "VernacExtend",
                        "6d6a624ecb4f2c243613eca725c02a544dc69ed8"
                    ]
                },
                {
                    "command": [
                        "intros a l H H0.",
                        "VernacExtend",
                        "44b7bfa42942133b9b1d286440d30e6a97d59cb7"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 with (f := app (A:=bool)); auto with datatypes.",
                        "VernacExtend",
                        "0c99236edb9f2442d4ca6a1add522916ff831f9e"
                    ]
                },
                {
                    "command": [
                        "apply restrict_code_in; auto with datatypes.",
                        "VernacExtend",
                        "e1f504ead1efe9d895061dda504d419ed18e641d"
                    ]
                },
                {
                    "command": [
                        "apply H; apply incl_tran with (2 := H0); auto with datatypes.",
                        "VernacExtend",
                        "36501322ffce0c32eed72312b4a85e08c6ffdd14"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restrict_code_encode_length",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intros m c; apply restrict_code_encode_length_inc; auto with datatypes.",
                        "VernacExtend",
                        "e6ae54b193767557f19ad494d72cc4be4db0386b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}