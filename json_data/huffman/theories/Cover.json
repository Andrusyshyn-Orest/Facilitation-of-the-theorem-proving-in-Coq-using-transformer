{
    "filename": "theories/Cover.v",
    "coq_project": "huffman",
    "vernac_cmds": [
        [
            "From Huffman Require Export BTree.",
            "VernacRequire",
            "636e70830c7ee0ace75bfe9e4fd6a728a7dab71e"
        ],
        [
            "From Huffman Require Export Permutation.",
            "VernacRequire",
            "37394a3a1204d537581ecd2116a50dc029e15045"
        ],
        [
            "Require Import ArithRing.",
            "VernacRequire",
            "4bc385370568ddd53384be919634bc0439bf028f"
        ],
        [
            "Section Cover.",
            "VernacBeginSection",
            "5ae793245fea4c973d81d18c73d9327be953b8d3"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable eqA_dec : forall a b : A, {a = b} + {a <> b}.",
            "VernacAssumption",
            "c7dce40a1a1159550fac93e6bff94107f0f6b383"
        ],
        [
            "Variable empty : A.",
            "VernacAssumption",
            "9bda1a8ce5f65b54cf16331e6806aa4357a2db46"
        ],
        [
            "Inductive cover : list (btree A) -> btree A -> Prop := | cover_one : forall t, cover (t :: nil) t | cover_node : forall l1 l2 t1 t2 t3, permutation l1 (t1 :: t2 :: l2) -> cover (node t1 t2 :: l2) t3 -> cover l1 t3.",
            "VernacInductive",
            "6c7a10af9042c5fdebe1c3c247f1a4989ae02134"
        ],
        [
            "Hint Constructors cover : core.",
            "VernacHints",
            "3d4d00821dc363733575e89c6032cd10fd94b498"
        ],
        [
            "Theorem cover_permutation : forall t l1 l2, cover l1 t -> permutation l1 l2 -> cover l2 t.",
            "VernacStartTheoremProof",
            "d551ecbcb8187fccfc9e6d2d2caca1b8f32d87f2"
        ],
        [
            "intros t l1 l2 H; generalize l2; elim H; clear H t l1 l2; auto.",
            "VernacExtend",
            "772712b533e044c7cd5afa2b128269f7bf66da86"
        ],
        [
            "intros t l2 H; rewrite (permutation_one_inv _ _ _ H); auto.",
            "VernacExtend",
            "9c6ad56b3690a48b424d98176678927c3a266ad8"
        ],
        [
            "intros l1 l2 t1 t2 t3 H H0 H1 l0 H2.",
            "VernacExtend",
            "fc332af6bf885fc8a16f5c3d28e8d37b825252d6"
        ],
        [
            "apply cover_node with (2 := H0).",
            "VernacExtend",
            "99fd46f11f24d776ef4ff0471dfd8e284b3b7abc"
        ],
        [
            "apply permutation_trans with (2 := H).",
            "VernacExtend",
            "f7759d91c72acfe29c5af7cc21d5a86ef5eff3ca"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_cons_l : forall t1 t2 l1, cover l1 t1 -> cover (t2 :: l1) (node t2 t1).",
            "VernacStartTheoremProof",
            "1d650c3a569559044550fe8108ab6ad6c5cdb21e"
        ],
        [
            "intros t1 t2 l1 H; elim H; clear t1 l1 H; simpl in |- *; auto.",
            "VernacExtend",
            "35e1cfedcf0bf63f390e151d02218e98e0388908"
        ],
        [
            "intros t; apply cover_node with (l2 := nil (A:=btree A)) (t1 := t2) (t2 := t); auto.",
            "VernacExtend",
            "13e498adaf239b391a89d8e3c1c52e3def134a63"
        ],
        [
            "intros l1 l2 t1 t0 t3 H H0 H1.",
            "VernacExtend",
            "b04dd25201080361b6b1a58601ff30d7d8499c6e"
        ],
        [
            "apply cover_node with (l2 := t2 :: l2) (t1 := t1) (t2 := t0); auto.",
            "VernacExtend",
            "0df9ea9cc12d4e70e0d4e711a5ad2d44c4c8c931"
        ],
        [
            "apply permutation_trans with (t2 :: t1 :: t0 :: l2); auto.",
            "VernacExtend",
            "9d568bafee90b8e4eca92abf1937f3bc00607c04"
        ],
        [
            "apply permutation_trans with (t1 :: t2 :: t0 :: l2); auto.",
            "VernacExtend",
            "80aa296c4327b978bc11d53344f5232192acd454"
        ],
        [
            "apply cover_permutation with (1 := H1); auto.",
            "VernacExtend",
            "91d14defca5370add428de95f58adedd0c04609b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_not_nil : forall l t, cover l t -> l <> nil.",
            "VernacStartTheoremProof",
            "78b560976ca147a2874a26f4566db1a0d8031eef"
        ],
        [
            "intros l t H; case H; simpl in |- *; auto.",
            "VernacExtend",
            "ceaf5b08dffdb677b7e4a87531b6d41dab05db60"
        ],
        [
            "intros t0; discriminate.",
            "VernacExtend",
            "23e368b318634b5ff862ead4deaa38676685e738"
        ],
        [
            "intros l1 l2 t1 t2 t3 H0 H1; red in |- *; intros H2; absurd (length l1 = length (t1 :: t2 :: l2)); auto.",
            "VernacExtend",
            "0781ada4241a053a3f33593985402c959032dae5"
        ],
        [
            "rewrite H2; simpl in |- *; intros; discriminate.",
            "VernacExtend",
            "9cb0d766182a937467c463eddea885202eabb7cb"
        ],
        [
            "apply permutation_length with (1 := H0); auto.",
            "VernacExtend",
            "3e8c5a353fe49c620512eac2c8b12a785900bba7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem one_cover_ex : forall l : list (btree A), l <> nil -> exists t : btree A, cover l t.",
            "VernacStartTheoremProof",
            "afcf4f41effbe78c3ad0817e0effe35c6b019354"
        ],
        [
            "intros l; elim l; simpl in |- *; auto.",
            "VernacExtend",
            "2bbab84295db0ef661ebb58820998893cacdee26"
        ],
        [
            "intros H; case H; auto.",
            "VernacExtend",
            "0b36977cda16a9ec120d6463bb6c43bcda418cba"
        ],
        [
            "intros a l0; case l0; auto.",
            "VernacExtend",
            "7ab07a1c167d9d38d652981782840c59a56e640b"
        ],
        [
            "intros H H0; exists a; auto.",
            "VernacExtend",
            "2bf6df3be0e4d4ff4fb6fe510f8db0c5e71fe01c"
        ],
        [
            "intros b l1 H H0; case H.",
            "VernacExtend",
            "5197a1b03a8d85cb02bf5595d852d3e7cb986a2d"
        ],
        [
            "red in |- *; intros; discriminate.",
            "VernacExtend",
            "3dc8cab2ad5f5b0f8cdd0c668624cfd3367c3237"
        ],
        [
            "intros x H1; exists (node a x).",
            "VernacExtend",
            "d061d0ae2dd1911ae4c659c6e679a5404fc76e87"
        ],
        [
            "apply cover_cons_l; auto.",
            "VernacExtend",
            "3f822778f7a10159cb88d62671b46341302e37ef"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_in_inb_inb : forall l t1 t2 t3, cover l t1 -> In t2 l -> inb t3 t2 -> inb t3 t1.",
            "VernacStartTheoremProof",
            "34ec2b666756654e7fd6038ed16f3a7aa4135674"
        ],
        [
            "intros l t1 t2 t3 H; generalize t2 t3; elim H; clear H l t1 t2 t3; auto with datatypes.",
            "VernacExtend",
            "31f0c2956bb10817e3b48a62961c7f52ae4d5119"
        ],
        [
            "simpl in |- *; intros t t2 t3 [H1| H1]; auto.",
            "VernacExtend",
            "a94c7f3848c48acf7b8d2a0e50ca64e50720d7e8"
        ],
        [
            "rewrite H1; auto.",
            "VernacExtend",
            "1413124b63144a92c2b8c7e916995d6cd3746a77"
        ],
        [
            "case H1.",
            "VernacExtend",
            "a1cc2c5b7545de9abe2fa54c801395a452f26f10"
        ],
        [
            "intros l1 l2 t1 t2 t3 H H0 H1 t0 t4 H2 H3.",
            "VernacExtend",
            "c1d2d29b382dcb85a4492a394beed3499e24ffec"
        ],
        [
            "cut (In t0 (t1 :: t2 :: l2)); auto.",
            "VernacExtend",
            "42f377ec81de68a4a5d8d359f7f30040dd91ddba"
        ],
        [
            "simpl in |- *; intros [H4| [H4| H4]]; auto with datatypes.",
            "VernacExtend",
            "c18fe5ca8e31faf12f4b851e287352d9f0251292"
        ],
        [
            "apply (H1 (node t1 t2)); simpl in |- *; auto.",
            "VernacExtend",
            "23c56575955eeb44629c99cb5ee13c1fc5a3a8b2"
        ],
        [
            "rewrite H4; auto.",
            "VernacExtend",
            "3d6c1fe7ce13b6f1f00ae467dad6bbd79293ab29"
        ],
        [
            "apply (H1 (node t1 t2)); simpl in |- *; auto.",
            "VernacExtend",
            "23c56575955eeb44629c99cb5ee13c1fc5a3a8b2"
        ],
        [
            "rewrite H4; auto.",
            "VernacExtend",
            "3d6c1fe7ce13b6f1f00ae467dad6bbd79293ab29"
        ],
        [
            "apply (H1 t0); simpl in |- *; auto.",
            "VernacExtend",
            "6845e4920336849afeb289291c56ee615f83302b"
        ],
        [
            "apply permutation_in with (1 := H); simpl in |- *; auto.",
            "VernacExtend",
            "598ad9b9bbfac6535bc587ae0001921de0799717"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_in_inb : forall l t1 t2, cover l t1 -> In t2 l -> inb t2 t1.",
            "VernacStartTheoremProof",
            "43e605a696f6b8d9950b0789f651719cbeff0def"
        ],
        [
            "intros l t1 t2 H H0; apply cover_in_inb_inb with (1 := H) (2 := H0); auto.",
            "VernacExtend",
            "0883c78fcc2cc283262df28d30a1063220210317"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Let cover_inv_leaf_aux : forall t l, cover l t -> forall a : A, t = leaf a -> l = leaf a :: nil.",
            "VernacDefinition",
            "28ad625fda89bd33dee803fe788474637209ebc5"
        ],
        [
            "intros t l H; elim H; simpl in |- *; auto.",
            "VernacExtend",
            "502da982782bf3191c77486785ad21d4d384615d"
        ],
        [
            "intros t0 a H0; apply f_equal2 with (f := cons (A:=btree A)); auto.",
            "VernacExtend",
            "7815cff687caefcb71d8df36e20e3aefcf7f96e8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (H2 a H3); intros; discriminate.",
            "VernacExtend",
            "fc33f335269941a0a57c3fadca1b32cf7338070e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_inv_leaf : forall (a : A) l, cover l (leaf a) -> l = leaf a :: nil.",
            "VernacStartTheoremProof",
            "c0be34fe925e3cb36924be9e9b6d4b6868d03d35"
        ],
        [
            "intros a l H; (apply cover_inv_leaf_aux with (t := leaf a); auto).",
            "VernacExtend",
            "c7dc96eecd97c2693c2292dca1a349f12119cde5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_one_inv : forall t1 t2, cover (t1 :: nil) t2 -> t1 = t2.",
            "VernacStartTheoremProof",
            "ceedd34b7e7c60015d81b07883fda5e25fc27535"
        ],
        [
            "intros t1 t2 H; inversion H; auto.",
            "VernacExtend",
            "8b40d0ff357463980117434ba7904da22477db33"
        ],
        [
            "absurd (length (t1 :: nil) = length (t0 :: t3 :: l2)).",
            "VernacExtend",
            "ac21b79060dd061960beea23fc8efa47c66a0fbc"
        ],
        [
            "simpl in |- *; intros; discriminate.",
            "VernacExtend",
            "3d59504195c7deca6b10553f120fad45a6155eb6"
        ],
        [
            "apply permutation_length with (1 := H0); auto.",
            "VernacExtend",
            "3e8c5a353fe49c620512eac2c8b12a785900bba7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cover_inv_app_aux : forall t t1 t2 l, cover l t -> t = node t1 t2 -> l = node t1 t2 :: nil \\/ (exists l1 : _, (exists l2 : _, (cover l1 t1 /\\ cover l2 t2) /\\ permutation l (l1 ++ l2))).",
            "VernacStartTheoremProof",
            "057974ba8b88851ce4fed7f0674de14383cf914a"
        ],
        [
            "intros t t1 t2 l H; elim H.",
            "VernacExtend",
            "d36a4415d44ac75172b854641c657a9045c36480"
        ],
        [
            "intros t0 Ht0; rewrite Ht0; auto with datatypes.",
            "VernacExtend",
            "62ba6329655ec5949c2c3677069e3fbdf13ad6be"
        ],
        [
            "intros l1 l2 t0 t3 t4 H0 H1 H2 H3; right.",
            "VernacExtend",
            "10dded668b67b1af9316b8ff5259043c2d7a79fb"
        ],
        [
            "case H2; auto.",
            "VernacExtend",
            "877506702eca45f9d52e339649864010a8b18e82"
        ],
        [
            "intros H4.",
            "VernacExtend",
            "142447ea7bb5f7d87b7f5d3d866f877f7448eb75"
        ],
        [
            "exists (t1 :: nil); exists (t2 :: nil); simpl in |- *; repeat (split; auto).",
            "VernacExtend",
            "7998316d6ba8eb6e0e4afe0eb28c322ec246d42e"
        ],
        [
            "injection H4; intros H5 H6 H7; rewrite <- H5; rewrite <- H6; rewrite <- H7; auto.",
            "VernacExtend",
            "33836ce61be43358649c26cb34c46f5e45dcbe75"
        ],
        [
            "clear H2 H3; intros (l3, (l4, ((Hl1, Hl2), Hl3))).",
            "VernacExtend",
            "bc2e4bfe5c8bdf341f407f0d24b111b811f9242e"
        ],
        [
            "case (in_app_or l3 l4 (node t0 t3)).",
            "VernacExtend",
            "7876deef4c7e471875595d78f0301249219670a9"
        ],
        [
            "apply permutation_in with (1 := Hl3); auto with datatypes.",
            "VernacExtend",
            "09e4a015bb11ade4e11f0f64223123d21813f2df"
        ],
        [
            "intros H2; case in_ex_app with (1 := H2).",
            "VernacExtend",
            "3f117643d342cfdef9b554811ca3376e12a46ba1"
        ],
        [
            "intros l5 (l6, Hl5).",
            "VernacExtend",
            "78fbdacc867f7f6e8f5e84a44f92f561bc85ae55"
        ],
        [
            "exists (t0 :: t3 :: l5 ++ l6); exists l4; repeat (split; auto).",
            "VernacExtend",
            "9d1cbb5419026c2b806cbef9bbb32560c25ffc4e"
        ],
        [
            "apply cover_node with (l2 := l5 ++ l6) (t1 := t0) (t2 := t3); auto.",
            "VernacExtend",
            "8ca175ead5b8bbb16e9fe615f90fbf7f002135db"
        ],
        [
            "apply cover_permutation with (1 := Hl1).",
            "VernacExtend",
            "3b393c1b792b91017132929da8252db98eed8a7c"
        ],
        [
            "rewrite Hl5.",
            "VernacExtend",
            "20594829cfc0110b637928a4e7955bf433c65b70"
        ],
        [
            "apply permutation_trans with (node t0 t3 :: l6 ++ l5); auto.",
            "VernacExtend",
            "29d146974b02657097643d6cb6ee5a06a3cc50e7"
        ],
        [
            "apply (permutation_app_swap _ l5 (node t0 t3 :: l6)).",
            "VernacExtend",
            "0d889d6baed32aaabee4be7de1adf5070335172c"
        ],
        [
            "apply permutation_trans with (1 := H0).",
            "VernacExtend",
            "af3e72e42d8c5bc6c8067ffb3b969c87f25334de"
        ],
        [
            "simpl in |- *; repeat apply permutation_skip.",
            "VernacExtend",
            "bde98b9c263ac66ced8826a611226f130bae5b10"
        ],
        [
            "apply permutation_inv with (a := node t0 t3).",
            "VernacExtend",
            "4db0f23c3c06e3d43cfb6f83036409c1f1e41bc0"
        ],
        [
            "apply permutation_trans with (1 := Hl3).",
            "VernacExtend",
            "f3b6968622fe456984a100384cee4818a9c72d0f"
        ],
        [
            "rewrite Hl5; auto.",
            "VernacExtend",
            "2a692685693a0b904cba70644a89d3fc9c993364"
        ],
        [
            "change (permutation ((l5 ++ node t0 t3 :: l6) ++ l4) ((node t0 t3 :: l5 ++ l6) ++ l4)) in |- *.",
            "VernacExtend",
            "309ee2349509b547257f3a3aacad12990602b42d"
        ],
        [
            "apply permutation_app_comp; auto.",
            "VernacExtend",
            "66187756dd15e81b5f4358c8d3ab79b93eed1276"
        ],
        [
            "apply permutation_trans with ((node t0 t3 :: l6) ++ l5); auto.",
            "VernacExtend",
            "5069a1bf5321ae37df2c15d7798831c97b0fa184"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "intros H2; case in_ex_app with (1 := H2).",
            "VernacExtend",
            "3f117643d342cfdef9b554811ca3376e12a46ba1"
        ],
        [
            "intros l5 (l6, Hl5).",
            "VernacExtend",
            "78fbdacc867f7f6e8f5e84a44f92f561bc85ae55"
        ],
        [
            "exists l3; exists (t0 :: t3 :: l5 ++ l6); repeat (split; auto).",
            "VernacExtend",
            "7725b1322e48e6c7a9250dc1cc25c02af489061d"
        ],
        [
            "apply cover_node with (l2 := l5 ++ l6) (t1 := t0) (t2 := t3); auto.",
            "VernacExtend",
            "8ca175ead5b8bbb16e9fe615f90fbf7f002135db"
        ],
        [
            "apply cover_permutation with (1 := Hl2).",
            "VernacExtend",
            "0050a41e1f55c473fac8ab6ce8846b37c3c188b0"
        ],
        [
            "rewrite Hl5.",
            "VernacExtend",
            "20594829cfc0110b637928a4e7955bf433c65b70"
        ],
        [
            "apply permutation_trans with (node t0 t3 :: l6 ++ l5); auto.",
            "VernacExtend",
            "29d146974b02657097643d6cb6ee5a06a3cc50e7"
        ],
        [
            "apply (permutation_app_swap _ l5 (node t0 t3 :: l6)).",
            "VernacExtend",
            "0d889d6baed32aaabee4be7de1adf5070335172c"
        ],
        [
            "apply permutation_trans with (1 := H0).",
            "VernacExtend",
            "af3e72e42d8c5bc6c8067ffb3b969c87f25334de"
        ],
        [
            "apply permutation_trans with ((t0 :: t3 :: l5 ++ l6) ++ l3); auto.",
            "VernacExtend",
            "db60bd5315af3c3ba4c11a0521d090ef304b377e"
        ],
        [
            "simpl in |- *; repeat apply permutation_skip.",
            "VernacExtend",
            "bde98b9c263ac66ced8826a611226f130bae5b10"
        ],
        [
            "apply permutation_inv with (a := node t0 t3).",
            "VernacExtend",
            "4db0f23c3c06e3d43cfb6f83036409c1f1e41bc0"
        ],
        [
            "apply permutation_trans with (1 := Hl3).",
            "VernacExtend",
            "f3b6968622fe456984a100384cee4818a9c72d0f"
        ],
        [
            "rewrite Hl5.",
            "VernacExtend",
            "20594829cfc0110b637928a4e7955bf433c65b70"
        ],
        [
            "apply permutation_trans with ((l5 ++ node t0 t3 :: l6) ++ l3); auto.",
            "VernacExtend",
            "cdb7785b65401ea109a06a84ad5569f2c3606c31"
        ],
        [
            "change (permutation ((l5 ++ node t0 t3 :: l6) ++ l3) ((node t0 t3 :: l5 ++ l6) ++ l3)) in |- *; auto.",
            "VernacExtend",
            "e7e937fa1935792d049fa43c3575beb2d7b6761d"
        ],
        [
            "apply permutation_app_comp; auto.",
            "VernacExtend",
            "66187756dd15e81b5f4358c8d3ab79b93eed1276"
        ],
        [
            "apply permutation_trans with ((node t0 t3 :: l6) ++ l5); auto.",
            "VernacExtend",
            "5069a1bf5321ae37df2c15d7798831c97b0fa184"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_inv_app : forall t1 t2 l, cover l (node t1 t2) -> l = node t1 t2 :: nil \\/ (exists l1 : _, (exists l2 : _, (cover l1 t1 /\\ cover l2 t2) /\\ permutation l (l1 ++ l2))).",
            "VernacStartTheoremProof",
            "c5493ad27c829abd0039d697060448cf2dfdd584"
        ],
        [
            "intros t1 t2 l H; apply cover_inv_app_aux with (t := node t1 t2); auto.",
            "VernacExtend",
            "3d6d62389638eca102ef9f4a5c5c824f6675e78a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_app : forall t1 t2 l1 l2, cover l1 t1 -> cover l2 t2 -> cover (l1 ++ l2) (node t1 t2).",
            "VernacStartTheoremProof",
            "1f1573f21de6f4df1076f58bde9890f0262512af"
        ],
        [
            "intros t1 t2 l1 l2 H1; generalize t2 l2; elim H1; clear t1 t2 l1 l2 H1; simpl in |- *; auto.",
            "VernacExtend",
            "c2c4161da498b85f6bffd3747a8313b231f2b096"
        ],
        [
            "intros t t2 l2 H; apply cover_cons_l; auto.",
            "VernacExtend",
            "6a2a6e1ba998f3f82ccb7d6b9c346c140909abe5"
        ],
        [
            "intros l1 l2 t1 t2 t3 H H0 H1 t0 l0 H2.",
            "VernacExtend",
            "71735595a1690a3e1b93b6f82ec7fa455a862b83"
        ],
        [
            "apply cover_node with (l2 := l2 ++ l0) (t1 := t1) (t2 := t2); auto.",
            "VernacExtend",
            "89c6d199ec6b53a25a3cc22dc13404b58ecc4fdf"
        ],
        [
            "apply permutation_trans with ((t1 :: t2 :: l2) ++ l0); auto.",
            "VernacExtend",
            "1a38b6a3926aad0273bb8513a7b759fa421adde9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_number_of_nodes : forall t l, cover l t -> number_of_nodes t = fold_left (fun x y => x + number_of_nodes y) l 0 + pred (length l).",
            "VernacStartTheoremProof",
            "fb090fd605126b8143a078b94a209a9c8568742e"
        ],
        [
            "intros t l H; elim H; clear H t l; simpl in |- *; auto.",
            "VernacExtend",
            "7f949264a8240eb5e2f5e0beea72ece17da07106"
        ],
        [
            "intros l1 l2 t1 t2 t3 H H0 H1.",
            "VernacExtend",
            "70992840af9c9316c6fc19f82b076f578da6e268"
        ],
        [
            "apply trans_equal with (1 := H1).",
            "VernacExtend",
            "cc69ec7b2c9feffd93cd81bd7db163a8dc84e0bc"
        ],
        [
            "rewrite fold_left_permutation with (2 := H); simpl in |- *; auto.",
            "VernacExtend",
            "9528da1dcbd43629de22cb952e356c506572d3f9"
        ],
        [
            "rewrite permutation_length with (1 := H); simpl in |- *; auto.",
            "VernacExtend",
            "109065d77d93bafc1ad6604e6e9a18a0411c8108"
        ],
        [
            "rewrite fold_left_init with (h := S); simpl in |- *; auto.",
            "VernacExtend",
            "d6a54e9140a7ffb292e249f88383dfc9f4203abe"
        ],
        [
            "intros a b1 b2; repeat rewrite plus_assoc_reverse.",
            "VernacExtend",
            "ed3d0b714723b989a7af8d387b5b070ff208a33d"
        ],
        [
            "apply f_equal2 with (f := plus); auto; apply plus_comm.",
            "VernacExtend",
            "66c16327a741f635713a3934eaec7e2298a5d47b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint all_cover_aux (l : list (btree A)) (n : nat) {struct n} : list (btree A) := match n with | O => nil | S n1 => flat_map (fun l1 => match l1 with | nil => nil | a :: nil => a :: nil | a :: b :: l2 => all_cover_aux (node a b :: l2) n1 end) (all_permutations l) end.",
            "VernacFixpoint",
            "d057187b42c00f8b1f15b7b45e292fae0107ff31"
        ],
        [
            "Definition all_cover l := all_cover_aux l (length l).",
            "VernacDefinition",
            "4fddd0cff3b0dc0481a13fa0047e5a573d84119a"
        ],
        [
            "Theorem all_cover_aux_cover : forall (n : nat) l t, n = length l -> In t (all_cover_aux l n) -> cover l t.",
            "VernacStartTheoremProof",
            "ba4995ad14943c9fc5bbf58a3a297e72ea4517ce"
        ],
        [
            "intros n; elim n; simpl in |- *; auto.",
            "VernacExtend",
            "4c8db1b39c3be89d951a6596eac36325adb07903"
        ],
        [
            "intros l t H H0; elim H0.",
            "VernacExtend",
            "8ce2d568ed72d334cb3d8073df98a89925cb90d3"
        ],
        [
            "intros n0 H l t H0 H1.",
            "VernacExtend",
            "dc1bc07936d9929700e704ca1e9fa9788fdf7a4e"
        ],
        [
            "case in_flat_map_ex with (1 := H1); clear H1.",
            "VernacExtend",
            "05ef56ed27326a5522a117d108401c1c932ec3fe"
        ],
        [
            "intros x; case x; clear x.",
            "VernacExtend",
            "59a5488c1273c540ebb57d3d443b93d3e0f54a3d"
        ],
        [
            "simpl in |- *; intros (H1, H2); case H2.",
            "VernacExtend",
            "228d9a6c07b0069e3ae19c30d6fa818bb0cbb03e"
        ],
        [
            "intros b x; case x; clear x.",
            "VernacExtend",
            "4e6b48800e8006958fccf5f1a2f63f439d137f04"
        ],
        [
            "simpl in |- *; intros (H1, [H2| H2]).",
            "VernacExtend",
            "df48083c536936e8d4e23ab2f3173c61e0e98760"
        ],
        [
            "rewrite <- H2.",
            "VernacExtend",
            "c204509e5e85cb1396c425732210ff127ac38a7b"
        ],
        [
            "rewrite permutation_one_inv with (a := b) (l := l); auto.",
            "VernacExtend",
            "c59c69b4ec6f7748493614d5325722702d57f183"
        ],
        [
            "apply all_permutations_permutation; auto.",
            "VernacExtend",
            "fc3c4a04a20178079985b4c11a789bca9e91eb73"
        ],
        [
            "case H2.",
            "VernacExtend",
            "6d8aa23ad9a74ffd5f130abeb5f7a9478634f2c5"
        ],
        [
            "intros b1 l1 (H1, H2).",
            "VernacExtend",
            "62241f308badf88687d1065b13a229d91185e4fe"
        ],
        [
            "apply cover_node with (l2 := l1) (t1 := b) (t2 := b1); auto.",
            "VernacExtend",
            "0223fb708c3208467691a0594bd08c93db12e66a"
        ],
        [
            "apply permutation_sym; apply all_permutations_permutation; auto.",
            "VernacExtend",
            "524f5192535ccd6a28a36dc6849b675e40ebf258"
        ],
        [
            "apply H; auto.",
            "VernacExtend",
            "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
        ],
        [
            "apply eq_add_S; apply trans_equal with (1 := H0).",
            "VernacExtend",
            "84cf06d3ed070bfbc01face6259d6ffecfc5921d"
        ],
        [
            "apply trans_equal with (length (b :: b1 :: l1)); auto.",
            "VernacExtend",
            "1ca91fdd6b3c38bf1af734a530b1e7788a5b286d"
        ],
        [
            "apply permutation_length.",
            "VernacExtend",
            "19069cdecf6a7ed4540a5655d29fcbbfbebbc980"
        ],
        [
            "apply permutation_sym; apply all_permutations_permutation; auto.",
            "VernacExtend",
            "524f5192535ccd6a28a36dc6849b675e40ebf258"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem all_cover_cover : forall l t, In t (all_cover l) -> cover l t.",
            "VernacStartTheoremProof",
            "5ca69b5cdab23dbfadebb1c75ecb934fc85269a3"
        ],
        [
            "intros l t H; apply all_cover_aux_cover with (n := length l); auto.",
            "VernacExtend",
            "2ae8154a86cac5e3d277e5bc8fcef796c09b48d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_all_cover_aux : forall (n : nat) l t, n = length l -> cover l t -> In t (all_cover_aux l n).",
            "VernacStartTheoremProof",
            "4b57e4c135e1805ff66bfd55616fb4001c44aca5"
        ],
        [
            "intros n; elim n; simpl in |- *; auto.",
            "VernacExtend",
            "4c8db1b39c3be89d951a6596eac36325adb07903"
        ],
        [
            "intros l; case l; simpl in |- *; auto.",
            "VernacExtend",
            "1cf0a07019c5b62e38c038f915fe4ca0761fa170"
        ],
        [
            "intros t H H0; inversion H0.",
            "VernacExtend",
            "609ae20e06de5554543e7e5487ef29afadd8f8ef"
        ],
        [
            "generalize (permutation_nil_inv _ _ (permutation_sym _ _ _ H1)); intros; discriminate.",
            "VernacExtend",
            "64e41d77489704c6dff6e570f76f6c1b129b1ba4"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "intros n0 H l t H0 H1; inversion H1.",
            "VernacExtend",
            "5a38a91857776d69db0b1e5a3391e8aaa8440d16"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "apply in_flat_map with (t1 :: t2 :: l2); auto.",
            "VernacExtend",
            "bf6e6cd3c57d1176c06fe0a5f4ec4c9a092b5efe"
        ],
        [
            "apply H; auto.",
            "VernacExtend",
            "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
        ],
        [
            "apply eq_add_S; apply trans_equal with (1 := H0).",
            "VernacExtend",
            "84cf06d3ed070bfbc01face6259d6ffecfc5921d"
        ],
        [
            "apply trans_equal with (length (t1 :: t2 :: l2)); auto.",
            "VernacExtend",
            "895bc8a7386d04769b7b1cef36ab1048dcd7024e"
        ],
        [
            "apply permutation_length; auto.",
            "VernacExtend",
            "db6efdac3b46be99ec618661eaea7cef832ed276"
        ],
        [
            "apply permutation_all_permutations; auto.",
            "VernacExtend",
            "632f4960b8acaa33c548b183d8863cae7fd960dd"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem cover_all_cover : forall l t, cover l t -> In t (all_cover l).",
            "VernacStartTheoremProof",
            "d66e6e4c74ffdde441a4b0581cf3f534c82da86d"
        ],
        [
            "intros l t H; unfold all_cover in |- *; apply cover_all_cover_aux; auto.",
            "VernacExtend",
            "8e1fbebd3ce3d56a34edfb2eeeaa795ed23b0673"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cover_dec : (forall a b : A, {a = b} + {a <> b}) -> forall l t, {cover l t} + {~ cover l t}.",
            "VernacDefinition",
            "33cab3bc0f8d83ba6e6d49baab99d6cfd70450b4"
        ],
        [
            "intros H l t; case (In_dec (btree_dec _ H) t (all_cover l)).",
            "VernacExtend",
            "97999676880b15ce99bf549f788569694374ae17"
        ],
        [
            "intros H1; left; apply all_cover_cover; auto.",
            "VernacExtend",
            "6c50146e615fb750ee0e4e40d5f023cefb3f6ab4"
        ],
        [
            "intros H1; right; Contradict H1; apply cover_all_cover; auto.",
            "VernacExtend",
            "42b78f2c9990c68eeb84140c8afdb8f79cc1ceb9"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Theorem cover_all_leaves : forall t : btree A, cover (map (fun x : A => leaf x) (all_leaves t)) t.",
            "VernacStartTheoremProof",
            "7911899783240481857488a28d21446aa263394e"
        ],
        [
            "intros t; elim t; simpl in |- *; auto.",
            "VernacExtend",
            "aac93e2a6a74fec92fe4babdcf3df5670b853602"
        ],
        [
            "intros b H b0 H0; rewrite map_app.",
            "VernacExtend",
            "4868602015e07e1b9b1ab6e2019df1859b1bc894"
        ],
        [
            "apply cover_app; auto.",
            "VernacExtend",
            "a74bd912d034ff3910fcf715ca3e16c83676037f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Cover.",
            "VernacEndSegment",
            "00f3dcb1335b2ff91e8636566603f7602bf60a08"
        ],
        [
            "Arguments cover [A].",
            "VernacArguments",
            "5bd6fda412747e5ac7c52634fbb7d4eb94106ef0"
        ],
        [
            "Hint Constructors cover : core.",
            "VernacHints",
            "3d4d00821dc363733575e89c6032cd10fd94b498"
        ]
    ],
    "proofs": [
        {
            "name": "cover_permutation",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros t l1 l2 H; generalize l2; elim H; clear H t l1 l2; auto.",
                        "VernacExtend",
                        "772712b533e044c7cd5afa2b128269f7bf66da86"
                    ]
                },
                {
                    "command": [
                        "intros t l2 H; rewrite (permutation_one_inv _ _ _ H); auto.",
                        "VernacExtend",
                        "9c6ad56b3690a48b424d98176678927c3a266ad8"
                    ]
                },
                {
                    "command": [
                        "intros l1 l2 t1 t2 t3 H H0 H1 l0 H2.",
                        "VernacExtend",
                        "fc332af6bf885fc8a16f5c3d28e8d37b825252d6"
                    ]
                },
                {
                    "command": [
                        "apply cover_node with (2 := H0).",
                        "VernacExtend",
                        "99fd46f11f24d776ef4ff0471dfd8e284b3b7abc"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (2 := H).",
                        "VernacExtend",
                        "f7759d91c72acfe29c5af7cc21d5a86ef5eff3ca"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_cons_l",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros t1 t2 l1 H; elim H; clear t1 l1 H; simpl in |- *; auto.",
                        "VernacExtend",
                        "35e1cfedcf0bf63f390e151d02218e98e0388908"
                    ]
                },
                {
                    "command": [
                        "intros t; apply cover_node with (l2 := nil (A:=btree A)) (t1 := t2) (t2 := t); auto.",
                        "VernacExtend",
                        "13e498adaf239b391a89d8e3c1c52e3def134a63"
                    ]
                },
                {
                    "command": [
                        "intros l1 l2 t1 t0 t3 H H0 H1.",
                        "VernacExtend",
                        "b04dd25201080361b6b1a58601ff30d7d8499c6e"
                    ]
                },
                {
                    "command": [
                        "apply cover_node with (l2 := t2 :: l2) (t1 := t1) (t2 := t0); auto.",
                        "VernacExtend",
                        "0df9ea9cc12d4e70e0d4e711a5ad2d44c4c8c931"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (t2 :: t1 :: t0 :: l2); auto.",
                        "VernacExtend",
                        "9d568bafee90b8e4eca92abf1937f3bc00607c04"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (t1 :: t2 :: t0 :: l2); auto.",
                        "VernacExtend",
                        "80aa296c4327b978bc11d53344f5232192acd454"
                    ]
                },
                {
                    "command": [
                        "apply cover_permutation with (1 := H1); auto.",
                        "VernacExtend",
                        "91d14defca5370add428de95f58adedd0c04609b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_not_nil",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "intros l t H; case H; simpl in |- *; auto.",
                        "VernacExtend",
                        "ceaf5b08dffdb677b7e4a87531b6d41dab05db60"
                    ]
                },
                {
                    "command": [
                        "intros t0; discriminate.",
                        "VernacExtend",
                        "23e368b318634b5ff862ead4deaa38676685e738"
                    ]
                },
                {
                    "command": [
                        "intros l1 l2 t1 t2 t3 H0 H1; red in |- *; intros H2; absurd (length l1 = length (t1 :: t2 :: l2)); auto.",
                        "VernacExtend",
                        "0781ada4241a053a3f33593985402c959032dae5"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; simpl in |- *; intros; discriminate.",
                        "VernacExtend",
                        "9cb0d766182a937467c463eddea885202eabb7cb"
                    ]
                },
                {
                    "command": [
                        "apply permutation_length with (1 := H0); auto.",
                        "VernacExtend",
                        "3e8c5a353fe49c620512eac2c8b12a785900bba7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "one_cover_ex",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros l; elim l; simpl in |- *; auto.",
                        "VernacExtend",
                        "2bbab84295db0ef661ebb58820998893cacdee26"
                    ]
                },
                {
                    "command": [
                        "intros H; case H; auto.",
                        "VernacExtend",
                        "0b36977cda16a9ec120d6463bb6c43bcda418cba"
                    ]
                },
                {
                    "command": [
                        "intros a l0; case l0; auto.",
                        "VernacExtend",
                        "7ab07a1c167d9d38d652981782840c59a56e640b"
                    ]
                },
                {
                    "command": [
                        "intros H H0; exists a; auto.",
                        "VernacExtend",
                        "2bf6df3be0e4d4ff4fb6fe510f8db0c5e71fe01c"
                    ]
                },
                {
                    "command": [
                        "intros b l1 H H0; case H.",
                        "VernacExtend",
                        "5197a1b03a8d85cb02bf5595d852d3e7cb986a2d"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros; discriminate.",
                        "VernacExtend",
                        "3dc8cab2ad5f5b0f8cdd0c668624cfd3367c3237"
                    ]
                },
                {
                    "command": [
                        "intros x H1; exists (node a x).",
                        "VernacExtend",
                        "d061d0ae2dd1911ae4c659c6e679a5404fc76e87"
                    ]
                },
                {
                    "command": [
                        "apply cover_cons_l; auto.",
                        "VernacExtend",
                        "3f822778f7a10159cb88d62671b46341302e37ef"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_in_inb_inb",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros l t1 t2 t3 H; generalize t2 t3; elim H; clear H l t1 t2 t3; auto with datatypes.",
                        "VernacExtend",
                        "31f0c2956bb10817e3b48a62961c7f52ae4d5119"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros t t2 t3 [H1| H1]; auto.",
                        "VernacExtend",
                        "a94c7f3848c48acf7b8d2a0e50ca64e50720d7e8"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; auto.",
                        "VernacExtend",
                        "1413124b63144a92c2b8c7e916995d6cd3746a77"
                    ]
                },
                {
                    "command": [
                        "case H1.",
                        "VernacExtend",
                        "a1cc2c5b7545de9abe2fa54c801395a452f26f10"
                    ]
                },
                {
                    "command": [
                        "intros l1 l2 t1 t2 t3 H H0 H1 t0 t4 H2 H3.",
                        "VernacExtend",
                        "c1d2d29b382dcb85a4492a394beed3499e24ffec"
                    ]
                },
                {
                    "command": [
                        "cut (In t0 (t1 :: t2 :: l2)); auto.",
                        "VernacExtend",
                        "42f377ec81de68a4a5d8d359f7f30040dd91ddba"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros [H4| [H4| H4]]; auto with datatypes.",
                        "VernacExtend",
                        "c18fe5ca8e31faf12f4b851e287352d9f0251292"
                    ]
                },
                {
                    "command": [
                        "apply (H1 (node t1 t2)); simpl in |- *; auto.",
                        "VernacExtend",
                        "23c56575955eeb44629c99cb5ee13c1fc5a3a8b2"
                    ]
                },
                {
                    "command": [
                        "rewrite H4; auto.",
                        "VernacExtend",
                        "3d6c1fe7ce13b6f1f00ae467dad6bbd79293ab29"
                    ]
                },
                {
                    "command": [
                        "apply (H1 (node t1 t2)); simpl in |- *; auto.",
                        "VernacExtend",
                        "23c56575955eeb44629c99cb5ee13c1fc5a3a8b2"
                    ]
                },
                {
                    "command": [
                        "rewrite H4; auto.",
                        "VernacExtend",
                        "3d6c1fe7ce13b6f1f00ae467dad6bbd79293ab29"
                    ]
                },
                {
                    "command": [
                        "apply (H1 t0); simpl in |- *; auto.",
                        "VernacExtend",
                        "6845e4920336849afeb289291c56ee615f83302b"
                    ]
                },
                {
                    "command": [
                        "apply permutation_in with (1 := H); simpl in |- *; auto.",
                        "VernacExtend",
                        "598ad9b9bbfac6535bc587ae0001921de0799717"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_in_inb",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros l t1 t2 H H0; apply cover_in_inb_inb with (1 := H) (2 := H0); auto.",
                        "VernacExtend",
                        "0883c78fcc2cc283262df28d30a1063220210317"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_inv_leaf_aux",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "intros t l H; elim H; simpl in |- *; auto.",
                        "VernacExtend",
                        "502da982782bf3191c77486785ad21d4d384615d"
                    ]
                },
                {
                    "command": [
                        "intros t0 a H0; apply f_equal2 with (f := cons (A:=btree A)); auto.",
                        "VernacExtend",
                        "7815cff687caefcb71d8df36e20e3aefcf7f96e8"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (H2 a H3); intros; discriminate.",
                        "VernacExtend",
                        "fc33f335269941a0a57c3fadca1b32cf7338070e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_inv_leaf",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "intros a l H; (apply cover_inv_leaf_aux with (t := leaf a); auto).",
                        "VernacExtend",
                        "c7dc96eecd97c2693c2292dca1a349f12119cde5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_one_inv",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "intros t1 t2 H; inversion H; auto.",
                        "VernacExtend",
                        "8b40d0ff357463980117434ba7904da22477db33"
                    ]
                },
                {
                    "command": [
                        "absurd (length (t1 :: nil) = length (t0 :: t3 :: l2)).",
                        "VernacExtend",
                        "ac21b79060dd061960beea23fc8efa47c66a0fbc"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros; discriminate.",
                        "VernacExtend",
                        "3d59504195c7deca6b10553f120fad45a6155eb6"
                    ]
                },
                {
                    "command": [
                        "apply permutation_length with (1 := H0); auto.",
                        "VernacExtend",
                        "3e8c5a353fe49c620512eac2c8b12a785900bba7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_inv_app_aux",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "intros t t1 t2 l H; elim H.",
                        "VernacExtend",
                        "d36a4415d44ac75172b854641c657a9045c36480"
                    ]
                },
                {
                    "command": [
                        "intros t0 Ht0; rewrite Ht0; auto with datatypes.",
                        "VernacExtend",
                        "62ba6329655ec5949c2c3677069e3fbdf13ad6be"
                    ]
                },
                {
                    "command": [
                        "intros l1 l2 t0 t3 t4 H0 H1 H2 H3; right.",
                        "VernacExtend",
                        "10dded668b67b1af9316b8ff5259043c2d7a79fb"
                    ]
                },
                {
                    "command": [
                        "case H2; auto.",
                        "VernacExtend",
                        "877506702eca45f9d52e339649864010a8b18e82"
                    ]
                },
                {
                    "command": [
                        "intros H4.",
                        "VernacExtend",
                        "142447ea7bb5f7d87b7f5d3d866f877f7448eb75"
                    ]
                },
                {
                    "command": [
                        "exists (t1 :: nil); exists (t2 :: nil); simpl in |- *; repeat (split; auto).",
                        "VernacExtend",
                        "7998316d6ba8eb6e0e4afe0eb28c322ec246d42e"
                    ]
                },
                {
                    "command": [
                        "injection H4; intros H5 H6 H7; rewrite <- H5; rewrite <- H6; rewrite <- H7; auto.",
                        "VernacExtend",
                        "33836ce61be43358649c26cb34c46f5e45dcbe75"
                    ]
                },
                {
                    "command": [
                        "clear H2 H3; intros (l3, (l4, ((Hl1, Hl2), Hl3))).",
                        "VernacExtend",
                        "bc2e4bfe5c8bdf341f407f0d24b111b811f9242e"
                    ]
                },
                {
                    "command": [
                        "case (in_app_or l3 l4 (node t0 t3)).",
                        "VernacExtend",
                        "7876deef4c7e471875595d78f0301249219670a9"
                    ]
                },
                {
                    "command": [
                        "apply permutation_in with (1 := Hl3); auto with datatypes.",
                        "VernacExtend",
                        "09e4a015bb11ade4e11f0f64223123d21813f2df"
                    ]
                },
                {
                    "command": [
                        "intros H2; case in_ex_app with (1 := H2).",
                        "VernacExtend",
                        "3f117643d342cfdef9b554811ca3376e12a46ba1"
                    ]
                },
                {
                    "command": [
                        "intros l5 (l6, Hl5).",
                        "VernacExtend",
                        "78fbdacc867f7f6e8f5e84a44f92f561bc85ae55"
                    ]
                },
                {
                    "command": [
                        "exists (t0 :: t3 :: l5 ++ l6); exists l4; repeat (split; auto).",
                        "VernacExtend",
                        "9d1cbb5419026c2b806cbef9bbb32560c25ffc4e"
                    ]
                },
                {
                    "command": [
                        "apply cover_node with (l2 := l5 ++ l6) (t1 := t0) (t2 := t3); auto.",
                        "VernacExtend",
                        "8ca175ead5b8bbb16e9fe615f90fbf7f002135db"
                    ]
                },
                {
                    "command": [
                        "apply cover_permutation with (1 := Hl1).",
                        "VernacExtend",
                        "3b393c1b792b91017132929da8252db98eed8a7c"
                    ]
                },
                {
                    "command": [
                        "rewrite Hl5.",
                        "VernacExtend",
                        "20594829cfc0110b637928a4e7955bf433c65b70"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (node t0 t3 :: l6 ++ l5); auto.",
                        "VernacExtend",
                        "29d146974b02657097643d6cb6ee5a06a3cc50e7"
                    ]
                },
                {
                    "command": [
                        "apply (permutation_app_swap _ l5 (node t0 t3 :: l6)).",
                        "VernacExtend",
                        "0d889d6baed32aaabee4be7de1adf5070335172c"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (1 := H0).",
                        "VernacExtend",
                        "af3e72e42d8c5bc6c8067ffb3b969c87f25334de"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; repeat apply permutation_skip.",
                        "VernacExtend",
                        "bde98b9c263ac66ced8826a611226f130bae5b10"
                    ]
                },
                {
                    "command": [
                        "apply permutation_inv with (a := node t0 t3).",
                        "VernacExtend",
                        "4db0f23c3c06e3d43cfb6f83036409c1f1e41bc0"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (1 := Hl3).",
                        "VernacExtend",
                        "f3b6968622fe456984a100384cee4818a9c72d0f"
                    ]
                },
                {
                    "command": [
                        "rewrite Hl5; auto.",
                        "VernacExtend",
                        "2a692685693a0b904cba70644a89d3fc9c993364"
                    ]
                },
                {
                    "command": [
                        "change (permutation ((l5 ++ node t0 t3 :: l6) ++ l4) ((node t0 t3 :: l5 ++ l6) ++ l4)) in |- *.",
                        "VernacExtend",
                        "309ee2349509b547257f3a3aacad12990602b42d"
                    ]
                },
                {
                    "command": [
                        "apply permutation_app_comp; auto.",
                        "VernacExtend",
                        "66187756dd15e81b5f4358c8d3ab79b93eed1276"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with ((node t0 t3 :: l6) ++ l5); auto.",
                        "VernacExtend",
                        "5069a1bf5321ae37df2c15d7798831c97b0fa184"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "intros H2; case in_ex_app with (1 := H2).",
                        "VernacExtend",
                        "3f117643d342cfdef9b554811ca3376e12a46ba1"
                    ]
                },
                {
                    "command": [
                        "intros l5 (l6, Hl5).",
                        "VernacExtend",
                        "78fbdacc867f7f6e8f5e84a44f92f561bc85ae55"
                    ]
                },
                {
                    "command": [
                        "exists l3; exists (t0 :: t3 :: l5 ++ l6); repeat (split; auto).",
                        "VernacExtend",
                        "7725b1322e48e6c7a9250dc1cc25c02af489061d"
                    ]
                },
                {
                    "command": [
                        "apply cover_node with (l2 := l5 ++ l6) (t1 := t0) (t2 := t3); auto.",
                        "VernacExtend",
                        "8ca175ead5b8bbb16e9fe615f90fbf7f002135db"
                    ]
                },
                {
                    "command": [
                        "apply cover_permutation with (1 := Hl2).",
                        "VernacExtend",
                        "0050a41e1f55c473fac8ab6ce8846b37c3c188b0"
                    ]
                },
                {
                    "command": [
                        "rewrite Hl5.",
                        "VernacExtend",
                        "20594829cfc0110b637928a4e7955bf433c65b70"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (node t0 t3 :: l6 ++ l5); auto.",
                        "VernacExtend",
                        "29d146974b02657097643d6cb6ee5a06a3cc50e7"
                    ]
                },
                {
                    "command": [
                        "apply (permutation_app_swap _ l5 (node t0 t3 :: l6)).",
                        "VernacExtend",
                        "0d889d6baed32aaabee4be7de1adf5070335172c"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (1 := H0).",
                        "VernacExtend",
                        "af3e72e42d8c5bc6c8067ffb3b969c87f25334de"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with ((t0 :: t3 :: l5 ++ l6) ++ l3); auto.",
                        "VernacExtend",
                        "db60bd5315af3c3ba4c11a0521d090ef304b377e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; repeat apply permutation_skip.",
                        "VernacExtend",
                        "bde98b9c263ac66ced8826a611226f130bae5b10"
                    ]
                },
                {
                    "command": [
                        "apply permutation_inv with (a := node t0 t3).",
                        "VernacExtend",
                        "4db0f23c3c06e3d43cfb6f83036409c1f1e41bc0"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (1 := Hl3).",
                        "VernacExtend",
                        "f3b6968622fe456984a100384cee4818a9c72d0f"
                    ]
                },
                {
                    "command": [
                        "rewrite Hl5.",
                        "VernacExtend",
                        "20594829cfc0110b637928a4e7955bf433c65b70"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with ((l5 ++ node t0 t3 :: l6) ++ l3); auto.",
                        "VernacExtend",
                        "cdb7785b65401ea109a06a84ad5569f2c3606c31"
                    ]
                },
                {
                    "command": [
                        "change (permutation ((l5 ++ node t0 t3 :: l6) ++ l3) ((node t0 t3 :: l5 ++ l6) ++ l3)) in |- *; auto.",
                        "VernacExtend",
                        "e7e937fa1935792d049fa43c3575beb2d7b6761d"
                    ]
                },
                {
                    "command": [
                        "apply permutation_app_comp; auto.",
                        "VernacExtend",
                        "66187756dd15e81b5f4358c8d3ab79b93eed1276"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with ((node t0 t3 :: l6) ++ l5); auto.",
                        "VernacExtend",
                        "5069a1bf5321ae37df2c15d7798831c97b0fa184"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_inv_app",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros t1 t2 l H; apply cover_inv_app_aux with (t := node t1 t2); auto.",
                        "VernacExtend",
                        "3d6d62389638eca102ef9f4a5c5c824f6675e78a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_app",
            "line_nb": 127,
            "steps": [
                {
                    "command": [
                        "intros t1 t2 l1 l2 H1; generalize t2 l2; elim H1; clear t1 t2 l1 l2 H1; simpl in |- *; auto.",
                        "VernacExtend",
                        "c2c4161da498b85f6bffd3747a8313b231f2b096"
                    ]
                },
                {
                    "command": [
                        "intros t t2 l2 H; apply cover_cons_l; auto.",
                        "VernacExtend",
                        "6a2a6e1ba998f3f82ccb7d6b9c346c140909abe5"
                    ]
                },
                {
                    "command": [
                        "intros l1 l2 t1 t2 t3 H H0 H1 t0 l0 H2.",
                        "VernacExtend",
                        "71735595a1690a3e1b93b6f82ec7fa455a862b83"
                    ]
                },
                {
                    "command": [
                        "apply cover_node with (l2 := l2 ++ l0) (t1 := t1) (t2 := t2); auto.",
                        "VernacExtend",
                        "89c6d199ec6b53a25a3cc22dc13404b58ecc4fdf"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with ((t1 :: t2 :: l2) ++ l0); auto.",
                        "VernacExtend",
                        "1a38b6a3926aad0273bb8513a7b759fa421adde9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_number_of_nodes",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "intros t l H; elim H; clear H t l; simpl in |- *; auto.",
                        "VernacExtend",
                        "7f949264a8240eb5e2f5e0beea72ece17da07106"
                    ]
                },
                {
                    "command": [
                        "intros l1 l2 t1 t2 t3 H H0 H1.",
                        "VernacExtend",
                        "70992840af9c9316c6fc19f82b076f578da6e268"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (1 := H1).",
                        "VernacExtend",
                        "cc69ec7b2c9feffd93cd81bd7db163a8dc84e0bc"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_left_permutation with (2 := H); simpl in |- *; auto.",
                        "VernacExtend",
                        "9528da1dcbd43629de22cb952e356c506572d3f9"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_length with (1 := H); simpl in |- *; auto.",
                        "VernacExtend",
                        "109065d77d93bafc1ad6604e6e9a18a0411c8108"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_left_init with (h := S); simpl in |- *; auto.",
                        "VernacExtend",
                        "d6a54e9140a7ffb292e249f88383dfc9f4203abe"
                    ]
                },
                {
                    "command": [
                        "intros a b1 b2; repeat rewrite plus_assoc_reverse.",
                        "VernacExtend",
                        "ed3d0b714723b989a7af8d387b5b070ff208a33d"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 with (f := plus); auto; apply plus_comm.",
                        "VernacExtend",
                        "66c16327a741f635713a3934eaec7e2298a5d47b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_cover_aux_cover",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "intros n; elim n; simpl in |- *; auto.",
                        "VernacExtend",
                        "4c8db1b39c3be89d951a6596eac36325adb07903"
                    ]
                },
                {
                    "command": [
                        "intros l t H H0; elim H0.",
                        "VernacExtend",
                        "8ce2d568ed72d334cb3d8073df98a89925cb90d3"
                    ]
                },
                {
                    "command": [
                        "intros n0 H l t H0 H1.",
                        "VernacExtend",
                        "dc1bc07936d9929700e704ca1e9fa9788fdf7a4e"
                    ]
                },
                {
                    "command": [
                        "case in_flat_map_ex with (1 := H1); clear H1.",
                        "VernacExtend",
                        "05ef56ed27326a5522a117d108401c1c932ec3fe"
                    ]
                },
                {
                    "command": [
                        "intros x; case x; clear x.",
                        "VernacExtend",
                        "59a5488c1273c540ebb57d3d443b93d3e0f54a3d"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros (H1, H2); case H2.",
                        "VernacExtend",
                        "228d9a6c07b0069e3ae19c30d6fa818bb0cbb03e"
                    ]
                },
                {
                    "command": [
                        "intros b x; case x; clear x.",
                        "VernacExtend",
                        "4e6b48800e8006958fccf5f1a2f63f439d137f04"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros (H1, [H2| H2]).",
                        "VernacExtend",
                        "df48083c536936e8d4e23ab2f3173c61e0e98760"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2.",
                        "VernacExtend",
                        "c204509e5e85cb1396c425732210ff127ac38a7b"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_one_inv with (a := b) (l := l); auto.",
                        "VernacExtend",
                        "c59c69b4ec6f7748493614d5325722702d57f183"
                    ]
                },
                {
                    "command": [
                        "apply all_permutations_permutation; auto.",
                        "VernacExtend",
                        "fc3c4a04a20178079985b4c11a789bca9e91eb73"
                    ]
                },
                {
                    "command": [
                        "case H2.",
                        "VernacExtend",
                        "6d8aa23ad9a74ffd5f130abeb5f7a9478634f2c5"
                    ]
                },
                {
                    "command": [
                        "intros b1 l1 (H1, H2).",
                        "VernacExtend",
                        "62241f308badf88687d1065b13a229d91185e4fe"
                    ]
                },
                {
                    "command": [
                        "apply cover_node with (l2 := l1) (t1 := b) (t2 := b1); auto.",
                        "VernacExtend",
                        "0223fb708c3208467691a0594bd08c93db12e66a"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply all_permutations_permutation; auto.",
                        "VernacExtend",
                        "524f5192535ccd6a28a36dc6849b675e40ebf258"
                    ]
                },
                {
                    "command": [
                        "apply H; auto.",
                        "VernacExtend",
                        "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_S; apply trans_equal with (1 := H0).",
                        "VernacExtend",
                        "84cf06d3ed070bfbc01face6259d6ffecfc5921d"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (length (b :: b1 :: l1)); auto.",
                        "VernacExtend",
                        "1ca91fdd6b3c38bf1af734a530b1e7788a5b286d"
                    ]
                },
                {
                    "command": [
                        "apply permutation_length.",
                        "VernacExtend",
                        "19069cdecf6a7ed4540a5655d29fcbbfbebbc980"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply all_permutations_permutation; auto.",
                        "VernacExtend",
                        "524f5192535ccd6a28a36dc6849b675e40ebf258"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_cover_cover",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "intros l t H; apply all_cover_aux_cover with (n := length l); auto.",
                        "VernacExtend",
                        "2ae8154a86cac5e3d277e5bc8fcef796c09b48d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_all_cover_aux",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "intros n; elim n; simpl in |- *; auto.",
                        "VernacExtend",
                        "4c8db1b39c3be89d951a6596eac36325adb07903"
                    ]
                },
                {
                    "command": [
                        "intros l; case l; simpl in |- *; auto.",
                        "VernacExtend",
                        "1cf0a07019c5b62e38c038f915fe4ca0761fa170"
                    ]
                },
                {
                    "command": [
                        "intros t H H0; inversion H0.",
                        "VernacExtend",
                        "609ae20e06de5554543e7e5487ef29afadd8f8ef"
                    ]
                },
                {
                    "command": [
                        "generalize (permutation_nil_inv _ _ (permutation_sym _ _ _ H1)); intros; discriminate.",
                        "VernacExtend",
                        "64e41d77489704c6dff6e570f76f6c1b129b1ba4"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "intros n0 H l t H0 H1; inversion H1.",
                        "VernacExtend",
                        "5a38a91857776d69db0b1e5a3391e8aaa8440d16"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "apply in_flat_map with (t1 :: t2 :: l2); auto.",
                        "VernacExtend",
                        "bf6e6cd3c57d1176c06fe0a5f4ec4c9a092b5efe"
                    ]
                },
                {
                    "command": [
                        "apply H; auto.",
                        "VernacExtend",
                        "4fad0139824cf3bfe52c76bdec7336aa3652c5f4"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_S; apply trans_equal with (1 := H0).",
                        "VernacExtend",
                        "84cf06d3ed070bfbc01face6259d6ffecfc5921d"
                    ]
                },
                {
                    "command": [
                        "apply trans_equal with (length (t1 :: t2 :: l2)); auto.",
                        "VernacExtend",
                        "895bc8a7386d04769b7b1cef36ab1048dcd7024e"
                    ]
                },
                {
                    "command": [
                        "apply permutation_length; auto.",
                        "VernacExtend",
                        "db6efdac3b46be99ec618661eaea7cef832ed276"
                    ]
                },
                {
                    "command": [
                        "apply permutation_all_permutations; auto.",
                        "VernacExtend",
                        "632f4960b8acaa33c548b183d8863cae7fd960dd"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_all_cover",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "intros l t H; unfold all_cover in |- *; apply cover_all_cover_aux; auto.",
                        "VernacExtend",
                        "8e1fbebd3ce3d56a34edfb2eeeaa795ed23b0673"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cover_dec",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "intros H l t; case (In_dec (btree_dec _ H) t (all_cover l)).",
                        "VernacExtend",
                        "97999676880b15ce99bf549f788569694374ae17"
                    ]
                },
                {
                    "command": [
                        "intros H1; left; apply all_cover_cover; auto.",
                        "VernacExtend",
                        "6c50146e615fb750ee0e4e40d5f023cefb3f6ab4"
                    ]
                },
                {
                    "command": [
                        "intros H1; right; Contradict H1; apply cover_all_cover; auto.",
                        "VernacExtend",
                        "42b78f2c9990c68eeb84140c8afdb8f79cc1ceb9"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "cover_all_leaves",
            "line_nb": 195,
            "steps": [
                {
                    "command": [
                        "intros t; elim t; simpl in |- *; auto.",
                        "VernacExtend",
                        "aac93e2a6a74fec92fe4babdcf3df5670b853602"
                    ]
                },
                {
                    "command": [
                        "intros b H b0 H0; rewrite map_app.",
                        "VernacExtend",
                        "4868602015e07e1b9b1ab6e2019df1859b1bc894"
                    ]
                },
                {
                    "command": [
                        "apply cover_app; auto.",
                        "VernacExtend",
                        "a74bd912d034ff3910fcf715ca3e16c83676037f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}