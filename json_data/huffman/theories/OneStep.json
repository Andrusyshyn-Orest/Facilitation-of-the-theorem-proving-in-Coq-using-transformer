{
    "filename": "theories/OneStep.v",
    "coq_project": "huffman",
    "vernac_cmds": [
        [
            "From Huffman Require Export WeightTree.",
            "VernacRequire",
            "eb4b440017fe2b87730eb4b43044934cb09064a4"
        ],
        [
            "From Huffman Require Export Ordered.",
            "VernacRequire",
            "77de947c353dd2c96810316f90fdf903390444da"
        ],
        [
            "From Huffman Require Export SameSumLeaves.",
            "VernacRequire",
            "778f59c639651973ec43afb6fc99c7c6f70e8811"
        ],
        [
            "Section OneStep.",
            "VernacBeginSection",
            "925be2277562693d4970134aca692f5aadef7df3"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable f : A -> nat.",
            "VernacAssumption",
            "9f23c668cb9b44da0a7007cf5e6e948fbeb3f99a"
        ],
        [
            "Definition one_step (l1 l2 : list (btree A)) : Prop := exists l3 : list (btree A), (exists t1 : btree A, (exists t2 : btree A, ordered (sum_order f) (t1 :: t2 :: l3) /\\ permutation l1 (t1 :: t2 :: l3) /\\ permutation l2 (node t1 t2 :: l3))).",
            "VernacDefinition",
            "2bfc0e29e7cae867b23c2c80e37810f4c3b3dafb"
        ],
        [
            "Theorem one_step_weight_tree_list : forall l1 l2 l3 : list (btree A), one_step l1 l2 -> one_step l1 l3 -> weight_tree_list f l2 = weight_tree_list f l3.",
            "VernacStartTheoremProof",
            "634cf0a6942ef4399274af615c6d56317ad8204c"
        ],
        [
            "intros l1 l2 l3 (l4, (t1, (t2, (H1, (H2, H3))))) (l5, (t3, (t4, (H4, (H5, H6))))).",
            "VernacExtend",
            "572b390b5ef267f025bf3bc4aa9680b0e09d7d20"
        ],
        [
            "rewrite weight_tree_list_permutation with (1 := H3).",
            "VernacExtend",
            "bb80a7c8c054149d3da3c0ad2914d3fb24891347"
        ],
        [
            "rewrite weight_tree_list_permutation with (1 := H6).",
            "VernacExtend",
            "0032d665cf9d24d31955fc754f9ba76040ffb89c"
        ],
        [
            "repeat rewrite weight_tree_list_node.",
            "VernacExtend",
            "b7cd7b361bb5e5e4236585e820a97693a91ad5e9"
        ],
        [
            "apply f_equal2 with (f := plus).",
            "VernacExtend",
            "914efc5b3b05b9909b9d9e312e7ce3ded0b58e7c"
        ],
        [
            "cut (map (sum_leaves f) (t1 :: t2 :: l4) = map (sum_leaves f) (t3 :: t4 :: l5)).",
            "VernacExtend",
            "c931eb2e105a584c60f6d8bf69b946653d02437e"
        ],
        [
            "simpl in |- *; intros H7; injection H7.",
            "VernacExtend",
            "29b0dea0ecda55f3ed77ce0d6d1b694bffb80634"
        ],
        [
            "intros H8 H9 H10; repeat apply f_equal2 with (f := plus); auto.",
            "VernacExtend",
            "f9af6c7943f73d87a8f4a856850bae3ab55b81b3"
        ],
        [
            "apply ordered_sum_leaves_eq; auto.",
            "VernacExtend",
            "b3cf6316055ccaded83b3a19e891c419aba0aa02"
        ],
        [
            "apply permutation_trans with (2 := H5); auto.",
            "VernacExtend",
            "b87c1833e0731004cc5b6ac421acc4db1ece5bb3"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "rewrite <- weight_tree_list_permutation with (1 := H2).",
            "VernacExtend",
            "fa4d3a194264576d7f5fa199f58c7916056626e9"
        ],
        [
            "apply weight_tree_list_permutation; auto.",
            "VernacExtend",
            "dee7f86d986f92a2704e8fbc2e70592288ada745"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem one_step_same_sum_leaves : forall l1 l2 l3 : list (btree A), one_step l1 l2 -> one_step l1 l3 -> same_sum_leaves f l2 l3.",
            "VernacStartTheoremProof",
            "af2ac0b1b98eb011e4d4d8d7402fc4b554e2a0fa"
        ],
        [
            "intros l1 l2 l3 (l4, (t1, (t2, (H1, (H2, H3))))) (l5, (t3, (t4, (H4, (H5, H6))))).",
            "VernacExtend",
            "572b390b5ef267f025bf3bc4aa9680b0e09d7d20"
        ],
        [
            "red in |- *.",
            "VernacExtend",
            "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
        ],
        [
            "exists (node t1 t2 :: l4); exists (node t3 t4 :: l5); auto; simpl in |- *; auto.",
            "VernacExtend",
            "28b6f0478504cedc31135beee21ba59cc3f502ae"
        ],
        [
            "split; auto; split; auto.",
            "VernacExtend",
            "218effc4f5ae502cbfc34127d31c2e905de106cc"
        ],
        [
            "cut (map (sum_leaves f) (t1 :: t2 :: l4) = map (sum_leaves f) (t3 :: t4 :: l5)).",
            "VernacExtend",
            "c931eb2e105a584c60f6d8bf69b946653d02437e"
        ],
        [
            "simpl in |- *; intros H7; injection H7; intros H8 H9 H10; apply f_equal2 with (f := cons (A:=nat)); auto.",
            "VernacExtend",
            "1e5b5c7222af6e60aa310a372968667f79e448aa"
        ],
        [
            "apply ordered_sum_leaves_eq; auto.",
            "VernacExtend",
            "b3cf6316055ccaded83b3a19e891c419aba0aa02"
        ],
        [
            "apply permutation_trans with (2 := H5); auto.",
            "VernacExtend",
            "b87c1833e0731004cc5b6ac421acc4db1ece5bb3"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem one_step_comp : forall l1 l2 l3 l4 : list (btree A), weight_tree_list f l1 = weight_tree_list f l2 -> same_sum_leaves f l1 l2 -> one_step l1 l3 -> one_step l2 l4 -> weight_tree_list f l3 = weight_tree_list f l4 /\\ same_sum_leaves f l3 l4.",
            "VernacStartTheoremProof",
            "ca1d3a5b7d039aba1458a04af3cccf2b9bee189b"
        ],
        [
            "intros l1 l2 l3 l4 H1 (l5, (l6, (H2, (H3, H4)))) (l7, (t1, (t2, (H5, (H6, H7))))) (l8, (t3, (t4, (H8, (H9, H10))))).",
            "VernacExtend",
            "0d7304a5ec3d7fe6958f803a3998f0b13cdfd2f4"
        ],
        [
            "cut (map (sum_leaves f) (t1 :: t2 :: l7) = map (sum_leaves f) (t3 :: t4 :: l8)).",
            "VernacExtend",
            "22bb56fdf7fdd71aefc9b7e182d2aa6e42e2689c"
        ],
        [
            "intros H11.",
            "VernacExtend",
            "a1b7d068db97b026b52156fd42a0f3d3725078c4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite weight_tree_list_permutation with (1 := H7).",
            "VernacExtend",
            "6a36cb9e83e8064f3b46fb5c144d05a6207cf8ed"
        ],
        [
            "rewrite weight_tree_list_permutation with (1 := H10).",
            "VernacExtend",
            "de82dc615794f0c792d4a92a0c2cf0931003d274"
        ],
        [
            "repeat rewrite weight_tree_list_node.",
            "VernacExtend",
            "b7cd7b361bb5e5e4236585e820a97693a91ad5e9"
        ],
        [
            "apply f_equal2 with (f := plus).",
            "VernacExtend",
            "914efc5b3b05b9909b9d9e312e7ce3ded0b58e7c"
        ],
        [
            "injection H11; intros H12 H13 H14; auto.",
            "VernacExtend",
            "83d9a4c6996638d76e266c07a22569fa1f8611ae"
        ],
        [
            "rewrite weight_tree_list_permutation with (1 := permutation_sym _ _ _ H6).",
            "VernacExtend",
            "fdca8afc6f466c8c3740fe694aaa3262f2b35c42"
        ],
        [
            "rewrite weight_tree_list_permutation with (1 := permutation_sym _ _ _ H9); auto.",
            "VernacExtend",
            "03bc1fce7119d0853972b5281962c8b9d6ce0f18"
        ],
        [
            "red in |- *; exists (node t1 t2 :: l7); exists (node t3 t4 :: l8); repeat (split; auto).",
            "VernacExtend",
            "5aeb753d54575c6d1e04ff70013f13ad512e1bfb"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "simpl in H11; injection H11; auto.",
            "VernacExtend",
            "4543d2800d8ada428d34871995b964431d16effc"
        ],
        [
            "intros; apply f_equal2 with (f := cons (A:=nat)); auto.",
            "VernacExtend",
            "c7c7866f9f0ea19a7203e91db331abacfe1f7f13"
        ],
        [
            "apply ordered_perm_antisym_eq with (order := le).",
            "VernacExtend",
            "3ad97f07ab97938bf373ce65c66eea3e87db2c97"
        ],
        [
            "exact le_trans.",
            "VernacExtend",
            "13a945d76187193047a580d158ad861a6a75e9d4"
        ],
        [
            "exact le_antisym.",
            "VernacExtend",
            "7cf1859bc362a6e0c2e3fddd0ec2023d7b43d271"
        ],
        [
            "apply permutation_trans with (map (sum_leaves f) l1).",
            "VernacExtend",
            "b47aa2001de800dc0288d547a5f5db1c7bcec910"
        ],
        [
            "generalize (permutation_map _ _ (sum_leaves f) _ _ (permutation_sym _ _ _ H6)); auto.",
            "VernacExtend",
            "c57eb13e13e6f6a698e1f42664aa71cf80586a18"
        ],
        [
            "apply permutation_trans with (map (sum_leaves f) l5).",
            "VernacExtend",
            "04f8e2c1102f42a01d44ea3b2b151d4247186283"
        ],
        [
            "generalize (permutation_map _ _ (sum_leaves f) _ _ H2); auto.",
            "VernacExtend",
            "447ec1c684c1fa2700965abfc56d3a2008f7f2ea"
        ],
        [
            "rewrite H4.",
            "VernacExtend",
            "fc5d011df68f7160e4669d129d2975825ac089bb"
        ],
        [
            "apply permutation_trans with (map (sum_leaves f) l2).",
            "VernacExtend",
            "2686e51211969c7a78b274f8baa73ae3fe44bb5a"
        ],
        [
            "generalize (permutation_map _ _ (sum_leaves f) _ _ (permutation_sym _ _ _ H3)); auto.",
            "VernacExtend",
            "37a2c8cfb8f23342648cbbdf6855519b1a9f3a72"
        ],
        [
            "generalize (permutation_map _ _ (sum_leaves f) _ _ H9); auto.",
            "VernacExtend",
            "afd412f0ef82d994e262e4e73d6064664034bfc0"
        ],
        [
            "change (ordered le (map (sum_leaves f) (t1 :: t2 :: l7))) in |- *.",
            "VernacExtend",
            "2ebd834b5cb05e8b4588d93ee5ceb636aa2b5726"
        ],
        [
            "apply ordered_map_inv; auto.",
            "VernacExtend",
            "88241fd9c931ef4ea0641d5e3015739865314d42"
        ],
        [
            "change (ordered le (map (sum_leaves f) (t3 :: t4 :: l8))) in |- *.",
            "VernacExtend",
            "24cd6c93e36e8b156cb6ac8045c15a3724901717"
        ],
        [
            "apply ordered_map_inv; auto.",
            "VernacExtend",
            "88241fd9c931ef4ea0641d5e3015739865314d42"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End OneStep.",
            "VernacEndSegment",
            "d50a8674dd916c2fdcaec6056e3ef40db8aec54b"
        ],
        [
            "Arguments one_step [A].",
            "VernacArguments",
            "93b9401cff7a2c82c340a9bec974804d356ef259"
        ]
    ],
    "proofs": [
        {
            "name": "one_step_weight_tree_list",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros l1 l2 l3 (l4, (t1, (t2, (H1, (H2, H3))))) (l5, (t3, (t4, (H4, (H5, H6))))).",
                        "VernacExtend",
                        "572b390b5ef267f025bf3bc4aa9680b0e09d7d20"
                    ]
                },
                {
                    "command": [
                        "rewrite weight_tree_list_permutation with (1 := H3).",
                        "VernacExtend",
                        "bb80a7c8c054149d3da3c0ad2914d3fb24891347"
                    ]
                },
                {
                    "command": [
                        "rewrite weight_tree_list_permutation with (1 := H6).",
                        "VernacExtend",
                        "0032d665cf9d24d31955fc754f9ba76040ffb89c"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite weight_tree_list_node.",
                        "VernacExtend",
                        "b7cd7b361bb5e5e4236585e820a97693a91ad5e9"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 with (f := plus).",
                        "VernacExtend",
                        "914efc5b3b05b9909b9d9e312e7ce3ded0b58e7c"
                    ]
                },
                {
                    "command": [
                        "cut (map (sum_leaves f) (t1 :: t2 :: l4) = map (sum_leaves f) (t3 :: t4 :: l5)).",
                        "VernacExtend",
                        "c931eb2e105a584c60f6d8bf69b946653d02437e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros H7; injection H7.",
                        "VernacExtend",
                        "29b0dea0ecda55f3ed77ce0d6d1b694bffb80634"
                    ]
                },
                {
                    "command": [
                        "intros H8 H9 H10; repeat apply f_equal2 with (f := plus); auto.",
                        "VernacExtend",
                        "f9af6c7943f73d87a8f4a856850bae3ab55b81b3"
                    ]
                },
                {
                    "command": [
                        "apply ordered_sum_leaves_eq; auto.",
                        "VernacExtend",
                        "b3cf6316055ccaded83b3a19e891c419aba0aa02"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (2 := H5); auto.",
                        "VernacExtend",
                        "b87c1833e0731004cc5b6ac421acc4db1ece5bb3"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- weight_tree_list_permutation with (1 := H2).",
                        "VernacExtend",
                        "fa4d3a194264576d7f5fa199f58c7916056626e9"
                    ]
                },
                {
                    "command": [
                        "apply weight_tree_list_permutation; auto.",
                        "VernacExtend",
                        "dee7f86d986f92a2704e8fbc2e70592288ada745"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "one_step_same_sum_leaves",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros l1 l2 l3 (l4, (t1, (t2, (H1, (H2, H3))))) (l5, (t3, (t4, (H4, (H5, H6))))).",
                        "VernacExtend",
                        "572b390b5ef267f025bf3bc4aa9680b0e09d7d20"
                    ]
                },
                {
                    "command": [
                        "red in |- *.",
                        "VernacExtend",
                        "95a3fb9e13ce19fdc8e335912fb83e57a9512b14"
                    ]
                },
                {
                    "command": [
                        "exists (node t1 t2 :: l4); exists (node t3 t4 :: l5); auto; simpl in |- *; auto.",
                        "VernacExtend",
                        "28b6f0478504cedc31135beee21ba59cc3f502ae"
                    ]
                },
                {
                    "command": [
                        "split; auto; split; auto.",
                        "VernacExtend",
                        "218effc4f5ae502cbfc34127d31c2e905de106cc"
                    ]
                },
                {
                    "command": [
                        "cut (map (sum_leaves f) (t1 :: t2 :: l4) = map (sum_leaves f) (t3 :: t4 :: l5)).",
                        "VernacExtend",
                        "c931eb2e105a584c60f6d8bf69b946653d02437e"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros H7; injection H7; intros H8 H9 H10; apply f_equal2 with (f := cons (A:=nat)); auto.",
                        "VernacExtend",
                        "1e5b5c7222af6e60aa310a372968667f79e448aa"
                    ]
                },
                {
                    "command": [
                        "apply ordered_sum_leaves_eq; auto.",
                        "VernacExtend",
                        "b3cf6316055ccaded83b3a19e891c419aba0aa02"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (2 := H5); auto.",
                        "VernacExtend",
                        "b87c1833e0731004cc5b6ac421acc4db1ece5bb3"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "one_step_comp",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros l1 l2 l3 l4 H1 (l5, (l6, (H2, (H3, H4)))) (l7, (t1, (t2, (H5, (H6, H7))))) (l8, (t3, (t4, (H8, (H9, H10))))).",
                        "VernacExtend",
                        "0d7304a5ec3d7fe6958f803a3998f0b13cdfd2f4"
                    ]
                },
                {
                    "command": [
                        "cut (map (sum_leaves f) (t1 :: t2 :: l7) = map (sum_leaves f) (t3 :: t4 :: l8)).",
                        "VernacExtend",
                        "22bb56fdf7fdd71aefc9b7e182d2aa6e42e2689c"
                    ]
                },
                {
                    "command": [
                        "intros H11.",
                        "VernacExtend",
                        "a1b7d068db97b026b52156fd42a0f3d3725078c4"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "rewrite weight_tree_list_permutation with (1 := H7).",
                        "VernacExtend",
                        "6a36cb9e83e8064f3b46fb5c144d05a6207cf8ed"
                    ]
                },
                {
                    "command": [
                        "rewrite weight_tree_list_permutation with (1 := H10).",
                        "VernacExtend",
                        "de82dc615794f0c792d4a92a0c2cf0931003d274"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite weight_tree_list_node.",
                        "VernacExtend",
                        "b7cd7b361bb5e5e4236585e820a97693a91ad5e9"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 with (f := plus).",
                        "VernacExtend",
                        "914efc5b3b05b9909b9d9e312e7ce3ded0b58e7c"
                    ]
                },
                {
                    "command": [
                        "injection H11; intros H12 H13 H14; auto.",
                        "VernacExtend",
                        "83d9a4c6996638d76e266c07a22569fa1f8611ae"
                    ]
                },
                {
                    "command": [
                        "rewrite weight_tree_list_permutation with (1 := permutation_sym _ _ _ H6).",
                        "VernacExtend",
                        "fdca8afc6f466c8c3740fe694aaa3262f2b35c42"
                    ]
                },
                {
                    "command": [
                        "rewrite weight_tree_list_permutation with (1 := permutation_sym _ _ _ H9); auto.",
                        "VernacExtend",
                        "03bc1fce7119d0853972b5281962c8b9d6ce0f18"
                    ]
                },
                {
                    "command": [
                        "red in |- *; exists (node t1 t2 :: l7); exists (node t3 t4 :: l8); repeat (split; auto).",
                        "VernacExtend",
                        "5aeb753d54575c6d1e04ff70013f13ad512e1bfb"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "simpl in H11; injection H11; auto.",
                        "VernacExtend",
                        "4543d2800d8ada428d34871995b964431d16effc"
                    ]
                },
                {
                    "command": [
                        "intros; apply f_equal2 with (f := cons (A:=nat)); auto.",
                        "VernacExtend",
                        "c7c7866f9f0ea19a7203e91db331abacfe1f7f13"
                    ]
                },
                {
                    "command": [
                        "apply ordered_perm_antisym_eq with (order := le).",
                        "VernacExtend",
                        "3ad97f07ab97938bf373ce65c66eea3e87db2c97"
                    ]
                },
                {
                    "command": [
                        "exact le_trans.",
                        "VernacExtend",
                        "13a945d76187193047a580d158ad861a6a75e9d4"
                    ]
                },
                {
                    "command": [
                        "exact le_antisym.",
                        "VernacExtend",
                        "7cf1859bc362a6e0c2e3fddd0ec2023d7b43d271"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (map (sum_leaves f) l1).",
                        "VernacExtend",
                        "b47aa2001de800dc0288d547a5f5db1c7bcec910"
                    ]
                },
                {
                    "command": [
                        "generalize (permutation_map _ _ (sum_leaves f) _ _ (permutation_sym _ _ _ H6)); auto.",
                        "VernacExtend",
                        "c57eb13e13e6f6a698e1f42664aa71cf80586a18"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (map (sum_leaves f) l5).",
                        "VernacExtend",
                        "04f8e2c1102f42a01d44ea3b2b151d4247186283"
                    ]
                },
                {
                    "command": [
                        "generalize (permutation_map _ _ (sum_leaves f) _ _ H2); auto.",
                        "VernacExtend",
                        "447ec1c684c1fa2700965abfc56d3a2008f7f2ea"
                    ]
                },
                {
                    "command": [
                        "rewrite H4.",
                        "VernacExtend",
                        "fc5d011df68f7160e4669d129d2975825ac089bb"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (map (sum_leaves f) l2).",
                        "VernacExtend",
                        "2686e51211969c7a78b274f8baa73ae3fe44bb5a"
                    ]
                },
                {
                    "command": [
                        "generalize (permutation_map _ _ (sum_leaves f) _ _ (permutation_sym _ _ _ H3)); auto.",
                        "VernacExtend",
                        "37a2c8cfb8f23342648cbbdf6855519b1a9f3a72"
                    ]
                },
                {
                    "command": [
                        "generalize (permutation_map _ _ (sum_leaves f) _ _ H9); auto.",
                        "VernacExtend",
                        "afd412f0ef82d994e262e4e73d6064664034bfc0"
                    ]
                },
                {
                    "command": [
                        "change (ordered le (map (sum_leaves f) (t1 :: t2 :: l7))) in |- *.",
                        "VernacExtend",
                        "2ebd834b5cb05e8b4588d93ee5ceb636aa2b5726"
                    ]
                },
                {
                    "command": [
                        "apply ordered_map_inv; auto.",
                        "VernacExtend",
                        "88241fd9c931ef4ea0641d5e3015739865314d42"
                    ]
                },
                {
                    "command": [
                        "change (ordered le (map (sum_leaves f) (t3 :: t4 :: l8))) in |- *.",
                        "VernacExtend",
                        "24cd6c93e36e8b156cb6ac8045c15a3724901717"
                    ]
                },
                {
                    "command": [
                        "apply ordered_map_inv; auto.",
                        "VernacExtend",
                        "88241fd9c931ef4ea0641d5e3015739865314d42"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}