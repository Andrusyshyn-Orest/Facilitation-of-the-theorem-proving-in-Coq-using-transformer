{
    "filename": "theories/ISort.v",
    "coq_project": "huffman",
    "vernac_cmds": [
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "From Huffman Require Import Permutation.",
            "VernacRequire",
            "f68cdc7763e7a9b6eaa3054daf9a0613ff84617c"
        ],
        [
            "From Huffman Require Import Ordered.",
            "VernacRequire",
            "fab40791ad2ecd26d7401bdcc56783dd4d05cf0a"
        ],
        [
            "From Huffman Require Import sTactic.",
            "VernacRequire",
            "d4bf7e66c6238a8377b4a8448e000489b2cf580f"
        ],
        [
            "Section ISortExample.",
            "VernacBeginSection",
            "782c2b334b7d9e6ff01852898af7f7afbaf0c1a3"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable order : A -> A -> Prop.",
            "VernacAssumption",
            "84309ca26067c443940637abab26d77ce73ef8c9"
        ],
        [
            "Variable order_fun : A -> A -> bool.",
            "VernacAssumption",
            "d27f083f07b773458f184098468c0c505ec84ab1"
        ],
        [
            "Hypothesis order_fun_true : forall a b : A, order_fun a b = true -> order a b.",
            "VernacAssumption",
            "595836e3a73052a6b073c49e405cf49f92b7433f"
        ],
        [
            "Hypothesis order_fun_false : forall a b : A, order_fun a b = false -> order b a.",
            "VernacAssumption",
            "f03f4b41dac32835e575d7a407c93c8fe72b69ca"
        ],
        [
            "Fixpoint insert (a : A) (l : list A) {struct l} : list A := match l with | nil => a :: nil | b :: l1 => match order_fun a b with | true => a :: l | false => b :: insert a l1 end end.",
            "VernacFixpoint",
            "7c064e9fda6a6525ba1777ee8e70f41dbb2c1c5d"
        ],
        [
            "Theorem insert_ordered : forall l : list A, ordered order l -> forall a : A, ordered order (insert a l).",
            "VernacStartTheoremProof",
            "757af5690d4a56a74b0226b28ac1a8cd29af7673"
        ],
        [
            "intros l H'; elim H'; clear H' l; auto.",
            "VernacExtend",
            "4d11969aa702777475cec5fa2d29de06d170398a"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "intros a b; simpl in |- *.",
            "VernacExtend",
            "c4c1b74916444e738a16011e2f55ac7bb91a0e10"
        ],
        [
            "generalize (refl_equal (order_fun b a)); pattern (order_fun b a) at -1 in |- *; case (order_fun b a); intros Eq0; auto.",
            "VernacExtend",
            "7fd005173cca86e31f2b3909bc3414369171a66e"
        ],
        [
            "intros a b l H'0 H'1 H'2 a0.",
            "VernacExtend",
            "5750b4e32a85b9f58d08f07214cfdaa355b6432a"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "generalize (refl_equal (order_fun a0 a)); pattern (order_fun a0 a) at -1 in |- *; case (order_fun a0 a); intros Eq0; auto.",
            "VernacExtend",
            "00da4513a71c7ae2db949fe2c5c12aea4f7ded61"
        ],
        [
            "generalize (H'2 a0); simpl in |- *.",
            "VernacExtend",
            "734bc04881995882b77d60ec78fcd1c6220604cb"
        ],
        [
            "generalize (refl_equal (order_fun a0 b)); pattern (order_fun a0 b) at -1 in |- *; case (order_fun a0 b); intros Eq1; auto.",
            "VernacExtend",
            "a6e27896c1bbd923214ff9448e389d0292626ac7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem insert_permutation : forall (L : list A) (a : A), permutation (a :: L) (insert a L).",
            "VernacStartTheoremProof",
            "f541520b414f89173b038c7849d3cf8fc5b1d0ea"
        ],
        [
            "intros L; elim L; simpl in |- *; auto.",
            "VernacExtend",
            "7147d905673cd71a2d43248441916eb5c836b3e5"
        ],
        [
            "intros b l H' a.",
            "VernacExtend",
            "5ad070f9f70d16cb3a590bfb9429c6bc3f6cbc5e"
        ],
        [
            "CaseEq (order_fun a b); intros H1; auto.",
            "VernacExtend",
            "d565b614e563b9b06b0f8e273ab14cee18382a46"
        ],
        [
            "apply permutation_trans with (l2 := b :: a :: l); auto.",
            "VernacExtend",
            "4d71b3ffeb3f6089f77f60011e352bb58ba6f3e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve insert_ordered insert_permutation : core.",
            "VernacHints",
            "f5ac7f02135771d0c0ccae9e59f1d7dee59ef662"
        ],
        [
            "Fixpoint isort (l : list A) : list A := match l with | nil => nil | b :: l1 => insert b (isort l1) end.",
            "VernacFixpoint",
            "11e8fbb88069d10465b457a2e0af2aac50442bbd"
        ],
        [
            "Theorem isort_ordered : forall l : list A, ordered order (isort l).",
            "VernacStartTheoremProof",
            "0df6ca861d8fedbc8309a9f5946d8250babe7043"
        ],
        [
            "intros l; elim l; simpl in |- *; auto.",
            "VernacExtend",
            "2bbab84295db0ef661ebb58820998893cacdee26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem isort_permutation : forall l : list A, permutation l (isort l).",
            "VernacStartTheoremProof",
            "016908fb9083568a2703f058401e35da2b302cb3"
        ],
        [
            "intros l; elim l; clear l; simpl in |- *; auto.",
            "VernacExtend",
            "63da17cb0af8523466481d4def3cbdc06e94c67a"
        ],
        [
            "intros a l H'.",
            "VernacExtend",
            "320e248a1ffce57c7ebcb270ad3c3cc3c47d037b"
        ],
        [
            "apply permutation_trans with (l2 := a :: isort l); auto.",
            "VernacExtend",
            "b1d11e4f095d333c2b5b64e93171409506ebc485"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve isort_ordered isort_permutation : core.",
            "VernacHints",
            "03e55f8d9d4fe4d19d2f09ee2a10cfac78cf0ec4"
        ],
        [
            "End ISortExample.",
            "VernacEndSegment",
            "6c71951ac2fd991d56be0b099174709d678f0d50"
        ],
        [
            "Arguments insert [A].",
            "VernacArguments",
            "542e9c2a11383fff02d8c543653c3283e15fcfdf"
        ],
        [
            "Arguments isort [A].",
            "VernacArguments",
            "daa0a9cf48d1364c1c5fbe97fc46c5f96eefbe94"
        ]
    ],
    "proofs": [
        {
            "name": "insert_ordered",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros l H'; elim H'; clear H' l; auto.",
                        "VernacExtend",
                        "4d11969aa702777475cec5fa2d29de06d170398a"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "intros a b; simpl in |- *.",
                        "VernacExtend",
                        "c4c1b74916444e738a16011e2f55ac7bb91a0e10"
                    ]
                },
                {
                    "command": [
                        "generalize (refl_equal (order_fun b a)); pattern (order_fun b a) at -1 in |- *; case (order_fun b a); intros Eq0; auto.",
                        "VernacExtend",
                        "7fd005173cca86e31f2b3909bc3414369171a66e"
                    ]
                },
                {
                    "command": [
                        "intros a b l H'0 H'1 H'2 a0.",
                        "VernacExtend",
                        "5750b4e32a85b9f58d08f07214cfdaa355b6432a"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "generalize (refl_equal (order_fun a0 a)); pattern (order_fun a0 a) at -1 in |- *; case (order_fun a0 a); intros Eq0; auto.",
                        "VernacExtend",
                        "00da4513a71c7ae2db949fe2c5c12aea4f7ded61"
                    ]
                },
                {
                    "command": [
                        "generalize (H'2 a0); simpl in |- *.",
                        "VernacExtend",
                        "734bc04881995882b77d60ec78fcd1c6220604cb"
                    ]
                },
                {
                    "command": [
                        "generalize (refl_equal (order_fun a0 b)); pattern (order_fun a0 b) at -1 in |- *; case (order_fun a0 b); intros Eq1; auto.",
                        "VernacExtend",
                        "a6e27896c1bbd923214ff9448e389d0292626ac7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "insert_permutation",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros L; elim L; simpl in |- *; auto.",
                        "VernacExtend",
                        "7147d905673cd71a2d43248441916eb5c836b3e5"
                    ]
                },
                {
                    "command": [
                        "intros b l H' a.",
                        "VernacExtend",
                        "5ad070f9f70d16cb3a590bfb9429c6bc3f6cbc5e"
                    ]
                },
                {
                    "command": [
                        "CaseEq (order_fun a b); intros H1; auto.",
                        "VernacExtend",
                        "d565b614e563b9b06b0f8e273ab14cee18382a46"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (l2 := b :: a :: l); auto.",
                        "VernacExtend",
                        "4d71b3ffeb3f6089f77f60011e352bb58ba6f3e7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isort_ordered",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "intros l; elim l; simpl in |- *; auto.",
                        "VernacExtend",
                        "2bbab84295db0ef661ebb58820998893cacdee26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isort_permutation",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros l; elim l; clear l; simpl in |- *; auto.",
                        "VernacExtend",
                        "63da17cb0af8523466481d4def3cbdc06e94c67a"
                    ]
                },
                {
                    "command": [
                        "intros a l H'.",
                        "VernacExtend",
                        "320e248a1ffce57c7ebcb270ad3c3cc3c47d037b"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (l2 := a :: isort l); auto.",
                        "VernacExtend",
                        "b1d11e4f095d333c2b5b64e93171409506ebc485"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}