{
    "filename": "theories/Huffman.v",
    "coq_project": "huffman",
    "vernac_cmds": [
        [
            "From Huffman Require Import Code.",
            "VernacRequire",
            "8fc8fc8171aeaf68e1ca136f197ff428107f4a1a"
        ],
        [
            "From Huffman Require Import BTree.",
            "VernacRequire",
            "7724d0de74b2fe2993c0709329fb64b9040a8a39"
        ],
        [
            "From Huffman Require Import Build.",
            "VernacRequire",
            "78bbf0bd093aaacb8aa0e5beb1cb2feb1e7870d9"
        ],
        [
            "From Huffman Require Import PBTree2BTree.",
            "VernacRequire",
            "8e867e6919593d4605a82a05659a23952e070bae"
        ],
        [
            "From Huffman Require Import Restrict.",
            "VernacRequire",
            "3df40fba1e9c1d34cb4c087dadfefd11d5bf0230"
        ],
        [
            "Section Huffman.",
            "VernacBeginSection",
            "4a4b24eba7959b6010e3c92481d076621ec4342f"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable empty : A.",
            "VernacAssumption",
            "9bda1a8ce5f65b54cf16331e6806aa4357a2db46"
        ],
        [
            "Variable eqA_dec : forall a b : A, {a = b} + {a <> b}.",
            "VernacAssumption",
            "c7dce40a1a1159550fac93e6bff94107f0f6b383"
        ],
        [
            "Variable m : list A.",
            "VernacAssumption",
            "68908da473f0e0fe113af17f2c72010e2a9a4ba3"
        ],
        [
            "Hypothesis frequency_more_than_one : 1 < length (frequency_list eqA_dec m).",
            "VernacAssumption",
            "853b5c783080f9f666a227c216c9399afde5f480"
        ],
        [
            "Theorem not_null_m : m <> nil.",
            "VernacStartTheoremProof",
            "36d99ce916676d88a0ea4c5656ff659860b80933"
        ],
        [
            "generalize frequency_more_than_one; case m; simpl in |- *; auto.",
            "VernacExtend",
            "e81f856b1ef2fa4040caa47e5dc4c45fb8b0e29f"
        ],
        [
            "intros H; Contradict H; auto with arith.",
            "VernacExtend",
            "e3c1b652b9ec2ad2b1e4189121d4a3e4a5980aaa"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem huffman_build_minimun : forall (c : code A) (t : btree A), unique_prefix c -> in_alphabet m c -> build (fun x => number_of_occurrences eqA_dec x m) (map (fun x => leaf (fst x)) (frequency_list eqA_dec m)) t -> weight eqA_dec m (compute_code t) <= weight eqA_dec m c.",
            "VernacStartTheoremProof",
            "edc082c98c0f83d85c0cdbf5ae3c7e6487fd5bb6"
        ],
        [
            "intros c t H1 H2 H3; unfold weight in |- *.",
            "VernacExtend",
            "f2017c9afa3cdc0bdc6833283cbbd087aef8b61f"
        ],
        [
            "rewrite restrict_code_encode_length with (c := c).",
            "VernacExtend",
            "bf981b483a821f8175b3cd920c0571a215b864fa"
        ],
        [
            "apply le_trans with (length (encode eqA_dec (compute_code (to_btree (pbbuild empty (restrict_code eqA_dec m c)))) m)); auto.",
            "VernacExtend",
            "0ba9a65324c0e0294ab103dfe2006211deee316f"
        ],
        [
            "repeat rewrite weight_tree_compute with (f := fun x => number_of_occurrences eqA_dec x m); auto.",
            "VernacExtend",
            "86c61070f4c50c8f137cf3f4eb6fb2e279586ea8"
        ],
        [
            "cut (cover_min A (fun x : A => number_of_occurrences eqA_dec x m) (map (fun x : A * nat => leaf (fst x)) (frequency_list eqA_dec m)) t).",
            "VernacExtend",
            "c899879aee8457cb6f0259a31d8660c3c80d8fc4"
        ],
        [
            "intros (HH1, HH2); apply HH2; auto.",
            "VernacExtend",
            "eab43709f3d9c1394cfac0fcd6832c32d2d25402"
        ],
        [
            "apply cover_permutation with (l1 := map (fun x : A => leaf x) (all_leaves (to_btree (pbbuild empty (restrict_code eqA_dec m c))))).",
            "VernacExtend",
            "1d08f16eaf51e39f8d0e950b96a8e98fb343050f"
        ],
        [
            "apply cover_all_leaves.",
            "VernacExtend",
            "8e32dfd8a848a64e4bc46782e27ff150c26a0538"
        ],
        [
            "replace (map (fun x : A * nat => leaf (fst x)) (frequency_list eqA_dec m)) with (map (fun x : A => leaf x) (map (fst (B:=_)) (frequency_list eqA_dec m))).",
            "VernacExtend",
            "25250486ddb915933487138b3448f0e767a357fb"
        ],
        [
            "apply permutation_map.",
            "VernacExtend",
            "79b90248618397d68eafece3eeba95d972451e2c"
        ],
        [
            "rewrite to_btree_all_leaves.",
            "VernacExtend",
            "9704ef869db33fc03386175260243faa0ce631b5"
        ],
        [
            "rewrite frequency_list_restric_code_map with (c := c).",
            "VernacExtend",
            "78648e53249d95f997da0f96110992a2d362f2c2"
        ],
        [
            "apply permutation_sym; apply all_pbleaves_pbbuild.",
            "VernacExtend",
            "c7be2a62241761d4030c8edc46fe8f5395d5ce16"
        ],
        [
            "apply restrict_not_null with (eqA_dec := eqA_dec); auto.",
            "VernacExtend",
            "00b635040db1bcd804535563bf7ec7b2d7e7dd5c"
        ],
        [
            "apply not_null_m; auto.",
            "VernacExtend",
            "e34df250dc4b065d6561cb99482678b20d6affee"
        ],
        [
            "apply restrict_unique_prefix; auto.",
            "VernacExtend",
            "394755454b15c9b8bd07d5fb4c024d2968893241"
        ],
        [
            "apply frequency_not_null with (1 := frequency_more_than_one); auto.",
            "VernacExtend",
            "4ede8478b906dd1c899a8c0e58a6e856d2bb6388"
        ],
        [
            "elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "6a6385c2b4a96188e2167b147d357f5a5bcc2299"
        ],
        [
            "intros a0 l H4; apply f_equal2 with (f := cons (A:=btree A)); auto.",
            "VernacExtend",
            "6d1e4acb68169f9391d54ce7004726dc0627e705"
        ],
        [
            "apply build_correct; auto.",
            "VernacExtend",
            "12a6609d073e4ca60305fd5d1b4768bf9fcc90b0"
        ],
        [
            "generalize frequency_more_than_one; case (frequency_list eqA_dec m); simpl in |- *; auto.",
            "VernacExtend",
            "bafa6d0e1e697caac40dccedeb23a32c017cc45b"
        ],
        [
            "intros H; Contradict H; auto with arith.",
            "VernacExtend",
            "e3c1b652b9ec2ad2b1e4189121d4a3e4a5980aaa"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "apply to_btree_distinct_leaves; auto.",
            "VernacExtend",
            "642f153f5fe2e4c29a3fa9f3986fbe902ba625d5"
        ],
        [
            "apply pbbuild_distinct_pbleaves; auto.",
            "VernacExtend",
            "66bfa92300d3f783e0b7c08144689fa3f321ab32"
        ],
        [
            "apply restrict_unique_prefix; auto.",
            "VernacExtend",
            "394755454b15c9b8bd07d5fb4c024d2968893241"
        ],
        [
            "apply frequency_not_null with (1 := frequency_more_than_one); auto.",
            "VernacExtend",
            "4ede8478b906dd1c899a8c0e58a6e856d2bb6388"
        ],
        [
            "case (cover_ordered_cover _ (map (fun x : A * nat => leaf (fst x)) (frequency_list eqA_dec m)) t).",
            "VernacExtend",
            "59db1351a49780379bb0cc895de68738d3b6ef8a"
        ],
        [
            "apply build_cover with (1 := H3).",
            "VernacExtend",
            "e276727086c7c45051d5fe747318bbc5e22d48c0"
        ],
        [
            "intros l1 (H4, H5).",
            "VernacExtend",
            "06eaacaca11099e271b928bd509078dd685b1dff"
        ],
        [
            "apply all_leaves_unique; auto.",
            "VernacExtend",
            "973a5b193b4c41b634b5f4b8ba79cd0931722bc8"
        ],
        [
            "case permutation_map_ex with (1 := H4); auto.",
            "VernacExtend",
            "f3db2097f97ccd59bfebecc89aa118e31a1aed52"
        ],
        [
            "intros l2 (HH1, HH2).",
            "VernacExtend",
            "921e4c951a1e68ae5ad60ca7635878bd1e235acf"
        ],
        [
            "rewrite ulist_ordered_cover with (l1 := l1) (l2 := map (fst (B:=_)) l2); auto.",
            "VernacExtend",
            "e5b4532d3929d4ae25d5ece482e33c35ee46f4c1"
        ],
        [
            "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
            "VernacExtend",
            "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
        ],
        [
            "apply permutation_map; auto.",
            "VernacExtend",
            "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "apply unique_key_ulist; auto.",
            "VernacExtend",
            "571dec336c3beb4163415700ebc9515c3b083977"
        ],
        [
            "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
            "VernacExtend",
            "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
        ],
        [
            "apply permutation_map; auto.",
            "VernacExtend",
            "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "apply unique_key_ulist; auto.",
            "VernacExtend",
            "571dec336c3beb4163415700ebc9515c3b083977"
        ],
        [
            "rewrite HH2; elim l2; simpl in |- *; auto.",
            "VernacExtend",
            "0028fdf6c3dcf68fdd6a18e995fc71b5e4989e65"
        ],
        [
            "intros a0 l H6; apply f_equal2 with (f := cons (A:=btree A)); auto.",
            "VernacExtend",
            "8423c71487149babdbfb9a9c534c04363fb0a1b2"
        ],
        [
            "rewrite encode_permutation with (c1 := restrict_code eqA_dec m c) (c2 := compute_pbcode (pbbuild empty (restrict_code eqA_dec m c))).",
            "VernacExtend",
            "0752937da0f8401382dcd21dbe06a17082f86ee6"
        ],
        [
            "generalize (to_btree_smaller _ eqA_dec (pbbuild empty (restrict_code eqA_dec m c))).",
            "VernacExtend",
            "8f661b5bad8e95f6aed68dec374d3474962a1d71"
        ],
        [
            "intros H4; pattern m at 2 4 in |- *; elim m; simpl in |- *; auto.",
            "VernacExtend",
            "4a8900009d45c092461345c69eb09c5504f1ddfc"
        ],
        [
            "intros a0 l H5; repeat rewrite length_app.",
            "VernacExtend",
            "d988072107904861691aa4f83b21683a83fb6c96"
        ],
        [
            "apply plus_le_compat; auto.",
            "VernacExtend",
            "63192fa714d7f77c9e2de5c0fd46ab265b4684a0"
        ],
        [
            "apply permutation_sym; apply pbbuild_compute_perm.",
            "VernacExtend",
            "0f26f317f4a5de40949cbbabf957dcce365ea43d"
        ],
        [
            "apply restrict_not_null with (eqA_dec := eqA_dec); auto.",
            "VernacExtend",
            "00b635040db1bcd804535563bf7ec7b2d7e7dd5c"
        ],
        [
            "apply not_null_m; auto.",
            "VernacExtend",
            "e34df250dc4b065d6561cb99482678b20d6affee"
        ],
        [
            "apply restrict_unique_prefix; auto.",
            "VernacExtend",
            "394755454b15c9b8bd07d5fb4c024d2968893241"
        ],
        [
            "apply frequency_not_null with (1 := frequency_more_than_one); auto.",
            "VernacExtend",
            "4ede8478b906dd1c899a8c0e58a6e856d2bb6388"
        ],
        [
            "apply restrict_unique_prefix; auto.",
            "VernacExtend",
            "394755454b15c9b8bd07d5fb4c024d2968893241"
        ],
        [
            "apply frequency_not_null with (1 := frequency_more_than_one); auto.",
            "VernacExtend",
            "4ede8478b906dd1c899a8c0e58a6e856d2bb6388"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition huffman_aux : forall l : list (nat * code A), l <> nil -> ordered (fun x y => fst x <= fst y) l -> (forall a, In a l -> compute_code (to_btree (pbbuild empty (snd a))) = snd a) -> (forall a, In a l -> sum_leaves (fun x => number_of_occurrences eqA_dec x m) (to_btree (pbbuild empty (snd a))) = fst a) -> (forall a, In a l -> snd a <> nil) -> {c : code A | compute_code (to_btree (pbbuild empty c)) = c /\\ build (fun x => number_of_occurrences eqA_dec x m) (map (fun x => to_btree (pbbuild empty (snd x))) l) (to_btree (pbbuild empty c))}.",
            "VernacDefinition",
            "487e9b236d3ae9dd0d64f4694709adb29126d8e6"
        ],
        [
            "intros l; elim l using list_length_induction; clear l.",
            "VernacExtend",
            "0899868a99902b0c0dad0b47fd6655971b7f28f4"
        ],
        [
            "intros l; case l.",
            "VernacExtend",
            "4ee3bf15234f8d0e48455d55ebe68019c5831f42"
        ],
        [
            "intros H H0; case H0; auto.",
            "VernacExtend",
            "c31c03beb9e256c56a1ff4d088277162263c8880"
        ],
        [
            "intros p l0; case p; intros n1 c1; case l0; clear p l0.",
            "VernacExtend",
            "3a06f02f9bc8ad14f6eafd6f433e4444b6888c9e"
        ],
        [
            "intros H H0 H1 H2 H3 H4; exists c1; simpl in |- *; repeat (split; auto).",
            "VernacExtend",
            "2a0ecf728de7ae8d5aa8c0b7eff4b54d57d33504"
        ],
        [
            "apply H2 with (a := (n1, c1)); auto with datatypes.",
            "VernacExtend",
            "bb164f6fb77512c01cbb00b515898c86a14b313e"
        ],
        [
            "apply build_one.",
            "VernacExtend",
            "e03f6357a0ae5e2be0a1c4306ed2127b74a103ea"
        ],
        [
            "intros p l1; case p; intros n2 c2.",
            "VernacExtend",
            "e0cc21060a4a266ec3b08f63d6d5b857217fad11"
        ],
        [
            "intros H H0 H1 H2 H3 H4.",
            "VernacExtend",
            "809760564dc9eab1a38cc00c4245104333f9e5ae"
        ],
        [
            "case H with (l2 := insert (fun x y => le_bool (fst x) (fst y)) (n1 + n2, map (fun x => (fst x, false :: snd x)) c1 ++ map (fun x => (fst x, true :: snd x)) c2) l1); auto.",
            "VernacExtend",
            "99625d21ff57fd9e1a770fc9a21584c775113259"
        ],
        [
            "rewrite permutation_length with (m := (n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1).",
            "VernacExtend",
            "65ef81bd025a1198202cbe43591c2b4f5e39ccb6"
        ],
        [
            "simpl in |- *; auto with arith.",
            "VernacExtend",
            "ab3fa8d215cdc73141fcf1a11781cfe38de440ec"
        ],
        [
            "apply permutation_sym; apply insert_permutation.",
            "VernacExtend",
            "014e6bfd84c8035258402ae357727d0f26b4eb31"
        ],
        [
            "red in |- *; intros H5; absurd ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1 = nil).",
            "VernacExtend",
            "fd6e4aa382f9fc41137fc68b4b68ffbef0f94d7a"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "apply permutation_nil_inv; auto.",
            "VernacExtend",
            "c859640db07cbdcf16cbea0c88ad4f676b446e86"
        ],
        [
            "unfold code in H5; rewrite <- H5; apply insert_permutation.",
            "VernacExtend",
            "b1e218fb1b608c19fab81157449c7b85a05569b8"
        ],
        [
            "apply insert_ordered; auto.",
            "VernacExtend",
            "0e68c5ff515530ce2ef17fc7812c75ef8d7b78c0"
        ],
        [
            "intros a b H5; apply le_bool_correct3; auto.",
            "VernacExtend",
            "f80372f70ec182b38c1617106d5a0ffb5e3fbc47"
        ],
        [
            "intros a b H5; apply le_bool_correct4; auto.",
            "VernacExtend",
            "7a201116ba244626e8b527d266eb3a386d9636fb"
        ],
        [
            "apply ordered_inv with (a := (n2, c2)).",
            "VernacExtend",
            "37005b09ef0d97c5a759f6e145bfb247ace69feb"
        ],
        [
            "apply ordered_inv with (a := (n1, c1)); auto.",
            "VernacExtend",
            "0298585d63cc053424a196d988d0d62106b41b9d"
        ],
        [
            "intros a H5.",
            "VernacExtend",
            "3878441b237d0413007eaaf6109fb3d0030cde41"
        ],
        [
            "cut (In a ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)).",
            "VernacExtend",
            "3da250a76da32b4e6dfce8e74977cada1ec73865"
        ],
        [
            "simpl in |- *; intros [H6| H6]; try rewrite <- H6; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "f932489562be073326ab6db499abf5e657d43f90"
        ],
        [
            "rewrite pbbuild_pbnode; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "887b756d7d830c32d3352e1340fc8b08dd0dc739"
        ],
        [
            "apply f_equal2 with (f := app (A:=A * list bool)); auto.",
            "VernacExtend",
            "fbbfeaf162431888d8d145bd7dea386944dca140"
        ],
        [
            "generalize (H2 (n1, c1)); simpl in |- *; intros tmp; rewrite tmp; clear tmp; auto with datatypes.",
            "VernacExtend",
            "86c437aad2e92345179ffce7985d23c299222f23"
        ],
        [
            "elim c1; simpl in |- *; auto.",
            "VernacExtend",
            "6cc5d49fc3b7dcda02fbdd01e8d45a1b095f693d"
        ],
        [
            "intros a0; case a0; simpl in |- *; auto.",
            "VernacExtend",
            "7baef3b34c9b66ddd782e7dbae9235a74cd5dd7c"
        ],
        [
            "intros a1 l0 l2 H7; apply f_equal2 with (f := cons (A:=A * list bool)); auto.",
            "VernacExtend",
            "642b905d29cac35de1d6b1c53a55a383050c9a4f"
        ],
        [
            "generalize (H2 (n2, c2)); simpl in |- *; intros tmp; rewrite tmp; clear tmp; auto with datatypes.",
            "VernacExtend",
            "7b9f891f4685d7052a6abd745c2029799246cf48"
        ],
        [
            "elim c2; simpl in |- *; auto.",
            "VernacExtend",
            "ed8e69b99c019d7da9b554040fed944a2002404f"
        ],
        [
            "intros a0; case a0; simpl in |- *; auto.",
            "VernacExtend",
            "7baef3b34c9b66ddd782e7dbae9235a74cd5dd7c"
        ],
        [
            "intros a1 l0 l2 H7; apply f_equal2 with (f := cons (A:=A * list bool)); auto with datatypes.",
            "VernacExtend",
            "daee522d672a1639fa8d047ead1805918879abff"
        ],
        [
            "generalize (H4 (n1, c1)); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "77a871364e0c6836785739b2b2abfea94dde36bd"
        ],
        [
            "generalize (H4 (n2, c2)); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "261579f8a00d4067284e722b873adb10ae7f1898"
        ],
        [
            "apply permutation_in with (2 := H5).",
            "VernacExtend",
            "5cf81bac6db25bf18e1ded1a466a7e56b9de9295"
        ],
        [
            "apply permutation_sym; apply insert_permutation.",
            "VernacExtend",
            "014e6bfd84c8035258402ae357727d0f26b4eb31"
        ],
        [
            "intros a H5.",
            "VernacExtend",
            "3878441b237d0413007eaaf6109fb3d0030cde41"
        ],
        [
            "cut (In a ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)).",
            "VernacExtend",
            "3da250a76da32b4e6dfce8e74977cada1ec73865"
        ],
        [
            "simpl in |- *; intros [H6| H6]; try rewrite <- H6; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "f932489562be073326ab6db499abf5e657d43f90"
        ],
        [
            "rewrite pbbuild_pbnode; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "887b756d7d830c32d3352e1340fc8b08dd0dc739"
        ],
        [
            "apply f_equal2 with (f := plus); auto.",
            "VernacExtend",
            "df2b05fd4759a7bae2a0b591601a15152b036e47"
        ],
        [
            "generalize (H3 (n1, c1)); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "48ee99fa0defc88b23c5435cfea0fd1ddac493bf"
        ],
        [
            "generalize (H3 (n2, c2)); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "6f1ba969fb4ba57683dbc99146d3baa8005298cc"
        ],
        [
            "generalize (H4 (n1, c1)); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "77a871364e0c6836785739b2b2abfea94dde36bd"
        ],
        [
            "generalize (H4 (n2, c2)); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "261579f8a00d4067284e722b873adb10ae7f1898"
        ],
        [
            "apply permutation_in with (2 := H5).",
            "VernacExtend",
            "5cf81bac6db25bf18e1ded1a466a7e56b9de9295"
        ],
        [
            "apply permutation_sym; apply insert_permutation.",
            "VernacExtend",
            "014e6bfd84c8035258402ae357727d0f26b4eb31"
        ],
        [
            "intros a H5.",
            "VernacExtend",
            "3878441b237d0413007eaaf6109fb3d0030cde41"
        ],
        [
            "cut (In a ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)).",
            "VernacExtend",
            "3da250a76da32b4e6dfce8e74977cada1ec73865"
        ],
        [
            "simpl in |- *; intros [H6| H6]; try rewrite <- H6; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "f932489562be073326ab6db499abf5e657d43f90"
        ],
        [
            "generalize (H4 (n1, c1)); case c1; simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "b6aa2bfc85da4886baac6ff31ee0a658a5d2d1dc"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "apply permutation_in with (2 := H5).",
            "VernacExtend",
            "5cf81bac6db25bf18e1ded1a466a7e56b9de9295"
        ],
        [
            "apply permutation_sym; apply insert_permutation.",
            "VernacExtend",
            "014e6bfd84c8035258402ae357727d0f26b4eb31"
        ],
        [
            "intros c3 (HC1, HC2); exists c3; split; auto.",
            "VernacExtend",
            "8fe4dca9958859a090c656712fd7877f6d3d6cc3"
        ],
        [
            "apply build_step with (2 := HC2); auto.",
            "VernacExtend",
            "9f72bfe410b78db786d1e7bfbcb714db8fe09f67"
        ],
        [
            "simpl in |- *; red in |- *.",
            "VernacExtend",
            "5ce1933337993204b70e1da5b6dccaeb5b89c055"
        ],
        [
            "exists (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) l1); exists (to_btree (pbbuild empty c1)); exists (to_btree (pbbuild empty c2)); repeat (split; auto).",
            "VernacExtend",
            "66827485d775e785372e25ef2b2ca51149f4b2fe"
        ],
        [
            "change (ordered (sum_order (fun x : A => number_of_occurrences eqA_dec x m)) (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) ((n1, c1) :: (n2, c2) :: l1))) in |- *.",
            "VernacExtend",
            "42bff3f5032753fa3d6b0552168194679e5130fd"
        ],
        [
            "apply ordered_map_inv; auto.",
            "VernacExtend",
            "88241fd9c931ef4ea0641d5e3015739865314d42"
        ],
        [
            "generalize H3 H1; elim ((n1, c1) :: (n2, c2) :: l1); (simpl in |- *; auto).",
            "VernacExtend",
            "82014583179789cdef3ed8f1e1d90d04a9e67bc2"
        ],
        [
            "intros a l0; case a; case l0; simpl in |- *; auto; clear a l0.",
            "VernacExtend",
            "4d7edb48f151dd451b327c848678314dd0846642"
        ],
        [
            "intros p0 l0 n4 c4; case p0; intros n5 c5; simpl in |- *; clear p0; auto.",
            "VernacExtend",
            "112a000e146fe41a01708c5b0b56fe0583078bc9"
        ],
        [
            "intros H5 H6 H7; apply ordered_cons; unfold sum_order in |- *; simpl in |- *; auto.",
            "VernacExtend",
            "077cad802e1e38169b3eccee01ef4d5c732a88fb"
        ],
        [
            "generalize (H6 (n4, c4)); simpl in |- *; intros tmp; rewrite tmp; clear tmp; auto with datatypes.",
            "VernacExtend",
            "4b11e8d7511ec28725c79e1f9f07ff94ee3f419f"
        ],
        [
            "generalize (H6 (n5, c5)); simpl in |- *; intros tmp; rewrite tmp; clear tmp; auto with datatypes.",
            "VernacExtend",
            "6c4ec79ff19f73ea372d65e2e617d8256ff710b9"
        ],
        [
            "change (fst (n4, c4) <= fst (n5, c5)) in |- *.",
            "VernacExtend",
            "43132f961a8cc5b5988348b71952ee4455fb89ee"
        ],
        [
            "apply ordered_inv_order with (1 := H7); auto.",
            "VernacExtend",
            "3f3893205784cac4e0b8e9d6949b2a67c79ec234"
        ],
        [
            "apply H5; auto.",
            "VernacExtend",
            "f95c432f26801c24be028230cd4c239b76d60ab2"
        ],
        [
            "apply ordered_inv with (1 := H7); auto.",
            "VernacExtend",
            "837f2772ee44beec5a0acbbe91f21d1c70f4fb12"
        ],
        [
            "apply permutation_trans with (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)); auto.",
            "VernacExtend",
            "7df2d847b2e77ac567f404e9620f513aac99c3b7"
        ],
        [
            "apply permutation_map; auto.",
            "VernacExtend",
            "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
        ],
        [
            "apply permutation_sym; apply insert_permutation.",
            "VernacExtend",
            "014e6bfd84c8035258402ae357727d0f26b4eb31"
        ],
        [
            "apply permutation_trans with (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)); auto.",
            "VernacExtend",
            "7df2d847b2e77ac567f404e9620f513aac99c3b7"
        ],
        [
            "simpl in |- *; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "rewrite pbbuild_pbnode; auto.",
            "VernacExtend",
            "4d86f3c5367e5a3ec822666e87653e9d3b2b2617"
        ],
        [
            "generalize (H4 (n1, c1)); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "77a871364e0c6836785739b2b2abfea94dde36bd"
        ],
        [
            "generalize (H4 (n2, c2)); simpl in |- *; auto with datatypes.",
            "VernacExtend",
            "261579f8a00d4067284e722b873adb10ae7f1898"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition huffman : {c : code A | unique_prefix c /\\ in_alphabet m c /\\ (forall c1 : code A, unique_prefix c1 -> in_alphabet m c1 -> weight eqA_dec m c <= weight eqA_dec m c1)}.",
            "VernacDefinition",
            "b6b0f844e0c29cbaf4f08e280213c93ce18adc29"
        ],
        [
            "case (huffman_aux (isort (fun x y => le_bool (fst x) (fst y)) (map (fun x => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m)))).",
            "VernacExtend",
            "f950f182d046d2a9fa33b19a1aacf8f7470c8d34"
        ],
        [
            "generalize frequency_more_than_one; case (frequency_list eqA_dec m); simpl in |- *; auto.",
            "VernacExtend",
            "bafa6d0e1e697caac40dccedeb23a32c017cc45b"
        ],
        [
            "intros H; Contradict H; auto with arith.",
            "VernacExtend",
            "e3c1b652b9ec2ad2b1e4189121d4a3e4a5980aaa"
        ],
        [
            "intros p l frequency_more_than_one_bis H.",
            "VernacExtend",
            "4d5527b6e357b904f666378aa8399c79a3657063"
        ],
        [
            "absurd (In (A:=nat * code A) (snd p, (fst p, nil) :: nil) nil).",
            "VernacExtend",
            "26cec51d4b1e77cb755dc40213f9ea41e490d8a6"
        ],
        [
            "simpl in |- *; intros H1; case H1.",
            "VernacExtend",
            "300de7fca98306b0b84c97b7cd8fb254909e721c"
        ],
        [
            "rewrite <- H; apply permutation_in with ((snd p, (fst p, nil) :: nil) :: isort (fun x y : nat * list (A * list bool) => le_bool (fst x) (fst y)) (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) l)); auto with datatypes.",
            "VernacExtend",
            "2a522e0ff80614936e58ed1a6292baae1ec3e9b1"
        ],
        [
            "apply insert_permutation.",
            "VernacExtend",
            "419b35a3868200753ed7d5fd26929e7c714f1f8c"
        ],
        [
            "apply isort_ordered; auto.",
            "VernacExtend",
            "7585d4a0a9bb6b939e15be724b99684a7a879cfb"
        ],
        [
            "intros a b H0; apply le_bool_correct3; auto.",
            "VernacExtend",
            "50a06a069f0b11c53bdeee619fd4425d9d04cec8"
        ],
        [
            "intros a b H0; apply le_bool_correct4; auto.",
            "VernacExtend",
            "9ba38015f91962a78e6020fb2816ac99223b101a"
        ],
        [
            "intros a H0; cut (In a (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m))).",
            "VernacExtend",
            "c68d705f456f66bec0fd64ec56323db73664bb57"
        ],
        [
            "intros H1; case in_map_inv with (1 := H1); auto.",
            "VernacExtend",
            "5141fa68fc7b30766c3f39373fbccf62b555079f"
        ],
        [
            "intros x; case x; simpl in |- *; auto.",
            "VernacExtend",
            "50089fbf1a2c71d8dd0d9f5a9ae6565c4e941619"
        ],
        [
            "intros a0 n (H2, H3); rewrite H3; simpl in |- *; auto.",
            "VernacExtend",
            "bfbb7d592925d5e14d55029d721b853fac80ec80"
        ],
        [
            "apply permutation_in with (2 := H0); auto.",
            "VernacExtend",
            "281217ab6b513653776b34f7aebc41eee1ccac62"
        ],
        [
            "apply permutation_sym; apply isort_permutation; auto.",
            "VernacExtend",
            "103d67dc393c9540a26281f8f5dea166a2403e21"
        ],
        [
            "intros a H0; cut (In a (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m))).",
            "VernacExtend",
            "c68d705f456f66bec0fd64ec56323db73664bb57"
        ],
        [
            "intros H1; case in_map_inv with (1 := H1); auto.",
            "VernacExtend",
            "5141fa68fc7b30766c3f39373fbccf62b555079f"
        ],
        [
            "intros x; case x; simpl in |- *; auto.",
            "VernacExtend",
            "50089fbf1a2c71d8dd0d9f5a9ae6565c4e941619"
        ],
        [
            "intros a0 n (H2, H3); rewrite H3; simpl in |- *; auto.",
            "VernacExtend",
            "bfbb7d592925d5e14d55029d721b853fac80ec80"
        ],
        [
            "apply unique_key_in_inv with (a := a0) (l := frequency_list eqA_dec m); auto.",
            "VernacExtend",
            "4cf64b02ec5f6190d342431899baf7a74361f892"
        ],
        [
            "apply frequency_number_of_occurrences; auto.",
            "VernacExtend",
            "d3127f118e2a65b1623d3299a5752053b84b1514"
        ],
        [
            "apply frequency_list_in with (1 := H2); auto.",
            "VernacExtend",
            "0bd41c0832a83988023fb09f621453d72d015293"
        ],
        [
            "apply permutation_in with (2 := H0); auto.",
            "VernacExtend",
            "281217ab6b513653776b34f7aebc41eee1ccac62"
        ],
        [
            "apply permutation_sym; apply isort_permutation; auto.",
            "VernacExtend",
            "103d67dc393c9540a26281f8f5dea166a2403e21"
        ],
        [
            "intros a H0; cut (In a (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m))).",
            "VernacExtend",
            "c68d705f456f66bec0fd64ec56323db73664bb57"
        ],
        [
            "intros H1; case in_map_inv with (1 := H1); auto.",
            "VernacExtend",
            "5141fa68fc7b30766c3f39373fbccf62b555079f"
        ],
        [
            "intros x; case x; simpl in |- *; auto.",
            "VernacExtend",
            "50089fbf1a2c71d8dd0d9f5a9ae6565c4e941619"
        ],
        [
            "intros a0 n (H2, H3); rewrite H3; simpl in |- *; auto.",
            "VernacExtend",
            "bfbb7d592925d5e14d55029d721b853fac80ec80"
        ],
        [
            "intros; discriminate.",
            "VernacExtend",
            "1ec997c70ceedc981f8865c1573c00554b73dfd4"
        ],
        [
            "apply permutation_in with (2 := H0); auto.",
            "VernacExtend",
            "281217ab6b513653776b34f7aebc41eee1ccac62"
        ],
        [
            "apply permutation_sym; apply isort_permutation; auto.",
            "VernacExtend",
            "103d67dc393c9540a26281f8f5dea166a2403e21"
        ],
        [
            "intros c (Hc1, Hc2); exists c.",
            "VernacExtend",
            "9f7bcc119f0873201ed591313d7b027071b8f01d"
        ],
        [
            "cut (build (fun x : A => number_of_occurrences eqA_dec x m) (map (fun x => leaf (fst x)) (frequency_list eqA_dec m)) (to_btree (pbbuild empty c))); [ intros Hc3 | idtac ].",
            "VernacExtend",
            "ecf5f0317a874c430b4281b54d3de567b37f74af"
        ],
        [
            "case (cover_ordered_cover _ (map (fun x : A * nat => leaf (fst x)) (frequency_list eqA_dec m)) (to_btree (pbbuild empty c))).",
            "VernacExtend",
            "85a424999bbf736acfff714b3b04f93bbad773f5"
        ],
        [
            "apply build_cover with (1 := Hc3).",
            "VernacExtend",
            "ba2c5bea6d08b6abbea7f196851b41a38b583e64"
        ],
        [
            "intros l1 (H4, H5).",
            "VernacExtend",
            "06eaacaca11099e271b928bd509078dd685b1dff"
        ],
        [
            "case permutation_map_ex with (1 := H4); auto.",
            "VernacExtend",
            "f3db2097f97ccd59bfebecc89aa118e31a1aed52"
        ],
        [
            "intros l2 (HH1, HH2).",
            "VernacExtend",
            "921e4c951a1e68ae5ad60ca7635878bd1e235acf"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "rewrite <- Hc1; auto.",
            "VernacExtend",
            "4e5f9ad73f564f8eb3141e1ea117d24a0da63da4"
        ],
        [
            "apply btree_unique_prefix; auto.",
            "VernacExtend",
            "789c73711d79484687a9f9df3a684435c8528f18"
        ],
        [
            "apply all_leaves_unique; auto.",
            "VernacExtend",
            "973a5b193b4c41b634b5f4b8ba79cd0931722bc8"
        ],
        [
            "rewrite ulist_ordered_cover with (l1 := l1) (l2 := map (fst (B:=_)) l2); auto.",
            "VernacExtend",
            "e5b4532d3929d4ae25d5ece482e33c35ee46f4c1"
        ],
        [
            "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
            "VernacExtend",
            "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
        ],
        [
            "apply permutation_map; auto.",
            "VernacExtend",
            "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "apply unique_key_ulist; auto.",
            "VernacExtend",
            "571dec336c3beb4163415700ebc9515c3b083977"
        ],
        [
            "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
            "VernacExtend",
            "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
        ],
        [
            "apply permutation_map; auto.",
            "VernacExtend",
            "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "apply unique_key_ulist; auto.",
            "VernacExtend",
            "571dec336c3beb4163415700ebc9515c3b083977"
        ],
        [
            "rewrite HH2; elim l2; simpl in |- *; auto.",
            "VernacExtend",
            "0028fdf6c3dcf68fdd6a18e995fc71b5e4989e65"
        ],
        [
            "intros a0 l H6; apply f_equal2 with (f := cons (A:=btree A)); auto.",
            "VernacExtend",
            "8423c71487149babdbfb9a9c534c04363fb0a1b2"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "rewrite <- Hc1; auto.",
            "VernacExtend",
            "4e5f9ad73f564f8eb3141e1ea117d24a0da63da4"
        ],
        [
            "apply in_alphabet_compute_code; auto.",
            "VernacExtend",
            "9f493c60411101c670e2be8ae08fcf3cf2ab5fcc"
        ],
        [
            "intros a H; apply all_leaves_inb.",
            "VernacExtend",
            "f13ebf29bf54e70a1d8bcc50d84acac446ace876"
        ],
        [
            "rewrite ulist_ordered_cover with (l1 := l1) (l2 := map (fst (B:=_)) l2); auto.",
            "VernacExtend",
            "e5b4532d3929d4ae25d5ece482e33c35ee46f4c1"
        ],
        [
            "apply permutation_in with (map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
            "VernacExtend",
            "2723ad3306da767240aa6fa3a0a1d18eace3dbc3"
        ],
        [
            "apply permutation_map; apply permutation_sym; auto.",
            "VernacExtend",
            "7b8b8d88b7c327978714b1adf0e2a57ae7138007"
        ],
        [
            "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
            "VernacExtend",
            "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
        ],
        [
            "apply permutation_map; auto.",
            "VernacExtend",
            "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "apply unique_key_ulist; auto.",
            "VernacExtend",
            "571dec336c3beb4163415700ebc9515c3b083977"
        ],
        [
            "rewrite HH2; elim l2; simpl in |- *; auto.",
            "VernacExtend",
            "0028fdf6c3dcf68fdd6a18e995fc71b5e4989e65"
        ],
        [
            "intros a0 l H6; apply f_equal2 with (f := cons (A:=btree A)); auto.",
            "VernacExtend",
            "8423c71487149babdbfb9a9c534c04363fb0a1b2"
        ],
        [
            "intros c1 H H0.",
            "VernacExtend",
            "4e0214ed879d52008238483a3cbdae0994970783"
        ],
        [
            "rewrite <- Hc1.",
            "VernacExtend",
            "93e023ce25ab15a247528e4d58b79d8a2c7f142e"
        ],
        [
            "apply huffman_build_minimun; auto.",
            "VernacExtend",
            "fdaa86930910272131657f475d219b9c1a84d0e3"
        ],
        [
            "apply build_permutation with (1 := Hc2); auto.",
            "VernacExtend",
            "40305f1bfb2128a2aa8684620a60178c0882e740"
        ],
        [
            "apply permutation_trans with (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m))).",
            "VernacExtend",
            "a8e95b44c2a6f9b3ef996a93ab1d44d783074d57"
        ],
        [
            "apply permutation_map; apply permutation_sym; apply isort_permutation.",
            "VernacExtend",
            "052a408488af09c818fd0afd9d8f5a8667d30349"
        ],
        [
            "elim (frequency_list eqA_dec m); simpl in |- *; auto.",
            "VernacExtend",
            "d024271aca7c0164abcf3a1253d7f9ff520d85b5"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Huffman.",
            "VernacEndSegment",
            "931e411b7ae2a652dbe82d39024f6dbc8349db21"
        ]
    ],
    "proofs": [
        {
            "name": "not_null_m",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "generalize frequency_more_than_one; case m; simpl in |- *; auto.",
                        "VernacExtend",
                        "e81f856b1ef2fa4040caa47e5dc4c45fb8b0e29f"
                    ]
                },
                {
                    "command": [
                        "intros H; Contradict H; auto with arith.",
                        "VernacExtend",
                        "e3c1b652b9ec2ad2b1e4189121d4a3e4a5980aaa"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "huffman_build_minimun",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros c t H1 H2 H3; unfold weight in |- *.",
                        "VernacExtend",
                        "f2017c9afa3cdc0bdc6833283cbbd087aef8b61f"
                    ]
                },
                {
                    "command": [
                        "rewrite restrict_code_encode_length with (c := c).",
                        "VernacExtend",
                        "bf981b483a821f8175b3cd920c0571a215b864fa"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (length (encode eqA_dec (compute_code (to_btree (pbbuild empty (restrict_code eqA_dec m c)))) m)); auto.",
                        "VernacExtend",
                        "0ba9a65324c0e0294ab103dfe2006211deee316f"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite weight_tree_compute with (f := fun x => number_of_occurrences eqA_dec x m); auto.",
                        "VernacExtend",
                        "86c61070f4c50c8f137cf3f4eb6fb2e279586ea8"
                    ]
                },
                {
                    "command": [
                        "cut (cover_min A (fun x : A => number_of_occurrences eqA_dec x m) (map (fun x : A * nat => leaf (fst x)) (frequency_list eqA_dec m)) t).",
                        "VernacExtend",
                        "c899879aee8457cb6f0259a31d8660c3c80d8fc4"
                    ]
                },
                {
                    "command": [
                        "intros (HH1, HH2); apply HH2; auto.",
                        "VernacExtend",
                        "eab43709f3d9c1394cfac0fcd6832c32d2d25402"
                    ]
                },
                {
                    "command": [
                        "apply cover_permutation with (l1 := map (fun x : A => leaf x) (all_leaves (to_btree (pbbuild empty (restrict_code eqA_dec m c))))).",
                        "VernacExtend",
                        "1d08f16eaf51e39f8d0e950b96a8e98fb343050f"
                    ]
                },
                {
                    "command": [
                        "apply cover_all_leaves.",
                        "VernacExtend",
                        "8e32dfd8a848a64e4bc46782e27ff150c26a0538"
                    ]
                },
                {
                    "command": [
                        "replace (map (fun x : A * nat => leaf (fst x)) (frequency_list eqA_dec m)) with (map (fun x : A => leaf x) (map (fst (B:=_)) (frequency_list eqA_dec m))).",
                        "VernacExtend",
                        "25250486ddb915933487138b3448f0e767a357fb"
                    ]
                },
                {
                    "command": [
                        "apply permutation_map.",
                        "VernacExtend",
                        "79b90248618397d68eafece3eeba95d972451e2c"
                    ]
                },
                {
                    "command": [
                        "rewrite to_btree_all_leaves.",
                        "VernacExtend",
                        "9704ef869db33fc03386175260243faa0ce631b5"
                    ]
                },
                {
                    "command": [
                        "rewrite frequency_list_restric_code_map with (c := c).",
                        "VernacExtend",
                        "78648e53249d95f997da0f96110992a2d362f2c2"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply all_pbleaves_pbbuild.",
                        "VernacExtend",
                        "c7be2a62241761d4030c8edc46fe8f5395d5ce16"
                    ]
                },
                {
                    "command": [
                        "apply restrict_not_null with (eqA_dec := eqA_dec); auto.",
                        "VernacExtend",
                        "00b635040db1bcd804535563bf7ec7b2d7e7dd5c"
                    ]
                },
                {
                    "command": [
                        "apply not_null_m; auto.",
                        "VernacExtend",
                        "e34df250dc4b065d6561cb99482678b20d6affee"
                    ]
                },
                {
                    "command": [
                        "apply restrict_unique_prefix; auto.",
                        "VernacExtend",
                        "394755454b15c9b8bd07d5fb4c024d2968893241"
                    ]
                },
                {
                    "command": [
                        "apply frequency_not_null with (1 := frequency_more_than_one); auto.",
                        "VernacExtend",
                        "4ede8478b906dd1c899a8c0e58a6e856d2bb6388"
                    ]
                },
                {
                    "command": [
                        "elim (frequency_list eqA_dec m); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "6a6385c2b4a96188e2167b147d357f5a5bcc2299"
                    ]
                },
                {
                    "command": [
                        "intros a0 l H4; apply f_equal2 with (f := cons (A:=btree A)); auto.",
                        "VernacExtend",
                        "6d1e4acb68169f9391d54ce7004726dc0627e705"
                    ]
                },
                {
                    "command": [
                        "apply build_correct; auto.",
                        "VernacExtend",
                        "12a6609d073e4ca60305fd5d1b4768bf9fcc90b0"
                    ]
                },
                {
                    "command": [
                        "generalize frequency_more_than_one; case (frequency_list eqA_dec m); simpl in |- *; auto.",
                        "VernacExtend",
                        "bafa6d0e1e697caac40dccedeb23a32c017cc45b"
                    ]
                },
                {
                    "command": [
                        "intros H; Contradict H; auto with arith.",
                        "VernacExtend",
                        "e3c1b652b9ec2ad2b1e4189121d4a3e4a5980aaa"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "apply to_btree_distinct_leaves; auto.",
                        "VernacExtend",
                        "642f153f5fe2e4c29a3fa9f3986fbe902ba625d5"
                    ]
                },
                {
                    "command": [
                        "apply pbbuild_distinct_pbleaves; auto.",
                        "VernacExtend",
                        "66bfa92300d3f783e0b7c08144689fa3f321ab32"
                    ]
                },
                {
                    "command": [
                        "apply restrict_unique_prefix; auto.",
                        "VernacExtend",
                        "394755454b15c9b8bd07d5fb4c024d2968893241"
                    ]
                },
                {
                    "command": [
                        "apply frequency_not_null with (1 := frequency_more_than_one); auto.",
                        "VernacExtend",
                        "4ede8478b906dd1c899a8c0e58a6e856d2bb6388"
                    ]
                },
                {
                    "command": [
                        "case (cover_ordered_cover _ (map (fun x : A * nat => leaf (fst x)) (frequency_list eqA_dec m)) t).",
                        "VernacExtend",
                        "59db1351a49780379bb0cc895de68738d3b6ef8a"
                    ]
                },
                {
                    "command": [
                        "apply build_cover with (1 := H3).",
                        "VernacExtend",
                        "e276727086c7c45051d5fe747318bbc5e22d48c0"
                    ]
                },
                {
                    "command": [
                        "intros l1 (H4, H5).",
                        "VernacExtend",
                        "06eaacaca11099e271b928bd509078dd685b1dff"
                    ]
                },
                {
                    "command": [
                        "apply all_leaves_unique; auto.",
                        "VernacExtend",
                        "973a5b193b4c41b634b5f4b8ba79cd0931722bc8"
                    ]
                },
                {
                    "command": [
                        "case permutation_map_ex with (1 := H4); auto.",
                        "VernacExtend",
                        "f3db2097f97ccd59bfebecc89aa118e31a1aed52"
                    ]
                },
                {
                    "command": [
                        "intros l2 (HH1, HH2).",
                        "VernacExtend",
                        "921e4c951a1e68ae5ad60ca7635878bd1e235acf"
                    ]
                },
                {
                    "command": [
                        "rewrite ulist_ordered_cover with (l1 := l1) (l2 := map (fst (B:=_)) l2); auto.",
                        "VernacExtend",
                        "e5b4532d3929d4ae25d5ece482e33c35ee46f4c1"
                    ]
                },
                {
                    "command": [
                        "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
                        "VernacExtend",
                        "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
                    ]
                },
                {
                    "command": [
                        "apply permutation_map; auto.",
                        "VernacExtend",
                        "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "apply unique_key_ulist; auto.",
                        "VernacExtend",
                        "571dec336c3beb4163415700ebc9515c3b083977"
                    ]
                },
                {
                    "command": [
                        "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
                        "VernacExtend",
                        "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
                    ]
                },
                {
                    "command": [
                        "apply permutation_map; auto.",
                        "VernacExtend",
                        "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "apply unique_key_ulist; auto.",
                        "VernacExtend",
                        "571dec336c3beb4163415700ebc9515c3b083977"
                    ]
                },
                {
                    "command": [
                        "rewrite HH2; elim l2; simpl in |- *; auto.",
                        "VernacExtend",
                        "0028fdf6c3dcf68fdd6a18e995fc71b5e4989e65"
                    ]
                },
                {
                    "command": [
                        "intros a0 l H6; apply f_equal2 with (f := cons (A:=btree A)); auto.",
                        "VernacExtend",
                        "8423c71487149babdbfb9a9c534c04363fb0a1b2"
                    ]
                },
                {
                    "command": [
                        "rewrite encode_permutation with (c1 := restrict_code eqA_dec m c) (c2 := compute_pbcode (pbbuild empty (restrict_code eqA_dec m c))).",
                        "VernacExtend",
                        "0752937da0f8401382dcd21dbe06a17082f86ee6"
                    ]
                },
                {
                    "command": [
                        "generalize (to_btree_smaller _ eqA_dec (pbbuild empty (restrict_code eqA_dec m c))).",
                        "VernacExtend",
                        "8f661b5bad8e95f6aed68dec374d3474962a1d71"
                    ]
                },
                {
                    "command": [
                        "intros H4; pattern m at 2 4 in |- *; elim m; simpl in |- *; auto.",
                        "VernacExtend",
                        "4a8900009d45c092461345c69eb09c5504f1ddfc"
                    ]
                },
                {
                    "command": [
                        "intros a0 l H5; repeat rewrite length_app.",
                        "VernacExtend",
                        "d988072107904861691aa4f83b21683a83fb6c96"
                    ]
                },
                {
                    "command": [
                        "apply plus_le_compat; auto.",
                        "VernacExtend",
                        "63192fa714d7f77c9e2de5c0fd46ab265b4684a0"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply pbbuild_compute_perm.",
                        "VernacExtend",
                        "0f26f317f4a5de40949cbbabf957dcce365ea43d"
                    ]
                },
                {
                    "command": [
                        "apply restrict_not_null with (eqA_dec := eqA_dec); auto.",
                        "VernacExtend",
                        "00b635040db1bcd804535563bf7ec7b2d7e7dd5c"
                    ]
                },
                {
                    "command": [
                        "apply not_null_m; auto.",
                        "VernacExtend",
                        "e34df250dc4b065d6561cb99482678b20d6affee"
                    ]
                },
                {
                    "command": [
                        "apply restrict_unique_prefix; auto.",
                        "VernacExtend",
                        "394755454b15c9b8bd07d5fb4c024d2968893241"
                    ]
                },
                {
                    "command": [
                        "apply frequency_not_null with (1 := frequency_more_than_one); auto.",
                        "VernacExtend",
                        "4ede8478b906dd1c899a8c0e58a6e856d2bb6388"
                    ]
                },
                {
                    "command": [
                        "apply restrict_unique_prefix; auto.",
                        "VernacExtend",
                        "394755454b15c9b8bd07d5fb4c024d2968893241"
                    ]
                },
                {
                    "command": [
                        "apply frequency_not_null with (1 := frequency_more_than_one); auto.",
                        "VernacExtend",
                        "4ede8478b906dd1c899a8c0e58a6e856d2bb6388"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "huffman_aux",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "intros l; elim l using list_length_induction; clear l.",
                        "VernacExtend",
                        "0899868a99902b0c0dad0b47fd6655971b7f28f4"
                    ]
                },
                {
                    "command": [
                        "intros l; case l.",
                        "VernacExtend",
                        "4ee3bf15234f8d0e48455d55ebe68019c5831f42"
                    ]
                },
                {
                    "command": [
                        "intros H H0; case H0; auto.",
                        "VernacExtend",
                        "c31c03beb9e256c56a1ff4d088277162263c8880"
                    ]
                },
                {
                    "command": [
                        "intros p l0; case p; intros n1 c1; case l0; clear p l0.",
                        "VernacExtend",
                        "3a06f02f9bc8ad14f6eafd6f433e4444b6888c9e"
                    ]
                },
                {
                    "command": [
                        "intros H H0 H1 H2 H3 H4; exists c1; simpl in |- *; repeat (split; auto).",
                        "VernacExtend",
                        "2a0ecf728de7ae8d5aa8c0b7eff4b54d57d33504"
                    ]
                },
                {
                    "command": [
                        "apply H2 with (a := (n1, c1)); auto with datatypes.",
                        "VernacExtend",
                        "bb164f6fb77512c01cbb00b515898c86a14b313e"
                    ]
                },
                {
                    "command": [
                        "apply build_one.",
                        "VernacExtend",
                        "e03f6357a0ae5e2be0a1c4306ed2127b74a103ea"
                    ]
                },
                {
                    "command": [
                        "intros p l1; case p; intros n2 c2.",
                        "VernacExtend",
                        "e0cc21060a4a266ec3b08f63d6d5b857217fad11"
                    ]
                },
                {
                    "command": [
                        "intros H H0 H1 H2 H3 H4.",
                        "VernacExtend",
                        "809760564dc9eab1a38cc00c4245104333f9e5ae"
                    ]
                },
                {
                    "command": [
                        "case H with (l2 := insert (fun x y => le_bool (fst x) (fst y)) (n1 + n2, map (fun x => (fst x, false :: snd x)) c1 ++ map (fun x => (fst x, true :: snd x)) c2) l1); auto.",
                        "VernacExtend",
                        "99625d21ff57fd9e1a770fc9a21584c775113259"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_length with (m := (n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1).",
                        "VernacExtend",
                        "65ef81bd025a1198202cbe43591c2b4f5e39ccb6"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "ab3fa8d215cdc73141fcf1a11781cfe38de440ec"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply insert_permutation.",
                        "VernacExtend",
                        "014e6bfd84c8035258402ae357727d0f26b4eb31"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H5; absurd ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1 = nil).",
                        "VernacExtend",
                        "fd6e4aa382f9fc41137fc68b4b68ffbef0f94d7a"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "apply permutation_nil_inv; auto.",
                        "VernacExtend",
                        "c859640db07cbdcf16cbea0c88ad4f676b446e86"
                    ]
                },
                {
                    "command": [
                        "unfold code in H5; rewrite <- H5; apply insert_permutation.",
                        "VernacExtend",
                        "b1e218fb1b608c19fab81157449c7b85a05569b8"
                    ]
                },
                {
                    "command": [
                        "apply insert_ordered; auto.",
                        "VernacExtend",
                        "0e68c5ff515530ce2ef17fc7812c75ef8d7b78c0"
                    ]
                },
                {
                    "command": [
                        "intros a b H5; apply le_bool_correct3; auto.",
                        "VernacExtend",
                        "f80372f70ec182b38c1617106d5a0ffb5e3fbc47"
                    ]
                },
                {
                    "command": [
                        "intros a b H5; apply le_bool_correct4; auto.",
                        "VernacExtend",
                        "7a201116ba244626e8b527d266eb3a386d9636fb"
                    ]
                },
                {
                    "command": [
                        "apply ordered_inv with (a := (n2, c2)).",
                        "VernacExtend",
                        "37005b09ef0d97c5a759f6e145bfb247ace69feb"
                    ]
                },
                {
                    "command": [
                        "apply ordered_inv with (a := (n1, c1)); auto.",
                        "VernacExtend",
                        "0298585d63cc053424a196d988d0d62106b41b9d"
                    ]
                },
                {
                    "command": [
                        "intros a H5.",
                        "VernacExtend",
                        "3878441b237d0413007eaaf6109fb3d0030cde41"
                    ]
                },
                {
                    "command": [
                        "cut (In a ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)).",
                        "VernacExtend",
                        "3da250a76da32b4e6dfce8e74977cada1ec73865"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros [H6| H6]; try rewrite <- H6; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "f932489562be073326ab6db499abf5e657d43f90"
                    ]
                },
                {
                    "command": [
                        "rewrite pbbuild_pbnode; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "887b756d7d830c32d3352e1340fc8b08dd0dc739"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 with (f := app (A:=A * list bool)); auto.",
                        "VernacExtend",
                        "fbbfeaf162431888d8d145bd7dea386944dca140"
                    ]
                },
                {
                    "command": [
                        "generalize (H2 (n1, c1)); simpl in |- *; intros tmp; rewrite tmp; clear tmp; auto with datatypes.",
                        "VernacExtend",
                        "86c437aad2e92345179ffce7985d23c299222f23"
                    ]
                },
                {
                    "command": [
                        "elim c1; simpl in |- *; auto.",
                        "VernacExtend",
                        "6cc5d49fc3b7dcda02fbdd01e8d45a1b095f693d"
                    ]
                },
                {
                    "command": [
                        "intros a0; case a0; simpl in |- *; auto.",
                        "VernacExtend",
                        "7baef3b34c9b66ddd782e7dbae9235a74cd5dd7c"
                    ]
                },
                {
                    "command": [
                        "intros a1 l0 l2 H7; apply f_equal2 with (f := cons (A:=A * list bool)); auto.",
                        "VernacExtend",
                        "642b905d29cac35de1d6b1c53a55a383050c9a4f"
                    ]
                },
                {
                    "command": [
                        "generalize (H2 (n2, c2)); simpl in |- *; intros tmp; rewrite tmp; clear tmp; auto with datatypes.",
                        "VernacExtend",
                        "7b9f891f4685d7052a6abd745c2029799246cf48"
                    ]
                },
                {
                    "command": [
                        "elim c2; simpl in |- *; auto.",
                        "VernacExtend",
                        "ed8e69b99c019d7da9b554040fed944a2002404f"
                    ]
                },
                {
                    "command": [
                        "intros a0; case a0; simpl in |- *; auto.",
                        "VernacExtend",
                        "7baef3b34c9b66ddd782e7dbae9235a74cd5dd7c"
                    ]
                },
                {
                    "command": [
                        "intros a1 l0 l2 H7; apply f_equal2 with (f := cons (A:=A * list bool)); auto with datatypes.",
                        "VernacExtend",
                        "daee522d672a1639fa8d047ead1805918879abff"
                    ]
                },
                {
                    "command": [
                        "generalize (H4 (n1, c1)); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "77a871364e0c6836785739b2b2abfea94dde36bd"
                    ]
                },
                {
                    "command": [
                        "generalize (H4 (n2, c2)); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "261579f8a00d4067284e722b873adb10ae7f1898"
                    ]
                },
                {
                    "command": [
                        "apply permutation_in with (2 := H5).",
                        "VernacExtend",
                        "5cf81bac6db25bf18e1ded1a466a7e56b9de9295"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply insert_permutation.",
                        "VernacExtend",
                        "014e6bfd84c8035258402ae357727d0f26b4eb31"
                    ]
                },
                {
                    "command": [
                        "intros a H5.",
                        "VernacExtend",
                        "3878441b237d0413007eaaf6109fb3d0030cde41"
                    ]
                },
                {
                    "command": [
                        "cut (In a ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)).",
                        "VernacExtend",
                        "3da250a76da32b4e6dfce8e74977cada1ec73865"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros [H6| H6]; try rewrite <- H6; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "f932489562be073326ab6db499abf5e657d43f90"
                    ]
                },
                {
                    "command": [
                        "rewrite pbbuild_pbnode; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "887b756d7d830c32d3352e1340fc8b08dd0dc739"
                    ]
                },
                {
                    "command": [
                        "apply f_equal2 with (f := plus); auto.",
                        "VernacExtend",
                        "df2b05fd4759a7bae2a0b591601a15152b036e47"
                    ]
                },
                {
                    "command": [
                        "generalize (H3 (n1, c1)); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "48ee99fa0defc88b23c5435cfea0fd1ddac493bf"
                    ]
                },
                {
                    "command": [
                        "generalize (H3 (n2, c2)); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "6f1ba969fb4ba57683dbc99146d3baa8005298cc"
                    ]
                },
                {
                    "command": [
                        "generalize (H4 (n1, c1)); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "77a871364e0c6836785739b2b2abfea94dde36bd"
                    ]
                },
                {
                    "command": [
                        "generalize (H4 (n2, c2)); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "261579f8a00d4067284e722b873adb10ae7f1898"
                    ]
                },
                {
                    "command": [
                        "apply permutation_in with (2 := H5).",
                        "VernacExtend",
                        "5cf81bac6db25bf18e1ded1a466a7e56b9de9295"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply insert_permutation.",
                        "VernacExtend",
                        "014e6bfd84c8035258402ae357727d0f26b4eb31"
                    ]
                },
                {
                    "command": [
                        "intros a H5.",
                        "VernacExtend",
                        "3878441b237d0413007eaaf6109fb3d0030cde41"
                    ]
                },
                {
                    "command": [
                        "cut (In a ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)).",
                        "VernacExtend",
                        "3da250a76da32b4e6dfce8e74977cada1ec73865"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros [H6| H6]; try rewrite <- H6; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "f932489562be073326ab6db499abf5e657d43f90"
                    ]
                },
                {
                    "command": [
                        "generalize (H4 (n1, c1)); case c1; simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "b6aa2bfc85da4886baac6ff31ee0a658a5d2d1dc"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "apply permutation_in with (2 := H5).",
                        "VernacExtend",
                        "5cf81bac6db25bf18e1ded1a466a7e56b9de9295"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply insert_permutation.",
                        "VernacExtend",
                        "014e6bfd84c8035258402ae357727d0f26b4eb31"
                    ]
                },
                {
                    "command": [
                        "intros c3 (HC1, HC2); exists c3; split; auto.",
                        "VernacExtend",
                        "8fe4dca9958859a090c656712fd7877f6d3d6cc3"
                    ]
                },
                {
                    "command": [
                        "apply build_step with (2 := HC2); auto.",
                        "VernacExtend",
                        "9f72bfe410b78db786d1e7bfbcb714db8fe09f67"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; red in |- *.",
                        "VernacExtend",
                        "5ce1933337993204b70e1da5b6dccaeb5b89c055"
                    ]
                },
                {
                    "command": [
                        "exists (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) l1); exists (to_btree (pbbuild empty c1)); exists (to_btree (pbbuild empty c2)); repeat (split; auto).",
                        "VernacExtend",
                        "66827485d775e785372e25ef2b2ca51149f4b2fe"
                    ]
                },
                {
                    "command": [
                        "change (ordered (sum_order (fun x : A => number_of_occurrences eqA_dec x m)) (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) ((n1, c1) :: (n2, c2) :: l1))) in |- *.",
                        "VernacExtend",
                        "42bff3f5032753fa3d6b0552168194679e5130fd"
                    ]
                },
                {
                    "command": [
                        "apply ordered_map_inv; auto.",
                        "VernacExtend",
                        "88241fd9c931ef4ea0641d5e3015739865314d42"
                    ]
                },
                {
                    "command": [
                        "generalize H3 H1; elim ((n1, c1) :: (n2, c2) :: l1); (simpl in |- *; auto).",
                        "VernacExtend",
                        "82014583179789cdef3ed8f1e1d90d04a9e67bc2"
                    ]
                },
                {
                    "command": [
                        "intros a l0; case a; case l0; simpl in |- *; auto; clear a l0.",
                        "VernacExtend",
                        "4d7edb48f151dd451b327c848678314dd0846642"
                    ]
                },
                {
                    "command": [
                        "intros p0 l0 n4 c4; case p0; intros n5 c5; simpl in |- *; clear p0; auto.",
                        "VernacExtend",
                        "112a000e146fe41a01708c5b0b56fe0583078bc9"
                    ]
                },
                {
                    "command": [
                        "intros H5 H6 H7; apply ordered_cons; unfold sum_order in |- *; simpl in |- *; auto.",
                        "VernacExtend",
                        "077cad802e1e38169b3eccee01ef4d5c732a88fb"
                    ]
                },
                {
                    "command": [
                        "generalize (H6 (n4, c4)); simpl in |- *; intros tmp; rewrite tmp; clear tmp; auto with datatypes.",
                        "VernacExtend",
                        "4b11e8d7511ec28725c79e1f9f07ff94ee3f419f"
                    ]
                },
                {
                    "command": [
                        "generalize (H6 (n5, c5)); simpl in |- *; intros tmp; rewrite tmp; clear tmp; auto with datatypes.",
                        "VernacExtend",
                        "6c4ec79ff19f73ea372d65e2e617d8256ff710b9"
                    ]
                },
                {
                    "command": [
                        "change (fst (n4, c4) <= fst (n5, c5)) in |- *.",
                        "VernacExtend",
                        "43132f961a8cc5b5988348b71952ee4455fb89ee"
                    ]
                },
                {
                    "command": [
                        "apply ordered_inv_order with (1 := H7); auto.",
                        "VernacExtend",
                        "3f3893205784cac4e0b8e9d6949b2a67c79ec234"
                    ]
                },
                {
                    "command": [
                        "apply H5; auto.",
                        "VernacExtend",
                        "f95c432f26801c24be028230cd4c239b76d60ab2"
                    ]
                },
                {
                    "command": [
                        "apply ordered_inv with (1 := H7); auto.",
                        "VernacExtend",
                        "837f2772ee44beec5a0acbbe91f21d1c70f4fb12"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)); auto.",
                        "VernacExtend",
                        "7df2d847b2e77ac567f404e9620f513aac99c3b7"
                    ]
                },
                {
                    "command": [
                        "apply permutation_map; auto.",
                        "VernacExtend",
                        "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply insert_permutation.",
                        "VernacExtend",
                        "014e6bfd84c8035258402ae357727d0f26b4eb31"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) ((n1 + n2, map (fun x : A * list bool => (fst x, false :: snd x)) c1 ++ map (fun x : A * list bool => (fst x, true :: snd x)) c2) :: l1)); auto.",
                        "VernacExtend",
                        "7df2d847b2e77ac567f404e9620f513aac99c3b7"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "rewrite pbbuild_pbnode; auto.",
                        "VernacExtend",
                        "4d86f3c5367e5a3ec822666e87653e9d3b2b2617"
                    ]
                },
                {
                    "command": [
                        "generalize (H4 (n1, c1)); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "77a871364e0c6836785739b2b2abfea94dde36bd"
                    ]
                },
                {
                    "command": [
                        "generalize (H4 (n2, c2)); simpl in |- *; auto with datatypes.",
                        "VernacExtend",
                        "261579f8a00d4067284e722b873adb10ae7f1898"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "huffman",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "case (huffman_aux (isort (fun x y => le_bool (fst x) (fst y)) (map (fun x => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m)))).",
                        "VernacExtend",
                        "f950f182d046d2a9fa33b19a1aacf8f7470c8d34"
                    ]
                },
                {
                    "command": [
                        "generalize frequency_more_than_one; case (frequency_list eqA_dec m); simpl in |- *; auto.",
                        "VernacExtend",
                        "bafa6d0e1e697caac40dccedeb23a32c017cc45b"
                    ]
                },
                {
                    "command": [
                        "intros H; Contradict H; auto with arith.",
                        "VernacExtend",
                        "e3c1b652b9ec2ad2b1e4189121d4a3e4a5980aaa"
                    ]
                },
                {
                    "command": [
                        "intros p l frequency_more_than_one_bis H.",
                        "VernacExtend",
                        "4d5527b6e357b904f666378aa8399c79a3657063"
                    ]
                },
                {
                    "command": [
                        "absurd (In (A:=nat * code A) (snd p, (fst p, nil) :: nil) nil).",
                        "VernacExtend",
                        "26cec51d4b1e77cb755dc40213f9ea41e490d8a6"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; intros H1; case H1.",
                        "VernacExtend",
                        "300de7fca98306b0b84c97b7cd8fb254909e721c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H; apply permutation_in with ((snd p, (fst p, nil) :: nil) :: isort (fun x y : nat * list (A * list bool) => le_bool (fst x) (fst y)) (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) l)); auto with datatypes.",
                        "VernacExtend",
                        "2a522e0ff80614936e58ed1a6292baae1ec3e9b1"
                    ]
                },
                {
                    "command": [
                        "apply insert_permutation.",
                        "VernacExtend",
                        "419b35a3868200753ed7d5fd26929e7c714f1f8c"
                    ]
                },
                {
                    "command": [
                        "apply isort_ordered; auto.",
                        "VernacExtend",
                        "7585d4a0a9bb6b939e15be724b99684a7a879cfb"
                    ]
                },
                {
                    "command": [
                        "intros a b H0; apply le_bool_correct3; auto.",
                        "VernacExtend",
                        "50a06a069f0b11c53bdeee619fd4425d9d04cec8"
                    ]
                },
                {
                    "command": [
                        "intros a b H0; apply le_bool_correct4; auto.",
                        "VernacExtend",
                        "9ba38015f91962a78e6020fb2816ac99223b101a"
                    ]
                },
                {
                    "command": [
                        "intros a H0; cut (In a (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m))).",
                        "VernacExtend",
                        "c68d705f456f66bec0fd64ec56323db73664bb57"
                    ]
                },
                {
                    "command": [
                        "intros H1; case in_map_inv with (1 := H1); auto.",
                        "VernacExtend",
                        "5141fa68fc7b30766c3f39373fbccf62b555079f"
                    ]
                },
                {
                    "command": [
                        "intros x; case x; simpl in |- *; auto.",
                        "VernacExtend",
                        "50089fbf1a2c71d8dd0d9f5a9ae6565c4e941619"
                    ]
                },
                {
                    "command": [
                        "intros a0 n (H2, H3); rewrite H3; simpl in |- *; auto.",
                        "VernacExtend",
                        "bfbb7d592925d5e14d55029d721b853fac80ec80"
                    ]
                },
                {
                    "command": [
                        "apply permutation_in with (2 := H0); auto.",
                        "VernacExtend",
                        "281217ab6b513653776b34f7aebc41eee1ccac62"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply isort_permutation; auto.",
                        "VernacExtend",
                        "103d67dc393c9540a26281f8f5dea166a2403e21"
                    ]
                },
                {
                    "command": [
                        "intros a H0; cut (In a (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m))).",
                        "VernacExtend",
                        "c68d705f456f66bec0fd64ec56323db73664bb57"
                    ]
                },
                {
                    "command": [
                        "intros H1; case in_map_inv with (1 := H1); auto.",
                        "VernacExtend",
                        "5141fa68fc7b30766c3f39373fbccf62b555079f"
                    ]
                },
                {
                    "command": [
                        "intros x; case x; simpl in |- *; auto.",
                        "VernacExtend",
                        "50089fbf1a2c71d8dd0d9f5a9ae6565c4e941619"
                    ]
                },
                {
                    "command": [
                        "intros a0 n (H2, H3); rewrite H3; simpl in |- *; auto.",
                        "VernacExtend",
                        "bfbb7d592925d5e14d55029d721b853fac80ec80"
                    ]
                },
                {
                    "command": [
                        "apply unique_key_in_inv with (a := a0) (l := frequency_list eqA_dec m); auto.",
                        "VernacExtend",
                        "4cf64b02ec5f6190d342431899baf7a74361f892"
                    ]
                },
                {
                    "command": [
                        "apply frequency_number_of_occurrences; auto.",
                        "VernacExtend",
                        "d3127f118e2a65b1623d3299a5752053b84b1514"
                    ]
                },
                {
                    "command": [
                        "apply frequency_list_in with (1 := H2); auto.",
                        "VernacExtend",
                        "0bd41c0832a83988023fb09f621453d72d015293"
                    ]
                },
                {
                    "command": [
                        "apply permutation_in with (2 := H0); auto.",
                        "VernacExtend",
                        "281217ab6b513653776b34f7aebc41eee1ccac62"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply isort_permutation; auto.",
                        "VernacExtend",
                        "103d67dc393c9540a26281f8f5dea166a2403e21"
                    ]
                },
                {
                    "command": [
                        "intros a H0; cut (In a (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m))).",
                        "VernacExtend",
                        "c68d705f456f66bec0fd64ec56323db73664bb57"
                    ]
                },
                {
                    "command": [
                        "intros H1; case in_map_inv with (1 := H1); auto.",
                        "VernacExtend",
                        "5141fa68fc7b30766c3f39373fbccf62b555079f"
                    ]
                },
                {
                    "command": [
                        "intros x; case x; simpl in |- *; auto.",
                        "VernacExtend",
                        "50089fbf1a2c71d8dd0d9f5a9ae6565c4e941619"
                    ]
                },
                {
                    "command": [
                        "intros a0 n (H2, H3); rewrite H3; simpl in |- *; auto.",
                        "VernacExtend",
                        "bfbb7d592925d5e14d55029d721b853fac80ec80"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate.",
                        "VernacExtend",
                        "1ec997c70ceedc981f8865c1573c00554b73dfd4"
                    ]
                },
                {
                    "command": [
                        "apply permutation_in with (2 := H0); auto.",
                        "VernacExtend",
                        "281217ab6b513653776b34f7aebc41eee1ccac62"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply isort_permutation; auto.",
                        "VernacExtend",
                        "103d67dc393c9540a26281f8f5dea166a2403e21"
                    ]
                },
                {
                    "command": [
                        "intros c (Hc1, Hc2); exists c.",
                        "VernacExtend",
                        "9f7bcc119f0873201ed591313d7b027071b8f01d"
                    ]
                },
                {
                    "command": [
                        "cut (build (fun x : A => number_of_occurrences eqA_dec x m) (map (fun x => leaf (fst x)) (frequency_list eqA_dec m)) (to_btree (pbbuild empty c))); [ intros Hc3 | idtac ].",
                        "VernacExtend",
                        "ecf5f0317a874c430b4281b54d3de567b37f74af"
                    ]
                },
                {
                    "command": [
                        "case (cover_ordered_cover _ (map (fun x : A * nat => leaf (fst x)) (frequency_list eqA_dec m)) (to_btree (pbbuild empty c))).",
                        "VernacExtend",
                        "85a424999bbf736acfff714b3b04f93bbad773f5"
                    ]
                },
                {
                    "command": [
                        "apply build_cover with (1 := Hc3).",
                        "VernacExtend",
                        "ba2c5bea6d08b6abbea7f196851b41a38b583e64"
                    ]
                },
                {
                    "command": [
                        "intros l1 (H4, H5).",
                        "VernacExtend",
                        "06eaacaca11099e271b928bd509078dd685b1dff"
                    ]
                },
                {
                    "command": [
                        "case permutation_map_ex with (1 := H4); auto.",
                        "VernacExtend",
                        "f3db2097f97ccd59bfebecc89aa118e31a1aed52"
                    ]
                },
                {
                    "command": [
                        "intros l2 (HH1, HH2).",
                        "VernacExtend",
                        "921e4c951a1e68ae5ad60ca7635878bd1e235acf"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hc1; auto.",
                        "VernacExtend",
                        "4e5f9ad73f564f8eb3141e1ea117d24a0da63da4"
                    ]
                },
                {
                    "command": [
                        "apply btree_unique_prefix; auto.",
                        "VernacExtend",
                        "789c73711d79484687a9f9df3a684435c8528f18"
                    ]
                },
                {
                    "command": [
                        "apply all_leaves_unique; auto.",
                        "VernacExtend",
                        "973a5b193b4c41b634b5f4b8ba79cd0931722bc8"
                    ]
                },
                {
                    "command": [
                        "rewrite ulist_ordered_cover with (l1 := l1) (l2 := map (fst (B:=_)) l2); auto.",
                        "VernacExtend",
                        "e5b4532d3929d4ae25d5ece482e33c35ee46f4c1"
                    ]
                },
                {
                    "command": [
                        "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
                        "VernacExtend",
                        "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
                    ]
                },
                {
                    "command": [
                        "apply permutation_map; auto.",
                        "VernacExtend",
                        "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "apply unique_key_ulist; auto.",
                        "VernacExtend",
                        "571dec336c3beb4163415700ebc9515c3b083977"
                    ]
                },
                {
                    "command": [
                        "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
                        "VernacExtend",
                        "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
                    ]
                },
                {
                    "command": [
                        "apply permutation_map; auto.",
                        "VernacExtend",
                        "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "apply unique_key_ulist; auto.",
                        "VernacExtend",
                        "571dec336c3beb4163415700ebc9515c3b083977"
                    ]
                },
                {
                    "command": [
                        "rewrite HH2; elim l2; simpl in |- *; auto.",
                        "VernacExtend",
                        "0028fdf6c3dcf68fdd6a18e995fc71b5e4989e65"
                    ]
                },
                {
                    "command": [
                        "intros a0 l H6; apply f_equal2 with (f := cons (A:=btree A)); auto.",
                        "VernacExtend",
                        "8423c71487149babdbfb9a9c534c04363fb0a1b2"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hc1; auto.",
                        "VernacExtend",
                        "4e5f9ad73f564f8eb3141e1ea117d24a0da63da4"
                    ]
                },
                {
                    "command": [
                        "apply in_alphabet_compute_code; auto.",
                        "VernacExtend",
                        "9f493c60411101c670e2be8ae08fcf3cf2ab5fcc"
                    ]
                },
                {
                    "command": [
                        "intros a H; apply all_leaves_inb.",
                        "VernacExtend",
                        "f13ebf29bf54e70a1d8bcc50d84acac446ace876"
                    ]
                },
                {
                    "command": [
                        "rewrite ulist_ordered_cover with (l1 := l1) (l2 := map (fst (B:=_)) l2); auto.",
                        "VernacExtend",
                        "e5b4532d3929d4ae25d5ece482e33c35ee46f4c1"
                    ]
                },
                {
                    "command": [
                        "apply permutation_in with (map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
                        "VernacExtend",
                        "2723ad3306da767240aa6fa3a0a1d18eace3dbc3"
                    ]
                },
                {
                    "command": [
                        "apply permutation_map; apply permutation_sym; auto.",
                        "VernacExtend",
                        "7b8b8d88b7c327978714b1adf0e2a57ae7138007"
                    ]
                },
                {
                    "command": [
                        "apply ulist_perm with (l1 := map (fst (B:=_)) (frequency_list eqA_dec m)); auto.",
                        "VernacExtend",
                        "b3bbe1f1691bf6596344b4a86cbaa1efae3305dc"
                    ]
                },
                {
                    "command": [
                        "apply permutation_map; auto.",
                        "VernacExtend",
                        "999029f30a24e8f5a8628c93d8bf1d3ad158eb91"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "apply unique_key_ulist; auto.",
                        "VernacExtend",
                        "571dec336c3beb4163415700ebc9515c3b083977"
                    ]
                },
                {
                    "command": [
                        "rewrite HH2; elim l2; simpl in |- *; auto.",
                        "VernacExtend",
                        "0028fdf6c3dcf68fdd6a18e995fc71b5e4989e65"
                    ]
                },
                {
                    "command": [
                        "intros a0 l H6; apply f_equal2 with (f := cons (A:=btree A)); auto.",
                        "VernacExtend",
                        "8423c71487149babdbfb9a9c534c04363fb0a1b2"
                    ]
                },
                {
                    "command": [
                        "intros c1 H H0.",
                        "VernacExtend",
                        "4e0214ed879d52008238483a3cbdae0994970783"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hc1.",
                        "VernacExtend",
                        "93e023ce25ab15a247528e4d58b79d8a2c7f142e"
                    ]
                },
                {
                    "command": [
                        "apply huffman_build_minimun; auto.",
                        "VernacExtend",
                        "fdaa86930910272131657f475d219b9c1a84d0e3"
                    ]
                },
                {
                    "command": [
                        "apply build_permutation with (1 := Hc2); auto.",
                        "VernacExtend",
                        "40305f1bfb2128a2aa8684620a60178c0882e740"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (map (fun x : nat * code A => to_btree (pbbuild empty (snd x))) (map (fun x : A * nat => (snd x, (fst x, nil) :: nil)) (frequency_list eqA_dec m))).",
                        "VernacExtend",
                        "a8e95b44c2a6f9b3ef996a93ab1d44d783074d57"
                    ]
                },
                {
                    "command": [
                        "apply permutation_map; apply permutation_sym; apply isort_permutation.",
                        "VernacExtend",
                        "052a408488af09c818fd0afd9d8f5a8667d30349"
                    ]
                },
                {
                    "command": [
                        "elim (frequency_list eqA_dec m); simpl in |- *; auto.",
                        "VernacExtend",
                        "d024271aca7c0164abcf3a1253d7f9ff520d85b5"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}