{
    "filename": "theories/Build.v",
    "coq_project": "huffman",
    "vernac_cmds": [
        [
            "From Huffman Require Export OneStep.",
            "VernacRequire",
            "af42e94c58e640560c06960cbbc22f5d15321ede"
        ],
        [
            "From Huffman Require Export HeightPred.",
            "VernacRequire",
            "35bf9a5d714844f07596f5328db0c740eb06e160"
        ],
        [
            "From Huffman Require Export CoverMin.",
            "VernacRequire",
            "95ae09eb8184da72440a3796be1a07e0c29be8db"
        ],
        [
            "From Huffman Require Export OrderedCover.",
            "VernacRequire",
            "36d1773f59468f636390987966dae3d337546497"
        ],
        [
            "From Huffman Require Export SubstPred.",
            "VernacRequire",
            "6710d32ba53a4db09e252b73a835dbb1c2d4932c"
        ],
        [
            "Require Import ArithRing.",
            "VernacRequire",
            "4bc385370568ddd53384be919634bc0439bf028f"
        ],
        [
            "Section Build.",
            "VernacBeginSection",
            "de55c804bce894e1dfd7a3168db207fe0d2d0514"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable f : A -> nat.",
            "VernacAssumption",
            "9f23c668cb9b44da0a7007cf5e6e948fbeb3f99a"
        ],
        [
            "Inductive build : list (btree A) -> btree A -> Prop := | build_one : forall t : btree A, build (t :: nil) t | build_step : forall (t : btree A) (l1 l2 : list (btree A)), one_step f l1 l2 -> build l2 t -> build l1 t.",
            "VernacInductive",
            "ec61f37f9154235d4f8029af61ba0e48e0f8fbc8"
        ],
        [
            "Theorem build_cover : forall l t, build l t -> cover l t.",
            "VernacStartTheoremProof",
            "398d19402f651329b60c6f03b581d62bc7e27d6d"
        ],
        [
            "intros l t H; elim H; clear H l t; auto.",
            "VernacExtend",
            "9eb9fb4c10ae7fc6a7e97224b53386a61b05a90f"
        ],
        [
            "intros t l1 l2 (l3, (t1, (t2, (HH, (HH1, HH2))))) H0 H1; try assumption.",
            "VernacExtend",
            "7a3bdb8571d6b7a327c0faf3382f80122bb2e030"
        ],
        [
            "apply cover_node with (1 := HH1); auto.",
            "VernacExtend",
            "510606126f7acfd625be97bb3d829fca57964b98"
        ],
        [
            "apply cover_permutation with (2 := HH2); auto.",
            "VernacExtend",
            "004c2a483c4089fe895bed15d212ffe75c2181cf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem build_comp : forall (l1 l2 : list (btree A)) (t1 t2 : btree A), build l1 t1 -> build l2 t2 -> weight_tree_list f l1 = weight_tree_list f l2 -> same_sum_leaves f l1 l2 -> weight_tree f t1 = weight_tree f t2.",
            "VernacStartTheoremProof",
            "25c5402724fcb2b613731eac2499546038e80ddb"
        ],
        [
            "intros l1 l2 t1 t2 H; generalize l2 t2; elim H; clear H l1 t1 l2 t2.",
            "VernacExtend",
            "00fa59667e81bcdb19252d0a60cab000e22bf21d"
        ],
        [
            "intros t l2 t2 H H0 (l3, (l4, (H1, (H2, H3)))).",
            "VernacExtend",
            "e048a8784c003ce71d8f4d38c3678d2ef06c6a99"
        ],
        [
            "generalize H0; inversion H; clear H0.",
            "VernacExtend",
            "985485ffc678244e0e9a09d7655078085e3b183b"
        ],
        [
            "simpl in |- *; repeat rewrite <- plus_n_O; auto.",
            "VernacExtend",
            "59bd81a7cb4f9bdd016bd145168c18a9aadfa621"
        ],
        [
            "case H4.",
            "VernacExtend",
            "88a9a2218f38b51a9b30d42ef19128a3b872b7bd"
        ],
        [
            "intros l5 (t3, (t4, (H8, (H9, H10)))).",
            "VernacExtend",
            "3fc22efec40424e3a84e1f80c780fd96344c7230"
        ],
        [
            "absurd (length l2 = length (t3 :: t4 :: l5)).",
            "VernacExtend",
            "fd356ce3bafd3d89224c3bcf3ca3d5c2828afe3d"
        ],
        [
            "rewrite permutation_length with (1 := H2).",
            "VernacExtend",
            "70d004fca6a47953fc248765b485718f2a74a366"
        ],
        [
            "rewrite <- length_map with (f := sum_leaves f) (l := l4).",
            "VernacExtend",
            "03e066cce5457c5fc52dd1b0fc4d7a2843d0ec52"
        ],
        [
            "rewrite <- H3.",
            "VernacExtend",
            "1eb91ccefb59c504d04364b76e0995592b63f60e"
        ],
        [
            "rewrite length_map with (f := sum_leaves f).",
            "VernacExtend",
            "32c13bde4e2137c7a0edce1729972b5544ae976a"
        ],
        [
            "rewrite permutation_length with (1 := permutation_sym _ _ _ H1).",
            "VernacExtend",
            "22baf61432acd86e82fdefa2712bea6ddb72f166"
        ],
        [
            "simpl in |- *; red in |- *; intros; discriminate.",
            "VernacExtend",
            "3d9e3cad2127e705c546560dd2e3fde1f1f047e9"
        ],
        [
            "apply permutation_length with (1 := H9).",
            "VernacExtend",
            "acf7314ced8d5cdf770fafa2e2bcf3eef09e2b54"
        ],
        [
            "intros t l1 l2 H H0 H1 l0 t2 H2 H3 H4.",
            "VernacExtend",
            "2a436c0eb544034ee7cbe4f3b703862c453a7939"
        ],
        [
            "inversion H2.",
            "VernacExtend",
            "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
        ],
        [
            "case H.",
            "VernacExtend",
            "ed133bc3c18fb327812c50c4771060c04c7f32b1"
        ],
        [
            "intros l5 (t3, (t4, (H8, (H9, H10)))).",
            "VernacExtend",
            "3fc22efec40424e3a84e1f80c780fd96344c7230"
        ],
        [
            "case H4.",
            "VernacExtend",
            "88a9a2218f38b51a9b30d42ef19128a3b872b7bd"
        ],
        [
            "intros l6 (l7, (H11, (H12, H13))).",
            "VernacExtend",
            "69f72520158e89d9f935fede0a6f0a2a169bfc2d"
        ],
        [
            "absurd (length l1 = length (t3 :: t4 :: l5)).",
            "VernacExtend",
            "45cd8bb84d672c612dcc1a0f8283fc8b8df6146f"
        ],
        [
            "rewrite permutation_length with (1 := H11).",
            "VernacExtend",
            "d7ca22f233fb04b242a0fbbd0d03cfc070d9afea"
        ],
        [
            "rewrite <- length_map with (f := sum_leaves f) (l := l6).",
            "VernacExtend",
            "5bd18e86fd45083dcbd34fa8ab746ffe7785b23b"
        ],
        [
            "rewrite H13.",
            "VernacExtend",
            "bc2d32522e887645239b994008e234c058557cd9"
        ],
        [
            "rewrite length_map with (f := sum_leaves f).",
            "VernacExtend",
            "32c13bde4e2137c7a0edce1729972b5544ae976a"
        ],
        [
            "rewrite permutation_length with (1 := permutation_sym _ _ _ H12).",
            "VernacExtend",
            "24cfe35557a9f31e7d4d6f97fcd69c07a34adc0e"
        ],
        [
            "rewrite <- H5; simpl in |- *; red in |- *; intros; discriminate.",
            "VernacExtend",
            "2ffedef2921274b6bbe25ea948b1dfd5ef83eb2a"
        ],
        [
            "apply permutation_length with (1 := H9).",
            "VernacExtend",
            "acf7314ced8d5cdf770fafa2e2bcf3eef09e2b54"
        ],
        [
            "apply H1 with (1 := H6).",
            "VernacExtend",
            "e36570d99a68055459cfa040131950b19dc71c97"
        ],
        [
            "case one_step_comp with (3 := H) (4 := H5); auto.",
            "VernacExtend",
            "d7ad7483b2b840c0f7bb8c44951d78bc74119ba1"
        ],
        [
            "case one_step_comp with (3 := H) (4 := H5); auto.",
            "VernacExtend",
            "d7ad7483b2b840c0f7bb8c44951d78bc74119ba1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem build_same_weight_tree : forall (l : list (btree A)) (t1 t2 : btree A), build l t1 -> build l t2 -> weight_tree f t1 = weight_tree f t2.",
            "VernacStartTheoremProof",
            "ee33f88846d25de33d6d73b972d034091ac53a7f"
        ],
        [
            "intros l t1 t2 H H0; apply build_comp with (l1 := l) (l2 := l); auto.",
            "VernacExtend",
            "03370395b56157aae27c66c20399249d7fa32ba2"
        ],
        [
            "exists l; exists l; simpl in |- *; auto.",
            "VernacExtend",
            "8b7d9834359ac01bfd35cdcf1fef541c27986ef9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem build_permutation : forall (l1 l2 : list (btree A)) (t : btree A), build l1 t -> permutation l1 l2 -> build l2 t.",
            "VernacStartTheoremProof",
            "04618b7619fccebce5b820b674f79e8a1467c7cc"
        ],
        [
            "intros l1 l2 t H; generalize l2; elim H; clear H l1 l2 t; auto.",
            "VernacExtend",
            "8b7892e455ded847e40138293000e100ae6dee31"
        ],
        [
            "intros t l2 H; rewrite permutation_one_inv with (1 := H); auto.",
            "VernacExtend",
            "3528c3e55779ff92869598606d1d74654b8022ca"
        ],
        [
            "apply build_one.",
            "VernacExtend",
            "e03f6357a0ae5e2be0a1c4306ed2127b74a103ea"
        ],
        [
            "intros t l1 l2 H H0 H1 l0 H2.",
            "VernacExtend",
            "26dcd816bd342df87f61d47c7b8b8c67a68823c6"
        ],
        [
            "apply build_step with (l2 := l2); auto.",
            "VernacExtend",
            "45d68b007453db75f402bb83297fac75dc4cbe23"
        ],
        [
            "case H.",
            "VernacExtend",
            "ed133bc3c18fb327812c50c4771060c04c7f32b1"
        ],
        [
            "intros l3 (t1, (t2, (HH1, (HH2, HH3)))).",
            "VernacExtend",
            "3e439e509b192dcba9f9161dcb2284e575ace4c5"
        ],
        [
            "exists l3; exists t1; exists t2; repeat (split; auto).",
            "VernacExtend",
            "c1cd033c79091e7d14f2f34906ca21d1be6a195d"
        ],
        [
            "apply permutation_trans with (2 := HH2); auto.",
            "VernacExtend",
            "cf5924d060c37ef23487c398ba2f200b064ec451"
        ],
        [
            "apply permutation_sym; auto.",
            "VernacExtend",
            "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition obuildf : forall l : list (btree A), l <> nil -> ordered (sum_order f) l -> {t : btree A | build l t}.",
            "VernacDefinition",
            "0daca1c2614d47170a4a6a1cbdde7c07b91cb785"
        ],
        [
            "intros l; elim l using list_length_induction.",
            "VernacExtend",
            "708d8bdb28faedfbd83cbf04a879f5719ccbe3cb"
        ],
        [
            "intros l1; case l1; clear l1.",
            "VernacExtend",
            "bb569b2b128915f4de2971d80c6a2bd9fe9de3d1"
        ],
        [
            "intros H H0; case H0; auto.",
            "VernacExtend",
            "c31c03beb9e256c56a1ff4d088277162263c8880"
        ],
        [
            "intros b l0; case l0.",
            "VernacExtend",
            "3a693852ae627a11eba4681c39f576b17721a5a8"
        ],
        [
            "intros H H0 H1; exists b; auto.",
            "VernacExtend",
            "f649fd17e4b719d8f24f16cd4bb8bd0d8027a3a6"
        ],
        [
            "apply build_one.",
            "VernacExtend",
            "e03f6357a0ae5e2be0a1c4306ed2127b74a103ea"
        ],
        [
            "intros b0 l1 H H0 H1.",
            "VernacExtend",
            "91abce8c21ead534408ba40aac707c4fcaf4222f"
        ],
        [
            "case (H (insert (le_sum f) (node b b0) l1)); auto.",
            "VernacExtend",
            "a15670a2a3bb2a18564ecdb4181e6f8a36555028"
        ],
        [
            "rewrite <- permutation_length with (1 := insert_permutation _ (le_sum f) l1 (node b b0)); simpl in |- *; auto.",
            "VernacExtend",
            "a2aba293ffc56d7efea351d145665d4c5b055dfc"
        ],
        [
            "red in |- *; intros H2; absurd (length (node b b0 :: l1) = length (insert (le_sum f) (node b b0) l1)).",
            "VernacExtend",
            "4c10c266d499f60bba010e83419c8bf1d7ffd05f"
        ],
        [
            "rewrite H2; simpl in |- *; intros; discriminate.",
            "VernacExtend",
            "9cb0d766182a937467c463eddea885202eabb7cb"
        ],
        [
            "apply permutation_length with (1 := insert_permutation _ (le_sum f) l1 (node b b0)); simpl in |- *; auto.",
            "VernacExtend",
            "86ff7125a190a0613a3a0ab26b6e91e95a7efc3c"
        ],
        [
            "apply insert_ordered; auto.",
            "VernacExtend",
            "0e68c5ff515530ce2ef17fc7812c75ef8d7b78c0"
        ],
        [
            "intros; apply le_sum_correct1; auto.",
            "VernacExtend",
            "78fc1d103efa3a43e44cec8d9ceb634bdb511080"
        ],
        [
            "intros; apply le_sum_correct2; auto.",
            "VernacExtend",
            "998fd50a367d83ea89b728294fa842dfb3398910"
        ],
        [
            "apply ordered_inv with (a := b0); auto.",
            "VernacExtend",
            "d783b13ca9c20e50280a08540568f5215baa2f35"
        ],
        [
            "apply ordered_inv with (a := b); auto.",
            "VernacExtend",
            "875086d8b369ccdd609f62815c670fc7b5b91a3d"
        ],
        [
            "intros t Ht; exists t.",
            "VernacExtend",
            "c50400d27a59451a68b132a1b10a8762718a9881"
        ],
        [
            "apply build_step with (2 := Ht).",
            "VernacExtend",
            "c0c8a599b4bf2379f6da24b669dbf796b9b6818e"
        ],
        [
            "red in |- *; auto.",
            "VernacExtend",
            "cab1687c6da0e60977d47d2335ecbd5d45e7e0b2"
        ],
        [
            "exists l1; exists b; exists b0; (repeat split; auto).",
            "VernacExtend",
            "be0e78f0214504c7f405b67eecf5e362dc4ae62c"
        ],
        [
            "apply permutation_sym; apply insert_permutation.",
            "VernacExtend",
            "014e6bfd84c8035258402ae357727d0f26b4eb31"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition buildf : forall l : list (btree A), l <> nil -> {t : btree A | build l t}.",
            "VernacDefinition",
            "077bd96bb9ac242435cdb2579b9071bbe4c39f6a"
        ],
        [
            "intros l Hl; cut (isort (le_sum f) l <> nil).",
            "VernacExtend",
            "574f420d0e22eb3f70dbd100a824a99b5b8930ec"
        ],
        [
            "intros H1; cut (ordered (sum_order f) (isort (le_sum f) l)).",
            "VernacExtend",
            "15d84f8862e6e4036547ac5f4809f5d66999e64c"
        ],
        [
            "intros H2; case (obuildf (isort (le_sum f) l) H1 H2).",
            "VernacExtend",
            "96cfd03ab206cb5028945c6c68a684f013a2d64d"
        ],
        [
            "intros t H3; exists t; auto.",
            "VernacExtend",
            "8b02a8f05f177e408e69b4a20faffc154167fe3b"
        ],
        [
            "apply build_permutation with (1 := H3); auto.",
            "VernacExtend",
            "3a0a43f27b28a3767178d569d777b81173f5c71f"
        ],
        [
            "apply permutation_sym; apply isort_permutation; auto.",
            "VernacExtend",
            "103d67dc393c9540a26281f8f5dea166a2403e21"
        ],
        [
            "apply isort_ordered; auto.",
            "VernacExtend",
            "7585d4a0a9bb6b939e15be724b99684a7a879cfb"
        ],
        [
            "intros; apply le_sum_correct1; auto.",
            "VernacExtend",
            "78fc1d103efa3a43e44cec8d9ceb634bdb511080"
        ],
        [
            "intros; apply le_sum_correct2; auto.",
            "VernacExtend",
            "998fd50a367d83ea89b728294fa842dfb3398910"
        ],
        [
            "Contradict Hl; apply permutation_nil_inv; auto.",
            "VernacExtend",
            "a06c195adc072bdc5583d522d9fa1340e074d739"
        ],
        [
            "rewrite <- Hl; auto.",
            "VernacExtend",
            "6a3a731ebedcb39274b28a54820bcf446ecf8301"
        ],
        [
            "apply isort_permutation; auto.",
            "VernacExtend",
            "82d03299e251a61db2039738a79812866797a9d9"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Theorem build_correct : forall (l : list (btree A)) (t : btree A), l <> nil -> build l t -> cover_min _ f l t.",
            "VernacStartTheoremProof",
            "28abd6981a35c2eeca9b02b195e1d850d27c674e"
        ],
        [
            "intros l; elim l using list_length_ind.",
            "VernacExtend",
            "bdeeaf0380c801866feb6be7358d5141485b5f20"
        ],
        [
            "intros l0 H t H0 H1.",
            "VernacExtend",
            "e15e10071c3f6f58ed31e871efe617248690a7f7"
        ],
        [
            "case (cover_min_ex _ f) with (1 := H0); auto.",
            "VernacExtend",
            "4addb1d0bc2f111c260b7c7228311c2dfc708db7"
        ],
        [
            "intros t1 (Ht1, Ht2).",
            "VernacExtend",
            "b22c3c97958204ed68fdfa918390a3b8fd4cce43"
        ],
        [
            "case cover_ordered_cover with (1 := Ht1); auto.",
            "VernacExtend",
            "c5bb981da960556bf60c4bca4cad986010351be3"
        ],
        [
            "intros l1 (Hl1, Hm1).",
            "VernacExtend",
            "5959f9e08af7151a67210d3e6c2d65cdcf4698f5"
        ],
        [
            "case (ordered_cover_height_pred A 0) with (1 := Hm1).",
            "VernacExtend",
            "3b67fbe21794133fecee5839defdde37062cf2b2"
        ],
        [
            "intros ln0 Ht3.",
            "VernacExtend",
            "c75d31381537982e319e83cffd3e1e968c1ea364"
        ],
        [
            "case exist_first_max with ln0.",
            "VernacExtend",
            "443b58bd9c4af29790e77c7dfffbafd3e30c675a"
        ],
        [
            "apply height_pred_not_nil1 with (1 := Ht3); auto.",
            "VernacExtend",
            "cd6fd5a4f10dd9357c19651aaf6095dc6ca71136"
        ],
        [
            "intros a (ln1, (ln2, (HH1, (HH2, HH3)))).",
            "VernacExtend",
            "d34334e5cd8604015720243e3049cbbcaae9eaf2"
        ],
        [
            "cut (length ln0 = length l1); [ intros IL | apply height_pred_length with (1 := Ht3) ].",
            "VernacExtend",
            "816db947c374950c3e4e7ec637d7b31b94cb8f21"
        ],
        [
            "rewrite HH1 in Ht3; rewrite HH1 in IL; clear HH1 ln0.",
            "VernacExtend",
            "e4855f9148fec9d1752d169732151f77c7c77276"
        ],
        [
            "case height_pred_disj_larger with (1 := Ht3); auto.",
            "VernacExtend",
            "7e4b3647da87a9f508dc3ce6ddd8086d91f423ac"
        ],
        [
            "intros (ln3, HH4); rewrite HH4 in HH3; rewrite HH4 in IL; rewrite HH4 in Ht3; clear HH4 ln2; auto.",
            "VernacExtend",
            "6561fb879ba1e61b448808f6e31fe7c01870bc93"
        ],
        [
            "case same_length_ex with (1 := IL); auto.",
            "VernacExtend",
            "a1f95d03b5046a32876b9f3182521300f9ee10df"
        ],
        [
            "intros l2 (l3, (t4, (HM1, (HM2, HM3)))).",
            "VernacExtend",
            "7b4625c2323900b2a6955b3e3e99a6d92d787f45"
        ],
        [
            "generalize HM2 HM3; case l3; try (simpl in |- *; intros; discriminate); clear HM2 HM3 l3.",
            "VernacExtend",
            "5a4764e63c1105227426344830725961ba4dc8e5"
        ],
        [
            "intros t5 l3 HM2 HM3; rewrite HM3 in Ht3; rewrite HM3 in IL; rewrite HM3 in Hm1; rewrite HM3 in Hl1; clear HM3 l1.",
            "VernacExtend",
            "d0d7eee3e2fa04a31c733c3a92fda04a40f98e06"
        ],
        [
            "cut (exists b1 : _, (exists c1 : _, (exists l4 : _, permutation (l2 ++ t4 :: t5 :: l3) (b1 :: c1 :: l4) /\\ ordered (sum_order f) (b1 :: c1 :: l4)))).",
            "VernacExtend",
            "2d342627db74a4107990cee008679105811207cf"
        ],
        [
            "intros (b1, (c1, (l4, (HC1, HC2)))).",
            "VernacExtend",
            "02b60ecc2809e6326a4eec66d6b9b45716a05cd4"
        ],
        [
            "case prod2list_reorder2 with (l1 := ln1) (l2 := ln3) (5 := HC1) (6 := HC2) (a := a); auto with datatypes.",
            "VernacExtend",
            "c2e8bce5b0bb6b37f9df25e2d1412440f9eea1c3"
        ],
        [
            "intros b H2; apply lt_le_weak; auto with arith.",
            "VernacExtend",
            "d8f04e629288b90466c8c8ecfa7ef4d8dade3c61"
        ],
        [
            "intros l5 (l6, (HB1, (HB2, (HB3, HB4)))).",
            "VernacExtend",
            "21a3bd1ec35d68a141d08841071ebb297c847a22"
        ],
        [
            "case height_pred_subst_pred with (1 := Ht3) (l2 := l5 ++ b1 :: c1 :: l6); auto.",
            "VernacExtend",
            "938d65d59390d723b5caa806da86ddd2290040d9"
        ],
        [
            "rewrite <- IL; repeat rewrite length_app; simpl in |- *; auto.",
            "VernacExtend",
            "dcdde7eeeedc1a839b8846608e89269580e370d6"
        ],
        [
            "intros t6 (HD1, HD2).",
            "VernacExtend",
            "e052820d7dacae3bec6843042c4d7d3d0c9a8dcb"
        ],
        [
            "case (buildf (l5 ++ node b1 c1 :: l6)); auto.",
            "VernacExtend",
            "63890a9dbd3f5ba7cb1fbb06dc2db32eec1fe60f"
        ],
        [
            "case l5; simpl in |- *; intros; discriminate.",
            "VernacExtend",
            "3dd15e18a348397b3e61acbd0e47a1d477e257c6"
        ],
        [
            "intros t7 HD3.",
            "VernacExtend",
            "ed7eb9b5eb845b81309fa8d61935cc4ce29b61ef"
        ],
        [
            "case H with (3 := HD3); auto with arith.",
            "VernacExtend",
            "b1d046008e88aa73e1cde3ea07c68b2cbb1c90b8"
        ],
        [
            "rewrite permutation_length with (1 := Hl1).",
            "VernacExtend",
            "01211ce16215622b8a6128f3a6205fe949358cbb"
        ],
        [
            "rewrite permutation_length with (1 := HC1).",
            "VernacExtend",
            "0d399f694c4f96526f8bdb61cdf25bd2332a7382"
        ],
        [
            "rewrite permutation_length with (1 := HB3).",
            "VernacExtend",
            "af5b2453c8d9079c2a952180a51a996df1c36584"
        ],
        [
            "repeat rewrite length_app; simpl in |- *; auto with arith.",
            "VernacExtend",
            "431e0d0289d0a7925135c5a01476993251ff021f"
        ],
        [
            "case l5; simpl in |- *; intros; discriminate.",
            "VernacExtend",
            "3dd15e18a348397b3e61acbd0e47a1d477e257c6"
        ],
        [
            "intros HD4 HD5.",
            "VernacExtend",
            "8a793b6e637da0bbe9340ac57a9800c0ffc12c1e"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "apply build_cover with (1 := H1).",
            "VernacExtend",
            "9e3f347d4ad2f8e95bef5f6e424ce30fc9077293"
        ],
        [
            "intros t0 H2; apply le_trans with (weight_tree f t1); auto.",
            "VernacExtend",
            "62b091b170419faec72faf73580811cb9bef3e72"
        ],
        [
            "rewrite (build_same_weight_tree l0 t t7); auto.",
            "VernacExtend",
            "51a3158cad849bde358cf2d21c592ada3211e6da"
        ],
        [
            "apply le_trans with (weight_tree f t6).",
            "VernacExtend",
            "84f372c94895cee3aecd79a7438cfd7e39b732c1"
        ],
        [
            "apply HD5; auto.",
            "VernacExtend",
            "c900129b94dd9a2edb5975e3e6e57715dc276549"
        ],
        [
            "apply ordered_cover_cover.",
            "VernacExtend",
            "e4133b02bd813cf9d9631a03ef1358cea05c8880"
        ],
        [
            "apply (height_pred_ordered_cover A 0 (ln1 ++ pred a :: ln3)); auto.",
            "VernacExtend",
            "0a09fe56e330563c478797d57446dece05943fd7"
        ],
        [
            "apply height_pred_shrink with (b := a); auto.",
            "VernacExtend",
            "4921c14bbc4ea7855de6e77195dc9b2627f965c2"
        ],
        [
            "replace (weight_tree f t1) with (0 * sum_leaves f t1 + weight_tree f t1); [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "5863590ce2c9cb0faeaaf38c10cdb53a31396197"
        ],
        [
            "rewrite height_pred_weight with (1 := Ht3).",
            "VernacExtend",
            "a1cd1da2f3d8437a2f913314ed0600d58aab2326"
        ],
        [
            "replace (weight_tree f t6) with (0 * sum_leaves f t6 + weight_tree f t6); [ idtac | simpl in |- *; auto ].",
            "VernacExtend",
            "30412473e172909cf83b251a3bca09aaff895ba7"
        ],
        [
            "rewrite height_pred_weight with (1 := HD1); auto.",
            "VernacExtend",
            "9f1350c6d7d46d0683aa1b6437a3bfd274a613dc"
        ],
        [
            "apply build_step with (2 := HD3); auto.",
            "VernacExtend",
            "9dc9b3ebdc3742284bbc4116d7d5f11fd9fb3a69"
        ],
        [
            "exists l4; exists b1; exists c1; repeat (split; auto).",
            "VernacExtend",
            "c63b475f6b2dbfbc48c338ea8841264f16797642"
        ],
        [
            "apply permutation_trans with (1 := Hl1).",
            "VernacExtend",
            "7c803ef5470ae3749866796027e0d809f6105fd0"
        ],
        [
            "apply permutation_sym; apply permutation_trans with (1 := HB3).",
            "VernacExtend",
            "8d25b566feeab15774037bbae1e8f4b6bbbe8d0d"
        ],
        [
            "apply permutation_sym; apply permutation_trans with (1 := HC1); auto.",
            "VernacExtend",
            "5db2457931d346c06c2ff118b3bae7fc3c6bcd83"
        ],
        [
            "apply permutation_trans with ((node b1 c1 :: l6) ++ l5); auto.",
            "VernacExtend",
            "6d9c68afbb395320d32263549efe96c1a2b55112"
        ],
        [
            "simpl in |- *; apply permutation_skip.",
            "VernacExtend",
            "e9374da6b87d1250e1938b5d17dafe6c6e22513f"
        ],
        [
            "apply permutation_inv with c1.",
            "VernacExtend",
            "22b21b0c25343deebb9c1cb5bed539b7887f0a93"
        ],
        [
            "apply permutation_inv with b1.",
            "VernacExtend",
            "7eb86aceb5277a1674d0ba6023f2a1fdf7bd7306"
        ],
        [
            "apply permutation_sym; apply permutation_trans with (1 := HB3).",
            "VernacExtend",
            "8d25b566feeab15774037bbae1e8f4b6bbbe8d0d"
        ],
        [
            "apply (permutation_app_swap _ l5 (b1 :: c1 :: l6)).",
            "VernacExtend",
            "2133d84b8855b52e340d0f244b7d1832288f73ab"
        ],
        [
            "generalize (isort_permutation _ (le_sum f) (l2 ++ t4 :: t5 :: l3)); generalize (isort_ordered _ (sum_order f) (le_sum f) (le_sum_correct1 _ f) (le_sum_correct2 _ f) (l2 ++ t4 :: t5 :: l3)).",
            "VernacExtend",
            "6ec4fb0fe276b132ad6fca0764bfa35b07b7942e"
        ],
        [
            "case (isort (le_sum f) (l2 ++ t4 :: t5 :: l3)); auto.",
            "VernacExtend",
            "6f6313a64d81cf51b39c484413106fd619af060d"
        ],
        [
            "intros H2 H3.",
            "VernacExtend",
            "beccbd383545e6362a7752a2337b60f995002838"
        ],
        [
            "absurd (l2 ++ t4 :: t5 :: l3 = nil); auto.",
            "VernacExtend",
            "5068b951bdb6fa91291f47b4515870ee4ef80dc8"
        ],
        [
            "case l2; simpl in |- *; intros; discriminate.",
            "VernacExtend",
            "858e29eab9a3a835f80fe7191fc17ff5db6ccd9f"
        ],
        [
            "apply permutation_nil_inv with (1 := H3).",
            "VernacExtend",
            "759a928c568be4ab5cb1fc06f98be78b47e84a98"
        ],
        [
            "intros b l4; case l4.",
            "VernacExtend",
            "56c0204840b5c0001ea865b4fff48a90864f0962"
        ],
        [
            "intros H2 H3; absurd (l2 ++ t4 :: t5 :: l3 = b :: nil).",
            "VernacExtend",
            "e3229bcac0a3b1b8a79fc6579c70c63b9c26649d"
        ],
        [
            "case l2; simpl in |- *; try (intros; discriminate).",
            "VernacExtend",
            "992b11bad66697d7377d2e2f566205e9b65acca7"
        ],
        [
            "intros b0 l5; case l5; try (intros; discriminate).",
            "VernacExtend",
            "2109b8593b52ebcba91e8bb64c2d06cf9b491d4e"
        ],
        [
            "apply permutation_one_inv with (1 := permutation_sym _ _ _ H3).",
            "VernacExtend",
            "b81b314b8001adf13b2c211e433ef547eb6c9b7d"
        ],
        [
            "intros b0 l5 H2 H3; exists b; exists b0; exists l5; auto.",
            "VernacExtend",
            "278165accba13e6cd3eba36309b78a41ff67e29f"
        ],
        [
            "intros ((H2, (H3, H4)), H5); split.",
            "VernacExtend",
            "f8d979eb378896de425c1e6f4bea8a7ae718d908"
        ],
        [
            "apply build_cover with (1 := H1).",
            "VernacExtend",
            "9e3f347d4ad2f8e95bef5f6e424ce30fc9077293"
        ],
        [
            "intros t2 H6; rewrite <- cover_one_inv with (t1 := t1) (t2 := t2).",
            "VernacExtend",
            "df133d68852c913f62ea3087d0e0066cd2219865"
        ],
        [
            "rewrite <- cover_one_inv with (t1 := t1) (t2 := t); auto.",
            "VernacExtend",
            "e838092c8263263146d5a3738f1c198ea65a2018"
        ],
        [
            "rewrite <- H5; apply cover_permutation with (2 := Hl1); auto.",
            "VernacExtend",
            "8285dd58f8f5220d2b562eadd93c7ced8c70806a"
        ],
        [
            "apply build_cover with (1 := H1).",
            "VernacExtend",
            "9e3f347d4ad2f8e95bef5f6e424ce30fc9077293"
        ],
        [
            "rewrite <- H5; apply cover_permutation with (2 := Hl1); auto.",
            "VernacExtend",
            "8285dd58f8f5220d2b562eadd93c7ced8c70806a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition build_fun : forall l : list (btree A), l <> nil -> {t : btree A | cover_min _ f l t}.",
            "VernacDefinition",
            "c4e3f1cf227a7f88c8cc2b9d6a1f1f339b769faa"
        ],
        [
            "intros l Hl; case (buildf l Hl).",
            "VernacExtend",
            "b44361ed8f0f59bd0af015f49e5b758c6cfd976b"
        ],
        [
            "intros x b; exists x.",
            "VernacExtend",
            "a563a6deb70f63aaa8a5c8428e7d01274a7200b7"
        ],
        [
            "apply build_correct; auto.",
            "VernacExtend",
            "12a6609d073e4ca60305fd5d1b4768bf9fcc90b0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Build.",
            "VernacEndSegment",
            "54b4829f611e877c0c4eafe95898431f88c3b15b"
        ],
        [
            "Arguments build [A].",
            "VernacArguments",
            "d848b721490be3e82b0326fc21240b9a27af2989"
        ]
    ],
    "proofs": [
        {
            "name": "build_cover",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros l t H; elim H; clear H l t; auto.",
                        "VernacExtend",
                        "9eb9fb4c10ae7fc6a7e97224b53386a61b05a90f"
                    ]
                },
                {
                    "command": [
                        "intros t l1 l2 (l3, (t1, (t2, (HH, (HH1, HH2))))) H0 H1; try assumption.",
                        "VernacExtend",
                        "7a3bdb8571d6b7a327c0faf3382f80122bb2e030"
                    ]
                },
                {
                    "command": [
                        "apply cover_node with (1 := HH1); auto.",
                        "VernacExtend",
                        "510606126f7acfd625be97bb3d829fca57964b98"
                    ]
                },
                {
                    "command": [
                        "apply cover_permutation with (2 := HH2); auto.",
                        "VernacExtend",
                        "004c2a483c4089fe895bed15d212ffe75c2181cf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "build_comp",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros l1 l2 t1 t2 H; generalize l2 t2; elim H; clear H l1 t1 l2 t2.",
                        "VernacExtend",
                        "00fa59667e81bcdb19252d0a60cab000e22bf21d"
                    ]
                },
                {
                    "command": [
                        "intros t l2 t2 H H0 (l3, (l4, (H1, (H2, H3)))).",
                        "VernacExtend",
                        "e048a8784c003ce71d8f4d38c3678d2ef06c6a99"
                    ]
                },
                {
                    "command": [
                        "generalize H0; inversion H; clear H0.",
                        "VernacExtend",
                        "985485ffc678244e0e9a09d7655078085e3b183b"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; repeat rewrite <- plus_n_O; auto.",
                        "VernacExtend",
                        "59bd81a7cb4f9bdd016bd145168c18a9aadfa621"
                    ]
                },
                {
                    "command": [
                        "case H4.",
                        "VernacExtend",
                        "88a9a2218f38b51a9b30d42ef19128a3b872b7bd"
                    ]
                },
                {
                    "command": [
                        "intros l5 (t3, (t4, (H8, (H9, H10)))).",
                        "VernacExtend",
                        "3fc22efec40424e3a84e1f80c780fd96344c7230"
                    ]
                },
                {
                    "command": [
                        "absurd (length l2 = length (t3 :: t4 :: l5)).",
                        "VernacExtend",
                        "fd356ce3bafd3d89224c3bcf3ca3d5c2828afe3d"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_length with (1 := H2).",
                        "VernacExtend",
                        "70d004fca6a47953fc248765b485718f2a74a366"
                    ]
                },
                {
                    "command": [
                        "rewrite <- length_map with (f := sum_leaves f) (l := l4).",
                        "VernacExtend",
                        "03e066cce5457c5fc52dd1b0fc4d7a2843d0ec52"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H3.",
                        "VernacExtend",
                        "1eb91ccefb59c504d04364b76e0995592b63f60e"
                    ]
                },
                {
                    "command": [
                        "rewrite length_map with (f := sum_leaves f).",
                        "VernacExtend",
                        "32c13bde4e2137c7a0edce1729972b5544ae976a"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_length with (1 := permutation_sym _ _ _ H1).",
                        "VernacExtend",
                        "22baf61432acd86e82fdefa2712bea6ddb72f166"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; red in |- *; intros; discriminate.",
                        "VernacExtend",
                        "3d9e3cad2127e705c546560dd2e3fde1f1f047e9"
                    ]
                },
                {
                    "command": [
                        "apply permutation_length with (1 := H9).",
                        "VernacExtend",
                        "acf7314ced8d5cdf770fafa2e2bcf3eef09e2b54"
                    ]
                },
                {
                    "command": [
                        "intros t l1 l2 H H0 H1 l0 t2 H2 H3 H4.",
                        "VernacExtend",
                        "2a436c0eb544034ee7cbe4f3b703862c453a7939"
                    ]
                },
                {
                    "command": [
                        "inversion H2.",
                        "VernacExtend",
                        "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
                    ]
                },
                {
                    "command": [
                        "case H.",
                        "VernacExtend",
                        "ed133bc3c18fb327812c50c4771060c04c7f32b1"
                    ]
                },
                {
                    "command": [
                        "intros l5 (t3, (t4, (H8, (H9, H10)))).",
                        "VernacExtend",
                        "3fc22efec40424e3a84e1f80c780fd96344c7230"
                    ]
                },
                {
                    "command": [
                        "case H4.",
                        "VernacExtend",
                        "88a9a2218f38b51a9b30d42ef19128a3b872b7bd"
                    ]
                },
                {
                    "command": [
                        "intros l6 (l7, (H11, (H12, H13))).",
                        "VernacExtend",
                        "69f72520158e89d9f935fede0a6f0a2a169bfc2d"
                    ]
                },
                {
                    "command": [
                        "absurd (length l1 = length (t3 :: t4 :: l5)).",
                        "VernacExtend",
                        "45cd8bb84d672c612dcc1a0f8283fc8b8df6146f"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_length with (1 := H11).",
                        "VernacExtend",
                        "d7ca22f233fb04b242a0fbbd0d03cfc070d9afea"
                    ]
                },
                {
                    "command": [
                        "rewrite <- length_map with (f := sum_leaves f) (l := l6).",
                        "VernacExtend",
                        "5bd18e86fd45083dcbd34fa8ab746ffe7785b23b"
                    ]
                },
                {
                    "command": [
                        "rewrite H13.",
                        "VernacExtend",
                        "bc2d32522e887645239b994008e234c058557cd9"
                    ]
                },
                {
                    "command": [
                        "rewrite length_map with (f := sum_leaves f).",
                        "VernacExtend",
                        "32c13bde4e2137c7a0edce1729972b5544ae976a"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_length with (1 := permutation_sym _ _ _ H12).",
                        "VernacExtend",
                        "24cfe35557a9f31e7d4d6f97fcd69c07a34adc0e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H5; simpl in |- *; red in |- *; intros; discriminate.",
                        "VernacExtend",
                        "2ffedef2921274b6bbe25ea948b1dfd5ef83eb2a"
                    ]
                },
                {
                    "command": [
                        "apply permutation_length with (1 := H9).",
                        "VernacExtend",
                        "acf7314ced8d5cdf770fafa2e2bcf3eef09e2b54"
                    ]
                },
                {
                    "command": [
                        "apply H1 with (1 := H6).",
                        "VernacExtend",
                        "e36570d99a68055459cfa040131950b19dc71c97"
                    ]
                },
                {
                    "command": [
                        "case one_step_comp with (3 := H) (4 := H5); auto.",
                        "VernacExtend",
                        "d7ad7483b2b840c0f7bb8c44951d78bc74119ba1"
                    ]
                },
                {
                    "command": [
                        "case one_step_comp with (3 := H) (4 := H5); auto.",
                        "VernacExtend",
                        "d7ad7483b2b840c0f7bb8c44951d78bc74119ba1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "build_same_weight_tree",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros l t1 t2 H H0; apply build_comp with (l1 := l) (l2 := l); auto.",
                        "VernacExtend",
                        "03370395b56157aae27c66c20399249d7fa32ba2"
                    ]
                },
                {
                    "command": [
                        "exists l; exists l; simpl in |- *; auto.",
                        "VernacExtend",
                        "8b7d9834359ac01bfd35cdcf1fef541c27986ef9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "build_permutation",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "intros l1 l2 t H; generalize l2; elim H; clear H l1 l2 t; auto.",
                        "VernacExtend",
                        "8b7892e455ded847e40138293000e100ae6dee31"
                    ]
                },
                {
                    "command": [
                        "intros t l2 H; rewrite permutation_one_inv with (1 := H); auto.",
                        "VernacExtend",
                        "3528c3e55779ff92869598606d1d74654b8022ca"
                    ]
                },
                {
                    "command": [
                        "apply build_one.",
                        "VernacExtend",
                        "e03f6357a0ae5e2be0a1c4306ed2127b74a103ea"
                    ]
                },
                {
                    "command": [
                        "intros t l1 l2 H H0 H1 l0 H2.",
                        "VernacExtend",
                        "26dcd816bd342df87f61d47c7b8b8c67a68823c6"
                    ]
                },
                {
                    "command": [
                        "apply build_step with (l2 := l2); auto.",
                        "VernacExtend",
                        "45d68b007453db75f402bb83297fac75dc4cbe23"
                    ]
                },
                {
                    "command": [
                        "case H.",
                        "VernacExtend",
                        "ed133bc3c18fb327812c50c4771060c04c7f32b1"
                    ]
                },
                {
                    "command": [
                        "intros l3 (t1, (t2, (HH1, (HH2, HH3)))).",
                        "VernacExtend",
                        "3e439e509b192dcba9f9161dcb2284e575ace4c5"
                    ]
                },
                {
                    "command": [
                        "exists l3; exists t1; exists t2; repeat (split; auto).",
                        "VernacExtend",
                        "c1cd033c79091e7d14f2f34906ca21d1be6a195d"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (2 := HH2); auto.",
                        "VernacExtend",
                        "cf5924d060c37ef23487c398ba2f200b064ec451"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; auto.",
                        "VernacExtend",
                        "00ac0f05aa5261d9ca08c5b94f567895ad7baa9d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "obuildf",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intros l; elim l using list_length_induction.",
                        "VernacExtend",
                        "708d8bdb28faedfbd83cbf04a879f5719ccbe3cb"
                    ]
                },
                {
                    "command": [
                        "intros l1; case l1; clear l1.",
                        "VernacExtend",
                        "bb569b2b128915f4de2971d80c6a2bd9fe9de3d1"
                    ]
                },
                {
                    "command": [
                        "intros H H0; case H0; auto.",
                        "VernacExtend",
                        "c31c03beb9e256c56a1ff4d088277162263c8880"
                    ]
                },
                {
                    "command": [
                        "intros b l0; case l0.",
                        "VernacExtend",
                        "3a693852ae627a11eba4681c39f576b17721a5a8"
                    ]
                },
                {
                    "command": [
                        "intros H H0 H1; exists b; auto.",
                        "VernacExtend",
                        "f649fd17e4b719d8f24f16cd4bb8bd0d8027a3a6"
                    ]
                },
                {
                    "command": [
                        "apply build_one.",
                        "VernacExtend",
                        "e03f6357a0ae5e2be0a1c4306ed2127b74a103ea"
                    ]
                },
                {
                    "command": [
                        "intros b0 l1 H H0 H1.",
                        "VernacExtend",
                        "91abce8c21ead534408ba40aac707c4fcaf4222f"
                    ]
                },
                {
                    "command": [
                        "case (H (insert (le_sum f) (node b b0) l1)); auto.",
                        "VernacExtend",
                        "a15670a2a3bb2a18564ecdb4181e6f8a36555028"
                    ]
                },
                {
                    "command": [
                        "rewrite <- permutation_length with (1 := insert_permutation _ (le_sum f) l1 (node b b0)); simpl in |- *; auto.",
                        "VernacExtend",
                        "a2aba293ffc56d7efea351d145665d4c5b055dfc"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros H2; absurd (length (node b b0 :: l1) = length (insert (le_sum f) (node b b0) l1)).",
                        "VernacExtend",
                        "4c10c266d499f60bba010e83419c8bf1d7ffd05f"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; simpl in |- *; intros; discriminate.",
                        "VernacExtend",
                        "9cb0d766182a937467c463eddea885202eabb7cb"
                    ]
                },
                {
                    "command": [
                        "apply permutation_length with (1 := insert_permutation _ (le_sum f) l1 (node b b0)); simpl in |- *; auto.",
                        "VernacExtend",
                        "86ff7125a190a0613a3a0ab26b6e91e95a7efc3c"
                    ]
                },
                {
                    "command": [
                        "apply insert_ordered; auto.",
                        "VernacExtend",
                        "0e68c5ff515530ce2ef17fc7812c75ef8d7b78c0"
                    ]
                },
                {
                    "command": [
                        "intros; apply le_sum_correct1; auto.",
                        "VernacExtend",
                        "78fc1d103efa3a43e44cec8d9ceb634bdb511080"
                    ]
                },
                {
                    "command": [
                        "intros; apply le_sum_correct2; auto.",
                        "VernacExtend",
                        "998fd50a367d83ea89b728294fa842dfb3398910"
                    ]
                },
                {
                    "command": [
                        "apply ordered_inv with (a := b0); auto.",
                        "VernacExtend",
                        "d783b13ca9c20e50280a08540568f5215baa2f35"
                    ]
                },
                {
                    "command": [
                        "apply ordered_inv with (a := b); auto.",
                        "VernacExtend",
                        "875086d8b369ccdd609f62815c670fc7b5b91a3d"
                    ]
                },
                {
                    "command": [
                        "intros t Ht; exists t.",
                        "VernacExtend",
                        "c50400d27a59451a68b132a1b10a8762718a9881"
                    ]
                },
                {
                    "command": [
                        "apply build_step with (2 := Ht).",
                        "VernacExtend",
                        "c0c8a599b4bf2379f6da24b669dbf796b9b6818e"
                    ]
                },
                {
                    "command": [
                        "red in |- *; auto.",
                        "VernacExtend",
                        "cab1687c6da0e60977d47d2335ecbd5d45e7e0b2"
                    ]
                },
                {
                    "command": [
                        "exists l1; exists b; exists b0; (repeat split; auto).",
                        "VernacExtend",
                        "be0e78f0214504c7f405b67eecf5e362dc4ae62c"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply insert_permutation.",
                        "VernacExtend",
                        "014e6bfd84c8035258402ae357727d0f26b4eb31"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "buildf",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "intros l Hl; cut (isort (le_sum f) l <> nil).",
                        "VernacExtend",
                        "574f420d0e22eb3f70dbd100a824a99b5b8930ec"
                    ]
                },
                {
                    "command": [
                        "intros H1; cut (ordered (sum_order f) (isort (le_sum f) l)).",
                        "VernacExtend",
                        "15d84f8862e6e4036547ac5f4809f5d66999e64c"
                    ]
                },
                {
                    "command": [
                        "intros H2; case (obuildf (isort (le_sum f) l) H1 H2).",
                        "VernacExtend",
                        "96cfd03ab206cb5028945c6c68a684f013a2d64d"
                    ]
                },
                {
                    "command": [
                        "intros t H3; exists t; auto.",
                        "VernacExtend",
                        "8b02a8f05f177e408e69b4a20faffc154167fe3b"
                    ]
                },
                {
                    "command": [
                        "apply build_permutation with (1 := H3); auto.",
                        "VernacExtend",
                        "3a0a43f27b28a3767178d569d777b81173f5c71f"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply isort_permutation; auto.",
                        "VernacExtend",
                        "103d67dc393c9540a26281f8f5dea166a2403e21"
                    ]
                },
                {
                    "command": [
                        "apply isort_ordered; auto.",
                        "VernacExtend",
                        "7585d4a0a9bb6b939e15be724b99684a7a879cfb"
                    ]
                },
                {
                    "command": [
                        "intros; apply le_sum_correct1; auto.",
                        "VernacExtend",
                        "78fc1d103efa3a43e44cec8d9ceb634bdb511080"
                    ]
                },
                {
                    "command": [
                        "intros; apply le_sum_correct2; auto.",
                        "VernacExtend",
                        "998fd50a367d83ea89b728294fa842dfb3398910"
                    ]
                },
                {
                    "command": [
                        "Contradict Hl; apply permutation_nil_inv; auto.",
                        "VernacExtend",
                        "a06c195adc072bdc5583d522d9fa1340e074d739"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hl; auto.",
                        "VernacExtend",
                        "6a3a731ebedcb39274b28a54820bcf446ecf8301"
                    ]
                },
                {
                    "command": [
                        "apply isort_permutation; auto.",
                        "VernacExtend",
                        "82d03299e251a61db2039738a79812866797a9d9"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "build_correct",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "intros l; elim l using list_length_ind.",
                        "VernacExtend",
                        "bdeeaf0380c801866feb6be7358d5141485b5f20"
                    ]
                },
                {
                    "command": [
                        "intros l0 H t H0 H1.",
                        "VernacExtend",
                        "e15e10071c3f6f58ed31e871efe617248690a7f7"
                    ]
                },
                {
                    "command": [
                        "case (cover_min_ex _ f) with (1 := H0); auto.",
                        "VernacExtend",
                        "4addb1d0bc2f111c260b7c7228311c2dfc708db7"
                    ]
                },
                {
                    "command": [
                        "intros t1 (Ht1, Ht2).",
                        "VernacExtend",
                        "b22c3c97958204ed68fdfa918390a3b8fd4cce43"
                    ]
                },
                {
                    "command": [
                        "case cover_ordered_cover with (1 := Ht1); auto.",
                        "VernacExtend",
                        "c5bb981da960556bf60c4bca4cad986010351be3"
                    ]
                },
                {
                    "command": [
                        "intros l1 (Hl1, Hm1).",
                        "VernacExtend",
                        "5959f9e08af7151a67210d3e6c2d65cdcf4698f5"
                    ]
                },
                {
                    "command": [
                        "case (ordered_cover_height_pred A 0) with (1 := Hm1).",
                        "VernacExtend",
                        "3b67fbe21794133fecee5839defdde37062cf2b2"
                    ]
                },
                {
                    "command": [
                        "intros ln0 Ht3.",
                        "VernacExtend",
                        "c75d31381537982e319e83cffd3e1e968c1ea364"
                    ]
                },
                {
                    "command": [
                        "case exist_first_max with ln0.",
                        "VernacExtend",
                        "443b58bd9c4af29790e77c7dfffbafd3e30c675a"
                    ]
                },
                {
                    "command": [
                        "apply height_pred_not_nil1 with (1 := Ht3); auto.",
                        "VernacExtend",
                        "cd6fd5a4f10dd9357c19651aaf6095dc6ca71136"
                    ]
                },
                {
                    "command": [
                        "intros a (ln1, (ln2, (HH1, (HH2, HH3)))).",
                        "VernacExtend",
                        "d34334e5cd8604015720243e3049cbbcaae9eaf2"
                    ]
                },
                {
                    "command": [
                        "cut (length ln0 = length l1); [ intros IL | apply height_pred_length with (1 := Ht3) ].",
                        "VernacExtend",
                        "816db947c374950c3e4e7ec637d7b31b94cb8f21"
                    ]
                },
                {
                    "command": [
                        "rewrite HH1 in Ht3; rewrite HH1 in IL; clear HH1 ln0.",
                        "VernacExtend",
                        "e4855f9148fec9d1752d169732151f77c7c77276"
                    ]
                },
                {
                    "command": [
                        "case height_pred_disj_larger with (1 := Ht3); auto.",
                        "VernacExtend",
                        "7e4b3647da87a9f508dc3ce6ddd8086d91f423ac"
                    ]
                },
                {
                    "command": [
                        "intros (ln3, HH4); rewrite HH4 in HH3; rewrite HH4 in IL; rewrite HH4 in Ht3; clear HH4 ln2; auto.",
                        "VernacExtend",
                        "6561fb879ba1e61b448808f6e31fe7c01870bc93"
                    ]
                },
                {
                    "command": [
                        "case same_length_ex with (1 := IL); auto.",
                        "VernacExtend",
                        "a1f95d03b5046a32876b9f3182521300f9ee10df"
                    ]
                },
                {
                    "command": [
                        "intros l2 (l3, (t4, (HM1, (HM2, HM3)))).",
                        "VernacExtend",
                        "7b4625c2323900b2a6955b3e3e99a6d92d787f45"
                    ]
                },
                {
                    "command": [
                        "generalize HM2 HM3; case l3; try (simpl in |- *; intros; discriminate); clear HM2 HM3 l3.",
                        "VernacExtend",
                        "5a4764e63c1105227426344830725961ba4dc8e5"
                    ]
                },
                {
                    "command": [
                        "intros t5 l3 HM2 HM3; rewrite HM3 in Ht3; rewrite HM3 in IL; rewrite HM3 in Hm1; rewrite HM3 in Hl1; clear HM3 l1.",
                        "VernacExtend",
                        "d0d7eee3e2fa04a31c733c3a92fda04a40f98e06"
                    ]
                },
                {
                    "command": [
                        "cut (exists b1 : _, (exists c1 : _, (exists l4 : _, permutation (l2 ++ t4 :: t5 :: l3) (b1 :: c1 :: l4) /\\ ordered (sum_order f) (b1 :: c1 :: l4)))).",
                        "VernacExtend",
                        "2d342627db74a4107990cee008679105811207cf"
                    ]
                },
                {
                    "command": [
                        "intros (b1, (c1, (l4, (HC1, HC2)))).",
                        "VernacExtend",
                        "02b60ecc2809e6326a4eec66d6b9b45716a05cd4"
                    ]
                },
                {
                    "command": [
                        "case prod2list_reorder2 with (l1 := ln1) (l2 := ln3) (5 := HC1) (6 := HC2) (a := a); auto with datatypes.",
                        "VernacExtend",
                        "c2e8bce5b0bb6b37f9df25e2d1412440f9eea1c3"
                    ]
                },
                {
                    "command": [
                        "intros b H2; apply lt_le_weak; auto with arith.",
                        "VernacExtend",
                        "d8f04e629288b90466c8c8ecfa7ef4d8dade3c61"
                    ]
                },
                {
                    "command": [
                        "intros l5 (l6, (HB1, (HB2, (HB3, HB4)))).",
                        "VernacExtend",
                        "21a3bd1ec35d68a141d08841071ebb297c847a22"
                    ]
                },
                {
                    "command": [
                        "case height_pred_subst_pred with (1 := Ht3) (l2 := l5 ++ b1 :: c1 :: l6); auto.",
                        "VernacExtend",
                        "938d65d59390d723b5caa806da86ddd2290040d9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IL; repeat rewrite length_app; simpl in |- *; auto.",
                        "VernacExtend",
                        "dcdde7eeeedc1a839b8846608e89269580e370d6"
                    ]
                },
                {
                    "command": [
                        "intros t6 (HD1, HD2).",
                        "VernacExtend",
                        "e052820d7dacae3bec6843042c4d7d3d0c9a8dcb"
                    ]
                },
                {
                    "command": [
                        "case (buildf (l5 ++ node b1 c1 :: l6)); auto.",
                        "VernacExtend",
                        "63890a9dbd3f5ba7cb1fbb06dc2db32eec1fe60f"
                    ]
                },
                {
                    "command": [
                        "case l5; simpl in |- *; intros; discriminate.",
                        "VernacExtend",
                        "3dd15e18a348397b3e61acbd0e47a1d477e257c6"
                    ]
                },
                {
                    "command": [
                        "intros t7 HD3.",
                        "VernacExtend",
                        "ed7eb9b5eb845b81309fa8d61935cc4ce29b61ef"
                    ]
                },
                {
                    "command": [
                        "case H with (3 := HD3); auto with arith.",
                        "VernacExtend",
                        "b1d046008e88aa73e1cde3ea07c68b2cbb1c90b8"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_length with (1 := Hl1).",
                        "VernacExtend",
                        "01211ce16215622b8a6128f3a6205fe949358cbb"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_length with (1 := HC1).",
                        "VernacExtend",
                        "0d399f694c4f96526f8bdb61cdf25bd2332a7382"
                    ]
                },
                {
                    "command": [
                        "rewrite permutation_length with (1 := HB3).",
                        "VernacExtend",
                        "af5b2453c8d9079c2a952180a51a996df1c36584"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite length_app; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "431e0d0289d0a7925135c5a01476993251ff021f"
                    ]
                },
                {
                    "command": [
                        "case l5; simpl in |- *; intros; discriminate.",
                        "VernacExtend",
                        "3dd15e18a348397b3e61acbd0e47a1d477e257c6"
                    ]
                },
                {
                    "command": [
                        "intros HD4 HD5.",
                        "VernacExtend",
                        "8a793b6e637da0bbe9340ac57a9800c0ffc12c1e"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "apply build_cover with (1 := H1).",
                        "VernacExtend",
                        "9e3f347d4ad2f8e95bef5f6e424ce30fc9077293"
                    ]
                },
                {
                    "command": [
                        "intros t0 H2; apply le_trans with (weight_tree f t1); auto.",
                        "VernacExtend",
                        "62b091b170419faec72faf73580811cb9bef3e72"
                    ]
                },
                {
                    "command": [
                        "rewrite (build_same_weight_tree l0 t t7); auto.",
                        "VernacExtend",
                        "51a3158cad849bde358cf2d21c592ada3211e6da"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (weight_tree f t6).",
                        "VernacExtend",
                        "84f372c94895cee3aecd79a7438cfd7e39b732c1"
                    ]
                },
                {
                    "command": [
                        "apply HD5; auto.",
                        "VernacExtend",
                        "c900129b94dd9a2edb5975e3e6e57715dc276549"
                    ]
                },
                {
                    "command": [
                        "apply ordered_cover_cover.",
                        "VernacExtend",
                        "e4133b02bd813cf9d9631a03ef1358cea05c8880"
                    ]
                },
                {
                    "command": [
                        "apply (height_pred_ordered_cover A 0 (ln1 ++ pred a :: ln3)); auto.",
                        "VernacExtend",
                        "0a09fe56e330563c478797d57446dece05943fd7"
                    ]
                },
                {
                    "command": [
                        "apply height_pred_shrink with (b := a); auto.",
                        "VernacExtend",
                        "4921c14bbc4ea7855de6e77195dc9b2627f965c2"
                    ]
                },
                {
                    "command": [
                        "replace (weight_tree f t1) with (0 * sum_leaves f t1 + weight_tree f t1); [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "5863590ce2c9cb0faeaaf38c10cdb53a31396197"
                    ]
                },
                {
                    "command": [
                        "rewrite height_pred_weight with (1 := Ht3).",
                        "VernacExtend",
                        "a1cd1da2f3d8437a2f913314ed0600d58aab2326"
                    ]
                },
                {
                    "command": [
                        "replace (weight_tree f t6) with (0 * sum_leaves f t6 + weight_tree f t6); [ idtac | simpl in |- *; auto ].",
                        "VernacExtend",
                        "30412473e172909cf83b251a3bca09aaff895ba7"
                    ]
                },
                {
                    "command": [
                        "rewrite height_pred_weight with (1 := HD1); auto.",
                        "VernacExtend",
                        "9f1350c6d7d46d0683aa1b6437a3bfd274a613dc"
                    ]
                },
                {
                    "command": [
                        "apply build_step with (2 := HD3); auto.",
                        "VernacExtend",
                        "9dc9b3ebdc3742284bbc4116d7d5f11fd9fb3a69"
                    ]
                },
                {
                    "command": [
                        "exists l4; exists b1; exists c1; repeat (split; auto).",
                        "VernacExtend",
                        "c63b475f6b2dbfbc48c338ea8841264f16797642"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with (1 := Hl1).",
                        "VernacExtend",
                        "7c803ef5470ae3749866796027e0d809f6105fd0"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply permutation_trans with (1 := HB3).",
                        "VernacExtend",
                        "8d25b566feeab15774037bbae1e8f4b6bbbe8d0d"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply permutation_trans with (1 := HC1); auto.",
                        "VernacExtend",
                        "5db2457931d346c06c2ff118b3bae7fc3c6bcd83"
                    ]
                },
                {
                    "command": [
                        "apply permutation_trans with ((node b1 c1 :: l6) ++ l5); auto.",
                        "VernacExtend",
                        "6d9c68afbb395320d32263549efe96c1a2b55112"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; apply permutation_skip.",
                        "VernacExtend",
                        "e9374da6b87d1250e1938b5d17dafe6c6e22513f"
                    ]
                },
                {
                    "command": [
                        "apply permutation_inv with c1.",
                        "VernacExtend",
                        "22b21b0c25343deebb9c1cb5bed539b7887f0a93"
                    ]
                },
                {
                    "command": [
                        "apply permutation_inv with b1.",
                        "VernacExtend",
                        "7eb86aceb5277a1674d0ba6023f2a1fdf7bd7306"
                    ]
                },
                {
                    "command": [
                        "apply permutation_sym; apply permutation_trans with (1 := HB3).",
                        "VernacExtend",
                        "8d25b566feeab15774037bbae1e8f4b6bbbe8d0d"
                    ]
                },
                {
                    "command": [
                        "apply (permutation_app_swap _ l5 (b1 :: c1 :: l6)).",
                        "VernacExtend",
                        "2133d84b8855b52e340d0f244b7d1832288f73ab"
                    ]
                },
                {
                    "command": [
                        "generalize (isort_permutation _ (le_sum f) (l2 ++ t4 :: t5 :: l3)); generalize (isort_ordered _ (sum_order f) (le_sum f) (le_sum_correct1 _ f) (le_sum_correct2 _ f) (l2 ++ t4 :: t5 :: l3)).",
                        "VernacExtend",
                        "6ec4fb0fe276b132ad6fca0764bfa35b07b7942e"
                    ]
                },
                {
                    "command": [
                        "case (isort (le_sum f) (l2 ++ t4 :: t5 :: l3)); auto.",
                        "VernacExtend",
                        "6f6313a64d81cf51b39c484413106fd619af060d"
                    ]
                },
                {
                    "command": [
                        "intros H2 H3.",
                        "VernacExtend",
                        "beccbd383545e6362a7752a2337b60f995002838"
                    ]
                },
                {
                    "command": [
                        "absurd (l2 ++ t4 :: t5 :: l3 = nil); auto.",
                        "VernacExtend",
                        "5068b951bdb6fa91291f47b4515870ee4ef80dc8"
                    ]
                },
                {
                    "command": [
                        "case l2; simpl in |- *; intros; discriminate.",
                        "VernacExtend",
                        "858e29eab9a3a835f80fe7191fc17ff5db6ccd9f"
                    ]
                },
                {
                    "command": [
                        "apply permutation_nil_inv with (1 := H3).",
                        "VernacExtend",
                        "759a928c568be4ab5cb1fc06f98be78b47e84a98"
                    ]
                },
                {
                    "command": [
                        "intros b l4; case l4.",
                        "VernacExtend",
                        "56c0204840b5c0001ea865b4fff48a90864f0962"
                    ]
                },
                {
                    "command": [
                        "intros H2 H3; absurd (l2 ++ t4 :: t5 :: l3 = b :: nil).",
                        "VernacExtend",
                        "e3229bcac0a3b1b8a79fc6579c70c63b9c26649d"
                    ]
                },
                {
                    "command": [
                        "case l2; simpl in |- *; try (intros; discriminate).",
                        "VernacExtend",
                        "992b11bad66697d7377d2e2f566205e9b65acca7"
                    ]
                },
                {
                    "command": [
                        "intros b0 l5; case l5; try (intros; discriminate).",
                        "VernacExtend",
                        "2109b8593b52ebcba91e8bb64c2d06cf9b491d4e"
                    ]
                },
                {
                    "command": [
                        "apply permutation_one_inv with (1 := permutation_sym _ _ _ H3).",
                        "VernacExtend",
                        "b81b314b8001adf13b2c211e433ef547eb6c9b7d"
                    ]
                },
                {
                    "command": [
                        "intros b0 l5 H2 H3; exists b; exists b0; exists l5; auto.",
                        "VernacExtend",
                        "278165accba13e6cd3eba36309b78a41ff67e29f"
                    ]
                },
                {
                    "command": [
                        "intros ((H2, (H3, H4)), H5); split.",
                        "VernacExtend",
                        "f8d979eb378896de425c1e6f4bea8a7ae718d908"
                    ]
                },
                {
                    "command": [
                        "apply build_cover with (1 := H1).",
                        "VernacExtend",
                        "9e3f347d4ad2f8e95bef5f6e424ce30fc9077293"
                    ]
                },
                {
                    "command": [
                        "intros t2 H6; rewrite <- cover_one_inv with (t1 := t1) (t2 := t2).",
                        "VernacExtend",
                        "df133d68852c913f62ea3087d0e0066cd2219865"
                    ]
                },
                {
                    "command": [
                        "rewrite <- cover_one_inv with (t1 := t1) (t2 := t); auto.",
                        "VernacExtend",
                        "e838092c8263263146d5a3738f1c198ea65a2018"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H5; apply cover_permutation with (2 := Hl1); auto.",
                        "VernacExtend",
                        "8285dd58f8f5220d2b562eadd93c7ced8c70806a"
                    ]
                },
                {
                    "command": [
                        "apply build_cover with (1 := H1).",
                        "VernacExtend",
                        "9e3f347d4ad2f8e95bef5f6e424ce30fc9077293"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H5; apply cover_permutation with (2 := Hl1); auto.",
                        "VernacExtend",
                        "8285dd58f8f5220d2b562eadd93c7ced8c70806a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "build_fun",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "intros l Hl; case (buildf l Hl).",
                        "VernacExtend",
                        "b44361ed8f0f59bd0af015f49e5b758c6cfd976b"
                    ]
                },
                {
                    "command": [
                        "intros x b; exists x.",
                        "VernacExtend",
                        "a563a6deb70f63aaa8a5c8428e7d01274a7200b7"
                    ]
                },
                {
                    "command": [
                        "apply build_correct; auto.",
                        "VernacExtend",
                        "12a6609d073e4ca60305fd5d1b4768bf9fcc90b0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}