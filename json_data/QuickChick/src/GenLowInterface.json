{
    "filename": "src/GenLowInterface.v",
    "coq_project": "QuickChick",
    "vernac_cmds": [
        [
            "Set Warnings \"-extraction-opaque-accessed,-extraction\".",
            "VernacSetOption",
            "0d9ccca50d6f2e2dcc602566ab5a0ab4e16fd208"
        ],
        [
            "Set Warnings \"-notation-overridden,-parsing\".",
            "VernacSetOption",
            "e5f1121c0752b2fa1e608a6680bad33b020316a3"
        ],
        [
            "Require Import ZArith List.",
            "VernacRequire",
            "9cff41dd2fcd1db2a6cc609313d460f8c1c36673"
        ],
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool ssrnat.",
            "VernacRequire",
            "96ef3830637b05135472a2aa5654a388421ed742"
        ],
        [
            "From ExtLib.Structures Require Export Functor Applicative Monads.",
            "VernacRequire",
            "dfba20e00f3108792780072e6164a1753251a735"
        ],
        [
            "Import MonadNotation.",
            "VernacImport",
            "b2fad3b56c7f1007d10b6d3cda77e74e6da50f59"
        ],
        [
            "Open Scope monad_scope.",
            "VernacOpenCloseScope",
            "c4c2904764180bec8e2cf2c4c70e7893d2086835"
        ],
        [
            "From QuickChick Require Import RandomQC RoseTrees Sets.",
            "VernacRequire",
            "508ee92c65fa027896c265afe8399adbc7d49f4a"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Set Bullet Behavior \"Strict Subproofs\".",
            "VernacSetOption",
            "2f48a6a957bc407939a01b772051438c4013f99b"
        ],
        [
            "Import ListNotations.",
            "VernacImport",
            "52647db2a3b752153a8cbd37039246f200bccdee"
        ],
        [
            "Definition isNone {T : Type} (u : option T) := match u with | Some _ => false | None => true end.",
            "VernacDefinition",
            "c46fdbf0885be8eec202686380ef5b6de960c4e2"
        ],
        [
            "Lemma randomSplit_codom : codom randomSplit <--> setT.",
            "VernacStartTheoremProof",
            "f2862a9404163a4f9bbdc9a56ca865ba3393ff48"
        ],
        [
            "by apply/subset_eqP; split=> // [[s1 s2]] _; apply: randomSplitAssumption.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module Type Sig.",
            "VernacDeclareModuleType",
            "cd71bf61797542c0865a9b0c25a005fc52d663c2"
        ],
        [
            "Parameter G : Type -> Type.",
            "VernacAssumption",
            "f0873eede7e6df55ad9b451ab03b907a5683a046"
        ],
        [
            "Parameter returnGen : forall {A : Type}, A -> G A.",
            "VernacAssumption",
            "60a5c34b10b7dd53a6634594d10a09afbb72491c"
        ],
        [
            "Parameter bindGen : forall {A B : Type}, G A -> (A -> G B) -> G B.",
            "VernacAssumption",
            "ab6bd263c8c291e4699a5bda62ff32b79a27f086"
        ],
        [
            "Parameter run : forall {A : Type}, G A -> nat -> RandomSeed -> A.",
            "VernacAssumption",
            "d9b397ba3045f22d32d04fa63f035b8842bbdfde"
        ],
        [
            "Parameter fmap : forall {A B : Type}, (A -> B) -> G A -> G B.",
            "VernacAssumption",
            "199d7a4a4be1503a5a4186e7b111a6692e9f0605"
        ],
        [
            "Parameter apGen : forall {A B : Type}, G (A -> B) -> G A -> G B.",
            "VernacAssumption",
            "db7fb305b4284c94f815263b458b9e9a1b65abe2"
        ],
        [
            "Parameter sized : forall {A: Type}, (nat -> G A) -> G A.",
            "VernacAssumption",
            "6f9272a102f3524cb64ffcccf8269d74290c213c"
        ],
        [
            "Parameter resize : forall {A: Type}, nat -> G A -> G A.",
            "VernacAssumption",
            "1dcaea515c1fa28a38cb705a529b7ffef17b6133"
        ],
        [
            "Parameter promote : forall {A : Type}, Rose (G A) -> G (Rose A).",
            "VernacAssumption",
            "19fd811e4db39f7303d3352b1d0a94b50c27845b"
        ],
        [
            "Parameter choose : forall {A : Type} `{ChoosableFromInterval A}, (A * A) -> G A.",
            "VernacAssumption",
            "7fe6cc065f10b2739f93fa31050a36f4f59db62c"
        ],
        [
            "Parameter sample : forall {A : Type}, G A -> list A.",
            "VernacAssumption",
            "75f91f94b92b30a3cd975e988ae4422f493dae33"
        ],
        [
            "Parameter variant : forall {A : Type}, SplitPath -> G A -> G A.",
            "VernacAssumption",
            "61de41eeaf78e7ab1000432368d7737464e52c71"
        ],
        [
            "Parameter reallyUnsafePromote : forall {r A:Type}, (r -> G A) -> G (r -> A).",
            "VernacAssumption",
            "50d3bc50abb9a09b641deaca7c36b399755c6a7a"
        ],
        [
            "Parameter promoteVariant : forall {A B : Type} (a : A) (f : A -> SplitPath) (g : G B) size (r r1 r2 : RandomSeed), randomSplit r = (r1,r2) -> run (reallyUnsafePromote (fun a => variant (f a) g)) size r a = run g size (varySeed (f a) r1).",
            "VernacAssumption",
            "f2e0bddda82409ed33b0f6b7d7a7c55ecabdc094"
        ],
        [
            "Definition semGenSize {A : Type} (g : G A) (size : nat) : set A := codom (run g size).",
            "VernacDefinition",
            "706d0d55c97d99777e619dcd6408de0ef94ec97b"
        ],
        [
            "Definition semGen {A : Type} (g : G A) : set A := \\bigcup_size semGenSize g size.",
            "VernacDefinition",
            "a993d59c7d66191ea39041dd1089334428b95907"
        ],
        [
            "Definition semGenSizeOpt {A : Type} (g : G (option A)) (s : nat) : set A := somes (semGenSize g s).",
            "VernacDefinition",
            "9fec1f9944ccc69f2a532b3a0dc4808eb015d46c"
        ],
        [
            "Definition semGenOpt {A : Type} (g : G (option A)) : set A := somes (semGen g).",
            "VernacDefinition",
            "7135aebf7dcfd4d1799c9ed8bc4065e434638024"
        ],
        [
            "Parameter semGenOpt_equiv : forall {A} (g : G (option A)), semGenOpt g <--> \\bigcup_s semGenSizeOpt g s.",
            "VernacAssumption",
            "e3cf7d9be91c9fdc2d59389045a6699b3961cef1"
        ],
        [
            "Parameter bindGen' : forall {A B : Type} (g : G A), (forall (a : A), (a \\in semGen g) -> G B) -> G B.",
            "VernacAssumption",
            "fa3a287ad6232a6aadf1a39907e1e13e6171e058"
        ],
        [
            "Arguments bindGen' [A] [B] _ _.",
            "VernacArguments",
            "ec93f3f849359ee9bf03c59e539affd8a1d84dd0"
        ],
        [
            "Class Unsized {A} (g : G A) := unsized : forall s1 s2, semGenSize g s1 <--> semGenSize g s2.",
            "VernacInductive",
            "48a224b244ace61918ca9dda0e1c69a67c7c6ef2"
        ],
        [
            "Class SizedMonotonic {A} (g : nat -> G A) := sizeMonotonic : forall s s1 s2, s1 <= s2 -> semGenSize (g s1) s \\subset semGenSize (g s2) s.",
            "VernacInductive",
            "fe84b1941fd411ddb6b4a05e9baf2228e3d08f1a"
        ],
        [
            "Class SizedMonotonicOpt {A} (g : nat -> G (option A)) := sizeMonotonicOpt : forall s s1 s2, s1 <= s2 -> semGenSizeOpt (g s1) s \\subset semGenSizeOpt (g s2) s.",
            "VernacInductive",
            "2cdc3edc7f29a6ebe43ef41ed59bba13c8d0316e"
        ],
        [
            "Class SizeMonotonic {A} (g : G A) := monotonic : forall s1 s2, s1 <= s2 -> semGenSize g s1 \\subset semGenSize g s2.",
            "VernacInductive",
            "c1f9304d065717fc4d915b978124f6d80e3adcf5"
        ],
        [
            "Class SizeMonotonicOpt {A} (g : G (option A)) := monotonicOpt : forall s1 s2, s1 <= s2 -> semGenSizeOpt g s1 \\subset semGenSizeOpt g s2.",
            "VernacInductive",
            "082fa7fed0fd22de5710f3421cc4f32533bf547f"
        ],
        [
            "Class SizeAntiMonotonicNone {A} (g : G (option A)) := monotonicNone : forall s1 s2, s1 <= s2 -> isNone :&: semGenSize g s2 \\subset isNone :&: semGenSize g s1.",
            "VernacInductive",
            "9ea949eec2bd99f92f3be0125baf9235e2a7e0a3"
        ],
        [
            "Parameter unsized_alt_def : forall A (g : G A) `{Unsized _ g}, forall s, semGenSize g s <--> semGen g.",
            "VernacAssumption",
            "2b612b0e7490a405b5af6519cc216112ae214ff0"
        ],
        [
            "Declare Instance unsizedMonotonic : forall {A} (g : G A), Unsized g -> SizeMonotonic g.",
            "VernacInstance",
            "c03e5c64d2b0d025e852d44c2d02ceb5f846d165"
        ],
        [
            "Parameter semReturn : forall A (x : A), semGen (returnGen x) <--> [set x].",
            "VernacAssumption",
            "51e4732664e3f3919875eaecf83548cdf22ff2f8"
        ],
        [
            "Parameter semReturnSize : forall A (x : A) size, semGenSize (returnGen x) size <--> [set x].",
            "VernacAssumption",
            "3ae37f5e2a811bce37d08f1c166fe5b9cf4a4322"
        ],
        [
            "Declare Instance unsizedReturn {A} (x : A) : Unsized (returnGen x).",
            "VernacInstance",
            "6f6b3e20787a002b0f0016bcfa3ee7981488ff9b"
        ],
        [
            "Declare Instance returnGenSizeMonotonic {A} (x : A) : SizeMonotonic (returnGen x).",
            "VernacInstance",
            "7ea55b2d0c3ce28391f93e11913c6d3be913a789"
        ],
        [
            "Declare Instance returnGenSizeMonotonicOpt {A} (x : option A) : SizeMonotonicOpt (returnGen x).",
            "VernacInstance",
            "2b6f7a22f8f9df09e569e4a7b0b3707d066b8b54"
        ],
        [
            "Parameter semBindSize : forall A B (g : G A) (f : A -> G B) (size : nat), semGenSize (bindGen g f) size <--> \\bigcup_(a in semGenSize g size) semGenSize (f a) size.",
            "VernacAssumption",
            "a6281b8f4afd7c20336d184097c8869c10dcc013"
        ],
        [
            "Parameter semBindSize_subset_compat : forall {A B : Type} (g g' : G A) (f f' : A -> G B), (forall s, semGenSize g s \\subset semGenSize g' s) -> (forall x s, semGenSize (f x) s \\subset semGenSize (f' x) s) -> (forall s, semGenSize (bindGen g f) s \\subset semGenSize (bindGen g' f') s).",
            "VernacAssumption",
            "d96e7f1854f4b2d8f81292b034f2ffe6a3556aaf"
        ],
        [
            "Parameter semBindSizeOpt_subset_compat : forall {A B : Type} (g g' : G A) (f f' : A -> G (option B)), (forall s, semGenSize g s \\subset semGenSize g' s) -> (forall x s, isSome :&: semGenSize (f x) s \\subset isSome :&: semGenSize (f' x) s) -> (forall s, isSome :&: semGenSize (bindGen g f) s \\subset isSome :&: semGenSize (bindGen g' f') s) .",
            "VernacAssumption",
            "c75a5cf0e45401e90b4d1f81b2db6d7bfcb9b8ab"
        ],
        [
            "Parameter monad_leftid : forall {A B : Type} (a: A) (f : A -> G B), semGen (bindGen (returnGen a) f) <--> semGen (f a).",
            "VernacAssumption",
            "da02d656e6a7ce10958b9a91520bb28ddf784810"
        ],
        [
            "Parameter monad_rightid : forall {A : Type} (g : G A), semGen (bindGen g returnGen) <--> semGen g.",
            "VernacAssumption",
            "69ef7bb8ea77c9469a3a5178042f49bcca58a5a3"
        ],
        [
            "Parameter monad_assoc: forall {A B C : Type} (ga : G A) (fb : A -> G B) (fc : B -> G C), semGen (bindGen (bindGen ga fb) fc) <--> semGen (bindGen ga (fun a => bindGen (fb a) fc)).",
            "VernacAssumption",
            "85379473aacda9d72fb590d371a58728d39950d0"
        ],
        [
            "Declare Instance bindUnsized {A B} (g : G A) (f : A -> G B) `{Unsized _ g} `{forall x, Unsized (f x)} : Unsized (bindGen g f).",
            "VernacInstance",
            "34afcb8b8d042a633528579cd79db38d7913eb71"
        ],
        [
            "Declare Instance bindMonotonic {A B} (g : G A) (f : A -> G B) `{SizeMonotonic _ g} `{forall x, SizeMonotonic (f x)} : SizeMonotonic (bindGen g f).",
            "VernacInstance",
            "6329cf47557878c6bfd6f5915f4c76e0660364cd"
        ],
        [
            "Declare Instance bindMonotonicOpt {A B} (g : G A) (f : A -> G (option B)) `{SizeMonotonic _ g} `{forall x, SizeMonotonicOpt (f x)} : SizeMonotonicOpt (bindGen g f).",
            "VernacInstance",
            "d87968fc9af417db66669f5c3390c929b41ce0a6"
        ],
        [
            "Declare Instance bindMonotonicStrong {A B} (g : G A) (f : A -> G B) `{SizeMonotonic _ g} `{forall x, semGen g x -> SizeMonotonic (f x)} : SizeMonotonic (bindGen g f).",
            "VernacInstance",
            "4521b21d51d6a2d231fb17e94e9ad54d2ba19e9d"
        ],
        [
            "Declare Instance bindMonotonicOptStrong {A B} (g : G A) (f : A -> G (option B)) `{SizeMonotonic _ g} `{forall x, semGen g x -> SizeMonotonicOpt (f x)} : SizeMonotonicOpt (bindGen g f).",
            "VernacInstance",
            "ecd654ca1d51f0530de87945d7ef15f059a244a7"
        ],
        [
            "Parameter semBindUnsized1 : forall A B (g : G A) (f : A -> G B) `{Unsized _ g}, semGen (bindGen g f) <--> \\bigcup_(a in semGen g) semGen (f a).",
            "VernacAssumption",
            "5c87054dd9dd38e6727df4a3b9784ba62ca308d0"
        ],
        [
            "Parameter semBindUnsized2 : forall A B (g : G A) (f : A -> G B) `{forall a, Unsized (f a)}, semGen (bindGen g f) <--> \\bigcup_(a in semGen g) semGen (f a).",
            "VernacAssumption",
            "82beaa54061459973b64055d97413b0257b7cec1"
        ],
        [
            "Parameter semBindSizeMonotonic : forall {A B} (g : G A) (f : A -> G B) `{SizeMonotonic _ g} `{forall a, SizeMonotonic (f a)}, semGen (bindGen g f) <--> \\bigcup_(a in semGen g) semGen (f a).",
            "VernacAssumption",
            "c561352f647e6fa511340ea8c5e50fc7b1815164"
        ],
        [
            "Parameter semBindSizeMonotonicIncl_r : forall {A B} (g : G A) (f : A -> G (option B)) (s1 : set A) (s2 : A -> set B), semGen g \\subset s1 -> (forall x, semGen (f x) \\subset Some @: (s2 x) :|: [set None]) -> semGen (bindGen g f) \\subset Some @: (\\bigcup_(a in s1) s2 a) :|: [set None].",
            "VernacAssumption",
            "18eddaa7a3d63218afe59fc9993fd5bddb4d9417"
        ],
        [
            "Parameter semBindSizeMonotonicIncl_l : forall {A B} (g : G A) (f : A -> G (option B)) (s1 : set A) (fs : A -> set B) `{Hg : SizeMonotonic _ g} `{Hf : forall a, SizeMonotonicOpt (f a)}, s1 \\subset semGen g -> (forall x, Some @: (fs x) \\subset semGen (f x)) -> (Some @: \\bigcup_(a in s1) (fs a)) \\subset semGen (bindGen g f).",
            "VernacAssumption",
            "d2feeb0eb68d875c41da1db379dab72b1e2ecbee"
        ],
        [
            "Parameter semFmap : forall A B (f : A -> B) (g : G A), semGen (fmap f g) <--> f @: semGen g.",
            "VernacAssumption",
            "1d2185b277b646362f5dcbf1cdf5678aaadc9b27"
        ],
        [
            "Parameter semFmapSize : forall A B (f : A -> B) (g : G A) (size : nat), semGenSize (fmap f g) size <--> f @: semGenSize g size.",
            "VernacAssumption",
            "6d01c152e0646fea8fab8752881b7f5ed791403c"
        ],
        [
            "Declare Instance fmapUnsized {A B} (f : A -> B) (g : G A) `{Unsized _ g} : Unsized (fmap f g).",
            "VernacInstance",
            "4e975654b93259a223f2b13608608852633b6ea6"
        ],
        [
            "Declare Instance fmapMonotonic {A B} (f : A -> B) (g : G A) `{SizeMonotonic _ g} : SizeMonotonic (fmap f g).",
            "VernacInstance",
            "47b6efecba2002c90624066563b5e68c32881d78"
        ],
        [
            "Parameter semChoose : forall A `{RandomQC.ChoosableFromInterval A} (a1 a2 : A), RandomQC.leq a1 a2 -> (semGen (choose (a1,a2)) <--> [set a | RandomQC.leq a1 a && RandomQC.leq a a2]).",
            "VernacAssumption",
            "289abf86dca8f44f81323435214cd96198ad44f0"
        ],
        [
            "Parameter semChooseSize : forall A `{RandomQC.ChoosableFromInterval A} (a1 a2 : A), RandomQC.leq a1 a2 -> forall size, (semGenSize (choose (a1,a2)) size <--> [set a | RandomQC.leq a1 a && RandomQC.leq a a2]).",
            "VernacAssumption",
            "828ced9f548fe005c014526cbdc452ddd47d4b5f"
        ],
        [
            "Declare Instance chooseUnsized A `{RandomQC.ChoosableFromInterval A} (a1 a2 : A) : Unsized (choose (a1, a2)).",
            "VernacInstance",
            "5297f175487327b1f0c75e5efe454c71a10a174e"
        ],
        [
            "Parameter semSized : forall A (f : nat -> G A), semGen (sized f) <--> \\bigcup_s semGenSize (f s) s.",
            "VernacAssumption",
            "37d1df59954ab59da6bc4c7137facac697dc1dbc"
        ],
        [
            "Parameter semSizedSize : forall A (f : nat -> G A) s, semGenSize (sized f) s <--> semGenSize (f s) s.",
            "VernacAssumption",
            "8ec662b766d8f6c8004732a2580732c5a6c64f17"
        ],
        [
            "Parameter semSized_alt : forall A (f : nat -> G A) `{forall n, SizeMonotonic (f n)}, (forall n m s, n <= m -> semGenSize (f n) s \\subset semGenSize (f m) s) -> semGen (sized f) <--> \\bigcup_n (semGen (f n)).",
            "VernacAssumption",
            "9775465fc200ab43cb3dc10e4bbb08f9237825fd"
        ],
        [
            "Parameter semSized_opt : forall A (f : nat -> G (option A)) (H : forall n, SizeMonotonicOpt (f n)) (H' : SizedMonotonicOpt f), isSome :&: semGen (sized f) <--> isSome :&: \\bigcup_n (semGen (f n)).",
            "VernacAssumption",
            "27b76bd6719f3047adf7e2eb02bbfee7c9e0c14c"
        ],
        [
            "Declare Instance sizedSizeMonotonic A (gen : nat -> G A) `{forall n, SizeMonotonic (gen n)} `{SizedMonotonic A gen} : SizeMonotonic (sized gen).",
            "VernacInstance",
            "59539822287cf5ccdc3a246195737622538d4578"
        ],
        [
            "Declare Instance sizedSizeMonotonicOpt A (gen : nat -> G (option A)) `{forall n, SizeMonotonic (gen n)} `{SizedMonotonicOpt A gen} : SizeMonotonicOpt (sized gen).",
            "VernacInstance",
            "f9567f518262f35769d43c7b69dcfc698cf98b07"
        ],
        [
            "Parameter semResize : forall A (n : nat) (g : G A), semGen (resize n g) <--> semGenSize g n.",
            "VernacAssumption",
            "4ed152885ab61c6dcb1ca8dc614566520a8d3fa3"
        ],
        [
            "Parameter semSizeResize : forall A (s n : nat) (g : G A), semGenSize (resize n g) s <--> semGenSize g n.",
            "VernacAssumption",
            "1f168758a160863082e54337a4f5b3534b411582"
        ],
        [
            "Declare Instance unsizedResize {A} (g : G A) n : Unsized (resize n g).",
            "VernacInstance",
            "c00f8f9e3e4b8d9c5f85c7709cfedb3dca4176a4"
        ],
        [
            "Parameter semPromote : forall A (m : Rose (G A)), semGen (promote m) <--> codom2 (fun size seed => fmapRose (fun g => run g size seed) m).",
            "VernacAssumption",
            "f09c73ab3305f846ea7907ce5f1e61fec63a1f7d"
        ],
        [
            "Parameter semPromoteSize : forall (A : Type) (m : Rose (G A)) n, semGenSize (promote m) n <--> (fun t : Rose A => exists (seed : RandomSeed), fmapRose (fun g : G A => run g n seed) m = t).",
            "VernacAssumption",
            "38cadbc8da2c477245dbea01541ba18c8ae9ab63"
        ],
        [
            "Parameter runFmap : forall (A B : Type) (f : A -> B) (g : G A) seed size, run (fmap f g) seed size = f (run g seed size).",
            "VernacAssumption",
            "cee242d1d9e4828c6eb01c5b3973d54696d23585"
        ],
        [
            "Parameter runPromote : forall A (m : Rose (G A)) seed size, run (promote m) seed size = fmapRose (fun (g : G A) => run g seed size) m.",
            "VernacAssumption",
            "51ead469ddd993a1a9c902488c14597a3f4346c7"
        ],
        [
            "Parameter semFmapBind : forall A B C (g : G A) (f1 : B -> C) (f2 : A -> G B), semGen (fmap f1 (bindGen g f2)) <--> semGen (bindGen g (fun x => fmap f1 (f2 x))).",
            "VernacAssumption",
            "dea09e978795e592bf44626e6c45b441752ce1d2"
        ],
        [
            "Instance Functor_G : Functor G := { fmap A B := fmap; }.",
            "VernacInstance",
            "b068d10a7bcd07062e137c5649f194511f5e2f79"
        ],
        [
            "Instance Applicative_G : Applicative G := { pure A := returnGen; ap A B := apGen; }.",
            "VernacInstance",
            "24a6f4ba4ff2649258270e96a18a6fbf573dc150"
        ],
        [
            "Instance Monad_G : Monad G := { ret A := returnGen; bind A B := bindGen; }.",
            "VernacInstance",
            "e229bc75a618f8ee804a63c6309a0419cc0b0130"
        ],
        [
            "Parameter thunkGen : forall {A}, (unit -> G A) -> G A.",
            "VernacAssumption",
            "e8649eb124c99876273ab973fc3bcb0b60be2142"
        ],
        [
            "Parameter semThunkGenSize : forall A (f : unit -> G A) s, semGenSize (thunkGen f) s <--> semGenSize (f tt) s.",
            "VernacAssumption",
            "943165f9960206f2762591619ff36968f6649c9a"
        ],
        [
            "Parameter semThunkGen : forall A (f : unit -> G A), semGen (thunkGen f) <--> semGen (f tt).",
            "VernacAssumption",
            "66aceeb6dffbe5606e80d3edaa4b0859f301f919"
        ],
        [
            "Declare Instance thunkGenUnsized {A} (f : unit -> G A) `{Unsized _ (f tt)} : Unsized (thunkGen f).",
            "VernacInstance",
            "3857acf5abcca46aeb458a37a3589c8c4a5360b3"
        ],
        [
            "Declare Instance thunkGenSizeMonotonic {A} (f : unit -> G A) `{SizeMonotonic _ (f tt)} : SizeMonotonic (thunkGen f).",
            "VernacInstance",
            "7e80062e68935f96dde551121c91ae35e069855b"
        ],
        [
            "Declare Instance thunkGenSizeMonotonicOpt {A} (f : unit -> G (option A)) `{SizeMonotonicOpt _ (f tt)} : SizeMonotonicOpt (thunkGen f).",
            "VernacInstance",
            "47ad4b342f1bbafa2da71dd5fb42bbc75893ba17"
        ],
        [
            "Declare Instance thunkGenSizeAntiMonotonicNone {A} (f : unit -> G (option A)) `{SizeAntiMonotonicNone _ (f tt)} : SizeAntiMonotonicNone (thunkGen f).",
            "VernacInstance",
            "e090be99ac1b1be385908727558154ee7c24e659"
        ],
        [
            "Notation etaG g := (thunkGen (fun _ => g)).",
            "VernacSyntacticDefinition",
            "54fd03af4386c2c8960b37f5b2fb05d70f29b95f"
        ],
        [
            "End Sig.",
            "VernacEndSegment",
            "38a48a72f249d7080873b8549d2de703a0341844"
        ]
    ],
    "proofs": [
        {
            "name": "randomSplit_codom",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "by apply/subset_eqP; split=> // [[s1 s2]] _; apply: randomSplitAssumption.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}