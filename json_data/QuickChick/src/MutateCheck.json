{
    "filename": "src/MutateCheck.v",
    "coq_project": "QuickChick",
    "vernac_cmds": [
        [
            "Require Import QuickChick.",
            "VernacRequire",
            "1529c002c732288bd4c9989156f29335f1a571df"
        ],
        [
            "Class Mutateable (A : Type) : Type := { mutate : A -> list A }.",
            "VernacInductive",
            "16a15d759392209ea1fdac97a44be4c814d87efe"
        ],
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Import ListNotations.",
            "VernacImport",
            "52647db2a3b752153a8cbd37039246f200bccdee"
        ],
        [
            "Instance MutateableList (A : Type) : Mutateable (list A) | 1 := {| mutate l := let fix f l := match l with | [] => [] | x::xs => xs :: map (fun xs' => x :: xs') (f xs) end in f l |}.",
            "VernacInstance",
            "ac2f34135960fcf6538b9670b593a2b1b09dffc3"
        ],
        [
            "Example mutate_example : mutate [1;2;3] = [[2;3];[1;3];[1;2]].",
            "VernacDefinition",
            "fa8058198a763290422534f61702eba892683892"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Require Import Coq.Strings.String.",
            "VernacRequire",
            "5c887f44cc52e2a2db22e7cb04fefdce0c1d84f0"
        ],
        [
            "Open Scope string_scope.",
            "VernacOpenCloseScope",
            "495eaed75267102e624d9bec7187b98a746b66c2"
        ],
        [
            "Definition force {X} (x : X) := x.",
            "VernacDefinition",
            "15f24c222fb036835bbe5520842fe444418b1c73"
        ],
        [
            "Definition found_bug r := match r with | Failure _ _ _ _ _ _ _ _ => true | _ => false end.",
            "VernacDefinition",
            "dc61dfe7bdb93178758fd9b453ff3f96f267b5fa"
        ],
        [
            "Definition message (kill : bool) (n1 n2 : nat) := (if kill then \"Killed\" else \"Missed\") ++ \" mutant \" ++ (if kill then \"\" else \"[\") ++ show n2 ++ (if kill then \"\" else \"]\") ++ \" (\" ++ show n1 ++ \" frags)\" ++ nl.",
            "VernacDefinition",
            "51a73fd195d823594628ab2b0b37b4a2dad49c88"
        ],
        [
            "Open Scope nat.",
            "VernacOpenCloseScope",
            "fe7029b8cc5360100dbe27599763c4bffe6bbfa9"
        ],
        [
            "Definition mutateCheckManyWith {A P : Type} {_: Checker.Checkable P} {mutA: Mutateable A} (args : Args) (a : A) (ps : A -> list P) := let mutants := mutate a in Show.trace (\"Fighting \" ++ show (List.length mutants) ++ \" mutants\") (List.fold_left (fun n m => match n with (n1,n2) => let kill := List.existsb found_bug (List.map (quickCheckWith args) (ps m)) in let n1' := n1 + (if kill then 1 else 0) in let msg := message kill n1' n2 in Show.trace msg (n1', n2 + 1) end) mutants (0, 0)).",
            "VernacDefinition",
            "daf5ca6de3819e97325d8dca315ee31b8dbc41cb"
        ],
        [
            "Definition mutateCheckMany {A P : Type} {_: Checkable P} `{mutA: Mutateable A} (a : A) (ps : A -> list P) := mutateCheckManyWith stdArgs a ps.",
            "VernacDefinition",
            "e58a105b0b38d46be7d260f0e7784087b341fc30"
        ],
        [
            "Definition mutateCheckWith {A P: Type} {_: Checkable P} {mutA: Mutateable A} (args : Args) (a : A) (p : A -> P):= mutateCheckManyWith args a (fun a => cons (p a) nil).",
            "VernacDefinition",
            "c7265732df461f44472cf4130e1e32f428d356cb"
        ],
        [
            "Definition mutateCheck {A P: Type} {_: Checkable P} {mutA: Mutateable A} (a : A) (p : A -> P):= mutateCheckManyWith stdArgs a (fun a => cons (p a) nil).",
            "VernacDefinition",
            "a155461220a16839196e38763b40a490f18aa6c5"
        ]
    ],
    "proofs": [
        {
            "name": "mutate_example",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}