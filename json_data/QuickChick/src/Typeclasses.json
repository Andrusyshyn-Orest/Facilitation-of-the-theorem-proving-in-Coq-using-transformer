{
    "filename": "src/Typeclasses.v",
    "coq_project": "QuickChick",
    "vernac_cmds": [
        [
            "Set Warnings \"-extraction-opaque-accessed,-extraction\".",
            "VernacSetOption",
            "0d9ccca50d6f2e2dcc602566ab5a0ab4e16fd208"
        ],
        [
            "Set Warnings \"-notation-overridden,-parsing\".",
            "VernacSetOption",
            "e5f1121c0752b2fa1e608a6680bad33b020316a3"
        ],
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssreflect ssrfun ssrbool ssrnat eqtype seq.",
            "VernacRequire",
            "06d0e73ee2f2ff3d3e3e3d2c859029aa22a11183"
        ],
        [
            "Require Import Classes DependentClasses Checker Show.",
            "VernacRequire",
            "2c4c1b0366ff5bcd4e435f92119914748391550f"
        ],
        [
            "Require Import GenLow GenHigh Sets.",
            "VernacRequire",
            "468b0c3cb5989ef6b9543a1452b4d5024a8c49e4"
        ],
        [
            "Import GenLow GenHigh.",
            "VernacImport",
            "213d1becf9d65ff3bbbce840bff44b082754c20e"
        ],
        [
            "Instance arbST_eq {A} (a : A) : GenSuchThat A (fun x => x = a) := {| arbitraryST := returnGen (Some a) |}.",
            "VernacInstance",
            "cd3f0f736baa3a4a6e99cd51325ddc5f60f158d6"
        ],
        [
            "Instance arbST_Correct {A} (a : A) : SuchThatCorrect (fun x => x = a) (genST (fun x => x = a)).",
            "VernacInstance",
            "56c3852c825e67cc5a360de23f91916b32002778"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "simpl; rewrite semReturn.",
            "VernacExtend",
            "41a60d2a21e0df8ab3a4b72b6ef6cfa8908df0b5"
        ],
        [
            "split; intros H.",
            "VernacExtend",
            "a22fcc98cae3c9e7feb477b9e8b0236d37ea8d65"
        ],
        [
            "now firstorder.",
            "VernacExtend",
            "85aebdb4bbe00ba9ac1e986db5b58c00340fff45"
        ],
        [
            "destruct H as [x [Heq H]].",
            "VernacExtend",
            "b507b14c7331f93c730b201339e0d229a8aa7e86"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "split; eauto.",
            "VernacExtend",
            "f3520b20a884376c5c10e2f9e716eedc86a566b6"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Instance arbST_eq' {A} (a : A) : GenSuchThat A (fun x => a = x) := {| arbitraryST := returnGen (Some a) |}.",
            "VernacInstance",
            "4dc11ee4a7de63108683b78a1fa14192e4769cff"
        ],
        [
            "Instance arbST_Correct' {A} (a : A) : SuchThatCorrect (fun x => a = x ) (genST (fun x => a = x)).",
            "VernacInstance",
            "4b6c8fec139652c67b9b957f3d9d5def050b603c"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "simpl; rewrite semReturn.",
            "VernacExtend",
            "41a60d2a21e0df8ab3a4b72b6ef6cfa8908df0b5"
        ],
        [
            "split; intros H.",
            "VernacExtend",
            "a22fcc98cae3c9e7feb477b9e8b0236d37ea8d65"
        ],
        [
            "now firstorder.",
            "VernacExtend",
            "85aebdb4bbe00ba9ac1e986db5b58c00340fff45"
        ],
        [
            "destruct H as [x [Heq H]].",
            "VernacExtend",
            "b507b14c7331f93c730b201339e0d229a8aa7e86"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "split; eauto.",
            "VernacExtend",
            "f3520b20a884376c5c10e2f9e716eedc86a566b6"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Axiom ignore_generator_proofs : False.",
            "VernacAssumption",
            "6e1e8d0826ab7b045100b829719284e174423e49"
        ],
        [
            "Ltac ignore_gen_proofs := exfalso; apply ignore_generator_proofs.",
            "VernacExtend",
            "3578181f92bd94dd8d64c7fb7cd049f3656a5a3a"
        ],
        [
            "Global Instance testSuchThat {A : Type} {pre : A -> Prop} {prop : A -> Type} `{Show A} `{GenSuchThat A (fun x => pre x)} `{forall (x : A), Checkable (prop x)} : Checkable (forall x, pre x -> prop x).",
            "VernacInstance",
            "497fd44b84451033a7dbeec16cec1ce25571e63c"
        ],
        [
            "refine {| checker f := forAllMaybe (genST (fun x => pre x)) (fun x => checker (f x _)) |}.",
            "VernacExtend",
            "2df3bbd65e976a4dad72d671e8413af8ebdd278a"
        ],
        [
            "ignore_gen_proofs.",
            "VernacExtend",
            "8513d18e31df99ecff6ea96829615d3459908756"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Global Instance testSuchThat2 {A B : Type} {pre : A -> B -> Prop} {prop : A -> B -> Type} `{Show A} `{Show B} `{GenSuchThat (A * B) (fun x => let (a,b) := x in pre a b)} `{forall (a : A) (b : B), Checkable (prop a b)} : Checkable (forall a b , pre a b -> prop a b).",
            "VernacInstance",
            "31cc950d464a4142bb6c9d63f9187832c3659933"
        ],
        [
            "refine {| checker f := forAllMaybe (genST (fun x : A * B => let (a,b) := x in pre a b)) (fun x => let (a,b) := x in checker (f a b _)) |}.",
            "VernacExtend",
            "b0ccb530f5b089c35490ebcbe16da04ec78b4180"
        ],
        [
            "ignore_gen_proofs.",
            "VernacExtend",
            "8513d18e31df99ecff6ea96829615d3459908756"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ]
    ],
    "proofs": [
        {
            "name": "arbST_Correct",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite semReturn.",
                        "VernacExtend",
                        "41a60d2a21e0df8ab3a4b72b6ef6cfa8908df0b5"
                    ]
                },
                {
                    "command": [
                        "split; intros H.",
                        "VernacExtend",
                        "a22fcc98cae3c9e7feb477b9e8b0236d37ea8d65"
                    ]
                },
                {
                    "command": [
                        "now firstorder.",
                        "VernacExtend",
                        "85aebdb4bbe00ba9ac1e986db5b58c00340fff45"
                    ]
                },
                {
                    "command": [
                        "destruct H as [x [Heq H]].",
                        "VernacExtend",
                        "b507b14c7331f93c730b201339e0d229a8aa7e86"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "split; eauto.",
                        "VernacExtend",
                        "f3520b20a884376c5c10e2f9e716eedc86a566b6"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "arbST_Correct'",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite semReturn.",
                        "VernacExtend",
                        "41a60d2a21e0df8ab3a4b72b6ef6cfa8908df0b5"
                    ]
                },
                {
                    "command": [
                        "split; intros H.",
                        "VernacExtend",
                        "a22fcc98cae3c9e7feb477b9e8b0236d37ea8d65"
                    ]
                },
                {
                    "command": [
                        "now firstorder.",
                        "VernacExtend",
                        "85aebdb4bbe00ba9ac1e986db5b58c00340fff45"
                    ]
                },
                {
                    "command": [
                        "destruct H as [x [Heq H]].",
                        "VernacExtend",
                        "b507b14c7331f93c730b201339e0d229a8aa7e86"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "subst.",
                        "VernacExtend",
                        "ccc9cb848804101be22a0bb6c324861981c5c7f1"
                    ]
                },
                {
                    "command": [
                        "split; eauto.",
                        "VernacExtend",
                        "f3520b20a884376c5c10e2f9e716eedc86a566b6"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "testSuchThat",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "refine {| checker f := forAllMaybe (genST (fun x => pre x)) (fun x => checker (f x _)) |}.",
                        "VernacExtend",
                        "2df3bbd65e976a4dad72d671e8413af8ebdd278a"
                    ]
                },
                {
                    "command": [
                        "ignore_gen_proofs.",
                        "VernacExtend",
                        "8513d18e31df99ecff6ea96829615d3459908756"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "testSuchThat2",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "refine {| checker f := forAllMaybe (genST (fun x : A * B => let (a,b) := x in pre a b)) (fun x => let (a,b) := x in checker (f a b _)) |}.",
                        "VernacExtend",
                        "b0ccb530f5b089c35490ebcbe16da04ec78b4180"
                    ]
                },
                {
                    "command": [
                        "ignore_gen_proofs.",
                        "VernacExtend",
                        "8513d18e31df99ecff6ea96829615d3459908756"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}