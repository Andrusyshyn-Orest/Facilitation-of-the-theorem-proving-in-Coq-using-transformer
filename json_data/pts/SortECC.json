{
    "filename": "SortECC.v",
    "coq_project": "pts",
    "vernac_cmds": [
        [
            "Require Import General.",
            "VernacRequire",
            "958fb2d0438a5547f5047b6eff467ae18abb8350"
        ],
        [
            "Require Export Relations.",
            "VernacRequire",
            "ca942e55691cd1c29ddde01ebb7404769af28098"
        ],
        [
            "Unset Standard Proposition Elimination Names.",
            "VernacUnsetOption",
            "911574cdf91989455d0d3d11c7a9b0ca10fd1ae6"
        ],
        [
            "Section SortsOfECC.",
            "VernacBeginSection",
            "5055941f74a54b7387d7cc6a9c59f5912ea18914"
        ],
        [
            "Inductive calc : Set := | Pos : calc | Neg : calc.",
            "VernacInductive",
            "7d393e4fd98dc1c114a294cb3713354b4aaf7685"
        ],
        [
            "Inductive srt_ecc : Set := | Sprop : calc -> srt_ecc | Stype : calc -> nat -> srt_ecc.",
            "VernacInductive",
            "edc9f0f734bb59ccbcd75807303c54093bb84373"
        ],
        [
            "Inductive axiom_ecc : srt_ecc -> srt_ecc -> Prop := | ax_prop : forall (c : calc) (n : nat), axiom_ecc (Sprop c) (Stype c n) | ax_type : forall (c : calc) (n m : nat), n < m -> axiom_ecc (Stype c n) (Stype c m).",
            "VernacInductive",
            "98cab19f1be4d8e80f8aaa68fc47ce378bf81117"
        ],
        [
            "Inductive rules_ecc : srt_ecc -> srt_ecc -> srt_ecc -> Prop := | rule_prop_l : forall (c : calc) (s : srt_ecc), rules_ecc (Sprop c) s s | rule_prop_r : forall (c : calc) (s : srt_ecc), rules_ecc s (Sprop c) (Sprop c) | rule_type : forall (c1 c2 : calc) (n m p : nat), n <= p -> m <= p -> rules_ecc (Stype c1 n) (Stype c2 m) (Stype c2 p).",
            "VernacInductive",
            "20010ea73d87b3e9bea51e9f3481da84867ab482"
        ],
        [
            "Inductive univ_ecc : srt_ecc -> srt_ecc -> Prop := univ_type : forall (c : calc) (n m : nat), n <= m -> univ_ecc (Stype c n) (Stype c m).",
            "VernacInductive",
            "f983f6999cb3fb58ea39bf7f1d5ce43b9238af6b"
        ],
        [
            "Definition univ : relation srt_ecc := clos_refl_trans _ univ_ecc.",
            "VernacDefinition",
            "59bc913f3c250bf774ef79617c6513ae4683d160"
        ],
        [
            "Hint Resolve ax_prop ax_type rule_prop_l rule_prop_r rule_type univ_type: pts.",
            "VernacHints",
            "bcfc401b6c6d670bcebf26a966bdab5c7ddfc04b"
        ],
        [
            "Hint Unfold univ: pts.",
            "VernacHints",
            "75926fb007c5da7cfed53b0a69b4798de6e50c57"
        ],
        [
            "Let univ_trans : forall x y z : srt_ecc, univ x y -> univ y z -> univ x z.",
            "VernacDefinition",
            "314c980a7e67dc80971e842bbd27d2ffb95532c7"
        ],
        [
            "Proof rt_trans srt_ecc univ_ecc.",
            "VernacExactProof",
            "0812962e3ed54145809c9c40a9cd1b35437d79e5"
        ],
        [
            "Inductive inv_univ : srt_ecc -> srt_ecc -> Prop := | iu_prop : forall c : calc, inv_univ (Sprop c) (Sprop c) | iu_type : forall (c : calc) (n m : nat), n <= m -> inv_univ (Stype c n) (Stype c m).",
            "VernacInductive",
            "ebe5140edc9e63617280f5bc8c927e759d3f9861"
        ],
        [
            "Hint Resolve iu_prop iu_type: pts.",
            "VernacHints",
            "df0ec9a1260de9e35dd282767bd57b6602cfc6e7"
        ],
        [
            "Lemma inv_univ_trans : forall x y z : srt_ecc, inv_univ x y -> inv_univ y z -> inv_univ x z.",
            "VernacStartTheoremProof",
            "7f3a1d91b7cc44280e6ae39ad5aa870e7ab0312c"
        ],
        [
            "simple induction 1; intros; auto with arith pts.",
            "VernacExtend",
            "3b2eb19a80174ae6b87605a6c232e09172a96610"
        ],
        [
            "inversion_clear H1.",
            "VernacExtend",
            "1443921cbef97c67d0bd87bf517b302257ed5b28"
        ],
        [
            "apply iu_type.",
            "VernacExtend",
            "00862e210465f834866cb78d5a12bc7a319fef4e"
        ],
        [
            "apply le_trans with m; auto with arith pts.",
            "VernacExtend",
            "044797874e5281e7aec858346a373bbbc535d1cb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma univ_inv : forall s s' : srt_ecc, univ s s' -> forall P : Prop, (inv_univ s s' -> P) -> P.",
            "VernacStartTheoremProof",
            "60dfd9ad5a8133c1e649b42ece64507bcdc6453a"
        ],
        [
            "simple induction 1.",
            "VernacExtend",
            "b1f838dd75029717483785a8785c7867663c75bc"
        ],
        [
            "simple induction 1; auto with arith pts.",
            "VernacExtend",
            "507385c0bf2ac9299e3e7339c1c4bf002842984a"
        ],
        [
            "simple destruct x; auto with arith pts.",
            "VernacExtend",
            "01292d17f993836d16b9524ff09c854f842e6331"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "apply inv_univ_trans with y.",
            "VernacExtend",
            "36b63e87decfe5ebcdb70e0e306cf4ace4b7f4a8"
        ],
        [
            "apply H1; auto with arith pts.",
            "VernacExtend",
            "65dca60383cd65462b2013ac34b0a686a79bf8de"
        ],
        [
            "apply H3; auto with arith pts.",
            "VernacExtend",
            "bcd2a447ba0094a2b4f88928aa3a78748fe6d84a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma calc_dec : forall c c' : calc, decide (c = c').",
            "VernacStartTheoremProof",
            "cc80c7b64941da69b1f3a88c32821273a721f70a"
        ],
        [
            "simple destruct c; simple destruct c'; (right; discriminate) || auto with arith pts.",
            "VernacExtend",
            "8c45b12502b43a709812b4bd1c711e9836ed42b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ecc_sort_dec : forall s s' : srt_ecc, decide (s = s').",
            "VernacStartTheoremProof",
            "55f0a06cb74691e7c07b6b8c97310cd1cf8c39fc"
        ],
        [
            "simple destruct s; simple destruct s'; intros; try (right; discriminate).",
            "VernacExtend",
            "640edced429ebf84666244f942a4ea44cd3e07d3"
        ],
        [
            "elim calc_dec with c c0; intros.",
            "VernacExtend",
            "fcb2800acd19040b07b077c6e845435a2587b71c"
        ],
        [
            "left; elim a; auto with arith pts.",
            "VernacExtend",
            "749610ac46f0aa3c6c07962a6185e203922a09db"
        ],
        [
            "right; red in |- *; intros H; apply b; injection H; auto with arith pts.",
            "VernacExtend",
            "41dadaa2777981cecb5a9b05b8302a796d932b75"
        ],
        [
            "elim eq_nat_dec with n n0; intros.",
            "VernacExtend",
            "c39fd763a752e1eb901711df2c0bd575e30988a3"
        ],
        [
            "elim calc_dec with c c0; intros.",
            "VernacExtend",
            "fcb2800acd19040b07b077c6e845435a2587b71c"
        ],
        [
            "left; elim a; elim a0; auto with arith pts.",
            "VernacExtend",
            "e440928dc24faaa832c1e21423e6e9b8a3e2e4db"
        ],
        [
            "right; red in |- *; intros H; apply b; injection H; auto with arith pts.",
            "VernacExtend",
            "41dadaa2777981cecb5a9b05b8302a796d932b75"
        ],
        [
            "right; red in |- *; intros H; apply b; injection H; auto with arith pts.",
            "VernacExtend",
            "41dadaa2777981cecb5a9b05b8302a796d932b75"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma univ_ecc_dec : forall s s' : srt_ecc, decide (univ s s').",
            "VernacStartTheoremProof",
            "53bb377c261b860865af80907aa6754247298abd"
        ],
        [
            "refine (fun s s' : srt_ecc => match s, s' return (decide (univ s s')) with | Sprop c, Sprop c' => _ | Stype c n, Stype c' n' => _ | Sprop c, Stype c0 n => right _ _ | Stype c n, Sprop c0 => right _ _ end).",
            "VernacExtend",
            "08dd91b4cc2dc4685f532a4d778ff6d0778dd9f2"
        ],
        [
            "case (calc_dec c c'); [ left | right ].",
            "VernacExtend",
            "16cdd16cdf1fe810e0dc1b639fc9d65073e62087"
        ],
        [
            "elim e; auto with arith pts.",
            "VernacExtend",
            "1e460be06109fafefca7d5cb61566c61198c5736"
        ],
        [
            "red in |- *; intro; apply n.",
            "VernacExtend",
            "9e317148e0c0bddd98e554cdfd8d42dc72b101f5"
        ],
        [
            "apply univ_inv with (Sprop c) (Sprop c'); intros; auto with arith pts.",
            "VernacExtend",
            "3cbd33dedcfcef4111efc0d53ae400bd63837cdb"
        ],
        [
            "inversion_clear H0; auto with arith pts.",
            "VernacExtend",
            "f19801b7ccf63f671421c527cc11427e7d55b5e7"
        ],
        [
            "red in |- *; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "apply univ_inv with (Sprop c) (Stype c0 n); intros; auto with arith pts.",
            "VernacExtend",
            "754443707e96e8887d5832e9eaa1f0b3d39f8ca4"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "red in |- *; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "apply univ_inv with (Stype c n) (Sprop c0); intros; auto with arith pts.",
            "VernacExtend",
            "28f20a732e254ed8ae730304774f893edac7e315"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "case (calc_dec c c'); intros.",
            "VernacExtend",
            "b07a98665a1c5558b1c4c93e1e1386c69354c12e"
        ],
        [
            "case (le_gt_dec n n'); [ left | right ].",
            "VernacExtend",
            "d2295f1b3bd15bb53d7e096f72b2f794194b82f9"
        ],
        [
            "elim e; auto with arith pts.",
            "VernacExtend",
            "1e460be06109fafefca7d5cb61566c61198c5736"
        ],
        [
            "red in |- *; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "apply univ_inv with (Stype c n) (Stype c' n'); intros; auto with arith pts.",
            "VernacExtend",
            "68d00f8efe2a7beb579c8f3f14b087db7453d488"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "absurd (n <= n'); auto with arith pts.",
            "VernacExtend",
            "f456abc60a2d43811298f6280d7ff739213b47fa"
        ],
        [
            "right; red in |- *; intros; apply n0.",
            "VernacExtend",
            "c4372a88b8ba139a6f0949a7aeddb57c310c9c2b"
        ],
        [
            "apply univ_inv with (Stype c n) (Stype c' n'); intros; auto with arith pts.",
            "VernacExtend",
            "68d00f8efe2a7beb579c8f3f14b087db7453d488"
        ],
        [
            "inversion_clear H0; auto with arith pts.",
            "VernacExtend",
            "f19801b7ccf63f671421c527cc11427e7d55b5e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ecc_inf_axiom : forall s : srt_ecc, {sp : srt_ecc | ppal (axiom_ecc s) univ sp}.",
            "VernacStartTheoremProof",
            "5fcb8c5550730368385b8a136cdcd5dabe6fef58"
        ],
        [
            "refine (fun s : srt_ecc => match s return {sp : srt_ecc | ppal (axiom_ecc s) univ sp} with | Sprop c => exist _ (Stype c 0) _ | Stype c n => exist _ (Stype c (S n)) _ end).",
            "VernacExtend",
            "5b426655502cd9888e0fb372f801385b8c4452e9"
        ],
        [
            "split; intros; auto with arith pts.",
            "VernacExtend",
            "ed3cd498e456d1f30998af7148e25695b4a6f71c"
        ],
        [
            "inversion_clear H; auto with arith pts.",
            "VernacExtend",
            "6b8e02e4667147029e468cd7af8de11dacedd452"
        ],
        [
            "split; intros; auto with arith pts.",
            "VernacExtend",
            "ed3cd498e456d1f30998af7148e25695b4a6f71c"
        ],
        [
            "inversion_clear H; auto with arith pts.",
            "VernacExtend",
            "6b8e02e4667147029e468cd7af8de11dacedd452"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ecc_inf_rule : forall x1 x2 : srt_ecc, {x3 : srt_ecc | rules_ecc x1 x2 x3 & forall s1 s2 s3 : srt_ecc, rules_ecc s1 s2 s3 -> univ x1 s1 -> univ x2 s2 -> univ x3 s3}.",
            "VernacStartTheoremProof",
            "6b6858b53bf98a9944a8d544e218d6ae1b053b8b"
        ],
        [
            "refine (fun x1 x2 : srt_ecc => match x1, x2 return {x3 : srt_ecc | rules_ecc x1 x2 x3 & forall s1 s2 s3 : srt_ecc, rules_ecc s1 s2 s3 -> univ x1 s1 -> univ x2 s2 -> univ x3 s3} with | Sprop c, _ => exist2 _ _ x2 _ _ | Stype c n, Sprop c' => exist2 _ _ (Sprop c') _ _ | Stype c n, Stype c' n' => exist2 _ _ (Stype c' (max_nat n n')) _ _ end).",
            "VernacExtend",
            "0ff53b67867d003b977c9685fa5aee932cf43c92"
        ],
        [
            "auto with pts.",
            "VernacExtend",
            "9e5a17e95e6d9da3954b484b97f84dc6570486b2"
        ],
        [
            "simple induction 1; intros; auto with arith pts.",
            "VernacExtend",
            "3b2eb19a80174ae6b87605a6c232e09172a96610"
        ],
        [
            "apply univ_trans with (Stype c2 m); auto with arith pts.",
            "VernacExtend",
            "1378e7c7fca91541254f8e1993036f7a9f63ffcf"
        ],
        [
            "auto with pts.",
            "VernacExtend",
            "9e5a17e95e6d9da3954b484b97f84dc6570486b2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply univ_inv with (Sprop c') s2; intros.",
            "VernacExtend",
            "28ad93a3635cbaaceb2d6446633af824bd438708"
        ],
        [
            "auto with arith pts.",
            "VernacExtend",
            "b81589ac14f4fc88bd3f4f879f4b4bc42df871e4"
        ],
        [
            "generalize H.",
            "VernacExtend",
            "743bb3d7407250a3128af7c9fa5ed4e9ada826b2"
        ],
        [
            "inversion_clear H2; intros.",
            "VernacExtend",
            "413c91ff88554aa8a30f965427a3a224e2926b12"
        ],
        [
            "inversion_clear H2; auto with arith pts.",
            "VernacExtend",
            "488b8dbaa4a7c3835b6ba52636e71fe2f31d5379"
        ],
        [
            "unfold max_nat in |- *.",
            "VernacExtend",
            "3cd750495425274582a76cd8fc48bb9559c0f9c1"
        ],
        [
            "elim (le_gt_dec n n'); auto with arith pts.",
            "VernacExtend",
            "cf773bf85a57f5dd092f218a72cfa35c95e30360"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply univ_inv with (Stype c n) s1; intros; auto with arith pts.",
            "VernacExtend",
            "afde846f7f5901169ff0a0e5af69e1e84c11137e"
        ],
        [
            "apply univ_inv with (Stype c' n') s2; intros; auto with arith pts.",
            "VernacExtend",
            "9b14f4101fb9ec6c8ea213d0d3fa610dc296f8ff"
        ],
        [
            "generalize H.",
            "VernacExtend",
            "743bb3d7407250a3128af7c9fa5ed4e9ada826b2"
        ],
        [
            "inversion_clear H2.",
            "VernacExtend",
            "951d59869a2bafa3e041b055bd4a8bdff67bdad5"
        ],
        [
            "inversion_clear H3; intros.",
            "VernacExtend",
            "4c3324df38cfef24bbe66438799bd8e31d93482d"
        ],
        [
            "inversion_clear H3.",
            "VernacExtend",
            "36eaf986a968e31567b264d9a9c5b9d3482ec67e"
        ],
        [
            "cut (max_nat n n' <= p); auto with arith pts.",
            "VernacExtend",
            "a0e6f0b6522d44957c6b84cf835f2b2a5738bf6e"
        ],
        [
            "apply least_upper_bound_max_nat.",
            "VernacExtend",
            "904ee45f2b8cc8b3d8470e223395c0b2e5ad72ff"
        ],
        [
            "apply le_trans with m; auto with arith pts.",
            "VernacExtend",
            "044797874e5281e7aec858346a373bbbc535d1cb"
        ],
        [
            "apply le_trans with m0; auto with arith pts.",
            "VernacExtend",
            "aea9c913eff693f55f477f3c6d2487272dc5c80d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End SortsOfECC.",
            "VernacEndSegment",
            "5328f80ed0ba4845e3eab34559813ad1a9270c58"
        ],
        [
            "Require Export GenericSort.",
            "VernacRequire",
            "7006d3166565d6febf13d54e210850dff5e0efda"
        ],
        [
            "Definition sort_of_gen (gs : gen_sort) : Exc srt_ecc := match gs with | Gprop => value (Sprop Neg) | Gset => value (Sprop Pos) | Gtype n => value (Stype Neg n) | Gtypeset n => value (Stype Pos n) end.",
            "VernacDefinition",
            "c1b722500de0cb8fa5cd2269f19fa2faffda8c39"
        ],
        [
            "Definition gen_of_sort (s : srt_ecc) : gen_sort := match s with | Sprop Neg => Gprop | Sprop Pos => Gset | Stype Neg n => Gtype n | Stype Pos n => Gtypeset n end.",
            "VernacDefinition",
            "955b7686639b8d30fe23ad2350f638be7f4d6228"
        ]
    ],
    "proofs": [
        {
            "name": "inv_univ_trans",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "simple induction 1; intros; auto with arith pts.",
                        "VernacExtend",
                        "3b2eb19a80174ae6b87605a6c232e09172a96610"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H1.",
                        "VernacExtend",
                        "1443921cbef97c67d0bd87bf517b302257ed5b28"
                    ]
                },
                {
                    "command": [
                        "apply iu_type.",
                        "VernacExtend",
                        "00862e210465f834866cb78d5a12bc7a319fef4e"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with m; auto with arith pts.",
                        "VernacExtend",
                        "044797874e5281e7aec858346a373bbbc535d1cb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "univ_inv",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "simple induction 1.",
                        "VernacExtend",
                        "b1f838dd75029717483785a8785c7867663c75bc"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; auto with arith pts.",
                        "VernacExtend",
                        "507385c0bf2ac9299e3e7339c1c4bf002842984a"
                    ]
                },
                {
                    "command": [
                        "simple destruct x; auto with arith pts.",
                        "VernacExtend",
                        "01292d17f993836d16b9524ff09c854f842e6331"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "apply inv_univ_trans with y.",
                        "VernacExtend",
                        "36b63e87decfe5ebcdb70e0e306cf4ace4b7f4a8"
                    ]
                },
                {
                    "command": [
                        "apply H1; auto with arith pts.",
                        "VernacExtend",
                        "65dca60383cd65462b2013ac34b0a686a79bf8de"
                    ]
                },
                {
                    "command": [
                        "apply H3; auto with arith pts.",
                        "VernacExtend",
                        "bcd2a447ba0094a2b4f88928aa3a78748fe6d84a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "calc_dec",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "simple destruct c; simple destruct c'; (right; discriminate) || auto with arith pts.",
                        "VernacExtend",
                        "8c45b12502b43a709812b4bd1c711e9836ed42b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ecc_sort_dec",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "simple destruct s; simple destruct s'; intros; try (right; discriminate).",
                        "VernacExtend",
                        "640edced429ebf84666244f942a4ea44cd3e07d3"
                    ]
                },
                {
                    "command": [
                        "elim calc_dec with c c0; intros.",
                        "VernacExtend",
                        "fcb2800acd19040b07b077c6e845435a2587b71c"
                    ]
                },
                {
                    "command": [
                        "left; elim a; auto with arith pts.",
                        "VernacExtend",
                        "749610ac46f0aa3c6c07962a6185e203922a09db"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intros H; apply b; injection H; auto with arith pts.",
                        "VernacExtend",
                        "41dadaa2777981cecb5a9b05b8302a796d932b75"
                    ]
                },
                {
                    "command": [
                        "elim eq_nat_dec with n n0; intros.",
                        "VernacExtend",
                        "c39fd763a752e1eb901711df2c0bd575e30988a3"
                    ]
                },
                {
                    "command": [
                        "elim calc_dec with c c0; intros.",
                        "VernacExtend",
                        "fcb2800acd19040b07b077c6e845435a2587b71c"
                    ]
                },
                {
                    "command": [
                        "left; elim a; elim a0; auto with arith pts.",
                        "VernacExtend",
                        "e440928dc24faaa832c1e21423e6e9b8a3e2e4db"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intros H; apply b; injection H; auto with arith pts.",
                        "VernacExtend",
                        "41dadaa2777981cecb5a9b05b8302a796d932b75"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intros H; apply b; injection H; auto with arith pts.",
                        "VernacExtend",
                        "41dadaa2777981cecb5a9b05b8302a796d932b75"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "univ_ecc_dec",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "refine (fun s s' : srt_ecc => match s, s' return (decide (univ s s')) with | Sprop c, Sprop c' => _ | Stype c n, Stype c' n' => _ | Sprop c, Stype c0 n => right _ _ | Stype c n, Sprop c0 => right _ _ end).",
                        "VernacExtend",
                        "08dd91b4cc2dc4685f532a4d778ff6d0778dd9f2"
                    ]
                },
                {
                    "command": [
                        "case (calc_dec c c'); [ left | right ].",
                        "VernacExtend",
                        "16cdd16cdf1fe810e0dc1b639fc9d65073e62087"
                    ]
                },
                {
                    "command": [
                        "elim e; auto with arith pts.",
                        "VernacExtend",
                        "1e460be06109fafefca7d5cb61566c61198c5736"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intro; apply n.",
                        "VernacExtend",
                        "9e317148e0c0bddd98e554cdfd8d42dc72b101f5"
                    ]
                },
                {
                    "command": [
                        "apply univ_inv with (Sprop c) (Sprop c'); intros; auto with arith pts.",
                        "VernacExtend",
                        "3cbd33dedcfcef4111efc0d53ae400bd63837cdb"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H0; auto with arith pts.",
                        "VernacExtend",
                        "f19801b7ccf63f671421c527cc11427e7d55b5e7"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "apply univ_inv with (Sprop c) (Stype c0 n); intros; auto with arith pts.",
                        "VernacExtend",
                        "754443707e96e8887d5832e9eaa1f0b3d39f8ca4"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H0.",
                        "VernacExtend",
                        "e21f851b9423020c7f22dae666bca7829c9b1967"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "apply univ_inv with (Stype c n) (Sprop c0); intros; auto with arith pts.",
                        "VernacExtend",
                        "28f20a732e254ed8ae730304774f893edac7e315"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H0.",
                        "VernacExtend",
                        "e21f851b9423020c7f22dae666bca7829c9b1967"
                    ]
                },
                {
                    "command": [
                        "case (calc_dec c c'); intros.",
                        "VernacExtend",
                        "b07a98665a1c5558b1c4c93e1e1386c69354c12e"
                    ]
                },
                {
                    "command": [
                        "case (le_gt_dec n n'); [ left | right ].",
                        "VernacExtend",
                        "d2295f1b3bd15bb53d7e096f72b2f794194b82f9"
                    ]
                },
                {
                    "command": [
                        "elim e; auto with arith pts.",
                        "VernacExtend",
                        "1e460be06109fafefca7d5cb61566c61198c5736"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "apply univ_inv with (Stype c n) (Stype c' n'); intros; auto with arith pts.",
                        "VernacExtend",
                        "68d00f8efe2a7beb579c8f3f14b087db7453d488"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H0.",
                        "VernacExtend",
                        "e21f851b9423020c7f22dae666bca7829c9b1967"
                    ]
                },
                {
                    "command": [
                        "absurd (n <= n'); auto with arith pts.",
                        "VernacExtend",
                        "f456abc60a2d43811298f6280d7ff739213b47fa"
                    ]
                },
                {
                    "command": [
                        "right; red in |- *; intros; apply n0.",
                        "VernacExtend",
                        "c4372a88b8ba139a6f0949a7aeddb57c310c9c2b"
                    ]
                },
                {
                    "command": [
                        "apply univ_inv with (Stype c n) (Stype c' n'); intros; auto with arith pts.",
                        "VernacExtend",
                        "68d00f8efe2a7beb579c8f3f14b087db7453d488"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H0; auto with arith pts.",
                        "VernacExtend",
                        "f19801b7ccf63f671421c527cc11427e7d55b5e7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ecc_inf_axiom",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "refine (fun s : srt_ecc => match s return {sp : srt_ecc | ppal (axiom_ecc s) univ sp} with | Sprop c => exist _ (Stype c 0) _ | Stype c n => exist _ (Stype c (S n)) _ end).",
                        "VernacExtend",
                        "5b426655502cd9888e0fb372f801385b8c4452e9"
                    ]
                },
                {
                    "command": [
                        "split; intros; auto with arith pts.",
                        "VernacExtend",
                        "ed3cd498e456d1f30998af7148e25695b4a6f71c"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H; auto with arith pts.",
                        "VernacExtend",
                        "6b8e02e4667147029e468cd7af8de11dacedd452"
                    ]
                },
                {
                    "command": [
                        "split; intros; auto with arith pts.",
                        "VernacExtend",
                        "ed3cd498e456d1f30998af7148e25695b4a6f71c"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H; auto with arith pts.",
                        "VernacExtend",
                        "6b8e02e4667147029e468cd7af8de11dacedd452"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ecc_inf_rule",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "refine (fun x1 x2 : srt_ecc => match x1, x2 return {x3 : srt_ecc | rules_ecc x1 x2 x3 & forall s1 s2 s3 : srt_ecc, rules_ecc s1 s2 s3 -> univ x1 s1 -> univ x2 s2 -> univ x3 s3} with | Sprop c, _ => exist2 _ _ x2 _ _ | Stype c n, Sprop c' => exist2 _ _ (Sprop c') _ _ | Stype c n, Stype c' n' => exist2 _ _ (Stype c' (max_nat n n')) _ _ end).",
                        "VernacExtend",
                        "0ff53b67867d003b977c9685fa5aee932cf43c92"
                    ]
                },
                {
                    "command": [
                        "auto with pts.",
                        "VernacExtend",
                        "9e5a17e95e6d9da3954b484b97f84dc6570486b2"
                    ]
                },
                {
                    "command": [
                        "simple induction 1; intros; auto with arith pts.",
                        "VernacExtend",
                        "3b2eb19a80174ae6b87605a6c232e09172a96610"
                    ]
                },
                {
                    "command": [
                        "apply univ_trans with (Stype c2 m); auto with arith pts.",
                        "VernacExtend",
                        "1378e7c7fca91541254f8e1993036f7a9f63ffcf"
                    ]
                },
                {
                    "command": [
                        "auto with pts.",
                        "VernacExtend",
                        "9e5a17e95e6d9da3954b484b97f84dc6570486b2"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply univ_inv with (Sprop c') s2; intros.",
                        "VernacExtend",
                        "28ad93a3635cbaaceb2d6446633af824bd438708"
                    ]
                },
                {
                    "command": [
                        "auto with arith pts.",
                        "VernacExtend",
                        "b81589ac14f4fc88bd3f4f879f4b4bc42df871e4"
                    ]
                },
                {
                    "command": [
                        "generalize H.",
                        "VernacExtend",
                        "743bb3d7407250a3128af7c9fa5ed4e9ada826b2"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H2; intros.",
                        "VernacExtend",
                        "413c91ff88554aa8a30f965427a3a224e2926b12"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H2; auto with arith pts.",
                        "VernacExtend",
                        "488b8dbaa4a7c3835b6ba52636e71fe2f31d5379"
                    ]
                },
                {
                    "command": [
                        "unfold max_nat in |- *.",
                        "VernacExtend",
                        "3cd750495425274582a76cd8fc48bb9559c0f9c1"
                    ]
                },
                {
                    "command": [
                        "elim (le_gt_dec n n'); auto with arith pts.",
                        "VernacExtend",
                        "cf773bf85a57f5dd092f218a72cfa35c95e30360"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply univ_inv with (Stype c n) s1; intros; auto with arith pts.",
                        "VernacExtend",
                        "afde846f7f5901169ff0a0e5af69e1e84c11137e"
                    ]
                },
                {
                    "command": [
                        "apply univ_inv with (Stype c' n') s2; intros; auto with arith pts.",
                        "VernacExtend",
                        "9b14f4101fb9ec6c8ea213d0d3fa610dc296f8ff"
                    ]
                },
                {
                    "command": [
                        "generalize H.",
                        "VernacExtend",
                        "743bb3d7407250a3128af7c9fa5ed4e9ada826b2"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H2.",
                        "VernacExtend",
                        "951d59869a2bafa3e041b055bd4a8bdff67bdad5"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H3; intros.",
                        "VernacExtend",
                        "4c3324df38cfef24bbe66438799bd8e31d93482d"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H3.",
                        "VernacExtend",
                        "36eaf986a968e31567b264d9a9c5b9d3482ec67e"
                    ]
                },
                {
                    "command": [
                        "cut (max_nat n n' <= p); auto with arith pts.",
                        "VernacExtend",
                        "a0e6f0b6522d44957c6b84cf835f2b2a5738bf6e"
                    ]
                },
                {
                    "command": [
                        "apply least_upper_bound_max_nat.",
                        "VernacExtend",
                        "904ee45f2b8cc8b3d8470e223395c0b2e5ad72ff"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with m; auto with arith pts.",
                        "VernacExtend",
                        "044797874e5281e7aec858346a373bbbc535d1cb"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with m0; auto with arith pts.",
                        "VernacExtend",
                        "aea9c913eff693f55f477f3c6d2487272dc5c80d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}