{
    "filename": "core/Net.v",
    "coq_project": "verdi",
    "vernac_cmds": [
        [
            "Require Import List.",
            "VernacRequire",
            "d9bcce4a390afeb160107bf87c6f7abe3d82c6d6"
        ],
        [
            "Import ListNotations.",
            "VernacImport",
            "52647db2a3b752153a8cbd37039246f200bccdee"
        ],
        [
            "Require Import StructTact.StructTactics.",
            "VernacRequire",
            "38f6d2cc08bbb87183850d39d33eebaeff475956"
        ],
        [
            "Require Import StructTact.Update.",
            "VernacRequire",
            "1031241031c42638c2bf4f0b84570b4aa5174564"
        ],
        [
            "Require Import StructTact.Update2.",
            "VernacRequire",
            "82b6175f37e586fedfc16ef0fb8473175765832f"
        ],
        [
            "Require Import StructTact.RemoveAll.",
            "VernacRequire",
            "99b93640026990aa5eb0fd66d76896e12e2629f5"
        ],
        [
            "Require Import Sumbool.",
            "VernacRequire",
            "555a25fa361ace801dc7927d5872def951dfbee5"
        ],
        [
            "Require Import Relation_Definitions.",
            "VernacRequire",
            "ba1086f65c0b2f6754b8273aa4aa004209b8f8b6"
        ],
        [
            "Require Import RelationClasses.",
            "VernacRequire",
            "4477b0931b4b8fa1b7266888d518499524bf9df2"
        ],
        [
            "Require Export Verdi.VerdiHints.",
            "VernacRequire",
            "a798599c60e775000f004c4c27d516a74c31de91"
        ],
        [
            "Require Import Cheerios.Cheerios.",
            "VernacRequire",
            "16849e20c6eed40074c99fb332f1a361f701150e"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Class BaseParams := { data : Type; input : Type; output : Type }.",
            "VernacInductive",
            "e757046a3e99bd3d39760cb1e20f0f8c45c2d732"
        ],
        [
            "Class OneNodeParams (P : BaseParams) := { init : data; handler : input -> data -> (output * data) }.",
            "VernacInductive",
            "676554e6494aaecfadce29893084250e9b7b8a2b"
        ],
        [
            "Class SingleParams (P : BaseParams) := { init_handler : data; input_handler : input -> data -> (list output * data) }.",
            "VernacInductive",
            "8eed10c9f66728335e38f3768240eadf17575992"
        ],
        [
            "Class MultiParams (P : BaseParams) := { name : Type ; msg : Type ; msg_eq_dec : forall x y : msg, {x = y} + {x <> y} ; name_eq_dec : forall x y : name, {x = y} + {x <> y} ; nodes : list name ; all_names_nodes : forall n, In n nodes ; no_dup_nodes : NoDup nodes ; init_handlers : name -> data; net_handlers : name -> name -> msg -> data -> (list output) * data * list (name * msg) ; input_handlers : name -> input -> data -> (list output) * data * list (name * msg) }.",
            "VernacInductive",
            "b4b09fa42f5f8a2c3cbef7ff02495006fe0043db"
        ],
        [
            "Class FailureParams `(P : MultiParams) := { reboot : data -> data }.",
            "VernacInductive",
            "a58e6718b6bc2e640b83c59ba380beafe139f401"
        ],
        [
            "Definition do_disk file_name := file_name -> option IOStreamWriter.t.",
            "VernacDefinition",
            "9aaf2caf46b3c59ccefbbf9dbd5cca981b570e86"
        ],
        [
            "Inductive disk_op file_name := | Append : file_name -> IOStreamWriter.t -> disk_op file_name | Write : file_name -> IOStreamWriter.t -> disk_op file_name | Delete : file_name -> disk_op file_name.",
            "VernacInductive",
            "f291ad9dcaa2ea68485b1f1d490ebb272561c896"
        ],
        [
            "Class DiskOpMultiParams (P : BaseParams) := { do_name : Type ; file_name : Type ; do_msg : Type ; do_msg_eq_dec : forall x y : do_msg, {x = y} + {x <> y} ; do_name_eq_dec : forall x y : do_name, {x = y} + {x <> y} ; file_name_eq_dec : forall x y : file_name, {x = y} + {x <> y} ; do_nodes : list do_name ; do_all_names_nodes : forall n, In n do_nodes ; do_no_dup_nodes : NoDup do_nodes ; do_net_handlers : do_name -> do_name -> do_msg -> data -> list (disk_op file_name) * (list output) * data * list (do_name * do_msg) ; do_input_handlers : do_name -> input -> data -> list (disk_op file_name) * (list output) * data * list (do_name * do_msg); }.",
            "VernacInductive",
            "49a512cf938a4c50f3679f47238751c33d7ea0a9"
        ],
        [
            "Class DiskOpFailureParams `(P : DiskOpMultiParams) := { do_reboot : do_name -> (file_name -> option IOStreamWriter.in_channel) -> data * list (disk_op file_name) }.",
            "VernacInductive",
            "7cd873c27485c8cb8412aeb678cbd95dc9635e8f"
        ],
        [
            "Class NameOverlayParams `(P : MultiParams) := { adjacent_to : relation name ; adjacent_to_dec : forall x y : name, {adjacent_to x y} + {~ adjacent_to x y} ; adjacent_to_symmetric : Symmetric adjacent_to ; adjacent_to_irreflexive : Irreflexive adjacent_to }.",
            "VernacInductive",
            "9991057bf6c4911ca74f800eea8c41203643ea8b"
        ],
        [
            "Class FailMsgParams `(P : MultiParams) := { msg_fail : msg }.",
            "VernacInductive",
            "45ca2aeec6d8a32fdf149a171224a80516e1b434"
        ],
        [
            "Class NewMsgParams `(P : MultiParams) := { msg_new : msg }.",
            "VernacInductive",
            "be4231cc19482d086a39cde9e5fd1a5aa776f1ac"
        ],
        [
            "Section StepRelations.",
            "VernacBeginSection",
            "0568b3dfc84d7ed72fdae5ac2cbf574b91150cdd"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable trace : Type.",
            "VernacAssumption",
            "3344749246cc451f25c5a86a7bee9023556b8860"
        ],
        [
            "Definition step_relation := A -> A -> list trace -> Prop.",
            "VernacDefinition",
            "870fec210dd25ddb6b578b991dd8be1464fe8cc4"
        ],
        [
            "Inductive refl_trans_1n_trace (step : step_relation) : step_relation := | RT1nTBase : forall x, refl_trans_1n_trace step x x [] | RT1nTStep : forall x x' x'' cs cs', step x x' cs -> refl_trans_1n_trace step x' x'' cs' -> refl_trans_1n_trace step x x'' (cs ++ cs').",
            "VernacInductive",
            "7cd83fee2532cec595e076c082499783957b8f16"
        ],
        [
            "Theorem refl_trans_1n_trace_trans : forall step (a b c : A) (os os' : list trace), refl_trans_1n_trace step a b os -> refl_trans_1n_trace step b c os' -> refl_trans_1n_trace step a c (os ++ os').",
            "VernacStartTheoremProof",
            "17e24da6a6b3d618678265ad807b063caee863e5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H; simpl; auto.",
            "VernacExtend",
            "c2af1e66e6216cb1fba27f5c6b568466d5dca152"
        ],
        [
            "concludes.",
            "VernacExtend",
            "3697d2f68611e2ea2e021baaf4e64cd81f6b62ed"
        ],
        [
            "rewrite app_ass.",
            "VernacExtend",
            "1e8737a155ba47802e4df29a56a47a094af2082d"
        ],
        [
            "constructor 2 with x'; auto.",
            "VernacExtend",
            "b1a7319a0f986515b3f0a7ce2eff1f09d7dd992f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition inductive (step : step_relation) (P : A -> Prop) := forall (a a': A) (os : list trace), P a -> step a a' os -> P a'.",
            "VernacDefinition",
            "c15c059473736ef955caf6d76e8e146afa116d06"
        ],
        [
            "Theorem step_star_inductive : forall step P, inductive step P -> forall (a : A) a' os, P a -> (refl_trans_1n_trace step) a a' os -> P a'.",
            "VernacStartTheoremProof",
            "0255ae1395a8b3343ad434fa09670a67af7d748f"
        ],
        [
            "unfold inductive.",
            "VernacExtend",
            "bcf0b805d3ebae18b163d6d9bb8072252fdb0d67"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H1; auto.",
            "VernacExtend",
            "dbc3514ab5b1efcd289d0e8d64a89c4cd63229e8"
        ],
        [
            "forwards; eauto.",
            "VernacExtend",
            "080ff57fac748a52e40f8134dd1cce228f676726"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition inductive_invariant (step : step_relation) (init : A) (P : A -> Prop) := P init /\\ inductive step P.",
            "VernacDefinition",
            "e945e6483f220580471da5dad4e3a83d6ae1a1d1"
        ],
        [
            "Definition reachable step init a := exists out, refl_trans_1n_trace step init a out.",
            "VernacDefinition",
            "c5211febd37d4af422acbb41ff55db061fd8fcf7"
        ],
        [
            "Definition true_in_reachable step init (P : A -> Prop) := forall a, reachable step init a -> P a.",
            "VernacDefinition",
            "0f29531a087d1d7d1e11a4e3285ccf812a0efc76"
        ],
        [
            "Theorem true_in_reachable_reqs : forall (step : step_relation) init (P : A -> Prop), (P init) -> (forall a a' out, step a a' out -> reachable step init a -> P a -> P a') -> true_in_reachable step init P.",
            "VernacStartTheoremProof",
            "70bb15044bd242755d5eac126c19e7731933fe15"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold true_in_reachable, reachable in *.",
            "VernacExtend",
            "d82730845f3ade8456e1cdd3ab3dcd71756ddecd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "break_exists.",
            "VernacExtend",
            "7914403b406cb602431a8c9ec3a15a70b4d83870"
        ],
        [
            "match goal with H : refl_trans_1n_trace _ _ _ _ |- _ => induction H end; intuition eauto.",
            "VernacExtend",
            "caf34d00fd3f88f98b923c3e30e6c9a1c2c29ba7"
        ],
        [
            "match goal with H : P _ -> _ |- _ => apply H end; intros; break_exists; match goal with H : forall _ _ _, step _ _ _ -> _ |- _ => eapply H end; eauto; eexists; econstructor; eauto.",
            "VernacExtend",
            "df2300001815ca6087015bbd278469934a39f149"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inductive_invariant_true_in_reachable : forall step init P, inductive_invariant step init P -> true_in_reachable step init P.",
            "VernacStartTheoremProof",
            "35d0c1aeafaba541a4b2e01a2a05c4b62c6daa1d"
        ],
        [
            "unfold inductive_invariant, true_in_reachable, reachable, inductive in *.",
            "VernacExtend",
            "e3c10dce546e4f4c9d5c7373b4ba277af2559c34"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "break_exists.",
            "VernacExtend",
            "7914403b406cb602431a8c9ec3a15a70b4d83870"
        ],
        [
            "match goal with H : refl_trans_1n_trace _ _ _ _ |- _ => induction H end; intuition eauto.",
            "VernacExtend",
            "caf34d00fd3f88f98b923c3e30e6c9a1c2c29ba7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive refl_trans_n1_trace (step : step_relation) : step_relation := | RTn1TBase : forall x, refl_trans_n1_trace step x x [] | RTn1TStep : forall x x' x'' cs cs', refl_trans_n1_trace step x x' cs -> step x' x'' cs' -> refl_trans_n1_trace step x x'' (cs ++ cs').",
            "VernacInductive",
            "0c621aa5c364c781cc606507d9c3504867917ff7"
        ],
        [
            "Lemma RTn1_step : forall (step : step_relation) x y z l l', step x y l -> refl_trans_n1_trace step y z l' -> refl_trans_n1_trace step x z (l ++ l').",
            "VernacStartTheoremProof",
            "4973714d1586028f5d58081c62fd70f1ee0993ab"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H0.",
            "VernacExtend",
            "f7088b4eda47862769d27dcb01ed8193ca5ffe6c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite app_nil_r.",
            "VernacExtend",
            "c4835e186d44991c06ea8a79f450a4e967f8f713"
        ],
        [
            "rewrite <- app_nil_l.",
            "VernacExtend",
            "267127c1b5ec66808ee1a17dbf76958f0c715138"
        ],
        [
            "econstructor.",
            "VernacExtend",
            "57e0061dc596e77c9d30460f8165a53e99efafc2"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "concludes.",
            "VernacExtend",
            "3697d2f68611e2ea2e021baaf4e64cd81f6b62ed"
        ],
        [
            "rewrite <- app_ass.",
            "VernacExtend",
            "01fe27f1934651fa211feca2b08097e840f7a3e9"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma refl_trans_1n_n1_trace : forall step x y l, refl_trans_1n_trace step x y l -> refl_trans_n1_trace step x y l.",
            "VernacStartTheoremProof",
            "de8ad4a23fca24789ea055f9cdc71e1db6a71d72"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply RTn1_step; eauto.",
            "VernacExtend",
            "dcfa0091beee1002cfe5d2dcb6462de3c9ffd205"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RT1n_step : forall (step : step_relation) x y z l l', refl_trans_1n_trace step x y l -> step y z l' -> refl_trans_1n_trace step x z (l ++ l').",
            "VernacStartTheoremProof",
            "0829e25f2e7c4b7aea988e02c285d2e58f8a13de"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite <- app_nil_r.",
            "VernacExtend",
            "2d72a642cc725a1b33efd52e8b3d59213fbb90c9"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "concludes.",
            "VernacExtend",
            "3697d2f68611e2ea2e021baaf4e64cd81f6b62ed"
        ],
        [
            "rewrite app_ass.",
            "VernacExtend",
            "1e8737a155ba47802e4df29a56a47a094af2082d"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma refl_trans_n1_1n_trace : forall step x y l, refl_trans_n1_trace step x y l -> refl_trans_1n_trace step x y l.",
            "VernacStartTheoremProof",
            "f914aed1cb8283620768ec8c9da06a168e9393b1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "eapply RT1n_step; eauto.",
            "VernacExtend",
            "d8401d203948235b7ef473d16e6f76255bc74de2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma refl_trans_1n_trace_n1_ind : forall (step : step_relation) (P : A -> A -> list trace -> Prop), (forall x, P x x []) -> (forall x x' x'' tr1 tr2, refl_trans_1n_trace step x x' tr1 -> step x' x'' tr2 -> P x x' tr1 -> refl_trans_1n_trace step x x'' (tr1 ++ tr2) -> P x x'' (tr1 ++ tr2)) -> forall x y l, refl_trans_1n_trace step x y l -> P x y l.",
            "VernacStartTheoremProof",
            "0cc6f27533b18299b2eb253eec39de8c1c265bd4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "find_apply_lem_hyp refl_trans_1n_n1_trace.",
            "VernacExtend",
            "d01ed0458af335ee0efac41574590026a6d205d5"
        ],
        [
            "eapply refl_trans_n1_trace_ind; eauto.",
            "VernacExtend",
            "c40d8956ee02685063c4fb96146f29879a303784"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply H0; eauto using refl_trans_n1_1n_trace, RT1n_step.",
            "VernacExtend",
            "3d973165999139398b7addebf1d205f7f55c7b2d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem true_in_reachable_elim : forall (step : step_relation) init (P : A -> Prop), true_in_reachable step init P -> (P init) /\\ (forall a a' out, step a a' out -> reachable step init a -> P a -> P a').",
            "VernacStartTheoremProof",
            "4a67f04f2e438270f1fba81d1f9b3e5e46de8262"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold true_in_reachable, reachable in *.",
            "VernacExtend",
            "d82730845f3ade8456e1cdd3ab3dcd71756ddecd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply H; eexists; econstructor.",
            "VernacExtend",
            "deb6818e6c20140929f01321034f413e1dd1e8e3"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "break_exists.",
            "VernacExtend",
            "7914403b406cb602431a8c9ec3a15a70b4d83870"
        ],
        [
            "eexists.",
            "VernacExtend",
            "bab8b1d1a3889cd604eb78d9fc8d0c299d5c3fd6"
        ],
        [
            "apply refl_trans_n1_1n_trace.",
            "VernacExtend",
            "fd6acd90e04197941daea8247e0531e7e5047122"
        ],
        [
            "find_apply_lem_hyp refl_trans_1n_n1_trace.",
            "VernacExtend",
            "d01ed0458af335ee0efac41574590026a6d205d5"
        ],
        [
            "econstructor; eauto.",
            "VernacExtend",
            "faa93781fb8bbf289e651728c4588af1c4169d34"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End StepRelations.",
            "VernacEndSegment",
            "bcce0e9266ef43210623ddda33cec82068b9f236"
        ],
        [
            "Section Step1.",
            "VernacBeginSection",
            "a7fc6445faebd93a0d41cf3da02675161f12a600"
        ],
        [
            "Context `{params : OneNodeParams}.",
            "VernacContext",
            "a74f9fad9fc3ea8d83ca2191b9c78ec2bc6b7b2a"
        ],
        [
            "Inductive step_1 : (step_relation data (input * output)) := | S1T_deliver : forall (i : input) s s' (out : output), handler i s = (out, s') -> step_1 s s' [(i, out)].",
            "VernacInductive",
            "52e7031da0f33b128f67b5b2f68e2d6e032977f5"
        ],
        [
            "Definition step_1_star := refl_trans_1n_trace step_1.",
            "VernacDefinition",
            "620b17000c21d1246d94b537148ff60d07de15cb"
        ],
        [
            "End Step1.",
            "VernacEndSegment",
            "8e735e79913da63eb9413caefc4068972512e7e2"
        ],
        [
            "Section StepSingle.",
            "VernacBeginSection",
            "ba192fe5abc98adb70a2f2bf3d394c59b3b83a06"
        ],
        [
            "Context `{params : SingleParams}.",
            "VernacContext",
            "43b8e05b30e41f8638d581998552695a4e8e940a"
        ],
        [
            "Inductive step_s : (step_relation data (input + output)) := | SST_deliver : forall i s s' out tr, input_handler i s = (out, s') -> tr = inl i :: map inr out -> step_s s s' tr.",
            "VernacInductive",
            "228c0e4622ca2ab68263ba4da0ebd94d1d27dabd"
        ],
        [
            "Definition step_s_star := refl_trans_1n_trace step_s.",
            "VernacDefinition",
            "37960ee65c16212ac3e6b23b394f389d5b19a084"
        ],
        [
            "End StepSingle.",
            "VernacEndSegment",
            "54f9991ca9992e2ff46476398f0f01357aa1601e"
        ],
        [
            "Section StepAsync.",
            "VernacBeginSection",
            "06f7bbc3e13c2f662c011fc5bb770d63afb423f6"
        ],
        [
            "Context `{params : MultiParams}.",
            "VernacContext",
            "8521bbc60aa27b33a889ded7488d4deaf095b79f"
        ],
        [
            "Record packet := mkPacket { pSrc : name ; pDst : name ; pBody : msg }.",
            "VernacInductive",
            "c073a9f9a25b1aeac1440ff1aef9767e3b26a46e"
        ],
        [
            "Definition send_packets src ps := (map (fun m => mkPacket src (fst m) (snd m)) ps).",
            "VernacDefinition",
            "c920c2fdd1b156eb910621e0579af17a677d4317"
        ],
        [
            "Definition packet_eq_dec (p q : packet) : {p = q} + {p <> q}.",
            "VernacDefinition",
            "e17a0be36ca21dc922d7738dc61b9ce87a163dd8"
        ],
        [
            "decide equality; auto using name_eq_dec, msg_eq_dec.",
            "VernacExtend",
            "945fa268830532bac070bbd798335bec56b72825"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Record network := mkNetwork { nwPackets : list packet ; nwState : name -> data }.",
            "VernacInductive",
            "8d4e079ceb1b35e1ac2b5059271a293c9b52a542"
        ],
        [
            "Definition step_async_init : network := mkNetwork [] init_handlers.",
            "VernacDefinition",
            "b22c4f49210f822e0c5f0608c903bd9773216f54"
        ],
        [
            "Inductive step_async : step_relation network (name * (input + list output)) := | StepAsync_deliver : forall net net' p xs ys out d l, nwPackets net = xs ++ p :: ys -> net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) -> net' = mkNetwork (send_packets (pDst p) l ++ xs ++ ys) (update name_eq_dec (nwState net) (pDst p) d) -> step_async net net' [(pDst p, inr out)] | StepAsync_input : forall h net net' out inp d l, input_handlers h inp (nwState net h) = (out, d, l) -> net' = mkNetwork (send_packets h l ++ nwPackets net) (update name_eq_dec (nwState net) h d) -> step_async net net' [(h, inl inp); (h, inr out)].",
            "VernacInductive",
            "ccfb6f7e541ccec5dbbd33060bd05695f4332801"
        ],
        [
            "Definition step_async_star := refl_trans_1n_trace step_async.",
            "VernacDefinition",
            "f5f2bfb2756276f7aa9d01eb414b1f7a19af7dcd"
        ],
        [
            "End StepAsync.",
            "VernacEndSegment",
            "5607cd5d3485bffea8bebe989ccd9cc53e9c12b5"
        ],
        [
            "Arguments update _ _ _ _ _ _ / _.",
            "VernacArguments",
            "b8eef57d2712fe1660eda1bff8890fa7bf64589c"
        ],
        [
            "Arguments send_packets _ _ _ _ /.",
            "VernacArguments",
            "9713d070a1f49550bb9ac61a65806683651f2a38"
        ],
        [
            "Section ParamsAux.",
            "VernacBeginSection",
            "82635834789c317b40aa3f30a851f61d87296e17"
        ],
        [
            "Context `{params : MultiParams}.",
            "VernacContext",
            "8521bbc60aa27b33a889ded7488d4deaf095b79f"
        ],
        [
            "Lemma packet_eta : forall p : packet, {| pSrc := pSrc p; pDst := pDst p; pBody := pBody p |} = p.",
            "VernacStartTheoremProof",
            "36b85cf1a041f62c2d5a790221d8bbb0f244a273"
        ],
        [
            "destruct p; auto.",
            "VernacExtend",
            "94280b3a49c08b76852fac1fca3c7461587f918a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition trace_non_empty_out (e : name * (input + list output)) := match e with | (n, inr []) => None | _ => Some e end.",
            "VernacDefinition",
            "3fb7bd02177164ef5da5f962eed6df70d7c4270b"
        ],
        [
            "End ParamsAux.",
            "VernacEndSegment",
            "703828b01a3e335388a8b24aa0ecf269464b0a13"
        ],
        [
            "Ltac map_id := rewrite map_ext with (g := (fun x => x)); [eauto using map_id|simpl; intros; apply packet_eta].",
            "VernacExtend",
            "88f125f366c1fef029fa472681ee65592b038c5b"
        ],
        [
            "Section StepDup.",
            "VernacBeginSection",
            "1aea23fb15962168225baabb9cf425978e537ff9"
        ],
        [
            "Context `{params : MultiParams}.",
            "VernacContext",
            "8521bbc60aa27b33a889ded7488d4deaf095b79f"
        ],
        [
            "Inductive step_dup : step_relation network (name * (input + list output)) := | StepDup_deliver : forall net net' p xs ys out d l, nwPackets net = xs ++ p :: ys -> net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) -> net' = mkNetwork (send_packets (pDst p) l ++ xs ++ ys) (update name_eq_dec (nwState net) (pDst p) d) -> step_dup net net' [(pDst p, inr out)] | StepDup_input : forall h net net' out inp d l, input_handlers h inp (nwState net h) = (out, d, l) -> net' = mkNetwork (send_packets h l ++ nwPackets net) (update name_eq_dec (nwState net) h d) -> step_dup net net' [(h, inl inp); (h, inr out)] | StepDup_dup : forall net net' p xs ys, nwPackets net = xs ++ p :: ys -> net' = mkNetwork (p :: xs ++ p :: ys) (nwState net) -> step_dup net net' [].",
            "VernacInductive",
            "c4dc44f7da2cac1d2bac9fd52fecb6ec2a7b6a96"
        ],
        [
            "Definition step_dup_star := refl_trans_1n_trace step_dup.",
            "VernacDefinition",
            "3b4d70ff8fa6d03419144598e23d1713b78fbdfe"
        ],
        [
            "End StepDup.",
            "VernacEndSegment",
            "e1b0821c54007cd977d4d908d4365072b6f6e2c2"
        ],
        [
            "Section StepDrop.",
            "VernacBeginSection",
            "60a9347b10fafc832b71939e45f098cc4d920cd0"
        ],
        [
            "Context `{params : MultiParams}.",
            "VernacContext",
            "8521bbc60aa27b33a889ded7488d4deaf095b79f"
        ],
        [
            "Inductive step_drop : step_relation network (name * (input + list output)) := | StepDrop_deliver : forall net net' p xs ys out d l, nwPackets net = xs ++ p :: ys -> net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) -> net' = mkNetwork (send_packets (pDst p) l ++ xs ++ ys) (update name_eq_dec (nwState net) (pDst p) d) -> step_drop net net' [(pDst p, inr out)] | StepDrop_drop : forall net net' p xs ys, nwPackets net = xs ++ p :: ys -> net' = mkNetwork (xs ++ ys) (nwState net) -> step_drop net net' [] | StepDrop_input : forall h net net' out inp d l, input_handlers h inp (nwState net h) = (out, d, l) -> net' = mkNetwork (send_packets h l ++ nwPackets net) (update name_eq_dec (nwState net) h d) -> step_drop net net' [(h, inl inp); (h, inr out)].",
            "VernacInductive",
            "f308c426ea5249c882a4c1a9a3f2d0f6f6ee3681"
        ],
        [
            "Definition step_drop_star := refl_trans_1n_trace step_drop.",
            "VernacDefinition",
            "e67890fd01bbad970efbfbe3c90bd73076932576"
        ],
        [
            "End StepDrop.",
            "VernacEndSegment",
            "86b6ba2277e0911c9769e77bb6ae1110c1932713"
        ],
        [
            "Section StepFailure.",
            "VernacBeginSection",
            "7f3164952982a4e4955445be5c93ebd366f846ba"
        ],
        [
            "Context `{params : FailureParams}.",
            "VernacContext",
            "67f1460eca796c88002af0e63ab461ec76d9ae61"
        ],
        [
            "Inductive step_failure : step_relation (list name * network) (name * (input + list output)) := | StepFailure_deliver : forall net net' failed p xs ys out d l, nwPackets net = xs ++ p :: ys -> ~ In (pDst p) failed -> net_handlers (pDst p) (pSrc p) (pBody p) (nwState net (pDst p)) = (out, d, l) -> net' = mkNetwork (send_packets (pDst p) l ++ xs ++ ys) (update name_eq_dec (nwState net) (pDst p) d) -> step_failure (failed, net) (failed, net') [(pDst p, inr out)] | StepFailure_input : forall h net net' failed out inp d l, ~ In h failed -> input_handlers h inp (nwState net h) = (out, d, l) -> net' = mkNetwork (send_packets h l ++ nwPackets net) (update name_eq_dec (nwState net) h d) -> step_failure (failed, net) (failed, net') [(h, inl inp) ; (h, inr out)] | StepFailure_drop : forall net net' failed p xs ys, nwPackets net = xs ++ p :: ys -> net' = (mkNetwork (xs ++ ys) (nwState net)) -> step_failure (failed, net) (failed, net') [] | StepFailure_dup : forall net net' failed p xs ys, nwPackets net = xs ++ p :: ys -> net' = (mkNetwork (p :: xs ++ p :: ys) (nwState net)) -> step_failure (failed, net) (failed, net') [] | StepFailure_fail : forall h net failed, step_failure (failed, net) (h :: failed, net) [] | StepFailure_reboot : forall h net net' failed failed', In h failed -> failed' = remove name_eq_dec h failed -> net' = mkNetwork (nwPackets net) (update name_eq_dec (nwState net) h (reboot (nwState net h))) -> step_failure (failed, net) (failed', net') [].",
            "VernacInductive",
            "50ec207f867bca068499626813ca3f2bfc267a0d"
        ],
        [
            "Definition step_failure_star : step_relation (list name * network) (name * (input + list output)) := refl_trans_1n_trace step_failure.",
            "VernacDefinition",
            "baa40c0ab7a92f15b4b5a69e850568c7bf9daff0"
        ],
        [
            "Definition step_failure_init : list name * network := ([], step_async_init).",
            "VernacDefinition",
            "4696976126e09ee611963aedb460747f78df07b2"
        ],
        [
            "End StepFailure.",
            "VernacEndSegment",
            "653acc7dfa752eba84a08bc1c0a88addfc24a0c7"
        ],
        [
            "Section StepFailureDiskOp.",
            "VernacBeginSection",
            "cdad525b409026c247efe63d3ea2a3084ff9ea74"
        ],
        [
            "Context `{disk_op_failure_params : DiskOpFailureParams}.",
            "VernacContext",
            "c92cf5398851b91594eb043a7bc1099222aa3188"
        ],
        [
            "Record do_packet := mklPacket { do_pSrc : do_name ; do_pDst : do_name ; do_pBody : do_msg }.",
            "VernacInductive",
            "6fd1a05fe270a8f4913ac5478a623c7dd54d7302"
        ],
        [
            "Definition do_send_packets src ps := (map (fun m => mklPacket src (fst m) (snd m)) ps).",
            "VernacDefinition",
            "ef2d9d23694d086c27391869b2cc25c73760e37e"
        ],
        [
            "Definition do_packet_eq_dec (p q : do_packet) : {p = q} + {p <> q}.",
            "VernacDefinition",
            "d64412a7b71bf48b5fba4dedf906cc2fbe956b69"
        ],
        [
            "decide equality; auto using do_name_eq_dec, do_msg_eq_dec.",
            "VernacExtend",
            "e488a5094f22c8596802c241d622af4cca586fc2"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Record do_network := mkdoNetwork { nwdoPackets : list do_packet ; nwdoState : do_name -> data ; nwdoDisk : do_name -> do_disk file_name }.",
            "VernacInductive",
            "6baab36bcbb2fe176b217a73e774b44e1d7039c9"
        ],
        [
            "Definition disk_to_channel (dsk : do_disk file_name) := fun file => (match dsk file with | Some s => Some (IOStreamWriter.channel_send (IOStreamWriter.out_channel_wrap s)) | None => None end).",
            "VernacDefinition",
            "2d006dc592908b7a40639358835017e65c13218a"
        ],
        [
            "Definition update_disk (dsk : do_disk file_name) (op : disk_op file_name) : do_disk file_name := match op with | Append file x => update file_name_eq_dec dsk file (match dsk file with | Some s => Some (s +$+ x) | None => Some x end) | Write file x => update file_name_eq_dec dsk file (Some x) | Delete file => update file_name_eq_dec dsk file (Some IOStreamWriter.empty) end.",
            "VernacDefinition",
            "75783b8fb513622f9663a59742718c1195cb3d87"
        ],
        [
            "Definition apply_ops dsk ops := fold_left update_disk ops dsk.",
            "VernacDefinition",
            "711a3097bdcfd8671fcb3763c43d0d6dd3cd6e79"
        ],
        [
            "Inductive step_failure_disk_ops : step_relation (list do_name * do_network) (do_name * (input + list output)) := | StepFailureDiskOp_deliver : forall net net' failed p xs ys ops out d l, nwdoPackets net = xs ++ p :: ys -> ~ In (do_pDst p) failed -> do_net_handlers (do_pDst p) (do_pSrc p) (do_pBody p) (nwdoState net (do_pDst p)) = (ops, out, d, l) -> net' = mkdoNetwork (do_send_packets (do_pDst p) l ++ xs ++ ys) (update do_name_eq_dec (nwdoState net) (do_pDst p) d) (update do_name_eq_dec (nwdoDisk net) (do_pDst p) (apply_ops (nwdoDisk net (do_pDst p)) ops)) -> step_failure_disk_ops (failed, net) (failed, net') [(do_pDst p, inr out)] | StepFailureDiskOp_input : forall h net net' failed ops out inp d l, ~ In h failed -> do_input_handlers h inp (nwdoState net h) = (ops, out, d, l) -> net' = mkdoNetwork (do_send_packets h l ++ nwdoPackets net) (update do_name_eq_dec (nwdoState net) h d) (update do_name_eq_dec (nwdoDisk net) h (apply_ops (nwdoDisk net h) ops)) -> step_failure_disk_ops (failed, net) (failed, net') [(h, inl inp) ; (h, inr out)] | StepFailureDiskOp_drop : forall net net' failed p xs ys, nwdoPackets net = xs ++ p :: ys -> net' = (mkdoNetwork (xs ++ ys) (nwdoState net) (nwdoDisk net)) -> step_failure_disk_ops (failed, net) (failed, net') [] | StepFailureDiskOp_dup : forall net net' failed p xs ys, nwdoPackets net = xs ++ p :: ys -> net' = (mkdoNetwork (p :: xs ++ p :: ys) (nwdoState net) (nwdoDisk net)) -> step_failure_disk_ops (failed, net) (failed, net') [] | StepFailureDiskOp_fail : forall h net failed, step_failure_disk_ops (failed, net) (h :: failed, net) [] | StepFailureDiskOp_reboot : forall h net net' failed failed' d ops, In h failed -> failed' = remove do_name_eq_dec h failed -> do_reboot h (disk_to_channel (nwdoDisk net h)) = (d, ops) -> net' = mkdoNetwork (nwdoPackets net) (update do_name_eq_dec (nwdoState net) h d) (update do_name_eq_dec (nwdoDisk net) h (apply_ops (nwdoDisk net h) ops)) -> step_failure_disk_ops (failed, net) (failed', net') [].",
            "VernacInductive",
            "67f2a7ad4533ce24d915e291e42b0a9c48226375"
        ],
        [
            "Definition step_failure_disk_ops_star : step_relation (list do_name * do_network) (do_name * (input + list output)) := refl_trans_1n_trace step_failure_disk_ops.",
            "VernacDefinition",
            "4d5e53d9d6ea18ff89643dc269c8523443042925"
        ],
        [
            "Definition null_disk : do_disk file_name := fun _ => None.",
            "VernacDefinition",
            "387e7c7b495267961fe2217ae5960847e44ae251"
        ],
        [
            "Definition step_failure_disk_ops_init : list do_name * do_network := ([], mkdoNetwork [] (fun h => fst (do_reboot h (disk_to_channel null_disk))) (fun h => apply_ops null_disk (snd (do_reboot h (disk_to_channel null_disk))))).",
            "VernacDefinition",
            "d022a4ac447dadd5323d23ecfc772d13df188c60"
        ],
        [
            "End StepFailureDiskOp.",
            "VernacEndSegment",
            "e6c1498972935b3a6edefbe8892ad820a6da5e83"
        ],
        [
            "Section StepOrdered.",
            "VernacBeginSection",
            "649ccbf7a2b2a7e3bc9c2e214c7ab4a33933d920"
        ],
        [
            "Context `{params : MultiParams}.",
            "VernacContext",
            "8521bbc60aa27b33a889ded7488d4deaf095b79f"
        ],
        [
            "Notation src := name (only parsing).",
            "VernacSyntacticDefinition",
            "3bc1fb8749e4572a0536d7df688b8b4aa42951b7"
        ],
        [
            "Notation dst := name (only parsing).",
            "VernacSyntacticDefinition",
            "d55064d7d000443bc1893e2d9357bb3881dca827"
        ],
        [
            "Record ordered_network := mkONetwork { onwPackets : src -> dst -> list msg; onwState : name -> data }.",
            "VernacInductive",
            "8359aa4d77af1db3d8a44c8fded935b20b2c6c31"
        ],
        [
            "Inductive step_ordered : step_relation ordered_network (name * (input + output)) := | StepOrdered_deliver : forall net net' tr m ms out d l from to, onwPackets net from to = m :: ms -> net_handlers to from m (onwState net to) = (out, d, l) -> net' = mkONetwork (collate name_eq_dec to (update2 name_eq_dec (onwPackets net) from to ms) l) (update name_eq_dec (onwState net) to d) -> tr = map2fst to (map inr out) -> step_ordered net net' tr | StepOrdered_input : forall h net net' tr out inp d l, input_handlers h inp (onwState net h) = (out, d, l) -> net' = mkONetwork (collate name_eq_dec h (onwPackets net) l) (update name_eq_dec (onwState net) h d) -> tr = (h, inl inp) :: map2fst h (map inr out) -> step_ordered net net' tr.",
            "VernacInductive",
            "9da869149bc6f7f9e2bd867d6a5c08668e2cc64b"
        ],
        [
            "Definition step_ordered_star := refl_trans_1n_trace step_ordered.",
            "VernacDefinition",
            "5cf6cb5f0b5710dd9047f53456ecfbb28bce18ba"
        ],
        [
            "Definition step_ordered_init : ordered_network := mkONetwork (fun _ _ => []) init_handlers.",
            "VernacDefinition",
            "12e26782febf801bd2ecf97ec571919fd7a22f44"
        ],
        [
            "End StepOrdered.",
            "VernacEndSegment",
            "c5ace27ef13a50332a5cd2775a39be98248b42d4"
        ],
        [
            "Section StepOrderedFailure.",
            "VernacBeginSection",
            "a8ade13a6c4d9f1878a124d6d4a3e038a24ed216"
        ],
        [
            "Context `{multi_params : MultiParams}.",
            "VernacContext",
            "91fc9ab4409f90661a22609b81a9a9602e1a1dab"
        ],
        [
            "Context {overlay_params : NameOverlayParams multi_params}.",
            "VernacContext",
            "9944de7073f9f3c4f6a6f0d6831b8b6bd1080d91"
        ],
        [
            "Context {fail_msg_params : FailMsgParams multi_params}.",
            "VernacContext",
            "5a8c15fd702fc50a8971fc612eb3978745b65251"
        ],
        [
            "Inductive step_ordered_failure : step_relation (list name * ordered_network) (name * (input + output)) := | StepOrderedFailure_deliver : forall net net' failed tr m ms out d l from to, onwPackets net from to = m :: ms -> ~ In to failed -> net_handlers to from m (onwState net to) = (out, d, l) -> net' = {| onwPackets := collate name_eq_dec to (update2 name_eq_dec (onwPackets net) from to ms) l; onwState := update name_eq_dec (onwState net) to d |} -> tr = map2fst to (map inr out) -> step_ordered_failure (failed, net) (failed, net') tr | StepOrderedFailure_input : forall h net net' failed tr out inp d l, ~ In h failed -> input_handlers h inp (onwState net h) = (out, d, l) -> net' = {| onwPackets := collate name_eq_dec h (onwPackets net) l; onwState := update name_eq_dec (onwState net) h d |} -> tr = (h, inl inp) :: map2fst h (map inr out) -> step_ordered_failure (failed, net) (failed, net') tr | StepOrderedFailure_fail : forall h net net' failed, ~ In h failed -> net' = {| onwPackets := collate name_eq_dec h (onwPackets net) (map2snd msg_fail (filter_rel adjacent_to_dec h (remove_all name_eq_dec failed nodes))) ; onwState := onwState net |} -> step_ordered_failure (failed, net) (h :: failed, net') [].",
            "VernacInductive",
            "1017085c0c896343c4a1f39301f0e3a16f08eed7"
        ],
        [
            "Definition step_ordered_failure_star := refl_trans_1n_trace step_ordered_failure.",
            "VernacDefinition",
            "379d217782764f0927035fb1926a85988c8ffafb"
        ],
        [
            "Definition step_ordered_failure_init : list name * ordered_network := ([], step_ordered_init).",
            "VernacDefinition",
            "e4e93f7b1bbc98de1feb80955fee72f8045e88cd"
        ],
        [
            "End StepOrderedFailure.",
            "VernacEndSegment",
            "ad5601004ced22e2681e761a1675774d3c39136c"
        ],
        [
            "Section StepOrderedDynamic.",
            "VernacBeginSection",
            "e0ef4c74fb2f434e821a057d9c6f1239ec61bf31"
        ],
        [
            "Context `{multi_params : MultiParams}.",
            "VernacContext",
            "91fc9ab4409f90661a22609b81a9a9602e1a1dab"
        ],
        [
            "Context {overlay_params : NameOverlayParams multi_params}.",
            "VernacContext",
            "9944de7073f9f3c4f6a6f0d6831b8b6bd1080d91"
        ],
        [
            "Context {new_msg_params : NewMsgParams multi_params}.",
            "VernacContext",
            "58c716d81ff8d08bae4c9e982abd3e4165e70ae4"
        ],
        [
            "Notation src := name (only parsing).",
            "VernacSyntacticDefinition",
            "3bc1fb8749e4572a0536d7df688b8b4aa42951b7"
        ],
        [
            "Notation dst := name (only parsing).",
            "VernacSyntacticDefinition",
            "d55064d7d000443bc1893e2d9357bb3881dca827"
        ],
        [
            "Record ordered_dynamic_network := mkODNetwork { odnwNodes : list name ; odnwPackets : src -> dst -> list msg ; odnwState : name -> option data }.",
            "VernacInductive",
            "efdb531a89d4baf6d9bebb5064a9ec9e6ee7f089"
        ],
        [
            "Inductive step_ordered_dynamic : step_relation ordered_dynamic_network (name * (input + output)) := | StepOrderedDynamic_start : forall net net' h, ~ In h (odnwNodes net) -> net' = {| odnwNodes := h :: odnwNodes net; odnwPackets := collate_ls name_eq_dec (filter_rel adjacent_to_dec h (odnwNodes net)) (collate name_eq_dec h (odnwPackets net) (map2snd msg_new (filter_rel adjacent_to_dec h (odnwNodes net)))) h msg_new; odnwState := update name_eq_dec (odnwState net) h (Some (init_handlers h)) |} -> step_ordered_dynamic net net' [] | StepOrderedDynamic_deliver : forall net net' tr m ms out d d' l from to, In to (odnwNodes net) -> odnwState net to = Some d -> odnwPackets net from to = m :: ms -> net_handlers to from m d = (out, d', l) -> net' = {| odnwNodes := odnwNodes net; odnwPackets := collate name_eq_dec to (update2 name_eq_dec (odnwPackets net) from to ms) l; odnwState := update name_eq_dec (odnwState net) to (Some d') |} -> tr = map2fst to (map inr out) -> step_ordered_dynamic net net' tr | StepOrderedDynamic_input : forall h net net' tr out inp d d' l, In h (odnwNodes net) -> odnwState net h = Some d -> input_handlers h inp d = (out, d', l) -> net' = {| odnwNodes := odnwNodes net; odnwPackets := collate name_eq_dec h (odnwPackets net) l; odnwState := update name_eq_dec (odnwState net) h (Some d') |} -> tr = (h, inl inp) :: map2fst h (map inr out) -> step_ordered_dynamic net net' tr.",
            "VernacInductive",
            "f6cf33d50d23d9325534ada4b573777f22b83a5e"
        ],
        [
            "Definition step_ordered_dynamic_star := refl_trans_1n_trace step_ordered_dynamic.",
            "VernacDefinition",
            "37af3e136a1a2bd3f99cd4776f3e778e627f80c0"
        ],
        [
            "Definition step_ordered_dynamic_init : ordered_dynamic_network := mkODNetwork [] (fun _ _ => []) (fun _ => None).",
            "VernacDefinition",
            "11383f4e86192f7058bc8cf47c564ec7f066b7e4"
        ],
        [
            "End StepOrderedDynamic.",
            "VernacEndSegment",
            "f8b49b06025cd19645bcf8fb4e04f507ab1c6f43"
        ],
        [
            "Section StepOrderedDynamicFailure.",
            "VernacBeginSection",
            "0194dc8d25aeadee042fa220c392a72b313abd5b"
        ],
        [
            "Context `{multi_params : MultiParams}.",
            "VernacContext",
            "91fc9ab4409f90661a22609b81a9a9602e1a1dab"
        ],
        [
            "Context {overlay_params : NameOverlayParams multi_params}.",
            "VernacContext",
            "9944de7073f9f3c4f6a6f0d6831b8b6bd1080d91"
        ],
        [
            "Context {new_msg_params : NewMsgParams multi_params}.",
            "VernacContext",
            "58c716d81ff8d08bae4c9e982abd3e4165e70ae4"
        ],
        [
            "Context {fail_msg_params : FailMsgParams multi_params}.",
            "VernacContext",
            "5a8c15fd702fc50a8971fc612eb3978745b65251"
        ],
        [
            "Inductive step_ordered_dynamic_failure : step_relation (list name * ordered_dynamic_network) (name * (input + output)) := | StepOrderedDynamicFailure_start : forall net net' failed h, ~ In h (odnwNodes net) -> net' = {| odnwNodes := h :: odnwNodes net; odnwPackets := collate_ls name_eq_dec (filter_rel adjacent_to_dec h (remove_all name_eq_dec failed (odnwNodes net))) (collate name_eq_dec h (odnwPackets net) (map2snd msg_new (filter_rel adjacent_to_dec h (remove_all name_eq_dec failed (odnwNodes net))))) h msg_new; odnwState := update name_eq_dec (odnwState net) h (Some (init_handlers h)) |} -> step_ordered_dynamic_failure (failed, net) (failed, net') [] | StepOrderedDynamicFailure_deliver : forall net net' failed tr m ms out d d' l from to, ~ In to failed -> In to (odnwNodes net) -> odnwState net to = Some d -> odnwPackets net from to = m :: ms -> net_handlers to from m d = (out, d', l) -> net' = {| odnwNodes := odnwNodes net; odnwPackets := collate name_eq_dec to (update2 name_eq_dec (odnwPackets net) from to ms) l; odnwState := update name_eq_dec (odnwState net) to (Some d') |} -> tr = map2fst to (map inr out) -> step_ordered_dynamic_failure (failed, net) (failed, net') tr | StepOrderedDynamicFailure_input : forall h net net' failed tr out inp d d' l, ~ In h failed -> In h (odnwNodes net) -> odnwState net h = Some d -> input_handlers h inp d = (out, d', l) -> net' = {| odnwNodes := odnwNodes net; odnwPackets := collate name_eq_dec h (odnwPackets net) l; odnwState := update name_eq_dec (odnwState net) h (Some d') |} -> tr = (h, inl inp) :: map2fst h (map inr out) -> step_ordered_dynamic_failure (failed, net) (failed, net') tr | StepOrderedDynamicFailure_fail : forall h net net' failed, ~ In h failed -> In h (odnwNodes net) -> net' = {| odnwNodes := odnwNodes net; odnwPackets := collate name_eq_dec h (odnwPackets net) (map2snd msg_fail (filter_rel adjacent_to_dec h (remove_all name_eq_dec failed (odnwNodes net)))) ; odnwState := odnwState net |} -> step_ordered_dynamic_failure (failed, net) (h :: failed, net') [].",
            "VernacInductive",
            "0df2d4e58149de29905182bbd541839475360851"
        ],
        [
            "Definition step_ordered_dynamic_failure_star := refl_trans_1n_trace step_ordered_dynamic_failure.",
            "VernacDefinition",
            "dd75528f704405cf81008348865f8eda5f3bd0e1"
        ],
        [
            "Definition step_ordered_dynamic_failure_init : list name * ordered_dynamic_network := ([], step_ordered_dynamic_init).",
            "VernacDefinition",
            "c97f4e62cc5dbbedc61fdfffec92454edd9134ec"
        ],
        [
            "End StepOrderedDynamicFailure.",
            "VernacEndSegment",
            "ef122e43ff18dd820a91b68cc0b4fc5d0b0f62fc"
        ]
    ],
    "proofs": [
        {
            "name": "refl_trans_1n_trace_trans",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction H; simpl; auto.",
                        "VernacExtend",
                        "c2af1e66e6216cb1fba27f5c6b568466d5dca152"
                    ]
                },
                {
                    "command": [
                        "concludes.",
                        "VernacExtend",
                        "3697d2f68611e2ea2e021baaf4e64cd81f6b62ed"
                    ]
                },
                {
                    "command": [
                        "rewrite app_ass.",
                        "VernacExtend",
                        "1e8737a155ba47802e4df29a56a47a094af2082d"
                    ]
                },
                {
                    "command": [
                        "constructor 2 with x'; auto.",
                        "VernacExtend",
                        "b1a7319a0f986515b3f0a7ce2eff1f09d7dd992f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "step_star_inductive",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "unfold inductive.",
                        "VernacExtend",
                        "bcf0b805d3ebae18b163d6d9bb8072252fdb0d67"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction H1; auto.",
                        "VernacExtend",
                        "dbc3514ab5b1efcd289d0e8d64a89c4cd63229e8"
                    ]
                },
                {
                    "command": [
                        "forwards; eauto.",
                        "VernacExtend",
                        "080ff57fac748a52e40f8134dd1cce228f676726"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "true_in_reachable_reqs",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold true_in_reachable, reachable in *.",
                        "VernacExtend",
                        "d82730845f3ade8456e1cdd3ab3dcd71756ddecd"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "break_exists.",
                        "VernacExtend",
                        "7914403b406cb602431a8c9ec3a15a70b4d83870"
                    ]
                },
                {
                    "command": [
                        "match goal with H : refl_trans_1n_trace _ _ _ _ |- _ => induction H end; intuition eauto.",
                        "VernacExtend",
                        "caf34d00fd3f88f98b923c3e30e6c9a1c2c29ba7"
                    ]
                },
                {
                    "command": [
                        "match goal with H : P _ -> _ |- _ => apply H end; intros; break_exists; match goal with H : forall _ _ _, step _ _ _ -> _ |- _ => eapply H end; eauto; eexists; econstructor; eauto.",
                        "VernacExtend",
                        "df2300001815ca6087015bbd278469934a39f149"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inductive_invariant_true_in_reachable",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "unfold inductive_invariant, true_in_reachable, reachable, inductive in *.",
                        "VernacExtend",
                        "e3c10dce546e4f4c9d5c7373b4ba277af2559c34"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "break_exists.",
                        "VernacExtend",
                        "7914403b406cb602431a8c9ec3a15a70b4d83870"
                    ]
                },
                {
                    "command": [
                        "match goal with H : refl_trans_1n_trace _ _ _ _ |- _ => induction H end; intuition eauto.",
                        "VernacExtend",
                        "caf34d00fd3f88f98b923c3e30e6c9a1c2c29ba7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "refl_trans_1n_n1_trace",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction H.",
                        "VernacExtend",
                        "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "eapply RTn1_step; eauto.",
                        "VernacExtend",
                        "dcfa0091beee1002cfe5d2dcb6462de3c9ffd205"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RT1n_step",
            "line_nb": 83,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction H.",
                        "VernacExtend",
                        "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite <- app_nil_r.",
                        "VernacExtend",
                        "2d72a642cc725a1b33efd52e8b3d59213fbb90c9"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "concludes.",
                        "VernacExtend",
                        "3697d2f68611e2ea2e021baaf4e64cd81f6b62ed"
                    ]
                },
                {
                    "command": [
                        "rewrite app_ass.",
                        "VernacExtend",
                        "1e8737a155ba47802e4df29a56a47a094af2082d"
                    ]
                },
                {
                    "command": [
                        "econstructor; eauto.",
                        "VernacExtend",
                        "faa93781fb8bbf289e651728c4588af1c4169d34"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "refl_trans_n1_1n_trace",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction H.",
                        "VernacExtend",
                        "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "eapply RT1n_step; eauto.",
                        "VernacExtend",
                        "d8401d203948235b7ef473d16e6f76255bc74de2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "refl_trans_1n_trace_n1_ind",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "find_apply_lem_hyp refl_trans_1n_n1_trace.",
                        "VernacExtend",
                        "d01ed0458af335ee0efac41574590026a6d205d5"
                    ]
                },
                {
                    "command": [
                        "eapply refl_trans_n1_trace_ind; eauto.",
                        "VernacExtend",
                        "c40d8956ee02685063c4fb96146f29879a303784"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply H0; eauto using refl_trans_n1_1n_trace, RT1n_step.",
                        "VernacExtend",
                        "3d973165999139398b7addebf1d205f7f55c7b2d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "packet_eq_dec",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "decide equality; auto using name_eq_dec, msg_eq_dec.",
                        "VernacExtend",
                        "945fa268830532bac070bbd798335bec56b72825"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "packet_eta",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "destruct p; auto.",
                        "VernacExtend",
                        "94280b3a49c08b76852fac1fca3c7461587f918a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "do_packet_eq_dec",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "decide equality; auto using do_name_eq_dec, do_msg_eq_dec.",
                        "VernacExtend",
                        "e488a5094f22c8596802c241d622af4cca586fc2"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}