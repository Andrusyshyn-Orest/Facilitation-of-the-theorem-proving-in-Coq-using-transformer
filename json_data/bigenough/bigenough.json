{
    "filename": "bigenough.v",
    "coq_project": "bigenough",
    "vernac_cmds": [
        [
            "Require Import mathcomp.ssreflect.ssreflect.",
            "VernacRequire",
            "85e251063dc2b5a9653f7bb76dcd176ed36b42a9"
        ],
        [
            "From mathcomp Require Import ssrfun ssrbool eqtype ssrnat seq choice fintype.",
            "VernacRequire",
            "6742bd497e3522a1153ce38bc5b3e5f28f9487c8"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Module BigEnough.",
            "VernacDefineModule",
            "ff652c2641d89e594d128570e835a1a24013e3ff"
        ],
        [
            "Record big_rel_class_of T (leq : rel T) := BigRelClass { leq_big_internal_op : rel T; bigger_than_op : seq T -> T; _ : leq_big_internal_op = leq; _ : forall i s, leq_big_internal_op i (bigger_than_op (i :: s)); _ : forall i j s, leq_big_internal_op i (bigger_than_op s) -> leq_big_internal_op i (bigger_than_op (j :: s)) }.",
            "VernacInductive",
            "b58913f801bfb0488141cf3038ae46c053b330a0"
        ],
        [
            "Record big_rel_of T := BigRelOf { leq_big :> rel T; big_rel_class : big_rel_class_of leq_big }.",
            "VernacInductive",
            "c61983fe3ced28c559f9d69ec532f0fd2503d4f4"
        ],
        [
            "Definition bigger_than_of T (b : big_rel_of T) (phb : phantom (rel T) b) := bigger_than_op (big_rel_class b).",
            "VernacDefinition",
            "610550aee7668acaaa3248f8a0be93bef435233c"
        ],
        [
            "Notation bigger_than leq := (@bigger_than_of _ _ (Phantom (rel _) leq)).",
            "VernacSyntacticDefinition",
            "8a4ad595e10cf91469bb24f26af91afaabeccced"
        ],
        [
            "Definition leq_big_internal_of T (b : big_rel_of T) (phb : phantom (rel T) b) := leq_big_internal_op (big_rel_class b).",
            "VernacDefinition",
            "d0021862b896e42ea5f29955f7f06bc46fa942bd"
        ],
        [
            "Notation leq_big_internal leq := (@leq_big_internal_of _ _ (Phantom (rel _) leq)).",
            "VernacSyntacticDefinition",
            "0b22d6d9df6cfd995775b458bf8c8761b0efc05e"
        ],
        [
            "Lemma next_bigger_than T (b : big_rel_of T) i j s : leq_big_internal b i (bigger_than b s) -> leq_big_internal b i (bigger_than b (j :: s)).",
            "VernacStartTheoremProof",
            "2e883ed856f96d42309afa252e5ea0bdf0f12607"
        ],
        [
            "by case: b i j s => [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma instantiate_bigger_than T (b : big_rel_of T) i s : leq_big_internal b i (bigger_than b (i :: s)).",
            "VernacStartTheoremProof",
            "6b20169e6127d7156bec655b4fc0358c5053d4fb"
        ],
        [
            "by case: b i s => [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leq_big_internalE T (b : big_rel_of T) : leq_big_internal b = leq_big b.",
            "VernacStartTheoremProof",
            "83569facc3c3ab199c7c7ab444ced2f5898d28ea"
        ],
        [
            "by case: b => [? []].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma context_big_enough P T (b : big_rel_of T) i s : leq_big_internal b i (bigger_than b s) -> P true -> P (leq_big b i (bigger_than b s)).",
            "VernacStartTheoremProof",
            "d1aee97ba00594defff76e39ccd32905252ea55a"
        ],
        [
            "by rewrite leq_big_internalE => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition big_rel_leq_class : big_rel_class_of leq.",
            "VernacDefinition",
            "073f87341a7ada2d4a57b9a2f5b13bd1c3920e3b"
        ],
        [
            "exists leq (foldr maxn 0%N) => [|i s|i j s /leq_trans->] //; by rewrite (leq_maxl, leq_maxr).",
            "VernacExtend",
            "7bd77ea96f784074e3b1d448260a45dd4191485f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical big_enough_nat := BigRelOf big_rel_leq_class.",
            "VernacDefinition",
            "07d8a4bb895377fea678030a08305a500ab22f85"
        ],
        [
            "Definition closed T (i : T) := {j : T | j = i}.",
            "VernacDefinition",
            "46d3b054efb04a7180b059e40a328b2164c8b70d"
        ],
        [
            "Ltac close := match goal with | |- context [closed ?i] => instantiate (1 := [::]) in (Value of i); exists i end.",
            "VernacExtend",
            "b0c869f1617556d3911287eed99856076f3a0c4b"
        ],
        [
            "Ltac pose_big_enough i := evar (i : nat); suff : closed i; first do [move=> _; instantiate (1 := bigger_than leq _) in (Value of i)].",
            "VernacExtend",
            "f6583ea2aae187d3a929973e17e3d8e344ff91ad"
        ],
        [
            "Ltac pose_big_modulus m F := evar (m : F -> nat); suff : closed m; first do [move=> _; instantiate (1 := (fun e => bigger_than leq _)) in (Value of m)].",
            "VernacExtend",
            "a10af5807a3bb9414514fd12dde6ca96bac32bea"
        ],
        [
            "Ltac exists_big_modulus m F := pose_big_modulus m F; first exists m.",
            "VernacExtend",
            "71c0080ade8b29ce73d15a9628145c1cf2eeed44"
        ],
        [
            "Ltac olddone := trivial; hnf; intros; solve [ do ![solve [trivial | apply: sym_equal; trivial] | discriminate | contradiction | split] | case not_locked_false_eq_true; assumption | match goal with H : ~ _ |- _ => solve [case H; trivial] end].",
            "VernacExtend",
            "4d6134da7dea283f436ea8331b041ba6d0a88d82"
        ],
        [
            "Ltac big_enough := do ?[ apply context_big_enough; first do [do ?[ now apply instantiate_bigger_than | apply next_bigger_than]]].",
            "VernacExtend",
            "89488024ad20ce411569b23a3f58b546b6a6153d"
        ],
        [
            "Ltac big_enough_trans := match goal with | [leq_nm : is_true (?n <= ?m)%N |- is_true (?x <= ?m)] => apply: leq_trans leq_nm; big_enough; olddone | _ => big_enough; olddone end.",
            "VernacExtend",
            "4caf77d5eb491fb574041444648319cd138f9c5d"
        ],
        [
            "Ltac done := do [olddone|big_enough_trans].",
            "VernacExtend",
            "f44aad862b79e47d18c7dfae9e8a6930caaedcf8"
        ],
        [
            "End BigEnough.",
            "VernacEndSegment",
            "da154ee669d0a7b806a0969b7a5822a354a30657"
        ]
    ],
    "proofs": [
        {
            "name": "next_bigger_than",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "by case: b i j s => [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "instantiate_bigger_than",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "by case: b i s => [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leq_big_internalE",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "by case: b => [? []].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "context_big_enough",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "by rewrite leq_big_internalE => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "big_rel_leq_class",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "exists leq (foldr maxn 0%N) => [|i s|i j s /leq_trans->] //; by rewrite (leq_maxl, leq_maxr).",
                        "VernacExtend",
                        "7bd77ea96f784074e3b1d448260a45dd4191485f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}