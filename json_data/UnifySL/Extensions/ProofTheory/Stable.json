{
    "filename": "Extensions/ProofTheory/Stable.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Coq.Classes.Morphisms.",
            "VernacRequire",
            "d6f94fe62e68e8d5e6a6c6513b6c2e04f2b5d71a"
        ],
        [
            "Require Import Coq.Classes.RelationClasses.",
            "VernacRequire",
            "e1e9fb5bb83f789dcff9c0bfa33e2d359b0caa70"
        ],
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.MinimunLogic.Syntax.",
            "VernacRequire",
            "1fe3f501db6a35e0c279335c26da5e64e6b0b57b"
        ],
        [
            "Require Import Logic.PropositionalLogic.Syntax.",
            "VernacRequire",
            "441acd893a589161321f487f85bee0d46b168a77"
        ],
        [
            "Require Import Logic.ModalLogic.Syntax.",
            "VernacRequire",
            "5622ed4aa206f322d0c747758fe045fbf3322e66"
        ],
        [
            "Require Import Logic.SeparationLogic.Syntax.",
            "VernacRequire",
            "06f045a49fc8f11e28ecdce8309ad8f23a886843"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Import PropositionalLanguageNotation.",
            "VernacImport",
            "69bfca1fca0e417f262dd3cc9ce6113dc17ba916"
        ],
        [
            "Import ModalLanguageNotation.",
            "VernacImport",
            "3edfcb625a3941b052e06fd51f3a696f82fb0473"
        ],
        [
            "Import SeparationLogicNotation.",
            "VernacImport",
            "ef77ed65f39901a78bbb8e7daa1c2fee20e46d4e"
        ],
        [
            "Class PropositionalStable (L: Language) {minL: MinimunLanguage L} {pL: PropositionalLanguage L} (Gamma: ProofTheory L) (stable: expr -> Prop) := { impp_stable: forall x y, stable x -> stable y -> stable (x --> y); andp_stable: forall x y, stable x -> stable y -> stable (x && y); orp_stable: forall x y, stable x -> stable y -> stable (x || y); falsep_stable: stable FF; stable_proper_iffp :> Proper ((fun x y => |-- x <--> y) ==> iff) stable }.",
            "VernacInductive",
            "fef46d61f99ab2fcac73d612e3dbeaf688ce6640"
        ],
        [
            "Class ModalStable (L: Language) {minL: MinimunLanguage L} {mL: ModalLanguage L} (Gamma: ProofTheory L) (stable: expr -> Prop) := { boxp_stable: forall x, stable x -> stable (boxp x) }.",
            "VernacInductive",
            "462a290bfcf62d0f62ee8856822899dbd62aa169"
        ],
        [
            "Class ModalAbsorbStable (L: Language) {minL: MinimunLanguage L} {mL: ModalLanguage L} (Gamma: ProofTheory L) (stable: expr -> Prop) := { boxp_absorb_stable: forall x, stable x -> |-- x --> boxp x }.",
            "VernacInductive",
            "f05290859b3f36f69549c8fde4e88faaf46181a8"
        ],
        [
            "Class SeparationStable (L: Language) {minL: MinimunLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) (stable: expr -> Prop) := { sepcon_stable: forall x y, stable x -> stable y -> stable (x * y); wand_stable: forall x y, stable x -> stable y -> stable (x -* y) }.",
            "VernacInductive",
            "87c513656f1eb29ed0bc0c34603fe544b1b82d45"
        ],
        [
            "Class SeparationAbsorbStable (L: Language) {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) (stable: expr -> Prop) := { stable_andp_sepcon1: forall x y z, stable x -> |-- (x && y) * z <--> x && (y * z) }.",
            "VernacInductive",
            "1286d3a79a5b1f26720449c011c0fbe0f54a725f"
        ],
        [
            "Lemma iffp_stable {L: Language} {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {Gamma: ProofTheory L} {stable: expr -> Prop} {pstable: PropositionalStable L Gamma stable}: forall x y, stable x -> stable y -> stable (x <--> y).",
            "VernacStartTheoremProof",
            "0702f5b159542ff205af281c42214e232f97cf80"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply andp_stable; apply impp_stable; auto.",
            "VernacExtend",
            "71c37b87c494cdb154eb93078b6c711c2344a6d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma truep_stable {L: Language} {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {Gamma: ProofTheory L} {stable: expr -> Prop} {pstable: PropositionalStable L Gamma stable}: stable TT.",
            "VernacStartTheoremProof",
            "a74bb58e5b2693254fa7cd4a0565ab8ab37d9b7a"
        ],
        [
            "apply impp_stable; apply falsep_stable.",
            "VernacExtend",
            "8fed1c698a47be2e61f24b4f5cc6496fbbf5f018"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "iffp_stable",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply andp_stable; apply impp_stable; auto.",
                        "VernacExtend",
                        "71c37b87c494cdb154eb93078b6c711c2344a6d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "truep_stable",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "apply impp_stable; apply falsep_stable.",
                        "VernacExtend",
                        "8fed1c698a47be2e61f24b4f5cc6496fbbf5f018"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}