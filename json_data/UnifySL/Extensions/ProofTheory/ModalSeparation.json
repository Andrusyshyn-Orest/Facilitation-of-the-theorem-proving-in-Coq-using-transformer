{
    "filename": "Extensions/ProofTheory/ModalSeparation.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.MinimunLogic.Syntax.",
            "VernacRequire",
            "1fe3f501db6a35e0c279335c26da5e64e6b0b57b"
        ],
        [
            "Require Import Logic.PropositionalLogic.Syntax.",
            "VernacRequire",
            "441acd893a589161321f487f85bee0d46b168a77"
        ],
        [
            "Require Import Logic.ModalLogic.Syntax.",
            "VernacRequire",
            "5622ed4aa206f322d0c747758fe045fbf3322e66"
        ],
        [
            "Require Import Logic.SeparationLogic.Syntax.",
            "VernacRequire",
            "06f045a49fc8f11e28ecdce8309ad8f23a886843"
        ],
        [
            "Require Import Logic.MinimunLogic.ProofTheory.Minimun.",
            "VernacRequire",
            "7dd3badfb0ea34d33454f0c461fceaac94fde835"
        ],
        [
            "Require Import Logic.MinimunLogic.ProofTheory.RewriteClass.",
            "VernacRequire",
            "979c209afa85ced49ff62f7a9b2136c799474941"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.Intuitionistic.",
            "VernacRequire",
            "918be0c1da11c6e84f2fca83e0414062df4a6509"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.DeMorgan.",
            "VernacRequire",
            "979253b4e51bd4c70a2820690cbe8456571aeec4"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.GodelDummett.",
            "VernacRequire",
            "6b75b7bbc32a6656be72ad029a1da066beffebf4"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.Classical.",
            "VernacRequire",
            "9db43e6b1f1b9e4d12563fea4db9562a4e6fcb7d"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.RewriteClass.",
            "VernacRequire",
            "e93eef38e75c736b6e3ce3c196435253280f259c"
        ],
        [
            "Require Import Logic.ModalLogic.ProofTheory.ModalLogic.",
            "VernacRequire",
            "4f5756099af4c7a3fdb31035cadbbeb32f199bec"
        ],
        [
            "Require Import Logic.ModalLogic.ProofTheory.RewriteClass.",
            "VernacRequire",
            "bccb46c355b6299cb8d425e48da8f7f216326c1e"
        ],
        [
            "Require Import Logic.SeparationLogic.ProofTheory.SeparationLogic.",
            "VernacRequire",
            "5622e8313e681fd82a117cfb8733fb58c94e9134"
        ],
        [
            "Require Import Logic.SeparationLogic.ProofTheory.DerivedRules.",
            "VernacRequire",
            "dd891d40078f9e3e2718ac8caf7cec1def4b2911"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Import PropositionalLanguageNotation.",
            "VernacImport",
            "69bfca1fca0e417f262dd3cc9ce6113dc17ba916"
        ],
        [
            "Import ModalLanguageNotation.",
            "VernacImport",
            "3edfcb625a3941b052e06fd51f3a696f82fb0473"
        ],
        [
            "Import SeparationLogicNotation.",
            "VernacImport",
            "ef77ed65f39901a78bbb8e7daa1c2fee20e46d4e"
        ],
        [
            "Class SeparationTransparentModality1 (L: Language) {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {mL: ModalLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {KmGamma: SystemK L Gamma} {sGamma: SeparationLogic L Gamma} := { sepcon_boxp: forall x y, |-- boxp x * boxp y --> boxp (x * y) }.",
            "VernacInductive",
            "f6400c44fae620a71c18304f01ce0bf029d67844"
        ],
        [
            "Class SeparationTransparentModality2 (L: Language) {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {mL: ModalLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {KmGamma: SystemK L Gamma} {sGamma: SeparationLogic L Gamma} := { boxp_sepcon: forall x y, |-- boxp (x * y) --> boxp x * boxp y }.",
            "VernacInductive",
            "6861d208e71c0d87c40ab5c9620cef1c6625761e"
        ],
        [
            "Class SeparationTransparentModality3 (L: Language) {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {mL: ModalLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {KmGamma: SystemK L Gamma} {sGamma: SeparationLogic L Gamma} := { wand_boxp: forall x y, |-- (boxp x -* boxp y) --> boxp (x -* y) }.",
            "VernacInductive",
            "8b35aa9eb60ea982d3aa9c3c3782882c6bc97976"
        ],
        [
            "Class SeparationTransparentModality4 (L: Language) {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {mL: ModalLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {KmGamma: SystemK L Gamma} {sGamma: SeparationLogic L Gamma} := { boxp_wand: forall x y, |-- boxp (x -* y) --> (boxp x -* boxp y) }.",
            "VernacInductive",
            "81f41ab4e037cf3cc19e70639fe43f91527d47d7"
        ],
        [
            "Instance SeparationTransparentModality14 (L: Language) {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {mL: ModalLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {KmGamma: SystemK L Gamma} {sGamma: SeparationLogic L Gamma} {sm1Gamma: SeparationTransparentModality1 L Gamma}: SeparationTransparentModality4 L Gamma.",
            "VernacInstance",
            "471e6bdce2f973c84360a24ffa26ea794dcc0fdf"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply wand_sepcon_adjoint.",
            "VernacExtend",
            "fbf6785c920a452e456ac93d7196ce469016cc71"
        ],
        [
            "rewrite sepcon_boxp.",
            "VernacExtend",
            "68f55248880c3726c9aa8de84a0c80c859f75c53"
        ],
        [
            "rewrite provable_wand_sepcon_modus_ponens1.",
            "VernacExtend",
            "e4edcb166331d12d247708822e57cb6ccd01f067"
        ],
        [
            "apply provable_impp_refl.",
            "VernacExtend",
            "2cef60de23967c402db3e33ea4d2e3fd4e449812"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance SeparationTransparentModality41 (L: Language) {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {mL: ModalLanguage L} {sL: SeparationLanguage L} (Gamma: ProofTheory L) {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {KmGamma: SystemK L Gamma} {sGamma: SeparationLogic L Gamma} {sm3Gamma: SeparationTransparentModality4 L Gamma}: SeparationTransparentModality1 L Gamma.",
            "VernacInstance",
            "d96f76a3ebf218e8084a70c461b65127ffe1d239"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply wand_sepcon_adjoint.",
            "VernacExtend",
            "fbf6785c920a452e456ac93d7196ce469016cc71"
        ],
        [
            "rewrite <- boxp_wand.",
            "VernacExtend",
            "00d950ceb8005651a2eaa0c9faddee68e36ea3ea"
        ],
        [
            "eapply modus_ponens; [apply axiom_K |].",
            "VernacExtend",
            "918b2712a65c8b6717709d1a7d9f5c81b9c320c6"
        ],
        [
            "apply rule_N.",
            "VernacExtend",
            "ed0fb27ecb654bf1c3fc485523de91df793e6d55"
        ],
        [
            "apply wand_sepcon_adjoint.",
            "VernacExtend",
            "fbf6785c920a452e456ac93d7196ce469016cc71"
        ],
        [
            "apply provable_impp_refl.",
            "VernacExtend",
            "2cef60de23967c402db3e33ea4d2e3fd4e449812"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "SeparationTransparentModality14",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply wand_sepcon_adjoint.",
                        "VernacExtend",
                        "fbf6785c920a452e456ac93d7196ce469016cc71"
                    ]
                },
                {
                    "command": [
                        "rewrite sepcon_boxp.",
                        "VernacExtend",
                        "68f55248880c3726c9aa8de84a0c80c859f75c53"
                    ]
                },
                {
                    "command": [
                        "rewrite provable_wand_sepcon_modus_ponens1.",
                        "VernacExtend",
                        "e4edcb166331d12d247708822e57cb6ccd01f067"
                    ]
                },
                {
                    "command": [
                        "apply provable_impp_refl.",
                        "VernacExtend",
                        "2cef60de23967c402db3e33ea4d2e3fd4e449812"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SeparationTransparentModality41",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply wand_sepcon_adjoint.",
                        "VernacExtend",
                        "fbf6785c920a452e456ac93d7196ce469016cc71"
                    ]
                },
                {
                    "command": [
                        "rewrite <- boxp_wand.",
                        "VernacExtend",
                        "00d950ceb8005651a2eaa0c9faddee68e36ea3ea"
                    ]
                },
                {
                    "command": [
                        "eapply modus_ponens; [apply axiom_K |].",
                        "VernacExtend",
                        "918b2712a65c8b6717709d1a7d9f5c81b9c320c6"
                    ]
                },
                {
                    "command": [
                        "apply rule_N.",
                        "VernacExtend",
                        "ed0fb27ecb654bf1c3fc485523de91df793e6d55"
                    ]
                },
                {
                    "command": [
                        "apply wand_sepcon_adjoint.",
                        "VernacExtend",
                        "fbf6785c920a452e456ac93d7196ce469016cc71"
                    ]
                },
                {
                    "command": [
                        "apply provable_impp_refl.",
                        "VernacExtend",
                        "2cef60de23967c402db3e33ea4d2e3fd4e449812"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}