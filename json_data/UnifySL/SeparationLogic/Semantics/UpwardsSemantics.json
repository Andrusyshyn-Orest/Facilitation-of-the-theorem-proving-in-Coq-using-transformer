{
    "filename": "SeparationLogic/Semantics/UpwardsSemantics.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Coq.Logic.Classical_Prop.",
            "VernacRequire",
            "9ccd680c17c6039100012bae5c1bef8ed35d228a"
        ],
        [
            "Require Import Coq.Classes.RelationClasses.",
            "VernacRequire",
            "e1e9fb5bb83f789dcff9c0bfa33e2d359b0caa70"
        ],
        [
            "Require Import Coq.Relations.Relation_Definitions.",
            "VernacRequire",
            "e90e5840c35495258b335912cbf63f3e29ec520e"
        ],
        [
            "Require Import Logic.lib.Coqlib.",
            "VernacRequire",
            "075e5d7e5a261753a32e2d1ec79bc22503d420dc"
        ],
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.SeparationLogic.Syntax.",
            "VernacRequire",
            "06f045a49fc8f11e28ecdce8309ad8f23a886843"
        ],
        [
            "Require Import Logic.GeneralLogic.KripkeModel.",
            "VernacRequire",
            "6b79568e5e653c27c6a8e7063552aa2142ab9f3f"
        ],
        [
            "Require Import Logic.SeparationLogic.Model.SeparationAlgebra.",
            "VernacRequire",
            "fff7e35feb20a10cad353e63f1dbfcd95597c6ca"
        ],
        [
            "Require Import Logic.SeparationLogic.Model.OrderedSA.",
            "VernacRequire",
            "c39ff54bd2278860ad247e36ee8f65fdcfafa4a7"
        ],
        [
            "Require Import Logic.SeparationLogic.Semantics.WeakSemantics.",
            "VernacRequire",
            "ead1776649e1b2ddfaf45c73ff988581b9fdf4fc"
        ],
        [
            "Require Import Logic.SeparationLogic.Semantics.StrongSemantics.",
            "VernacRequire",
            "5240bb7876475c2ed7681d5104da20de96e34f26"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Local Open Scope kripke_model.",
            "VernacOpenCloseScope",
            "e49ee31afd7da8031602e71d800a363615169ff7"
        ],
        [
            "Import SeparationLogicNotation.",
            "VernacImport",
            "ef77ed65f39901a78bbb8e7daa1c2fee20e46d4e"
        ],
        [
            "Import KripkeModelFamilyNotation.",
            "VernacImport",
            "e1b9787d5646dac924687ed660f3c109e8d952dd"
        ],
        [
            "Import KripkeModelNotation_Intuitionistic.",
            "VernacImport",
            "d7b7fe443374144a34554b0fe36caedd27cfce5b"
        ],
        [
            "Class SeparatingSemantics (L: Language) {sL: SeparationLanguage L} (MD: Model) {kMD: KripkeModel MD} (M: Kmodel) {R: Relation (Kworlds M)} {J: Join (Kworlds M)} (SM: Semantics L MD): Type := { denote_sepcon: forall x y, Same_set _ (Kdenotation M (x * y)) (WeakSemantics.sepcon (Kdenotation M x) (Kdenotation M y)); denote_wand: forall x y, Same_set _ (Kdenotation M (x -* y)) (StrongSemantics.wand (Kdenotation M x) (Kdenotation M y)) }.",
            "VernacInductive",
            "7661914db921d228024273106ed4374e53456481"
        ],
        [
            "Class EmpSemantics (L: Language) {sL: SeparationLanguage L} {s'L: SeparationEmpLanguage L} (MD: Model) {kMD: KripkeModel MD} (M: Kmodel) {R: Relation (Kworlds M)} {J: Join (Kworlds M)} (SM: Semantics L MD): Type := denote_emp: Same_set _ (Kdenotation M emp) StrongSemantics.emp.",
            "VernacInductive",
            "9a93668d78386b608dd24f819642eca7e35774e9"
        ],
        [
            "Lemma sat_sepcon {L: Language} {sL: SeparationLanguage L} {MD: Model} {kMD: KripkeModel MD} {M: Kmodel} {R: Relation (Kworlds M)} {J: Join (Kworlds M)} {SM: Semantics L MD} {usSM: SeparatingSemantics L MD M SM}: forall m x y, KRIPKE: M , m |= x * y <-> exists m1 m2, join m1 m2 m /\\ KRIPKE: M , m1 |= x /\\ KRIPKE: M, m2 |= y.",
            "VernacStartTheoremProof",
            "5fdbcbc1c68734958d9d72b6ffef791cf5817a1c"
        ],
        [
            "intros; simpl.",
            "VernacExtend",
            "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
        ],
        [
            "unfold satisfies.",
            "VernacExtend",
            "cce376b046315f4cfb04db6ccdf5cf21af01be21"
        ],
        [
            "destruct (denote_sepcon x y).",
            "VernacExtend",
            "0bfab305efe9cde7dcc805a62e32b997b37fac45"
        ],
        [
            "split; [apply H | apply H0].",
            "VernacExtend",
            "c2fed9f3759800326dbd68a460f0c95510f4be5d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sat_wand {L: Language} {sL: SeparationLanguage L} {MD: Model} {kMD: KripkeModel MD} {M: Kmodel} {R: Relation (Kworlds M)} {J: Join (Kworlds M)} {SM: Semantics L MD} {usSM: SeparatingSemantics L MD M SM}: forall m x y, KRIPKE: M , m |= x -* y <-> forall m0 m1 m2, m <= m0 -> join m0 m1 m2 -> KRIPKE: M , m1 |= x -> KRIPKE: M, m2 |= y.",
            "VernacStartTheoremProof",
            "cfaa75cfb8576c185c4c81310275099703ecc2ed"
        ],
        [
            "intros; simpl.",
            "VernacExtend",
            "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
        ],
        [
            "unfold satisfies.",
            "VernacExtend",
            "cce376b046315f4cfb04db6ccdf5cf21af01be21"
        ],
        [
            "destruct (denote_wand x y).",
            "VernacExtend",
            "0cc9c91f33c0a2dd74a5d7b14d9d60746c5c455b"
        ],
        [
            "split; [apply H | apply H0].",
            "VernacExtend",
            "c2fed9f3759800326dbd68a460f0c95510f4be5d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sat_emp {L: Language} {sL: SeparationLanguage L} {s'L: SeparationEmpLanguage L} {MD: Model} {kMD: KripkeModel MD} {M: Kmodel} {R: Relation (Kworlds M)} {J: Join (Kworlds M)} {SM: Semantics L MD} {ueSM: EmpSemantics L MD M SM}: forall (m: Kworlds M), KRIPKE: M, m |= emp <-> increasing' m.",
            "VernacStartTheoremProof",
            "220d18e368b434e1fea6da45224ecb938735d806"
        ],
        [
            "intros; simpl.",
            "VernacExtend",
            "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
        ],
        [
            "unfold satisfies.",
            "VernacExtend",
            "cce376b046315f4cfb04db6ccdf5cf21af01be21"
        ],
        [
            "destruct denote_emp.",
            "VernacExtend",
            "a9d9b1b33a75a1ff7e0260ddee2efff822a32152"
        ],
        [
            "split; [apply H | apply H0].",
            "VernacExtend",
            "c2fed9f3759800326dbd68a460f0c95510f4be5d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "sat_sepcon",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intros; simpl.",
                        "VernacExtend",
                        "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
                    ]
                },
                {
                    "command": [
                        "unfold satisfies.",
                        "VernacExtend",
                        "cce376b046315f4cfb04db6ccdf5cf21af01be21"
                    ]
                },
                {
                    "command": [
                        "destruct (denote_sepcon x y).",
                        "VernacExtend",
                        "0bfab305efe9cde7dcc805a62e32b997b37fac45"
                    ]
                },
                {
                    "command": [
                        "split; [apply H | apply H0].",
                        "VernacExtend",
                        "c2fed9f3759800326dbd68a460f0c95510f4be5d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sat_wand",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros; simpl.",
                        "VernacExtend",
                        "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
                    ]
                },
                {
                    "command": [
                        "unfold satisfies.",
                        "VernacExtend",
                        "cce376b046315f4cfb04db6ccdf5cf21af01be21"
                    ]
                },
                {
                    "command": [
                        "destruct (denote_wand x y).",
                        "VernacExtend",
                        "0cc9c91f33c0a2dd74a5d7b14d9d60746c5c455b"
                    ]
                },
                {
                    "command": [
                        "split; [apply H | apply H0].",
                        "VernacExtend",
                        "c2fed9f3759800326dbd68a460f0c95510f4be5d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sat_emp",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "intros; simpl.",
                        "VernacExtend",
                        "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
                    ]
                },
                {
                    "command": [
                        "unfold satisfies.",
                        "VernacExtend",
                        "cce376b046315f4cfb04db6ccdf5cf21af01be21"
                    ]
                },
                {
                    "command": [
                        "destruct denote_emp.",
                        "VernacExtend",
                        "a9d9b1b33a75a1ff7e0260ddee2efff822a32152"
                    ]
                },
                {
                    "command": [
                        "split; [apply H | apply H0].",
                        "VernacExtend",
                        "c2fed9f3759800326dbd68a460f0c95510f4be5d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}