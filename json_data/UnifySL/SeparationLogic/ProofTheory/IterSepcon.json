{
    "filename": "SeparationLogic/ProofTheory/IterSepcon.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Coq.Classes.Morphisms.",
            "VernacRequire",
            "d6f94fe62e68e8d5e6a6c6513b6c2e04f2b5d71a"
        ],
        [
            "Require Import Coq.Classes.RelationClasses.",
            "VernacRequire",
            "e1e9fb5bb83f789dcff9c0bfa33e2d359b0caa70"
        ],
        [
            "Require Import Coq.Logic.Classical_Prop.",
            "VernacRequire",
            "9ccd680c17c6039100012bae5c1bef8ed35d228a"
        ],
        [
            "Require Import Coq.Sorting.Permutation.",
            "VernacRequire",
            "91cb696adf793d75c8f1c3333c2ab6d7da008e71"
        ],
        [
            "Require Import Logic.lib.Coqlib.",
            "VernacRequire",
            "075e5d7e5a261753a32e2d1ec79bc22503d420dc"
        ],
        [
            "Require Import Logic.lib.List_Func_ext.",
            "VernacRequire",
            "2e85b57c2f26ae79305af2a3035a2aeb0fed4330"
        ],
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.GeneralLogic.ProofTheory.BasicSequentCalculus.",
            "VernacRequire",
            "f2fbc894d63ff9f72127ac59dc8b190ee459f36d"
        ],
        [
            "Require Import Logic.MinimunLogic.Syntax.",
            "VernacRequire",
            "1fe3f501db6a35e0c279335c26da5e64e6b0b57b"
        ],
        [
            "Require Import Logic.MinimunLogic.ProofTheory.Minimun.",
            "VernacRequire",
            "7dd3badfb0ea34d33454f0c461fceaac94fde835"
        ],
        [
            "Require Import Logic.MinimunLogic.ProofTheory.RewriteClass.",
            "VernacRequire",
            "979c209afa85ced49ff62f7a9b2136c799474941"
        ],
        [
            "Require Import Logic.MinimunLogic.ProofTheory.ProofTheoryPatterns.",
            "VernacRequire",
            "edc2a664140878f2b6c142af63db54a1d63d6521"
        ],
        [
            "Require Import Logic.PropositionalLogic.Syntax.",
            "VernacRequire",
            "441acd893a589161321f487f85bee0d46b168a77"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.Intuitionistic.",
            "VernacRequire",
            "918be0c1da11c6e84f2fca83e0414062df4a6509"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.DeMorgan.",
            "VernacRequire",
            "979253b4e51bd4c70a2820690cbe8456571aeec4"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.GodelDummett.",
            "VernacRequire",
            "6b75b7bbc32a6656be72ad029a1da066beffebf4"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.Classical.",
            "VernacRequire",
            "9db43e6b1f1b9e4d12563fea4db9562a4e6fcb7d"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.RewriteClass.",
            "VernacRequire",
            "e93eef38e75c736b6e3ce3c196435253280f259c"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.ProofTheoryPatterns.",
            "VernacRequire",
            "4963a955d2db3ace67637593d6850468f9af9e51"
        ],
        [
            "Require Import Logic.SeparationLogic.Syntax.",
            "VernacRequire",
            "06f045a49fc8f11e28ecdce8309ad8f23a886843"
        ],
        [
            "Require Import Logic.SeparationLogic.ProofTheory.SeparationLogic.",
            "VernacRequire",
            "5622e8313e681fd82a117cfb8733fb58c94e9134"
        ],
        [
            "Require Import Logic.SeparationLogic.ProofTheory.RewriteClass.",
            "VernacRequire",
            "1fd18b510c03e9c7af0f4f5a68b3ed48b1eb26d2"
        ],
        [
            "Require Import Logic.SeparationLogic.ProofTheory.DerivedRules.",
            "VernacRequire",
            "dd891d40078f9e3e2718ac8caf7cec1def4b2911"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Import PropositionalLanguageNotation.",
            "VernacImport",
            "69bfca1fca0e417f262dd3cc9ce6113dc17ba916"
        ],
        [
            "Import SeparationLogicNotation.",
            "VernacImport",
            "ef77ed65f39901a78bbb8e7daa1c2fee20e46d4e"
        ],
        [
            "Definition iter_sepcon {L: Language} {sL: SeparationLanguage L} {s'L: SeparationEmpLanguage L} (xs: list expr) : expr := fold_left sepcon xs emp.",
            "VernacDefinition",
            "3164d244a85a2a27735f6892b3c54c94109f61f4"
        ],
        [
            "Definition iter_wand {L: Language} {sL: SeparationLanguage L} (xs: list expr) (y: expr) : expr := fold_right wand y xs.",
            "VernacDefinition",
            "32c4f0d5b3a9fe5f9f8512ac46f6fcc60eb01f47"
        ],
        [
            "Section IterSepconRules.",
            "VernacBeginSection",
            "81eeb43db9eab04c2ae54695575e431091a35cb8"
        ],
        [
            "Context {L: Language} {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {sL: SeparationLanguage L} {s'L: SeparationEmpLanguage L} {Gamma: ProofTheory L} {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {sGamma: SeparationLogic L Gamma} {EmpGamma: EmpSeparationLogic L Gamma}.",
            "VernacContext",
            "e743e3f7ab56a2d1b7f5cddd23ad79a48eb05224"
        ],
        [
            "Lemma sepcon_iter_sepcon: forall xs ys, |-- iter_sepcon xs * iter_sepcon ys <--> iter_sepcon (xs ++ ys).",
            "VernacStartTheoremProof",
            "246d2f41911bed343d4b355bfd2d436d54074393"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply (@assoc_prodp_fold_left_equiv _ _ _ _ _ _ _ _ sepcon_Mono sepcon_Assoc sepcon_LU sepcon_RU).",
            "VernacExtend",
            "6b745958cf0911022756ec67193a2dd714271d94"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance proper_iter_sepcon_impp: Proper (Forall2 (fun x y => |-- impp x y) ==> (fun x y => |-- impp x y)) iter_sepcon.",
            "VernacInstance",
            "d41e85c6fc3f3cbb465c3d561c4dda273b4f73de"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold iter_sepcon.",
            "VernacExtend",
            "5b0cd7744c987f44a09f963544be0f85ec484017"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "exact (proper_fold_left' sepcon _ _ H emp emp (provable_impp_refl _)).",
            "VernacExtend",
            "866c9a4353f898be7b40276db3a63b9c146528ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance proper_iter_sepcon_iffp: Proper (Forall2 (fun x y => |-- iffp x y) ==> (fun x y => |-- iffp x y)) iter_sepcon.",
            "VernacInstance",
            "a29cfc3085ae02500b46ac5b7779c7f4d78a7ecf"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold iter_sepcon.",
            "VernacExtend",
            "5b0cd7744c987f44a09f963544be0f85ec484017"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "exact (proper_fold_left' sepcon _ _ H emp emp (provable_iffp_refl _)).",
            "VernacExtend",
            "8ca738ad5da8d7f45eff39568af033761e388e6c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance proper_iter_sepcon_Permutation: Proper (@Permutation expr ==> (fun x y => |-- iffp x y)) iter_sepcon.",
            "VernacInstance",
            "e61c7a63041171d56af42edcfc8a06e9af3f3701"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "apply (@assoc_fold_left_Permutation _ _ _ _ _ _ _ sepcon_Mono sepcon_Comm sepcon_Assoc); auto.",
            "VernacExtend",
            "337c297f3a8289b5d172d9f71caaf0c9020ecf4f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IterSepconRules.",
            "VernacEndSegment",
            "5f66bc8045f3c9d5d11fa24f015a0001f8fa40a4"
        ]
    ],
    "proofs": [
        {
            "name": "sepcon_iter_sepcon",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply (@assoc_prodp_fold_left_equiv _ _ _ _ _ _ _ _ sepcon_Mono sepcon_Assoc sepcon_LU sepcon_RU).",
                        "VernacExtend",
                        "6b745958cf0911022756ec67193a2dd714271d94"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_iter_sepcon_impp",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold iter_sepcon.",
                        "VernacExtend",
                        "5b0cd7744c987f44a09f963544be0f85ec484017"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "exact (proper_fold_left' sepcon _ _ H emp emp (provable_impp_refl _)).",
                        "VernacExtend",
                        "866c9a4353f898be7b40276db3a63b9c146528ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_iter_sepcon_iffp",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold iter_sepcon.",
                        "VernacExtend",
                        "5b0cd7744c987f44a09f963544be0f85ec484017"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "exact (proper_fold_left' sepcon _ _ H emp emp (provable_iffp_refl _)).",
                        "VernacExtend",
                        "8ca738ad5da8d7f45eff39568af033761e388e6c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proper_iter_sepcon_Permutation",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "apply (@assoc_fold_left_Permutation _ _ _ _ _ _ _ sepcon_Mono sepcon_Comm sepcon_Assoc); auto.",
                        "VernacExtend",
                        "337c297f3a8289b5d172d9f71caaf0c9020ecf4f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}