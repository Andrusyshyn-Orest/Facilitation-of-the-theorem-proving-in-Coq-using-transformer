{
    "filename": "ModalLogic/ProofTheory/ClassicalDerivedRules.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.GeneralLogic.ProofTheory.BasicSequentCalculus.",
            "VernacRequire",
            "f2fbc894d63ff9f72127ac59dc8b190ee459f36d"
        ],
        [
            "Require Import Logic.MinimunLogic.Syntax.",
            "VernacRequire",
            "1fe3f501db6a35e0c279335c26da5e64e6b0b57b"
        ],
        [
            "Require Import Logic.MinimunLogic.ProofTheory.Minimun.",
            "VernacRequire",
            "7dd3badfb0ea34d33454f0c461fceaac94fde835"
        ],
        [
            "Require Import Logic.MinimunLogic.ProofTheory.RewriteClass.",
            "VernacRequire",
            "979c209afa85ced49ff62f7a9b2136c799474941"
        ],
        [
            "Require Import Logic.PropositionalLogic.Syntax.",
            "VernacRequire",
            "441acd893a589161321f487f85bee0d46b168a77"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.Intuitionistic.",
            "VernacRequire",
            "918be0c1da11c6e84f2fca83e0414062df4a6509"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.DeMorgan.",
            "VernacRequire",
            "979253b4e51bd4c70a2820690cbe8456571aeec4"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.GodelDummett.",
            "VernacRequire",
            "6b75b7bbc32a6656be72ad029a1da066beffebf4"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.Classical.",
            "VernacRequire",
            "9db43e6b1f1b9e4d12563fea4db9562a4e6fcb7d"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.RewriteClass.",
            "VernacRequire",
            "e93eef38e75c736b6e3ce3c196435253280f259c"
        ],
        [
            "Require Import Logic.ModalLogic.Syntax.",
            "VernacRequire",
            "5622ed4aa206f322d0c747758fe045fbf3322e66"
        ],
        [
            "Require Import Logic.ModalLogic.ProofTheory.ModalLogic.",
            "VernacRequire",
            "4f5756099af4c7a3fdb31035cadbbeb32f199bec"
        ],
        [
            "Require Import Logic.ModalLogic.ProofTheory.RewriteClass.",
            "VernacRequire",
            "bccb46c355b6299cb8d425e48da8f7f216326c1e"
        ],
        [
            "Require Import Logic.ModalLogic.ProofTheory.IntuitionisticDerivedRules.",
            "VernacRequire",
            "eaf292c1909ea4a324354c21e3baf49d0dacaf11"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Import PropositionalLanguageNotation.",
            "VernacImport",
            "69bfca1fca0e417f262dd3cc9ce6113dc17ba916"
        ],
        [
            "Import ModalLanguageNotation.",
            "VernacImport",
            "3edfcb625a3941b052e06fd51f3a696f82fb0473"
        ],
        [
            "Section ClassicalderivedRules.",
            "VernacBeginSection",
            "eaba67f323bbbd2f5bc60d78f2513c7ffd1ce46b"
        ],
        [
            "Context {L: Language} {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {mL: ModalLanguage L} {Gamma: ProofTheory L} {minAX: MinimunAxiomatization L Gamma} {ipGamma: IntuitionisticPropositionalLogic L Gamma} {cpGamma: ClassicalPropositionalLogic L Gamma} {KmGamma: SystemK L Gamma}.",
            "VernacContext",
            "36245d76c6db21b7c12eaef0f6246ee81313cb42"
        ],
        [
            "Existing Instances Classical2GodelDummett GodelDummett2DeMorgan.",
            "VernacDeclareInstances",
            "bca40b45a09006650293b39da8d4a08cb61aabb9"
        ],
        [
            "Lemma diamondp_orp: forall x y, |-- diamondp (x || y) <--> (diamondp x || diamondp y).",
            "VernacStartTheoremProof",
            "d670553c2de210651e79fe22e4165cacbc5ef672"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply solve_andp_intros; [| apply orp_diamondp].",
            "VernacExtend",
            "ac189f9a62ca577b3b1888c6b42e0490accb99a7"
        ],
        [
            "unfold diamondp.",
            "VernacExtend",
            "0ff6987c13fdab6db8b137885ed64435a39e201a"
        ],
        [
            "rewrite <- demorgan_negp_andp.",
            "VernacExtend",
            "73f4761f46a8e56bc17f7df77c99988bc75d82ea"
        ],
        [
            "rewrite <- contrapositivePP.",
            "VernacExtend",
            "cfe15563b48d9a93b704dae54c36099224f5588b"
        ],
        [
            "rewrite <- boxp_andp.",
            "VernacExtend",
            "bf787e87d7669e0605f55a928b229b916713fc29"
        ],
        [
            "rewrite demorgan_negp_orp.",
            "VernacExtend",
            "f07a2161f72e0397ba3f0b1d47b0f1a65effd081"
        ],
        [
            "apply provable_impp_refl.",
            "VernacExtend",
            "2cef60de23967c402db3e33ea4d2e3fd4e449812"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance PropositionalTransparentModality2StrongPropositionalTransparentModality {pmGamma: PropositionalTransparentModality L Gamma}: StrongPropositionalTransparentModality L Gamma.",
            "VernacInstance",
            "ca97629766840670335b13a2adf8865fec1a3b4a"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply solve_andp_intros; [apply axiom_K |].",
            "VernacExtend",
            "ae48379318ab94d7fe6dbcde0751282b60a528b7"
        ],
        [
            "rewrite (impp2orp x y), (impp2orp (boxp x) (boxp y)).",
            "VernacExtend",
            "be5559147b876e80bfa840cb119e470700297080"
        ],
        [
            "rewrite boxp_orp.",
            "VernacExtend",
            "1b3ae6c91333a29d646b5e3b44821dcd50ad5ee0"
        ],
        [
            "apply solve_orp_impp; [| apply orp_intros2].",
            "VernacExtend",
            "a6ca001002a1ada4db56d6704ad3c019c02111da"
        ],
        [
            "rewrite <- orp_intros1.",
            "VernacExtend",
            "e548c307a4d40cc7f16fad5ef34add93972e479a"
        ],
        [
            "apply (modus_ponens (boxp (x || ~~ x))).",
            "VernacExtend",
            "ec6dbae109aa9ae7ba3e2c8554c1d6dc5c765b47"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite boxp_orp.",
            "VernacExtend",
            "1b3ae6c91333a29d646b5e3b44821dcd50ad5ee0"
        ],
        [
            "apply solve_orp_impp; [| apply axiom1].",
            "VernacExtend",
            "155d6b502931d7452436b6f9d6fdf803f8f5dbb9"
        ],
        [
            "clear KmGamma pmGamma; AddSequentCalculus Gamma.",
            "VernacExtend",
            "75ab99e7ba58784fd5152123124c7aac6cb0535d"
        ],
        [
            "rewrite provable_derivable.",
            "VernacExtend",
            "c3e3d0b03abdee59ff63b6e9286ddf71eaf4872e"
        ],
        [
            "rewrite <- !deduction_theorem.",
            "VernacExtend",
            "5c120584a05b4c3b080a2463f321331d3f4a3863"
        ],
        [
            "apply deduction_falsep_elim.",
            "VernacExtend",
            "a95642d6ad173c1f4375b5475149efa3d210fed8"
        ],
        [
            "apply deduction_modus_ponens with (boxp x); solve_assum.",
            "VernacExtend",
            "e128606c03971ad055a3643206070a0f1ec5b405"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply rule_N.",
            "VernacExtend",
            "ed0fb27ecb654bf1c3fc485523de91df793e6d55"
        ],
        [
            "apply excluded_middle.",
            "VernacExtend",
            "732049c5a91fe4c639d46f29ff2f125bcf1133b5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ClassicalderivedRules.",
            "VernacEndSegment",
            "3860f605658aa5d20703c18c27378c1b088e8591"
        ]
    ],
    "proofs": [
        {
            "name": "diamondp_orp",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply solve_andp_intros; [| apply orp_diamondp].",
                        "VernacExtend",
                        "ac189f9a62ca577b3b1888c6b42e0490accb99a7"
                    ]
                },
                {
                    "command": [
                        "unfold diamondp.",
                        "VernacExtend",
                        "0ff6987c13fdab6db8b137885ed64435a39e201a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- demorgan_negp_andp.",
                        "VernacExtend",
                        "73f4761f46a8e56bc17f7df77c99988bc75d82ea"
                    ]
                },
                {
                    "command": [
                        "rewrite <- contrapositivePP.",
                        "VernacExtend",
                        "cfe15563b48d9a93b704dae54c36099224f5588b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- boxp_andp.",
                        "VernacExtend",
                        "bf787e87d7669e0605f55a928b229b916713fc29"
                    ]
                },
                {
                    "command": [
                        "rewrite demorgan_negp_orp.",
                        "VernacExtend",
                        "f07a2161f72e0397ba3f0b1d47b0f1a65effd081"
                    ]
                },
                {
                    "command": [
                        "apply provable_impp_refl.",
                        "VernacExtend",
                        "2cef60de23967c402db3e33ea4d2e3fd4e449812"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PropositionalTransparentModality2StrongPropositionalTransparentModality",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply solve_andp_intros; [apply axiom_K |].",
                        "VernacExtend",
                        "ae48379318ab94d7fe6dbcde0751282b60a528b7"
                    ]
                },
                {
                    "command": [
                        "rewrite (impp2orp x y), (impp2orp (boxp x) (boxp y)).",
                        "VernacExtend",
                        "be5559147b876e80bfa840cb119e470700297080"
                    ]
                },
                {
                    "command": [
                        "rewrite boxp_orp.",
                        "VernacExtend",
                        "1b3ae6c91333a29d646b5e3b44821dcd50ad5ee0"
                    ]
                },
                {
                    "command": [
                        "apply solve_orp_impp; [| apply orp_intros2].",
                        "VernacExtend",
                        "a6ca001002a1ada4db56d6704ad3c019c02111da"
                    ]
                },
                {
                    "command": [
                        "rewrite <- orp_intros1.",
                        "VernacExtend",
                        "e548c307a4d40cc7f16fad5ef34add93972e479a"
                    ]
                },
                {
                    "command": [
                        "apply (modus_ponens (boxp (x || ~~ x))).",
                        "VernacExtend",
                        "ec6dbae109aa9ae7ba3e2c8554c1d6dc5c765b47"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "rewrite boxp_orp.",
                        "VernacExtend",
                        "1b3ae6c91333a29d646b5e3b44821dcd50ad5ee0"
                    ]
                },
                {
                    "command": [
                        "apply solve_orp_impp; [| apply axiom1].",
                        "VernacExtend",
                        "155d6b502931d7452436b6f9d6fdf803f8f5dbb9"
                    ]
                },
                {
                    "command": [
                        "clear KmGamma pmGamma; AddSequentCalculus Gamma.",
                        "VernacExtend",
                        "75ab99e7ba58784fd5152123124c7aac6cb0535d"
                    ]
                },
                {
                    "command": [
                        "rewrite provable_derivable.",
                        "VernacExtend",
                        "c3e3d0b03abdee59ff63b6e9286ddf71eaf4872e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- !deduction_theorem.",
                        "VernacExtend",
                        "5c120584a05b4c3b080a2463f321331d3f4a3863"
                    ]
                },
                {
                    "command": [
                        "apply deduction_falsep_elim.",
                        "VernacExtend",
                        "a95642d6ad173c1f4375b5475149efa3d210fed8"
                    ]
                },
                {
                    "command": [
                        "apply deduction_modus_ponens with (boxp x); solve_assum.",
                        "VernacExtend",
                        "e128606c03971ad055a3643206070a0f1ec5b405"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "apply rule_N.",
                        "VernacExtend",
                        "ed0fb27ecb654bf1c3fc485523de91df793e6d55"
                    ]
                },
                {
                    "command": [
                        "apply excluded_middle.",
                        "VernacExtend",
                        "732049c5a91fe4c639d46f29ff2f125bcf1133b5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}