{
    "filename": "MinimunLogic/Semantics/Kripke.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Coq.Classes.RelationClasses.",
            "VernacRequire",
            "e1e9fb5bb83f789dcff9c0bfa33e2d359b0caa70"
        ],
        [
            "Require Import Coq.Relations.Relation_Definitions.",
            "VernacRequire",
            "e90e5840c35495258b335912cbf63f3e29ec520e"
        ],
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.GeneralLogic.KripkeModel.",
            "VernacRequire",
            "6b79568e5e653c27c6a8e7063552aa2142ab9f3f"
        ],
        [
            "Require Import Logic.GeneralLogic.Semantics.Kripke.",
            "VernacRequire",
            "4f0a29ef213cb173f58f6b351c743bcacb5b71e5"
        ],
        [
            "Require Import Logic.MinimunLogic.Syntax.",
            "VernacRequire",
            "1fe3f501db6a35e0c279335c26da5e64e6b0b57b"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Local Open Scope kripke_model.",
            "VernacOpenCloseScope",
            "e49ee31afd7da8031602e71d800a363615169ff7"
        ],
        [
            "Import KripkeModelFamilyNotation.",
            "VernacImport",
            "e1b9787d5646dac924687ed660f3c109e8d952dd"
        ],
        [
            "Import KripkeModelNotation_Intuitionistic.",
            "VernacImport",
            "d7b7fe443374144a34554b0fe36caedd27cfce5b"
        ],
        [
            "Module Semantics.",
            "VernacDefineModule",
            "ca7dd7f60a702b03f71e83be6721faf11d931178"
        ],
        [
            "Definition impp {worlds: Type} {R: Relation worlds} (X: Ensemble worlds) (Y: Ensemble worlds): Ensemble worlds := fun m => forall n, m <= n -> X n -> Y n.",
            "VernacDefinition",
            "2ca1ad61e171261ae563fffd0ed7cefef87a34af"
        ],
        [
            "Lemma impp_closed {worlds: Type} {R: Relation worlds} {po_R: PreOrder Krelation}: forall (X: Ensemble worlds) (Y: Ensemble worlds), upwards_closed_Kdenote X -> upwards_closed_Kdenote Y -> upwards_closed_Kdenote (impp X Y).",
            "VernacStartTheoremProof",
            "f9bdca5cfe703cc3158bea561d65b889ce19d2a5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "hnf in H2 |- *.",
            "VernacExtend",
            "690eb91e89d55e765e58a2a9f7cbbb406db52e01"
        ],
        [
            "intros ? ?; apply H2.",
            "VernacExtend",
            "e5e9a4af00ba8dd55eb64951cf878fc04205a704"
        ],
        [
            "etransitivity; eauto.",
            "VernacExtend",
            "9a7a03ac784b775f6203b3104ab84c89b908a8ba"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Semantics.",
            "VernacEndSegment",
            "82a9afba3fa8f88bae2d19f616f1af04fb0fce6d"
        ],
        [
            "Module SemanticsMono.",
            "VernacDefineModule",
            "915a9f6c3715549e687954d190b49cfb7621f0f6"
        ],
        [
            "Program Definition impp {worlds: Type} {R: Relation worlds} {po_R: PreOrder Krelation} (X Y: MonoEnsemble worlds): MonoEnsemble worlds := Semantics.impp X Y.",
            "VernacDefinition",
            "bb8e1f611f9325fc778ee47b2b4aeeb8e037154b"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "apply (@Semantics.impp_closed worlds R po_R); apply (proj2_sig _).",
            "VernacExtend",
            "e10088b82f95a4910c40af53fcc8fb83235c9add"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End SemanticsMono.",
            "VernacEndSegment",
            "9bd6683a50e6800427d5d7fa983449297b55bd99"
        ],
        [
            "Class KripkeMinimunSemantics (L: Language) {minL: MinimunLanguage L} (MD: Model) {kMD: KripkeModel MD} (M: Kmodel) {R: Relation (Kworlds M)} (SM: Semantics L MD) : Type := { denote_impp: forall x y, Same_set _ (Kdenotation M (x --> y)) (Semantics.impp (Kdenotation M x) (Kdenotation M y)) }.",
            "VernacInductive",
            "7d83a4315c10311d7ef06de47ce284b0d958c53a"
        ],
        [
            "Lemma sat_impp {L: Language} {minL: MinimunLanguage L} {MD: Model} {kMD: KripkeModel MD} {M: Kmodel} {R: Relation (Kworlds M)} {SM: Semantics L MD} {kminSM: KripkeMinimunSemantics L MD M SM}: forall m x y, KRIPKE: M , m |= x --> y <-> (forall n, m <= n -> KRIPKE: M , n |= x -> KRIPKE: M , n |= y).",
            "VernacStartTheoremProof",
            "c3718b74a371ba1626fa798a32c3b15b4b744196"
        ],
        [
            "intros; simpl.",
            "VernacExtend",
            "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
        ],
        [
            "unfold satisfies.",
            "VernacExtend",
            "cce376b046315f4cfb04db6ccdf5cf21af01be21"
        ],
        [
            "destruct (denote_impp x y).",
            "VernacExtend",
            "d263aeb5801ae751d7a001723d1ab73604a5bc6a"
        ],
        [
            "split; [apply H | apply H0].",
            "VernacExtend",
            "c2fed9f3759800326dbd68a460f0c95510f4be5d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "impp_closed",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "hnf in H2 |- *.",
                        "VernacExtend",
                        "690eb91e89d55e765e58a2a9f7cbbb406db52e01"
                    ]
                },
                {
                    "command": [
                        "intros ? ?; apply H2.",
                        "VernacExtend",
                        "e5e9a4af00ba8dd55eb64951cf878fc04205a704"
                    ]
                },
                {
                    "command": [
                        "etransitivity; eauto.",
                        "VernacExtend",
                        "9a7a03ac784b775f6203b3104ab84c89b908a8ba"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "impp_obligation_1",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "apply (@Semantics.impp_closed worlds R po_R); apply (proj2_sig _).",
                        "VernacExtend",
                        "e10088b82f95a4910c40af53fcc8fb83235c9add"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "sat_impp",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intros; simpl.",
                        "VernacExtend",
                        "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
                    ]
                },
                {
                    "command": [
                        "unfold satisfies.",
                        "VernacExtend",
                        "cce376b046315f4cfb04db6ccdf5cf21af01be21"
                    ]
                },
                {
                    "command": [
                        "destruct (denote_impp x y).",
                        "VernacExtend",
                        "d263aeb5801ae751d7a001723d1ab73604a5bc6a"
                    ]
                },
                {
                    "command": [
                        "split; [apply H | apply H0].",
                        "VernacExtend",
                        "c2fed9f3759800326dbd68a460f0c95510f4be5d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}