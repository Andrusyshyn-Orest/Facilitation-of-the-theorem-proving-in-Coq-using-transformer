{
    "filename": "MinimunLogic/Semantics/Trivial.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.MinimunLogic.Syntax.",
            "VernacRequire",
            "1fe3f501db6a35e0c279335c26da5e64e6b0b57b"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Module Semantics.",
            "VernacDefineModule",
            "ca7dd7f60a702b03f71e83be6721faf11d931178"
        ],
        [
            "Definition impp {model: Type} (X: Ensemble model) (Y: Ensemble model): Ensemble model := fun m => X m -> Y m.",
            "VernacDefinition",
            "e502cfde0d6845a40febe9bd03df135430ae11e2"
        ],
        [
            "End Semantics.",
            "VernacEndSegment",
            "82a9afba3fa8f88bae2d19f616f1af04fb0fce6d"
        ],
        [
            "Class TrivialMinimunSemantics (L: Language) {minL: MinimunLanguage L} (MD: Model) (SM: Semantics L MD): Type := { denote_impp: forall x y, Same_set _ (denotation (x --> y)) (Semantics.impp (denotation x) (denotation y)) }.",
            "VernacInductive",
            "4088400996933b6f5c3d66d524f8d2c55b1fa0a1"
        ],
        [
            "Lemma sat_impp {L: Language} {minL: MinimunLanguage L} {MD: Model} {SM: Semantics L MD} {tminSM: TrivialMinimunSemantics L MD SM}: forall m x y, m |= x --> y <-> (m |= x -> m |= y).",
            "VernacStartTheoremProof",
            "c58e13b72a18d0ed3af08efd77551c4f16a3b28f"
        ],
        [
            "intros; simpl.",
            "VernacExtend",
            "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
        ],
        [
            "unfold satisfies.",
            "VernacExtend",
            "cce376b046315f4cfb04db6ccdf5cf21af01be21"
        ],
        [
            "destruct (denote_impp x y).",
            "VernacExtend",
            "d263aeb5801ae751d7a001723d1ab73604a5bc6a"
        ],
        [
            "split; auto; [apply H | apply H0].",
            "VernacExtend",
            "c0d8f2cb148f2462b21c0b28eddaaf3a26b94e6a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "sat_impp",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros; simpl.",
                        "VernacExtend",
                        "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
                    ]
                },
                {
                    "command": [
                        "unfold satisfies.",
                        "VernacExtend",
                        "cce376b046315f4cfb04db6ccdf5cf21af01be21"
                    ]
                },
                {
                    "command": [
                        "destruct (denote_impp x y).",
                        "VernacExtend",
                        "d263aeb5801ae751d7a001723d1ab73604a5bc6a"
                    ]
                },
                {
                    "command": [
                        "split; auto; [apply H | apply H0].",
                        "VernacExtend",
                        "c0d8f2cb148f2462b21c0b28eddaaf3a26b94e6a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}