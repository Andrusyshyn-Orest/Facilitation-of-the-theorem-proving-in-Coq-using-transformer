{
    "filename": "HoareLogic/ProgramState.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Coq.Relations.Relation_Operators.",
            "VernacRequire",
            "c8404747ba52b23d300cf51ff3bc522c19733ecb"
        ],
        [
            "Require Import Logic.GeneralLogic.KripkeModel.",
            "VernacRequire",
            "6b79568e5e653c27c6a8e7063552aa2142ab9f3f"
        ],
        [
            "Require Import Logic.SeparationLogic.Model.SeparationAlgebra.",
            "VernacRequire",
            "fff7e35feb20a10cad353e63f1dbfcd95597c6ca"
        ],
        [
            "Local Open Scope kripke_model.",
            "VernacOpenCloseScope",
            "e49ee31afd7da8031602e71d800a363615169ff7"
        ],
        [
            "Import KripkeModelNotation_Intuitionistic.",
            "VernacImport",
            "d7b7fe443374144a34554b0fe36caedd27cfce5b"
        ],
        [
            "Inductive MetaState (state: Type): Type := | Error: MetaState state | NonTerminating: MetaState state | Terminating: state -> MetaState state.",
            "VernacInductive",
            "2a3a62ad53fe5adb800e51c734f043495964e6d1"
        ],
        [
            "Arguments Error {_}.",
            "VernacArguments",
            "e5c53826fa6407cd9991a171e6a80a9cd76a18f1"
        ],
        [
            "Arguments NonTerminating {_}.",
            "VernacArguments",
            "f280156ef02189745862d7c4f89d7df4a76cd571"
        ],
        [
            "Arguments Terminating {_} _.",
            "VernacArguments",
            "3d4a0aa821498ce6da3ed306d1a7973993b33da9"
        ],
        [
            "Module Type FORWARD.",
            "VernacDeclareModuleType",
            "ac295077b815b59a02aa70395671d7e56fe56a0e"
        ],
        [
            "Parameter forward: forall {state: Type} {state_R: Relation state}, MetaState state -> MetaState state -> Prop.",
            "VernacAssumption",
            "154b7277f30bd7e6005cb88fd4e8aa0f78be93b1"
        ],
        [
            "End FORWARD.",
            "VernacEndSegment",
            "6b0e6ec3a9945703ff3da278d1ad68d3153cee0a"
        ],
        [
            "Module Partial <: FORWARD.",
            "VernacDefineModule",
            "dbae1906fae6c685c766e7c25f43674e1fce0871"
        ],
        [
            "Inductive forward' {state: Type} {state_R: Relation state}: MetaState state -> MetaState state -> Prop := | forward_Error: forward' Error Error | forward_NonTerminating: forward' NonTerminating NonTerminating | forward_Terminating_NonTerminating: forall x, forward' (Terminating x) NonTerminating | forward_Terminating: forall x y, x <= y -> forward' (Terminating x) (Terminating y).",
            "VernacInductive",
            "66b03744bd7e36361439747f2ea0e8b4c8f35724"
        ],
        [
            "Definition forward {state: Type} {state_R: Relation state} := forward'.",
            "VernacDefinition",
            "97adae6f99f841036c44529475d1caeaa02dec4e"
        ],
        [
            "End Partial.",
            "VernacEndSegment",
            "764fafee2d1ad7e5b7bf743697700ccf27b6aa2a"
        ],
        [
            "Module Total <: FORWARD.",
            "VernacDefineModule",
            "948e6e06da6dbd340543266d2ec5e128b58fc0af"
        ],
        [
            "Inductive forward' {state: Type} {state_R: Relation state}: MetaState state -> MetaState state -> Prop := | forward_Error: forward' Error Error | forward_NonTerminating: forward' NonTerminating NonTerminating | forward_Terminating: forall x y, x <= y -> forward' (Terminating x) (Terminating y).",
            "VernacInductive",
            "53072e0c75312ae478ce07bc4f0ed962285209cc"
        ],
        [
            "Definition forward {state: Type} {state_R: Relation state} := forward'.",
            "VernacDefinition",
            "97adae6f99f841036c44529475d1caeaa02dec4e"
        ],
        [
            "End Total.",
            "VernacEndSegment",
            "0fbd9dd894b4bf874dc40992703dc64003d921ee"
        ],
        [
            "Lemma Total2Partial_forward {state: Type} {state_R: Relation state}: forall ms1 ms2, Total.forward ms1 ms2 -> Partial.forward ms1 ms2.",
            "VernacStartTheoremProof",
            "3cd11878940e0488e83247abcacdb05e22a19b3f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion H; constructor; auto.",
            "VernacExtend",
            "e88569ef8d09a1ef3f0dbdbf29c059c6f3d62993"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive lift_relation {state: Type} (R: state -> MetaState state -> Prop): MetaState state-> MetaState state -> Prop := | lift_relation_Error: lift_relation R Error Error | lift_relation_NonTerminating: lift_relation R NonTerminating NonTerminating | lift_relation_Terminating: forall s ms, R s ms -> lift_relation R (Terminating s) ms.",
            "VernacInductive",
            "e5ab6065de5e5bf1b59c320a0a2463280c1b0b4a"
        ],
        [
            "Definition lift_Krelation {state: Type} {state_R: Relation state}: MetaState state -> MetaState state -> Prop := Total.forward.",
            "VernacDefinition",
            "9b979bfe58c6a8608a93149b2bd8b425f7ee47f9"
        ],
        [
            "Inductive lift_join {state: Type} {J_state: Join state}: MetaState state -> MetaState state -> MetaState state -> Prop := | lift_join_Error1: forall mx my, lift_join Error mx my | lift_join_Error2: forall mx my, lift_join mx Error my | lift_join_NonTerminating1: forall x, lift_join NonTerminating (Terminating x) NonTerminating | lift_join_NonTerminating2: forall x, lift_join (Terminating x) NonTerminating NonTerminating | lift_join_NonTerminating3: lift_join NonTerminating NonTerminating NonTerminating | lift_join_Terminating: forall x y z, join x y z -> lift_join (Terminating x) (Terminating y) (Terminating z).",
            "VernacInductive",
            "ee5e2243b73fcecc8679a078685727097f702dca"
        ],
        [
            "Inductive strong_lift_join {state: Type} {J_state: Join state}: MetaState state -> MetaState state -> MetaState state -> Prop := | strong_lift_join_Error1: forall mx, strong_lift_join Error mx Error | strong_lift_join_Error2: forall mx, strong_lift_join mx Error Error | strong_lift_join_NonTerminating1: forall x, strong_lift_join NonTerminating (Terminating x) NonTerminating | strong_lift_join_NonTerminating2: forall x, strong_lift_join (Terminating x) NonTerminating NonTerminating | strong_lift_join_NonTerminating3: strong_lift_join NonTerminating NonTerminating NonTerminating | strong_lift_join_Terminating: forall x y z, join x y z -> strong_lift_join (Terminating x) (Terminating y) (Terminating z).",
            "VernacInductive",
            "425247be41b0b54ae7c70874f68ccf5485ec024f"
        ],
        [
            "Definition lift_function {A B: Type} (f: A -> B): MetaState A -> MetaState B := fun ma => match ma with | NonTerminating => NonTerminating | Error => Error | Terminating a => Terminating (f a) end.",
            "VernacDefinition",
            "ace445caddf56dcec0ef136e7928e5a7056078a5"
        ],
        [
            "Lemma lift_relation_forward {state: Type} (R: state -> MetaState state -> Prop): forall x y, lift_relation R x y -> match x with | Error => y = Error | NonTerminating => y = NonTerminating | _ => True end.",
            "VernacStartTheoremProof",
            "a2b8a08ceaf18d0d6562ff6d3fdac2bdbafdb36f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct x, y; inversion H; subst; try congruence; auto.",
            "VernacExtend",
            "72b8796d0d9a1e0f5ec2c5b8251621bd99201a85"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma clos_refl_trans_lift_relation_forward {state: Type} (R: state -> MetaState state -> Prop): forall x y, clos_refl_trans _ (lift_relation R) x y -> match x with | Error => y = Error | NonTerminating => y = NonTerminating | _ => True end.",
            "VernacStartTheoremProof",
            "1a11c6322db34cb1c7db1d44037c8a271fc2514e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction H.",
            "VernacExtend",
            "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply lift_relation_forward in H; auto.",
            "VernacExtend",
            "e2bfc5754a029b06cc62a9c2d8de6ed8def6d594"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct x; auto.",
            "VernacExtend",
            "e693b97b98b28f6f305ce1b2e3d77ebaa690911c"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct x; subst; simpl; subst; auto.",
            "VernacExtend",
            "553638d9aabb2e11f72850050e7cb96897c0e36e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lift_function_rev {A B: Type} (f: A -> B): forall ma mb, lift_function f ma = mb -> match mb with | NonTerminating => ma = NonTerminating | Error => ma = Error | _ => True end.",
            "VernacStartTheoremProof",
            "e9e1451f6933f23f221e691a3f9c60a50723b067"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct mb, ma; auto; simpl in *; congruence.",
            "VernacExtend",
            "b9580607de55a37e7f53076f0976085cc35442ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Total2Partial_forward",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inversion H; constructor; auto.",
                        "VernacExtend",
                        "e88569ef8d09a1ef3f0dbdbf29c059c6f3d62993"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_relation_forward",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct x, y; inversion H; subst; try congruence; auto.",
                        "VernacExtend",
                        "72b8796d0d9a1e0f5ec2c5b8251621bd99201a85"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "clos_refl_trans_lift_relation_forward",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction H.",
                        "VernacExtend",
                        "f8e74d6b42ecd6b509e6a20cee53bb69d051cd07"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "apply lift_relation_forward in H; auto.",
                        "VernacExtend",
                        "e2bfc5754a029b06cc62a9c2d8de6ed8def6d594"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct x; auto.",
                        "VernacExtend",
                        "e693b97b98b28f6f305ce1b2e3d77ebaa690911c"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct x; subst; simpl; subst; auto.",
                        "VernacExtend",
                        "553638d9aabb2e11f72850050e7cb96897c0e36e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_function_rev",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct mb, ma; auto; simpl in *; congruence.",
                        "VernacExtend",
                        "b9580607de55a37e7f53076f0976085cc35442ee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}