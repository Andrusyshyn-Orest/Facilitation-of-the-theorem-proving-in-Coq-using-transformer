{
    "filename": "HoareLogic/Sound_Resource_Angelic.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.GeneralLogic.Semantics.Kripke.",
            "VernacRequire",
            "4f0a29ef213cb173f58f6b351c743bcacb5b71e5"
        ],
        [
            "Require Import Logic.GeneralLogic.KripkeModel.",
            "VernacRequire",
            "6b79568e5e653c27c6a8e7063552aa2142ab9f3f"
        ],
        [
            "Require Import Logic.MinimunLogic.Syntax.",
            "VernacRequire",
            "1fe3f501db6a35e0c279335c26da5e64e6b0b57b"
        ],
        [
            "Require Import Logic.MinimunLogic.Semantics.Kripke.",
            "VernacRequire",
            "4fcfcd4fde2d735d73bfaf30e9c1caf49711101e"
        ],
        [
            "Require Import Logic.PropositionalLogic.Syntax.",
            "VernacRequire",
            "441acd893a589161321f487f85bee0d46b168a77"
        ],
        [
            "Require Import Logic.PropositionalLogic.Semantics.Kripke.",
            "VernacRequire",
            "ca0341362accf77b79eee54fec205c480dd1c1bd"
        ],
        [
            "Require Import Logic.SeparationLogic.Syntax.",
            "VernacRequire",
            "06f045a49fc8f11e28ecdce8309ad8f23a886843"
        ],
        [
            "Require Import Logic.SeparationLogic.Model.SeparationAlgebra.",
            "VernacRequire",
            "fff7e35feb20a10cad353e63f1dbfcd95597c6ca"
        ],
        [
            "Require Import Logic.SeparationLogic.Semantics.FlatSemantics.",
            "VernacRequire",
            "69768f578aadcd59e2c7fb6542147eba2f337739"
        ],
        [
            "Require Import Logic.SeparationLogic.Semantics.SemanticsExtension.",
            "VernacRequire",
            "92a938755fad60b4749b4c22b57cdf31ea60bbe0"
        ],
        [
            "Require Import Logic.HoareLogic.ImperativeLanguage.",
            "VernacRequire",
            "2567be926c29a7ce602472584cdfade122076b4b"
        ],
        [
            "Require Import Logic.HoareLogic.ProgramState.",
            "VernacRequire",
            "8ffd4c3c26f3e73876d08ebc90fecae1cd31852b"
        ],
        [
            "Require Import Logic.HoareLogic.BigStepSemantics.",
            "VernacRequire",
            "2f83358d20f8a1efe33058422dcfe9041af7b10b"
        ],
        [
            "Require Import Logic.HoareLogic.ConcurrentSemantics_Angelic.",
            "VernacRequire",
            "a239223c60ffab0e64b465c1bcf9200fc3a33b17"
        ],
        [
            "Require Import Logic.HoareLogic.HoareTriple_BigStepSemantics.",
            "VernacRequire",
            "c37fca302d68f9cc5f54fad8f1df4b7c4aa5862a"
        ],
        [
            "Require Import Logic.HoareLogic.GuardedHoareTriple_Angelic.",
            "VernacRequire",
            "aead3a10cb478fe8c2c4e0ac7612d328af1cc898"
        ],
        [
            "Definition Inv_free {resource state: Type} (r: resource) (Inv: list (resource * (state -> Prop))): Prop := fold_right or True (map (fun ri => fst ri = r) Inv).",
            "VernacDefinition",
            "cc8ad21cc28dcfe04122c80bcf3b28e7528bfb77"
        ],
        [
            "Inductive Inv_cons {resource state: Type} (r: resource) (I: state -> Prop): list (resource * (state -> Prop)) -> list (resource * (state -> Prop)) -> Prop := | Inv_cons_spec: forall Inv1 Inv2, Inv_free r Inv1 -> Inv_free r Inv2 -> Inv_cons r I (Inv1 ++ Inv2) (Inv1 ++ (r, I) :: Inv2).",
            "VernacInductive",
            "50002e8d50cde32c841296ffe23b717a614d9d05"
        ],
        [
            "Record split_hint {state: Type} {J: Join state} (s: state) : Type := { split_piece1: state; split_piece2: state; split_sound: join split_piece1 split_piece2 s }.",
            "VernacInductive",
            "e6e3981ff2701c49125e6c0594044d790754a49b"
        ],
        [
            "Module Resource_BigStepSemantics (D: FORWARD).",
            "VernacDefineModule",
            "870a350869b7c7ea31adba9a84602d3e4ff6ef83"
        ],
        [
            "Export D.",
            "VernacImport",
            "5472c8bad39f86e0e558483eab625c224a384fb8"
        ],
        [
            "Class Resource_BigStepSemantics (P: ProgrammingLanguage) {Res: Resource} {CPP: ConcurrentProgrammingLanguage_Sparallel P} {CPR: ConcurrentProgrammingLanguage_Sresource P Res} (state: Type) {J: Join state} {R: Relation state} {po_R: PreOrder Krelation} (TLBSS: ThreadLocalBigStepSemantics P state (list (resource * (state -> Prop)))): Type := { hint_Sparallel: forall Inv c1 c2, (forall (s: state), split_hint s -> Prop) -> hint Inv c1 -> hint Inv c2 -> hint Inv (Sparallel c1 c2); hint_Sresource: forall Inv Inv' I r c, Inv_cons r I Inv Inv' -> hint Inv c -> hint Inv' (Sresource r c); access_Sparallel: forall Inv c1 c2 hs h1 h2 (m: state) (n: MetaState state), tl_access Inv m (existT _ _ (hint_Sparallel Inv c1 c2 hs h1 h2)) n -> exists (m1 m2: state) H (n1' n2' n1 n2: MetaState state), hs m (Build_split_hint _ _ m m1 m2 H) /\\ tl_access Inv m1 (existT _ c1 h1) n1' /\\ tl_access Inv m2 (existT _ c2 h2) n2' /\\ forward n1' n1 /\\ forward n2' n2 /\\ strong_lift_join n1 n2 n; access_Sresource: forall (I: state -> Prop) Inv Inv' (r: resource) c (h: hint Inv c) m n (H_Inv: Inv_cons r I Inv Inv'), tl_access Inv' m (existT _ _ (hint_Sresource _ _ _ _ _ H_Inv h)) n -> exists m_acq m' n1 n2 n3, join m_acq m m' /\\ forward (Terminating m') n1 /\\ lift_tl_access Inv n1 (existT _ c h) n2 /\\ forward n2 n3 /\\ match n3, n with | Terminating nn3, Terminating nn => greatest_cut nn3 I nn | NonTerminating, NonTerminating => True | Error, Error => True | _, _ => False end /\\ I m_acq }.",
            "VernacInductive",
            "1e40825e33dd51a4b5dd94edf52d4a3ee10ef789"
        ],
        [
            "End Resource_BigStepSemantics.",
            "VernacEndSegment",
            "9d05b8d75fc94f95a024bfe65dbdd8a869974f34"
        ],
        [
            "Module Partial := Resource_BigStepSemantics (ProgramState.Partial).",
            "VernacDefineModule",
            "e7a8740fe9bbb4d9ff9879a91e6e8e193f31342b"
        ],
        [
            "Module Total := Resource_BigStepSemantics (ProgramState.Total).",
            "VernacDefineModule",
            "b575b65ed38015cb791fa5af478efd32264ab3fb"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Local Open Scope kripke_model.",
            "VernacOpenCloseScope",
            "e49ee31afd7da8031602e71d800a363615169ff7"
        ],
        [
            "Import PropositionalLanguageNotation.",
            "VernacImport",
            "69bfca1fca0e417f262dd3cc9ce6113dc17ba916"
        ],
        [
            "Import SeparationLogicNotation.",
            "VernacImport",
            "ef77ed65f39901a78bbb8e7daa1c2fee20e46d4e"
        ],
        [
            "Import KripkeModelSingleNotation.",
            "VernacImport",
            "ebf1707f5c45350c2b7920cae26c0e9eff792903"
        ],
        [
            "Import KripkeModelNotation_Intuitionistic.",
            "VernacImport",
            "d7b7fe443374144a34554b0fe36caedd27cfce5b"
        ],
        [
            "Section soundness.",
            "VernacBeginSection",
            "c06a4280b2216adf6fa777ca98d077bbe4ba610f"
        ],
        [
            "Definition sem_precise {L: Language} {MD: Model} {J: Join model} {R: Relation model} {po_R: PreOrder Krelation} {SM: Semantics L MD} (x: expr): Prop := Kdenote_precise (fun m => KRIPKE: m |= x).",
            "VernacDefinition",
            "37a028c182614bccd39af48b2afcf87b933b1b4a"
        ],
        [
            "Lemma sem_precise_spec {L: Language} {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {SL: SeparationLanguage L} {MD: Model} {J: Join model} {R: Relation model} {po_R: PreOrder Krelation} {SM: Semantics L MD} {kiSM: KripkeIntuitionisticSemantics L MD (tt: @Kmodel MD (unit_kMD _)) SM} {fsSM: FlatSemantics.SeparatingSemantics L MD (tt: @Kmodel MD (unit_kMD _)) SM}: forall m n P Q, sem_precise P -> greatest_cut m (fun m => KRIPKE: m |= P) n -> KRIPKE: m |= P * Q -> KRIPKE: n |= Q.",
            "VernacStartTheoremProof",
            "0b12e859e1303188d322d06077732f87202cddbe"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite FlatSemantics.sat_sepcon in H1.",
            "VernacExtend",
            "106c1012370e96e28ed31de0bbc8d2761c470213"
        ],
        [
            "destruct H1 as [m1 [m2 [? [? ?]]]].",
            "VernacExtend",
            "6b434c73a2d2fe276e8681c4013a87851abc672b"
        ],
        [
            "destruct H0 as [? ?].",
            "VernacExtend",
            "0f697508c155a692f324e9ae2fc37c0385689df4"
        ],
        [
            "destruct H0 as [mf [? ?]].",
            "VernacExtend",
            "4a9fae1336bea22ebcb0d3c41d47f2e82c145f38"
        ],
        [
            "specialize (H4 m2).",
            "VernacExtend",
            "3578815ed622abc5e0e07801b714167f6730a8d7"
        ],
        [
            "eapply sat_mono; [| eassumption].",
            "VernacExtend",
            "3122dbe97ff71153303e2a87d2593edf0ada6ac4"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "exists m1; split; auto.",
            "VernacExtend",
            "ff0e28d38c648efc95e722466e32ba909c47a390"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Import Partial.",
            "VernacImport",
            "1c7c13ad3042fc157f3d6eca956b537f8e92a43f"
        ],
        [
            "Context {P: ProgrammingLanguage} {Res: Resource} {CPP: ConcurrentProgrammingLanguage_Sparallel P} {CPR: ConcurrentProgrammingLanguage_Sresource P Res} {MD: Model} {TLBSS: ThreadLocalBigStepSemantics P model (list (resource * (model -> Prop)))} {J: Join model} {R: Relation model} {po_R: PreOrder Krelation} {R_BSS: Resource_BigStepSemantics P model TLBSS}.",
            "VernacContext",
            "5213cb3cb80099b6bb341636b18392bd004f8447"
        ],
        [
            "Context {L: Language} {minL: MinimunLanguage L} {pL: PropositionalLanguage L} {SL: SeparationLanguage L} {SM: Semantics L MD} {kiSM: KripkeIntuitionisticSemantics L MD (tt: @Kmodel MD (unit_kMD _)) SM} {fsSM: FlatSemantics.SeparatingSemantics L MD (tt: @Kmodel MD (unit_kMD _)) SM}.",
            "VernacContext",
            "8cd137e26633c2b51726efffb74c4bf518f6fb25"
        ],
        [
            "Lemma hoare_resource_partial_sound: forall (r: resource) (I: expr) (Inv Inv': list (resource * (model -> Prop))) c P Q, guarded_triple_partial_valid Inv (I * P) c (I * Q) -> Inv_cons r (fun s: model => s |= I) Inv Inv' -> sem_precise I -> guarded_triple_partial_valid Inv' P (Sresource r c) Q.",
            "VernacStartTheoremProof",
            "d52ccf4dd07bb5889be5f6bb8263dd847f31ee7c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold guarded_triple_partial_valid, triple_partial_valid in *.",
            "VernacExtend",
            "f0fc90de76dfed42bd94abf615569a8043ac3192"
        ],
        [
            "destruct H as [h ?].",
            "VernacExtend",
            "cc8f7073ed1caa1ded17048bb65ba34decf48edb"
        ],
        [
            "exists (hint_Sresource _ _ _ _ _ H0 h).",
            "VernacExtend",
            "88888d91907897c84195e6b598610a4604e0d85c"
        ],
        [
            "intros s ms ? ?.",
            "VernacExtend",
            "0631bf70a26f281c5ad72c6c6ce6a0bdb70c10de"
        ],
        [
            "apply (access_Sresource (fun m => KRIPKE: m |= I) Inv) in H3; auto.",
            "VernacExtend",
            "a58d9c4d1c721556908a854a8778151806068a96"
        ],
        [
            "destruct H3 as [m_acq [m' [n1 [n2 [n3 [? [? [? [? [? ?]]]]]]]]]].",
            "VernacExtend",
            "c82acf4ac4c3d424fa31af4ed18711f869b35135"
        ],
        [
            "assert (KRIPKE: m' |= I * P0).",
            "VernacExtend",
            "60dbd413a37d18158c1d9913c8cae2e498ca9fa6"
        ],
        [
            "Focus 1.",
            "VernacFocus",
            "2e70fb9f135d16f7a4a2728604ca85344cf984cd"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "rewrite FlatSemantics.sat_sepcon.",
            "VernacExtend",
            "ff9e4eb42a84f666ad30e2dd0a2b7dda7360f3c2"
        ],
        [
            "eexists; eexists.",
            "VernacExtend",
            "7def14ebb2bc7c7e216ef67db047e3c009396e36"
        ],
        [
            "split; [| split]; eassumption.",
            "VernacExtend",
            "5a6bf4857d8be20d5a59bdfe10c8b88527835495"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "Unfocus.",
            "VernacUnfocus",
            "bedcc8cdbc0e659ad45d78624bfea9462efb82d1"
        ],
        [
            "destruct n1 as [| |].",
            "VernacExtend",
            "faf4c4c4138763895cc8269d792830b57af1c8c4"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "inversion H4.",
            "VernacExtend",
            "184e412874313f14014d688ef3b69568302d00ff"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "inversion H5; subst.",
            "VernacExtend",
            "cc8de5115dd254171f0c6ae8d0753a2f561087f5"
        ],
        [
            "inversion H6; subst.",
            "VernacExtend",
            "4ecd5ab1ba421538ab57ac2b2f74cb44d44ef279"
        ],
        [
            "destruct ms; tauto.",
            "VernacExtend",
            "127730f9403e488a86ad1dc5f651b8a80373f75c"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "inversion H4; subst.",
            "VernacExtend",
            "92ad52d95af4dae86dd1521283469fe7dcf249ec"
        ],
        [
            "eapply sat_mono in H9; [| eassumption].",
            "VernacExtend",
            "1d8d25950845f77b80c2d902400882360d4d632d"
        ],
        [
            "inversion H5; subst.",
            "VernacExtend",
            "cc8de5115dd254171f0c6ae8d0753a2f561087f5"
        ],
        [
            "specialize (H _ _ H9 H11).",
            "VernacExtend",
            "87c91b1379a88c075d8d52bb8132ea7486f98916"
        ],
        [
            "destruct n2.",
            "VernacExtend",
            "cb9c60451c453544c94bf5208e8ca5002d52d715"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "inversion H6; subst.",
            "VernacExtend",
            "4ecd5ab1ba421538ab57ac2b2f74cb44d44ef279"
        ],
        [
            "destruct ms; tauto.",
            "VernacExtend",
            "127730f9403e488a86ad1dc5f651b8a80373f75c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "inversion H6; subst.",
            "VernacExtend",
            "4ecd5ab1ba421538ab57ac2b2f74cb44d44ef279"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "destruct ms; tauto.",
            "VernacExtend",
            "127730f9403e488a86ad1dc5f651b8a80373f75c"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "destruct ms; auto.",
            "VernacExtend",
            "6245083e4f638c0d2a118086f6872248afb8838c"
        ],
        [
            "eapply sat_mono in H; [| eassumption].",
            "VernacExtend",
            "fdf93e463eae84d1cb00179edd71328747fa401f"
        ],
        [
            "pose proof sem_precise_spec _ _ _ _ H1 H7 H; auto.",
            "VernacExtend",
            "38faa91e2f03f5c2a5ab88231ba3b46183b9e2c4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma hoare_parallel_partial_sound: forall (Inv: list (resource * (model -> Prop))) c1 c2 P1 P2 Q1 Q2, guarded_triple_partial_valid Inv P1 c1 Q1 -> guarded_triple_partial_valid Inv P2 c2 Q2 -> guarded_triple_partial_valid Inv (P1 * P2) (Sparallel c1 c2) (Q1 * Q2).",
            "VernacStartTheoremProof",
            "0b05cf9be1324102424e5e6b8b4cb60a417592e9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold guarded_triple_partial_valid, triple_partial_valid in *.",
            "VernacExtend",
            "f0fc90de76dfed42bd94abf615569a8043ac3192"
        ],
        [
            "destruct H as [h1 ?], H0 as [h2 ?].",
            "VernacExtend",
            "05e6452a9f3d2fa0c0d0c8ed443abc7f70a09ecd"
        ],
        [
            "exists (hint_Sparallel Inv c1 c2 (fun m sh => KRIPKE: (split_piece1 _ sh) |= P1 /\\ KRIPKE: (split_piece2 _ sh) |= P2) h1 h2).",
            "VernacExtend",
            "7e6bc50763d5e0ad674f5209ee298ca356fe1f77"
        ],
        [
            "intros s ms ? ?.",
            "VernacExtend",
            "0631bf70a26f281c5ad72c6c6ce6a0bdb70c10de"
        ],
        [
            "apply access_Sparallel in H2.",
            "VernacExtend",
            "b96fb7122447b36bf44213fe87b5b533a78fced7"
        ],
        [
            "destruct H2 as [s1 [s2 [? [ms1 [ms2 [ms1' [ms2' [? [? [? [? [? ?]]]]]]]]]]]].",
            "VernacExtend",
            "06c1ba131b510afa710c9a9e496cb4b697e09f36"
        ],
        [
            "destruct H2 as [H21 H22]; simpl in H21, H22.",
            "VernacExtend",
            "851b6f2046b7a602c3d666468014c21b13ee7f16"
        ],
        [
            "specialize (H _ _ H21 H3).",
            "VernacExtend",
            "5f289dece0c78e1b723a5b1bc85c1e12ca3981c9"
        ],
        [
            "specialize (H0 _ _ H22 H4).",
            "VernacExtend",
            "698213e980a6ed18965cb48c865cdc932eee4739"
        ],
        [
            "destruct ms1, ms2; try solve [tauto | inversion H5; inversion H6; inversion H7; subst; congruence].",
            "VernacExtend",
            "0f48a12b3febe4fd57be7c4ec705bc0c0f4c60d5"
        ],
        [
            "destruct ms1', ms2'; inversion H5; inversion H6; inversion H7; subst; auto.",
            "VernacExtend",
            "ebc2f334e447aca9682bf79ae9eaa04d0715aaea"
        ],
        [
            "rewrite FlatSemantics.sat_sepcon; exists m1, m2; split; [| split]; auto.",
            "VernacExtend",
            "8145d4adf83dcf58610998590c51e9ac23d8876e"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "eapply sat_mono; eauto.",
            "VernacExtend",
            "83063df13b2c52833e65b8b13ac6b06a3a4f35c2"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "eapply sat_mono; eauto.",
            "VernacExtend",
            "83063df13b2c52833e65b8b13ac6b06a3a4f35c2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End soundness.",
            "VernacEndSegment",
            "04011f071a777fce303ecc49ebc908aeec5ba44b"
        ]
    ],
    "proofs": [
        {
            "name": "sem_precise_spec",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite FlatSemantics.sat_sepcon in H1.",
                        "VernacExtend",
                        "106c1012370e96e28ed31de0bbc8d2761c470213"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [m1 [m2 [? [? ?]]]].",
                        "VernacExtend",
                        "6b434c73a2d2fe276e8681c4013a87851abc672b"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [? ?].",
                        "VernacExtend",
                        "0f697508c155a692f324e9ae2fc37c0385689df4"
                    ]
                },
                {
                    "command": [
                        "destruct H0 as [mf [? ?]].",
                        "VernacExtend",
                        "4a9fae1336bea22ebcb0d3c41d47f2e82c145f38"
                    ]
                },
                {
                    "command": [
                        "specialize (H4 m2).",
                        "VernacExtend",
                        "3578815ed622abc5e0e07801b714167f6730a8d7"
                    ]
                },
                {
                    "command": [
                        "eapply sat_mono; [| eassumption].",
                        "VernacExtend",
                        "3122dbe97ff71153303e2a87d2593edf0ada6ac4"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "exists m1; split; auto.",
                        "VernacExtend",
                        "ff0e28d38c648efc95e722466e32ba909c47a390"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "hoare_parallel_partial_sound",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold guarded_triple_partial_valid, triple_partial_valid in *.",
                        "VernacExtend",
                        "f0fc90de76dfed42bd94abf615569a8043ac3192"
                    ]
                },
                {
                    "command": [
                        "destruct H as [h1 ?], H0 as [h2 ?].",
                        "VernacExtend",
                        "05e6452a9f3d2fa0c0d0c8ed443abc7f70a09ecd"
                    ]
                },
                {
                    "command": [
                        "exists (hint_Sparallel Inv c1 c2 (fun m sh => KRIPKE: (split_piece1 _ sh) |= P1 /\\ KRIPKE: (split_piece2 _ sh) |= P2) h1 h2).",
                        "VernacExtend",
                        "7e6bc50763d5e0ad674f5209ee298ca356fe1f77"
                    ]
                },
                {
                    "command": [
                        "intros s ms ? ?.",
                        "VernacExtend",
                        "0631bf70a26f281c5ad72c6c6ce6a0bdb70c10de"
                    ]
                },
                {
                    "command": [
                        "apply access_Sparallel in H2.",
                        "VernacExtend",
                        "b96fb7122447b36bf44213fe87b5b533a78fced7"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [s1 [s2 [? [ms1 [ms2 [ms1' [ms2' [? [? [? [? [? ?]]]]]]]]]]]].",
                        "VernacExtend",
                        "06c1ba131b510afa710c9a9e496cb4b697e09f36"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as [H21 H22]; simpl in H21, H22.",
                        "VernacExtend",
                        "851b6f2046b7a602c3d666468014c21b13ee7f16"
                    ]
                },
                {
                    "command": [
                        "specialize (H _ _ H21 H3).",
                        "VernacExtend",
                        "5f289dece0c78e1b723a5b1bc85c1e12ca3981c9"
                    ]
                },
                {
                    "command": [
                        "specialize (H0 _ _ H22 H4).",
                        "VernacExtend",
                        "698213e980a6ed18965cb48c865cdc932eee4739"
                    ]
                },
                {
                    "command": [
                        "destruct ms1, ms2; try solve [tauto | inversion H5; inversion H6; inversion H7; subst; congruence].",
                        "VernacExtend",
                        "0f48a12b3febe4fd57be7c4ec705bc0c0f4c60d5"
                    ]
                },
                {
                    "command": [
                        "destruct ms1', ms2'; inversion H5; inversion H6; inversion H7; subst; auto.",
                        "VernacExtend",
                        "ebc2f334e447aca9682bf79ae9eaa04d0715aaea"
                    ]
                },
                {
                    "command": [
                        "rewrite FlatSemantics.sat_sepcon; exists m1, m2; split; [| split]; auto.",
                        "VernacExtend",
                        "8145d4adf83dcf58610998590c51e9ac23d8876e"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "eapply sat_mono; eauto.",
                        "VernacExtend",
                        "83063df13b2c52833e65b8b13ac6b06a3a4f35c2"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "eapply sat_mono; eauto.",
                        "VernacExtend",
                        "83063df13b2c52833e65b8b13ac6b06a3a4f35c2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}