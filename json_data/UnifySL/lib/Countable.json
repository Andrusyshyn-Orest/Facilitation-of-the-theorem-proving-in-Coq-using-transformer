{
    "filename": "lib/Countable.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Logic.lib.Bijection.",
            "VernacRequire",
            "7bb59803be65e1b0331aebf5a5e54fdb046de426"
        ],
        [
            "Definition Countable (A: Type): Type := injection A nat.",
            "VernacDefinition",
            "a9ac173a40adc6306894707562dd5eb2e6c5de89"
        ],
        [
            "Definition injection_Countable {A B} (R: injection A B) (CB: Countable B): Countable A := injection_trans R CB.",
            "VernacDefinition",
            "ad823fb26d73b04371da2c5e20636f810086eb9f"
        ],
        [
            "Definition bijection_Countable {A B} (R: bijection A B) (CB: Countable B): Countable A := injection_Countable (bijection_injection R) CB.",
            "VernacDefinition",
            "ffec8385370c419cf1ca5500dd3fc384489704b2"
        ],
        [
            "Definition sum_Countable {A B} (CA: Countable A) (CB: Countable B): Countable (sum A B) := injection_trans (sum_injection CA CB) (bijection_injection nat2_nat_bijection).",
            "VernacDefinition",
            "a76f7e2e6a5f10b744a4b12e0095e11f695f3c70"
        ],
        [
            "Definition prod_Countable {A B} (CA: Countable A) (CB: Countable B): Countable (prod A B) := injection_trans (prod_injection CA CB) (bijection_injection natnat_nat_bijection).",
            "VernacDefinition",
            "2d9a52c363c228e55d38cac95a8ddadb5270789e"
        ],
        [
            "Definition nCountable_Countable {A: nat -> Type} (CA: forall n, Countable (A n)): Countable (sigT A) := injection_trans (sigT_injection _ _ _ CA) (bijection_injection natnat_nat_bijection).",
            "VernacDefinition",
            "e8a14906eb3ecb80d21f0407d63aebf1f81e77b5"
        ],
        [
            "Definition unit_Countable: Countable unit.",
            "VernacDefinition",
            "a7a78ced4a836af375a8319360acbe4dbefb15c3"
        ],
        [
            "apply (FBuild_injection _ _ (fun _ => 0)).",
            "VernacExtend",
            "e0b61174a4d9e5bab215e1be41a65ea975dd3769"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "destruct a1, a2; auto.",
            "VernacExtend",
            "5f8e6b777bc1ca0b308c27e7edf2c6890adf4087"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac solve_Countable := match goal with | |- Countable (sum _ _) => apply sum_Countable; solve_Countable | |- Countable (prod _ _) => apply prod_Countable; solve_Countable | |- Countable (sigT _) => try (apply nCountable_Countable; intro; solve_Countable) | |- Countable unit => apply unit_Countable | _ => try assumption end.",
            "VernacExtend",
            "543ae9de67f9282ed5fd4599fb05b82041849f9d"
        ]
    ],
    "proofs": [
        {
            "name": "unit_Countable",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "apply (FBuild_injection _ _ (fun _ => 0)).",
                        "VernacExtend",
                        "e0b61174a4d9e5bab215e1be41a65ea975dd3769"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "destruct a1, a2; auto.",
                        "VernacExtend",
                        "5f8e6b777bc1ca0b308c27e7edf2c6890adf4087"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}