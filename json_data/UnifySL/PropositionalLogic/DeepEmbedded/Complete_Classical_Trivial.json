{
    "filename": "PropositionalLogic/DeepEmbedded/Complete_Classical_Trivial.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Coq.Logic.Classical_Prop.",
            "VernacRequire",
            "9ccd680c17c6039100012bae5c1bef8ed35d228a"
        ],
        [
            "Require Import Logic.lib.Ensembles_ext.",
            "VernacRequire",
            "19fa136320dca316056a1bf8e4a3fb50fe8a2192"
        ],
        [
            "Require Import Logic.lib.Bijection.",
            "VernacRequire",
            "7bb59803be65e1b0331aebf5a5e54fdb046de426"
        ],
        [
            "Require Import Logic.lib.Countable.",
            "VernacRequire",
            "0e6db58557f71a0dcd04cbe972aeb1392ac877d1"
        ],
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.GeneralLogic.KripkeModel.",
            "VernacRequire",
            "6b79568e5e653c27c6a8e7063552aa2142ab9f3f"
        ],
        [
            "Require Import Logic.GeneralLogic.Complete.ContextProperty.",
            "VernacRequire",
            "4c577b10b65f245cd5256f34a21c8cb66986698f"
        ],
        [
            "Require Import Logic.GeneralLogic.Complete.ContextProperty_Kripke.",
            "VernacRequire",
            "01895830dc7a4ab9e5c862740d0b95dfbde3605b"
        ],
        [
            "Require Import Logic.GeneralLogic.Complete.Lindenbaum.",
            "VernacRequire",
            "900d8f4a2c06d421896258623602c7b6b362955c"
        ],
        [
            "Require Import Logic.GeneralLogic.Complete.Lindenbaum_Kripke.",
            "VernacRequire",
            "b0147a13a6f79ca7a33f8e909e855716ce41cc55"
        ],
        [
            "Require Import Logic.MinimunLogic.Syntax.",
            "VernacRequire",
            "1fe3f501db6a35e0c279335c26da5e64e6b0b57b"
        ],
        [
            "Require Import Logic.MinimunLogic.ProofTheory.Minimun.",
            "VernacRequire",
            "7dd3badfb0ea34d33454f0c461fceaac94fde835"
        ],
        [
            "Require Import Logic.MinimunLogic.Complete.ContextProperty_Kripke.",
            "VernacRequire",
            "9198e08651938b4b127c1a31fcf2cef11fad9c9b"
        ],
        [
            "Require Import Logic.MinimunLogic.Complete.Lindenbaum_Kripke.",
            "VernacRequire",
            "02f4dd4e6fa141be6f442d91a352e116d36675c0"
        ],
        [
            "Require Import Logic.PropositionalLogic.Syntax.",
            "VernacRequire",
            "441acd893a589161321f487f85bee0d46b168a77"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.Intuitionistic.",
            "VernacRequire",
            "918be0c1da11c6e84f2fca83e0414062df4a6509"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.DeMorgan.",
            "VernacRequire",
            "979253b4e51bd4c70a2820690cbe8456571aeec4"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.GodelDummett.",
            "VernacRequire",
            "6b75b7bbc32a6656be72ad029a1da066beffebf4"
        ],
        [
            "Require Import Logic.PropositionalLogic.ProofTheory.Classical.",
            "VernacRequire",
            "9db43e6b1f1b9e4d12563fea4db9562a4e6fcb7d"
        ],
        [
            "Require Import Logic.PropositionalLogic.Semantics.Trivial.",
            "VernacRequire",
            "be55cb773882a5f5f14a473460b60e51f9f3e47f"
        ],
        [
            "Require Import Logic.PropositionalLogic.Complete.ContextProperty_Kripke.",
            "VernacRequire",
            "37347c25f3b23188e0cd586c72d9be961cc359ea"
        ],
        [
            "Require Import Logic.PropositionalLogic.Complete.ContextProperty_Trivial.",
            "VernacRequire",
            "bba23b7828694944722e5c3c6298d1b8c2cff253"
        ],
        [
            "Require Import Logic.PropositionalLogic.Complete.Lindenbaum_Kripke.",
            "VernacRequire",
            "5fd67ba4714379ff8d332fa979c88c4763bc45e9"
        ],
        [
            "Require Import Logic.PropositionalLogic.Complete.Lindenbaum_Trivial.",
            "VernacRequire",
            "96b5ee1508b5d20316756e114c63f6d08b2861f4"
        ],
        [
            "Require Import Logic.PropositionalLogic.Complete.Truth_Trivial.",
            "VernacRequire",
            "3451611eb0923c1747ebe8daa885e954a65776ec"
        ],
        [
            "Require Import Logic.PropositionalLogic.Complete.Complete_Trivial.",
            "VernacRequire",
            "26d90477ee62e17fe16684ff4f57b1ff44ae6f56"
        ],
        [
            "Require Logic.PropositionalLogic.DeepEmbedded.PropositionalLanguage.",
            "VernacRequire",
            "354e2e11eab880e8ff1b3892cc98600194f45870"
        ],
        [
            "Require Logic.PropositionalLogic.DeepEmbedded.ProofTheories.",
            "VernacRequire",
            "79b7e857c07a450c782b0c163012b1e6c66bfa1e"
        ],
        [
            "Require Logic.PropositionalLogic.DeepEmbedded.TrivialSemantics.",
            "VernacRequire",
            "f3826653dae77c4c62baec3cbda0e1054cbfe2ec"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Local Open Scope kripke_model.",
            "VernacOpenCloseScope",
            "e49ee31afd7da8031602e71d800a363615169ff7"
        ],
        [
            "Local Open Scope kripke_model_class.",
            "VernacOpenCloseScope",
            "9c8cc313b368a0ea960d699dfc4b131e91c3cc48"
        ],
        [
            "Import PropositionalLanguageNotation.",
            "VernacImport",
            "69bfca1fca0e417f262dd3cc9ce6113dc17ba916"
        ],
        [
            "Import KripkeModelFamilyNotation.",
            "VernacImport",
            "e1b9787d5646dac924687ed660f3c109e8d952dd"
        ],
        [
            "Import KripkeModelNotation_Intuitionistic.",
            "VernacImport",
            "d7b7fe443374144a34554b0fe36caedd27cfce5b"
        ],
        [
            "Import KripkeModelClass.",
            "VernacImport",
            "3755e3315d5fa82755ccb16532d6d9d04e331574"
        ],
        [
            "Section Complete.",
            "VernacBeginSection",
            "618f5c87580d76567cfdf26c065fb4a894be1b95"
        ],
        [
            "Context {Sigma: PropositionalLanguage.PropositionalVariables} {CV: Countable PropositionalLanguage.Var}.",
            "VernacContext",
            "014b524c2154419944c1f337215b07855bebbfed"
        ],
        [
            "Existing Instances PropositionalLanguage.L PropositionalLanguage.minL PropositionalLanguage.pL.",
            "VernacDeclareInstances",
            "a3b962c7807a75565bfcd7ceed638ea90a3809cc"
        ],
        [
            "Existing Instances TrivialSemantics.MD TrivialSemantics.SM TrivialSemantics.tminSM TrivialSemantics.tpSM.",
            "VernacDeclareInstances",
            "c28afa0a6dded0005f91c0764093f386c752b0fd"
        ],
        [
            "Existing Instances ProofTheories.ClassicalPropositionalLogic.G ProofTheories.ClassicalPropositionalLogic.AX ProofTheories.ClassicalPropositionalLogic.minAX ProofTheories.ClassicalPropositionalLogic.ipG ProofTheories.ClassicalPropositionalLogic.cpG.",
            "VernacDeclareInstances",
            "25e96f52762f4c4ba3104aa7de79496a3c883ab3"
        ],
        [
            "Existing Instances Axiomatization2SequentCalculus_SC Axiomatization2SequentCalculus_bSC Axiomatization2SequentCalculus_fwSC Axiomatization2SequentCalculus_minSC Axiomatization2SequentCalculus_ipSC Axiomatization2SequentCalculus_cpSC.",
            "VernacDeclareInstances",
            "c14c08d3e752818c97805afdaff8f92b51af01a2"
        ],
        [
            "Definition cP: context -> Prop := maximal consistent.",
            "VernacDefinition",
            "9eb1d22c0a6f05f19d6b55c3474633618ee7cf33"
        ],
        [
            "Lemma AL_MC: at_least (maximal consistent) cP.",
            "VernacStartTheoremProof",
            "0bdcf1b95ab92de369805ad3ff4b7f0ca18565f5"
        ],
        [
            "solve_at_least.",
            "VernacExtend",
            "9eab0178c8b7eca91229f90d2a572dca17514a13"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma LIN_CONSI: Lindenbaum_constructable consistent cP.",
            "VernacStartTheoremProof",
            "4d894bd86febe1fa32efdabc892a31f7058c3137"
        ],
        [
            "eapply Lindenbaum_constructable_Same_set.",
            "VernacExtend",
            "f573c046fb8c835cb464f880e876a690c6083c73"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite Same_set_spec.",
            "VernacExtend",
            "a24cf480e20d9586f43f0daca3eed301c9e5eae6"
        ],
        [
            "intros Phi.",
            "VernacExtend",
            "f7369b2289eefe061901663d71567f0bf9ab40fe"
        ],
        [
            "apply consistent_spec.",
            "VernacExtend",
            "26c8006668aee9728e8e015e5001c5484b7bffa0"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply Lindenbaum_constructable_suffice.",
            "VernacExtend",
            "eb6cdf8f0c8a76bee081589c5b1d6bca252a31f2"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply PropositionalLanguage.formula_countable; auto.",
            "VernacExtend",
            "cbb8651c3a115f7d543dba3137c12539218b59eb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply Lindenbaum_preserves_cannot_derive.",
            "VernacExtend",
            "13544c6e6df1538712858d8f5beabdae1f05c203"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply Lindenbaum_cannot_derive_ensures_max_consistent.",
            "VernacExtend",
            "2995bc8f211f2f143586031b47f51449a3580712"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition canonical_frame: Type := sig cP.",
            "VernacDefinition",
            "17aa8247222657e67a904b2abbfa7d6bf387cea6"
        ],
        [
            "Definition canonical_eval: PropositionalLanguage.Var -> canonical_frame -> Prop := fun p a => proj1_sig a (PropositionalLanguage.varp p).",
            "VernacDefinition",
            "22cd57f6ccd5f703c5c7b21f1dc4dafb22400c31"
        ],
        [
            "Definition kMD: KripkeModel TrivialSemantics.MD := Build_KripkeModel TrivialSemantics.MD unit (fun _ => canonical_frame) (fun u a v => canonical_eval v a).",
            "VernacDefinition",
            "f38c8d79b3d6913350767b6b9e305cde2f7a8d66"
        ],
        [
            "Definition canonical_Kmodel: @Kmodel TrivialSemantics.MD kMD := tt.",
            "VernacDefinition",
            "ceef4cb7c8f2267e99df8a3714eb41fdd7bcd8d4"
        ],
        [
            "Definition rel: bijection (Kworlds canonical_Kmodel) (sig cP) := bijection_refl.",
            "VernacDefinition",
            "b35f85a0fe290f9edbc5ac70acb4f39290e3ccac"
        ],
        [
            "Lemma TRUTH: forall x: expr, forall m Phi, rel m Phi -> (KRIPKE: canonical_Kmodel, m |= x <-> proj1_sig Phi x).",
            "VernacStartTheoremProof",
            "76c21a3a4bf3fc0c14bbe180c9ba45ef802ef2dc"
        ],
        [
            "induction x.",
            "VernacExtend",
            "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "exact (truth_lemma_andp cP rel AL_MC x1 x2 IHx1 IHx2).",
            "VernacExtend",
            "f97bfab8141f7d60cf7c704227645ac999a62a80"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "exact (truth_lemma_orp cP rel AL_MC x1 x2 IHx1 IHx2).",
            "VernacExtend",
            "0ef7284d525f3034791baf98d6f42b301b82b66d"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "exact (truth_lemma_impp cP rel AL_MC x1 x2 IHx1 IHx2).",
            "VernacExtend",
            "bc3f0fe756329a3ffd10005d69d12b27931c0c56"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "exact (truth_lemma_falsep cP rel AL_MC).",
            "VernacExtend",
            "fb64088dc2ce3c5f02ba36b750d1cd3a1c94e33e"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "intros; change (m = Phi) in H; subst; reflexivity.",
            "VernacExtend",
            "b07f9bc4b5990d33bb85cf3041aa3392195fb07f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Existing Instance kMD.",
            "VernacDeclareInstances",
            "6fa2a837079caefa82af5201e8a60f0afa9d63e4"
        ],
        [
            "Theorem complete_Classical_Trivial: strongly_complete ProofTheories.ClassicalPropositionalLogic.G TrivialSemantics.SM (AllModel _).",
            "VernacStartTheoremProof",
            "e09571bfcd0c688712a5e4a919950a51c1e3c358"
        ],
        [
            "assert (strongly_complete ProofTheories.ClassicalPropositionalLogic.G TrivialSemantics.SM (KripkeModelClass _ (fun _ => True))).",
            "VernacExtend",
            "9e30459546d0c3e7283002790d497f4131e57e71"
        ],
        [
            "Focus 2.",
            "VernacFocus",
            "485d4f15aaf5c71ed130bd270976f9fc4e12a61f"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "apply (H Phi x).",
            "VernacExtend",
            "5c9abe0139771d78742c8206aa80a7408e8a0a27"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "apply H0; auto.",
            "VernacExtend",
            "e167f871dfeec1cef76aaf201c54c081f29f730b"
        ],
        [
            "hnf; auto.",
            "VernacExtend",
            "65344d2383630f0b20be3e06df4e3dac3545a5cf"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "Unfocus.",
            "VernacUnfocus",
            "bedcc8cdbc0e659ad45d78624bfea9462efb82d1"
        ],
        [
            "apply (@general_completeness PropositionalLanguage.L _ _ ProofTheories.ClassicalPropositionalLogic.G _ _ _ _ _ _ _ TrivialSemantics.SM _ _ _ _ rel LIN_CONSI TRUTH); auto.",
            "VernacExtend",
            "de1322fa425af7056faf624d235d53922df1b45a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Complete.",
            "VernacEndSegment",
            "0a4ba3dd0ad3c00d9559c9c3908c15032790b9c4"
        ]
    ],
    "proofs": [
        {
            "name": "AL_MC",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "solve_at_least.",
                        "VernacExtend",
                        "9eab0178c8b7eca91229f90d2a572dca17514a13"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "TRUTH",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "induction x.",
                        "VernacExtend",
                        "8d91f99bf5ea35862c5721d2308df13dc2f7aeed"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "exact (truth_lemma_andp cP rel AL_MC x1 x2 IHx1 IHx2).",
                        "VernacExtend",
                        "f97bfab8141f7d60cf7c704227645ac999a62a80"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "exact (truth_lemma_orp cP rel AL_MC x1 x2 IHx1 IHx2).",
                        "VernacExtend",
                        "0ef7284d525f3034791baf98d6f42b301b82b66d"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "exact (truth_lemma_impp cP rel AL_MC x1 x2 IHx1 IHx2).",
                        "VernacExtend",
                        "bc3f0fe756329a3ffd10005d69d12b27931c0c56"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "exact (truth_lemma_falsep cP rel AL_MC).",
                        "VernacExtend",
                        "fb64088dc2ce3c5f02ba36b750d1cd3a1c94e33e"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "intros; change (m = Phi) in H; subst; reflexivity.",
                        "VernacExtend",
                        "b07f9bc4b5990d33bb85cf3041aa3392195fb07f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}