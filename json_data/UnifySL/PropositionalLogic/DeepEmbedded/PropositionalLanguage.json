{
    "filename": "PropositionalLogic/DeepEmbedded/PropositionalLanguage.v",
    "coq_project": "UnifySL",
    "vernac_cmds": [
        [
            "Require Import Coq.Logic.ProofIrrelevance.",
            "VernacRequire",
            "830bd67b83ecfa87e763e0503e058c6181d73cd1"
        ],
        [
            "Require Import Coq.omega.Omega.",
            "VernacRequire",
            "c22118512de22ca1f471830b29716d6337180b58"
        ],
        [
            "Require Import Logic.lib.Bijection.",
            "VernacRequire",
            "7bb59803be65e1b0331aebf5a5e54fdb046de426"
        ],
        [
            "Require Import Logic.lib.Countable.",
            "VernacRequire",
            "0e6db58557f71a0dcd04cbe972aeb1392ac877d1"
        ],
        [
            "Require Import Logic.GeneralLogic.Base.",
            "VernacRequire",
            "070e14a34b6bbb533eb71ad7d5a289e752dd93e4"
        ],
        [
            "Require Import Logic.MinimunLogic.Syntax.",
            "VernacRequire",
            "1fe3f501db6a35e0c279335c26da5e64e6b0b57b"
        ],
        [
            "Require Import Logic.PropositionalLogic.Syntax.",
            "VernacRequire",
            "441acd893a589161321f487f85bee0d46b168a77"
        ],
        [
            "Local Open Scope logic_base.",
            "VernacOpenCloseScope",
            "5c8594c0dfdcdf011d6f504e216bb05a6ae4277a"
        ],
        [
            "Local Open Scope syntax.",
            "VernacOpenCloseScope",
            "b783c96de8f41f381acfa7d6f61aaee81388d5d7"
        ],
        [
            "Import PropositionalLanguageNotation.",
            "VernacImport",
            "69bfca1fca0e417f262dd3cc9ce6113dc17ba916"
        ],
        [
            "Class PropositionalVariables: Type := { Var: Type }.",
            "VernacInductive",
            "4e4a3e7a77d3c192de053382e27c2d7c8cf398a9"
        ],
        [
            "Inductive expr {Sigma: PropositionalVariables}: Type := | andp : expr -> expr -> expr | orp : expr -> expr -> expr | impp : expr -> expr -> expr | falsep : expr | varp : Var -> expr.",
            "VernacInductive",
            "340f12dd8e018f1eb0dd3d7e3427f8dd37f61407"
        ],
        [
            "Arguments expr Sigma: clear implicits.",
            "VernacArguments",
            "8609e43840f067368d28bd8294bd44fc0f87f449"
        ],
        [
            "Instance L {Sigma: PropositionalVariables}: Language := Build_Language (expr Sigma).",
            "VernacInstance",
            "0d0580f170dbb510b42895e0558f820071b3564a"
        ],
        [
            "Instance minL {Sigma: PropositionalVariables}: MinimunLanguage L := Build_MinimunLanguage L impp.",
            "VernacInstance",
            "c3d136d842331b7c9890d721b73a10d6c3ffd651"
        ],
        [
            "Instance pL {Sigma: PropositionalVariables}: PropositionalLanguage L := Build_PropositionalLanguage L andp orp falsep.",
            "VernacInstance",
            "a9a37cd89169b22b1083583c7905fdd51fa31b80"
        ],
        [
            "Definition rank {Sigma: PropositionalVariables}: expr Sigma -> nat := fix rank (x: expr Sigma): nat := match x with | andp y z => 1 + rank y + rank z | orp y z => 1 + rank y + rank z | impp y z => 1 + rank y + rank z | falsep => 0 | varp p => 0 end.",
            "VernacDefinition",
            "94d7b9c05d72d81e082e34ba841eb61bd67208cf"
        ],
        [
            "Definition formula_countable: forall {Sigma}, Countable Var -> Countable (expr Sigma).",
            "VernacDefinition",
            "3b534b0b0b94b71e8ef9cfbd0db314d722fd510c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (forall n, Countable (sig (fun x: expr Sigma => rank x <= n))).",
            "VernacExtend",
            "a339040004efcdcee2fbda9be3540e0d9a2e95bb"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "apply (@bijection_Countable _ (Var + unit)%type); [| solve_Countable].",
            "VernacExtend",
            "169a01459c4c98b0ee120ffef4f14f81acb1f65c"
        ],
        [
            "apply bijection_sym.",
            "VernacExtend",
            "271e6010b1376f0171b44a40450c33fef8d362d8"
        ],
        [
            "apply (FBuild_bijection _ _ (fun x => match x with | inl p => exist (fun x: expr Sigma => rank x <= 0) (varp p) (le_n 0) | inr _ => exist (fun x: expr Sigma => rank x <= 0) falsep (le_n 0) end)).",
            "VernacExtend",
            "910eb3f414fcb09004d9398ca9fa0c5103501c4b"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "destruct a1 as [? | []], a2 as [? | []]; inversion H; auto.",
            "VernacExtend",
            "0f1405cfbca7097130319e9bfc500e1972501396"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "destruct b as [[] HH]; try solve [inversion HH].",
            "VernacExtend",
            "55c1c86b53408fff2c33f5ee46f30315594f8541"
        ],
        [
            "1: exists (inr tt); eauto; f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "364f0f082b13fc0d384639c75e7a098c2669b610"
        ],
        [
            "1: exists (inl v); eauto; f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "b5315876249371449f4fee15992aebea49c85f4d"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "set (s := sig (fun x: expr Sigma => rank x <= n)).",
            "VernacExtend",
            "9fff7547d6fc0e74c5645548ec93e1abbe7d2e3d"
        ],
        [
            "apply (@injection_Countable _ (s * s + s * s + s * s + unit + Var)%type); [| solve_Countable].",
            "VernacExtend",
            "4351410db136528610440c32412699b7c67031ee"
        ],
        [
            "apply (Build_injection _ _ (fun x y => match y with | inl (inl (inl (inl (exist _ y _, exist _ z _)))) => proj1_sig x = andp y z | inl (inl (inl (inr (exist _ y _, exist _ z _)))) => proj1_sig x = orp y z | inl (inl (inr (exist _ y _, exist _ z _))) => proj1_sig x = impp y z | inl (inr _) => proj1_sig x = falsep | inr p => proj1_sig x = varp p end)).",
            "VernacExtend",
            "a30e25cb834a887d5a28b46ae65ac9b13e2b8b3b"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "destruct a as [[y z | y z | y z | | p] ?H].",
            "VernacExtend",
            "f087c410b5b1fb0b7574c91e6f17f0c2529fffd1"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (rank y <= n) by omega.",
            "VernacExtend",
            "6827e2c6f1c6a7d1918bc79ade17859944898c17"
        ],
        [
            "assert (rank z <= n) by omega.",
            "VernacExtend",
            "df2e334dd6be89a893a32ec9eb1626b6ea9ab3ad"
        ],
        [
            "exists (inl (inl (inl (inl (exist _ y H0, exist _ z H1))))); auto.",
            "VernacExtend",
            "647e3bf70e2a074d2e501ad93f31e3b53565d63e"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (rank y <= n) by omega.",
            "VernacExtend",
            "6827e2c6f1c6a7d1918bc79ade17859944898c17"
        ],
        [
            "assert (rank z <= n) by omega.",
            "VernacExtend",
            "df2e334dd6be89a893a32ec9eb1626b6ea9ab3ad"
        ],
        [
            "exists (inl (inl (inl (inr (exist _ y H0, exist _ z H1))))); auto.",
            "VernacExtend",
            "ad7361e606b9ce2e331190e5c3c04f179b15d910"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "assert (rank y <= n) by omega.",
            "VernacExtend",
            "6827e2c6f1c6a7d1918bc79ade17859944898c17"
        ],
        [
            "assert (rank z <= n) by omega.",
            "VernacExtend",
            "df2e334dd6be89a893a32ec9eb1626b6ea9ab3ad"
        ],
        [
            "exists (inl (inl (inr (exist _ y H0, exist _ z H1)))); auto.",
            "VernacExtend",
            "7bf7a9e792bf6ae826c1a747a8e5184b0b2537df"
        ],
        [
            "exists (inl (inr tt)); auto.",
            "VernacExtend",
            "cf5674ff021a728a39a7651c972695d0eac2f3a4"
        ],
        [
            "exists (inr p); auto.",
            "VernacExtend",
            "4b06ef24d7a6e2711cbd75675243aca6e8720e07"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "destruct a as [[y z | y z | y z | | p] ?H]; destruct b1 as [[[[[[y1 ?H] [z1 ?H]] | [[y1 ?H] [z1 ?H]]] | [[y1 ?H] [z1 ?H]]] |] | p1]; try solve [inversion H]; destruct b2 as [[[[[[y2 ?H] [z2 ?H]] | [[y2 ?H] [z2 ?H]]] | [[y2 ?H] [z2 ?H]]] |] | p2]; try solve [inversion H0].",
            "VernacExtend",
            "f668a3fa9a9aaa16106b1e464bebc0ce401f9ac9"
        ],
        [
            "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "80ffffd82f902a7b329c7fade798d523651de3f8"
        ],
        [
            "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "80ffffd82f902a7b329c7fade798d523651de3f8"
        ],
        [
            "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "80ffffd82f902a7b329c7fade798d523651de3f8"
        ],
        [
            "destruct u, u0; auto.",
            "VernacExtend",
            "8cd7502e9d6b2b35ab951c4f1eb57ca74f711c3a"
        ],
        [
            "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "80ffffd82f902a7b329c7fade798d523651de3f8"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "destruct b as [[[[[[y ?H] [z ?H]] | [[y ?H] [z ?H]]] | [[y ?H] [z ?H]]] |] | p]; destruct a1 as [[y1 z1 | y1 z1 | y1 z1 | | p1] ?H]; try solve [inversion H]; destruct a2 as [[y2 z2 | y2 z2 | y2 z2 | | p2] ?H]; try solve [inversion H0].",
            "VernacExtend",
            "725d151f17eb654b31d23ed9eb83d85204b38a73"
        ],
        [
            "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "80ffffd82f902a7b329c7fade798d523651de3f8"
        ],
        [
            "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "80ffffd82f902a7b329c7fade798d523651de3f8"
        ],
        [
            "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "80ffffd82f902a7b329c7fade798d523651de3f8"
        ],
        [
            "f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "9732b0267eacdeb94a66e939183c158104cc20de"
        ],
        [
            "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
            "VernacExtend",
            "80ffffd82f902a7b329c7fade798d523651de3f8"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "apply (@injection_Countable _ (sigT (fun n => sig (fun x: expr Sigma => rank x <= n)))); [| solve_Countable; auto].",
            "VernacExtend",
            "73ffa1bcf772a9720d1758c7fd5841cf95684aad"
        ],
        [
            "apply (FBuild_injection _ _ (fun x0 => existT (fun n => sig (fun x => rank x <= n)) (rank x0) (exist (fun x => rank x <= rank x0) x0 (le_n (rank x0))))).",
            "VernacExtend",
            "d6de867f1eac0666ab9e9756b99400a83dd831c2"
        ],
        [
            "hnf; intros.",
            "VernacExtend",
            "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
        ],
        [
            "simpl in H.",
            "VernacExtend",
            "78dad51b2bb1130f71851d1e55489020824f59f6"
        ],
        [
            "inversion H; auto.",
            "VernacExtend",
            "ca70ce9532e796fd752cb12d4d270e557a16bc8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "formula_countable",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (forall n, Countable (sig (fun x: expr Sigma => rank x <= n))).",
                        "VernacExtend",
                        "a339040004efcdcee2fbda9be3540e0d9a2e95bb"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "apply (@bijection_Countable _ (Var + unit)%type); [| solve_Countable].",
                        "VernacExtend",
                        "169a01459c4c98b0ee120ffef4f14f81acb1f65c"
                    ]
                },
                {
                    "command": [
                        "apply bijection_sym.",
                        "VernacExtend",
                        "271e6010b1376f0171b44a40450c33fef8d362d8"
                    ]
                },
                {
                    "command": [
                        "apply (FBuild_bijection _ _ (fun x => match x with | inl p => exist (fun x: expr Sigma => rank x <= 0) (varp p) (le_n 0) | inr _ => exist (fun x: expr Sigma => rank x <= 0) falsep (le_n 0) end)).",
                        "VernacExtend",
                        "910eb3f414fcb09004d9398ca9fa0c5103501c4b"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "destruct a1 as [? | []], a2 as [? | []]; inversion H; auto.",
                        "VernacExtend",
                        "0f1405cfbca7097130319e9bfc500e1972501396"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "destruct b as [[] HH]; try solve [inversion HH].",
                        "VernacExtend",
                        "55c1c86b53408fff2c33f5ee46f30315594f8541"
                    ]
                },
                {
                    "command": [
                        "1: exists (inr tt); eauto; f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "364f0f082b13fc0d384639c75e7a098c2669b610"
                    ]
                },
                {
                    "command": [
                        "1: exists (inl v); eauto; f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "b5315876249371449f4fee15992aebea49c85f4d"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "set (s := sig (fun x: expr Sigma => rank x <= n)).",
                        "VernacExtend",
                        "9fff7547d6fc0e74c5645548ec93e1abbe7d2e3d"
                    ]
                },
                {
                    "command": [
                        "apply (@injection_Countable _ (s * s + s * s + s * s + unit + Var)%type); [| solve_Countable].",
                        "VernacExtend",
                        "4351410db136528610440c32412699b7c67031ee"
                    ]
                },
                {
                    "command": [
                        "apply (Build_injection _ _ (fun x y => match y with | inl (inl (inl (inl (exist _ y _, exist _ z _)))) => proj1_sig x = andp y z | inl (inl (inl (inr (exist _ y _, exist _ z _)))) => proj1_sig x = orp y z | inl (inl (inr (exist _ y _, exist _ z _))) => proj1_sig x = impp y z | inl (inr _) => proj1_sig x = falsep | inr p => proj1_sig x = varp p end)).",
                        "VernacExtend",
                        "a30e25cb834a887d5a28b46ae65ac9b13e2b8b3b"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "destruct a as [[y z | y z | y z | | p] ?H].",
                        "VernacExtend",
                        "f087c410b5b1fb0b7574c91e6f17f0c2529fffd1"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert (rank y <= n) by omega.",
                        "VernacExtend",
                        "6827e2c6f1c6a7d1918bc79ade17859944898c17"
                    ]
                },
                {
                    "command": [
                        "assert (rank z <= n) by omega.",
                        "VernacExtend",
                        "df2e334dd6be89a893a32ec9eb1626b6ea9ab3ad"
                    ]
                },
                {
                    "command": [
                        "exists (inl (inl (inl (inl (exist _ y H0, exist _ z H1))))); auto.",
                        "VernacExtend",
                        "647e3bf70e2a074d2e501ad93f31e3b53565d63e"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert (rank y <= n) by omega.",
                        "VernacExtend",
                        "6827e2c6f1c6a7d1918bc79ade17859944898c17"
                    ]
                },
                {
                    "command": [
                        "assert (rank z <= n) by omega.",
                        "VernacExtend",
                        "df2e334dd6be89a893a32ec9eb1626b6ea9ab3ad"
                    ]
                },
                {
                    "command": [
                        "exists (inl (inl (inl (inr (exist _ y H0, exist _ z H1))))); auto.",
                        "VernacExtend",
                        "ad7361e606b9ce2e331190e5c3c04f179b15d910"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "assert (rank y <= n) by omega.",
                        "VernacExtend",
                        "6827e2c6f1c6a7d1918bc79ade17859944898c17"
                    ]
                },
                {
                    "command": [
                        "assert (rank z <= n) by omega.",
                        "VernacExtend",
                        "df2e334dd6be89a893a32ec9eb1626b6ea9ab3ad"
                    ]
                },
                {
                    "command": [
                        "exists (inl (inl (inr (exist _ y H0, exist _ z H1)))); auto.",
                        "VernacExtend",
                        "7bf7a9e792bf6ae826c1a747a8e5184b0b2537df"
                    ]
                },
                {
                    "command": [
                        "exists (inl (inr tt)); auto.",
                        "VernacExtend",
                        "cf5674ff021a728a39a7651c972695d0eac2f3a4"
                    ]
                },
                {
                    "command": [
                        "exists (inr p); auto.",
                        "VernacExtend",
                        "4b06ef24d7a6e2711cbd75675243aca6e8720e07"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "destruct a as [[y z | y z | y z | | p] ?H]; destruct b1 as [[[[[[y1 ?H] [z1 ?H]] | [[y1 ?H] [z1 ?H]]] | [[y1 ?H] [z1 ?H]]] |] | p1]; try solve [inversion H]; destruct b2 as [[[[[[y2 ?H] [z2 ?H]] | [[y2 ?H] [z2 ?H]]] | [[y2 ?H] [z2 ?H]]] |] | p2]; try solve [inversion H0].",
                        "VernacExtend",
                        "f668a3fa9a9aaa16106b1e464bebc0ce401f9ac9"
                    ]
                },
                {
                    "command": [
                        "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "80ffffd82f902a7b329c7fade798d523651de3f8"
                    ]
                },
                {
                    "command": [
                        "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "80ffffd82f902a7b329c7fade798d523651de3f8"
                    ]
                },
                {
                    "command": [
                        "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "80ffffd82f902a7b329c7fade798d523651de3f8"
                    ]
                },
                {
                    "command": [
                        "destruct u, u0; auto.",
                        "VernacExtend",
                        "8cd7502e9d6b2b35ab951c4f1eb57ca74f711c3a"
                    ]
                },
                {
                    "command": [
                        "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "80ffffd82f902a7b329c7fade798d523651de3f8"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "destruct b as [[[[[[y ?H] [z ?H]] | [[y ?H] [z ?H]]] | [[y ?H] [z ?H]]] |] | p]; destruct a1 as [[y1 z1 | y1 z1 | y1 z1 | | p1] ?H]; try solve [inversion H]; destruct a2 as [[y2 z2 | y2 z2 | y2 z2 | | p2] ?H]; try solve [inversion H0].",
                        "VernacExtend",
                        "725d151f17eb654b31d23ed9eb83d85204b38a73"
                    ]
                },
                {
                    "command": [
                        "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "80ffffd82f902a7b329c7fade798d523651de3f8"
                    ]
                },
                {
                    "command": [
                        "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "80ffffd82f902a7b329c7fade798d523651de3f8"
                    ]
                },
                {
                    "command": [
                        "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "80ffffd82f902a7b329c7fade798d523651de3f8"
                    ]
                },
                {
                    "command": [
                        "f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "9732b0267eacdeb94a66e939183c158104cc20de"
                    ]
                },
                {
                    "command": [
                        "inversion H; inversion H0; subst; subst; repeat f_equal; apply proof_irrelevance.",
                        "VernacExtend",
                        "80ffffd82f902a7b329c7fade798d523651de3f8"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "apply (@injection_Countable _ (sigT (fun n => sig (fun x: expr Sigma => rank x <= n)))); [| solve_Countable; auto].",
                        "VernacExtend",
                        "73ffa1bcf772a9720d1758c7fd5841cf95684aad"
                    ]
                },
                {
                    "command": [
                        "apply (FBuild_injection _ _ (fun x0 => existT (fun n => sig (fun x => rank x <= n)) (rank x0) (exist (fun x => rank x <= rank x0) x0 (le_n (rank x0))))).",
                        "VernacExtend",
                        "d6de867f1eac0666ab9e9756b99400a83dd831c2"
                    ]
                },
                {
                    "command": [
                        "hnf; intros.",
                        "VernacExtend",
                        "56afb10662f39d6d1fe2d1fcd1dc59f4012137ee"
                    ]
                },
                {
                    "command": [
                        "simpl in H.",
                        "VernacExtend",
                        "78dad51b2bb1130f71851d1e55489020824f59f6"
                    ]
                },
                {
                    "command": [
                        "inversion H; auto.",
                        "VernacExtend",
                        "ca70ce9532e796fd752cb12d4d270e557a16bc8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}