{
    "filename": "theories/prefix.v",
    "coq_project": "lemma-overloading",
    "vernac_cmds": [
        [
            "From mathcomp Require Import ssreflect ssrfun ssrbool ssrnat seq.",
            "VernacRequire",
            "e0f50dfbb6cb21018a3b3d9cd6810a04d816d27b"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Section Prefix.",
            "VernacBeginSection",
            "964e796053968667a830729af062e4930fd6f3bb"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Fixpoint onth (s : seq A) n : option A := if s is x :: s' then if n is n'.+1 then onth s' n' else Some x else None.",
            "VernacFixpoint",
            "3e2d85bdc385404cc8e5b49768739713763d4fd5"
        ],
        [
            "Definition prefix s1 s2 := forall n x, onth s1 n = some x -> onth s2 n = some x.",
            "VernacDefinition",
            "7763e5e04010598607e03bf288311ff4faa45831"
        ],
        [
            "Lemma size_onth (s : seq A) n : n < size s -> exists x, onth s n = Some x.",
            "VernacStartTheoremProof",
            "0c0debec5e8012cc9768a13404c19a9790a67989"
        ],
        [
            "elim:s n=>[//|x' s' IH] [|n] /=.",
            "VernacExtend",
            "e686a1895f1799b840b76242f931100819a9ad6c"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>_; exists x'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "rewrite -(addn1 n) -(addn1 (size s')) ltn_add2r.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma onth_size (s : seq A) n x : onth s n = Some x -> n < size s.",
            "VernacStartTheoremProof",
            "aa30bd6a14c582b0b878e298f11ef60f75bb41a9"
        ],
        [
            "by elim:s n=>[//|x' s' IH] [//|n]; apply: IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prefix_refl s : prefix s s.",
            "VernacStartTheoremProof",
            "3fd19fdee42baae38947b54b59ebc6d3831e435a"
        ],
        [
            "by move=>n x <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prefix_trans (s2 s1 s3 : seq A) : prefix s1 s2 -> prefix s2 s3 -> prefix s1 s3.",
            "VernacStartTheoremProof",
            "6459ec72620129a38a072a88896c637db8474c45"
        ],
        [
            "by move=>H1 H2 n x E; apply: H2; apply: H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prefix_cons x s1 s2 : prefix (x :: s1) (x :: s2) <-> prefix s1 s2.",
            "VernacStartTheoremProof",
            "a06cbcc334ba517d25b4ad448e5e1ca69af13d7c"
        ],
        [
            "by split=>E n; [apply: (E n.+1) | case: n].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prefix_cons' x y s1 s2 : prefix (x :: s1) (y :: s2) -> x = y /\\ prefix s1 s2.",
            "VernacStartTheoremProof",
            "c8023c86df9fa7f1513fee03cc019d3b56bbef94"
        ],
        [
            "move=>H; move: (H 0 x (erefl _))=>[H'].",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "by move: H; rewrite H' prefix_cons.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prefix_size (s t : seq A) : prefix s t -> size s <= size t.",
            "VernacStartTheoremProof",
            "c23d01631ccaaadbeefe49f9ce72a9cec1f48ffe"
        ],
        [
            "elim: s t=>[//|a s IH] [|b t] H; first by move: (H 0 a (erefl _)).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by rewrite ltnS; apply: (IH _ (proj2 (prefix_cons' H))).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prefix_onth (s t : seq A) x : x < size s -> prefix s t -> onth s x = onth t x.",
            "VernacStartTheoremProof",
            "9a3b9a83cce7e1b0c869c9138033ea1e23356e57"
        ],
        [
            "elim:s t x =>[//|a s IH] [|b t] x H1 H2; first by move: (H2 0 a (erefl _)).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "apply prefix_cons' in H2.",
            "VernacExtend",
            "aab605895d01888281ae6024f3a9bb2b765f4f73"
        ],
        [
            "case: x H1=>[_|n H1]; first by rewrite (proj1 H2).",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: IH=>//; exact (proj2 H2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Prefix.",
            "VernacEndSegment",
            "25913a048a340eb4618cbc6c102838ef880c67d1"
        ],
        [
            "Hint Resolve prefix_refl : core.",
            "VernacHints",
            "b61fa3a5d5e038e90e5169c438de6516fead335f"
        ]
    ],
    "proofs": [
        {
            "name": "size_onth",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "elim:s n=>[//|x' s' IH] [|n] /=.",
                        "VernacExtend",
                        "e686a1895f1799b840b76242f931100819a9ad6c"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by move=>_; exists x'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "rewrite -(addn1 n) -(addn1 (size s')) ltn_add2r.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "onth_size",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "by elim:s n=>[//|x' s' IH] [//|n]; apply: IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prefix_refl",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "by move=>n x <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prefix_trans",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2 n x E; apply: H2; apply: H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prefix_cons",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "by split=>E n; [apply: (E n.+1) | case: n].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prefix_cons'",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "move=>H; move: (H 0 x (erefl _))=>[H'].",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "by move: H; rewrite H' prefix_cons.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prefix_size",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "elim: s t=>[//|a s IH] [|b t] H; first by move: (H 0 a (erefl _)).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by rewrite ltnS; apply: (IH _ (proj2 (prefix_cons' H))).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prefix_onth",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "elim:s t x =>[//|a s IH] [|b t] x H1 H2; first by move: (H2 0 a (erefl _)).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "apply prefix_cons' in H2.",
                        "VernacExtend",
                        "aab605895d01888281ae6024f3a9bb2b765f4f73"
                    ]
                },
                {
                    "command": [
                        "case: x H1=>[_|n H1]; first by rewrite (proj1 H2).",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: IH=>//; exact (proj2 H2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}