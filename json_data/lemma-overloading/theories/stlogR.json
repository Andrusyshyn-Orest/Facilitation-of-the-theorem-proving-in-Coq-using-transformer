{
    "filename": "theories/stlogR.v",
    "coq_project": "lemma-overloading",
    "vernac_cmds": [
        [
            "From mathcomp Require Import ssreflect ssrbool ssrfun.",
            "VernacRequire",
            "f57ec9817857a63b924bb53241da8b3253ea9104"
        ],
        [
            "From LemmaOverloading Require Import heaps rels stmod stsep stlog.",
            "VernacRequire",
            "376c5ebfc19a4a105765ed897b8d2ec5c77c4081"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Structure tagged_heap := Tag {untag :> heap}.",
            "VernacInductive",
            "78ffb08fbf82f2f0cf05ad82201cd9898f22f4d3"
        ],
        [
            "Definition right_tag := Tag.",
            "VernacDefinition",
            "341b71e4014ecb24a028fcd300a27d73ff63f4ab"
        ],
        [
            "Definition left_tag := right_tag.",
            "VernacDefinition",
            "a0f17276bbc813bf242adf8b3b79028f514e4935"
        ],
        [
            "Canonical Structure found_tag i := left_tag i.",
            "VernacDefinition",
            "eb21d4c55342ad8e7c457ef9499cef2d5545ac24"
        ],
        [
            "Definition update_axiom k r (h : tagged_heap) := untag h = k :+ r.",
            "VernacDefinition",
            "0aa18b216f8100297c4c6d78fde38620d488d0f8"
        ],
        [
            "Structure update (k r : heap) := Update {heap_of :> tagged_heap; _ : update_axiom k r heap_of}.",
            "VernacInductive",
            "6e573ba6cba4b3d44c6050a8b47f6c170e815e70"
        ],
        [
            "Lemma updateE r k (f : update k r) : untag f = k :+ r.",
            "VernacStartTheoremProof",
            "437b95068f66100c840f6ca63a8b0bb381887e90"
        ],
        [
            "by case: f=>[[j]] /=; rewrite /update_axiom /= => ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma found_pf k : update_axiom k empty (found_tag k).",
            "VernacStartTheoremProof",
            "03b76d91948bd5bed24dc38149ac6234728d98df"
        ],
        [
            "by rewrite /update_axiom unh0.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure found_struct k := Update (found_pf k).",
            "VernacDefinition",
            "6bb88e0a1e2f7b653d6cc84e08aee35d15aa2a55"
        ],
        [
            "Lemma left_pf h r (f : forall k, update k r) k : update_axiom k (r :+ h) (left_tag (f k :+ h)).",
            "VernacStartTheoremProof",
            "3fb0d6776f6aecf0b63bdbece10d46d08405a0e7"
        ],
        [
            "by rewrite updateE /update_axiom /= unA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure left_struct h r (f : forall k, update k r) k := Update (left_pf h f k).",
            "VernacDefinition",
            "15389fadd758fd719a1d4da18cf46314cf4e24f8"
        ],
        [
            "Lemma right_pf h r (f : forall k, update k r) k : update_axiom k (h :+ r) (right_tag (h :+ f k)).",
            "VernacStartTheoremProof",
            "2814104fa2652861ebbac46671a9e7221367035c"
        ],
        [
            "by rewrite updateE /update_axiom /= unCA.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure right_struct h r (f : forall k, update k r) k := Update (right_pf h f k).",
            "VernacDefinition",
            "0ea23e70bec752589245fa1854c2eb8474aa87e2"
        ],
        [
            "Notation cont A := (ans A -> heap -> Prop).",
            "VernacSyntacticDefinition",
            "68767e533b40528b2b26143ed88f4651540d6888"
        ],
        [
            "Section EvalDoR.",
            "VernacBeginSection",
            "f9b8626273b39f78fb672f8e53121c537bcc8b83"
        ],
        [
            "Variables (A B : Type).",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Lemma val_doR (s : spec A) i j (f : forall k, update k j) (r : cont A) : s.1 i -> (forall x m, s.2 (Val x) i m -> def (f m) -> r (Val x) (f m)) -> (forall e m, s.2 (Exn e) i m -> def (f m) -> r (Exn e) (f m)) -> verify s (f i) r.",
            "VernacStartTheoremProof",
            "a263abaa1a92dff385ff06e5cba4081b9cf67021"
        ],
        [
            "move=>H1 H2 H3; rewrite updateE; apply: (val_do H1).",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>x m; move: (H2 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>x m; move: (H3 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma try_doR (s : spec A) s1 s2 i j (f : forall k, update k j) (r : cont B) : s.1 i -> (forall x m, s.2 (Val x) i m -> verify (s1 x) (f m) r) -> (forall e m, s.2 (Exn e) i m -> verify (s2 e) (f m) r) -> verify (try_s s s1 s2) (f i) r.",
            "VernacStartTheoremProof",
            "17e41fa68fb4bc953d47f708ba35f8ef5514ca86"
        ],
        [
            "move=>H1 H2 H3; rewrite updateE; apply: (try_do H1).",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>x m; move: (H2 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>x m; move: (H3 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bnd_doR (s : spec A) s2 i j (f : forall k, update k j) (r : cont B) : s.1 i -> (forall x m, s.2 (Val x) i m -> verify (s2 x) (f m) r) -> (forall e m, s.2 (Exn e) i m -> def (f m) -> r (Exn e) (f m)) -> verify (bind_s s s2) (f i) r.",
            "VernacStartTheoremProof",
            "140f57b583edcb2a78ad7e15b550b9b7c895b821"
        ],
        [
            "move=>H1 H2 H3; rewrite updateE; apply: (bnd_do H1).",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>x m; move: (H2 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>x m; move: (H3 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EvalDoR.",
            "VernacEndSegment",
            "bdd848cd46070be84daa69c3e8af5e3110a6f7c8"
        ],
        [
            "Definition val_retR := val_ret.",
            "VernacDefinition",
            "b615ffa3f7e1c1cfb28ea38e08af71d67482339d"
        ],
        [
            "Definition try_retR := try_ret.",
            "VernacDefinition",
            "79003e5f74644f22db99c785ca47fc878496a100"
        ],
        [
            "Definition bnd_retR := bnd_ret.",
            "VernacDefinition",
            "600e0bd483463659cd58fe417f4849ac0d810e6c"
        ],
        [
            "Section EvalReadR.",
            "VernacBeginSection",
            "7078dcb74c1315e7500d6e404e8fc6e5d842c262"
        ],
        [
            "Variables (A B : Type).",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Lemma val_readR v x i (f : update (x :-> v) i) (r : cont A) : (def f -> r (Val v) f) -> verify (read_s A x) f r.",
            "VernacStartTheoremProof",
            "d48c179c48b6c358f98ffe30c89a63a21b7eaf4d"
        ],
        [
            "by rewrite updateE; apply: val_read.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma try_readR s1 s2 v x i (f : update (x :-> v) i) (r : cont B) : verify (s1 v) f r -> verify (try_s (read_s A x) s1 s2) f r.",
            "VernacStartTheoremProof",
            "45967ed61f5ff3663aa971cf83a92f019efb79de"
        ],
        [
            "by rewrite updateE; apply: try_read.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bnd_readR s v x i (f : update (x :-> v) i) (r : cont B) : verify (s v) f r -> verify (bind_s (read_s A x) s) f r.",
            "VernacStartTheoremProof",
            "56965ef728371eaad530374af258e327c164a3ae"
        ],
        [
            "by rewrite updateE; apply: bnd_read.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EvalReadR.",
            "VernacEndSegment",
            "78dc33a9bca607db9d9d368706b19da6f599b554"
        ],
        [
            "Section EvalWriteR.",
            "VernacBeginSection",
            "eb8de5f0672d6e8650753c174f60c9a02e5c4954"
        ],
        [
            "Variables (A B C : Type).",
            "VernacAssumption",
            "b984fd511dd9c74615ca3bfe47bac591ca7927d3"
        ],
        [
            "Lemma val_writeR (v : A) (w : B) x i (f : forall k, update k i) (r : cont unit) : (def (f (x :-> v)) -> r (Val tt) (f (x :-> v))) -> verify (write_s x v) (f (x :-> w)) r.",
            "VernacStartTheoremProof",
            "6cf006c438ce0d1cf12ae89e126836bb52fe0002"
        ],
        [
            "by rewrite !updateE; apply: val_write.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma try_writeR s1 s2 (v : A) (w : C) x i (f : forall k, update k i) (r : cont B) : verify (s1 tt) (f (x :-> v)) r -> verify (try_s (write_s x v) s1 s2) (f (x :-> w)) r.",
            "VernacStartTheoremProof",
            "04dfb2ac34e4de9c7769ea2ad38e8266ac2db2c8"
        ],
        [
            "rewrite !updateE; apply: try_write.",
            "VernacExtend",
            "634a7639ed2fb7caf62757f84400927f5829b7d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bnd_writeR s (v : A) (w : C) x i (f : forall k, update k i) (r : cont B) : verify (s tt) (f (x :-> v)) r -> verify (bind_s (write_s x v) s) (f (x :-> w)) r.",
            "VernacStartTheoremProof",
            "a96f14c7730247a7df167f05d04aea40424aa76c"
        ],
        [
            "by rewrite !updateE; apply: bnd_write.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EvalWriteR.",
            "VernacEndSegment",
            "ae90780e79d41a442f58b4e28a6e897ba6eba437"
        ],
        [
            "Definition val_allocR := val_alloc.",
            "VernacDefinition",
            "eb4a1623e1ed9739586efd12239892628d4c26ea"
        ],
        [
            "Definition try_allocR := try_alloc.",
            "VernacDefinition",
            "d31c7b0b552b95e112c07e8917b778f2b80599e5"
        ],
        [
            "Definition bnd_allocR := bnd_alloc.",
            "VernacDefinition",
            "9bd8ff25ebf5bd342ce534ae5c4d0df0b5623770"
        ],
        [
            "Definition val_allocbR := val_allocb.",
            "VernacDefinition",
            "51f57d77bc20b44e7c049937d6c4a4a92ee6c836"
        ],
        [
            "Definition try_allocbR := try_allocb.",
            "VernacDefinition",
            "01abb95fd7baf8d1cdc49a80481d720b7a55ff6b"
        ],
        [
            "Definition bnd_allocbR := bnd_allocb.",
            "VernacDefinition",
            "a308eca5ab714e627c87ce8853f282609de97a0c"
        ],
        [
            "Section EvalDeallocR.",
            "VernacBeginSection",
            "ce4fb23d402ac4bd24f6298daff7ea08210e2f18"
        ],
        [
            "Variables (A B : Type).",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Lemma val_deallocR (v : A) x i (f : forall k, update k i) (r : cont unit) : (def (f empty) -> r (Val tt) (f empty)) -> verify (dealloc_s x) (f (x :-> v)) r.",
            "VernacStartTheoremProof",
            "aca43ce3cb3ed983a4cfcff6880bd122d37a78fc"
        ],
        [
            "by rewrite !updateE un0h; apply: val_dealloc.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma try_deallocR s1 s2 (v : B) x i (f : forall k, update k i) (r : cont A) : verify (s1 tt) (f empty) r -> verify (try_s (dealloc_s x) s1 s2) (f (x :-> v)) r.",
            "VernacStartTheoremProof",
            "ef83facb3695a9324b4f7e529be101f6d3f48f37"
        ],
        [
            "by rewrite !updateE un0h; apply: try_dealloc.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bnd_deallocR s (v : B) x i (f : forall k, update k i) (r : cont A) : verify (s tt) (f empty) r -> verify (bind_s (dealloc_s x) s) (f (x :-> v)) r.",
            "VernacStartTheoremProof",
            "78e2fa923c1786209e6e695e58a17f658095bd43"
        ],
        [
            "by rewrite !updateE un0h; apply: bnd_dealloc.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EvalDeallocR.",
            "VernacEndSegment",
            "1b24fe35ffbcaa3062890094cd7d4c351b18cfa2"
        ],
        [
            "Definition val_throwR := val_throw.",
            "VernacDefinition",
            "5628758ccf7e98d08a6bcfed4b5ed39657f9fea1"
        ],
        [
            "Definition try_throwR := try_throw.",
            "VernacDefinition",
            "4a756ff4177772fbcecb423683f057add5e97a88"
        ],
        [
            "Definition bnd_throwR := bnd_throw.",
            "VernacDefinition",
            "1e37b960fab533de9d35fa28cd3483009330b9ea"
        ],
        [
            "Section EvalGhostR.",
            "VernacBeginSection",
            "362dfee96d1683be52ab6af2c8fbcdab33ecff75"
        ],
        [
            "Variables (A B C : Type) (t : C) (p : C -> Pred heap) (q : C -> post A).",
            "VernacAssumption",
            "faafdb24d75e7ea97a92892cec70ea06f7821f6e"
        ],
        [
            "Variables (s1 : A -> spec B) (s2 : exn -> spec B) (i j : heap).",
            "VernacAssumption",
            "cf2f0ae7431149219ac9b8bb5bc72a03e56561d4"
        ],
        [
            "Variables (f : forall k, update k j) (P : Pred heap).",
            "VernacAssumption",
            "36504d6c790d0134be4c9c2e9c36dafa7ebff85d"
        ],
        [
            "Lemma val_ghR (r : cont A) : let: s := (fun i => exists x, i \\In p x, fun y i m => forall x, i \\In p x -> q x y i m) in (forall x m, q t (Val x) i m -> def (f m) -> r (Val x) (f m)) -> (forall e m, q t (Exn e) i m -> def (f m) -> r (Exn e) (f m)) -> i \\In p t -> verify s (f i) r.",
            "VernacStartTheoremProof",
            "298421281c9c5d29183376e198dd2ded93d8a944"
        ],
        [
            "move=>H1 H2; rewrite updateE; apply: val_gh.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>x m; move: (H1 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>x m; move: (H2 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma val_gh1R (r : cont A) : let: Q := fun y i m => forall x, i \\In p x -> q x y i m in (i \\In p t -> P i) -> (forall x m, q t (Val x) i m -> def (f m) -> r (Val x) (f m)) -> (forall e m, q t (Exn e) i m -> def (f m) -> r (Exn e) (f m)) -> i \\In p t -> verify (P, Q) (f i) r.",
            "VernacStartTheoremProof",
            "a84413e560647af280b9b79e28730655c8d2fac9"
        ],
        [
            "move=>H1 H2 H3; rewrite updateE; apply: (val_gh1 H1).",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>x m; move: (H2 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>x m; move: (H3 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma try_ghR (r : cont B) : let: s := (fun i => exists x, i \\In p x, fun y i m => forall x, i \\In p x -> q x y i m) in (forall x m, q t (Val x) i m -> verify (s1 x) (f m) r) -> (forall e m, q t (Exn e) i m -> verify (s2 e) (f m) r) -> i \\In p t -> verify (try_s s s1 s2) (f i) r.",
            "VernacStartTheoremProof",
            "74812e54e25faa64cda41ac022814ebe12ca4852"
        ],
        [
            "move=>H1 H2; rewrite updateE; apply: try_gh.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>x m; move: (H1 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>x m; move: (H2 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma try_gh1R (r : cont B) : let: Q := fun y i m => forall x, i \\In p x -> q x y i m in (i \\In p t -> P i) -> (forall x m, q t (Val x) i m -> verify (s1 x) (f m) r) -> (forall e m, q t (Exn e) i m -> verify (s2 e) (f m) r) -> i \\In p t -> verify (try_s (P, Q) s1 s2) (f i) r.",
            "VernacStartTheoremProof",
            "cc817b224907fa26660cb563b34fadbd47f6be03"
        ],
        [
            "move=>H1 H2 H3; rewrite updateE; apply: (try_gh1 H1).",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>x m; move: (H2 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>x m; move: (H3 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bnd_ghR (r : cont B) : let: s := (fun i => exists x, i \\In p x, fun y i m => forall x, i \\In p x -> q x y i m) in (forall x m, q t (Val x) i m -> verify (s1 x) (f m) r) -> (forall e m, q t (Exn e) i m -> def (f m) -> r (Exn e) (f m)) -> i \\In p t -> verify (bind_s s s1) (f i) r.",
            "VernacStartTheoremProof",
            "a6447a5413f00d191d72f4b0b15f0dccbf74740c"
        ],
        [
            "move=>H1 H2; rewrite updateE; apply: bnd_gh.",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>x m; move: (H1 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>x m; move: (H2 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bnd_gh1R (r : cont B) : let: Q := fun y i m => forall x, i \\In p x -> q x y i m in (i \\In p t -> P i) -> (forall x m, q t (Val x) i m -> verify (s1 x) (f m) r) -> (forall e m, q t (Exn e) i m -> def (f m) -> r (Exn e) (f m)) -> i \\In p t -> verify (bind_s (P, Q) s1) (f i) r.",
            "VernacStartTheoremProof",
            "14a5a08c136c08c4ba812dd35156d6ae68d0bc32"
        ],
        [
            "move=>H1 H2 H3; rewrite updateE; apply: (bnd_gh1 H1).",
            "VernacExtend",
            "0fa388cebe8ed6372154caa26cd10c357f123670"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by move=>x m; move: (H2 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by move=>x m; move: (H3 x m); rewrite updateE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End EvalGhostR.",
            "VernacEndSegment",
            "70023f88b92c67f6cc5bdb17040ffe6d938d34e3"
        ],
        [
            "Structure val_form A i r (p : Prop):= ValForm {val_pivot :> spec A; _ : p -> verify val_pivot i r}.",
            "VernacInductive",
            "e6389db5a3b4bbe0bb5ef6d70134d407d5053d7a"
        ],
        [
            "Structure bnd_form A B i (s : A -> spec B) r (p : Prop) := BndForm {bnd_pivot :> spec A; _ : p -> verify (bind_s bnd_pivot s) i r}.",
            "VernacInductive",
            "ae324ec6b915bad34a9ed5ee495f9a93df58a536"
        ],
        [
            "Structure try_form A B i (s1 : A -> spec B) (s2 : exn -> spec B) r (p : Prop) := TryForm {try_pivot :> spec A; _ : p -> verify (try_s try_pivot s1 s2) i r}.",
            "VernacInductive",
            "cd49f8304690f880e1738d2cbbed35d3dacff5df"
        ],
        [
            "Definition hstep A i (r : cont A) p (e : val_form i r p) : p -> verify e i r := let: ValForm _ pf := e in pf.",
            "VernacDefinition",
            "e594c656986be5556cf23503513c9f19acb08f53"
        ],
        [
            "Definition hstep_bnd A B i (s : A -> spec B) r p (e : bnd_form i s r p) : p -> verify (bind_s e s) i r := let: BndForm _ pf := e in pf.",
            "VernacDefinition",
            "70204b3ab8d15c572de36b7633d4df876e2b3747"
        ],
        [
            "Canonical Structure bnd_case_form A B i (s : A -> spec B) r p (e : bnd_form i s r p) := ValForm (hstep_bnd e).",
            "VernacDefinition",
            "5be9d906bb94249155007f44ebf7a2c7b6973ad3"
        ],
        [
            "Lemma try_case_pf A B i (s1 : A -> spec B) (s2 : exn -> spec B) r p (e : try_form i s1 s2 r p) : p -> verify (try_s e s1 s2) i r.",
            "VernacStartTheoremProof",
            "7e0cf4d979ce8dbfe95ada3d72f65ad1cd036f93"
        ],
        [
            "by case:e=>[?]; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Canonical Structure val_ret_form A v i r := ValForm (@val_retR A v i r).",
            "VernacDefinition",
            "845c0e143cfbab15db1ee8f977d6897188d7b53d"
        ],
        [
            "Canonical Structure bnd_ret_form A B s v i r := BndForm (@bnd_retR A B s v i r).",
            "VernacDefinition",
            "9d74d4e56cd05f34d69dd4a5da85c4ce7ee57536"
        ],
        [
            "Canonical Structure try_ret_form A B s1 s2 v i r := TryForm (@try_retR A B s1 s2 v i r).",
            "VernacDefinition",
            "e56f061e1c299906617a9527fc19825e2efe2582"
        ],
        [
            "Canonical Structure val_read_form A v x r j f := ValForm (@val_readR A v x j f r).",
            "VernacDefinition",
            "f179b96ca219e5f2065fbb2be94b09acff614b12"
        ],
        [
            "Canonical Structure bnd_read_form A B s v x r j f := BndForm (@bnd_readR A B s v x j f r).",
            "VernacDefinition",
            "90d47788d394d26d93b7dcecbe35701f871cc386"
        ],
        [
            "Canonical Structure try_read_form A B s1 s2 v x r j f := TryForm (@try_readR A B s1 s2 v x j f r).",
            "VernacDefinition",
            "8dd22a5e14b8ca0823978731c10eb4146d7c230a"
        ],
        [
            "Canonical Structure val_write_form A B v w x r j f := ValForm (@val_writeR A B v w x j f r).",
            "VernacDefinition",
            "95e6ef6a6420b31c1d6c4bd29d583b7ee468ef1d"
        ],
        [
            "Canonical Structure bnd_write_form A B C s v w x r j f := BndForm (@bnd_writeR A B C s v w x j f r).",
            "VernacDefinition",
            "3f693d590fdc616ac57649abcc5730a3ab749c25"
        ],
        [
            "Canonical Structure try_write_form A B C s1 s2 v w x r j f := TryForm (@try_writeR A B C s1 s2 v w x j f r).",
            "VernacDefinition",
            "be015ab0e26297d3c81aeae7e281be67c67241f6"
        ],
        [
            "Canonical Structure val_alloc_form A v i r := ValForm (@val_allocR A v i r).",
            "VernacDefinition",
            "7f65a7f6402c940abddffca3f1d75dcf459bce4c"
        ],
        [
            "Canonical Structure bnd_alloc_form A B s v i r := BndForm (@bnd_allocR A B s v i r).",
            "VernacDefinition",
            "1b561428655b594a36b89cdee197a13d0bae2a36"
        ],
        [
            "Canonical Structure try_alloc_form A B s1 s2 v i r := TryForm (@try_allocR A B s1 s2 v i r).",
            "VernacDefinition",
            "eaa889ac42bb6b5f694d2e4f1d205aab5d517ec1"
        ],
        [
            "Canonical Structure val_allocb_form A v n i r := ValForm (@val_allocbR A v n i r).",
            "VernacDefinition",
            "67049b5179139e23d1da495164ee15dc8619b5cc"
        ],
        [
            "Canonical Structure bnd_allocb_form A B s v n i r := BndForm (@bnd_allocbR A B s v n i r).",
            "VernacDefinition",
            "ed95a87deb7c9478a91be193fea6a48e765ab15e"
        ],
        [
            "Canonical Structure try_allocb_form A B s1 s2 v n i r := TryForm (@try_allocbR A B s1 s2 v n i r).",
            "VernacDefinition",
            "17fd569b25cd63d46e3ca0d1fe71645e15798841"
        ],
        [
            "Canonical Structure val_dealloc_form A v x r j f := ValForm (@val_deallocR A v x j f r).",
            "VernacDefinition",
            "5c6a855ed97b10b6e01599b22de0c12a2e64b279"
        ],
        [
            "Canonical Structure bnd_dealloc_form A B s v x r j f := BndForm (@bnd_deallocR A B s v x j f r).",
            "VernacDefinition",
            "86598e63f3d7a2fc4833f57d5fb4d841566bb06a"
        ],
        [
            "Canonical Structure try_dealloc_form A B s1 s2 v x r j f := TryForm (@try_deallocR A B s1 s2 v x j f r).",
            "VernacDefinition",
            "9300838c7dc77c76faac09d4fce3c9e3421028fb"
        ],
        [
            "Ltac vauto := (do ?econstructor=>//).",
            "VernacExtend",
            "290112f28c45f9de4c0186114010e95ae1c98829"
        ],
        [
            "Example ex_read x : verify (bind_s (write_s x 4) (fun _=> read_s _ x)) (x :-> 0) (fun r _ => r = Val 4).",
            "VernacDefinition",
            "d3e7c20be45d53106418466f87f873fd3a829437"
        ],
        [
            "by do 2! [apply: hstep].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Abort.",
            "VernacAbort",
            "c7c176802253f03c8ef9f27e1c3c9d26e4650d85"
        ],
        [
            "Example ex_val_do (s : spec nat) (r : cont nat) (x y : ptr) : s.1 (y:->2) -> (forall x' m, s.2 (Val x') (y:->2) m -> def (x:->1:+m) -> r (Val x') (x:->1:+m)) -> (forall e m, s.2 (Exn e) (y:->2) m -> def (x:->1:+m) -> r (Exn e) (x:->1:+m)) -> verify s (x:->1 :+ y:->2) r.",
            "VernacDefinition",
            "0552aa6d2fa078903d8a095e17452a65a9be7a8b"
        ],
        [
            "move=>H1 H2 H3.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply: (val_doR _ (i:=y:->2))=>//=.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "Abort.",
            "VernacAbort",
            "c7c176802253f03c8ef9f27e1c3c9d26e4650d85"
        ],
        [
            "Example ex_bwd i x1 x2 (e : unit -> spec nat) q: verify (e tt) (i :+ (x1 :-> 1 :+ x2 :-> 4)) q -> verify (bind_s (write_s x2 4) e) (i :+ (x1 :-> 1 :+ x2 :-> 2)) q.",
            "VernacDefinition",
            "a9e29cfd31afbfc974b5188725fe5018e90b1009"
        ],
        [
            "by move=>H; apply: bnd_writeR.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Abort.",
            "VernacAbort",
            "c7c176802253f03c8ef9f27e1c3c9d26e4650d85"
        ],
        [
            "Example ex_fwd i x1 x2 (e : unit -> spec nat) q: verify (e tt) (i :+ (x1 :-> 1 :+ x2 :-> 4)) q -> verify (bind_s (write_s x2 4) e) (i :+ (x1 :-> 1 :+ x2 :-> 2)) q.",
            "VernacDefinition",
            "218b1149d56aa883dd4887c94eac2b5b0c0e518a"
        ],
        [
            "move=>H.",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "apply: (bnd_writeR (x:=x2) H).",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "Abort.",
            "VernacAbort",
            "c7c176802253f03c8ef9f27e1c3c9d26e4650d85"
        ]
    ],
    "proofs": [
        {
            "name": "updateE",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "by case: f=>[[j]] /=; rewrite /update_axiom /= => ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "found_pf",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "by rewrite /update_axiom unh0.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "left_pf",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "by rewrite updateE /update_axiom /= unA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "right_pf",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "by rewrite updateE /update_axiom /= unCA.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_readR",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "by rewrite updateE; apply: val_read.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "try_readR",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "by rewrite updateE; apply: try_read.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bnd_readR",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "by rewrite updateE; apply: bnd_read.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_writeR",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "by rewrite !updateE; apply: val_write.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "try_writeR",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "rewrite !updateE; apply: try_write.",
                        "VernacExtend",
                        "634a7639ed2fb7caf62757f84400927f5829b7d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bnd_writeR",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "by rewrite !updateE; apply: bnd_write.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "val_deallocR",
            "line_nb": 83,
            "steps": [
                {
                    "command": [
                        "by rewrite !updateE un0h; apply: val_dealloc.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "try_deallocR",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "by rewrite !updateE un0h; apply: try_dealloc.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bnd_deallocR",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "by rewrite !updateE un0h; apply: bnd_dealloc.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "try_case_pf",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "by case:e=>[?]; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}