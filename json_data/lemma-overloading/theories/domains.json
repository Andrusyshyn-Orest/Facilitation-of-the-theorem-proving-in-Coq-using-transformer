{
    "filename": "theories/domains.v",
    "coq_project": "lemma-overloading",
    "vernac_cmds": [
        [
            "From mathcomp Require Import ssreflect ssrbool ssrfun ssrnat eqtype.",
            "VernacRequire",
            "007e263451b1873128f7d6f0805189465b17b8e7"
        ],
        [
            "From LemmaOverloading Require Import rels prelude.",
            "VernacRequire",
            "271fb8aeaf5b5b356308454b37f9e4ab176662b9"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Module Poset.",
            "VernacDefineModule",
            "c474a856af252d254b38a6a42811187304920d60"
        ],
        [
            "Section RawMixin.",
            "VernacBeginSection",
            "e3754b7890ceda7a1e9fc19bf1bba72600d4f111"
        ],
        [
            "Record mixin_of (T : Type) := Mixin { mx_leq : T -> T -> Prop; mx_bot : T; _ : forall x, mx_leq mx_bot x; _ : forall x, mx_leq x x; _ : forall x y, mx_leq x y -> mx_leq y x -> x = y; _ : forall x y z, mx_leq x y -> mx_leq y z -> mx_leq x z}.",
            "VernacInductive",
            "0de9f1f4ab3a782e79f3feaeb5f5c3347e361f18"
        ],
        [
            "End RawMixin.",
            "VernacEndSegment",
            "d11e9719290e2271d84ac02cba6392743691af2c"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of T := Class {mixin : mixin_of T}.",
            "VernacInductive",
            "1b6dde5e2527eaf71fe14fb6b7900ec1a0682939"
        ],
        [
            "Structure type : Type := Pack {sort : Type; _ : class_of sort; _ : Type}.",
            "VernacInductive",
            "1f7de7d7485a5278baf8b7e9bc12865bb795c3a2"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c _ as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "1f4adccf23fd0f63d29abf28d1b185f093d8cf64"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c T.",
            "VernacDefinition",
            "cf926e300c6d83e83c3c8ca39f4408240dee4a1a"
        ],
        [
            "Definition pack (m0 : mixin_of T) := fun m & phant_id m0 m => Pack (@Class T m) T.",
            "VernacDefinition",
            "b8979f0892c50d421b69a48de6db0d2502a61d6e"
        ],
        [
            "Definition leq := mx_leq (mixin class).",
            "VernacDefinition",
            "f58abe3122b3a8da53f904424af9357c2c92c730"
        ],
        [
            "Definition bot := mx_bot (mixin class).",
            "VernacDefinition",
            "8507f652f222f5b8aa28170bcfb0665120ff6ac8"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Notation poset := Poset.type.",
            "VernacSyntacticDefinition",
            "7deb1d5545415977980b464881c7e0772d2cadd9"
        ],
        [
            "Notation PosetMixin := Poset.Mixin.",
            "VernacSyntacticDefinition",
            "6896a3d2385bf0511d33784574029024bff9049d"
        ],
        [
            "Notation Poset T m := (@pack T _ m id).",
            "VernacSyntacticDefinition",
            "ad0694dc234ebd66cf0e9fb42333cdbb33b16e72"
        ],
        [
            "Notation \"[ 'poset' 'of' T 'for' cT ]\" := (@clone T cT _ id) (at level 0, format \"[ 'poset' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "ffcb07597c88059191ff5428e77895f26792b888"
        ],
        [
            "Notation \"[ 'poset' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'poset' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "f867f079d1b4b43bc2c0b57377892efbbffeb8b4"
        ],
        [
            "Notation \"x <== y\" := (Poset.leq x y) (at level 70).",
            "VernacNotation",
            "5f777fc565dd3f2ee8dc50559a84f270d4df426c"
        ],
        [
            "Notation bot := Poset.bot.",
            "VernacSyntacticDefinition",
            "7d7fe90eba6949af5174e0ed5e0abb28a1a90611"
        ],
        [
            "Arguments Poset.bot [cT].",
            "VernacArguments",
            "4c08d037193dbf161518628abbb0f0183611377b"
        ],
        [
            "Prenex Implicits Poset.bot.",
            "VernacExtend",
            "f7f1a21d05dd8f03f3fb93fac2d02a20b1ec8325"
        ],
        [
            "Section Laws.",
            "VernacBeginSection",
            "695f613bd16932bed2a643f528019e75b089836e"
        ],
        [
            "Variable T : poset.",
            "VernacAssumption",
            "52374f312f162e332b3b33d854b078a25ab7cf0f"
        ],
        [
            "Lemma botP (x : T) : bot <== x.",
            "VernacStartTheoremProof",
            "5f64a1bcfc7e165ef0325528478e24dbcdc3afcf"
        ],
        [
            "by case: T x=>s [[leq b B]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma poset_refl (x : T) : x <== x.",
            "VernacStartTheoremProof",
            "25277e4f3e7cd6d74746ed2d4abaac7942353a88"
        ],
        [
            "by case: T x=>S [[leq b B R]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma poset_asym (x y : T) : x <== y -> y <== x -> x = y.",
            "VernacStartTheoremProof",
            "f34fb45c5e93ff09835e864b339c838abcd01431"
        ],
        [
            "by case: T x y=>S [[l b B R A Tr]] *; apply: (A).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma poset_trans (y x z : T) : x <== y -> y <== z -> x <== z.",
            "VernacStartTheoremProof",
            "f374fc7637cccf4fb4aded11eedda5234b8a641d"
        ],
        [
            "by case: T y x z=>S [[l b B R A Tr]] ? x y z; apply: (Tr).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Laws.",
            "VernacEndSegment",
            "891cb0b804f063d0ebb562c31c62229ffa9a25d3"
        ],
        [
            "Hint Resolve botP poset_refl : core.",
            "VernacHints",
            "87a3cad226901ecba66a2b7c99c1841bcfb69493"
        ],
        [
            "Add Parametric Relation (T : poset) : T (@Poset.leq T) reflexivity proved by (@poset_refl _) transitivity proved by (fun x y => @poset_trans _ y x) as poset_rel.",
            "VernacExtend",
            "24d1a2a71124c72ffd166ba833a0124c8f84db3d"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Poset.",
            "VernacEndSegment",
            "93d34b7bb49de0653432dfa6ff155b2d556a933e"
        ],
        [
            "Export Poset.Exports.",
            "VernacImport",
            "30a5ccd7aae8708f9a63374e0c666f0401fa44a7"
        ],
        [
            "Definition monotone (T1 T2 : poset) (f : T1 -> T2) := forall x y, x <== y -> f x <== f y.",
            "VernacDefinition",
            "dc58fa463d2c0f2bc56d0e4384c5f697d02dbfef"
        ],
        [
            "Section IdealDef.",
            "VernacBeginSection",
            "6a74580e7c5b62ed0daf885c01930f2ac8eaa05f"
        ],
        [
            "Variable T : poset.",
            "VernacAssumption",
            "52374f312f162e332b3b33d854b078a25ab7cf0f"
        ],
        [
            "Structure ideal (P : T) := Ideal {id_val : T; id_pf : id_val <== P}.",
            "VernacInductive",
            "85202f649325295b3367c8e6811192296b4f3f4c"
        ],
        [
            "Lemma relaxP (P1 P2 : T) : P1 <== P2 -> forall p, p <== P1 -> p <== P2.",
            "VernacStartTheoremProof",
            "df1153a1561e9c36c38973cd0eee9acb569edc9a"
        ],
        [
            "by move=>H1 p H2; apply: poset_trans H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition relax (P1 P2 : T) (x : ideal P1) (pf : P1 <== P2) := Ideal (relaxP pf (id_pf x)).",
            "VernacDefinition",
            "042cb2e6b37270ca460c194df460168609f424b9"
        ],
        [
            "End IdealDef.",
            "VernacEndSegment",
            "8732e5884827355d4abea7fb806f31bf16cd4be5"
        ],
        [
            "Section SubPoset.",
            "VernacBeginSection",
            "d126eca28ac20c9edbb9060a7876cfc20d5448c9"
        ],
        [
            "Variables (T : poset) (s : Pred T) (C : bot \\In s).",
            "VernacAssumption",
            "69fb3aa3d099443bb444026b8b035dafc31162e5"
        ],
        [
            "Local Notation tp := {x : T | x \\In s}.",
            "VernacSyntacticDefinition",
            "e94032a7d7c2f53a6c46f26faf9a296bd55f7e05"
        ],
        [
            "Definition sub_bot : tp := exist _ bot C.",
            "VernacDefinition",
            "3073cfb0d14d56597fc3b2105a883c9b88396425"
        ],
        [
            "Definition sub_leq (p1 p2 : tp) := sval p1 <== sval p2.",
            "VernacDefinition",
            "823e9b1c4bbb8f2da87451c39b1a807e0ad68eb5"
        ],
        [
            "Lemma sub_botP x : sub_leq sub_bot x.",
            "VernacStartTheoremProof",
            "755f8403e6068e994a2b6573ffecb4c938d42bd1"
        ],
        [
            "by apply: botP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_refl x : sub_leq x x.",
            "VernacStartTheoremProof",
            "ae1db6d39b0f952c3cb5384be4be7b5b919ec251"
        ],
        [
            "by rewrite /sub_leq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_asym x y : sub_leq x y -> sub_leq y x -> x = y.",
            "VernacStartTheoremProof",
            "413aab8188b6209abd1a2cae9478d09f146ae9b9"
        ],
        [
            "move: x y=>[x Hx][y Hy]; rewrite /sub_leq /= => H1 H2.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "move: (poset_asym H1 H2) Hy=> <- Hy; congr exist.",
            "VernacExtend",
            "891b4e47d01d65b54df65493918a5af5df35b545"
        ],
        [
            "by apply: proof_irrelevance.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_trans x y z : sub_leq x y -> sub_leq y z -> sub_leq x z.",
            "VernacStartTheoremProof",
            "2f6606622ced3666b023319e6d3a3e5e6b3f2990"
        ],
        [
            "move: x y z=>[x Hx][y Hy][z Hz]; rewrite /sub_leq /=.",
            "VernacExtend",
            "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
        ],
        [
            "by apply: poset_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subPosetMixin := PosetMixin sub_botP sub_refl sub_asym sub_trans.",
            "VernacDefinition",
            "aa076627c31094d95cd95d723c129d40e31e3169"
        ],
        [
            "Definition subPoset := Eval hnf in Poset tp subPosetMixin.",
            "VernacDefinition",
            "d50511d43c3d8666622a258165338acff57ba913"
        ],
        [
            "End SubPoset.",
            "VernacEndSegment",
            "38ea84db930b9b30febc1393fc8b07cd8b673e58"
        ],
        [
            "Section PairPoset.",
            "VernacBeginSection",
            "4338948f98340c55508574bfac6f4ef5df9e3b52"
        ],
        [
            "Variable (A B : poset).",
            "VernacAssumption",
            "b88ad5e83335f65391a32b6b97e78fabe5545797"
        ],
        [
            "Local Notation tp := (A * B)%type.",
            "VernacSyntacticDefinition",
            "897c8bd9c5978d6020db73a62c84fabc8017cfc3"
        ],
        [
            "Definition pair_bot : tp := (bot, bot).",
            "VernacDefinition",
            "52a147b5b94fa03746591a13f50d054f27c0e17b"
        ],
        [
            "Definition pair_leq (p1 p2 : tp) := p1.1 <== p2.1 /\\ p1.2 <== p2.2.",
            "VernacDefinition",
            "abaaa302c419de594699db7509447e16c4a27cdc"
        ],
        [
            "Lemma pair_botP x : pair_leq pair_bot x.",
            "VernacStartTheoremProof",
            "8a2c3037ac63c5ad048610c744750a1eebf50f07"
        ],
        [
            "by split; apply: botP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_refl x : pair_leq x x.",
            "VernacStartTheoremProof",
            "4ff36f04317b06a09dfa34d99902793d7263d7f8"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_asym x y : pair_leq x y -> pair_leq y x -> x = y.",
            "VernacStartTheoremProof",
            "ed56ef24fc41fbd9bee0a546ea03d58735505296"
        ],
        [
            "move: x y=>[x1 x2][y1 y2][/= H1 H2][/= H3 H4].",
            "VernacExtend",
            "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
        ],
        [
            "by congr (_, _); apply: poset_asym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_trans x y z : pair_leq x y -> pair_leq y z -> pair_leq x z.",
            "VernacStartTheoremProof",
            "a1f8d532c33e945347d7dc8a1c4ea9cc64520b0a"
        ],
        [
            "move: x y z=>[x1 x2][y1 y2][z1 z2][/= H1 H2][/= H3 H4]; split=>/=.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: poset_trans H3.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: poset_trans H4.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pairPosetMixin := PosetMixin pair_botP pair_refl pair_asym pair_trans.",
            "VernacDefinition",
            "56a6f6b0da38662adaa2a47017275c78789efc43"
        ],
        [
            "Canonical pairPoset := Eval hnf in Poset tp pairPosetMixin.",
            "VernacDefinition",
            "e374ca038617cc91bd604e956038210d7b866730"
        ],
        [
            "End PairPoset.",
            "VernacEndSegment",
            "028d85b9feb809cd5ffb59f916225d7623e1e80b"
        ],
        [
            "Section FunPoset.",
            "VernacBeginSection",
            "0119b9a384ce4a6ac345c330ae18f12a80571a97"
        ],
        [
            "Variable (A : Type) (B : poset).",
            "VernacAssumption",
            "ef2dd79da4f9c80aecb8058d150c4f1897ef2df6"
        ],
        [
            "Local Notation tp := (A -> B).",
            "VernacSyntacticDefinition",
            "de2225ca297cf36307df954e5fd96062d40b2dea"
        ],
        [
            "Definition fun_bot : tp := fun x => bot.",
            "VernacDefinition",
            "3cac0f0ccb9f3f86a3380a05f244ba59c316cad6"
        ],
        [
            "Definition fun_leq (p1 p2 : tp) := forall x, p1 x <== p2 x.",
            "VernacDefinition",
            "07d1085856053c31871a0ae7407740fa9103e6f6"
        ],
        [
            "Lemma fun_botP x : fun_leq fun_bot x.",
            "VernacStartTheoremProof",
            "8f5419f9b4a234ab79986beea4e6196b727a5296"
        ],
        [
            "by move=>y; apply: botP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fun_refl x : fun_leq x x.",
            "VernacStartTheoremProof",
            "73046233707c01ecf5f9ca6d7c28fb5a13921817"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fun_asym x y : fun_leq x y -> fun_leq y x -> x = y.",
            "VernacStartTheoremProof",
            "4645afbd711c4cce12b7ab8c647f8b760c46ebb8"
        ],
        [
            "move=>H1 H2; apply: fext=>z; by apply: poset_asym; [apply: H1 | apply: H2].",
            "VernacExtend",
            "863cc135acc45d5c9d170c836bc1464e830f66a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fun_trans x y z : fun_leq x y -> fun_leq y z -> fun_leq x z.",
            "VernacStartTheoremProof",
            "b8623ce02258ce411934ef4c2af9d5bd025c9333"
        ],
        [
            "by move=>H1 H2 t; apply: poset_trans (H2 t).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition funPosetMixin := PosetMixin fun_botP fun_refl fun_asym fun_trans.",
            "VernacDefinition",
            "95e8541e60da7baf2462bdc13491fe99e90cf6c1"
        ],
        [
            "Canonical funPoset := Eval hnf in Poset tp funPosetMixin.",
            "VernacDefinition",
            "cf72220cc62f1852cfadb38a4b1353e1e281b75c"
        ],
        [
            "End FunPoset.",
            "VernacEndSegment",
            "b4f71815a9f571e11cecdeba87bfea2185fd898f"
        ],
        [
            "Section DFunPoset.",
            "VernacBeginSection",
            "a717fe272180a3e6d15f6bf21184d5c0318b597a"
        ],
        [
            "Variables (A : Type) (B : A -> poset).",
            "VernacAssumption",
            "777872ec4d674d2a4be8f47ccdbd3fcbd732e420"
        ],
        [
            "Local Notation tp := (forall x, B x).",
            "VernacSyntacticDefinition",
            "4f1fa7c28d837362fd061bff7b64a75f8ddc8c69"
        ],
        [
            "Definition dfun_bot : tp := fun x => bot.",
            "VernacDefinition",
            "467bcccea31e5504e3d3a1a1a4d9cffd5042312a"
        ],
        [
            "Definition dfun_leq (p1 p2 : tp) := forall x, p1 x <== p2 x.",
            "VernacDefinition",
            "d65eec7a84858860ac1be149f25ff2ad59d271bf"
        ],
        [
            "Lemma dfun_botP x : dfun_leq dfun_bot x.",
            "VernacStartTheoremProof",
            "c844e31f19132a2a7c2f1ce10fdfb6078996d88e"
        ],
        [
            "by move=>y; apply: botP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dfun_refl x : dfun_leq x x.",
            "VernacStartTheoremProof",
            "35f13366451275403f651be8331970d038693ec4"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dfun_asym x y : dfun_leq x y -> dfun_leq y x -> x = y.",
            "VernacStartTheoremProof",
            "0aa488a6698a4d6a6964bee48e6a87018335ca85"
        ],
        [
            "move=>H1 H2; apply: fext=>z; by apply: poset_asym; [apply: H1 | apply: H2].",
            "VernacExtend",
            "863cc135acc45d5c9d170c836bc1464e830f66a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dfun_trans x y z : dfun_leq x y -> dfun_leq y z -> dfun_leq x z.",
            "VernacStartTheoremProof",
            "215d90ccd7b42bf912beafa62c98bc0217b9b7df"
        ],
        [
            "by move=>H1 H2 t; apply: poset_trans (H2 t).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition dfunPosetMixin := PosetMixin dfun_botP dfun_refl dfun_asym dfun_trans.",
            "VernacDefinition",
            "613f5f8da67e2ea2e7b3e3f194117d4077481d19"
        ],
        [
            "Definition dfunPoset := Eval hnf in Poset tp dfunPosetMixin.",
            "VernacDefinition",
            "1d28b3e9c5ecf64b0b075d11997d6de04dc7ad06"
        ],
        [
            "End DFunPoset.",
            "VernacEndSegment",
            "6a2bb8110bf69453b828f321d7ae10dec9a584a9"
        ],
        [
            "Section IdealPoset.",
            "VernacBeginSection",
            "0826198abe808196383907dc587e5beadfbc972b"
        ],
        [
            "Variable (T : poset) (P : T).",
            "VernacAssumption",
            "8ce590eecbcde4ab284dbc3b2436ee41154d0af2"
        ],
        [
            "Definition ideal_bot := Ideal (botP P).",
            "VernacDefinition",
            "d331ef85d3109740cba6cb3384e539a7b00b1d52"
        ],
        [
            "Definition ideal_leq (p1 p2 : ideal P) := id_val p1 <== id_val p2.",
            "VernacDefinition",
            "c44d494abef9d3c81f93d4d3a90c72e6a0f3ec9c"
        ],
        [
            "Lemma ideal_botP x : ideal_leq ideal_bot x.",
            "VernacStartTheoremProof",
            "1897d36c543656bea5038c359ad9cd7a2fb90850"
        ],
        [
            "by apply: botP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ideal_refl x : ideal_leq x x.",
            "VernacStartTheoremProof",
            "8212863f407197ae03bcc20aa8ebf3b2bffe3838"
        ],
        [
            "by case: x=>x H; rewrite /ideal_leq.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ideal_asym x y : ideal_leq x y -> ideal_leq y x -> x = y.",
            "VernacStartTheoremProof",
            "6b3be6549d9b651ada1571002f3b6674203ba35c"
        ],
        [
            "move: x y=>[x1 H1][x2 H2]; rewrite /ideal_leq /= => H3 H4; move: H1 H2.",
            "VernacExtend",
            "a5f56fb00bcaec650c845440add7c784b2a6a909"
        ],
        [
            "rewrite (poset_asym H3 H4)=>H1 H2.",
            "VernacExtend",
            "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
        ],
        [
            "congr Ideal; apply: proof_irrelevance.",
            "VernacExtend",
            "385739dd8a4f73703d3828c61e1780a276bfaa31"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ideal_trans x y z : ideal_leq x y -> ideal_leq y z -> ideal_leq x z.",
            "VernacStartTheoremProof",
            "19defc76b8e4d3f39ffe8fae71a4613d42b8fe07"
        ],
        [
            "by apply: poset_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition idealPosetMixin := PosetMixin ideal_botP ideal_refl ideal_asym ideal_trans.",
            "VernacDefinition",
            "3eac9fd69788e94fcbd317e6a18a6ee6090c070a"
        ],
        [
            "Canonical idealPoset := Eval hnf in Poset (ideal P) idealPosetMixin.",
            "VernacDefinition",
            "b395c7544aa4336e5addc9d452aace5fcc941585"
        ],
        [
            "End IdealPoset.",
            "VernacEndSegment",
            "78eb30341e0fee7934ce581a396fe8b55e24b34f"
        ],
        [
            "Section PropPoset.",
            "VernacBeginSection",
            "d323a65336dcd0ca792e7618d0fc5b51c9f13d5a"
        ],
        [
            "Definition prop_bot := False.",
            "VernacDefinition",
            "f9b9e196ea5840916c8db32f341a8a42c1904805"
        ],
        [
            "Definition prop_leq (p1 p2 : Prop) := p1 -> p2.",
            "VernacDefinition",
            "b5b457b2bbca1c39a20ac874997cd39eec04c60a"
        ],
        [
            "Lemma prop_botP x : prop_leq prop_bot x.",
            "VernacStartTheoremProof",
            "b1fe3283e900635c14a6987a50718021c51becf7"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop_refl x : prop_leq x x.",
            "VernacStartTheoremProof",
            "45e9c3acd90a08e06eb1298683f9350bea4a641a"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop_asym x y : prop_leq x y -> prop_leq y x -> x = y.",
            "VernacStartTheoremProof",
            "b4bdca1141b7cf5abf16982690c086094e6cc0b4"
        ],
        [
            "by move=>H1 H2; apply: pext.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop_trans x y z : prop_leq x y -> prop_leq y z -> prop_leq x z.",
            "VernacStartTheoremProof",
            "59f42e7b94d316278773c8898a954ded5e99f593"
        ],
        [
            "by move=>H1 H2; move/H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition propPosetMixin := PosetMixin prop_botP prop_refl prop_asym prop_trans.",
            "VernacDefinition",
            "f6c3ce604471963b578a2951efba241597af8f0f"
        ],
        [
            "Canonical propPoset := Eval hnf in Poset Prop propPosetMixin.",
            "VernacDefinition",
            "db9df8f82378a37dcf244726a95edfdd926407c1"
        ],
        [
            "End PropPoset.",
            "VernacEndSegment",
            "af8a957b6eba4448d327fe44a8d6792d6ca26ab0"
        ],
        [
            "Section PredPoset.",
            "VernacBeginSection",
            "415a3d480e384197035fe5c32ae9cbfaf9c0fdd7"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Definition predPosetMixin : Poset.mixin_of (Pred A) := funPosetMixin A propPoset.",
            "VernacDefinition",
            "e4bfd92be7596d1b2a24760a33139056a3f67ff0"
        ],
        [
            "Canonical predPoset := Eval hnf in Poset (Pred A) predPosetMixin.",
            "VernacDefinition",
            "0ab25dbd2ab7a02417832921c93943f47ac6dde9"
        ],
        [
            "End PredPoset.",
            "VernacEndSegment",
            "3fb8a9948638632ad1f8b483edac4cdb41489197"
        ],
        [
            "Section NatPoset.",
            "VernacBeginSection",
            "86bb209f92492a41670fbce8dba94084d568df87"
        ],
        [
            "Lemma nat_botP x : 0 <= x.",
            "VernacStartTheoremProof",
            "916a183b129a788a53d126e33c11abb60ff60819"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_refl x : x <= x.",
            "VernacStartTheoremProof",
            "622ce5a2083f2d0b742b032e16f208e5f91970d6"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_asym x y : x <= y -> y <= x -> x = y.",
            "VernacStartTheoremProof",
            "cf2bfb466c4ca203a1a303ea90a0559d497bdbbd"
        ],
        [
            "by move=>H1 H2; apply: anti_leq; rewrite H1 H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nat_trans x y z : x <= y -> y <= z -> x <= z.",
            "VernacStartTheoremProof",
            "bd2e718ed002ad395923fe0284bafebc4d0b9b9a"
        ],
        [
            "by apply: leq_trans.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition natPosetMixin := PosetMixin nat_botP nat_refl nat_asym nat_trans.",
            "VernacDefinition",
            "1316c9c77ce107f210b435277ede3a8dbc175e81"
        ],
        [
            "Canonical natPoset := Eval hnf in Poset nat natPosetMixin.",
            "VernacDefinition",
            "bd4b98bcd353e6d34472aaa1f444d316eb01d3eb"
        ],
        [
            "End NatPoset.",
            "VernacEndSegment",
            "f7bb7bc1c4c6b31a38c6de7ade8561e29fa7e233"
        ],
        [
            "Module Lattice.",
            "VernacDefineModule",
            "6a172af2b3902f31917121c206fc62ecab98570a"
        ],
        [
            "Section RawMixin.",
            "VernacBeginSection",
            "e3754b7890ceda7a1e9fc19bf1bba72600d4f111"
        ],
        [
            "Variable T : poset.",
            "VernacAssumption",
            "52374f312f162e332b3b33d854b078a25ab7cf0f"
        ],
        [
            "Record mixin_of := Mixin { mx_sup : Pred T -> T; _ : forall (s : Pred T) x, x \\In s -> x <== mx_sup s; _ : forall (s : Pred T) x, (forall y, y \\In s -> y <== x) -> mx_sup s <== x}.",
            "VernacInductive",
            "7cb945179895d0a56161896c8ea5d5f27d0ffa35"
        ],
        [
            "End RawMixin.",
            "VernacEndSegment",
            "d11e9719290e2271d84ac02cba6392743691af2c"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of (T : Type) := Class { base : Poset.class_of T; mixin : mixin_of (Poset.Pack base T)}.",
            "VernacInductive",
            "d8b40483d86c748aa80e9427b9f94da70df8c88d"
        ],
        [
            "Local Coercion base : class_of >-> Poset.class_of.",
            "VernacCoercion",
            "ede77bc520652ae127449b4aa003886d42e3d2e5"
        ],
        [
            "Structure type : Type := Pack {sort : Type; _ : class_of sort; _ : Type}.",
            "VernacInductive",
            "1f7de7d7485a5278baf8b7e9bc12865bb795c3a2"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c _ as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "1f4adccf23fd0f63d29abf28d1b185f093d8cf64"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c T.",
            "VernacDefinition",
            "cf926e300c6d83e83c3c8ca39f4408240dee4a1a"
        ],
        [
            "Definition pack b0 (m0 : mixin_of (Poset.Pack b0 T)) := fun m & phant_id m0 m => Pack (@Class T b0 m) T.",
            "VernacDefinition",
            "6aace9065f591ed5b8fd9f50b52fdf72006f594d"
        ],
        [
            "Definition sup (s : Pred cT) : cT := mx_sup (mixin class) s.",
            "VernacDefinition",
            "e0d3cfd13606516e246a07d52310dd56fc21d3f8"
        ],
        [
            "Definition poset := Poset.Pack class cT.",
            "VernacDefinition",
            "95798693f60c032add49da3c0bd889fe1a660c4f"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Exports.",
            "VernacDefineModule",
            "d4a1114ec53f746523a7dec57823f7f03e51fa24"
        ],
        [
            "Coercion base : class_of >-> Poset.class_of.",
            "VernacCoercion",
            "1abfe91da4ff82664a0b06b1adfaa66a56b6c0e1"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Coercion poset : type >-> Poset.type.",
            "VernacCoercion",
            "06f4f5e432039e76a020b3facfdb50a269a73726"
        ],
        [
            "Canonical Structure poset.",
            "VernacCanonical",
            "f6cb165c0a413ccb1e5dbbaca8f7940a76ca8d44"
        ],
        [
            "Notation lattice := Lattice.type.",
            "VernacSyntacticDefinition",
            "1be806d263a9e6b8c1fc392a556c9353ca0dce49"
        ],
        [
            "Notation LatticeMixin := Lattice.Mixin.",
            "VernacSyntacticDefinition",
            "5b8d3b9ece61eca5e547801a69ffa93e0c2a06f3"
        ],
        [
            "Notation Lattice T m := (@pack T _ _ m id).",
            "VernacSyntacticDefinition",
            "de6936e45f8b66b38f481a1f4c82ac9875367c58"
        ],
        [
            "Notation \"[ 'lattice' 'of' T 'for' cT ]\" := (@clone T cT _ id) (at level 0, format \"[ 'lattice' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "8ec6fb66640efa5e7d51b553d6176fbfb28d0f4e"
        ],
        [
            "Notation \"[ 'lattice' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'lattice' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "a17011fd96f1ea2b3e144b2f4bfc86dd7dc98a68"
        ],
        [
            "Arguments Lattice.sup [cT].",
            "VernacArguments",
            "faa56d4daf5ab415219e9906f56bbd4ab5b5f223"
        ],
        [
            "Prenex Implicits Lattice.sup.",
            "VernacExtend",
            "5f5fa6bd7303e4bd65ddfd2033200c95195353d8"
        ],
        [
            "Notation sup := Lattice.sup.",
            "VernacSyntacticDefinition",
            "18ceda54115e3d8e5e833125048fd8a8cb25c381"
        ],
        [
            "Section Laws.",
            "VernacBeginSection",
            "695f613bd16932bed2a643f528019e75b089836e"
        ],
        [
            "Variable T : lattice.",
            "VernacAssumption",
            "ff8d14585db4d7598dcb072212ae22cf063b952f"
        ],
        [
            "Lemma supP (s : Pred T) x : x \\In s -> x <== sup s.",
            "VernacStartTheoremProof",
            "056eca690178accf601e8d6113ae99dba5dc11f8"
        ],
        [
            "by case: T s x=>S [[p]][/= s H1 *]; apply: H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma supM (s : Pred T) x : (forall y, y \\In s -> y <== x) -> sup s <== x.",
            "VernacStartTheoremProof",
            "653ce8d6515526d692f3bc2758782a82a1bd33b2"
        ],
        [
            "by case: T s x=>S [[p]][/= s H1 H2 *]; apply: (H2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Laws.",
            "VernacEndSegment",
            "891cb0b804f063d0ebb562c31c62229ffa9a25d3"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End Lattice.",
            "VernacEndSegment",
            "0fc6493ad5c5b9c19654782cde3f8e20330af90c"
        ],
        [
            "Export Lattice.Exports.",
            "VernacImport",
            "ed52fb5220db1818b0351243f5e12cd48a2b5760"
        ],
        [
            "Section Infimum.",
            "VernacBeginSection",
            "4993c85c8d4739eafff23c51904b39d4421dc9f2"
        ],
        [
            "Variable T : lattice.",
            "VernacAssumption",
            "ff8d14585db4d7598dcb072212ae22cf063b952f"
        ],
        [
            "Definition inf (s : Pred T) := sup [Pred x : T | forall y, y \\In s -> x <== y].",
            "VernacDefinition",
            "39e60892c7adad2ff8626760940589a9dfa36cee"
        ],
        [
            "Lemma infP s : forall x, x \\In s -> inf s <== x.",
            "VernacStartTheoremProof",
            "d90115767741b4ca654bc25983a9f23f922a3ca0"
        ],
        [
            "by move=>x H; apply: supM=>y; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma infM s : forall x, (forall y, y \\In s -> x <== y) -> x <== inf s.",
            "VernacStartTheoremProof",
            "7af32061dd2495d875761e78c84cfafff31f0d42"
        ],
        [
            "by apply: supP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Infimum.",
            "VernacEndSegment",
            "838f0ba8cf9f2c532bb45f6f2a53399498a921b4"
        ],
        [
            "Section Lat.",
            "VernacBeginSection",
            "3e5e8c01a49001e949e0c4469ff0245c2d39e59e"
        ],
        [
            "Variable T : lattice.",
            "VernacAssumption",
            "ff8d14585db4d7598dcb072212ae22cf063b952f"
        ],
        [
            "Definition tarski_lfp (f : T -> T) := inf [Pred x : T | f x <== x].",
            "VernacDefinition",
            "24e030738895eac459b2ea08d64b8763187b2b67"
        ],
        [
            "Definition tarski_gfp (f : T -> T) := sup [Pred x : T | x <== f x].",
            "VernacDefinition",
            "5539f6d2407d21257e9d84190ccaaf36ef895675"
        ],
        [
            "Definition sup_closed (T : lattice) := [Pred s : Pred T | bot \\In s /\\ forall d, d <=p s -> sup d \\In s].",
            "VernacDefinition",
            "b80eb451ddf2fd8778e7dbe7d83fb34966c67800"
        ],
        [
            "Definition sup_closure (T : lattice) (s : Pred T) := [Pred p : T | forall t : Pred T, s <=p t -> t \\In sup_closed T -> p \\In t].",
            "VernacDefinition",
            "9e90dcf96ef0ba7c4c7b273767f251f3c0c0ee15"
        ],
        [
            "End Lat.",
            "VernacEndSegment",
            "4d8f85af8f174808c85c61d4e531232b63eb424d"
        ],
        [
            "Arguments sup_closed [T].",
            "VernacArguments",
            "92ef6a1035f37b9a030786737454516597ec8724"
        ],
        [
            "Arguments sup_closure [T].",
            "VernacArguments",
            "051c758fc059b8cea277d70ad990626e5088488d"
        ],
        [
            "Prenex Implicits sup_closed sup_closure.",
            "VernacExtend",
            "088bf99a8c098065f6936c97c1519bc81d608269"
        ],
        [
            "Section BasicProperties.",
            "VernacBeginSection",
            "801f201f840a2a358edb77326dfdb4e0482a41df"
        ],
        [
            "Variable T : lattice.",
            "VernacAssumption",
            "ff8d14585db4d7598dcb072212ae22cf063b952f"
        ],
        [
            "Lemma sup_mono (s1 s2 : Pred T) : s1 <=p s2 -> sup s1 <== sup s2.",
            "VernacStartTheoremProof",
            "c6b6fad3be645f7f550771c90da97be633b5abfd"
        ],
        [
            "by move=>H; apply: supM=>y; move/H; apply: supP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma supE (s1 s2 : Pred T) : s1 =p s2 -> sup s1 = sup s2.",
            "VernacStartTheoremProof",
            "950432f33c67d8cf7ac442322a43a75a0b3415b7"
        ],
        [
            "by move=>H; apply: poset_asym; apply: supM=>y; move/H; apply: supP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tarski_lfp_fixed (f : T -> T) : monotone f -> f (tarski_lfp f) = tarski_lfp f.",
            "VernacStartTheoremProof",
            "89bc216ff7dde2b85b1bb5fd2694e541da643879"
        ],
        [
            "move=>M; suff L: f (tarski_lfp f) <== tarski_lfp f.",
            "VernacExtend",
            "39acb869359c856109095a218f85253dc109a566"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: poset_asym=>//; apply: infP; apply: M L.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: infM=>x L; apply: poset_trans (L); apply: M; apply: infP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tarski_lfp_least f : forall x : T, f x = x -> tarski_lfp f <== x.",
            "VernacStartTheoremProof",
            "ebbb1f74e667d2ea68406aef5fb90e75f7ff9b07"
        ],
        [
            "by move=>x H; apply: infP; rewrite InE /= H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tarski_gfp_fixed (f : T -> T) : monotone f -> f (tarski_gfp f) = tarski_gfp f.",
            "VernacStartTheoremProof",
            "f378dfaf2a2acd1df150d047f3e0c3e7b08cb849"
        ],
        [
            "move=>M; suff L: tarski_gfp f <== f (tarski_gfp f).",
            "VernacExtend",
            "39acb869359c856109095a218f85253dc109a566"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: poset_asym=>//; apply: supP; apply: M L.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: supM=>x L; apply: poset_trans (L) _; apply: M; apply: supP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tarski_gfp_greatest f : forall x : T, f x = x -> x <== tarski_gfp f.",
            "VernacStartTheoremProof",
            "3c74e2ba220062174834fedbb7759cd8ac0a16c2"
        ],
        [
            "by move=>x H; apply: supP; rewrite InE /= H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sup_clos_sub (s : Pred T) : s <=p sup_closure s.",
            "VernacStartTheoremProof",
            "eb0a2b9dae0c6ba33951f6c3585501de3d40b317"
        ],
        [
            "by move=>p H1 t H2 H3; apply: H2 H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sup_clos_min (s : Pred T) : forall t, s <=p t -> sup_closed t -> sup_closure s <=p t.",
            "VernacStartTheoremProof",
            "f35d176b9f6ac3ce2bad1f299ecfe3830b15b813"
        ],
        [
            "by move=>t H1 H2 p; move/(_ _ H1 H2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sup_closP (s : Pred T) : sup_closed (sup_closure s).",
            "VernacStartTheoremProof",
            "56321cf29ab744b46cf104ad12b690565970134c"
        ],
        [
            "split; first by move=>t _ [].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=>d H1 t H3 H4; move: (sup_clos_min H3 H4)=>{H3} H3.",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "by case: H4=>_; apply=>// x; move/H1; move/H3.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sup_clos_idemp (s : Pred T) : sup_closed s -> sup_closure s =p s.",
            "VernacStartTheoremProof",
            "97fa4392e8b8a81f3480e421e43f9fcdf5908ed1"
        ],
        [
            "by move=>p; split; [apply: sup_clos_min | apply: sup_clos_sub].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sup_clos_mono (s1 s2 : Pred T) : s1 <=p s2 -> sup_closure s1 <=p sup_closure s2.",
            "VernacStartTheoremProof",
            "9d682739297a1e8ca3745d284a4d8a83c42f4b12"
        ],
        [
            "move=>H1; apply: sup_clos_min (sup_closP s2)=>p H2.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply: sup_clos_sub; apply: H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BasicProperties.",
            "VernacEndSegment",
            "cfea44130858dbc2880fe337f2c5208c3eef6730"
        ],
        [
            "Section SubLattice.",
            "VernacBeginSection",
            "51b5cdba0ee6a1993834d6793ba4494c9f11ff99"
        ],
        [
            "Variables (T : lattice) (s : Pred T) (C : sup_closed s).",
            "VernacAssumption",
            "df97f53831754ed12eee5910a11a4fee7e84888e"
        ],
        [
            "Local Notation tp := (subPoset (proj1 C)).",
            "VernacSyntacticDefinition",
            "3f435a8941b28f674c2e5421270b5e8ae09dca49"
        ],
        [
            "Definition sub_sup' (u : Pred tp) : T := sup [Pred x : T | exists y, y \\In u /\\ x = sval y].",
            "VernacDefinition",
            "8a2ecc0b8e03d06904756f9951e2c611ef521f55"
        ],
        [
            "Lemma sub_supX (u : Pred tp) : sub_sup' u \\In s.",
            "VernacStartTheoremProof",
            "b29ed1c0a1bcff9719d462ebd94e103c54e76d8e"
        ],
        [
            "by case: C u=>P /= H u; apply: H=>t [[y]] H1 [_] ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sub_sup (u : Pred tp) : tp := exist _ (sub_sup' u) (sub_supX u).",
            "VernacDefinition",
            "314a17e65563e0d840d3bfb0e10c1281699b9446"
        ],
        [
            "Lemma sub_supP (u : Pred tp) (x : tp) : x \\In u -> x <== sub_sup u.",
            "VernacStartTheoremProof",
            "f89c31a6b994a4bbccf37a4d0f00ecdede02c7f6"
        ],
        [
            "by move=>H; apply: supP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_supM (u : Pred tp) (x : tp) : (forall y, y \\In u -> y <== x) -> sub_sup u <== x.",
            "VernacStartTheoremProof",
            "d5a9b31002f03a038858dd661fbfeddd5840dcef"
        ],
        [
            "by move=>H; apply: supM=>y [z][H1] ->; apply: H H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subLatticeMixin := LatticeMixin sub_supP sub_supM.",
            "VernacDefinition",
            "ead7ede48cdc6d7e051b2ca3e86fca3d6f0e54e3"
        ],
        [
            "Definition subLattice := Eval hnf in Lattice {x : T | x \\In s} subLatticeMixin.",
            "VernacDefinition",
            "3097af429536a67a1dc82a9c5aa1f14d76795ef4"
        ],
        [
            "End SubLattice.",
            "VernacEndSegment",
            "9f6464a33d7d05a49d95d757380b4d6b1eb6ceb9"
        ],
        [
            "Section PairLattice.",
            "VernacBeginSection",
            "6e86db58e1939c95c2a2be81bcaa08cd74b42f76"
        ],
        [
            "Variables (A B : lattice).",
            "VernacAssumption",
            "d2a8b5ce515a789999be2aa0c0b45f036dccebd4"
        ],
        [
            "Local Notation tp := (A * B)%type.",
            "VernacSyntacticDefinition",
            "897c8bd9c5978d6020db73a62c84fabc8017cfc3"
        ],
        [
            "Definition pair_sup (s : Pred tp) : tp := (sup [Pred p | exists f, p = f.1 /\\ f \\In s], sup [Pred p | exists f, p = f.2 /\\ f \\In s]).",
            "VernacDefinition",
            "7ddbac3d4620c6a8f2ad389cfa62d62ce98f925f"
        ],
        [
            "Lemma pair_supP (s : Pred tp) (p : tp) : p \\In s -> p <== pair_sup s.",
            "VernacStartTheoremProof",
            "25206454c6be71d6e30bed8a96d822c859279170"
        ],
        [
            "by move=>H; split; apply: supP; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_supM (s : Pred tp) (p : tp) : (forall q, q \\In s -> q <== p) -> pair_sup s <== p.",
            "VernacStartTheoremProof",
            "2b657e9343e9b53d9d35a09879fdc76742bdb46f"
        ],
        [
            "by move=>H; split; apply: supM=>y [f][->]; case/H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pairLatticeMixin := LatticeMixin pair_supP pair_supM.",
            "VernacDefinition",
            "7dcff118d7a90ac465f8c12931469a61b8b5a8da"
        ],
        [
            "Canonical pairLattice := Eval hnf in Lattice tp pairLatticeMixin.",
            "VernacDefinition",
            "f1b02b2233e841fb72b71f04c8f3ceb72d8af472"
        ],
        [
            "End PairLattice.",
            "VernacEndSegment",
            "ec5505da734ef53ba5de651695c1db1a271b8fc6"
        ],
        [
            "Section FunLattice.",
            "VernacBeginSection",
            "f17f317c233f4fbdebb3f19e8ec35d1e751a6363"
        ],
        [
            "Variables (A : Type) (B : lattice).",
            "VernacAssumption",
            "9451355d4a0ddac88182d18b659c00bef8da7eb7"
        ],
        [
            "Local Notation tp := (A -> B).",
            "VernacSyntacticDefinition",
            "de2225ca297cf36307df954e5fd96062d40b2dea"
        ],
        [
            "Definition fun_sup (s : Pred tp) : tp := fun x => sup [Pred p | exists f, f \\In s /\\ p = f x].",
            "VernacDefinition",
            "73f3c526e40a18ec8d23f6b1b5db0f6c02454504"
        ],
        [
            "Lemma fun_supP (s : Pred tp) (p : tp) : p \\In s -> p <== fun_sup s.",
            "VernacStartTheoremProof",
            "70eebb7d513fdf475866b078908cab9303fbead2"
        ],
        [
            "by move=>H x; apply: supP; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fun_supM (s : Pred tp) (p : tp) : (forall q, q \\In s -> q <== p) -> fun_sup s <== p.",
            "VernacStartTheoremProof",
            "f022ad23cbfbd00c62ce20c33f3a546007f90f66"
        ],
        [
            "by move=>H t; apply: supM=>x [f][H1] ->; apply: H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition funLatticeMixin := LatticeMixin fun_supP fun_supM.",
            "VernacDefinition",
            "f3917d65bd423a728923c1040f4627af6853bb4c"
        ],
        [
            "Canonical funLattice := Eval hnf in Lattice tp funLatticeMixin.",
            "VernacDefinition",
            "6f0903c8496d9a9dcec733d19d06a7f53ced4d87"
        ],
        [
            "End FunLattice.",
            "VernacEndSegment",
            "6e6382d71c8545bf8917332ff066a9b894b83752"
        ],
        [
            "Section DFunLattice.",
            "VernacBeginSection",
            "f2f3b9663b4a0b66e11d8d19b8fe9a5b92c8675f"
        ],
        [
            "Variables (A : Type) (B : A -> lattice).",
            "VernacAssumption",
            "553555007b5c7df98e216ab15a6d9f9a7fae0e1a"
        ],
        [
            "Local Notation tp := (dfunPoset B).",
            "VernacSyntacticDefinition",
            "58b3e164b45de9b5d3b9260e80fedd4cf4f86dfe"
        ],
        [
            "Definition dfun_sup (s : Pred tp) : tp := fun x => sup [Pred p | exists f, f \\In s /\\ p = f x].",
            "VernacDefinition",
            "97748e5f6abd016559a7f4008999f13ce8d6626d"
        ],
        [
            "Lemma dfun_supP (s : Pred tp) (p : tp) : p \\In s -> p <== dfun_sup s.",
            "VernacStartTheoremProof",
            "2deca90dc3fc4338ba797eed14c66ed0b9b49070"
        ],
        [
            "by move=>H x; apply: supP; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dfun_supM (s : Pred tp) (p : tp) : (forall q, q \\In s -> q <== p) -> dfun_sup s <== p.",
            "VernacStartTheoremProof",
            "65c963f3be812a9f72388b3392df06920293b73d"
        ],
        [
            "by move=>H t; apply: supM=>x [f][H1] ->; apply: H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition dfunLatticeMixin := LatticeMixin dfun_supP dfun_supM.",
            "VernacDefinition",
            "e1e9b22161faf26dceec52b5548207f6ccf0e097"
        ],
        [
            "Definition dfunLattice := Eval hnf in Lattice (forall x, B x) dfunLatticeMixin.",
            "VernacDefinition",
            "047396a9c714a4dacb271a7cd795264cb8fdf417"
        ],
        [
            "End DFunLattice.",
            "VernacEndSegment",
            "fcc11e51bc15bb347bac01e5bd986d6b80cebcb1"
        ],
        [
            "Lemma sup_appE A (B : lattice) (s : Pred (A -> B)) (x : A) : sup s x = sup [Pred y : B | exists f, f \\In s /\\ y = f x].",
            "VernacStartTheoremProof",
            "1e649ae219228fad46acdcdcbc14a3dd134cbcf6"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sup_dappE A (B : A -> lattice) (s : Pred (dfunLattice B)) (x : A) : sup s x = sup [Pred y : B x | exists f, f \\In s /\\ y = f x].",
            "VernacStartTheoremProof",
            "568ee5a225b8e1974bd053eb80d1cd26b847b39e"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section IdealLattice.",
            "VernacBeginSection",
            "4d4c518c26c4c57f0f219e8f5a04e64124b23c56"
        ],
        [
            "Variables (T : lattice) (P : T).",
            "VernacAssumption",
            "92eea7c8c3a39bb2e36b0243b1d637805d07f325"
        ],
        [
            "Definition ideal_sup' (s : Pred (ideal P)) := sup [Pred x | exists p, p \\In s /\\ id_val p = x].",
            "VernacDefinition",
            "b51cbc4ef63018d8286f9c407937b86c3ab328c8"
        ],
        [
            "Lemma ideal_supP' (s : Pred (ideal P)) : ideal_sup' s <== P.",
            "VernacStartTheoremProof",
            "30bd41a61e9e8937d8ee2851f7cf04255b66b869"
        ],
        [
            "by apply: supM=>y [[x]] H /= [_] <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ideal_sup (s : Pred (ideal P)) := Ideal (ideal_supP' s).",
            "VernacDefinition",
            "609effb406991f50c9937875d92a7651edaa9939"
        ],
        [
            "Lemma ideal_supP (s : Pred (ideal P)) p : p \\In s -> p <== ideal_sup s.",
            "VernacStartTheoremProof",
            "b436934c117adb4ff65d9f772466abdfc253b9b9"
        ],
        [
            "by move=>H; apply: supP; exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ideal_supM (s : Pred (ideal P)) p : (forall q, q \\In s -> q <== p) -> ideal_sup s <== p.",
            "VernacStartTheoremProof",
            "aa52ac76a7c15fe240c388b6fe0e931c267ef6f9"
        ],
        [
            "by move=>H; apply: supM=>y [q][H1] <-; apply: H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition idealLatticeMixin := LatticeMixin ideal_supP ideal_supM.",
            "VernacDefinition",
            "2ed23cce0ee13048d9f046368af550157a1bcc6c"
        ],
        [
            "Canonical idealLattice := Eval hnf in Lattice (ideal P) idealLatticeMixin.",
            "VernacDefinition",
            "3f2562d3b11fdc8c54e0d8c8eb40e7bb88d01bc7"
        ],
        [
            "End IdealLattice.",
            "VernacEndSegment",
            "254c76d6aced4a7dfa9683b944fee8e371618b48"
        ],
        [
            "Section PropLattice.",
            "VernacBeginSection",
            "6982996116db398653cf17e13ec19bb5243993b3"
        ],
        [
            "Definition prop_sup (s : Pred Prop) : Prop := exists p, p \\In s /\\ p.",
            "VernacDefinition",
            "38c6efbabe2254f8a118366bb37487eb2882b475"
        ],
        [
            "Lemma prop_supP (s : Pred Prop) p : p \\In s -> p <== prop_sup s.",
            "VernacStartTheoremProof",
            "29beb63ccf9305fd4138ea17b335c2d97d8f2c10"
        ],
        [
            "by exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop_supM (s : Pred Prop) p : (forall q, q \\In s -> q <== p) -> prop_sup s <== p.",
            "VernacStartTheoremProof",
            "af1af887e3556425d73af70bc0f3b5d77b696f02"
        ],
        [
            "by move=>H [r][]; move/H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition propLatticeMixin := LatticeMixin prop_supP prop_supM.",
            "VernacDefinition",
            "88e653e402e38ae6a9524b005d0ec23f99aa0811"
        ],
        [
            "Canonical propLattice := Eval hnf in Lattice Prop propLatticeMixin.",
            "VernacDefinition",
            "4b5f4d3d9e49a05ea40faa7e6a1894aa3b28e393"
        ],
        [
            "End PropLattice.",
            "VernacEndSegment",
            "21c880f546012d5dcdf73e83a975d7139a0f0b21"
        ],
        [
            "Section PredLattice.",
            "VernacBeginSection",
            "862557260cf5f97bbfad1c280b8f62c09d941932"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Definition predLatticeMixin := funLatticeMixin A propLattice.",
            "VernacDefinition",
            "73cf2bb69d8f4cf319a04b2bd67783645285486f"
        ],
        [
            "Canonical predLattice := Eval hnf in Lattice (Pred A) predLatticeMixin.",
            "VernacDefinition",
            "0b09633e83d56eafbdbc98fc04940cd3bd7f56f2"
        ],
        [
            "End PredLattice.",
            "VernacEndSegment",
            "7453b499cfbac2e9c30485644f1dd185cd5a93d9"
        ],
        [
            "Section Chains.",
            "VernacBeginSection",
            "6508de7b8f5adbf78adb045ea1a042cb7498481a"
        ],
        [
            "Variable T : poset.",
            "VernacAssumption",
            "52374f312f162e332b3b33d854b078a25ab7cf0f"
        ],
        [
            "Definition chain_axiom (s : Pred T) := (exists d, d \\In s) /\\ (forall x y, x \\In s -> y \\In s -> x <== y \\/ y <== x).",
            "VernacDefinition",
            "0068903eb1457c97abf5683c978817b9a029ecb8"
        ],
        [
            "Structure chain := Chain { pred_of :> Pred T; _ : chain_axiom pred_of}.",
            "VernacInductive",
            "ccf7f2eb0d64114b28571de139dc09307525e692"
        ],
        [
            "Canonical chainPredType := @mkPredType T chain pred_of.",
            "VernacDefinition",
            "c78a12a7cd725b5dc0ee0904dc6d7ed1f8a85e78"
        ],
        [
            "End Chains.",
            "VernacEndSegment",
            "2427f3a91cc9551a860a14cb6f04cd13a7f55400"
        ],
        [
            "Lemma chainE (T : poset) (s1 s2 : chain T) : s1 = s2 <-> pred_of s1 =p pred_of s2.",
            "VernacStartTheoremProof",
            "3ad0cba366f24ed0e5918343183dc7e4c49e9e65"
        ],
        [
            "split=>[->//|]; move: s1 s2=>[s1 H1][s2 H2] /= E; move: H1 H2.",
            "VernacExtend",
            "46214942645e11ab22cf261fdb0f2d41773cf9ba"
        ],
        [
            "suff: s1 = s2 by move=>-> H1 H2; congr Chain; apply: proof_irrelevance.",
            "VernacExtend",
            "d07fc8b2103f140554938023774bf3f75d04ba99"
        ],
        [
            "by apply: fext=>x; apply: pext; split; move/E.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section LiftChain.",
            "VernacBeginSection",
            "e8937cd9be0e115aa4756d0a2ab6830229964de4"
        ],
        [
            "Variable (T : poset) (s : chain T).",
            "VernacAssumption",
            "2f950dd117c517ca7523729ac75c73e0510c6b48"
        ],
        [
            "Lemma lift_chainP : chain_axiom [Pred x : T | x = bot \\/ x \\In s].",
            "VernacStartTheoremProof",
            "7c0c54c9ef1dc2edcf5c87a9fc599b43ba88d015"
        ],
        [
            "case: s=>p [[d H1] H2] /=; split=>[|x y]; first by exists d; right.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case=>[->|H3][->|H4]; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition lift_chain := Chain lift_chainP.",
            "VernacDefinition",
            "78f4b9ceb37e5276e485da111264a5ca5bc2776c"
        ],
        [
            "End LiftChain.",
            "VernacEndSegment",
            "fc23d0905a4a299553deb1968cc555d1f0ad12ca"
        ],
        [
            "Section ImageChain.",
            "VernacBeginSection",
            "482f1f68d9522860c093b12e5bb2b69eac01af84"
        ],
        [
            "Variables (T1 T2 : poset) (s : chain T1) (f : T1 -> T2) (M : monotone f).",
            "VernacAssumption",
            "dbbc43ebd71a135334e6acbca8c64843f56247be"
        ],
        [
            "Lemma image_chainP : chain_axiom [Pred x2 : T2 | exists x1, x2 = f x1 /\\ x1 \\In s].",
            "VernacStartTheoremProof",
            "44e5b6bde69bfb15660dcf005c7f1388ed3595cd"
        ],
        [
            "case: s=>p [[d H1] H2]; split=>[|x y]; first by exists (f d); exists d.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "case=>x1 [->] H3 [y1][->] H4; rewrite -!toPredE /= in H3 H4.",
            "VernacExtend",
            "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
        ],
        [
            "by case: (H2 x1 y1 H3 H4)=>L; [left | right]; apply: M L.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition image_chain := Chain image_chainP.",
            "VernacDefinition",
            "2d454da6636ec3910197e0138e359a5646362cc5"
        ],
        [
            "End ImageChain.",
            "VernacEndSegment",
            "ae636703b274eb4f7772d5735e32ac9231f1d4f8"
        ],
        [
            "Notation \"[ f '^^' s 'by' M ]\" := (@image_chain _ _ s f M) (at level 0, format \"[ f '^^' s 'by' M ]\") : form_scope.",
            "VernacNotation",
            "486f526f7d07fd47a29fe40fa96f41e1d0f24ee0"
        ],
        [
            "Section ChainId.",
            "VernacBeginSection",
            "5750ba5d77fef0f653654ba4f80bbe7d2c042da0"
        ],
        [
            "Variables (T : poset) (s : chain T).",
            "VernacAssumption",
            "2f950dd117c517ca7523729ac75c73e0510c6b48"
        ],
        [
            "Lemma id_mono : monotone (@id T).",
            "VernacStartTheoremProof",
            "d4b9886e82512399127eae4f3a8bc09258453da1"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma id_chainE (M : monotone id) : [id ^^ s by M] = s.",
            "VernacStartTheoremProof",
            "f7725f80d3039cd1085b540b1c3d1fed1bb3e8e1"
        ],
        [
            "by apply/chainE=>x; split; [case=>y [<-]|exists x].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ChainId.",
            "VernacEndSegment",
            "62043b01e21049a0a29d3e2afbe240cf2b4a7f3b"
        ],
        [
            "Arguments id_mono [T].",
            "VernacArguments",
            "6efb3060ee89b4270d909d57530fd608e702fcd6"
        ],
        [
            "Prenex Implicits id_mono.",
            "VernacExtend",
            "76c81aae01e7617a3c9656aa3bec8d90acf20ef3"
        ],
        [
            "Section ChainConst.",
            "VernacBeginSection",
            "dab9f2f820fd6f5a7f40b24bad973d925ba41a11"
        ],
        [
            "Variables (T1 T2 : poset) (y : T2).",
            "VernacAssumption",
            "de3aa39489d9c97a3d63a1aa11dbec1890d69331"
        ],
        [
            "Lemma const_mono : monotone (fun x : T1 => y).",
            "VernacStartTheoremProof",
            "49eefe15d913be38546b91bb74188b1b3d1c820e"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma const_chainP : chain_axiom (Pred1 y).",
            "VernacStartTheoremProof",
            "8cb2da49945eb5c88350b26224e5c930fb558962"
        ],
        [
            "by split; [exists y | move=>x1 x2 ->->; left].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition const_chain := Chain const_chainP.",
            "VernacDefinition",
            "c606a943125d8856f7e7f6124283c28ca480c3c1"
        ],
        [
            "Lemma const_chainE s : [_ ^^ s by const_mono] = const_chain.",
            "VernacStartTheoremProof",
            "96f3352dd70149bcf69854951340cbfc5f9fb172"
        ],
        [
            "apply/chainE=>z1; split; first by case=>z2 [->].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: s=>s [[d] H1] H2; move=><-; exists d.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ChainConst.",
            "VernacEndSegment",
            "f0c23312ae37f9bdf22d2af26cf2e2672cf36920"
        ],
        [
            "Arguments const_mono [T1 T2 y].",
            "VernacArguments",
            "cac7e46a91a1a8f9cbb844a6ac68649bd11f7dc6"
        ],
        [
            "Prenex Implicits const_mono.",
            "VernacExtend",
            "7cd3141535823633fba4e95f158229ac415ce8cc"
        ],
        [
            "Section ChainCompose.",
            "VernacBeginSection",
            "86545c913bc50d529147071af200fd1e727f276f"
        ],
        [
            "Variables (T1 T2 T3 : poset) (f1 : T2 -> T1) (f2 : T3 -> T2).",
            "VernacAssumption",
            "58cf23d141371473b965a07cc559222a864eb7f4"
        ],
        [
            "Variables (s : chain T3) (M1 : monotone f1) (M2 : monotone f2).",
            "VernacAssumption",
            "ac1e7d4ab4e5dec67bd89f7ee2add24d9643aea8"
        ],
        [
            "Lemma comp_mono : monotone (f1 \\o f2).",
            "VernacStartTheoremProof",
            "9fa6755bf3066bd6103dd0153b21d2fed61e513f"
        ],
        [
            "by move=>x y H; apply: M1; apply: M2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma comp_chainE : [f1 ^^ [f2 ^^ s by M2] by M1] = [f1 \\o f2 ^^ s by comp_mono].",
            "VernacStartTheoremProof",
            "2368abb9f72bef38c7b5e5ecfc7e2bfcb6fa70b9"
        ],
        [
            "apply/chainE=>x1; split; first by case=>x2 [->][x3][->]; exists x3.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case=>x3 [->]; exists (f2 x3); split=>//; exists x3.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ChainCompose.",
            "VernacEndSegment",
            "ac4fd3f9ac4365e0502af5da1a92cabc29973cd1"
        ],
        [
            "Arguments comp_mono [T1 T2 T3 f1 f2].",
            "VernacArguments",
            "c8619c306572e262bc56225f3ffaf0d6f19dbed8"
        ],
        [
            "Prenex Implicits comp_mono.",
            "VernacExtend",
            "e10db5363a9271dda9bde3570245db38c09dee14"
        ],
        [
            "Section ProjChain.",
            "VernacBeginSection",
            "89c09fa771ba4aa71ee0bb62bf4bbf831a61cd8d"
        ],
        [
            "Variables (T1 T2 : poset) (s : chain [poset of T1 * T2]).",
            "VernacAssumption",
            "2d28198c522999565d5ab869529c398404db4b07"
        ],
        [
            "Lemma proj1_mono : monotone (@fst T1 T2).",
            "VernacStartTheoremProof",
            "4e220b3430602a7daf25ea02d832e9f5fd54cb6c"
        ],
        [
            "by case=>x1 x2 [y1 y2][].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proj2_mono : monotone (@snd T1 T2).",
            "VernacStartTheoremProof",
            "d42ac17aad4ea8706412387a4d5b8905d4c4da3e"
        ],
        [
            "by case=>x1 x2 [y1 y2][].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition proj1_chain := [@fst _ _ ^^ s by proj1_mono].",
            "VernacDefinition",
            "f3d2153f77c5f292c60b67931411abcd93154ccc"
        ],
        [
            "Definition proj2_chain := [@snd _ _ ^^ s by proj2_mono].",
            "VernacDefinition",
            "095cd6eee06794a7230828c0b4fda994fafe14fc"
        ],
        [
            "End ProjChain.",
            "VernacEndSegment",
            "79023970e9129c61e0abfbec214f940a78635d63"
        ],
        [
            "Arguments proj1_mono [T1 T2].",
            "VernacArguments",
            "342e0cb6015afe5e53986bc228dc7c774101c8e4"
        ],
        [
            "Arguments proj2_mono [T1 T2].",
            "VernacArguments",
            "c678069a9a842ad90572bdb3958a211b97f81359"
        ],
        [
            "Prenex Implicits proj1_mono proj2_mono.",
            "VernacExtend",
            "05e091db206ab27c8fc9fa7f83cb02e66d4f25d1"
        ],
        [
            "Section DiagChain.",
            "VernacBeginSection",
            "c88ea48c6ae99f3d0d0e1bec112242db226aa227"
        ],
        [
            "Variable (T : poset) (s : chain T).",
            "VernacAssumption",
            "2f950dd117c517ca7523729ac75c73e0510c6b48"
        ],
        [
            "Lemma diag_mono : monotone (fun x : T => (x, x)).",
            "VernacStartTheoremProof",
            "0a7802964b398a0626115fe7550757ccbe97d871"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition diag_chain := [_ ^^ s by diag_mono].",
            "VernacDefinition",
            "56ac392266c6a26f8482e23443100c93d9cf66f3"
        ],
        [
            "Lemma proj1_diagE : proj1_chain diag_chain = s.",
            "VernacStartTheoremProof",
            "cbfe91e68b72d02d1b94bb50abecf570b75a5320"
        ],
        [
            "by rewrite /proj1_chain /diag_chain comp_chainE id_chainE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proj2_diagE : proj2_chain diag_chain = s.",
            "VernacStartTheoremProof",
            "f72e05c23ace254ba71525aae4c9c16ba2823552"
        ],
        [
            "by rewrite /proj2_chain /diag_chain comp_chainE id_chainE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DiagChain.",
            "VernacEndSegment",
            "97359e3264f4c7738215809cd36eaa4c9b698109"
        ],
        [
            "Arguments diag_mono [T].",
            "VernacArguments",
            "ba000bfe728788ab12075bc330df9486f63feda7"
        ],
        [
            "Prenex Implicits diag_mono.",
            "VernacExtend",
            "68b9ccef9c6f2bf11d4f55b55e59db37e88abcca"
        ],
        [
            "Section AppChain.",
            "VernacBeginSection",
            "f289d1038343c9ae63e144021ea5e80cede6542a"
        ],
        [
            "Variables (A : Type) (T : poset) (s : chain [poset of A -> T]).",
            "VernacAssumption",
            "5262db41e55f340dc822f3d4826b30bc15b282a5"
        ],
        [
            "Lemma app_mono x : monotone (fun f : A -> T => f x).",
            "VernacStartTheoremProof",
            "b8f3d9c602c415bde6bdce9c73a39c3f2df76c6b"
        ],
        [
            "by move=>f1 f2; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition app_chain x := [_ ^^ s by app_mono x].",
            "VernacDefinition",
            "37e6acda143a217abe33092780c2caf8451060fb"
        ],
        [
            "End AppChain.",
            "VernacEndSegment",
            "63c911c29e1f30e8162f3e7ecf72010e38cd7b3c"
        ],
        [
            "Arguments app_mono [A T].",
            "VernacArguments",
            "6ad0233e25648fca23279e55807c39082608cf9e"
        ],
        [
            "Prenex Implicits app_mono.",
            "VernacExtend",
            "1177b0dd349a1d5cc92bf7bf708d7349f6d1b5b3"
        ],
        [
            "Section DAppChain.",
            "VernacBeginSection",
            "23b9e9049cbf1f97afbb2684a84d79186f0c3a59"
        ],
        [
            "Variables (A : Type) (T : A -> poset) (s : chain (dfunPoset T)).",
            "VernacAssumption",
            "ec04c026abe61459fa38817867a3d7b1779e0b05"
        ],
        [
            "Lemma dapp_mono x : monotone (fun f : dfunPoset T => f x).",
            "VernacStartTheoremProof",
            "0f672231d52462d41653179cfc5a28e673d0e7e3"
        ],
        [
            "by move=>f1 f2; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition dapp_chain x := [_ ^^ s by dapp_mono x].",
            "VernacDefinition",
            "114719d7a9ee21585556c819b7e7bb16556ed78c"
        ],
        [
            "End DAppChain.",
            "VernacEndSegment",
            "119d6793c4ae5b9b391aacc150a16c697260ba7a"
        ],
        [
            "Arguments dapp_mono [A T].",
            "VernacArguments",
            "0cfa0e36ef213029d6ce0305b6d88dd0e2864c53"
        ],
        [
            "Prenex Implicits dapp_mono.",
            "VernacExtend",
            "7e97c83b00eab495ec82cd9dde30034c7bfab171"
        ],
        [
            "Section ProdChain.",
            "VernacBeginSection",
            "8bca5dfd65051e9cef7e89a6110820089c5848f4"
        ],
        [
            "Variables (S1 S2 T1 T2 : poset) (f1 : S1 -> T1) (f2 : S2 -> T2).",
            "VernacAssumption",
            "70dcf0ad061b2ba2b389af2257cb562858e3fd51"
        ],
        [
            "Variables (M1 : monotone f1) (M2 : monotone f2).",
            "VernacAssumption",
            "2777d20d88be22cf46ff31a72e40e4836d7ecc04"
        ],
        [
            "Variable (s : chain [poset of S1 * S2]).",
            "VernacAssumption",
            "2731ea9ca83a69d098783448fd92a78c017415b6"
        ],
        [
            "Lemma prod_mono : monotone (f1 \\* f2).",
            "VernacStartTheoremProof",
            "be9442a17852fa680049eed6b365478ccc4f916f"
        ],
        [
            "by case=>x1 x2 [y1 y2][/= H1 H2]; split; [apply: M1 | apply: M2].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition prod_chain := [f1 \\* f2 ^^ s by prod_mono].",
            "VernacDefinition",
            "9e327844e017c05c0a480e8981dec7b0e112bdae"
        ],
        [
            "Lemma proj1_prodE : proj1_chain prod_chain = [f1 ^^ proj1_chain s by M1].",
            "VernacStartTheoremProof",
            "2973195e1506aa207d7a59c390a147f8b5c19fe4"
        ],
        [
            "rewrite /proj1_chain /prod_chain !comp_chainE !/comp /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/chainE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proj2_prodE : proj2_chain prod_chain = [f2 ^^ proj2_chain s by M2].",
            "VernacStartTheoremProof",
            "9e6a8e04602f6cfb3fa37c511e87178541efa77d"
        ],
        [
            "rewrite /proj2_chain /prod_chain !comp_chainE !/comp /=.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply/chainE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ProdChain.",
            "VernacEndSegment",
            "c0f804f25ec79af4398bd634a36984fd467196e6"
        ],
        [
            "Arguments prod_mono [S1 S2 T1 T2 f1 f2].",
            "VernacArguments",
            "9aff301ea3e6e2df6b59d41ebb42337755fda5e7"
        ],
        [
            "Prenex Implicits prod_mono.",
            "VernacExtend",
            "9b29cf513e4535cd31ae171a275de4755d25c71d"
        ],
        [
            "Section NatChain.",
            "VernacBeginSection",
            "07da6968e5462221a91c4a914adc1bbd120d061e"
        ],
        [
            "Lemma nat_chain_axiom : chain_axiom (@PredT nat).",
            "VernacStartTheoremProof",
            "a02f6ac5f6119f36a0d5c821ffc722ae7b3e1449"
        ],
        [
            "split=>[|x y _ _]; first by exists 0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite /Poset.leq /= [y <= x]leq_eqVlt.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by case: leqP; [left | rewrite orbT; right].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition nat_chain := Chain nat_chain_axiom.",
            "VernacDefinition",
            "6521163f9de4463134d02be154f883a160979743"
        ],
        [
            "End NatChain.",
            "VernacEndSegment",
            "713159c090a73b0a602c16e08074955eef099add"
        ],
        [
            "Module CPO.",
            "VernacDefineModule",
            "e12fb1d67f4d5941b573a51fb10432832392dd82"
        ],
        [
            "Section RawMixin.",
            "VernacBeginSection",
            "e3754b7890ceda7a1e9fc19bf1bba72600d4f111"
        ],
        [
            "Record mixin_of (T : poset) := Mixin { mx_lim : chain T -> T; _ : forall (s : chain T) x, x \\In s -> x <== mx_lim s; _ : forall (s : chain T) x, (forall y, y \\In s -> y <== x) -> mx_lim s <== x}.",
            "VernacInductive",
            "953a2cdd2a85a852d9e2a4ac803f07b2f6d93a8d"
        ],
        [
            "End RawMixin.",
            "VernacEndSegment",
            "d11e9719290e2271d84ac02cba6392743691af2c"
        ],
        [
            "Section ClassDef.",
            "VernacBeginSection",
            "a5b792261e6c496f5a1a8d0f7da8c96156ca2fed"
        ],
        [
            "Record class_of (T : Type) := Class { base : Poset.class_of T; mixin : mixin_of (Poset.Pack base T)}.",
            "VernacInductive",
            "d8b40483d86c748aa80e9427b9f94da70df8c88d"
        ],
        [
            "Local Coercion base : class_of >-> Poset.class_of.",
            "VernacCoercion",
            "ede77bc520652ae127449b4aa003886d42e3d2e5"
        ],
        [
            "Structure type : Type := Pack {sort; _ : class_of sort; _ : Type}.",
            "VernacInductive",
            "9c0d0eb073caef6477bbd56911300d492d08d3cd"
        ],
        [
            "Local Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "e4478cd37693106f84ed020bd073c4970dc87530"
        ],
        [
            "Variables (T : Type) (cT : type).",
            "VernacAssumption",
            "eb35f5737a32cba56acb24ac87490232dc2dfcb9"
        ],
        [
            "Definition class := let: Pack _ c _ as cT' := cT return class_of cT' in c.",
            "VernacDefinition",
            "1f4adccf23fd0f63d29abf28d1b185f093d8cf64"
        ],
        [
            "Definition clone c of phant_id class c := @Pack T c T.",
            "VernacDefinition",
            "cf926e300c6d83e83c3c8ca39f4408240dee4a1a"
        ],
        [
            "Definition pack b0 (m0 : mixin_of (Poset.Pack b0 T)) := fun m & phant_id m0 m => Pack (@Class T b0 m) T.",
            "VernacDefinition",
            "6aace9065f591ed5b8fd9f50b52fdf72006f594d"
        ],
        [
            "Definition poset := Poset.Pack class cT.",
            "VernacDefinition",
            "95798693f60c032add49da3c0bd889fe1a660c4f"
        ],
        [
            "Definition lim (s : chain poset) : cT := mx_lim (mixin class) s.",
            "VernacDefinition",
            "c4adc830daeb865abc53e89d36b028ccee482012"
        ],
        [
            "End ClassDef.",
            "VernacEndSegment",
            "bce1c8832045d8291c44a3fb67e9767782d2745b"
        ],
        [
            "Module Import Exports.",
            "VernacDefineModule",
            "f5a1035b94691e963f68c6f9e1df4c47bb9f27d8"
        ],
        [
            "Coercion base : class_of >-> Poset.class_of.",
            "VernacCoercion",
            "1abfe91da4ff82664a0b06b1adfaa66a56b6c0e1"
        ],
        [
            "Coercion sort : type >-> Sortclass.",
            "VernacCoercion",
            "9e1cbf06afa0d2731dbb8bfd6b9ae32be22a8ae7"
        ],
        [
            "Coercion poset : type >-> Poset.type.",
            "VernacCoercion",
            "06f4f5e432039e76a020b3facfdb50a269a73726"
        ],
        [
            "Canonical Structure poset.",
            "VernacCanonical",
            "f6cb165c0a413ccb1e5dbbaca8f7940a76ca8d44"
        ],
        [
            "Notation cpo := type.",
            "VernacSyntacticDefinition",
            "64f7a93c204b8233888214e1e1a8931c3a9b1016"
        ],
        [
            "Notation CPOMixin := Mixin.",
            "VernacSyntacticDefinition",
            "975a86ee8ade3a112c7cdb367b1bb44a567ac264"
        ],
        [
            "Notation CPO T m := (@pack T _ _ m id).",
            "VernacSyntacticDefinition",
            "6ad49e06db2b9b84a090132e4be85cb1b2e217b2"
        ],
        [
            "Notation \"[ 'cpo' 'of' T 'for' cT ]\" := (@clone T cT _ idfun) (at level 0, format \"[ 'cpo' 'of' T 'for' cT ]\") : form_scope.",
            "VernacNotation",
            "03152f2ba5eedf2246982b1a80455af62bb16577"
        ],
        [
            "Notation \"[ 'cpo' 'of' T ]\" := (@clone T _ _ id) (at level 0, format \"[ 'cpo' 'of' T ]\") : form_scope.",
            "VernacNotation",
            "6dcf79b19e0425c551fe95770ff3350c783ff7a9"
        ],
        [
            "Arguments CPO.lim {cT}.",
            "VernacArguments",
            "aea3fd88b08c549829b9f78d71ec96252b2eef98"
        ],
        [
            "Notation lim := CPO.lim.",
            "VernacSyntacticDefinition",
            "f8924f711b4884ddbcc1757a460adf3105d671eb"
        ],
        [
            "Section Laws.",
            "VernacBeginSection",
            "695f613bd16932bed2a643f528019e75b089836e"
        ],
        [
            "Variable D : cpo.",
            "VernacAssumption",
            "a44d5a9c5c5918aebc999ace49ad11880ba69c17"
        ],
        [
            "Lemma limP (s : chain D) x : x \\In s -> x <== lim s.",
            "VernacStartTheoremProof",
            "caa50768557f0686bbac0dd6a9db089c3ad20cde"
        ],
        [
            "by case: D s x=>S [[p]][/= l H1 *]; apply: (H1).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma limM (s : chain D) x : (forall y, y \\In s -> y <== x) -> lim s <== x.",
            "VernacStartTheoremProof",
            "f607cf3f467556bf242f68ca83b3365cc7613aba"
        ],
        [
            "by case: D s x=>S [[p]][/= l H1 H2 *]; apply: (H2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Laws.",
            "VernacEndSegment",
            "891cb0b804f063d0ebb562c31c62229ffa9a25d3"
        ],
        [
            "End Exports.",
            "VernacEndSegment",
            "71efedae7ccffd696e1ffe5d8ae6baa8a4484918"
        ],
        [
            "End CPO.",
            "VernacEndSegment",
            "0aa31dafb2276aaa97a04fb7319176ac3ad0cbdf"
        ],
        [
            "Export CPO.Exports.",
            "VernacImport",
            "093306ca2ee10076fa430d631e47bea0d6c29bbe"
        ],
        [
            "Section PairCPO.",
            "VernacBeginSection",
            "d6a83a3729428251337eac38c7889d3bfcddce0f"
        ],
        [
            "Variables (A B : cpo).",
            "VernacAssumption",
            "ab5262b8d972740c64092694118c480cbd33ebee"
        ],
        [
            "Local Notation tp := [poset of A * B].",
            "VernacSyntacticDefinition",
            "80592f255719ec020ce660cf97ef9244732a32d7"
        ],
        [
            "Definition pair_lim (s : chain tp) : tp := (lim (proj1_chain s), lim (proj2_chain s)).",
            "VernacDefinition",
            "6bdc3de19acf6664d3f5f53b40add03b4a720d62"
        ],
        [
            "Lemma pair_limP (s : chain tp) x : x \\In s -> x <== pair_lim s.",
            "VernacStartTheoremProof",
            "39d591b80180e3c601a8f6810beec4417b779371"
        ],
        [
            "by split; apply: limP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pair_limM (s : chain tp) x : (forall y, y \\In s -> y <== x) -> pair_lim s <== x.",
            "VernacStartTheoremProof",
            "9ae40efb2e9e02c631f979a90c87dabd573a354a"
        ],
        [
            "by split; apply: limM=>y [z][->]; case/H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pairCPOMixin := CPOMixin pair_limP pair_limM.",
            "VernacDefinition",
            "709c09cee63be6c53cabc8e4d747dc94378f0e3d"
        ],
        [
            "Canonical pairCPO := Eval hnf in CPO (A * B) pairCPOMixin.",
            "VernacDefinition",
            "a6e0864e1b82c70d52f5f280b96a5f363dff2418"
        ],
        [
            "End PairCPO.",
            "VernacEndSegment",
            "14be6cbba743ba7fa79731b3b2d153d1aaa12b60"
        ],
        [
            "Section FunCPO.",
            "VernacBeginSection",
            "0cfa6ef10907cca0aab32ad154fbb37bc7c9d126"
        ],
        [
            "Variable (A : Type) (B : cpo).",
            "VernacAssumption",
            "c22a072b810d8d123fa59db9edb966d8017e0a4f"
        ],
        [
            "Local Notation tp := [poset of A -> B].",
            "VernacSyntacticDefinition",
            "99bf1cae3d629c0dd0f9ff7f3f18b0e66357b802"
        ],
        [
            "Definition fun_lim (s : chain tp) : tp := fun x => lim (app_chain s x).",
            "VernacDefinition",
            "221edfdb5dae33d756c176009e172a5525a74ebd"
        ],
        [
            "Lemma fun_limP (s : chain tp) x : x \\In s -> x <== fun_lim s.",
            "VernacStartTheoremProof",
            "ee9742b80b7ec6df26987c144d932e447a7a8cc6"
        ],
        [
            "by move=>H t; apply: limP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fun_limM (s : chain tp) x : (forall y, y \\In s -> y <== x) -> fun_lim s <== x.",
            "VernacStartTheoremProof",
            "0e3fe1e4e1a7a11978a70ef53e9e329b07c8cc02"
        ],
        [
            "by move=>H1 t; apply: limM=>y [f][->] H2; apply: H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition funCPOMixin := CPOMixin fun_limP fun_limM.",
            "VernacDefinition",
            "f61c19dd00a5ff94aa568c0b894192e543c1ceb4"
        ],
        [
            "Canonical funCPO := Eval hnf in CPO (A -> B) funCPOMixin.",
            "VernacDefinition",
            "8f01168bd0c309b9a894df30d0aabeef89195126"
        ],
        [
            "End FunCPO.",
            "VernacEndSegment",
            "cf15676d145f94de22ea44b1e6078247fc675e65"
        ],
        [
            "Section DFunCPO.",
            "VernacBeginSection",
            "03a1d53b8eba4939a2046312af8ee9657874d591"
        ],
        [
            "Variable (A : Type) (B : A -> cpo).",
            "VernacAssumption",
            "a050f4110e852fc3d04b3cd7c5121b3071b9c799"
        ],
        [
            "Local Notation tp := (dfunPoset B).",
            "VernacSyntacticDefinition",
            "58b3e164b45de9b5d3b9260e80fedd4cf4f86dfe"
        ],
        [
            "Definition dfun_lim (s : chain tp) : tp := fun x => lim (dapp_chain s x).",
            "VernacDefinition",
            "c6cea98c9477a71d18e275d535459e2cf8cf6cbf"
        ],
        [
            "Lemma dfun_limP (s : chain tp) x : x \\In s -> x <== dfun_lim s.",
            "VernacStartTheoremProof",
            "ab6f2ff5ece1a8b902ef478bcd311dd7497d8846"
        ],
        [
            "by move=>H t; apply: limP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dfun_limM (s : chain tp) x : (forall y, y \\In s -> y <== x) -> dfun_lim s <== x.",
            "VernacStartTheoremProof",
            "813d89dbe560faff7974fb2d1bb48ad7ba66ea49"
        ],
        [
            "by move=>H1 t; apply: limM=>y [f][->] H2; apply: H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition dfunCPOMixin := CPOMixin dfun_limP dfun_limM.",
            "VernacDefinition",
            "1017f314365068f1845d7068519f5a76119c18a2"
        ],
        [
            "Definition dfunCPO := Eval hnf in CPO (forall x, B x) dfunCPOMixin.",
            "VernacDefinition",
            "65cf10d33c7a7f51d0f5a8d0ec470589c53e116f"
        ],
        [
            "End DFunCPO.",
            "VernacEndSegment",
            "c27f5a2146bdbff3997ae0f636abd671ac7556de"
        ],
        [
            "Section PropCPO.",
            "VernacBeginSection",
            "571ea2f7158ca571ea8cead19bc483e25e7fee91"
        ],
        [
            "Local Notation tp := [poset of Prop].",
            "VernacSyntacticDefinition",
            "d3bcd05d8027c495ccd787fd4dfb0da2e68173ee"
        ],
        [
            "Definition prop_lim (s : chain tp) : tp := exists p, p \\In s /\\ p.",
            "VernacDefinition",
            "5dfea89c92ae26099234216d321fd23c720383ed"
        ],
        [
            "Lemma prop_limP (s : chain tp) p : p \\In s -> p <== prop_lim s.",
            "VernacStartTheoremProof",
            "9df8664fa00fc7418d21a2001bb3a3805e6ca8f8"
        ],
        [
            "by exists p.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop_limM (s : chain tp) p : (forall q, q \\In s -> q <== p) -> prop_lim s <== p.",
            "VernacStartTheoremProof",
            "8af6acf72f328c086a61d47ff567eed8b01c7b93"
        ],
        [
            "by move=>H [r][]; move/H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition propCPOMixin := CPOMixin prop_limP prop_limM.",
            "VernacDefinition",
            "abb4fda8360a2e0829cd1412d549c3093450c407"
        ],
        [
            "Canonical propCPO := Eval hnf in CPO Prop propCPOMixin.",
            "VernacDefinition",
            "3b57acdce696640d1b9cf9b0e01e2f8d2536e4c4"
        ],
        [
            "End PropCPO.",
            "VernacEndSegment",
            "b5239ffe06a299c23a2bf43025455338d5064357"
        ],
        [
            "Section PredCPO.",
            "VernacBeginSection",
            "840e371131b779f529347921681166fb2df38c77"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Definition predCPOMixin := funCPOMixin A propCPO.",
            "VernacDefinition",
            "afa6081bb7dc7746940f4ffe9e769378997cfc96"
        ],
        [
            "Canonical predCPO := Eval hnf in CPO (Pred A) predCPOMixin.",
            "VernacDefinition",
            "cad77796aaf941ecf5428814aa5a742318d2a6b8"
        ],
        [
            "End PredCPO.",
            "VernacEndSegment",
            "8fdd164647865ec3205bb45a211c0da2095ce78c"
        ],
        [
            "Section LatticeCPO.",
            "VernacBeginSection",
            "19d8a7d0bbf2e5cec4ead7559c51f6d602fbe9ad"
        ],
        [
            "Variable A : lattice.",
            "VernacAssumption",
            "82df48f701b4293990b5f407ec1b8d8e4d08ac61"
        ],
        [
            "Local Notation tp := (Lattice.poset A).",
            "VernacSyntacticDefinition",
            "5452cbe3cb2702de1d2fd6d8e1860af917a04c87"
        ],
        [
            "Definition lat_lim (s : chain tp) : tp := sup s.",
            "VernacDefinition",
            "89a58dca2fb9a8d507bc30ce81bfc1f154663aaf"
        ],
        [
            "Lemma lat_limP (s : chain tp) x : x \\In s -> x <== lat_lim s.",
            "VernacStartTheoremProof",
            "daddb960c93c401d3b459524585239a30facbf22"
        ],
        [
            "by apply: supP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lat_limM (s : chain tp) x : (forall y, y \\In s -> y <== x) -> lat_lim s <== x.",
            "VernacStartTheoremProof",
            "300da98bf116e725e6becf960f8d88f76f953a68"
        ],
        [
            "by apply: supM.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition latCPOMixin := CPOMixin lat_limP lat_limM.",
            "VernacDefinition",
            "7e0439fece7b4a9cb6fa9619f3556b9f9b1a1490"
        ],
        [
            "Definition latCPO := Eval hnf in CPO tp latCPOMixin.",
            "VernacDefinition",
            "dc361b3d43f1daff2339fe1177ae5e4c6c58f776"
        ],
        [
            "End LatticeCPO.",
            "VernacEndSegment",
            "0820b22a8e08ad6cb038bbeac773bae3f9471b0f"
        ],
        [
            "Section AdmissibleClosure.",
            "VernacBeginSection",
            "26d983ee144db2e757cac193d33dc6c23c81b889"
        ],
        [
            "Variable T : cpo.",
            "VernacAssumption",
            "2e027ed80a07f3b18bd2fc4fd06d06669b4c608d"
        ],
        [
            "Definition chain_closed := [Pred s : Pred T | bot \\In s /\\ forall d : chain T, d <=p s -> lim d \\In s].",
            "VernacDefinition",
            "0a050da6e63f052a4acc9d0a96adbbd04e78aee9"
        ],
        [
            "Definition chain_closure (s : Pred T) := [Pred p : T | forall t : Pred T, s <=p t -> chain_closed t -> p \\In t].",
            "VernacDefinition",
            "14add056950de1a6c99f37984f53229a19e454d5"
        ],
        [
            "Lemma chain_clos_sub (s : Pred T) : s <=p chain_closure s.",
            "VernacStartTheoremProof",
            "04c4d12bc35bae73263a91b1d718cc99b025e411"
        ],
        [
            "by move=>p H1 t H2 H3; apply: H2 H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma chain_clos_min (s : Pred T) t : s <=p t -> chain_closed t -> chain_closure s <=p t.",
            "VernacStartTheoremProof",
            "e81636e42d7a457a70403ba6d4015a3ebd76fdc5"
        ],
        [
            "by move=>H1 H2 p; move/(_ _ H1 H2).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma chain_closP (s : Pred T) : chain_closed (chain_closure s).",
            "VernacStartTheoremProof",
            "e4ee321c9fb7fca5a0428bd58872b6f2d8656391"
        ],
        [
            "split; first by move=>t _ [].",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move=>d H1 t H3 H4; move: (chain_clos_min H3 H4)=>{H3} H3.",
            "VernacExtend",
            "8b784377bdc4d565ff66d4cf36a6041e9354c156"
        ],
        [
            "by case: H4=>_; apply=>// x; move/H1; move/H3.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma chain_clos_idemp (s : Pred T) : chain_closed s -> chain_closure s =p s.",
            "VernacStartTheoremProof",
            "94aa73fb00d5cba7fdbeb1dbfb97fc9232da0563"
        ],
        [
            "move=>p; split; last by apply: chain_clos_sub.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by apply: chain_clos_min=>//; apply: chain_closP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma chain_clos_mono (s1 s2 : Pred T) : s1 <=p s2 -> chain_closure s1 <=p chain_closure s2.",
            "VernacStartTheoremProof",
            "7163888079b2722bb4f81541cc3eb004d4d79609"
        ],
        [
            "move=>H1; apply: chain_clos_min (chain_closP s2)=>p H2.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by apply: chain_clos_sub; apply: H1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma chain_closI (s1 s2 : Pred T) : chain_closed s1 -> chain_closed s2 -> chain_closed (PredI s1 s2).",
            "VernacStartTheoremProof",
            "df0084290c6b9219b1dbd13aa15ab04e37eb9194"
        ],
        [
            "move=>[H1 S1][H2 S2]; split=>// d H.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "by split; [apply: S1 | apply: S2]=>// x; case/H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End AdmissibleClosure.",
            "VernacEndSegment",
            "4cf4d661aa60f6e620f87bb86c100c1423cdfa8a"
        ],
        [
            "Arguments chain_closed {T}.",
            "VernacArguments",
            "ce55bbe544fa76c0da275ffec8e1e3636f4cf243"
        ],
        [
            "Lemma chain_clos_diag (T : cpo) (s : Pred (T * T)) : chain_closed s -> chain_closed [Pred t : T | (t, t) \\In s].",
            "VernacStartTheoremProof",
            "8c00b9d8e0a7ab1563beaef3acb4d46c6961ff7b"
        ],
        [
            "move=>[B H1]; split=>// d H2.",
            "VernacExtend",
            "8261237f0cda1915a4077c28869831c5329103ce"
        ],
        [
            "rewrite InE /= -{1}(proj1_diagE d) -{2}(proj2_diagE d).",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "by apply: H1; case=>x1 x2 [x][[<- <-]]; apply: H2.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section SubCPO.",
            "VernacBeginSection",
            "1c2a4d07dd02b76a5a592a6dc73f0c1f9843d3ce"
        ],
        [
            "Variables (D : cpo) (s : Pred D) (C : chain_closed s).",
            "VernacAssumption",
            "39693fe156f4ff00a854285cd37f383e2d34bf96"
        ],
        [
            "Local Notation tp := (subPoset (proj1 C)).",
            "VernacSyntacticDefinition",
            "3f435a8941b28f674c2e5421270b5e8ae09dca49"
        ],
        [
            "Lemma sval_mono : monotone (sval : tp -> D).",
            "VernacStartTheoremProof",
            "7db5cb6b42268dce51937236ba8d7d078e32daa5"
        ],
        [
            "by move=>[x1 H1][x2 H2]; apply.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_limX (u : chain tp) : lim [sval ^^ u by sval_mono] \\In s.",
            "VernacStartTheoremProof",
            "f8874a1301f43664ed6e746d2db8a33ad9e44b5c"
        ],
        [
            "by case: C u=>P H u; apply: (H)=>t [[y]] H1 [->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sub_lim (u : chain tp) : tp := exist _ (lim [sval ^^ u by sval_mono]) (sub_limX u).",
            "VernacDefinition",
            "08f35e762cd6069a3cd1c50b44d6030f0cd047fc"
        ],
        [
            "Lemma sub_limP (u : chain tp) x : x \\In u -> x <== sub_lim u.",
            "VernacStartTheoremProof",
            "f719406456732013a8904dd10db0f6d8b1ad63f5"
        ],
        [
            "by move=>H; apply: limP; exists x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sub_limM (u : chain tp) x : (forall y, y \\In u -> y <== x) -> sub_lim u <== x.",
            "VernacStartTheoremProof",
            "47abf29a506e7627f6e072539b9e01376a8423a4"
        ],
        [
            "by move=>H; apply: limM=>y [z][->]; apply: H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subCPOMixin := CPOMixin sub_limP sub_limM.",
            "VernacDefinition",
            "9f60e46f13c6390e96a85362e05101a32af2d230"
        ],
        [
            "Definition subCPO := Eval hnf in CPO {x : D | x \\In s} subCPOMixin.",
            "VernacDefinition",
            "f1001d2395032f23e895ac1ae3368b663a9bfbf5"
        ],
        [
            "End SubCPO.",
            "VernacEndSegment",
            "3403199b6759f6e0797dd904a93da7928c88e940"
        ],
        [
            "Lemma lim_mono (D : cpo) (s1 s2 : chain D) : s1 <=p s2 -> lim s1 <== lim s2.",
            "VernacStartTheoremProof",
            "11c0b5631cba53342487f957fea4fa1722c6412f"
        ],
        [
            "by move=>H; apply: limM=>y; move/H; apply: limP.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma limE (D : cpo) (s1 s2 : chain D) : s1 =p s2 -> lim s1 = lim s2.",
            "VernacStartTheoremProof",
            "9a56340106ce2164c197d6c8e91d49debdd9b915"
        ],
        [
            "by move=>H; apply: poset_asym; apply: lim_mono=>x; rewrite H.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lim_liftE (D : cpo) (s : chain D) : lim s = lim (lift_chain s).",
            "VernacStartTheoremProof",
            "9b0417bff5f7363a0403a32cc856b869291a60d4"
        ],
        [
            "apply: poset_asym; apply: limM=>y H; first by apply: limP; right.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: H; [move=>-> | apply: limP].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lim_appE A (D : cpo) (s : chain [cpo of A -> D]) (x : A) : lim s x = lim (app_chain s x).",
            "VernacStartTheoremProof",
            "43ba8b6fc5727561ee7818b55f766b81a60ed92d"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lim_dappE A (D : A -> cpo) (s : chain (dfunCPO D)) (x : A) : lim s x = lim (dapp_chain s x).",
            "VernacStartTheoremProof",
            "191474d29d4581e0af04e0a0bf9ef6ffcd15d090"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Continuity.",
            "VernacBeginSection",
            "c72223a990bbb79ba577a9f5dd8c047a4c855372"
        ],
        [
            "Variables (D1 D2 : cpo) (f : D1 -> D2).",
            "VernacAssumption",
            "5cb440052cc8f07d39c4ce968a87fff1b8c3feae"
        ],
        [
            "Definition continuous := exists M : monotone f, forall s : chain D1, f (lim s) = lim [f ^^ s by M].",
            "VernacDefinition",
            "32c8ce25a6ec1c20c84d8748c990fe3e90d37f86"
        ],
        [
            "Lemma cont_mono : continuous -> monotone f.",
            "VernacStartTheoremProof",
            "ed064055c6ab1b1f739899a7b62b4bb4c8803cc0"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma contE (s : chain D1) (C : continuous) : f (lim s) = lim [f ^^ s by cont_mono C].",
            "VernacStartTheoremProof",
            "4756802c2a93d965c621a149ee6d3d0c795f4fa9"
        ],
        [
            "case: C=>M E; rewrite E; congr (lim (image_chain _ _)).",
            "VernacExtend",
            "5d2065da6735eb7f30312e156e81044fd654e048"
        ],
        [
            "apply: proof_irrelevance.",
            "VernacExtend",
            "4bd6fa79b17bcd2bfb7af091fb325367a20385d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Continuity.",
            "VernacEndSegment",
            "018fdb6628c6cb2978fd1d7b082c51cadcb06c9c"
        ],
        [
            "Section Kleene.",
            "VernacBeginSection",
            "5ebb41eb717ca373905b54f0b4c7b69f0701f502"
        ],
        [
            "Variables (D : cpo) (f : D -> D) (C : continuous f).",
            "VernacAssumption",
            "39d502757c7ca4aa495b5d60dbe274c69380205c"
        ],
        [
            "Fixpoint pow m := if m is n.+1 then f (pow n) else bot.",
            "VernacFixpoint",
            "1decc41200af8e2c0f2e2fe6f30eba77e7c08490"
        ],
        [
            "Lemma pow_mono : monotone pow.",
            "VernacStartTheoremProof",
            "d08f6d63a1cd2f86e596812fcdd3a984f2b8dcb2"
        ],
        [
            "move=>m n; elim: n m=>[|n IH] m /=; first by case: m.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "rewrite {1}/Poset.leq /= leq_eqVlt ltnS.",
            "VernacExtend",
            "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
        ],
        [
            "case/orP; first by move/eqP=>->.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "move/IH=>{IH} H; apply: poset_trans H _.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by elim: n=>[|n IH] //=; apply: cont_mono IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pow_chain := [pow ^^ nat_chain by pow_mono].",
            "VernacDefinition",
            "396cc4d91fe8789872a2688b734779ed6c217bde"
        ],
        [
            "Lemma reindex : pow_chain =p lift_chain [f ^^ pow_chain by cont_mono C].",
            "VernacStartTheoremProof",
            "3f4a58ae118f670eae11ffe9a3aa964c5872d850"
        ],
        [
            "move=>x; split.",
            "VernacExtend",
            "22de1c5faad21de60fd48f882c8175e01347018a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "case; case=>[|n][->] /=; first by left.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by right; exists (pow n); split=>//; exists n.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "case=>/=; first by move=>->; exists 0.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case=>y [->][n][->]; exists n.+1.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition kleene_lfp := lim pow_chain.",
            "VernacDefinition",
            "d98ebd49fcf20d173d87796db8ce58d028852178"
        ],
        [
            "Lemma kleene_lfp_fixed : f kleene_lfp = kleene_lfp.",
            "VernacStartTheoremProof",
            "5c58b7c88adad0e3ecb198b2af4cacad7a2cbfa3"
        ],
        [
            "by rewrite (@contE _ _ f) lim_liftE; apply: limE; rewrite reindex.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma kleene_lfp_least : forall x, f x = x -> kleene_lfp <== x.",
            "VernacStartTheoremProof",
            "7b03208a469845b17a626984f9550ad34a700ffb"
        ],
        [
            "move=>x H; apply: limM=>y [n][->] _.",
            "VernacExtend",
            "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
        ],
        [
            "by elim: n=>[|n IH] //=; rewrite -H; apply: cont_mono IH.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Kleene.",
            "VernacEndSegment",
            "3f96b2edf2a35e9be7eacec87d961190790e94cc"
        ],
        [
            "Lemma id_cont (D : cpo) : continuous (@id D).",
            "VernacStartTheoremProof",
            "27ead5f220b121c0796e4be18df3c69bf9cdc49e"
        ],
        [
            "by exists id_mono; move=>d; rewrite id_chainE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments id_cont {D}.",
            "VernacArguments",
            "387cba1bf6da8e68b5de6a7530c93d05593593f2"
        ],
        [
            "Lemma const_cont (D1 D2 : cpo) (y : D2) : continuous (fun x : D1 => y).",
            "VernacStartTheoremProof",
            "87e230dfce29264ff459f61cc985fffbbb627f94"
        ],
        [
            "exists const_mono; move=>s; apply: poset_asym.",
            "VernacExtend",
            "a49bba1a67bd396feb2de38e273378632406d487"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "by apply: limP; case: s=>[p][[d H1] H2]; exists d.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "by apply: limM=>_ [x][->].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments const_cont {D1 D2 y}.",
            "VernacArguments",
            "16569fb013b0344a0088a34f307acd89ad097628"
        ],
        [
            "Lemma comp_cont (D1 D2 D3 : cpo) (f1 : D2 -> D1) (f2 : D3 -> D2) : continuous f1 -> continuous f2 -> continuous (f1 \\o f2).",
            "VernacStartTheoremProof",
            "0f20a11d94c418b8223b268fd52dd989badad7f1"
        ],
        [
            "case=>M1 H1 [M2 H2]; exists (comp_mono M1 M2); move=>d.",
            "VernacExtend",
            "3559fd9e79019f7a4e61e42adfce82eb544b862d"
        ],
        [
            "by rewrite /= H2 H1 comp_chainE.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments comp_cont {D1 D2 D3 f1 f2}.",
            "VernacArguments",
            "d59fe8f37b4829527b33114ca9fd1d92c3767edd"
        ],
        [
            "Lemma proj1_cont (D1 D2 : cpo) : continuous (@fst D1 D2).",
            "VernacStartTheoremProof",
            "473ac375adb6737b2121e323354c3ea21f7cd264"
        ],
        [
            "by exists proj1_mono.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proj2_cont (D1 D2 : cpo) : continuous (@snd D1 D2).",
            "VernacStartTheoremProof",
            "48830a12ad31be2d559bc6f277950dfc4eff956d"
        ],
        [
            "by exists proj2_mono.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments proj1_cont {D1 D2}.",
            "VernacArguments",
            "8a7fe31e853a9474718af4bd5e9973cb8b8246ef"
        ],
        [
            "Arguments proj2_cont {D1 D2}.",
            "VernacArguments",
            "d3de6294830394f0111c37b8eeb25ccccd50a909"
        ],
        [
            "Lemma diag_cont (D : cpo) : continuous (fun x : D => (x, x)).",
            "VernacStartTheoremProof",
            "346156730946ca29a19489bd305485ebf9f74653"
        ],
        [
            "exists diag_mono=>d; apply: poset_asym; by split=>/=; [rewrite proj1_diagE | rewrite proj2_diagE].",
            "VernacExtend",
            "57729335aa39a7d6521041afcfa96e2888324dd2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments diag_cont {D}.",
            "VernacArguments",
            "f209690da590678b21ca2db395a5f074af9109e4"
        ],
        [
            "Lemma app_cont A (D : cpo) x : continuous (fun f : A -> D => f x).",
            "VernacStartTheoremProof",
            "cfd3c1f77f48fd7fead07421e57e10bba8d84434"
        ],
        [
            "by exists (app_mono x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dapp_cont A (D : A -> cpo) x : continuous (fun f : dfunCPO D => f x).",
            "VernacStartTheoremProof",
            "6a4ba4c1b8fbe1c5749b6097a7883f6dacb729b0"
        ],
        [
            "by exists (dapp_mono x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments app_cont {A D}.",
            "VernacArguments",
            "123024712f1c413a2b9fe50b39741b8c11f934e4"
        ],
        [
            "Arguments dapp_cont {A D}.",
            "VernacArguments",
            "d347f95c032ea9ccffe25a2f2bbe673a6bf5fbfc"
        ],
        [
            "Lemma prod_cont (S1 S2 T1 T2 : cpo) (f1 : S1 -> T1) (f2 : S2 -> T2) : continuous f1 -> continuous f2 -> continuous (f1 \\* f2).",
            "VernacStartTheoremProof",
            "d0d972d9df4be54f426cccf032e60f1dcf1518d5"
        ],
        [
            "case=>M1 H1 [M2 H2]; exists (prod_mono M1 M2)=>d; apply: poset_asym; by (split=>/=; [rewrite proj1_prodE H1 | rewrite proj2_prodE H2]).",
            "VernacExtend",
            "b7d1edc77bd9391a5d59e3b9cd3a00c03736efb3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments prod_cont {S1 S2 T1 T2 f1 f2}.",
            "VernacArguments",
            "d44e7b15dd2c72177fe58b52e7d7d0152930539c"
        ]
    ],
    "proofs": [
        {
            "name": "botP",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "by case: T x=>s [[leq b B]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "poset_refl",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "by case: T x=>S [[leq b B R]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "poset_asym",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "by case: T x y=>S [[l b B R A Tr]] *; apply: (A).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "poset_trans",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "by case: T y x z=>S [[l b B R A Tr]] ? x y z; apply: (Tr).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "relaxP",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "by move=>H1 p H2; apply: poset_trans H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_botP",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "by apply: botP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_refl",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "by rewrite /sub_leq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_trans",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "move: x y z=>[x Hx][y Hy][z Hz]; rewrite /sub_leq /=.",
                        "VernacExtend",
                        "057edeb0967475c7ea5e8c98c449ddc5613eddc1"
                    ]
                },
                {
                    "command": [
                        "by apply: poset_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_botP",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "by split; apply: botP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_refl",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_asym",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "move: x y=>[x1 x2][y1 y2][/= H1 H2][/= H3 H4].",
                        "VernacExtend",
                        "b1b2cb7a3a617cba67460b4eca1f04de3c1cc716"
                    ]
                },
                {
                    "command": [
                        "by congr (_, _); apply: poset_asym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_trans",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "move: x y z=>[x1 x2][y1 y2][z1 z2][/= H1 H2][/= H3 H4]; split=>/=.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply: poset_trans H3.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: poset_trans H4.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fun_botP",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "by move=>y; apply: botP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fun_refl",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fun_asym",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "move=>H1 H2; apply: fext=>z; by apply: poset_asym; [apply: H1 | apply: H2].",
                        "VernacExtend",
                        "863cc135acc45d5c9d170c836bc1464e830f66a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fun_trans",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2 t; apply: poset_trans (H2 t).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dfun_botP",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "by move=>y; apply: botP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dfun_refl",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dfun_asym",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "move=>H1 H2; apply: fext=>z; by apply: poset_asym; [apply: H1 | apply: H2].",
                        "VernacExtend",
                        "863cc135acc45d5c9d170c836bc1464e830f66a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dfun_trans",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2 t; apply: poset_trans (H2 t).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ideal_botP",
            "line_nb": 151,
            "steps": [
                {
                    "command": [
                        "by apply: botP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ideal_refl",
            "line_nb": 154,
            "steps": [
                {
                    "command": [
                        "by case: x=>x H; rewrite /ideal_leq.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ideal_asym",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "move: x y=>[x1 H1][x2 H2]; rewrite /ideal_leq /= => H3 H4; move: H1 H2.",
                        "VernacExtend",
                        "a5f56fb00bcaec650c845440add7c784b2a6a909"
                    ]
                },
                {
                    "command": [
                        "rewrite (poset_asym H3 H4)=>H1 H2.",
                        "VernacExtend",
                        "3c42b53d0efc26db114b00541ac5e7fcb29e6aeb"
                    ]
                },
                {
                    "command": [
                        "congr Ideal; apply: proof_irrelevance.",
                        "VernacExtend",
                        "385739dd8a4f73703d3828c61e1780a276bfaa31"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ideal_trans",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "by apply: poset_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_botP",
            "line_nb": 171,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_refl",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_asym",
            "line_nb": 177,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2; apply: pext.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_trans",
            "line_nb": 180,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2; move/H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_botP",
            "line_nb": 192,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_asym",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2; apply: anti_leq; rewrite H1 H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_trans",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "by apply: leq_trans.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "supP",
            "line_nb": 239,
            "steps": [
                {
                    "command": [
                        "by case: T s x=>S [[p]][/= s H1 *]; apply: H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "supM",
            "line_nb": 242,
            "steps": [
                {
                    "command": [
                        "by case: T s x=>S [[p]][/= s H1 H2 *]; apply: (H2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "infP",
            "line_nb": 252,
            "steps": [
                {
                    "command": [
                        "by move=>x H; apply: supM=>y; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "infM",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "by apply: supP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sup_mono",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: supM=>y; move/H; apply: supP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "supE",
            "line_nb": 274,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: poset_asym; apply: supM=>y; move/H; apply: supP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tarski_lfp_fixed",
            "line_nb": 277,
            "steps": [
                {
                    "command": [
                        "move=>M; suff L: f (tarski_lfp f) <== tarski_lfp f.",
                        "VernacExtend",
                        "39acb869359c856109095a218f85253dc109a566"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply: poset_asym=>//; apply: infP; apply: M L.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: infM=>x L; apply: poset_trans (L); apply: M; apply: infP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tarski_lfp_least",
            "line_nb": 283,
            "steps": [
                {
                    "command": [
                        "by move=>x H; apply: infP; rewrite InE /= H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tarski_gfp_fixed",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "move=>M; suff L: tarski_gfp f <== f (tarski_gfp f).",
                        "VernacExtend",
                        "39acb869359c856109095a218f85253dc109a566"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "by apply: poset_asym=>//; apply: supP; apply: M L.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "by apply: supM=>x L; apply: poset_trans (L) _; apply: M; apply: supP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tarski_gfp_greatest",
            "line_nb": 292,
            "steps": [
                {
                    "command": [
                        "by move=>x H; apply: supP; rewrite InE /= H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sup_clos_sub",
            "line_nb": 295,
            "steps": [
                {
                    "command": [
                        "by move=>p H1 t H2 H3; apply: H2 H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sup_clos_min",
            "line_nb": 298,
            "steps": [
                {
                    "command": [
                        "by move=>t H1 H2 p; move/(_ _ H1 H2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sup_closP",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "split; first by move=>t _ [].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=>d H1 t H3 H4; move: (sup_clos_min H3 H4)=>{H3} H3.",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "by case: H4=>_; apply=>// x; move/H1; move/H3.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sup_clos_idemp",
            "line_nb": 306,
            "steps": [
                {
                    "command": [
                        "by move=>p; split; [apply: sup_clos_min | apply: sup_clos_sub].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sup_clos_mono",
            "line_nb": 309,
            "steps": [
                {
                    "command": [
                        "move=>H1; apply: sup_clos_min (sup_closP s2)=>p H2.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply: sup_clos_sub; apply: H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_supX",
            "line_nb": 318,
            "steps": [
                {
                    "command": [
                        "by case: C u=>P /= H u; apply: H=>t [[y]] H1 [_] ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_supP",
            "line_nb": 322,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: supP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_supM",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: supM=>y [z][H1] ->; apply: H H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_supP",
            "line_nb": 335,
            "steps": [
                {
                    "command": [
                        "by move=>H; split; apply: supP; exists p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_supM",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "by move=>H; split; apply: supM=>y [f][->]; case/H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fun_supP",
            "line_nb": 348,
            "steps": [
                {
                    "command": [
                        "by move=>H x; apply: supP; exists p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fun_supM",
            "line_nb": 351,
            "steps": [
                {
                    "command": [
                        "by move=>H t; apply: supM=>x [f][H1] ->; apply: H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dfun_supP",
            "line_nb": 361,
            "steps": [
                {
                    "command": [
                        "by move=>H x; apply: supP; exists p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dfun_supM",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "by move=>H t; apply: supM=>x [f][H1] ->; apply: H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sup_appE",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sup_dappE",
            "line_nb": 373,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ideal_supP'",
            "line_nb": 379,
            "steps": [
                {
                    "command": [
                        "by apply: supM=>y [[x]] H /= [_] <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ideal_supP",
            "line_nb": 383,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: supP; exists p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ideal_supM",
            "line_nb": 386,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: supM=>y [q][H1] <-; apply: H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_supP",
            "line_nb": 394,
            "steps": [
                {
                    "command": [
                        "by exists p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_supM",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "by move=>H [r][]; move/H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "chainE",
            "line_nb": 414,
            "steps": [
                {
                    "command": [
                        "split=>[->//|]; move: s1 s2=>[s1 H1][s2 H2] /= E; move: H1 H2.",
                        "VernacExtend",
                        "46214942645e11ab22cf261fdb0f2d41773cf9ba"
                    ]
                },
                {
                    "command": [
                        "suff: s1 = s2 by move=>-> H1 H2; congr Chain; apply: proof_irrelevance.",
                        "VernacExtend",
                        "d07fc8b2103f140554938023774bf3f75d04ba99"
                    ]
                },
                {
                    "command": [
                        "by apply: fext=>x; apply: pext; split; move/E.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lift_chainP",
            "line_nb": 421,
            "steps": [
                {
                    "command": [
                        "case: s=>p [[d H1] H2] /=; split=>[|x y]; first by exists d; right.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case=>[->|H3][->|H4]; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "image_chainP",
            "line_nb": 429,
            "steps": [
                {
                    "command": [
                        "case: s=>p [[d H1] H2]; split=>[|x y]; first by exists (f d); exists d.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "case=>x1 [->] H3 [y1][->] H4; rewrite -!toPredE /= in H3 H4.",
                        "VernacExtend",
                        "90a2acb29b7a5304b0ab6ba5269c420638ddef63"
                    ]
                },
                {
                    "command": [
                        "by case: (H2 x1 y1 H3 H4)=>L; [left | right]; apply: M L.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "id_mono",
            "line_nb": 439,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "id_chainE",
            "line_nb": 442,
            "steps": [
                {
                    "command": [
                        "by apply/chainE=>x; split; [case=>y [<-]|exists x].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "const_mono",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "const_chainP",
            "line_nb": 453,
            "steps": [
                {
                    "command": [
                        "by split; [exists y | move=>x1 x2 ->->; left].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "const_chainE",
            "line_nb": 457,
            "steps": [
                {
                    "command": [
                        "apply/chainE=>z1; split; first by case=>z2 [->].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: s=>s [[d] H1] H2; move=><-; exists d.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_mono",
            "line_nb": 467,
            "steps": [
                {
                    "command": [
                        "by move=>x y H; apply: M1; apply: M2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_chainE",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "apply/chainE=>x1; split; first by case=>x2 [->][x3][->]; exists x3.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case=>x3 [->]; exists (f2 x3); split=>//; exists x3.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj1_mono",
            "line_nb": 479,
            "steps": [
                {
                    "command": [
                        "by case=>x1 x2 [y1 y2][].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj2_mono",
            "line_nb": 482,
            "steps": [
                {
                    "command": [
                        "by case=>x1 x2 [y1 y2][].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diag_mono",
            "line_nb": 493,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj1_diagE",
            "line_nb": 497,
            "steps": [
                {
                    "command": [
                        "by rewrite /proj1_chain /diag_chain comp_chainE id_chainE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj2_diagE",
            "line_nb": 500,
            "steps": [
                {
                    "command": [
                        "by rewrite /proj2_chain /diag_chain comp_chainE id_chainE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_mono",
            "line_nb": 508,
            "steps": [
                {
                    "command": [
                        "by move=>f1 f2; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dapp_mono",
            "line_nb": 517,
            "steps": [
                {
                    "command": [
                        "by move=>f1 f2; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prod_mono",
            "line_nb": 528,
            "steps": [
                {
                    "command": [
                        "by case=>x1 x2 [y1 y2][/= H1 H2]; split; [apply: M1 | apply: M2].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj1_prodE",
            "line_nb": 532,
            "steps": [
                {
                    "command": [
                        "rewrite /proj1_chain /prod_chain !comp_chainE !/comp /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/chainE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj2_prodE",
            "line_nb": 536,
            "steps": [
                {
                    "command": [
                        "rewrite /proj2_chain /prod_chain !comp_chainE !/comp /=.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply/chainE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nat_chain_axiom",
            "line_nb": 544,
            "steps": [
                {
                    "command": [
                        "split=>[|x y _ _]; first by exists 0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite /Poset.leq /= [y <= x]leq_eqVlt.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by case: leqP; [left | rewrite orbT; right].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "limP",
            "line_nb": 581,
            "steps": [
                {
                    "command": [
                        "by case: D s x=>S [[p]][/= l H1 *]; apply: (H1).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "limM",
            "line_nb": 584,
            "steps": [
                {
                    "command": [
                        "by case: D s x=>S [[p]][/= l H1 H2 *]; apply: (H2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_limP",
            "line_nb": 595,
            "steps": [
                {
                    "command": [
                        "by split; apply: limP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pair_limM",
            "line_nb": 598,
            "steps": [
                {
                    "command": [
                        "by split; apply: limM=>y [z][->]; case/H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fun_limP",
            "line_nb": 608,
            "steps": [
                {
                    "command": [
                        "by move=>H t; apply: limP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fun_limM",
            "line_nb": 611,
            "steps": [
                {
                    "command": [
                        "by move=>H1 t; apply: limM=>y [f][->] H2; apply: H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dfun_limP",
            "line_nb": 621,
            "steps": [
                {
                    "command": [
                        "by move=>H t; apply: limP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dfun_limM",
            "line_nb": 624,
            "steps": [
                {
                    "command": [
                        "by move=>H1 t; apply: limM=>y [f][->] H2; apply: H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_limP",
            "line_nb": 633,
            "steps": [
                {
                    "command": [
                        "by exists p.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_limM",
            "line_nb": 636,
            "steps": [
                {
                    "command": [
                        "by move=>H [r][]; move/H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lat_limP",
            "line_nb": 651,
            "steps": [
                {
                    "command": [
                        "by apply: supP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lat_limM",
            "line_nb": 654,
            "steps": [
                {
                    "command": [
                        "by apply: supM.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "chain_clos_sub",
            "line_nb": 664,
            "steps": [
                {
                    "command": [
                        "by move=>p H1 t H2 H3; apply: H2 H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "chain_clos_min",
            "line_nb": 667,
            "steps": [
                {
                    "command": [
                        "by move=>H1 H2 p; move/(_ _ H1 H2).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "chain_closP",
            "line_nb": 670,
            "steps": [
                {
                    "command": [
                        "split; first by move=>t _ [].",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move=>d H1 t H3 H4; move: (chain_clos_min H3 H4)=>{H3} H3.",
                        "VernacExtend",
                        "8b784377bdc4d565ff66d4cf36a6041e9354c156"
                    ]
                },
                {
                    "command": [
                        "by case: H4=>_; apply=>// x; move/H1; move/H3.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "chain_clos_idemp",
            "line_nb": 675,
            "steps": [
                {
                    "command": [
                        "move=>p; split; last by apply: chain_clos_sub.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by apply: chain_clos_min=>//; apply: chain_closP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "chain_clos_mono",
            "line_nb": 679,
            "steps": [
                {
                    "command": [
                        "move=>H1; apply: chain_clos_min (chain_closP s2)=>p H2.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by apply: chain_clos_sub; apply: H1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "chain_closI",
            "line_nb": 683,
            "steps": [
                {
                    "command": [
                        "move=>[H1 S1][H2 S2]; split=>// d H.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "by split; [apply: S1 | apply: S2]=>// x; case/H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "chain_clos_diag",
            "line_nb": 689,
            "steps": [
                {
                    "command": [
                        "move=>[B H1]; split=>// d H2.",
                        "VernacExtend",
                        "8261237f0cda1915a4077c28869831c5329103ce"
                    ]
                },
                {
                    "command": [
                        "rewrite InE /= -{1}(proj1_diagE d) -{2}(proj2_diagE d).",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "by apply: H1; case=>x1 x2 [x][[<- <-]]; apply: H2.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sval_mono",
            "line_nb": 697,
            "steps": [
                {
                    "command": [
                        "by move=>[x1 H1][x2 H2]; apply.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_limX",
            "line_nb": 700,
            "steps": [
                {
                    "command": [
                        "by case: C u=>P H u; apply: (H)=>t [[y]] H1 [->].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_limP",
            "line_nb": 704,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: limP; exists x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sub_limM",
            "line_nb": 707,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: limM=>y [z][->]; apply: H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lim_mono",
            "line_nb": 713,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: limM=>y; move/H; apply: limP.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "limE",
            "line_nb": 716,
            "steps": [
                {
                    "command": [
                        "by move=>H; apply: poset_asym; apply: lim_mono=>x; rewrite H.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lim_liftE",
            "line_nb": 719,
            "steps": [
                {
                    "command": [
                        "apply: poset_asym; apply: limM=>y H; first by apply: limP; right.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: H; [move=>-> | apply: limP].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lim_appE",
            "line_nb": 723,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lim_dappE",
            "line_nb": 726,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cont_mono",
            "line_nb": 732,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pow_mono",
            "line_nb": 743,
            "steps": [
                {
                    "command": [
                        "move=>m n; elim: n m=>[|n IH] m /=; first by case: m.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "rewrite {1}/Poset.leq /= leq_eqVlt ltnS.",
                        "VernacExtend",
                        "2a624b3f8ed2cb60890f98119d86e3031fa09e35"
                    ]
                },
                {
                    "command": [
                        "case/orP; first by move/eqP=>->.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "move/IH=>{IH} H; apply: poset_trans H _.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by elim: n=>[|n IH] //=; apply: cont_mono IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "reindex",
            "line_nb": 751,
            "steps": [
                {
                    "command": [
                        "move=>x; split.",
                        "VernacExtend",
                        "22de1c5faad21de60fd48f882c8175e01347018a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "case; case=>[|n][->] /=; first by left.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by right; exists (pow n); split=>//; exists n.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "case=>/=; first by move=>->; exists 0.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case=>y [->][n][->]; exists n.+1.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kleene_lfp_fixed",
            "line_nb": 760,
            "steps": [
                {
                    "command": [
                        "by rewrite (@contE _ _ f) lim_liftE; apply: limE; rewrite reindex.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "kleene_lfp_least",
            "line_nb": 763,
            "steps": [
                {
                    "command": [
                        "move=>x H; apply: limM=>y [n][->] _.",
                        "VernacExtend",
                        "d6ebf3361f380a12d5c2c9bbb7ea363132c48b36"
                    ]
                },
                {
                    "command": [
                        "by elim: n=>[|n IH] //=; rewrite -H; apply: cont_mono IH.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "id_cont",
            "line_nb": 768,
            "steps": [
                {
                    "command": [
                        "by exists id_mono; move=>d; rewrite id_chainE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comp_cont",
            "line_nb": 779,
            "steps": [
                {
                    "command": [
                        "case=>M1 H1 [M2 H2]; exists (comp_mono M1 M2); move=>d.",
                        "VernacExtend",
                        "3559fd9e79019f7a4e61e42adfce82eb544b862d"
                    ]
                },
                {
                    "command": [
                        "by rewrite /= H2 H1 comp_chainE.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj1_cont",
            "line_nb": 784,
            "steps": [
                {
                    "command": [
                        "by exists proj1_mono.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proj2_cont",
            "line_nb": 787,
            "steps": [
                {
                    "command": [
                        "by exists proj2_mono.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diag_cont",
            "line_nb": 792,
            "steps": [
                {
                    "command": [
                        "exists diag_mono=>d; apply: poset_asym; by split=>/=; [rewrite proj1_diagE | rewrite proj2_diagE].",
                        "VernacExtend",
                        "57729335aa39a7d6521041afcfa96e2888324dd2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "app_cont",
            "line_nb": 796,
            "steps": [
                {
                    "command": [
                        "by exists (app_mono x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dapp_cont",
            "line_nb": 799,
            "steps": [
                {
                    "command": [
                        "by exists (dapp_mono x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}