{
    "filename": "basis.v",
    "coq_project": "constructive-geometry",
    "vernac_cmds": [
        [
            "Definition Relation (U : Set) := U -> U -> Prop.",
            "VernacDefinition",
            "352815ee0e1fdec85e1f388c8df642962ac54881"
        ],
        [
            "Definition Reflexive (U : Set) (R : Relation U) : Prop := forall x : U, R x x.",
            "VernacDefinition",
            "95593830bd6b0d5a85952790402bb17d2f0dca32"
        ],
        [
            "Definition Transitive (U : Set) (R : Relation U) : Prop := forall x y z : U, R x y -> R y z -> R x z.",
            "VernacDefinition",
            "ee167820b5531ef81f5dbb9d2f051a882ea0beb2"
        ],
        [
            "Definition Symmetric (U : Set) (R : Relation U) : Prop := forall x y : U, R x y -> R y x.",
            "VernacDefinition",
            "089ada7787aff41b8f051c1512b6b7f2750664ac"
        ],
        [
            "Inductive Equivalence (U : Set) (R : Relation U) : Prop := Definition_of_equivalence : Reflexive U R -> Symmetric U R -> Transitive U R -> Equivalence U R.",
            "VernacInductive",
            "d8c00b4302b29aad0da120d059705c4b4e53fe96"
        ],
        [
            "Definition Negation (U : Set) (R : Relation U) : Relation U := fun x y : U => ~ R x y.",
            "VernacDefinition",
            "84c0b0ec5a326beae6ab962220aae449150514db"
        ],
        [
            "Hint Unfold Negation.",
            "VernacHints",
            "a23edb62359931dd89cd068a0f6eac5dfa50b407"
        ],
        [
            "Theorem Sym_imp_NegSym : forall (U : Set) (R : Relation U), Symmetric U R -> Symmetric U (Negation U R).",
            "VernacStartTheoremProof",
            "6876daff71dbe76956e175f81fe60e2d5c8170fb"
        ],
        [
            "unfold Symmetric, Negation in |- *.",
            "VernacExtend",
            "2e5f74acb858d3f34c66bb595e4708f69827ab09"
        ],
        [
            "intros U R H' x y H'0; red in |- *; intro H'1; auto.",
            "VernacExtend",
            "26b133e2f520e87f33aba047c6df84e418825834"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Sym_imp_NegSym.",
            "VernacHints",
            "3daf69de0cc8feb2b001e12a6d940c346411434a"
        ],
        [
            "Definition Irreflexive (U : Set) (R : Relation U) : Prop := forall x : U, ~ R x x.",
            "VernacDefinition",
            "aa3c10db2f5b96560d1bdb0b2233687ca9d5eb0b"
        ],
        [
            "Definition Separating (U : Set) (R : Relation U) : Prop := forall x y z : U, R x y -> R x z \\/ R y z.",
            "VernacDefinition",
            "aae4716aa8f6a4752d6c5be0cd8723e6dc1a7c35"
        ],
        [
            "Inductive Apartness (U : Set) (R : Relation U) : Prop := Definition_of_apartness : Irreflexive U R -> Separating U R -> Apartness U R.",
            "VernacInductive",
            "b7c35140d0393f1f8fc908246d2e3998642a76c0"
        ],
        [
            "Hint Unfold Reflexive Irreflexive Symmetric Transitive.",
            "VernacHints",
            "377486f7a91e3d8c74c0602ed5a33d864719732b"
        ],
        [
            "Hint Resolve Definition_of_equivalence Definition_of_apartness.",
            "VernacHints",
            "3213e75104a769c291db1f1df2dcb556ba8d9c0d"
        ],
        [
            "Parameter Point : Set.",
            "VernacAssumption",
            "53c1ce7287d790e30abd518f8214a34c6af0d33f"
        ],
        [
            "Parameter Line : Set.",
            "VernacAssumption",
            "6bc158b1eb756d00b057ebd86022e44b7166da1f"
        ],
        [
            "Parameter DiPt : Point -> Point -> Prop.",
            "VernacAssumption",
            "e78645bb660d37f1f162143462b2fe1c5b5e8f3e"
        ],
        [
            "Parameter DiLn : Line -> Line -> Prop.",
            "VernacAssumption",
            "e5947da9937ab5fb2ecdab24f6690308184218e2"
        ],
        [
            "Parameter ConLn : Line -> Line -> Prop.",
            "VernacAssumption",
            "d59f589aab33d3a7deb45745a71f155b74615c79"
        ],
        [
            "Axiom apart_dipt : Apartness Point DiPt.",
            "VernacAssumption",
            "0e218339cf53a734b783c60f9a809aa324801206"
        ],
        [
            "Axiom apart_diln : Apartness Line DiLn.",
            "VernacAssumption",
            "412a57b92d6d8b5a41f0d858af7e53e4188b6ef0"
        ],
        [
            "Axiom apart_con : Apartness Line ConLn.",
            "VernacAssumption",
            "d4efb3d6759e5e46054f6d528c33bee220846686"
        ],
        [
            "Hint Resolve apart_dipt apart_diln apart_con.",
            "VernacHints",
            "df5793a7f07c2c56001cf9871bf7e053a5c1bcae"
        ],
        [
            "Theorem Apart_imp_Sym : forall (U : Set) (R : Relation U), Apartness U R -> Symmetric U R.",
            "VernacStartTheoremProof",
            "2d3f2ce93e9503b58ca228c211fbf47424ba648f"
        ],
        [
            "intros U R H'; elim H'.",
            "VernacExtend",
            "1a0de97584a4071ef2fa3b3a8b8bb0ed5fd3b3d5"
        ],
        [
            "intros H'0 H'1; red in |- *.",
            "VernacExtend",
            "3f2b132eb19d675c50b55d2b876c83fe86eed18d"
        ],
        [
            "intros x y H'2; red in H'1.",
            "VernacExtend",
            "961a14f0ae9e5943ec38e35fe6b6683c1a0149d5"
        ],
        [
            "elim (H'1 x y x); trivial.",
            "VernacExtend",
            "f5bd66edf44e3f4c710e9b9e4f45cdfe79c55acd"
        ],
        [
            "intro H'3; elim (H'0 x); trivial.",
            "VernacExtend",
            "b744c31ffc90aeadd3823dc8ee37a16757a0cf12"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Apart_imp_Sym.",
            "VernacHints",
            "cc0b3d02868d3f9772c3fc227b2f82bfc54c4086"
        ],
        [
            "Theorem sym_DiPt : forall x y : Point, DiPt x y -> DiPt y x.",
            "VernacStartTheoremProof",
            "a021b9ce1cfe64919db167ff311f9759d3f50479"
        ],
        [
            "intros x y H'; cut (Symmetric Point DiPt); auto.",
            "VernacExtend",
            "a8626c2a7e9b5506a046cb166b44582e22a82519"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem sym_DiLn : forall x y : Line, DiLn x y -> DiLn y x.",
            "VernacStartTheoremProof",
            "0394dd97a9357fb673042f5b00d279ddf36ab7a4"
        ],
        [
            "intros x y H'; cut (Symmetric Line DiLn); auto.",
            "VernacExtend",
            "e923d540b9a83b19325fd796b2dfa6894a739582"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem sym_ConLn : forall x y : Line, ConLn x y -> ConLn y x.",
            "VernacStartTheoremProof",
            "e885734c9d7b5360a86629a56ff8670f9a9066db"
        ],
        [
            "intros x y H'; cut (Symmetric Line ConLn); auto.",
            "VernacExtend",
            "7e76b68696355086e712eb8e27b001b422d868e0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Immediate sym_DiPt sym_DiLn sym_ConLn.",
            "VernacHints",
            "4aea33e0e8c1652cda667a6bf6a35e28619b8e5f"
        ],
        [
            "Theorem Neg_apart_equiv : forall (U : Set) (R : Relation U), Apartness U R -> Equivalence U (Negation U R).",
            "VernacStartTheoremProof",
            "14483f4def9b7529b861e9bedab02be890828559"
        ],
        [
            "intros U R H'; elim H'.",
            "VernacExtend",
            "1a0de97584a4071ef2fa3b3a8b8bb0ed5fd3b3d5"
        ],
        [
            "constructor 1; auto.",
            "VernacExtend",
            "01aafa4c5bcffd8f1625ee1a04ab9f4941140f70"
        ],
        [
            "unfold Transitive, Negation in |- *.",
            "VernacExtend",
            "803401b7ba546cf8cfc092f974b4132c00fc5656"
        ],
        [
            "intros x y z H'2 H'3; red in |- *; intro H'4.",
            "VernacExtend",
            "fca26b18e0c1d6c97f1dc69eab7c7dc17ff1bd93"
        ],
        [
            "red in H0.",
            "VernacExtend",
            "3e33e4fdada8386783e8311d1d4116d148279cb2"
        ],
        [
            "elim (H0 x z y); auto.",
            "VernacExtend",
            "7b7215c56a34510f6f8bdd0cc20a8b9879877548"
        ],
        [
            "cut (Symmetric U R); auto.",
            "VernacExtend",
            "f2203d45f79ccfabdb0f3c69ffe93d7e2cf168d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Neg_apart_equiv.",
            "VernacHints",
            "e1cfaa08881e4848226d7f3fd0991fc87188a671"
        ],
        [
            "Definition EqPt := Negation Point DiPt.",
            "VernacDefinition",
            "13b987327abbe62fc7b3c7703d6e0fb8897aaf7e"
        ],
        [
            "Definition EqLn := Negation Line DiLn.",
            "VernacDefinition",
            "71844ecfe400b486ed9e4221ba11d5597fea389b"
        ],
        [
            "Definition Par := Negation Line ConLn.",
            "VernacDefinition",
            "ed1794a920b2e9c4b8011383a89ea0f1cc928dc9"
        ],
        [
            "Theorem equiv_EqPt : Equivalence Point EqPt.",
            "VernacStartTheoremProof",
            "62e6d0816bc35872e557ffc7228f69b2a2a45a70"
        ],
        [
            "unfold EqPt in |- *; auto.",
            "VernacExtend",
            "1e10884e4da5269374bdc812b6ad0712e8c19e73"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve equiv_EqPt.",
            "VernacHints",
            "29514ed44937920d295e1d4067fb276acaafd32e"
        ],
        [
            "Theorem equiv_EqLn : Equivalence Line EqLn.",
            "VernacStartTheoremProof",
            "5bbec5dcb067d74ede8d375d3197b8fe6e39e06f"
        ],
        [
            "unfold EqLn in |- *; auto.",
            "VernacExtend",
            "dd3158d2b2a5705304bf1cef004fe8742cf3cfc5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve equiv_EqLn.",
            "VernacHints",
            "9db6bd46d50723fd2b4333df25a873415f7c25a6"
        ],
        [
            "Theorem equiv_Par : Equivalence Line Par.",
            "VernacStartTheoremProof",
            "183f2a1ed34d61d046951927cd4809e02c176d55"
        ],
        [
            "unfold Par in |- *; auto.",
            "VernacExtend",
            "f79ba711f6ed9ae9c6b26a816ce313cf2f396e37"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve equiv_Par.",
            "VernacHints",
            "16b3913aba6e64d727caa22c470c5ef68dd8d128"
        ],
        [
            "Theorem sym_EqPt : forall x y : Point, EqPt x y -> EqPt y x.",
            "VernacStartTheoremProof",
            "ab67197cfc86be4a8c4aa53dfb1bbd7d71aef91a"
        ],
        [
            "intros x y H'; cut (Symmetric Point EqPt); auto.",
            "VernacExtend",
            "21b4b9ee207f100f83da6f3f4deb2303ea540595"
        ],
        [
            "unfold EqPt at 1 in |- *; auto.",
            "VernacExtend",
            "37a38f396bab59068fa6d1272552e0edd0cfe8b1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem sym_EqLn : forall x y : Line, EqLn x y -> EqLn y x.",
            "VernacStartTheoremProof",
            "8ee1df32d8f3f55322b837144b54c4efdb22985c"
        ],
        [
            "intros x y H'; cut (Symmetric Line EqLn); auto.",
            "VernacExtend",
            "45406b6eb46b795884687a270846a27327ca2679"
        ],
        [
            "unfold EqLn at 1 in |- *; auto.",
            "VernacExtend",
            "bc6bc64eceb3d454efbac00c1a6848089d8d4cb3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem sym_Par : forall x y : Line, Par x y -> Par y x.",
            "VernacStartTheoremProof",
            "b80e5ae27c557cbf62ca94e9961e0aeb0cd8392f"
        ],
        [
            "intros x y H'; cut (Symmetric Line Par); auto.",
            "VernacExtend",
            "569a8f1a88e1dcbe3a23560d2b7b6630f709ad0e"
        ],
        [
            "unfold Par at 1 in |- *; auto.",
            "VernacExtend",
            "b41c7009abfa37a1aefcd486204493a878cacb50"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Immediate sym_EqPt sym_EqLn sym_Par.",
            "VernacHints",
            "dc98788a65db1ae4a9742ddd956b56168ea9285d"
        ],
        [
            "Parameter Apart : Point -> Line -> Prop.",
            "VernacAssumption",
            "fd9cc758a79323052be858b10aaaed87b9dcf5c3"
        ],
        [
            "Definition Incident (a : Point) (l : Line) := ~ Apart a l.",
            "VernacDefinition",
            "f6c74d9ad2b29bd63897e55fdfc2e53b6a7e19d9"
        ],
        [
            "Record Segment : Set := Seg {origin : Point; extremity : Point; Seg_cond : DiPt origin extremity}.",
            "VernacInductive",
            "e7425a0b80502fb249064e3a9bbf44dbbdf1be0f"
        ],
        [
            "Record Twolines : Set := Twol {line1 : Line; line2 : Line; Twol_cond : ConLn line1 line2}.",
            "VernacInductive",
            "f169495827cfbd7dbde9dd642e088813bc4a4159"
        ],
        [
            "Axiom line : forall x : Segment, {l : Line | Incident (origin x) l /\\ Incident (extremity x) l}.",
            "VernacAssumption",
            "0a12384cffbdae1051c5abb3afd1c0c2b9346f6e"
        ],
        [
            "Axiom point : forall x : Twolines, {a : Point | Incident a (line1 x) /\\ Incident a (line2 x)}.",
            "VernacAssumption",
            "613c8b29a8ed5b9c69ae6fc05cb12e5f97cfa00b"
        ],
        [
            "Definition ln : Segment -> Line.",
            "VernacDefinition",
            "5062f549127afc79ae1635e67eec3ef57b5e7752"
        ],
        [
            "intro x; elim (line x); intros x0 H'; exact x0.",
            "VernacExtend",
            "3b34401c4321baf005dd6a0c9371d5417a33176c"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition pt : Twolines -> Point.",
            "VernacDefinition",
            "9b495cdf2c0ecab4fc4a7ec3a84576303c1c9ab6"
        ],
        [
            "intro x; elim (point x); intros x0 H'; exact x0.",
            "VernacExtend",
            "878dd3447708608f371520b6af0d5696bd58568f"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Theorem inc_ln1 : forall x : Segment, Incident (origin x) (ln x).",
            "VernacStartTheoremProof",
            "9100bc778075783ad5068debd629c980ee7a19c5"
        ],
        [
            "intro x; elim x.",
            "VernacExtend",
            "ec27580997fcedd4d2f55f177e6e80ceda3618c1"
        ],
        [
            "intros a b d; unfold ln in |- *; simpl in |- *.",
            "VernacExtend",
            "ff30553d810d250573491fd5177bf05b76744f4a"
        ],
        [
            "elim (line (Seg a b d)); simpl in |- *.",
            "VernacExtend",
            "4c9d7de4d38da5e411f67a5a80d76ba0a7786643"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inc_ln2 : forall x : Segment, Incident (extremity x) (ln x).",
            "VernacStartTheoremProof",
            "421c771bfb88cea0aa0ca39e547d1c267aa192b1"
        ],
        [
            "intro x; elim x.",
            "VernacExtend",
            "ec27580997fcedd4d2f55f177e6e80ceda3618c1"
        ],
        [
            "intros a b d; unfold ln in |- *; simpl in |- *.",
            "VernacExtend",
            "ff30553d810d250573491fd5177bf05b76744f4a"
        ],
        [
            "elim (line (Seg a b d)); simpl in |- *.",
            "VernacExtend",
            "4c9d7de4d38da5e411f67a5a80d76ba0a7786643"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inc_pt1 : forall x : Twolines, Incident (pt x) (line1 x).",
            "VernacStartTheoremProof",
            "dd8d7536b10f6711f2863f879e48e88d2afe73f9"
        ],
        [
            "intro x; elim x.",
            "VernacExtend",
            "ec27580997fcedd4d2f55f177e6e80ceda3618c1"
        ],
        [
            "intros a b d; unfold pt in |- *; simpl in |- *.",
            "VernacExtend",
            "d0f0cb66ad6875edd22166cab5855e322ce12df7"
        ],
        [
            "elim (point (Twol a b d)); simpl in |- *.",
            "VernacExtend",
            "bfc6e6f62e126494db6172b4cd96b5171f9f7a2d"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem inc_pt2 : forall x : Twolines, Incident (pt x) (line2 x).",
            "VernacStartTheoremProof",
            "00c5981ac2d3c1808c0530dc89a7e43e5220413f"
        ],
        [
            "intro x; elim x.",
            "VernacExtend",
            "ec27580997fcedd4d2f55f177e6e80ceda3618c1"
        ],
        [
            "intros a b d; unfold pt in |- *; simpl in |- *.",
            "VernacExtend",
            "d0f0cb66ad6875edd22166cab5855e322ce12df7"
        ],
        [
            "elim (point (Twol a b d)); simpl in |- *.",
            "VernacExtend",
            "bfc6e6f62e126494db6172b4cd96b5171f9f7a2d"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve inc_ln1 inc_ln2 inc_pt1 inc_pt2.",
            "VernacHints",
            "14a82623b2ddeabea597f239b6bbb3849fe8aa11"
        ],
        [
            "Axiom el_ax : forall (x : Segment) (l m : Line), DiLn l m -> (Apart (origin x) l \\/ Apart (extremity x) l) \\/ Apart (origin x) m \\/ Apart (extremity x) m.",
            "VernacAssumption",
            "4e53979497281de1c5f707c32fc0ed4be496ac08"
        ],
        [
            "Axiom cmp_apt_dipt : forall (a b : Point) (l : Line), Apart a l -> DiPt a b \\/ Apart b l.",
            "VernacAssumption",
            "70b2c291fa327c1044b25ff88989df50ea01b8ff"
        ],
        [
            "Axiom cmp_apt_diln : forall (a : Point) (l m : Line), Apart a l -> DiLn l m \\/ Apart a m.",
            "VernacAssumption",
            "a0e998e69637b7f0dcb667ed2b73285d977baa69"
        ],
        [
            "Axiom cmp_con_diln : forall l m n : Line, ConLn l m -> DiLn m n \\/ ConLn l n.",
            "VernacAssumption",
            "06030cd194345fd1821d28e8124beb985ddc9131"
        ],
        [
            "Record Triangle : Set := Tri {summit : Point; base : Segment; Tri_cond : Apart summit (ln base)}.",
            "VernacInductive",
            "f4a4544c277d445c0db9d8dbd3781b29f672d561"
        ],
        [
            "Theorem Triangle_def : forall t : Triangle, Apart (summit t) (ln (base t)).",
            "VernacStartTheoremProof",
            "5c842cca34f4c145fbb9c58ee049571b0eb2402e"
        ],
        [
            "intro t; elim t.",
            "VernacExtend",
            "24cf88f93119f655bb5602b809ec2837e3a1b8aa"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros s b H'; exact H'.",
            "VernacExtend",
            "e09e94fa4d3f29305f73971605a720ff57ee58af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Triangle_def.",
            "VernacHints",
            "1ab53c5912a13e35aab20721e62c526ac078cea4"
        ],
        [
            "Definition SPar : Relation Line := fun l m : Line => Par l m /\\ DiLn l m.",
            "VernacDefinition",
            "e730dc581b242c1114de6e477dc20bfa280f82c7"
        ],
        [
            "Record Parallelogram : Set := Pgram {side1 : Segment; side2 : Segment; side3 : Segment; side4 : Segment; connect1 : origin side3 = origin side1 /\\ extremity side3 = origin side2; connect2 : origin side4 = extremity side1 /\\ extremity side4 = extremity side2; parsides_i : SPar (ln side1) (ln side2); parsides_ii : SPar (ln side3) (ln side4)}.",
            "VernacInductive",
            "c6da013c32f09987d615a115542d0868f65cce4d"
        ]
    ],
    "proofs": [
        {
            "name": "Sym_imp_NegSym",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "unfold Symmetric, Negation in |- *.",
                        "VernacExtend",
                        "2e5f74acb858d3f34c66bb595e4708f69827ab09"
                    ]
                },
                {
                    "command": [
                        "intros U R H' x y H'0; red in |- *; intro H'1; auto.",
                        "VernacExtend",
                        "26b133e2f520e87f33aba047c6df84e418825834"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Apart_imp_Sym",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "intros U R H'; elim H'.",
                        "VernacExtend",
                        "1a0de97584a4071ef2fa3b3a8b8bb0ed5fd3b3d5"
                    ]
                },
                {
                    "command": [
                        "intros H'0 H'1; red in |- *.",
                        "VernacExtend",
                        "3f2b132eb19d675c50b55d2b876c83fe86eed18d"
                    ]
                },
                {
                    "command": [
                        "intros x y H'2; red in H'1.",
                        "VernacExtend",
                        "961a14f0ae9e5943ec38e35fe6b6683c1a0149d5"
                    ]
                },
                {
                    "command": [
                        "elim (H'1 x y x); trivial.",
                        "VernacExtend",
                        "f5bd66edf44e3f4c710e9b9e4f45cdfe79c55acd"
                    ]
                },
                {
                    "command": [
                        "intro H'3; elim (H'0 x); trivial.",
                        "VernacExtend",
                        "b744c31ffc90aeadd3823dc8ee37a16757a0cf12"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sym_DiPt",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "intros x y H'; cut (Symmetric Point DiPt); auto.",
                        "VernacExtend",
                        "a8626c2a7e9b5506a046cb166b44582e22a82519"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sym_DiLn",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "intros x y H'; cut (Symmetric Line DiLn); auto.",
                        "VernacExtend",
                        "e923d540b9a83b19325fd796b2dfa6894a739582"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sym_ConLn",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "intros x y H'; cut (Symmetric Line ConLn); auto.",
                        "VernacExtend",
                        "7e76b68696355086e712eb8e27b001b422d868e0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Neg_apart_equiv",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros U R H'; elim H'.",
                        "VernacExtend",
                        "1a0de97584a4071ef2fa3b3a8b8bb0ed5fd3b3d5"
                    ]
                },
                {
                    "command": [
                        "constructor 1; auto.",
                        "VernacExtend",
                        "01aafa4c5bcffd8f1625ee1a04ab9f4941140f70"
                    ]
                },
                {
                    "command": [
                        "unfold Transitive, Negation in |- *.",
                        "VernacExtend",
                        "803401b7ba546cf8cfc092f974b4132c00fc5656"
                    ]
                },
                {
                    "command": [
                        "intros x y z H'2 H'3; red in |- *; intro H'4.",
                        "VernacExtend",
                        "fca26b18e0c1d6c97f1dc69eab7c7dc17ff1bd93"
                    ]
                },
                {
                    "command": [
                        "red in H0.",
                        "VernacExtend",
                        "3e33e4fdada8386783e8311d1d4116d148279cb2"
                    ]
                },
                {
                    "command": [
                        "elim (H0 x z y); auto.",
                        "VernacExtend",
                        "7b7215c56a34510f6f8bdd0cc20a8b9879877548"
                    ]
                },
                {
                    "command": [
                        "cut (Symmetric U R); auto.",
                        "VernacExtend",
                        "f2203d45f79ccfabdb0f3c69ffe93d7e2cf168d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_EqPt",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "unfold EqPt in |- *; auto.",
                        "VernacExtend",
                        "1e10884e4da5269374bdc812b6ad0712e8c19e73"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_EqLn",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "unfold EqLn in |- *; auto.",
                        "VernacExtend",
                        "dd3158d2b2a5705304bf1cef004fe8742cf3cfc5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equiv_Par",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "unfold Par in |- *; auto.",
                        "VernacExtend",
                        "f79ba711f6ed9ae9c6b26a816ce313cf2f396e37"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sym_EqPt",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intros x y H'; cut (Symmetric Point EqPt); auto.",
                        "VernacExtend",
                        "21b4b9ee207f100f83da6f3f4deb2303ea540595"
                    ]
                },
                {
                    "command": [
                        "unfold EqPt at 1 in |- *; auto.",
                        "VernacExtend",
                        "37a38f396bab59068fa6d1272552e0edd0cfe8b1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sym_EqLn",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "intros x y H'; cut (Symmetric Line EqLn); auto.",
                        "VernacExtend",
                        "45406b6eb46b795884687a270846a27327ca2679"
                    ]
                },
                {
                    "command": [
                        "unfold EqLn at 1 in |- *; auto.",
                        "VernacExtend",
                        "bc6bc64eceb3d454efbac00c1a6848089d8d4cb3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sym_Par",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "intros x y H'; cut (Symmetric Line Par); auto.",
                        "VernacExtend",
                        "569a8f1a88e1dcbe3a23560d2b7b6630f709ad0e"
                    ]
                },
                {
                    "command": [
                        "unfold Par at 1 in |- *; auto.",
                        "VernacExtend",
                        "b41c7009abfa37a1aefcd486204493a878cacb50"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "intro x; elim (line x); intros x0 H'; exact x0.",
                        "VernacExtend",
                        "3b34401c4321baf005dd6a0c9371d5417a33176c"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "pt",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "intro x; elim (point x); intros x0 H'; exact x0.",
                        "VernacExtend",
                        "878dd3447708608f371520b6af0d5696bd58568f"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "inc_ln1",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "intro x; elim x.",
                        "VernacExtend",
                        "ec27580997fcedd4d2f55f177e6e80ceda3618c1"
                    ]
                },
                {
                    "command": [
                        "intros a b d; unfold ln in |- *; simpl in |- *.",
                        "VernacExtend",
                        "ff30553d810d250573491fd5177bf05b76744f4a"
                    ]
                },
                {
                    "command": [
                        "elim (line (Seg a b d)); simpl in |- *.",
                        "VernacExtend",
                        "4c9d7de4d38da5e411f67a5a80d76ba0a7786643"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inc_ln2",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intro x; elim x.",
                        "VernacExtend",
                        "ec27580997fcedd4d2f55f177e6e80ceda3618c1"
                    ]
                },
                {
                    "command": [
                        "intros a b d; unfold ln in |- *; simpl in |- *.",
                        "VernacExtend",
                        "ff30553d810d250573491fd5177bf05b76744f4a"
                    ]
                },
                {
                    "command": [
                        "elim (line (Seg a b d)); simpl in |- *.",
                        "VernacExtend",
                        "4c9d7de4d38da5e411f67a5a80d76ba0a7786643"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inc_pt1",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "intro x; elim x.",
                        "VernacExtend",
                        "ec27580997fcedd4d2f55f177e6e80ceda3618c1"
                    ]
                },
                {
                    "command": [
                        "intros a b d; unfold pt in |- *; simpl in |- *.",
                        "VernacExtend",
                        "d0f0cb66ad6875edd22166cab5855e322ce12df7"
                    ]
                },
                {
                    "command": [
                        "elim (point (Twol a b d)); simpl in |- *.",
                        "VernacExtend",
                        "bfc6e6f62e126494db6172b4cd96b5171f9f7a2d"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inc_pt2",
            "line_nb": 112,
            "steps": [
                {
                    "command": [
                        "intro x; elim x.",
                        "VernacExtend",
                        "ec27580997fcedd4d2f55f177e6e80ceda3618c1"
                    ]
                },
                {
                    "command": [
                        "intros a b d; unfold pt in |- *; simpl in |- *.",
                        "VernacExtend",
                        "d0f0cb66ad6875edd22166cab5855e322ce12df7"
                    ]
                },
                {
                    "command": [
                        "elim (point (Twol a b d)); simpl in |- *.",
                        "VernacExtend",
                        "bfc6e6f62e126494db6172b4cd96b5171f9f7a2d"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Triangle_def",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intro t; elim t.",
                        "VernacExtend",
                        "24cf88f93119f655bb5602b809ec2837e3a1b8aa"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros s b H'; exact H'.",
                        "VernacExtend",
                        "e09e94fa4d3f29305f73971605a720ff57ee58af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}