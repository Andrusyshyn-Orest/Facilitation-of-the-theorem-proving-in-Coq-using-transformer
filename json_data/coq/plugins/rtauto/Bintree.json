{
    "filename": "plugins/rtauto/Bintree.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Export List.",
            "VernacRequire",
            "d626cb98fe764077098989d26509c9f7407e0464"
        ],
        [
            "Require Export BinPos.",
            "VernacRequire",
            "c825c11d9839da6ee29880cd4c29ae4077ffd90c"
        ],
        [
            "Require Arith.EqNat.",
            "VernacRequire",
            "3915804a151ad29dd34e16300ae9f570dabbb332"
        ],
        [
            "Open Scope positive_scope.",
            "VernacOpenCloseScope",
            "c744a3fbc1e268554259cf9dddd07b4a4798d5ad"
        ],
        [
            "Ltac clean := try (simpl; congruence).",
            "VernacExtend",
            "325da6ebb427c551b12de3c0ccae72ee1b9aa224"
        ],
        [
            "Lemma Gt_Psucc: forall p q, (p ?= Pos.succ q) = Gt -> (p ?= q) = Gt.",
            "VernacStartTheoremProof",
            "26feefc507673f3134804e1b1cf453526a572317"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- Pos.compare_succ_succ.",
            "VernacExtend",
            "cd2ab5a1e448224d21164c0fe8329ba889631800"
        ],
        [
            "now apply Pos.lt_gt, Pos.lt_lt_succ, Pos.gt_lt.",
            "VernacExtend",
            "e77b8befa4baa1ff461383ae74c8743e40586076"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Psucc_Gt : forall p, (Pos.succ p ?= p) = Gt.",
            "VernacStartTheoremProof",
            "98adaaf8c8086da958a2a843971573797cc4f99d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Pos.lt_gt, Pos.lt_succ_diag_r.",
            "VernacExtend",
            "d7d0d3691e4a564339e783d6b77d225c2e873d07"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint Lget (A:Set) (n:nat) (l:list A) {struct l}:option A := match l with nil => None | x::q => match n with O => Some x | S m => Lget A m q end end .",
            "VernacFixpoint",
            "e7bee60e02578525d12a1bef938b87ebc78f99a0"
        ],
        [
            "Arguments Lget [A] n l.",
            "VernacArguments",
            "0bf4fc3bf7fb06ca7d387d5d429de27567b9fb44"
        ],
        [
            "Lemma map_app : forall (A B:Set) (f:A -> B) l m, List.map f (l ++ m) = List.map f l ++ List.map f m.",
            "VernacStartTheoremProof",
            "d26d3f3a81175acc7a8744c154b9dcc62d4b4019"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intro m ; apply f_equal;apply IHl.",
            "VernacExtend",
            "9ea93e75a1a949ae038dfe4a1b3fb4afa8444ddf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma length_map : forall (A B:Set) (f:A -> B) l, length (List.map f l) = length l.",
            "VernacStartTheoremProof",
            "0fa1327c8626eda6253c682aa22859d16415e8d1"
        ],
        [
            "induction l.",
            "VernacExtend",
            "1194af70832939708f8c7fde2f18f81c37b97a0c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl; apply f_equal;apply IHl.",
            "VernacExtend",
            "031df6966c29deaa82f99e12d1f8c6e8e79e8820"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Lget_map : forall (A B:Set) (f:A -> B) i l, Lget i (List.map f l) = match Lget i l with Some a => Some (f a) | None => None end.",
            "VernacStartTheoremProof",
            "f020504cec51d1f86d77bf5947640ea399f0a6ec"
        ],
        [
            "induction i;intros [ | x l ] ;trivial.",
            "VernacExtend",
            "3f0ae9fc3351c4ecf6ec7cf660661a57b826ddfa"
        ],
        [
            "simpl;auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Lget_app : forall (A:Set) (a:A) l i, Lget i (l ++ a :: nil) = if Arith.EqNat.beq_nat i (length l) then Some a else Lget i l.",
            "VernacStartTheoremProof",
            "d2db1156fa20e0a1e79cd75e1608fe2b315c9155"
        ],
        [
            "induction l;simpl Lget;simpl length.",
            "VernacExtend",
            "76f214bc456d6eecf32a7a5a9e1619d9a721c1d1"
        ],
        [
            "intros [ | i];simpl;reflexivity.",
            "VernacExtend",
            "dbc7f742550bd81dafb4c7f5fb9fef1543a0c2c3"
        ],
        [
            "intros [ | i];simpl.",
            "VernacExtend",
            "b7a9c0622b6993c2c49fd63b5c6324bcc04c145a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Lget_app_Some : forall (A:Set) l delta i (a: A), Lget i l = Some a -> Lget i (l ++ delta) = Some a.",
            "VernacStartTheoremProof",
            "d341a0cd46e962add0c24a484464fc6eefef388b"
        ],
        [
            "induction l;destruct i;simpl;try congruence;auto.",
            "VernacExtend",
            "86acd055f8a9d386cc9a212343b159b85f17e80c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Store.",
            "VernacBeginSection",
            "71ad55ba2dc7850fb7b4881bfe99c6fc79e03373"
        ],
        [
            "Variable A:Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Inductive Poption : Type:= PSome : A -> Poption | PNone : Poption.",
            "VernacInductive",
            "f4c33b0116d0bbdb9183efd048b455089047b809"
        ],
        [
            "Inductive Tree : Type := Tempty : Tree | Branch0 : Tree -> Tree -> Tree | Branch1 : A -> Tree -> Tree -> Tree.",
            "VernacInductive",
            "7a67ef82736959fc67c89a4832896711045463c1"
        ],
        [
            "Fixpoint Tget (p:positive) (T:Tree) {struct p} : Poption := match T with Tempty => PNone | Branch0 T1 T2 => match p with xI pp => Tget pp T2 | xO pp => Tget pp T1 | xH => PNone end | Branch1 a T1 T2 => match p with xI pp => Tget pp T2 | xO pp => Tget pp T1 | xH => PSome a end end.",
            "VernacFixpoint",
            "e23b6460627f41464e19d2544e0719c5317cac83"
        ],
        [
            "Fixpoint Tadd (p:positive) (a:A) (T:Tree) {struct p}: Tree := match T with | Tempty => match p with | xI pp => Branch0 Tempty (Tadd pp a Tempty) | xO pp => Branch0 (Tadd pp a Tempty) Tempty | xH => Branch1 a Tempty Tempty end | Branch0 T1 T2 => match p with | xI pp => Branch0 T1 (Tadd pp a T2) | xO pp => Branch0 (Tadd pp a T1) T2 | xH => Branch1 a T1 T2 end | Branch1 b T1 T2 => match p with | xI pp => Branch1 b T1 (Tadd pp a T2) | xO pp => Branch1 b (Tadd pp a T1) T2 | xH => Branch1 a T1 T2 end end.",
            "VernacFixpoint",
            "4fc12dcedf0c6215d77fa48bb5725db46b44910c"
        ],
        [
            "Definition mkBranch0 (T1 T2:Tree) := match T1,T2 with Tempty ,Tempty => Tempty | _,_ => Branch0 T1 T2 end.",
            "VernacDefinition",
            "fe215342885d4a1c4c00cbe45f4c1d7b7bba35e1"
        ],
        [
            "Fixpoint Tremove (p:positive) (T:Tree) {struct p}: Tree := match T with | Tempty => Tempty | Branch0 T1 T2 => match p with | xI pp => mkBranch0 T1 (Tremove pp T2) | xO pp => mkBranch0 (Tremove pp T1) T2 | xH => T end | Branch1 b T1 T2 => match p with | xI pp => Branch1 b T1 (Tremove pp T2) | xO pp => Branch1 b (Tremove pp T1) T2 | xH => mkBranch0 T1 T2 end end.",
            "VernacFixpoint",
            "790a2145797102b93d027d031099ecd7f722a501"
        ],
        [
            "Theorem Tget_Tempty: forall (p : positive), Tget p (Tempty) = PNone.",
            "VernacStartTheoremProof",
            "c0ecff7f177cf4975df14e9d823c33625fcd781a"
        ],
        [
            "destruct p;reflexivity.",
            "VernacExtend",
            "df120dd8b9b654682ce0d9f597aa32f128d53706"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Tget_Tadd: forall i j a T, Tget i (Tadd j a T) = match (i ?= j) with Eq => PSome a | Lt => Tget i T | Gt => Tget i T end.",
            "VernacStartTheoremProof",
            "45e2296ebd6f0336f363a53b76f8f4552ac3ac8e"
        ],
        [
            "intros i j.",
            "VernacExtend",
            "9b4db6c7cccf562d910832cc8dbf5907416668e2"
        ],
        [
            "case_eq (i ?= j).",
            "VernacExtend",
            "2b3c1091ba9507e7d4a01d148fd9fd084608011c"
        ],
        [
            "intro H;rewrite (Pos.compare_eq _ _ H);intros a;clear i H.",
            "VernacExtend",
            "ceb4879d1367ec49453199f786ad2d54db871695"
        ],
        [
            "induction j;destruct T;simpl;try (apply IHj);congruence.",
            "VernacExtend",
            "de989e8d591e8c09ed486b92c090fc16eb1625e8"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "generalize i;clear i;induction j;destruct T;simpl in H|-*; destruct i;simpl;try rewrite (IHj _ H);try (destruct i;simpl;congruence);reflexivity|| congruence.",
            "VernacExtend",
            "3be531cbfe0b508b1be68d46110b5dd4c4751793"
        ],
        [
            "unfold Pos.compare.",
            "VernacExtend",
            "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
        ],
        [
            "generalize i;clear i;induction j;destruct T;simpl in H|-*; destruct i;simpl;try rewrite (IHj _ H);try (destruct i;simpl;congruence);reflexivity|| congruence.",
            "VernacExtend",
            "3be531cbfe0b508b1be68d46110b5dd4c4751793"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record Store : Type := mkStore {index:positive;contents:Tree}.",
            "VernacInductive",
            "e5a08642802cd0c06d162c5136f02d986659ba9b"
        ],
        [
            "Definition empty := mkStore xH Tempty.",
            "VernacDefinition",
            "40e5ce64ea1f215b2a6fff7ecf971585fdd3909c"
        ],
        [
            "Definition push a S := mkStore (Pos.succ (index S)) (Tadd (index S) a (contents S)).",
            "VernacDefinition",
            "75621ee92cc4906b9511736d9b0696df8f55c2eb"
        ],
        [
            "Definition get i S := Tget i (contents S).",
            "VernacDefinition",
            "a67d3be56754c55df62e13d26131617f252bc707"
        ],
        [
            "Lemma get_empty : forall i, get i empty = PNone.",
            "VernacStartTheoremProof",
            "4f61c6d635638d93cda6c91fcac379b88dc9b522"
        ],
        [
            "intro i; case i; unfold empty,get; simpl;reflexivity.",
            "VernacExtend",
            "b4384aa62871aef236d85264e91a98b03eab174b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive Full : Store -> Type:= F_empty : Full empty | F_push : forall a S, Full S -> Full (push a S).",
            "VernacInductive",
            "6b786d8e74358be10d6d5fd5c9f45a64dc87389d"
        ],
        [
            "Theorem get_Full_Gt : forall S, Full S -> forall i, (i ?= index S) = Gt -> get i S = PNone.",
            "VernacStartTheoremProof",
            "aec170f4fcf6ab70f90d847d75f88b6ed258cca8"
        ],
        [
            "intros S W;induction W.",
            "VernacExtend",
            "6e902950429bf978f49064115251b4ce676b2fe2"
        ],
        [
            "unfold empty,index,get,contents;intros;apply Tget_Tempty.",
            "VernacExtend",
            "fec5cb4f0e7f15f72be9c4badc678f0730cd63b0"
        ],
        [
            "unfold index,get,push.",
            "VernacExtend",
            "2cc09e5f37e926389f6e1402b85d28c89291dcad"
        ],
        [
            "simpl @contents.",
            "VernacExtend",
            "ec7b6dd5949dcd57d937fe12785e75ef7d538885"
        ],
        [
            "intros i e;rewrite Tget_Tadd.",
            "VernacExtend",
            "17d59e2f4c986cb19b5d6c758f41d271f126b931"
        ],
        [
            "rewrite (Gt_Psucc _ _ e).",
            "VernacExtend",
            "ff0cc85e7e458f57d9cdccff092101013d440b98"
        ],
        [
            "unfold get in IHW.",
            "VernacExtend",
            "b076362d7c2e62d3d51447cd9b75891df54dbd04"
        ],
        [
            "apply IHW;apply Gt_Psucc;assumption.",
            "VernacExtend",
            "879a9f19babcf1fea1e0d9be8d2deba1a091bc7a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem get_Full_Eq : forall S, Full S -> get (index S) S = PNone.",
            "VernacStartTheoremProof",
            "b538ea549dc81d4c363e1b84da8de025d15426db"
        ],
        [
            "intros [index0 contents0] F.",
            "VernacExtend",
            "aa14f187a8a816a31de85ab3efe15b09ace9ac62"
        ],
        [
            "case F.",
            "VernacExtend",
            "eeb8e548c2e1822342aa9eab16b378ff3e436219"
        ],
        [
            "unfold empty,index,get,contents;intros;apply Tget_Tempty.",
            "VernacExtend",
            "fec5cb4f0e7f15f72be9c4badc678f0730cd63b0"
        ],
        [
            "unfold push,index,get;simpl @contents.",
            "VernacExtend",
            "20b1011e2773bb26363b50c9c6eafc3f335c8b18"
        ],
        [
            "intros a S.",
            "VernacExtend",
            "10231b6b524ee31b37caeb08ba6201f6e2c9bf12"
        ],
        [
            "rewrite Tget_Tadd.",
            "VernacExtend",
            "57dcb6365170320a7cdf04f01a24e26671e6923f"
        ],
        [
            "rewrite Psucc_Gt.",
            "VernacExtend",
            "49d1c633be553626649cee0c7110142a82dd080d"
        ],
        [
            "intro W.",
            "VernacExtend",
            "a4d74cf35412021c93c5098de4b656291f0fc96a"
        ],
        [
            "change (get (Pos.succ (index S)) S =PNone).",
            "VernacExtend",
            "8b501d311ebf83f19d7dc8e5d006d49520b65c46"
        ],
        [
            "apply get_Full_Gt; auto.",
            "VernacExtend",
            "746139074071f93e5242a04aa7f07a2af83ddd50"
        ],
        [
            "apply Psucc_Gt.",
            "VernacExtend",
            "131314e7dce63100a36e28a22d3a1a1c9b90f63a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem get_push_Full : forall i a S, Full S -> get i (push a S) = match (i ?= index S) with Eq => PSome a | Lt => get i S | Gt => PNone end.",
            "VernacStartTheoremProof",
            "1191e37404d574fb04aeb7d81a46249f96531e84"
        ],
        [
            "intros i a S F.",
            "VernacExtend",
            "ef7904bfb1c164130060806525b51f58db268c91"
        ],
        [
            "case_eq (i ?= index S).",
            "VernacExtend",
            "bfe51b9b0b68daf78ba81d8eebad56b62bc036a7"
        ],
        [
            "intro e;rewrite (Pos.compare_eq _ _ e).",
            "VernacExtend",
            "49f02c7238bbc42d201288c6d0857135c35f19d0"
        ],
        [
            "destruct S;unfold get,push,index;simpl @contents;rewrite Tget_Tadd.",
            "VernacExtend",
            "1b9cc05436743139ffcea9b295a3fd8049527576"
        ],
        [
            "rewrite Pos.compare_refl;reflexivity.",
            "VernacExtend",
            "88c27c03ffb4bc8ef773e57c91023da3008bd294"
        ],
        [
            "intros;destruct S;unfold get,push,index;simpl @contents;rewrite Tget_Tadd.",
            "VernacExtend",
            "d1e1e1fdae1aa93843b9af3a377d7df9e8358e5f"
        ],
        [
            "simpl @index in H;rewrite H;reflexivity.",
            "VernacExtend",
            "e92b08344fd97bc645792b0186409949a9bb14a6"
        ],
        [
            "intro H;generalize H;clear H.",
            "VernacExtend",
            "65fba595a9c9fc080ef19685b67d4e5d07402657"
        ],
        [
            "unfold get,push;simpl.",
            "VernacExtend",
            "fa11c1c123166c227e70d60f26874b1879c9cde6"
        ],
        [
            "rewrite Tget_Tadd;intro e;rewrite e.",
            "VernacExtend",
            "e4a5cca2a4fea56013caf33fd90eb8c90d388e3a"
        ],
        [
            "change (get i S=PNone).",
            "VernacExtend",
            "1605a509e3f70164636358bf29040554b61b422b"
        ],
        [
            "apply get_Full_Gt;auto.",
            "VernacExtend",
            "746139074071f93e5242a04aa7f07a2af83ddd50"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Full_push_compat : forall i a S, Full S -> forall x, get i S = PSome x -> get i (push a S) = PSome x.",
            "VernacStartTheoremProof",
            "c249e1857d98eddc5a06b9991abbf124dd6b2383"
        ],
        [
            "intros i a S F x H.",
            "VernacExtend",
            "fe49d7bea4392f08faea9ca50f907b2cfdafc599"
        ],
        [
            "case_eq (i ?= index S);intro test.",
            "VernacExtend",
            "2c3f75ba8a3c3f257a157b3f82b55e6d3e7761ee"
        ],
        [
            "rewrite (Pos.compare_eq _ _ test) in H.",
            "VernacExtend",
            "2042a1a30a8260b929b1bbd5b98208c8c62ab62e"
        ],
        [
            "rewrite (get_Full_Eq _ F) in H;congruence.",
            "VernacExtend",
            "d61d261cb1758c85006553c8a90bdb9e92676029"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "rewrite (get_push_Full i a).",
            "VernacExtend",
            "1c22cd35af211da32072b854a79f9937218cc0a2"
        ],
        [
            "rewrite test;reflexivity.",
            "VernacExtend",
            "87b33de41009b5b8127a635e1a3c41e445c3c7dc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite (get_Full_Gt _ F) in H;congruence.",
            "VernacExtend",
            "7acf1a1101f782156daeddb83e2efe980b78fa81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Full_index_one_empty : forall S, Full S -> index S = 1 -> S=empty.",
            "VernacStartTheoremProof",
            "0d06cc00f5e2003dd936cf3d13006dbd737120c2"
        ],
        [
            "intros [ind cont] F one; inversion F.",
            "VernacExtend",
            "e36ef64c5ac0af8477b9a1f082236fcd7cd43e62"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl @index in one;assert (h:=Pos.succ_not_1 (index S)).",
            "VernacExtend",
            "fb6a736b60d59eac737ba0a863b89de2e43807c4"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma push_not_empty: forall a S, (push a S) <> empty.",
            "VernacStartTheoremProof",
            "142ea19076aeca8e03124a171eed52d35c3441d6"
        ],
        [
            "intros a [ind cont];unfold push,empty.",
            "VernacExtend",
            "3f2004eaf9d5ae3cb97e836aa17030c5d7ea2895"
        ],
        [
            "intros [= H%Pos.succ_not_1].",
            "VernacExtend",
            "30304df47f8a7cfb9479bcf3e3f290bbb14e5a82"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint In (x:A) (S:Store) (F:Full S) {struct F}: Prop := match F with F_empty => False | F_push a SS FF => x=a \\/ In x SS FF end.",
            "VernacFixpoint",
            "e1e38638d5a92566b2f5d32f2600ba2eac1d2254"
        ],
        [
            "Lemma get_In : forall (x:A) (S:Store) (F:Full S) i , get i S = PSome x -> In x S F.",
            "VernacStartTheoremProof",
            "55e409016ccdcbdc1b245cec14bfd7bb4e28bdfe"
        ],
        [
            "induction F.",
            "VernacExtend",
            "0422ae65b55b367952567538b81d68cb780cf604"
        ],
        [
            "intro i;rewrite get_empty; congruence.",
            "VernacExtend",
            "2d9d8d8013a3fad9774551d13f262a196585e92b"
        ],
        [
            "intro i;rewrite get_push_Full;trivial.",
            "VernacExtend",
            "4ee6a663cbbbbbb93176b44c8c2ab2e80b9459ea"
        ],
        [
            "case_eq (i ?= index S);simpl.",
            "VernacExtend",
            "8e4f8deec40d886cf746186d50ace8b5b65a2e3b"
        ],
        [
            "left;congruence.",
            "VernacExtend",
            "bc0b2cc81db2fe562b3b2f1af1e7273a6d9e66c7"
        ],
        [
            "right;eauto.",
            "VernacExtend",
            "0bc3d2bafb7d2cf650e86152df4ac6ee0e99bfc7"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Store.",
            "VernacEndSegment",
            "a6bb0bf8cd8d298e3c9e2075709a13a5addc909c"
        ],
        [
            "Arguments PNone [A].",
            "VernacArguments",
            "52b783c6e64d89a4765619e98eb2b5b229061837"
        ],
        [
            "Arguments PSome [A] _.",
            "VernacArguments",
            "b222481111f7191411ca09a266574eb51d054a2f"
        ],
        [
            "Arguments Tempty [A].",
            "VernacArguments",
            "c4ed039a6bd4263288a91c1d69dbfbb5620bb3ba"
        ],
        [
            "Arguments Branch0 [A] _ _.",
            "VernacArguments",
            "45075763c6bbb7b810a43248eb6142642a2e515e"
        ],
        [
            "Arguments Branch1 [A] _ _ _.",
            "VernacArguments",
            "df243876f6938ffa2a0df907bc9bd5889234c017"
        ],
        [
            "Arguments Tget [A] p T.",
            "VernacArguments",
            "09205a70ce400b811ccfcc34438180b8830264c1"
        ],
        [
            "Arguments Tadd [A] p a T.",
            "VernacArguments",
            "6ceb6e357f9d7d36b8591a865051ece9e18a6e56"
        ],
        [
            "Arguments Tget_Tempty [A] p.",
            "VernacArguments",
            "73c2301b0d2aabb86626e722171a3c154f005c03"
        ],
        [
            "Arguments Tget_Tadd [A] i j a T.",
            "VernacArguments",
            "6d59fcaa4df66dca50d15ec33438b25875440477"
        ],
        [
            "Arguments mkStore [A] index contents.",
            "VernacArguments",
            "fb0dc691d33833bb4e2a2619118270c09f77f077"
        ],
        [
            "Arguments index [A] s.",
            "VernacArguments",
            "16e7583283fd3c690e7fcaf2bd2c1d098eaed2f8"
        ],
        [
            "Arguments contents [A] s.",
            "VernacArguments",
            "6592bd665976cb70c1b1bd97edd062162fbc1c91"
        ],
        [
            "Arguments empty [A].",
            "VernacArguments",
            "5a3dbe452cc187446ec2d3e0d700ac3facf9bee0"
        ],
        [
            "Arguments get [A] i S.",
            "VernacArguments",
            "0d9c9bb7f16bb1f2084cab86e39d97a1076f2cf4"
        ],
        [
            "Arguments push [A] a S.",
            "VernacArguments",
            "7d4ec7cfdd09fb64c060398ed70a3052b1eb920d"
        ],
        [
            "Arguments get_empty [A] i.",
            "VernacArguments",
            "95679f97752e31bcf443aa646b7de0ed16f1fb4c"
        ],
        [
            "Arguments get_push_Full [A] i a S _.",
            "VernacArguments",
            "7bcfe1f94bce2d22f7082111177b76e92d3a224b"
        ],
        [
            "Arguments Full [A] _.",
            "VernacArguments",
            "941c879611fbb01847097bd40bfb4e597362aaea"
        ],
        [
            "Arguments F_empty [A].",
            "VernacArguments",
            "23d1093c130f92ed888b0247399a16e17c6c00b5"
        ],
        [
            "Arguments F_push [A] a S _.",
            "VernacArguments",
            "a237efc1221860dbf627390a52e4d18873adc966"
        ],
        [
            "Arguments In [A] x S F.",
            "VernacArguments",
            "334ded32c03be996edb8faa4059fd1ec349ab563"
        ],
        [
            "Section Map.",
            "VernacBeginSection",
            "12ca5ab2f7de3292eec6072cc06769cd51c25553"
        ],
        [
            "Variables A B:Set.",
            "VernacAssumption",
            "04a1d76c09f8ab276f02d7d6bfe10f708202ed78"
        ],
        [
            "Variable f: A -> B.",
            "VernacAssumption",
            "3004efd9a4fde9fa8a2da5ba1f90ed0ede9c0963"
        ],
        [
            "Fixpoint Tmap (T: Tree A) : Tree B := match T with Tempty => Tempty | Branch0 t1 t2 => Branch0 (Tmap t1) (Tmap t2) | Branch1 a t1 t2 => Branch1 (f a) (Tmap t1) (Tmap t2) end.",
            "VernacFixpoint",
            "3061dee99e4d8d446cb0bf75e90d23c8dfc80f0b"
        ],
        [
            "Lemma Tget_Tmap: forall T i, Tget i (Tmap T)= match Tget i T with PNone => PNone | PSome a => PSome (f a) end.",
            "VernacStartTheoremProof",
            "d9fc8628820ce547289f48e13c96de4e8ca76615"
        ],
        [
            "induction T;intro i;case i;simpl;auto.",
            "VernacExtend",
            "07315a7cfb64241943aff4fa3e8707919504d2e1"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma Tmap_Tadd: forall i a T, Tmap (Tadd i a T) = Tadd i (f a) (Tmap T).",
            "VernacStartTheoremProof",
            "64c85b776660d1716ab43a64b3042787943687dc"
        ],
        [
            "induction i;intros a T;case T;simpl;intros;try (rewrite IHi);simpl;reflexivity.",
            "VernacExtend",
            "293e47818320bb3e5c663892bfc5ba5cd0084438"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition map (S:Store A) : Store B := mkStore (index S) (Tmap (contents S)).",
            "VernacDefinition",
            "27e980b95ab09a0f80f418125429a57e87e628dd"
        ],
        [
            "Lemma get_map: forall i S, get i (map S)= match get i S with PNone => PNone | PSome a => PSome (f a) end.",
            "VernacStartTheoremProof",
            "bc72b1478837309cf4d47c70922081430667c450"
        ],
        [
            "destruct S;unfold get,map,contents,index;apply Tget_Tmap.",
            "VernacExtend",
            "c205c1a9b1ce425b98b86675cf8b8952bcfbb579"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma map_push: forall a S, map (push a S) = push (f a) (map S).",
            "VernacStartTheoremProof",
            "aebed3472c16f62c24d10f0a73df9a9130d390ab"
        ],
        [
            "intros a S.",
            "VernacExtend",
            "10231b6b524ee31b37caeb08ba6201f6e2c9bf12"
        ],
        [
            "case S.",
            "VernacExtend",
            "a7d169731c6443e32131d9f762e1268b81496524"
        ],
        [
            "unfold push,map,contents,index.",
            "VernacExtend",
            "cfe3e9cbf1fa4b3540595d00f3cfe8e41f05708d"
        ],
        [
            "intros;rewrite Tmap_Tadd;reflexivity.",
            "VernacExtend",
            "3721d9c3f859e4cf8fbc5f2aaceebd72de19da00"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Theorem Full_map : forall S, Full S -> Full (map S).",
            "VernacStartTheoremProof",
            "e24b561ee06b8593384249a2bb488ff0ca1d5ffa"
        ],
        [
            "intros S F.",
            "VernacExtend",
            "0b1cc4d1f86dba5cf1b5d08dd0e36b4b86dd496a"
        ],
        [
            "induction F.",
            "VernacExtend",
            "0422ae65b55b367952567538b81d68cb780cf604"
        ],
        [
            "exact F_empty.",
            "VernacExtend",
            "326aee7a6017eca2fbbfe156ecb7a10316d69f2a"
        ],
        [
            "rewrite map_push;constructor 2;assumption.",
            "VernacExtend",
            "a7f561e10ad449be7a7f2c8dbf9e1dd16d9cbc9c"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End Map.",
            "VernacEndSegment",
            "8fa7735d92e76131e10c5cfe95a2247db65a4b9f"
        ],
        [
            "Arguments Tmap [A B] f T.",
            "VernacArguments",
            "d7faf4d390475d2d121b9eda8b8dd37114cf9a7d"
        ],
        [
            "Arguments map [A B] f S.",
            "VernacArguments",
            "4cef0dc16cda945a0c220a841cf8cba303cb1988"
        ],
        [
            "Arguments Full_map [A B f] S _.",
            "VernacArguments",
            "e0de08f04b195aab8b13b115700d4b491becbe4b"
        ],
        [
            "Notation \"hyps \\ A\" := (push A hyps) (at level 72,left associativity).",
            "VernacNotation",
            "a8588e0b9f953f89cc258fc9c7feb77c132dbba6"
        ]
    ],
    "proofs": [
        {
            "name": "Gt_Psucc",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Pos.compare_succ_succ.",
                        "VernacExtend",
                        "cd2ab5a1e448224d21164c0fe8329ba889631800"
                    ]
                },
                {
                    "command": [
                        "now apply Pos.lt_gt, Pos.lt_lt_succ, Pos.gt_lt.",
                        "VernacExtend",
                        "e77b8befa4baa1ff461383ae74c8743e40586076"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Psucc_Gt",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply Pos.lt_gt, Pos.lt_succ_diag_r.",
                        "VernacExtend",
                        "d7d0d3691e4a564339e783d6b77d225c2e873d07"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_app",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intro m ; apply f_equal;apply IHl.",
                        "VernacExtend",
                        "9ea93e75a1a949ae038dfe4a1b3fb4afa8444ddf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "length_map",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "induction l.",
                        "VernacExtend",
                        "1194af70832939708f8c7fde2f18f81c37b97a0c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl; apply f_equal;apply IHl.",
                        "VernacExtend",
                        "031df6966c29deaa82f99e12d1f8c6e8e79e8820"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Lget_map",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "induction i;intros [ | x l ] ;trivial.",
                        "VernacExtend",
                        "3f0ae9fc3351c4ecf6ec7cf660661a57b826ddfa"
                    ]
                },
                {
                    "command": [
                        "simpl;auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Lget_app",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "induction l;simpl Lget;simpl length.",
                        "VernacExtend",
                        "76f214bc456d6eecf32a7a5a9e1619d9a721c1d1"
                    ]
                },
                {
                    "command": [
                        "intros [ | i];simpl;reflexivity.",
                        "VernacExtend",
                        "dbc7f742550bd81dafb4c7f5fb9fef1543a0c2c3"
                    ]
                },
                {
                    "command": [
                        "intros [ | i];simpl.",
                        "VernacExtend",
                        "b7a9c0622b6993c2c49fd63b5c6324bcc04c145a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Lget_app_Some",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "induction l;destruct i;simpl;try congruence;auto.",
                        "VernacExtend",
                        "86acd055f8a9d386cc9a212343b159b85f17e80c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Tget_Tempty",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "destruct p;reflexivity.",
                        "VernacExtend",
                        "df120dd8b9b654682ce0d9f597aa32f128d53706"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Tget_Tadd",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "intros i j.",
                        "VernacExtend",
                        "9b4db6c7cccf562d910832cc8dbf5907416668e2"
                    ]
                },
                {
                    "command": [
                        "case_eq (i ?= j).",
                        "VernacExtend",
                        "2b3c1091ba9507e7d4a01d148fd9fd084608011c"
                    ]
                },
                {
                    "command": [
                        "intro H;rewrite (Pos.compare_eq _ _ H);intros a;clear i H.",
                        "VernacExtend",
                        "ceb4879d1367ec49453199f786ad2d54db871695"
                    ]
                },
                {
                    "command": [
                        "induction j;destruct T;simpl;try (apply IHj);congruence.",
                        "VernacExtend",
                        "de989e8d591e8c09ed486b92c090fc16eb1625e8"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "generalize i;clear i;induction j;destruct T;simpl in H|-*; destruct i;simpl;try rewrite (IHj _ H);try (destruct i;simpl;congruence);reflexivity|| congruence.",
                        "VernacExtend",
                        "3be531cbfe0b508b1be68d46110b5dd4c4751793"
                    ]
                },
                {
                    "command": [
                        "unfold Pos.compare.",
                        "VernacExtend",
                        "8368b4e5c98391622d4b1507f2910e985b6b5ef6"
                    ]
                },
                {
                    "command": [
                        "generalize i;clear i;induction j;destruct T;simpl in H|-*; destruct i;simpl;try rewrite (IHj _ H);try (destruct i;simpl;congruence);reflexivity|| congruence.",
                        "VernacExtend",
                        "3be531cbfe0b508b1be68d46110b5dd4c4751793"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "get_empty",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "intro i; case i; unfold empty,get; simpl;reflexivity.",
                        "VernacExtend",
                        "b4384aa62871aef236d85264e91a98b03eab174b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "get_Full_Gt",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "intros S W;induction W.",
                        "VernacExtend",
                        "6e902950429bf978f49064115251b4ce676b2fe2"
                    ]
                },
                {
                    "command": [
                        "unfold empty,index,get,contents;intros;apply Tget_Tempty.",
                        "VernacExtend",
                        "fec5cb4f0e7f15f72be9c4badc678f0730cd63b0"
                    ]
                },
                {
                    "command": [
                        "unfold index,get,push.",
                        "VernacExtend",
                        "2cc09e5f37e926389f6e1402b85d28c89291dcad"
                    ]
                },
                {
                    "command": [
                        "simpl @contents.",
                        "VernacExtend",
                        "ec7b6dd5949dcd57d937fe12785e75ef7d538885"
                    ]
                },
                {
                    "command": [
                        "intros i e;rewrite Tget_Tadd.",
                        "VernacExtend",
                        "17d59e2f4c986cb19b5d6c758f41d271f126b931"
                    ]
                },
                {
                    "command": [
                        "rewrite (Gt_Psucc _ _ e).",
                        "VernacExtend",
                        "ff0cc85e7e458f57d9cdccff092101013d440b98"
                    ]
                },
                {
                    "command": [
                        "unfold get in IHW.",
                        "VernacExtend",
                        "b076362d7c2e62d3d51447cd9b75891df54dbd04"
                    ]
                },
                {
                    "command": [
                        "apply IHW;apply Gt_Psucc;assumption.",
                        "VernacExtend",
                        "879a9f19babcf1fea1e0d9be8d2deba1a091bc7a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "get_Full_Eq",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "intros [index0 contents0] F.",
                        "VernacExtend",
                        "aa14f187a8a816a31de85ab3efe15b09ace9ac62"
                    ]
                },
                {
                    "command": [
                        "case F.",
                        "VernacExtend",
                        "eeb8e548c2e1822342aa9eab16b378ff3e436219"
                    ]
                },
                {
                    "command": [
                        "unfold empty,index,get,contents;intros;apply Tget_Tempty.",
                        "VernacExtend",
                        "fec5cb4f0e7f15f72be9c4badc678f0730cd63b0"
                    ]
                },
                {
                    "command": [
                        "unfold push,index,get;simpl @contents.",
                        "VernacExtend",
                        "20b1011e2773bb26363b50c9c6eafc3f335c8b18"
                    ]
                },
                {
                    "command": [
                        "intros a S.",
                        "VernacExtend",
                        "10231b6b524ee31b37caeb08ba6201f6e2c9bf12"
                    ]
                },
                {
                    "command": [
                        "rewrite Tget_Tadd.",
                        "VernacExtend",
                        "57dcb6365170320a7cdf04f01a24e26671e6923f"
                    ]
                },
                {
                    "command": [
                        "rewrite Psucc_Gt.",
                        "VernacExtend",
                        "49d1c633be553626649cee0c7110142a82dd080d"
                    ]
                },
                {
                    "command": [
                        "intro W.",
                        "VernacExtend",
                        "a4d74cf35412021c93c5098de4b656291f0fc96a"
                    ]
                },
                {
                    "command": [
                        "change (get (Pos.succ (index S)) S =PNone).",
                        "VernacExtend",
                        "8b501d311ebf83f19d7dc8e5d006d49520b65c46"
                    ]
                },
                {
                    "command": [
                        "apply get_Full_Gt; auto.",
                        "VernacExtend",
                        "746139074071f93e5242a04aa7f07a2af83ddd50"
                    ]
                },
                {
                    "command": [
                        "apply Psucc_Gt.",
                        "VernacExtend",
                        "131314e7dce63100a36e28a22d3a1a1c9b90f63a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "get_push_Full",
            "line_nb": 93,
            "steps": [
                {
                    "command": [
                        "intros i a S F.",
                        "VernacExtend",
                        "ef7904bfb1c164130060806525b51f58db268c91"
                    ]
                },
                {
                    "command": [
                        "case_eq (i ?= index S).",
                        "VernacExtend",
                        "bfe51b9b0b68daf78ba81d8eebad56b62bc036a7"
                    ]
                },
                {
                    "command": [
                        "intro e;rewrite (Pos.compare_eq _ _ e).",
                        "VernacExtend",
                        "49f02c7238bbc42d201288c6d0857135c35f19d0"
                    ]
                },
                {
                    "command": [
                        "destruct S;unfold get,push,index;simpl @contents;rewrite Tget_Tadd.",
                        "VernacExtend",
                        "1b9cc05436743139ffcea9b295a3fd8049527576"
                    ]
                },
                {
                    "command": [
                        "rewrite Pos.compare_refl;reflexivity.",
                        "VernacExtend",
                        "88c27c03ffb4bc8ef773e57c91023da3008bd294"
                    ]
                },
                {
                    "command": [
                        "intros;destruct S;unfold get,push,index;simpl @contents;rewrite Tget_Tadd.",
                        "VernacExtend",
                        "d1e1e1fdae1aa93843b9af3a377d7df9e8358e5f"
                    ]
                },
                {
                    "command": [
                        "simpl @index in H;rewrite H;reflexivity.",
                        "VernacExtend",
                        "e92b08344fd97bc645792b0186409949a9bb14a6"
                    ]
                },
                {
                    "command": [
                        "intro H;generalize H;clear H.",
                        "VernacExtend",
                        "65fba595a9c9fc080ef19685b67d4e5d07402657"
                    ]
                },
                {
                    "command": [
                        "unfold get,push;simpl.",
                        "VernacExtend",
                        "fa11c1c123166c227e70d60f26874b1879c9cde6"
                    ]
                },
                {
                    "command": [
                        "rewrite Tget_Tadd;intro e;rewrite e.",
                        "VernacExtend",
                        "e4a5cca2a4fea56013caf33fd90eb8c90d388e3a"
                    ]
                },
                {
                    "command": [
                        "change (get i S=PNone).",
                        "VernacExtend",
                        "1605a509e3f70164636358bf29040554b61b422b"
                    ]
                },
                {
                    "command": [
                        "apply get_Full_Gt;auto.",
                        "VernacExtend",
                        "746139074071f93e5242a04aa7f07a2af83ddd50"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Full_push_compat",
            "line_nb": 107,
            "steps": [
                {
                    "command": [
                        "intros i a S F x H.",
                        "VernacExtend",
                        "fe49d7bea4392f08faea9ca50f907b2cfdafc599"
                    ]
                },
                {
                    "command": [
                        "case_eq (i ?= index S);intro test.",
                        "VernacExtend",
                        "2c3f75ba8a3c3f257a157b3f82b55e6d3e7761ee"
                    ]
                },
                {
                    "command": [
                        "rewrite (Pos.compare_eq _ _ test) in H.",
                        "VernacExtend",
                        "2042a1a30a8260b929b1bbd5b98208c8c62ab62e"
                    ]
                },
                {
                    "command": [
                        "rewrite (get_Full_Eq _ F) in H;congruence.",
                        "VernacExtend",
                        "d61d261cb1758c85006553c8a90bdb9e92676029"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "rewrite (get_push_Full i a).",
                        "VernacExtend",
                        "1c22cd35af211da32072b854a79f9937218cc0a2"
                    ]
                },
                {
                    "command": [
                        "rewrite test;reflexivity.",
                        "VernacExtend",
                        "87b33de41009b5b8127a635e1a3c41e445c3c7dc"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite (get_Full_Gt _ F) in H;congruence.",
                        "VernacExtend",
                        "7acf1a1101f782156daeddb83e2efe980b78fa81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Full_index_one_empty",
            "line_nb": 118,
            "steps": [
                {
                    "command": [
                        "intros [ind cont] F one; inversion F.",
                        "VernacExtend",
                        "e36ef64c5ac0af8477b9a1f082236fcd7cd43e62"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl @index in one;assert (h:=Pos.succ_not_1 (index S)).",
                        "VernacExtend",
                        "fb6a736b60d59eac737ba0a863b89de2e43807c4"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "push_not_empty",
            "line_nb": 124,
            "steps": [
                {
                    "command": [
                        "intros a [ind cont];unfold push,empty.",
                        "VernacExtend",
                        "3f2004eaf9d5ae3cb97e836aa17030c5d7ea2895"
                    ]
                },
                {
                    "command": [
                        "intros [= H%Pos.succ_not_1].",
                        "VernacExtend",
                        "30304df47f8a7cfb9479bcf3e3f290bbb14e5a82"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "get_In",
            "line_nb": 130,
            "steps": [
                {
                    "command": [
                        "induction F.",
                        "VernacExtend",
                        "0422ae65b55b367952567538b81d68cb780cf604"
                    ]
                },
                {
                    "command": [
                        "intro i;rewrite get_empty; congruence.",
                        "VernacExtend",
                        "2d9d8d8013a3fad9774551d13f262a196585e92b"
                    ]
                },
                {
                    "command": [
                        "intro i;rewrite get_push_Full;trivial.",
                        "VernacExtend",
                        "4ee6a663cbbbbbb93176b44c8c2ab2e80b9459ea"
                    ]
                },
                {
                    "command": [
                        "case_eq (i ?= index S);simpl.",
                        "VernacExtend",
                        "8e4f8deec40d886cf746186d50ace8b5b65a2e3b"
                    ]
                },
                {
                    "command": [
                        "left;congruence.",
                        "VernacExtend",
                        "bc0b2cc81db2fe562b3b2f1af1e7273a6d9e66c7"
                    ]
                },
                {
                    "command": [
                        "right;eauto.",
                        "VernacExtend",
                        "0bc3d2bafb7d2cf650e86152df4ac6ee0e99bfc7"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Tget_Tmap",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "induction T;intro i;case i;simpl;auto.",
                        "VernacExtend",
                        "07315a7cfb64241943aff4fa3e8707919504d2e1"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Tmap_Tadd",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "induction i;intros a T;case T;simpl;intros;try (rewrite IHi);simpl;reflexivity.",
                        "VernacExtend",
                        "293e47818320bb3e5c663892bfc5ba5cd0084438"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "get_map",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "destruct S;unfold get,map,contents,index;apply Tget_Tmap.",
                        "VernacExtend",
                        "c205c1a9b1ce425b98b86675cf8b8952bcfbb579"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "map_push",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "intros a S.",
                        "VernacExtend",
                        "10231b6b524ee31b37caeb08ba6201f6e2c9bf12"
                    ]
                },
                {
                    "command": [
                        "case S.",
                        "VernacExtend",
                        "a7d169731c6443e32131d9f762e1268b81496524"
                    ]
                },
                {
                    "command": [
                        "unfold push,map,contents,index.",
                        "VernacExtend",
                        "cfe3e9cbf1fa4b3540595d00f3cfe8e41f05708d"
                    ]
                },
                {
                    "command": [
                        "intros;rewrite Tmap_Tadd;reflexivity.",
                        "VernacExtend",
                        "3721d9c3f859e4cf8fbc5f2aaceebd72de19da00"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Full_map",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "intros S F.",
                        "VernacExtend",
                        "0b1cc4d1f86dba5cf1b5d08dd0e36b4b86dd496a"
                    ]
                },
                {
                    "command": [
                        "induction F.",
                        "VernacExtend",
                        "0422ae65b55b367952567538b81d68cb780cf604"
                    ]
                },
                {
                    "command": [
                        "exact F_empty.",
                        "VernacExtend",
                        "326aee7a6017eca2fbbfe156ecb7a10316d69f2a"
                    ]
                },
                {
                    "command": [
                        "rewrite map_push;constructor 2;assumption.",
                        "VernacExtend",
                        "a7f561e10ad449be7a7f2c8dbf9e1dd16d9cbc9c"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}