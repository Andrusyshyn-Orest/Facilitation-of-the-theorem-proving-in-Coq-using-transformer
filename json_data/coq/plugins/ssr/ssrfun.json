{
    "filename": "plugins/ssr/ssrfun.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import ssreflect.",
            "VernacRequire",
            "e60f651a4cc2d9c52735370fd243959bbcd3dcf0"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Unset Printing Implicit Defensive.",
            "VernacUnsetOption",
            "444e5f0be4b25d9b1fd556943a447ec10046d151"
        ],
        [
            "Delimit Scope fun_scope with FUN.",
            "VernacDelimiters",
            "a3a4a471e0318953d6739f3f92e415a11e419bde"
        ],
        [
            "Open Scope fun_scope.",
            "VernacOpenCloseScope",
            "e1ee39f80bc184ef30030f33fdee416a82fd06cd"
        ],
        [
            "Notation \"f ^~ y\" := (fun x => f x y) (at level 10, y at level 8, no associativity, format \"f ^~ y\") : fun_scope.",
            "VernacNotation",
            "b86b4bef01b2d456aaab356d3825087a583e91e7"
        ],
        [
            "Notation \"@^~ x\" := (fun f => f x) (at level 10, x at level 8, no associativity, format \"@^~ x\") : fun_scope.",
            "VernacNotation",
            "89b4469cd9a1812e7fcacf12c7b5e1c62916093e"
        ],
        [
            "Delimit Scope pair_scope with PAIR.",
            "VernacDelimiters",
            "e102f396c38fbffd4ab5bdfba87b0551abe9a163"
        ],
        [
            "Open Scope pair_scope.",
            "VernacOpenCloseScope",
            "d9c4cc2bb4386f7b5b1300151d1be9ba27c463c1"
        ],
        [
            "Notation \"p .1\" := (fst p) (at level 2, left associativity, format \"p .1\") : pair_scope.",
            "VernacNotation",
            "1cc99a0b33b438489cf0bade31f5d19f1c37c981"
        ],
        [
            "Notation \"p .2\" := (snd p) (at level 2, left associativity, format \"p .2\") : pair_scope.",
            "VernacNotation",
            "7f7c4624aa58b1a99e99d6ed05943df37ee718e7"
        ],
        [
            "Coercion pair_of_and P Q (PandQ : P /\\ Q) := (proj1 PandQ, proj2 PandQ).",
            "VernacDefinition",
            "4b278a710d9c7763b693289fd6adc087d0a3b8e3"
        ],
        [
            "Definition all_pair I T U (w : forall i : I, T i * U i) := (fun i => (w i).1, fun i => (w i).2).",
            "VernacDefinition",
            "89df3b2585b6be10277c7174b0c94343a757ec70"
        ],
        [
            "Module Option.",
            "VernacDefineModule",
            "9ca4c95be2fa903c85e11bef05cdedfd9f62337d"
        ],
        [
            "Definition apply aT rT (f : aT -> rT) x u := if u is Some y then f y else x.",
            "VernacDefinition",
            "3ea2652af95dabddb25b9bb8ef2bfa679e755509"
        ],
        [
            "Definition default T := apply (fun x : T => x).",
            "VernacDefinition",
            "ead1cd7c6892398a0001078cfd231debaca3df92"
        ],
        [
            "Definition bind aT rT (f : aT -> option rT) := apply f None.",
            "VernacDefinition",
            "56aeac690f476027bd64a7d87c21ad0b645d4853"
        ],
        [
            "Definition map aT rT (f : aT -> rT) := bind (fun x => Some (f x)).",
            "VernacDefinition",
            "49586b25946a056eed3418ecf969b7fe04169d42"
        ],
        [
            "End Option.",
            "VernacEndSegment",
            "230c7c686b3b1358c4597464b922ecadee026ebc"
        ],
        [
            "Notation oapp := Option.apply.",
            "VernacSyntacticDefinition",
            "0f782644c8add069eb121374072550c92241828f"
        ],
        [
            "Notation odflt := Option.default.",
            "VernacSyntacticDefinition",
            "e67844568c211ad43dfcd23968df8ba17aebca61"
        ],
        [
            "Notation obind := Option.bind.",
            "VernacSyntacticDefinition",
            "abedefc7a3d25b6e88a306e34cd1c5baeaf86d46"
        ],
        [
            "Notation omap := Option.map.",
            "VernacSyntacticDefinition",
            "e3805edfcc3ea6ec79c415320fb80d5c148b03d8"
        ],
        [
            "Notation some := (@Some _) (only parsing).",
            "VernacSyntacticDefinition",
            "245410665b3e3617bf737aaf20e3a8bd65edaf66"
        ],
        [
            "Notation erefl := refl_equal.",
            "VernacSyntacticDefinition",
            "ca2b1ade4458279896fbbf272c1c5502edee2ac3"
        ],
        [
            "Notation ecast i T e x := (let: erefl in _ = i := e return T in x).",
            "VernacSyntacticDefinition",
            "92cc333a22c650b876a1b579400cd27c6074b431"
        ],
        [
            "Definition esym := sym_eq.",
            "VernacDefinition",
            "73f6b0eca0486a4163509e3efb31131dff0a9a0e"
        ],
        [
            "Definition nesym := sym_not_eq.",
            "VernacDefinition",
            "76eeee41a4f41bf5bf353a0e513bc950cfc3fb46"
        ],
        [
            "Definition etrans := trans_eq.",
            "VernacDefinition",
            "ecab8d5d5fb56b997b0cc241cc4ae4b954b14ebd"
        ],
        [
            "Definition congr1 := f_equal.",
            "VernacDefinition",
            "018141c26ed001b521f4e2b9f60ba47d48310b95"
        ],
        [
            "Definition congr2 := f_equal2.",
            "VernacDefinition",
            "1cd449768627d0510ff41feaae048f5da5267a12"
        ],
        [
            "Prenex Implicits esym nesym.",
            "VernacExtend",
            "2b288d389dd64b479f3802765f598890cbb29eb6"
        ],
        [
            "Definition all_equal_to T (x0 : T) := forall x, unkeyed x = x0.",
            "VernacDefinition",
            "99cbfb6ae1af02507bbf5ce9ada5df1d1f00dcb3"
        ],
        [
            "Lemma unitE : all_equal_to tt.",
            "VernacStartTheoremProof",
            "8fc7dc3ac8bd3d31ce07f1f4574de17ca0bd30fc"
        ],
        [
            "by case.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Structure wrapped T := Wrap {unwrap : T}.",
            "VernacInductive",
            "a2eec92e0a2ee66a277f663488ea6419dccca727"
        ],
        [
            "Canonical wrap T x := @Wrap T x.",
            "VernacDefinition",
            "4e333a232b7970da9dba97670b135f1a304c6126"
        ],
        [
            "Prenex Implicits unwrap wrap Wrap.",
            "VernacExtend",
            "6974ead90225605f178f531efc83fd116c13fc75"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 ]\" (at level 0, format \"[ 'rec' a0 ]\").",
            "VernacSyntaxExtension",
            "0d8e0a2b7dc75aec6e73d65047eb966a837c72aa"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 , a1 ]\" (at level 0, format \"[ 'rec' a0 , a1 ]\").",
            "VernacSyntaxExtension",
            "0d55a82ce155cee6188a5f7094d60594b9573f1a"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 , a1 , a2 ]\" (at level 0, format \"[ 'rec' a0 , a1 , a2 ]\").",
            "VernacSyntaxExtension",
            "470183bba213e4343cb91689230d48ee581f9b72"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 , a1 , a2 , a3 ]\" (at level 0, format \"[ 'rec' a0 , a1 , a2 , a3 ]\").",
            "VernacSyntaxExtension",
            "0709891b93d826fc335f6f3681319615b872a06d"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 , a1 , a2 , a3 , a4 ]\" (at level 0, format \"[ 'rec' a0 , a1 , a2 , a3 , a4 ]\").",
            "VernacSyntaxExtension",
            "5ef7d41d192c71dc402ec27a86e319df512afb60"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 ]\" (at level 0, format \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 ]\").",
            "VernacSyntaxExtension",
            "4fbf72b63fbf615660752d453e78786c594cdf00"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 , a6 ]\" (at level 0, format \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 , a6 ]\").",
            "VernacSyntaxExtension",
            "6f8279db388d08f86c7a3d4dd567e141bc0bd895"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ]\" (at level 0, format \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ]\").",
            "VernacSyntaxExtension",
            "c7f70e898ae6d83cb1041a19092f752f0b4c39cc"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ]\" (at level 0, format \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ]\").",
            "VernacSyntaxExtension",
            "b73db3516d85b4cf39ad0c17b37a26d018fb7568"
        ],
        [
            "Reserved Notation \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 ]\" (at level 0, format \"[ 'rec' a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 ]\").",
            "VernacSyntaxExtension",
            "9bddb1e293a669acc716f072be52447dfa9d81cd"
        ],
        [
            "Section SimplFun.",
            "VernacBeginSection",
            "647d8b044f40219175c8f9c478ae93d5eb6b6f4b"
        ],
        [
            "Variables aT rT : Type.",
            "VernacAssumption",
            "f4ffdd0dc70d6aa092cd590e8e061e7fb4d88879"
        ],
        [
            "Variant simpl_fun := SimplFun of aT -> rT.",
            "VernacInductive",
            "93b30a69412e02bdf3fce051854155c696133da2"
        ],
        [
            "Definition fun_of_simpl f := fun x => let: SimplFun lam := f in lam x.",
            "VernacDefinition",
            "88f199713fe574cdf00496022eb98f5970cf0919"
        ],
        [
            "Coercion fun_of_simpl : simpl_fun >-> Funclass.",
            "VernacCoercion",
            "5837b167abaa5bf0fbd0a87255d9a7d6c51c08b8"
        ],
        [
            "End SimplFun.",
            "VernacEndSegment",
            "1d3fdb2d4df4db993265f96af86bf156d494df05"
        ],
        [
            "Notation \"[ 'fun' : T => E ]\" := (SimplFun (fun _ : T => E)) (at level 0, format \"'[hv' [ 'fun' : T => '/ ' E ] ']'\") : fun_scope.",
            "VernacNotation",
            "1260e3f71ba5a6d42a0677432c236a6f9c4591bb"
        ],
        [
            "Notation \"[ 'fun' x => E ]\" := (SimplFun (fun x => E)) (at level 0, x ident, format \"'[hv' [ 'fun' x => '/ ' E ] ']'\") : fun_scope.",
            "VernacNotation",
            "477e8f723eaef2f9184317700973f691659399c2"
        ],
        [
            "Notation \"[ 'fun' x : T => E ]\" := (SimplFun (fun x : T => E)) (at level 0, x ident, only parsing) : fun_scope.",
            "VernacNotation",
            "2c91bc08ccbefbe8e701e6a4c526683776e09aaa"
        ],
        [
            "Notation \"[ 'fun' x y => E ]\" := (fun x => [fun y => E]) (at level 0, x ident, y ident, format \"'[hv' [ 'fun' x y => '/ ' E ] ']'\") : fun_scope.",
            "VernacNotation",
            "14f4fb1f729b1d8f0b46572460d0a057f6c2900f"
        ],
        [
            "Notation \"[ 'fun' x y : T => E ]\" := (fun x : T => [fun y : T => E]) (at level 0, x ident, y ident, only parsing) : fun_scope.",
            "VernacNotation",
            "daf85e1f01d7b3c9b9231ed71457b47fa75e5c07"
        ],
        [
            "Notation \"[ 'fun' ( x : T ) y => E ]\" := (fun x : T => [fun y => E]) (at level 0, x ident, y ident, only parsing) : fun_scope.",
            "VernacNotation",
            "d74a8d51765996264b72ae2b3d8c8cd94ade164f"
        ],
        [
            "Notation \"[ 'fun' x ( y : T ) => E ]\" := (fun x => [fun y : T => E]) (at level 0, x ident, y ident, only parsing) : fun_scope.",
            "VernacNotation",
            "ae7e72b3e147452af70201dd0ddb617d305a82d8"
        ],
        [
            "Notation \"[ 'fun' ( x : xT ) ( y : yT ) => E ]\" := (fun x : xT => [fun y : yT => E]) (at level 0, x ident, y ident, only parsing) : fun_scope.",
            "VernacNotation",
            "08cd48dab94253e77747e535e6a4530ad0909f4a"
        ],
        [
            "Definition SimplFunDelta aT rT (f : aT -> aT -> rT) := [fun z => f z z].",
            "VernacDefinition",
            "02fedf6b86f01df25a1205b4416a40d92360fcdd"
        ],
        [
            "Section ExtensionalEquality.",
            "VernacBeginSection",
            "db9b2b06f9b84437537f3ea613195847baf79ee0"
        ],
        [
            "Variables A B C : Type.",
            "VernacAssumption",
            "b984fd511dd9c74615ca3bfe47bac591ca7927d3"
        ],
        [
            "Definition eqfun (f g : B -> A) : Prop := forall x, f x = g x.",
            "VernacDefinition",
            "19023937a9d51081554d42b9f8b34d06a85ff5a6"
        ],
        [
            "Definition eqrel (r s : C -> B -> A) : Prop := forall x y, r x y = s x y.",
            "VernacDefinition",
            "b1563e19c2d5ee772e6f95275ffac9ad07bc8aed"
        ],
        [
            "Lemma frefl f : eqfun f f.",
            "VernacStartTheoremProof",
            "e9d8a6d61b36b2a9d685113d9191b84b93bd9105"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fsym f g : eqfun f g -> eqfun g f.",
            "VernacStartTheoremProof",
            "d7d9b54ccf3863fac0f29cd8d305602d362d236b"
        ],
        [
            "by move=> eq_fg x.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ftrans f g h : eqfun f g -> eqfun g h -> eqfun f h.",
            "VernacStartTheoremProof",
            "f8a3ea29fc8e258400412dd9e52f0a6ae2a09667"
        ],
        [
            "by move=> eq_fg eq_gh x; rewrite eq_fg.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rrefl r : eqrel r r.",
            "VernacStartTheoremProof",
            "98593ed7f54edc75d6f5d5ef737d7c7d6032dfd3"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ExtensionalEquality.",
            "VernacEndSegment",
            "5eb17f6709d4ffa3282aa88204ed109ddd898e9a"
        ],
        [
            "Typeclasses Opaque eqfun.",
            "VernacExtend",
            "b58e4f8b9491d6908dd44bd98990a1972eaf285b"
        ],
        [
            "Typeclasses Opaque eqrel.",
            "VernacExtend",
            "1bfd7ecb1a6cd6eeed0ccfbd9c5c31e866429fa1"
        ],
        [
            "Hint Resolve frefl rrefl.",
            "VernacHints",
            "eaa53cbaec2b0a5455fe46f6561dd466a1100cb5"
        ],
        [
            "Notation \"f1 =1 f2\" := (eqfun f1 f2) (at level 70, no associativity) : fun_scope.",
            "VernacNotation",
            "9f70902a76131e39474cc7cdd08a418882830e32"
        ],
        [
            "Notation \"f1 =1 f2 :> A\" := (f1 =1 (f2 : A)) (at level 70, f2 at next level, A at level 90) : fun_scope.",
            "VernacNotation",
            "24186ef7f3d15c6a97b47b56d3e08eb323bf96a8"
        ],
        [
            "Notation \"f1 =2 f2\" := (eqrel f1 f2) (at level 70, no associativity) : fun_scope.",
            "VernacNotation",
            "5041ccb295a37ca37782b3557f20b42e43121a60"
        ],
        [
            "Notation \"f1 =2 f2 :> A\" := (f1 =2 (f2 : A)) (at level 70, f2 at next level, A at level 90) : fun_scope.",
            "VernacNotation",
            "086044c1b8872b2ed186db4d26cffe76bb6a4a16"
        ],
        [
            "Section Composition.",
            "VernacBeginSection",
            "57a8865362458e4847120d1a7dace64b434b4d4e"
        ],
        [
            "Variables A B C : Type.",
            "VernacAssumption",
            "b984fd511dd9c74615ca3bfe47bac591ca7927d3"
        ],
        [
            "Definition funcomp u (f : B -> A) (g : C -> B) x := let: tt := u in f (g x).",
            "VernacDefinition",
            "64a1bb32cdbf02b43bff9c88e0f76a621ef38998"
        ],
        [
            "Definition catcomp u g f := funcomp u f g.",
            "VernacDefinition",
            "6a090d92fbb30f56110f681fb0515bcf7c7a98fe"
        ],
        [
            "Local Notation comp := (funcomp tt).",
            "VernacSyntacticDefinition",
            "0b7f4683ce2734f2fc1acd61255a2e74600ba4d7"
        ],
        [
            "Definition pcomp (f : B -> option A) (g : C -> option B) x := obind f (g x).",
            "VernacDefinition",
            "8b45f72596841f1e4ff7337baf1ed249cb06203f"
        ],
        [
            "Lemma eq_comp f f' g g' : f =1 f' -> g =1 g' -> comp f g =1 comp f' g'.",
            "VernacStartTheoremProof",
            "29f86d13976cfbb9b2ac56c5d5c9dc9dbe6ab3ca"
        ],
        [
            "by move=> eq_ff' eq_gg' x; rewrite /= eq_gg' eq_ff'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Composition.",
            "VernacEndSegment",
            "c1e1f2192633a0b7eb03081be87b6dc8ae600b9b"
        ],
        [
            "Notation comp := (funcomp tt).",
            "VernacSyntacticDefinition",
            "c36707cf21024f756b64845d01fda1c658cb2e59"
        ],
        [
            "Notation \"@ 'comp'\" := (fun A B C => @funcomp A B C tt).",
            "VernacNotation",
            "fbb2c0c817cdfc89ca7d5a69f9a73084d3790fe1"
        ],
        [
            "Notation \"f1 \\o f2\" := (comp f1 f2) (at level 50, format \"f1 \\o '/ ' f2\") : fun_scope.",
            "VernacNotation",
            "5d959bd2d92f56ad8fcb0279cb062696f171cf7b"
        ],
        [
            "Notation \"f1 \\; f2\" := (catcomp tt f1 f2) (at level 60, right associativity, format \"f1 \\; '/ ' f2\") : fun_scope.",
            "VernacNotation",
            "eb43ded51f226a82f5480e7984510279918112a9"
        ],
        [
            "Notation \"[ 'eta' f ]\" := (fun x => f x) (at level 0, format \"[ 'eta' f ]\") : fun_scope.",
            "VernacNotation",
            "f364313783f6bc2197ed76e70d19def770f03254"
        ],
        [
            "Notation \"'fun' => E\" := (fun _ => E) (at level 200, only parsing) : fun_scope.",
            "VernacNotation",
            "828bca05f69a170b3ca98593ff3612127c4ed93f"
        ],
        [
            "Notation id := (fun x => x).",
            "VernacSyntacticDefinition",
            "8e0866e5e045769d98dff7fed8201a99c6af500c"
        ],
        [
            "Notation \"@ 'id' T\" := (fun x : T => x) (at level 10, T at level 8, only parsing) : fun_scope.",
            "VernacNotation",
            "f682be9f456dabc75f59c2d777e12afaff3eddf9"
        ],
        [
            "Definition id_head T u x : T := let: tt := u in x.",
            "VernacDefinition",
            "17b8a6bfde6f537f27af0b91e84480bcdf288e7f"
        ],
        [
            "Definition explicit_id_key := tt.",
            "VernacDefinition",
            "5a71a96c2deaf9cc0d9f1b05a219ed1cc2e2814b"
        ],
        [
            "Notation idfun := (id_head tt).",
            "VernacSyntacticDefinition",
            "f60ae93aecd05e1e98bd7fc5f2324dc88dc034dc"
        ],
        [
            "Notation \"@ 'idfun' T \" := (@id_head T explicit_id_key) (at level 10, T at level 8, format \"@ 'idfun' T\") : fun_scope.",
            "VernacNotation",
            "b1a8e2dfcc4b7ab13c4320e6b4e704d89d6a971d"
        ],
        [
            "Definition phant_id T1 T2 v1 v2 := phantom T1 v1 -> phantom T2 v2.",
            "VernacDefinition",
            "08fa0b49c944eb0d634ad041293dc8e189fb25d5"
        ],
        [
            "Section Tag.",
            "VernacBeginSection",
            "60aeada84ea600432036fab1defbff9d03d600b2"
        ],
        [
            "Variables (I : Type) (i : I) (T_ U_ : I -> Type).",
            "VernacAssumption",
            "55842535bbcfc115bf1a09a3ca9f84c886d1f421"
        ],
        [
            "Definition tag := projT1.",
            "VernacDefinition",
            "20a40b84d2dea7e0848a64f11a7e43457963bfed"
        ],
        [
            "Definition tagged : forall w, T_(tag w) := @projT2 I [eta T_].",
            "VernacDefinition",
            "ed4ec004b5103a25908b6b8d3cb7ee37f97d5251"
        ],
        [
            "Definition Tagged x := @existT I [eta T_] i x.",
            "VernacDefinition",
            "eb515a469bba5772e74aa5092744f0ff85e442a5"
        ],
        [
            "Definition tag2 (w : @sigT2 I T_ U_) := let: existT2 _ _ i _ _ := w in i.",
            "VernacDefinition",
            "aa14d1ddc7e8680f83be219b447b974586f32dc2"
        ],
        [
            "Definition tagged2 w : T_(tag2 w) := let: existT2 _ _ _ x _ := w in x.",
            "VernacDefinition",
            "fac8df327e6db8094e793fe9f51f3bc047946ba4"
        ],
        [
            "Definition tagged2' w : U_(tag2 w) := let: existT2 _ _ _ _ y := w in y.",
            "VernacDefinition",
            "713707f0202cd68d9da43f529c31b1bfb9743e92"
        ],
        [
            "Definition Tagged2 x y := @existT2 I [eta T_] [eta U_] i x y.",
            "VernacDefinition",
            "30ca42643f6bf47095c592c19e08f44abad4726b"
        ],
        [
            "End Tag.",
            "VernacEndSegment",
            "4bccbf2a8b054a0133f6fe0517a95fb747df4cb9"
        ],
        [
            "Arguments Tagged [I i].",
            "VernacArguments",
            "00ab928787f77a52c47eef428c8acfaa651679fc"
        ],
        [
            "Arguments Tagged2 [I i].",
            "VernacArguments",
            "2f6b67a5ea84f85ab14a3c992b872d0c2c0751cc"
        ],
        [
            "Prenex Implicits tag tagged Tagged tag2 tagged2 tagged2' Tagged2.",
            "VernacExtend",
            "798d7a2e3b89fd3a9db71470e9848dfc287d9d61"
        ],
        [
            "Coercion tag_of_tag2 I T_ U_ (w : @sigT2 I T_ U_) := Tagged (fun i => T_ i * U_ i)%type (tagged2 w, tagged2' w).",
            "VernacDefinition",
            "5d5c44ac8957a9211f8645d85fbe0bd42699e42b"
        ],
        [
            "Lemma all_tag I T U : (forall x : I, {y : T x & U x y}) -> {f : forall x, T x & forall x, U x (f x)}.",
            "VernacStartTheoremProof",
            "a36fa000fd6a1e8252ebb9b2c3999c1448b702b2"
        ],
        [
            "by move=> fP; exists (fun x => tag (fP x)) => x; case: (fP x).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_tag2 I T U V : (forall i : I, {y : T i & U i y & V i y}) -> {f : forall i, T i & forall i, U i (f i) & forall i, V i (f i)}.",
            "VernacStartTheoremProof",
            "ed28b5ec86f67032ecca7aeab6b3a71cd71f88fd"
        ],
        [
            "by case/all_tag=> f /all_pair[]; exists f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation sval := (@proj1_sig _ _).",
            "VernacSyntacticDefinition",
            "78bee5bbfd367fd103b94e8747a74755553b0469"
        ],
        [
            "Notation \"@ 'sval'\" := (@proj1_sig) (at level 10, format \"@ 'sval'\").",
            "VernacNotation",
            "d5a5c6c1ecde53eecd5b00bdb7310c6a94dcf81e"
        ],
        [
            "Section Sig.",
            "VernacBeginSection",
            "3c57104b47e00d84d2a711f2bd55f8896e68c784"
        ],
        [
            "Variables (T : Type) (P Q : T -> Prop).",
            "VernacAssumption",
            "33d9369a083071d0b5ef802afbe6e50133eff3bd"
        ],
        [
            "Lemma svalP (u : sig P) : P (sval u).",
            "VernacStartTheoremProof",
            "5efab63b2ea4deb630fbe1e4eeb5339ed7092544"
        ],
        [
            "by case: u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition s2val (u : sig2 P Q) := let: exist2 _ _ x _ _ := u in x.",
            "VernacDefinition",
            "e75e02225074c85ba848f7050efd22e717d2fa35"
        ],
        [
            "Lemma s2valP u : P (s2val u).",
            "VernacStartTheoremProof",
            "19daed46c3d729d7238378facd42d24db2f8d3ed"
        ],
        [
            "by case: u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma s2valP' u : Q (s2val u).",
            "VernacStartTheoremProof",
            "19622eadef67bed78a73dd6070cd2136a36a0e26"
        ],
        [
            "by case: u.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Sig.",
            "VernacEndSegment",
            "38a48a72f249d7080873b8549d2de703a0341844"
        ],
        [
            "Prenex Implicits svalP s2val s2valP s2valP'.",
            "VernacExtend",
            "fec0a4e1e5efe0526168ea41ea80b9a1b7efa2c6"
        ],
        [
            "Coercion tag_of_sig I P (u : @sig I P) := Tagged P (svalP u).",
            "VernacDefinition",
            "26bc6f88c4614d7bc53027f2a0fa6126bef64900"
        ],
        [
            "Coercion sig_of_sig2 I P Q (u : @sig2 I P Q) := exist (fun i => P i /\\ Q i) (s2val u) (conj (s2valP u) (s2valP' u)).",
            "VernacDefinition",
            "3737a35ad36c47f522ad4f3a2c4ec8da7a53b8f9"
        ],
        [
            "Lemma all_sig I T P : (forall x : I, {y : T x | P x y}) -> {f : forall x, T x | forall x, P x (f x)}.",
            "VernacStartTheoremProof",
            "41201895f07ab8ac291bea42ad3e9c68e083e215"
        ],
        [
            "by case/all_tag=> f; exists f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_sig2 I T P Q : (forall x : I, {y : T x | P x y & Q x y}) -> {f : forall x, T x | forall x, P x (f x) & forall x, Q x (f x)}.",
            "VernacStartTheoremProof",
            "9da3d4acdff4e2e7e269d633c5c3b6b3dc9c902d"
        ],
        [
            "by case/all_sig=> f /all_pair[]; exists f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section Morphism.",
            "VernacBeginSection",
            "43709b93e7e1a516325cf1e94c39ab05798095df"
        ],
        [
            "Variables (aT rT sT : Type) (f : aT -> rT).",
            "VernacAssumption",
            "89a419c15e1f8c9513008002a3c035b0cf1a6c40"
        ],
        [
            "Definition morphism_1 aF rF := forall x, f (aF x) = rF (f x).",
            "VernacDefinition",
            "7deb73a6edeaf0c49b9d801b4130697ded03b913"
        ],
        [
            "Definition morphism_2 aOp rOp := forall x y, f (aOp x y) = rOp (f x) (f y).",
            "VernacDefinition",
            "4b23bdfa4752573f263d1c6dc8837d068108ec7e"
        ],
        [
            "Definition homomorphism_1 (aP rP : _ -> Prop) := forall x, aP x -> rP (f x).",
            "VernacDefinition",
            "258d22cbed16b851c2c3e49f45de08edbcdb8ca5"
        ],
        [
            "Definition homomorphism_2 (aR rR : _ -> _ -> Prop) := forall x y, aR x y -> rR (f x) (f y).",
            "VernacDefinition",
            "9357190e8ab339bf4a72a58df3716a8478aa21ef"
        ],
        [
            "Definition monomorphism_1 (aP rP : _ -> sT) := forall x, rP (f x) = aP x.",
            "VernacDefinition",
            "6be732bf16deb51f3612e34657c8327a7edc736f"
        ],
        [
            "Definition monomorphism_2 (aR rR : _ -> _ -> sT) := forall x y, rR (f x) (f y) = aR x y.",
            "VernacDefinition",
            "6fa3e878291823d8ba6ac7fdf4ac32fe99947e7d"
        ],
        [
            "End Morphism.",
            "VernacEndSegment",
            "c60ee6360bf040fe1e0d16e35ae7897dd75c8379"
        ],
        [
            "Notation \"{ 'morph' f : x / a >-> r }\" := (morphism_1 f (fun x => a) (fun x => r)) (at level 0, f at level 99, x ident, format \"{ 'morph' f : x / a >-> r }\") : type_scope.",
            "VernacNotation",
            "88e85195c1460463bdb499fd8cb8ec40f191655a"
        ],
        [
            "Notation \"{ 'morph' f : x / a }\" := (morphism_1 f (fun x => a) (fun x => a)) (at level 0, f at level 99, x ident, format \"{ 'morph' f : x / a }\") : type_scope.",
            "VernacNotation",
            "eaffbf45cd5aca7938292f59149824651513e85d"
        ],
        [
            "Notation \"{ 'morph' f : x y / a >-> r }\" := (morphism_2 f (fun x y => a) (fun x y => r)) (at level 0, f at level 99, x ident, y ident, format \"{ 'morph' f : x y / a >-> r }\") : type_scope.",
            "VernacNotation",
            "7dbc9d8dc0ad24c29cb194a4103556e587c2d15d"
        ],
        [
            "Notation \"{ 'morph' f : x y / a }\" := (morphism_2 f (fun x y => a) (fun x y => a)) (at level 0, f at level 99, x ident, y ident, format \"{ 'morph' f : x y / a }\") : type_scope.",
            "VernacNotation",
            "da17aacf060420983aa0aee2f314d40b50b4db58"
        ],
        [
            "Notation \"{ 'homo' f : x / a >-> r }\" := (homomorphism_1 f (fun x => a) (fun x => r)) (at level 0, f at level 99, x ident, format \"{ 'homo' f : x / a >-> r }\") : type_scope.",
            "VernacNotation",
            "5ed6f72de767dc1152d767d7f227f8a46001cd02"
        ],
        [
            "Notation \"{ 'homo' f : x / a }\" := (homomorphism_1 f (fun x => a) (fun x => a)) (at level 0, f at level 99, x ident, format \"{ 'homo' f : x / a }\") : type_scope.",
            "VernacNotation",
            "d2826ab0010906f7d726614a5d95698bc2a0e49b"
        ],
        [
            "Notation \"{ 'homo' f : x y / a >-> r }\" := (homomorphism_2 f (fun x y => a) (fun x y => r)) (at level 0, f at level 99, x ident, y ident, format \"{ 'homo' f : x y / a >-> r }\") : type_scope.",
            "VernacNotation",
            "13a55d5cd0eafeb3784d0ecbd4297447fb023dd6"
        ],
        [
            "Notation \"{ 'homo' f : x y / a }\" := (homomorphism_2 f (fun x y => a) (fun x y => a)) (at level 0, f at level 99, x ident, y ident, format \"{ 'homo' f : x y / a }\") : type_scope.",
            "VernacNotation",
            "6b6b2b87f79e43b419e0b656b3268c084a685bd4"
        ],
        [
            "Notation \"{ 'homo' f : x y /~ a }\" := (homomorphism_2 f (fun y x => a) (fun x y => a)) (at level 0, f at level 99, x ident, y ident, format \"{ 'homo' f : x y /~ a }\") : type_scope.",
            "VernacNotation",
            "61f8c15f6bb510f31144c979c33b75e4136d0098"
        ],
        [
            "Notation \"{ 'mono' f : x / a >-> r }\" := (monomorphism_1 f (fun x => a) (fun x => r)) (at level 0, f at level 99, x ident, format \"{ 'mono' f : x / a >-> r }\") : type_scope.",
            "VernacNotation",
            "314a6b304fa38a46b698c07a6ca24ddea33e01db"
        ],
        [
            "Notation \"{ 'mono' f : x / a }\" := (monomorphism_1 f (fun x => a) (fun x => a)) (at level 0, f at level 99, x ident, format \"{ 'mono' f : x / a }\") : type_scope.",
            "VernacNotation",
            "d0ba371ee8a321e5d807fe214cd5eb63c018a338"
        ],
        [
            "Notation \"{ 'mono' f : x y / a >-> r }\" := (monomorphism_2 f (fun x y => a) (fun x y => r)) (at level 0, f at level 99, x ident, y ident, format \"{ 'mono' f : x y / a >-> r }\") : type_scope.",
            "VernacNotation",
            "eb07bdb9ba14bdac758ecd853fb8a90e27dd3b14"
        ],
        [
            "Notation \"{ 'mono' f : x y / a }\" := (monomorphism_2 f (fun x y => a) (fun x y => a)) (at level 0, f at level 99, x ident, y ident, format \"{ 'mono' f : x y / a }\") : type_scope.",
            "VernacNotation",
            "8f42935b1053f7e938e8b374288eb85012abe596"
        ],
        [
            "Notation \"{ 'mono' f : x y /~ a }\" := (monomorphism_2 f (fun y x => a) (fun x y => a)) (at level 0, f at level 99, x ident, y ident, format \"{ 'mono' f : x y /~ a }\") : type_scope.",
            "VernacNotation",
            "73c5e5ba460bfb31d1e6a44c1e3b050954653758"
        ],
        [
            "Section Injections.",
            "VernacBeginSection",
            "b4e0ba608415a95d056603b688d9c51bda1c296a"
        ],
        [
            "Variables (rT aT : Type) (f : aT -> rT).",
            "VernacAssumption",
            "3d688d4fbb8f2f359fd8d4a1cbab26861369f48f"
        ],
        [
            "Definition injective := forall x1 x2, f x1 = f x2 -> x1 = x2.",
            "VernacDefinition",
            "55ccd1edd0c0255275896a46bb55b71c48e7545a"
        ],
        [
            "Definition cancel g := forall x, g (f x) = x.",
            "VernacDefinition",
            "c8d65e65ae12114b1bb9b7f1c856450df5b2c5fd"
        ],
        [
            "Definition pcancel g := forall x, g (f x) = Some x.",
            "VernacDefinition",
            "c653eaf365281cfab5c9d60686f36ca0353ed040"
        ],
        [
            "Definition ocancel (g : aT -> option rT) h := forall x, oapp h x (g x) = x.",
            "VernacDefinition",
            "0a5520d0b0cdf363b6e64891a48ad5ccf3439d79"
        ],
        [
            "Lemma can_pcan g : cancel g -> pcancel (fun y => Some (g y)).",
            "VernacStartTheoremProof",
            "ab1af103e9a38d804a7794f998b277b67139cfdd"
        ],
        [
            "by move=> fK x; congr (Some _).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pcan_inj g : pcancel g -> injective.",
            "VernacStartTheoremProof",
            "039bfb60d35be92c96108fc2742616802cc944c1"
        ],
        [
            "by move=> fK x y /(congr1 g); rewrite !fK => [[]].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can_inj g : cancel g -> injective.",
            "VernacStartTheoremProof",
            "296b3284afc74a1ff9244b194805d3310145301f"
        ],
        [
            "by move/can_pcan; apply: pcan_inj.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canLR g x y : cancel g -> x = f y -> g x = y.",
            "VernacStartTheoremProof",
            "f17644e70782dfaa90472ea4ec96ee92f3c76d74"
        ],
        [
            "by move=> fK ->.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canRL g x y : cancel g -> f x = y -> x = g y.",
            "VernacStartTheoremProof",
            "a8080819d86601d26cd1ba0bcdf70a7c58dcc050"
        ],
        [
            "by move=> fK <-.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Injections.",
            "VernacEndSegment",
            "5056721183c2a89f3415f8d364c4a7f409c6b45f"
        ],
        [
            "Lemma Some_inj {T} : injective (@Some T).",
            "VernacStartTheoremProof",
            "f2ea27dcd74482f7e1f9e20dae8cfe8715246fcf"
        ],
        [
            "by move=> x y [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Prenex Implicits Some_inj.",
            "VernacExtend",
            "afff88e4627e6b631336911e936750ef0b801858"
        ],
        [
            "Lemma esymK T x y : cancel (@esym T x y) (@esym T y x).",
            "VernacStartTheoremProof",
            "399b35cb5efc16c19014fd23f9f15f98e2ea876c"
        ],
        [
            "by case: y /.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma etrans_id T x y (eqxy : x = y :> T) : etrans (erefl x) eqxy = eqxy.",
            "VernacStartTheoremProof",
            "2f4a672e1692724401049b13ecd04e270aa2d495"
        ],
        [
            "by case: y / eqxy.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section InjectionsTheory.",
            "VernacBeginSection",
            "cd2cede6b235850851d82ef6104e475cbbffe9a8"
        ],
        [
            "Variables (A B C : Type) (f g : B -> A) (h : C -> B).",
            "VernacAssumption",
            "5f0cef72210c230a2ff2f49ff2173c136f9e1070"
        ],
        [
            "Lemma inj_id : injective (@id A).",
            "VernacStartTheoremProof",
            "a6c3dd107df508412a193eb3a4044977f9c18abe"
        ],
        [
            "by [].",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_can_sym f' : cancel f f' -> injective f' -> cancel f' f.",
            "VernacStartTheoremProof",
            "f7bdb7abdfbfcd9eec722c5b95e6b25247a107fa"
        ],
        [
            "by move=> fK injf' x; apply: injf'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_comp : injective f -> injective h -> injective (f \\o h).",
            "VernacStartTheoremProof",
            "ea2ed61d329a4aa1b3ebc4094b94223af4361d5f"
        ],
        [
            "by move=> injf injh x y /injf; apply: injh.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma can_comp f' h' : cancel f f' -> cancel h h' -> cancel (f \\o h) (h' \\o f').",
            "VernacStartTheoremProof",
            "01b1b0e33d8e02df0fbb7374db463e8711d4bea5"
        ],
        [
            "by move=> fK hK x; rewrite /= fK hK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pcan_pcomp f' h' : pcancel f f' -> pcancel h h' -> pcancel (f \\o h) (pcomp h' f').",
            "VernacStartTheoremProof",
            "8036f3cea50ccfb3a158c6f710041695fb187ea4"
        ],
        [
            "by move=> fK hK x; rewrite /pcomp fK /= hK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_inj : injective f -> f =1 g -> injective g.",
            "VernacStartTheoremProof",
            "71c1b19fab2ee95337a806aa4af835cd9c8022e7"
        ],
        [
            "by move=> injf eqfg x y; rewrite -2!eqfg; apply: injf.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_can f' g' : cancel f f' -> f =1 g -> f' =1 g' -> cancel g g'.",
            "VernacStartTheoremProof",
            "c21a657065a4a3cdb12e171a81f30644f924d6ea"
        ],
        [
            "by move=> fK eqfg eqfg' x; rewrite -eqfg -eqfg'.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inj_can_eq f' : cancel f f' -> injective f' -> cancel g f' -> f =1 g.",
            "VernacStartTheoremProof",
            "f98b638756a83c6d7d1431d33b526b0f2a0ddf9e"
        ],
        [
            "by move=> fK injf' gK x; apply: injf'; rewrite fK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End InjectionsTheory.",
            "VernacEndSegment",
            "33a5557b31be83e24b32205a4f435632399504f1"
        ],
        [
            "Section Bijections.",
            "VernacBeginSection",
            "876c70029e904aa0b65f976d3f0206cc290a33d8"
        ],
        [
            "Variables (A B : Type) (f : B -> A).",
            "VernacAssumption",
            "7af73082115b555f7594ac81098d8aa5e3ac2190"
        ],
        [
            "Variant bijective : Prop := Bijective g of cancel f g & cancel g f.",
            "VernacInductive",
            "999cdb49a564f21957dce86a5f222a1e6efb6b42"
        ],
        [
            "Hypothesis bijf : bijective.",
            "VernacAssumption",
            "9954b17f8fb7bb4e5f3f18bd3758c944b3d2efa0"
        ],
        [
            "Lemma bij_inj : injective f.",
            "VernacStartTheoremProof",
            "2b3754fd764d06a963ef1747dbb69601c39c6f5e"
        ],
        [
            "by case: bijf => g fK _; apply: can_inj fK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_can_sym f' : cancel f' f <-> cancel f f'.",
            "VernacStartTheoremProof",
            "f0e4428a36f7182222b47e9bc94eb5e7367aad27"
        ],
        [
            "split=> fK; first exact: inj_can_sym fK bij_inj.",
            "VernacExtend",
            "3763a4b8db689af316a7372b722bb29806ab4fb6"
        ],
        [
            "by case: bijf => h _ hK x; rewrite -[x]hK fK.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_can_eq f' f'' : cancel f f' -> cancel f f'' -> f' =1 f''.",
            "VernacStartTheoremProof",
            "5c9145913529f7597fc77ffb42227063a31ce87d"
        ],
        [
            "by move=> fK fK'; apply: (inj_can_eq _ bij_inj); apply/bij_can_sym.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Bijections.",
            "VernacEndSegment",
            "e7539d484f9b4fbb3d9220b6cbbba78d80d86784"
        ],
        [
            "Section BijectionsTheory.",
            "VernacBeginSection",
            "9c40d1c23f9c12813e4be6c1f0eb926f9fbc6559"
        ],
        [
            "Variables (A B C : Type) (f : B -> A) (h : C -> B).",
            "VernacAssumption",
            "6006e59250f9fffd47f2193bab1adab2b7c5b9c5"
        ],
        [
            "Lemma eq_bij : bijective f -> forall g, f =1 g -> bijective g.",
            "VernacStartTheoremProof",
            "17012d3370cd749be4d780fbd710c9df44608444"
        ],
        [
            "by case=> f' fK f'K g eqfg; exists f'; eapply eq_can; eauto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_comp : bijective f -> bijective h -> bijective (f \\o h).",
            "VernacStartTheoremProof",
            "909700b130680143ef808046c6bcb784932e9606"
        ],
        [
            "by move=> [f' fK f'K] [h' hK h'K]; exists (h' \\o f'); apply: can_comp; auto.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bij_can_bij : bijective f -> forall f', cancel f f' -> bijective f'.",
            "VernacStartTheoremProof",
            "9119ad0bf8b21d01bbd4e03c362a696f752c85cf"
        ],
        [
            "by move=> bijf; exists f; first by apply/(bij_can_sym bijf).",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End BijectionsTheory.",
            "VernacEndSegment",
            "b77b65e0c496a6252f0ea6196c5383f2971cc662"
        ],
        [
            "Section Involutions.",
            "VernacBeginSection",
            "78471c1bf3ebf3a8d35d42698cf19290f8c7cf49"
        ],
        [
            "Variables (A : Type) (f : A -> A).",
            "VernacAssumption",
            "be66bc1047c82764d186bd43870311dba5ca32c0"
        ],
        [
            "Definition involutive := cancel f f.",
            "VernacDefinition",
            "08564a849ccbb59753786959848c3716865ef58a"
        ],
        [
            "Hypothesis Hf : involutive.",
            "VernacAssumption",
            "e8d8504708ae5a20450b54bf26d38db614ba4a48"
        ],
        [
            "Lemma inv_inj : injective f.",
            "VernacStartTheoremProof",
            "03c6b8671a1708b35faba3ea456ce603a339bab8"
        ],
        [
            "exact: can_inj Hf.",
            "VernacExtend",
            "ce637ff86bafca5d8359473e8c02af644dcbdc43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inv_bij : bijective f.",
            "VernacStartTheoremProof",
            "a2ad831653b07227904b315fe03ed091a1d7206b"
        ],
        [
            "by exists f.",
            "VernacExtend",
            "ee1746465e986ababa06bb4e96ee76be726c914a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Involutions.",
            "VernacEndSegment",
            "1ec25f244661adf3a101532d9898e36027d8813d"
        ],
        [
            "Section OperationProperties.",
            "VernacBeginSection",
            "d7e6b0f26ac85aa550aa6ab9674a92e2ad0bde58"
        ],
        [
            "Variables S T R : Type.",
            "VernacAssumption",
            "f1a014ec3e2357dd8c1845fc6014de680cc17967"
        ],
        [
            "Section SopTisR.",
            "VernacBeginSection",
            "1f04d4c032a8ed6ff632ff0947d3a1e8a4d261d8"
        ],
        [
            "Implicit Type op : S -> T -> R.",
            "VernacReserve",
            "389fa29eef6394807ed0a57ee5713041422bf496"
        ],
        [
            "Definition left_inverse e inv op := forall x, op (inv x) x = e.",
            "VernacDefinition",
            "48aefae7d72f823038e36cc4bb5a339132d7125f"
        ],
        [
            "Definition right_inverse e inv op := forall x, op x (inv x) = e.",
            "VernacDefinition",
            "6c8f06ecfd309b461653c6de4143f4d8e1d9a4da"
        ],
        [
            "Definition left_injective op := forall x, injective (op^~ x).",
            "VernacDefinition",
            "4675b82f8f98956a458fb9160422a91d7ca2e9a4"
        ],
        [
            "Definition right_injective op := forall y, injective (op y).",
            "VernacDefinition",
            "7ce860cafd2f629d891633852d69600fce45df39"
        ],
        [
            "End SopTisR.",
            "VernacEndSegment",
            "be4b3372d69612d23e6740fc0514659e4608306c"
        ],
        [
            "Section SopTisS.",
            "VernacBeginSection",
            "a71741b6ca0c95e783a55ab15b9c908681ce8b3c"
        ],
        [
            "Implicit Type op : S -> T -> S.",
            "VernacReserve",
            "4bbcd674b6ed2b0b7617564f91946334a94383f6"
        ],
        [
            "Definition right_id e op := forall x, op x e = x.",
            "VernacDefinition",
            "b835d7e9ef4fe49ffac08b6cbe7ebd7ab0123582"
        ],
        [
            "Definition left_zero z op := forall x, op z x = z.",
            "VernacDefinition",
            "e6281846e07eb429abded762b1be6239b933ce98"
        ],
        [
            "Definition right_commutative op := forall x y z, op (op x y) z = op (op x z) y.",
            "VernacDefinition",
            "0899cc2a9a1ec3c06867006a0a022b2488de6ac6"
        ],
        [
            "Definition left_distributive op add := forall x y z, op (add x y) z = add (op x z) (op y z).",
            "VernacDefinition",
            "2130923be4962daac7a9036062e854073d82a054"
        ],
        [
            "Definition right_loop inv op := forall y, cancel (op^~ y) (op^~ (inv y)).",
            "VernacDefinition",
            "ff619699006d2e4bdb3ad83ebaf17ca87ffe9b48"
        ],
        [
            "Definition rev_right_loop inv op := forall y, cancel (op^~ (inv y)) (op^~ y).",
            "VernacDefinition",
            "ec04fb07e7365ab9de33af09de32a09b3989e103"
        ],
        [
            "End SopTisS.",
            "VernacEndSegment",
            "d535799551c10bdf3ea1c4b3cb7c084a1d02d692"
        ],
        [
            "Section SopTisT.",
            "VernacBeginSection",
            "4ae6380679d00c0fc6171944ed9a014f42d3c3bd"
        ],
        [
            "Implicit Type op : S -> T -> T.",
            "VernacReserve",
            "a35db65dda5a72a705b8c8b97d68ad0ab766890b"
        ],
        [
            "Definition left_id e op := forall x, op e x = x.",
            "VernacDefinition",
            "dd9649b08f648b2b41d3590e578bbcb38bb8e96f"
        ],
        [
            "Definition right_zero z op := forall x, op x z = z.",
            "VernacDefinition",
            "989be2687a22cbe3c071773ce7b9adfeb408ff51"
        ],
        [
            "Definition left_commutative op := forall x y z, op x (op y z) = op y (op x z).",
            "VernacDefinition",
            "27fd6ca6f84e8f7a3f891a410de2334928ed237e"
        ],
        [
            "Definition right_distributive op add := forall x y z, op x (add y z) = add (op x y) (op x z).",
            "VernacDefinition",
            "33453bf131e1f4c36385489e328fe78d4f3777ba"
        ],
        [
            "Definition left_loop inv op := forall x, cancel (op x) (op (inv x)).",
            "VernacDefinition",
            "16e3a1837f22e51da1915a468ab98b1e1a344952"
        ],
        [
            "Definition rev_left_loop inv op := forall x, cancel (op (inv x)) (op x).",
            "VernacDefinition",
            "3fad8364e4eb76b3dd14ba8a949537dbba92d2d7"
        ],
        [
            "End SopTisT.",
            "VernacEndSegment",
            "748252720a7ef8f76745c4427509a1fc23dd4880"
        ],
        [
            "Section SopSisT.",
            "VernacBeginSection",
            "fd3214cc1dd59d0f0d57ec377b20e08fb6e3a0ac"
        ],
        [
            "Implicit Type op : S -> S -> T.",
            "VernacReserve",
            "1856b51bd2c29de6a9fe0b041fce6a383afc3b5a"
        ],
        [
            "Definition self_inverse e op := forall x, op x x = e.",
            "VernacDefinition",
            "5625021d794ed391957cecf2edcd7c812b50b71a"
        ],
        [
            "Definition commutative op := forall x y, op x y = op y x.",
            "VernacDefinition",
            "c8c04bbb8e92192c45602cd6d889205ba997e270"
        ],
        [
            "End SopSisT.",
            "VernacEndSegment",
            "fd00eaf86e333cb5f4891735f02ee1a57975f085"
        ],
        [
            "Section SopSisS.",
            "VernacBeginSection",
            "eee859fd943bc2c5b5372fa8bce1c3537901a02f"
        ],
        [
            "Implicit Type op : S -> S -> S.",
            "VernacReserve",
            "9a9f07f8665ffe2177febbe618087dfb243990d3"
        ],
        [
            "Definition idempotent op := forall x, op x x = x.",
            "VernacDefinition",
            "e713dffed8eae2621cba208d0390e4b8b1a82d3f"
        ],
        [
            "Definition associative op := forall x y z, op x (op y z) = op (op x y) z.",
            "VernacDefinition",
            "77575260ca13938b1a381b73da0439f52d98e628"
        ],
        [
            "Definition interchange op1 op2 := forall x y z t, op1 (op2 x y) (op2 z t) = op2 (op1 x z) (op1 y t).",
            "VernacDefinition",
            "3902f44f940b5519ed1c9c0df068c02ac4fe1610"
        ],
        [
            "End SopSisS.",
            "VernacEndSegment",
            "5c78719d8ae32fea841c117c006bcc789a7c9eef"
        ],
        [
            "End OperationProperties.",
            "VernacEndSegment",
            "29dd4b2304a628621fff11bf951b3df43bb1083f"
        ]
    ],
    "proofs": [
        {
            "name": "unitE",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "by case.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "frefl",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fsym",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "by move=> eq_fg x.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ftrans",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "by move=> eq_fg eq_gh x; rewrite eq_fg.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rrefl",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_comp",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "by move=> eq_ff' eq_gg' x; rewrite /= eq_gg' eq_ff'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_tag",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "by move=> fP; exists (fun x => tag (fP x)) => x; case: (fP x).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_tag2",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "by case/all_tag=> f /all_pair[]; exists f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "svalP",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "by case: u.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "s2valP",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "by case: u.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "s2valP'",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "by case: u.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_sig",
            "line_nb": 150,
            "steps": [
                {
                    "command": [
                        "by case/all_tag=> f; exists f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_sig2",
            "line_nb": 153,
            "steps": [
                {
                    "command": [
                        "by case/all_sig=> f /all_pair[]; exists f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can_pcan",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "by move=> fK x; congr (Some _).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pcan_inj",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "by move=> fK x y /(congr1 g); rewrite !fK => [[]].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can_inj",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "by move/can_pcan; apply: pcan_inj.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canLR",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "by move=> fK ->.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canRL",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "by move=> fK <-.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Some_inj",
            "line_nb": 201,
            "steps": [
                {
                    "command": [
                        "by move=> x y [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "esymK",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "by case: y /.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "etrans_id",
            "line_nb": 208,
            "steps": [
                {
                    "command": [
                        "by case: y / eqxy.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_id",
            "line_nb": 213,
            "steps": [
                {
                    "command": [
                        "by [].",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_can_sym",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "by move=> fK injf' x; apply: injf'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_comp",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "by move=> injf injh x y /injf; apply: injh.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "can_comp",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "by move=> fK hK x; rewrite /= fK hK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pcan_pcomp",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "by move=> fK hK x; rewrite /pcomp fK /= hK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_inj",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "by move=> injf eqfg x y; rewrite -2!eqfg; apply: injf.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_can",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "by move=> fK eqfg eqfg' x; rewrite -eqfg -eqfg'.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inj_can_eq",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "by move=> fK injf' gK x; apply: injf'; rewrite fK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_inj",
            "line_nb": 242,
            "steps": [
                {
                    "command": [
                        "by case: bijf => g fK _; apply: can_inj fK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_can_sym",
            "line_nb": 245,
            "steps": [
                {
                    "command": [
                        "split=> fK; first exact: inj_can_sym fK bij_inj.",
                        "VernacExtend",
                        "3763a4b8db689af316a7372b722bb29806ab4fb6"
                    ]
                },
                {
                    "command": [
                        "by case: bijf => h _ hK x; rewrite -[x]hK fK.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_can_eq",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "by move=> fK fK'; apply: (inj_can_eq _ bij_inj); apply/bij_can_sym.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_bij",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "by case=> f' fK f'K g eqfg; exists f'; eapply eq_can; eauto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_comp",
            "line_nb": 258,
            "steps": [
                {
                    "command": [
                        "by move=> [f' fK f'K] [h' hK h'K]; exists (h' \\o f'); apply: can_comp; auto.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bij_can_bij",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "by move=> bijf; exists f; first by apply/(bij_can_sym bijf).",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inv_inj",
            "line_nb": 269,
            "steps": [
                {
                    "command": [
                        "exact: can_inj Hf.",
                        "VernacExtend",
                        "ce637ff86bafca5d8359473e8c02af644dcbdc43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inv_bij",
            "line_nb": 272,
            "steps": [
                {
                    "command": [
                        "by exists f.",
                        "VernacExtend",
                        "ee1746465e986ababa06bb4e96ee76be726c914a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}