{
    "filename": "theories/Program/Subset.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Coq.Program.Utils.",
            "VernacRequire",
            "a8bdab7ca80d255c656a152d1062117f9c32c8da"
        ],
        [
            "Require Import Coq.Program.Equality.",
            "VernacRequire",
            "637e8bbba214905e0c003754c6798a3d83ee6b7b"
        ],
        [
            "Require Export ProofIrrelevance.",
            "VernacRequire",
            "5201953d2fd852db1f3a2c51b548fe0306692222"
        ],
        [
            "Local Open Scope program_scope.",
            "VernacOpenCloseScope",
            "6bb21a93b668247e2dedc8ec6af2f052c3ec2a49"
        ],
        [
            "Ltac on_subset_proof_aux tac T := match T with | context [ exist ?P _ ?p ] => try on_subset_proof_aux tac P ; tac p end.",
            "VernacExtend",
            "9d1b74cbb78cb24bd6747d0efeeac46c83ce2df8"
        ],
        [
            "Ltac on_subset_proof tac := match goal with [ |- ?T ] => on_subset_proof_aux tac T end.",
            "VernacExtend",
            "51fd8fbb5c9967eb2fd70462b4718af5c83e58e6"
        ],
        [
            "Ltac abstract_any_hyp H' p := match type of p with ?X => match goal with | [ H : X |- _ ] => fail 1 | _ => set (H':=p) ; try (change p with H') ; clearbody H' end end.",
            "VernacExtend",
            "35793245685984b7ee63e6bb540732610e65c7cd"
        ],
        [
            "Ltac abstract_subset_proof := on_subset_proof ltac:(fun p => let H := fresh \"eqH\" in abstract_any_hyp H p ; simpl in H).",
            "VernacExtend",
            "3a26e399fb0d859188a24928ad3b000ea66b2af3"
        ],
        [
            "Ltac abstract_subset_proofs := repeat abstract_subset_proof.",
            "VernacExtend",
            "3eca765af9b09df39d6c42ac33cdc50eb1a7f691"
        ],
        [
            "Ltac pi_subset_proof_hyp p := match type of p with ?X => match goal with | [ H : X |- _ ] => match p with | H => fail 2 | _ => rewrite (proof_irrelevance X p H) end | _ => fail \" No hypothesis with same type \" end end.",
            "VernacExtend",
            "7b08836399b9dd09609e08c6186621b2bfd4bd8c"
        ],
        [
            "Ltac pi_subset_proof := on_subset_proof pi_subset_proof_hyp.",
            "VernacExtend",
            "18ac7109c9d611a8beb8fdabc3a9d1b1ad02999e"
        ],
        [
            "Ltac pi_subset_proofs := repeat pi_subset_proof.",
            "VernacExtend",
            "75fe44326bc9a42736b7db1a516158a10302679f"
        ],
        [
            "Ltac clear_subset_proofs := abstract_subset_proofs ; simpl in * |- ; pi_subset_proofs ; clear_dups.",
            "VernacExtend",
            "add528a2e305fd7ff6e78808d4caca85181899ca"
        ],
        [
            "Ltac pi := repeat f_equal ; apply proof_irrelevance.",
            "VernacExtend",
            "91342e49213c1af149caae43b48671487b79ab74"
        ],
        [
            "Lemma subset_eq : forall A (P : A -> Prop) (n m : sig P), n = m <-> `n = `m.",
            "VernacStartTheoremProof",
            "65d4b33da1a25b698116d347c98876689b9b23fb"
        ],
        [
            "destruct n as (x,p).",
            "VernacExtend",
            "d1708c754a52b4bb027c12e1f5f6c3c8595f56d3"
        ],
        [
            "destruct m as (x',p').",
            "VernacExtend",
            "ece8f9a32c73c9e690b148cfaf5b9578205b7b0f"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "split ; intros ; subst.",
            "VernacExtend",
            "b1ef4cb4c0a9db52a71ef0a1072d7e285482d1ec"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "pi.",
            "VernacExtend",
            "1e6e6c8fa14bb5268189bd11b1e35a1efabb2457"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition match_eq (A B : Type) (x : A) (fn : {y : A | y = x} -> B) : B := fn (exist _ x eq_refl).",
            "VernacDefinition",
            "fa72c6452a1c2bf0f08388a71fb32c085ca12d9c"
        ],
        [
            "Lemma match_eq_rewrite : forall (A B : Type) (x : A) (fn : {y : A | y = x} -> B) (y : {y:A | y = x}), match_eq A B x fn = fn y.",
            "VernacStartTheoremProof",
            "e1eaa5dc0ebfebc0f73bb6ae9b14cade09aa2a92"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold match_eq.",
            "VernacExtend",
            "5c094f98262d4ee054add5b839aa951609fe1c82"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "destruct y.",
            "VernacExtend",
            "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
        ],
        [
            "apply <- subset_eq.",
            "VernacExtend",
            "d298f991e44ee5cd097e3055bb4d00daf789ce5b"
        ],
        [
            "symmetry.",
            "VernacExtend",
            "a08fc0dc04bba893008bded8181f393e2d8db167"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac rewrite_match_eq H := match goal with [ |- ?T ] => match T with context [ match_eq ?A ?B ?t ?f ] => rewrite (match_eq_rewrite A B t f (exist _ _ (eq_sym H))) end end.",
            "VernacExtend",
            "11c97d92ba935230f53bff9cff380bd1c9fb6409"
        ],
        [
            "Ltac simpl_match_eq := unfold match_eq ; simpl.",
            "VernacExtend",
            "baecb7552f9ac9bfa4a0a28e418a01af28f6f936"
        ]
    ],
    "proofs": [
        {
            "name": "subset_eq",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "destruct n as (x,p).",
                        "VernacExtend",
                        "d1708c754a52b4bb027c12e1f5f6c3c8595f56d3"
                    ]
                },
                {
                    "command": [
                        "destruct m as (x',p').",
                        "VernacExtend",
                        "ece8f9a32c73c9e690b148cfaf5b9578205b7b0f"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "split ; intros ; subst.",
                        "VernacExtend",
                        "b1ef4cb4c0a9db52a71ef0a1072d7e285482d1ec"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "pi.",
                        "VernacExtend",
                        "1e6e6c8fa14bb5268189bd11b1e35a1efabb2457"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "match_eq_rewrite",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold match_eq.",
                        "VernacExtend",
                        "5c094f98262d4ee054add5b839aa951609fe1c82"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "destruct y.",
                        "VernacExtend",
                        "fbeb4c3b73b2f0e6bfc89563d7f3b824ea0ea309"
                    ]
                },
                {
                    "command": [
                        "apply <- subset_eq.",
                        "VernacExtend",
                        "d298f991e44ee5cd097e3055bb4d00daf789ce5b"
                    ]
                },
                {
                    "command": [
                        "symmetry.",
                        "VernacExtend",
                        "a08fc0dc04bba893008bded8181f393e2d8db167"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}