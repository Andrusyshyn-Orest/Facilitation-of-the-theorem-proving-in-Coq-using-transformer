{
    "filename": "theories/Setoids/Setoid.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Export Coq.Classes.SetoidTactics.",
            "VernacRequire",
            "4c0d80e84d11dfeed32436c3ebbe4cde756fedce"
        ],
        [
            "Export Morphisms.ProperNotations.",
            "VernacImport",
            "b237c1836f45b5939dd5a804bf2ef6e2475be966"
        ],
        [
            "Definition Setoid_Theory := @Equivalence.",
            "VernacDefinition",
            "f9972a3de24788b20d78210829dba4b38776ae71"
        ],
        [
            "Definition Build_Setoid_Theory := @Build_Equivalence.",
            "VernacDefinition",
            "61e2151382aa1f7d80720e0f84992af3f1b64605"
        ],
        [
            "Definition Seq_refl A Aeq (s : Setoid_Theory A Aeq) : forall x:A, Aeq x x.",
            "VernacDefinition",
            "74c11e26f32d35fd54674e367cfe98ed40c27656"
        ],
        [
            "unfold Setoid_Theory in s.",
            "VernacExtend",
            "2c034bfc19f14ff7d4ae28fe015b79054a66ac23"
        ],
        [
            "intros ; reflexivity.",
            "VernacExtend",
            "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition Seq_sym A Aeq (s : Setoid_Theory A Aeq) : forall x y:A, Aeq x y -> Aeq y x.",
            "VernacDefinition",
            "95ac16ed11a9dc25a29f49b9aacb2082fa886510"
        ],
        [
            "unfold Setoid_Theory in s.",
            "VernacExtend",
            "2c034bfc19f14ff7d4ae28fe015b79054a66ac23"
        ],
        [
            "intros ; symmetry ; assumption.",
            "VernacExtend",
            "047c59d7c9d402fb0b6e5c6e2ab141e7bea71ae9"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition Seq_trans A Aeq (s : Setoid_Theory A Aeq) : forall x y z:A, Aeq x y -> Aeq y z -> Aeq x z.",
            "VernacDefinition",
            "2444c4fbdfb025c82aded854cccd6bb0664eb3ed"
        ],
        [
            "unfold Setoid_Theory in s.",
            "VernacExtend",
            "2c034bfc19f14ff7d4ae28fe015b79054a66ac23"
        ],
        [
            "intros ; transitivity y ; assumption.",
            "VernacExtend",
            "dea20a864aa989d62887b6c10eda1ac388558bde"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Ltac trans_st x := idtac \"trans_st on Setoid_Theory is OBSOLETE\"; idtac \"use transitivity on Equivalence instead\"; match goal with | H : Setoid_Theory _ ?eqA |- ?eqA _ _ => apply (Seq_trans _ _ H) with x; auto end.",
            "VernacExtend",
            "e9bce84da07d3a1b8b26948d039dbd4356f3db75"
        ],
        [
            "Ltac sym_st := idtac \"sym_st on Setoid_Theory is OBSOLETE\"; idtac \"use symmetry on Equivalence instead\"; match goal with | H : Setoid_Theory _ ?eqA |- ?eqA _ _ => apply (Seq_sym _ _ H); auto end.",
            "VernacExtend",
            "f2eb6ed6b3c332172a1b9d8d3c544ef61fd4f18b"
        ],
        [
            "Ltac refl_st := idtac \"refl_st on Setoid_Theory is OBSOLETE\"; idtac \"use reflexivity on Equivalence instead\"; match goal with | H : Setoid_Theory _ ?eqA |- ?eqA _ _ => apply (Seq_refl _ _ H); auto end.",
            "VernacExtend",
            "d09bc54a33ed6cb50e0c870d145911944defa287"
        ],
        [
            "Definition gen_st : forall A : Set, Setoid_Theory _ (@eq A).",
            "VernacDefinition",
            "1fe6bb96689ca5854053c1c57b0605cc2fb60330"
        ],
        [
            "constructor; congruence.",
            "VernacExtend",
            "9e535cd60f59a1f307263450979cb6af34c0af00"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Seq_refl",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "unfold Setoid_Theory in s.",
                        "VernacExtend",
                        "2c034bfc19f14ff7d4ae28fe015b79054a66ac23"
                    ]
                },
                {
                    "command": [
                        "intros ; reflexivity.",
                        "VernacExtend",
                        "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Seq_sym",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "unfold Setoid_Theory in s.",
                        "VernacExtend",
                        "2c034bfc19f14ff7d4ae28fe015b79054a66ac23"
                    ]
                },
                {
                    "command": [
                        "intros ; symmetry ; assumption.",
                        "VernacExtend",
                        "047c59d7c9d402fb0b6e5c6e2ab141e7bea71ae9"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Seq_trans",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "unfold Setoid_Theory in s.",
                        "VernacExtend",
                        "2c034bfc19f14ff7d4ae28fe015b79054a66ac23"
                    ]
                },
                {
                    "command": [
                        "intros ; transitivity y ; assumption.",
                        "VernacExtend",
                        "dea20a864aa989d62887b6c10eda1ac388558bde"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "gen_st",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "constructor; congruence.",
                        "VernacExtend",
                        "9e535cd60f59a1f307263450979cb6af34c0af00"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}