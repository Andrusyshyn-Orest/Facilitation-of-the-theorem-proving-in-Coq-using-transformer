{
    "filename": "theories/Classes/SetoidDec.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Generalizable Variables A B .",
            "VernacGeneralizable",
            "d588f3b2b727d357e0e799ca08b252eb176ccefd"
        ],
        [
            "Require Export Coq.Classes.SetoidClass.",
            "VernacRequire",
            "93af527ebaa61db3ce1cc06c572a93a01e8ba6a3"
        ],
        [
            "Require Import Coq.Logic.Decidable.",
            "VernacRequire",
            "3dcfcf37067c1b8a5e2bb2d2e6e102b0fd9e0530"
        ],
        [
            "Class DecidableSetoid `(S : Setoid A) := setoid_decidable : forall x y : A, decidable (x == y).",
            "VernacInductive",
            "9d5c5932711bc0ee115b35282c0045a5a244dd5d"
        ],
        [
            "Class EqDec `(S : Setoid A) := equiv_dec : forall x y : A, { x == y } + { x =/= y }.",
            "VernacInductive",
            "c82667addc8aa1a446a7ada3e7b2e2980ee6796e"
        ],
        [
            "Notation \" x == y \" := (equiv_dec (x :>) (y :>)) (no associativity, at level 70).",
            "VernacNotation",
            "01ed2e6a8b7c619aa2aa4c03707fc6328c2a1d3b"
        ],
        [
            "Definition swap_sumbool {A B} (x : { A } + { B }) : { B } + { A } := match x with | left H => @right _ _ H | right H => @left _ _ H end.",
            "VernacDefinition",
            "3f06bdbbf5f32ad8f60c29cc744f54875cf8eb9d"
        ],
        [
            "Require Import Coq.Program.Program.",
            "VernacRequire",
            "f0aaea5df52d8de8e090bb8f78148264c53bb6ee"
        ],
        [
            "Local Open Scope program_scope.",
            "VernacOpenCloseScope",
            "6bb21a93b668247e2dedc8ec6af2f052c3ec2a49"
        ],
        [
            "Program Definition nequiv_dec `{EqDec A} (x y : A) : { x =/= y } + { x == y } := swap_sumbool (x == y).",
            "VernacDefinition",
            "725454878b8fd170e2e19cb519f6a6f040c8526b"
        ],
        [
            "Infix \"=/=\" := nequiv_dec (no associativity, at level 70).",
            "VernacInfix",
            "870c8954a293f60767c5af97d984a5b80d6b2b1b"
        ],
        [
            "Definition equiv_decb `{EqDec A} (x y : A) : bool := if x == y then true else false.",
            "VernacDefinition",
            "fb72bd823ad3548b4de16b28ac3313b533c1e540"
        ],
        [
            "Definition nequiv_decb `{EqDec A} (x y : A) : bool := negb (equiv_decb x y).",
            "VernacDefinition",
            "fb40fb5850262a05c4e00aa1b7fbb302696b7721"
        ],
        [
            "Infix \"==b\" := equiv_decb (no associativity, at level 70).",
            "VernacInfix",
            "724a0156a6cf8468d89c689a8604a957be3e6a01"
        ],
        [
            "Infix \"<>b\" := nequiv_decb (no associativity, at level 70).",
            "VernacInfix",
            "5c56e63e2b5dfec818d17f4cdd87349b680eafff"
        ],
        [
            "Require Import Coq.Arith.Arith.",
            "VernacRequire",
            "b49308ec6684e45c9ea6cf40956f6c798f9946c8"
        ],
        [
            "Program Instance eq_setoid A : Setoid A | 10 := { equiv := eq ; setoid_equiv := eq_equivalence }.",
            "VernacInstance",
            "40232259d77c0f4f8f1db608288b22e52913847b"
        ],
        [
            "Program Instance nat_eq_eqdec : EqDec (eq_setoid nat) := eq_nat_dec.",
            "VernacInstance",
            "88ab90f563ef0d170dcdc32c9c581cc587baef59"
        ],
        [
            "Require Import Coq.Bool.Bool.",
            "VernacRequire",
            "38f52b48f6f716417469716568252bf78819181b"
        ],
        [
            "Program Instance bool_eqdec : EqDec (eq_setoid bool) := bool_dec.",
            "VernacInstance",
            "d1a74c7735def4869951433a04562c236ed08547"
        ],
        [
            "Program Instance unit_eqdec : EqDec (eq_setoid unit) := fun x y => in_left.",
            "VernacInstance",
            "acf3684569b27014d229591df020b3cfbbaa38f8"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "destruct x ; destruct y.",
            "VernacExtend",
            "66b6bbed80f19a7ddf75313e3d1e4cc780d5f91f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Program Instance prod_eqdec `(! EqDec (eq_setoid A), ! EqDec (eq_setoid B)) : EqDec (eq_setoid (prod A B)) := fun x y => let '(x1, x2) := x in let '(y1, y2) := y in if x1 == y1 then if x2 == y2 then in_left else in_right else in_right.",
            "VernacInstance",
            "0acb63d7e6253cf6b1b282db076bbc98791def4e"
        ],
        [
            "Solve Obligations with unfold complement ; program_simpl.",
            "VernacExtend",
            "f9e9e0114c895064662c3dbc8a2ae18ef3a3b365"
        ],
        [
            "Program Instance bool_function_eqdec `(! EqDec (eq_setoid A)) : EqDec (eq_setoid (bool -> A)) := fun f g => if f true == g true then if f false == g false then in_left else in_right else in_right.",
            "VernacInstance",
            "78b876b59409e6a7b348433a044e19855d85760f"
        ],
        [
            "Solve Obligations with try red ; unfold complement ; program_simpl.",
            "VernacExtend",
            "f63ba569421728d44ae713bbbb5ea0c282f1d7b3"
        ],
        [
            "Next Obligation.",
            "VernacExtend",
            "de5e6a0a7a163af0d8463969c3ff4241d7d5bba0"
        ],
        [
            "extensionality x.",
            "VernacExtend",
            "a02a0d77f789b5337c65fc4009fcc8ebde3d5cef"
        ],
        [
            "destruct x ; auto.",
            "VernacExtend",
            "e693b97b98b28f6f305ce1b2e3d77ebaa690911c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "unit_eqdec_obligation_1",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "destruct x ; destruct y.",
                        "VernacExtend",
                        "66b6bbed80f19a7ddf75313e3d1e4cc780d5f91f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bool_function_eqdec_obligation_1",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "extensionality x.",
                        "VernacExtend",
                        "a02a0d77f789b5337c65fc4009fcc8ebde3d5cef"
                    ]
                },
                {
                    "command": [
                        "destruct x ; auto.",
                        "VernacExtend",
                        "e693b97b98b28f6f305ce1b2e3d77ebaa690911c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}