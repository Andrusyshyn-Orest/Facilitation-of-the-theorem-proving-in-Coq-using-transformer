{
    "filename": "theories/Logic/Diaconescu.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require ClassicalFacts ChoiceFacts.",
            "VernacRequire",
            "5218f49a6c135f55b39eb2a228de68aab96aae3c"
        ],
        [
            "Section PredExt_RelChoice_imp_EM.",
            "VernacBeginSection",
            "fec9f871395877cfc8adc4dc150b33e0490e0f59"
        ],
        [
            "Definition PredicateExtensionality := forall P Q:bool -> Prop, (forall b:bool, P b <-> Q b) -> P = Q.",
            "VernacDefinition",
            "d394dab8a864535f3e0d806dbc4372dcc5865af8"
        ],
        [
            "Import ClassicalFacts.",
            "VernacImport",
            "14fda37f03ea50d7d2f8fe6f890bc200cde23fc6"
        ],
        [
            "Variable pred_extensionality : PredicateExtensionality.",
            "VernacAssumption",
            "67b34415f08445c3a55a701663f36bcd57d63e1d"
        ],
        [
            "Lemma prop_ext : forall A B:Prop, (A <-> B) -> A = B.",
            "VernacStartTheoremProof",
            "f40775c90395256b53411906a5039a98ce8e721c"
        ],
        [
            "intros A B H.",
            "VernacExtend",
            "6c5c0dfb524d6b048b30cbe7ae5e5cadcea2485f"
        ],
        [
            "change ((fun _ => A) true = (fun _ => B) true).",
            "VernacExtend",
            "86221e5f3d5e6710e86a6c4473d80453a8079f6a"
        ],
        [
            "rewrite pred_extensionality with (P := fun _:bool => A) (Q := fun _:bool => B).",
            "VernacExtend",
            "5d42c66f3e6dd51d13e3567b3b387bc13b002096"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros _; exact H.",
            "VernacExtend",
            "ab6fd5539abaa0bd834be55c613bae2a8429c711"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proof_irrel : forall (A:Prop) (a1 a2:A), a1 = a2.",
            "VernacStartTheoremProof",
            "30bdf77c03ced4bb9de0c31d351118104b827a66"
        ],
        [
            "apply (ext_prop_dep_proof_irrel_cic prop_ext).",
            "VernacExtend",
            "cfa508c58a450b5c92cbdcb6dfb4a9a3cc758cdb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Import ChoiceFacts.",
            "VernacImport",
            "f3aa04830aaf004093872cb0d697172c2e5c2816"
        ],
        [
            "Variable rel_choice : RelationalChoice.",
            "VernacAssumption",
            "85f0e5aece6af1763b2d33c5653b709aa6896f15"
        ],
        [
            "Lemma guarded_rel_choice : GuardedRelationalChoice.",
            "VernacStartTheoremProof",
            "6444043c72912f6d5f5ebdf96de3e232942e12b7"
        ],
        [
            "apply (rel_choice_and_proof_irrel_imp_guarded_rel_choice rel_choice proof_irrel).",
            "VernacExtend",
            "87853ac57089c26c97e2e61b619f4b9d8e7bacf1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Import Bool.",
            "VernacImport",
            "8244af9480e851cab48c613eb001076ac7ec89fc"
        ],
        [
            "Lemma AC_bool_subset_to_bool : exists R : (bool -> Prop) -> bool -> Prop, (forall P:bool -> Prop, (exists b : bool, P b) -> exists b : bool, P b /\\ R P b /\\ (forall b':bool, R P b' -> b = b')).",
            "VernacStartTheoremProof",
            "09e7ffd64c1b51a0364113812f97bf21f1d6f7c9"
        ],
        [
            "destruct (guarded_rel_choice _ _ (fun Q:bool -> Prop => exists y : _, Q y) (fun (Q:bool -> Prop) (y:bool) => Q y)) as (R,(HRsub,HR)).",
            "VernacExtend",
            "2d560992a99fb2212bc423a6b32203921cb63a56"
        ],
        [
            "exact (fun _ H => H).",
            "VernacExtend",
            "0dc7559f9e1c15d9f05c0bd9171582abf6d3fc93"
        ],
        [
            "exists R; intros P HP.",
            "VernacExtend",
            "84631ec8b76976c7f8dd6305a668d69a68b09c04"
        ],
        [
            "destruct (HR P HP) as (y,(Hy,Huni)).",
            "VernacExtend",
            "1dd41454ffc2b82f5c9b0b7bbd4bbbd7080225d8"
        ],
        [
            "exists y; firstorder.",
            "VernacExtend",
            "d2938ecf94da06915c28172643e213eb53f30ab2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem pred_ext_and_rel_choice_imp_EM : forall P:Prop, P \\/ ~ P.",
            "VernacStartTheoremProof",
            "ea5307fca354072732a2b2a3246e6ceb5e9af65f"
        ],
        [
            "intro P.",
            "VernacExtend",
            "0910b274c6bc3191fb894c537bf6a9d8a015a918"
        ],
        [
            "destruct AC_bool_subset_to_bool as [R H].",
            "VernacExtend",
            "82dfc91033d4e93a36ff425a43b725878e83666c"
        ],
        [
            "set (class_of_true := fun b => b = true \\/ P).",
            "VernacExtend",
            "27404c2c541cc1a3d51094fd08de744491b89b89"
        ],
        [
            "set (class_of_false := fun b => b = false \\/ P).",
            "VernacExtend",
            "90d0c618c6da67c19646a9c1cb46fde4508ceaec"
        ],
        [
            "destruct (H class_of_true) as [b0 [H0 [H0' H0'']]].",
            "VernacExtend",
            "0f99a0b2412429b60fd552704971b1b3ddae615f"
        ],
        [
            "exists true; left; reflexivity.",
            "VernacExtend",
            "4703489143ce11721bd72b765cf69bdbed6f20a0"
        ],
        [
            "destruct H0.",
            "VernacExtend",
            "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
        ],
        [
            "destruct (H class_of_false) as [b1 [H1 [H1' H1'']]].",
            "VernacExtend",
            "4dc78a023f55ccc0ce79480b6ef0af20876cdf8c"
        ],
        [
            "exists false; left; reflexivity.",
            "VernacExtend",
            "f0b747db721900441e9989488d89f2bf5771d718"
        ],
        [
            "destruct H1.",
            "VernacExtend",
            "e752c2122f55c888e09082f784a6da990b01fbe7"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro HP.",
            "VernacExtend",
            "6862bd7ae05de72632887e57f731f07f22fd6080"
        ],
        [
            "assert (Hequiv : forall b:bool, class_of_true b <-> class_of_false b).",
            "VernacExtend",
            "8d29c36a7824c6aa30dd1a34f7fd2fa1c6ee1b09"
        ],
        [
            "intro b; split.",
            "VernacExtend",
            "5291138156def1d91f494658c4b84814ad0fd013"
        ],
        [
            "unfold class_of_false; right; assumption.",
            "VernacExtend",
            "bf8c3a3b39c23ea51d4447b83bd1ab9d8ab70da7"
        ],
        [
            "unfold class_of_true; right; assumption.",
            "VernacExtend",
            "56eb8ffc0a2fa14940ab34924680f61aae6dd270"
        ],
        [
            "assert (Heq : class_of_true = class_of_false).",
            "VernacExtend",
            "6156388d6bd0e9b958fe6ee8b418ccb03dede195"
        ],
        [
            "apply pred_extensionality with (1 := Hequiv).",
            "VernacExtend",
            "0525ab431f3617a92947035831ce8d1b8a4742ce"
        ],
        [
            "apply diff_true_false.",
            "VernacExtend",
            "f0021d8bf5a71451265582a5548ad3e632467a5b"
        ],
        [
            "rewrite <- H0.",
            "VernacExtend",
            "f6718c09e494e327328e3c2003dd236939e231f9"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "rewrite <- H0''.",
            "VernacExtend",
            "9cba3485f6fb909643b196f24a93e12dd080e3e7"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite Heq.",
            "VernacExtend",
            "b7499625fc2b45a0798969f6886262f98cfbb890"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End PredExt_RelChoice_imp_EM.",
            "VernacEndSegment",
            "ba4d83bc579fe6f465372f50edd9f9d0e8b25043"
        ],
        [
            "Section ProofIrrel_RelChoice_imp_EqEM.",
            "VernacBeginSection",
            "f0df68d6ea60e9a699f50636db54415e7e8d902e"
        ],
        [
            "Import ChoiceFacts.",
            "VernacImport",
            "f3aa04830aaf004093872cb0d697172c2e5c2816"
        ],
        [
            "Variable rel_choice : RelationalChoice.",
            "VernacAssumption",
            "85f0e5aece6af1763b2d33c5653b709aa6896f15"
        ],
        [
            "Variable proof_irrelevance : forall P:Prop , forall x y:P, x=y.",
            "VernacAssumption",
            "f09d7f6340f137f0fba1f0b1cf23e1fde30ae4f2"
        ],
        [
            "Variable A :Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variables a1 a2 : A.",
            "VernacAssumption",
            "748344c1155832c44563f539194aa7a63ef4cc3a"
        ],
        [
            "Definition A' := @sigT A (fun x => x=a1 \\/ x=a2).",
            "VernacDefinition",
            "e1a59ff07d41b052f70c2f2ad182c7f0c4cf1573"
        ],
        [
            "Definition a1':A'.",
            "VernacDefinition",
            "0db5589b6e664117b534cd10e8306c0b73508926"
        ],
        [
            "exists a1 ; auto.",
            "VernacExtend",
            "f309b4259e156d3bb9a2b1231e2e6f45bd2c93f0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition a2':A'.",
            "VernacDefinition",
            "b65580f17a8380c05f7b28e94dbaad4458e6af3e"
        ],
        [
            "exists a2 ; auto.",
            "VernacExtend",
            "cf046ad8d8a3490df7d7f50b60466824ea33d0aa"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma projT1_injective : a1=a2 -> a1'=a2'.",
            "VernacStartTheoremProof",
            "03e4106e64ff37ece2587b18d4fc836af95c0b3e"
        ],
        [
            "intro Heq ; unfold a1', a2', A'.",
            "VernacExtend",
            "c963754028aeecf247a49b7c0621c094b8140f29"
        ],
        [
            "rewrite Heq.",
            "VernacExtend",
            "b7499625fc2b45a0798969f6886262f98cfbb890"
        ],
        [
            "replace (or_introl (a2=a2) (eq_refl a2)) with (or_intror (a2=a2) (eq_refl a2)).",
            "VernacExtend",
            "ba45a84c4a40addbe98e6403886d13b65f458c94"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply proof_irrelevance.",
            "VernacExtend",
            "b23cda1d91e54d71ed3f723da2cb2b32aa6731f7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decide : forall x:A', exists y:bool , (projT1 x = a1 /\\ y = true ) \\/ (projT1 x = a2 /\\ y = false).",
            "VernacStartTheoremProof",
            "c2ed38070b0e0f9b838f28743302f0512d443f0f"
        ],
        [
            "intros [a [Ha1|Ha2]]; [exists true | exists false]; auto.",
            "VernacExtend",
            "d22827766bded44188b3184c4ec74e4e0856f2e3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem proof_irrel_rel_choice_imp_eq_dec : a1=a2 \\/ ~a1=a2.",
            "VernacStartTheoremProof",
            "1e7b637e72130bc23dabdf4fd056f1747132200b"
        ],
        [
            "destruct (rel_choice A' bool (fun x y => projT1 x = a1 /\\ y = true \\/ projT1 x = a2 /\\ y = false)) as (R,(HRsub,HR)).",
            "VernacExtend",
            "f3a29b2566cdace201b671a716aa5132354aaf45"
        ],
        [
            "apply decide.",
            "VernacExtend",
            "055bd99c9e65d733bd7c13eabcac528af4bb787e"
        ],
        [
            "destruct (HR a1') as (b1,(Ha1'b1,_Huni1)).",
            "VernacExtend",
            "1c12fdabfe204d98b6c3697bde5fecaac67b671d"
        ],
        [
            "destruct (HRsub a1' b1 Ha1'b1) as [(_, Hb1true)|(Ha1a2, _Hb1false)].",
            "VernacExtend",
            "f90cc8e6720d87a06b70c5bf044766f53a23991d"
        ],
        [
            "destruct (HR a2') as (b2,(Ha2'b2,Huni2)).",
            "VernacExtend",
            "816d3912b09a8fac2b5fc19601de68e20afbe804"
        ],
        [
            "destruct (HRsub a2' b2 Ha2'b2) as [(Ha2a1, _Hb2true)|(_, Hb2false)].",
            "VernacExtend",
            "ee665667b72f5ff2d56264f6c00c81c031a8e519"
        ],
        [
            "left; symmetry; assumption.",
            "VernacExtend",
            "56e0892ba56a7d569e3d3b919941acbdf8523030"
        ],
        [
            "right; intro H.",
            "VernacExtend",
            "0e370ffd543b29f71f445bb9a937fde9b9ccc613"
        ],
        [
            "subst b1; subst b2.",
            "VernacExtend",
            "65edf3891b946fc9d59a45451c7e86a52886335f"
        ],
        [
            "rewrite (projT1_injective H) in Ha1'b1.",
            "VernacExtend",
            "d88993e3f6ce7dbd9d28fdc34f0ea85116027ca0"
        ],
        [
            "assert (false = true) by auto using Huni2.",
            "VernacExtend",
            "56d6123def377e366ff532e2d1add425a06756f6"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proof_irrel_rel_choice_imp_eq_dec' : a1=a2 \\/ ~a1=a2.",
            "VernacStartTheoremProof",
            "6bbb5953e7b9a8fddd475df88dabf4146c7ec84b"
        ],
        [
            "assert (decide: forall x:A, x=a1 \\/ x=a2 -> exists y:bool, x=a1 /\\ y=true \\/ x=a2 /\\ y=false).",
            "VernacExtend",
            "5c14bee512c29d490d2b39cbb059a473b5a1ad91"
        ],
        [
            "intros a [Ha1|Ha2]; [exists true | exists false]; auto.",
            "VernacExtend",
            "f5daff3ad2f2ce21cbf2ac674a22f93b66bdae28"
        ],
        [
            "assert (guarded_rel_choice := rel_choice_and_proof_irrel_imp_guarded_rel_choice rel_choice proof_irrelevance).",
            "VernacExtend",
            "97a04eeb5462428c7065674d1577665c01ac37a0"
        ],
        [
            "destruct (guarded_rel_choice A bool (fun x => x=a1 \\/ x=a2) (fun x y => x=a1 /\\ y=true \\/ x=a2 /\\ y=false)) as (R,(HRsub,HR)).",
            "VernacExtend",
            "d7c4d875b212dedb5bb2e0c6d6c93ae1557e21b7"
        ],
        [
            "apply decide.",
            "VernacExtend",
            "055bd99c9e65d733bd7c13eabcac528af4bb787e"
        ],
        [
            "destruct (HR a1) as (b1,(Ha1b1,_Huni1)).",
            "VernacExtend",
            "6cca05326f01fb7eaee701239d64da98bbdc35a8"
        ],
        [
            "left; reflexivity.",
            "VernacExtend",
            "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
        ],
        [
            "destruct (HRsub a1 b1 Ha1b1) as [(_, Hb1true)|(Ha1a2, _Hb1false)].",
            "VernacExtend",
            "d92a33dafd547985620431e738a9f68150f75182"
        ],
        [
            "destruct (HR a2) as (b2,(Ha2b2,Huni2)).",
            "VernacExtend",
            "6d23f99288168a232a9478a03908a162a92f20e5"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "destruct (HRsub a2 b2 Ha2b2) as [(Ha2a1, _Hb2true)|(_, Hb2false)].",
            "VernacExtend",
            "8f765aa7bb3966f84b6d35fc346f9c74c5bd2a9f"
        ],
        [
            "left; symmetry; assumption.",
            "VernacExtend",
            "56e0892ba56a7d569e3d3b919941acbdf8523030"
        ],
        [
            "right; intro H.",
            "VernacExtend",
            "0e370ffd543b29f71f445bb9a937fde9b9ccc613"
        ],
        [
            "subst b1; subst b2; subst a1.",
            "VernacExtend",
            "726e27ca70322c23f0fc19c217092d22a4905d16"
        ],
        [
            "assert (false = true) by auto using Huni2, Ha1b1.",
            "VernacExtend",
            "0f49c6f8eae7ebaf782121089974e6690125b28f"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ProofIrrel_RelChoice_imp_EqEM.",
            "VernacEndSegment",
            "fa4b21db7c7036c6478ab5e67a0434c96446d063"
        ],
        [
            "Local Notation inhabited A := A (only parsing).",
            "VernacSyntacticDefinition",
            "345186f55d5016107f16644711c216ee47a3e93c"
        ],
        [
            "Section ExtensionalEpsilon_imp_EM.",
            "VernacBeginSection",
            "eac9c5345a8a4a0f15453cfe972739ec69704b66"
        ],
        [
            "Variable epsilon : forall A : Type, inhabited A -> (A -> Prop) -> A.",
            "VernacAssumption",
            "0d152156d30628934d80075aaecd6c4792187574"
        ],
        [
            "Hypothesis epsilon_spec : forall (A:Type) (i:inhabited A) (P:A->Prop), (exists x, P x) -> P (epsilon A i P).",
            "VernacAssumption",
            "372ad2673f7b38a89546aae3f2e3e3808bb624ea"
        ],
        [
            "Hypothesis epsilon_extensionality : forall (A:Type) (i:inhabited A) (P Q:A->Prop), (forall a, P a <-> Q a) -> epsilon A i P = epsilon A i Q.",
            "VernacAssumption",
            "e1503616f0ef1a1fa8641974c315931d650bf3c1"
        ],
        [
            "Local Notation eps := (epsilon bool true) (only parsing).",
            "VernacSyntacticDefinition",
            "cf27a45d11f22b6f8da81a75d6f541b132a6a4b5"
        ],
        [
            "Theorem extensional_epsilon_imp_EM : forall P:Prop, P \\/ ~ P.",
            "VernacStartTheoremProof",
            "e723284afffb9ddecece59e6db10fe67a61c840e"
        ],
        [
            "intro P.",
            "VernacExtend",
            "0910b274c6bc3191fb894c537bf6a9d8a015a918"
        ],
        [
            "pose (B := fun y => y=false \\/ P).",
            "VernacExtend",
            "91940fc81d0f0f52ee773ad15e3078ec1b4ff081"
        ],
        [
            "pose (C := fun y => y=true \\/ P).",
            "VernacExtend",
            "fc8f721c1966e4e3ce91052663dbf8a9b5198de2"
        ],
        [
            "assert (B (eps B)) as [Hfalse|HP] by (apply epsilon_spec; exists false; left; reflexivity).",
            "VernacExtend",
            "ccef5f18ae960954c772395665b1f949847f8ba6"
        ],
        [
            "assert (C (eps C)) as [Htrue|HP] by (apply epsilon_spec; exists true; left; reflexivity).",
            "VernacExtend",
            "eb0a3af9583ed1405cb7572bc7f793d703cb825f"
        ],
        [
            "right; intro HP.",
            "VernacExtend",
            "66f1c21747486d2d75ce8a6471a36b7f7da2e08c"
        ],
        [
            "assert (forall y, B y <-> C y) by (intro y; split; intro; right; assumption).",
            "VernacExtend",
            "faaae7db67cc6b8c42c74e4f3e4b01a582190606"
        ],
        [
            "rewrite epsilon_extensionality with (1:=H) in Hfalse.",
            "VernacExtend",
            "33be5a90cf81b84604017cf2fd369f7110c1e518"
        ],
        [
            "rewrite Htrue in Hfalse.",
            "VernacExtend",
            "6fe32d5595017d8edaaa67ebd2e9dcf5879140e3"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ExtensionalEpsilon_imp_EM.",
            "VernacEndSegment",
            "0f4b633034b7cff06cdfbb1cc1cd868f8c10676d"
        ]
    ],
    "proofs": [
        {
            "name": "prop_ext",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros A B H.",
                        "VernacExtend",
                        "6c5c0dfb524d6b048b30cbe7ae5e5cadcea2485f"
                    ]
                },
                {
                    "command": [
                        "change ((fun _ => A) true = (fun _ => B) true).",
                        "VernacExtend",
                        "86221e5f3d5e6710e86a6c4473d80453a8079f6a"
                    ]
                },
                {
                    "command": [
                        "rewrite pred_extensionality with (P := fun _:bool => A) (Q := fun _:bool => B).",
                        "VernacExtend",
                        "5d42c66f3e6dd51d13e3567b3b387bc13b002096"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intros _; exact H.",
                        "VernacExtend",
                        "ab6fd5539abaa0bd834be55c613bae2a8429c711"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proof_irrel",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "apply (ext_prop_dep_proof_irrel_cic prop_ext).",
                        "VernacExtend",
                        "cfa508c58a450b5c92cbdcb6dfb4a9a3cc758cdb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "guarded_rel_choice",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "apply (rel_choice_and_proof_irrel_imp_guarded_rel_choice rel_choice proof_irrel).",
                        "VernacExtend",
                        "87853ac57089c26c97e2e61b619f4b9d8e7bacf1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "AC_bool_subset_to_bool",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "destruct (guarded_rel_choice _ _ (fun Q:bool -> Prop => exists y : _, Q y) (fun (Q:bool -> Prop) (y:bool) => Q y)) as (R,(HRsub,HR)).",
                        "VernacExtend",
                        "2d560992a99fb2212bc423a6b32203921cb63a56"
                    ]
                },
                {
                    "command": [
                        "exact (fun _ H => H).",
                        "VernacExtend",
                        "0dc7559f9e1c15d9f05c0bd9171582abf6d3fc93"
                    ]
                },
                {
                    "command": [
                        "exists R; intros P HP.",
                        "VernacExtend",
                        "84631ec8b76976c7f8dd6305a668d69a68b09c04"
                    ]
                },
                {
                    "command": [
                        "destruct (HR P HP) as (y,(Hy,Huni)).",
                        "VernacExtend",
                        "1dd41454ffc2b82f5c9b0b7bbd4bbbd7080225d8"
                    ]
                },
                {
                    "command": [
                        "exists y; firstorder.",
                        "VernacExtend",
                        "d2938ecf94da06915c28172643e213eb53f30ab2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pred_ext_and_rel_choice_imp_EM",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intro P.",
                        "VernacExtend",
                        "0910b274c6bc3191fb894c537bf6a9d8a015a918"
                    ]
                },
                {
                    "command": [
                        "destruct AC_bool_subset_to_bool as [R H].",
                        "VernacExtend",
                        "82dfc91033d4e93a36ff425a43b725878e83666c"
                    ]
                },
                {
                    "command": [
                        "set (class_of_true := fun b => b = true \\/ P).",
                        "VernacExtend",
                        "27404c2c541cc1a3d51094fd08de744491b89b89"
                    ]
                },
                {
                    "command": [
                        "set (class_of_false := fun b => b = false \\/ P).",
                        "VernacExtend",
                        "90d0c618c6da67c19646a9c1cb46fde4508ceaec"
                    ]
                },
                {
                    "command": [
                        "destruct (H class_of_true) as [b0 [H0 [H0' H0'']]].",
                        "VernacExtend",
                        "0f99a0b2412429b60fd552704971b1b3ddae615f"
                    ]
                },
                {
                    "command": [
                        "exists true; left; reflexivity.",
                        "VernacExtend",
                        "4703489143ce11721bd72b765cf69bdbed6f20a0"
                    ]
                },
                {
                    "command": [
                        "destruct H0.",
                        "VernacExtend",
                        "5c8f6cb3dc303d56935d6ec271a1de04f6790225"
                    ]
                },
                {
                    "command": [
                        "destruct (H class_of_false) as [b1 [H1 [H1' H1'']]].",
                        "VernacExtend",
                        "4dc78a023f55ccc0ce79480b6ef0af20876cdf8c"
                    ]
                },
                {
                    "command": [
                        "exists false; left; reflexivity.",
                        "VernacExtend",
                        "f0b747db721900441e9989488d89f2bf5771d718"
                    ]
                },
                {
                    "command": [
                        "destruct H1.",
                        "VernacExtend",
                        "e752c2122f55c888e09082f784a6da990b01fbe7"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "intro HP.",
                        "VernacExtend",
                        "6862bd7ae05de72632887e57f731f07f22fd6080"
                    ]
                },
                {
                    "command": [
                        "assert (Hequiv : forall b:bool, class_of_true b <-> class_of_false b).",
                        "VernacExtend",
                        "8d29c36a7824c6aa30dd1a34f7fd2fa1c6ee1b09"
                    ]
                },
                {
                    "command": [
                        "intro b; split.",
                        "VernacExtend",
                        "5291138156def1d91f494658c4b84814ad0fd013"
                    ]
                },
                {
                    "command": [
                        "unfold class_of_false; right; assumption.",
                        "VernacExtend",
                        "bf8c3a3b39c23ea51d4447b83bd1ab9d8ab70da7"
                    ]
                },
                {
                    "command": [
                        "unfold class_of_true; right; assumption.",
                        "VernacExtend",
                        "56eb8ffc0a2fa14940ab34924680f61aae6dd270"
                    ]
                },
                {
                    "command": [
                        "assert (Heq : class_of_true = class_of_false).",
                        "VernacExtend",
                        "6156388d6bd0e9b958fe6ee8b418ccb03dede195"
                    ]
                },
                {
                    "command": [
                        "apply pred_extensionality with (1 := Hequiv).",
                        "VernacExtend",
                        "0525ab431f3617a92947035831ce8d1b8a4742ce"
                    ]
                },
                {
                    "command": [
                        "apply diff_true_false.",
                        "VernacExtend",
                        "f0021d8bf5a71451265582a5548ad3e632467a5b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0.",
                        "VernacExtend",
                        "f6718c09e494e327328e3c2003dd236939e231f9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0''.",
                        "VernacExtend",
                        "9cba3485f6fb909643b196f24a93e12dd080e3e7"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq.",
                        "VernacExtend",
                        "b7499625fc2b45a0798969f6886262f98cfbb890"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "a1'",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "exists a1 ; auto.",
                        "VernacExtend",
                        "f309b4259e156d3bb9a2b1231e2e6f45bd2c93f0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "a2'",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "exists a2 ; auto.",
                        "VernacExtend",
                        "cf046ad8d8a3490df7d7f50b60466824ea33d0aa"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "projT1_injective",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "intro Heq ; unfold a1', a2', A'.",
                        "VernacExtend",
                        "c963754028aeecf247a49b7c0621c094b8140f29"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq.",
                        "VernacExtend",
                        "b7499625fc2b45a0798969f6886262f98cfbb890"
                    ]
                },
                {
                    "command": [
                        "replace (or_introl (a2=a2) (eq_refl a2)) with (or_intror (a2=a2) (eq_refl a2)).",
                        "VernacExtend",
                        "ba45a84c4a40addbe98e6403886d13b65f458c94"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply proof_irrelevance.",
                        "VernacExtend",
                        "b23cda1d91e54d71ed3f723da2cb2b32aa6731f7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decide",
            "line_nb": 78,
            "steps": [
                {
                    "command": [
                        "intros [a [Ha1|Ha2]]; [exists true | exists false]; auto.",
                        "VernacExtend",
                        "d22827766bded44188b3184c4ec74e4e0856f2e3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proof_irrel_rel_choice_imp_eq_dec",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "destruct (rel_choice A' bool (fun x y => projT1 x = a1 /\\ y = true \\/ projT1 x = a2 /\\ y = false)) as (R,(HRsub,HR)).",
                        "VernacExtend",
                        "f3a29b2566cdace201b671a716aa5132354aaf45"
                    ]
                },
                {
                    "command": [
                        "apply decide.",
                        "VernacExtend",
                        "055bd99c9e65d733bd7c13eabcac528af4bb787e"
                    ]
                },
                {
                    "command": [
                        "destruct (HR a1') as (b1,(Ha1'b1,_Huni1)).",
                        "VernacExtend",
                        "1c12fdabfe204d98b6c3697bde5fecaac67b671d"
                    ]
                },
                {
                    "command": [
                        "destruct (HRsub a1' b1 Ha1'b1) as [(_, Hb1true)|(Ha1a2, _Hb1false)].",
                        "VernacExtend",
                        "f90cc8e6720d87a06b70c5bf044766f53a23991d"
                    ]
                },
                {
                    "command": [
                        "destruct (HR a2') as (b2,(Ha2'b2,Huni2)).",
                        "VernacExtend",
                        "816d3912b09a8fac2b5fc19601de68e20afbe804"
                    ]
                },
                {
                    "command": [
                        "destruct (HRsub a2' b2 Ha2'b2) as [(Ha2a1, _Hb2true)|(_, Hb2false)].",
                        "VernacExtend",
                        "ee665667b72f5ff2d56264f6c00c81c031a8e519"
                    ]
                },
                {
                    "command": [
                        "left; symmetry; assumption.",
                        "VernacExtend",
                        "56e0892ba56a7d569e3d3b919941acbdf8523030"
                    ]
                },
                {
                    "command": [
                        "right; intro H.",
                        "VernacExtend",
                        "0e370ffd543b29f71f445bb9a937fde9b9ccc613"
                    ]
                },
                {
                    "command": [
                        "subst b1; subst b2.",
                        "VernacExtend",
                        "65edf3891b946fc9d59a45451c7e86a52886335f"
                    ]
                },
                {
                    "command": [
                        "rewrite (projT1_injective H) in Ha1'b1.",
                        "VernacExtend",
                        "d88993e3f6ce7dbd9d28fdc34f0ea85116027ca0"
                    ]
                },
                {
                    "command": [
                        "assert (false = true) by auto using Huni2.",
                        "VernacExtend",
                        "56d6123def377e366ff532e2d1add425a06756f6"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proof_irrel_rel_choice_imp_eq_dec'",
            "line_nb": 96,
            "steps": [
                {
                    "command": [
                        "assert (decide: forall x:A, x=a1 \\/ x=a2 -> exists y:bool, x=a1 /\\ y=true \\/ x=a2 /\\ y=false).",
                        "VernacExtend",
                        "5c14bee512c29d490d2b39cbb059a473b5a1ad91"
                    ]
                },
                {
                    "command": [
                        "intros a [Ha1|Ha2]; [exists true | exists false]; auto.",
                        "VernacExtend",
                        "f5daff3ad2f2ce21cbf2ac674a22f93b66bdae28"
                    ]
                },
                {
                    "command": [
                        "assert (guarded_rel_choice := rel_choice_and_proof_irrel_imp_guarded_rel_choice rel_choice proof_irrelevance).",
                        "VernacExtend",
                        "97a04eeb5462428c7065674d1577665c01ac37a0"
                    ]
                },
                {
                    "command": [
                        "destruct (guarded_rel_choice A bool (fun x => x=a1 \\/ x=a2) (fun x y => x=a1 /\\ y=true \\/ x=a2 /\\ y=false)) as (R,(HRsub,HR)).",
                        "VernacExtend",
                        "d7c4d875b212dedb5bb2e0c6d6c93ae1557e21b7"
                    ]
                },
                {
                    "command": [
                        "apply decide.",
                        "VernacExtend",
                        "055bd99c9e65d733bd7c13eabcac528af4bb787e"
                    ]
                },
                {
                    "command": [
                        "destruct (HR a1) as (b1,(Ha1b1,_Huni1)).",
                        "VernacExtend",
                        "6cca05326f01fb7eaee701239d64da98bbdc35a8"
                    ]
                },
                {
                    "command": [
                        "left; reflexivity.",
                        "VernacExtend",
                        "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
                    ]
                },
                {
                    "command": [
                        "destruct (HRsub a1 b1 Ha1b1) as [(_, Hb1true)|(Ha1a2, _Hb1false)].",
                        "VernacExtend",
                        "d92a33dafd547985620431e738a9f68150f75182"
                    ]
                },
                {
                    "command": [
                        "destruct (HR a2) as (b2,(Ha2b2,Huni2)).",
                        "VernacExtend",
                        "6d23f99288168a232a9478a03908a162a92f20e5"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "destruct (HRsub a2 b2 Ha2b2) as [(Ha2a1, _Hb2true)|(_, Hb2false)].",
                        "VernacExtend",
                        "8f765aa7bb3966f84b6d35fc346f9c74c5bd2a9f"
                    ]
                },
                {
                    "command": [
                        "left; symmetry; assumption.",
                        "VernacExtend",
                        "56e0892ba56a7d569e3d3b919941acbdf8523030"
                    ]
                },
                {
                    "command": [
                        "right; intro H.",
                        "VernacExtend",
                        "0e370ffd543b29f71f445bb9a937fde9b9ccc613"
                    ]
                },
                {
                    "command": [
                        "subst b1; subst b2; subst a1.",
                        "VernacExtend",
                        "726e27ca70322c23f0fc19c217092d22a4905d16"
                    ]
                },
                {
                    "command": [
                        "assert (false = true) by auto using Huni2, Ha1b1.",
                        "VernacExtend",
                        "0f49c6f8eae7ebaf782121089974e6690125b28f"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "extensional_epsilon_imp_EM",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "intro P.",
                        "VernacExtend",
                        "0910b274c6bc3191fb894c537bf6a9d8a015a918"
                    ]
                },
                {
                    "command": [
                        "pose (B := fun y => y=false \\/ P).",
                        "VernacExtend",
                        "91940fc81d0f0f52ee773ad15e3078ec1b4ff081"
                    ]
                },
                {
                    "command": [
                        "pose (C := fun y => y=true \\/ P).",
                        "VernacExtend",
                        "fc8f721c1966e4e3ce91052663dbf8a9b5198de2"
                    ]
                },
                {
                    "command": [
                        "assert (B (eps B)) as [Hfalse|HP] by (apply epsilon_spec; exists false; left; reflexivity).",
                        "VernacExtend",
                        "ccef5f18ae960954c772395665b1f949847f8ba6"
                    ]
                },
                {
                    "command": [
                        "assert (C (eps C)) as [Htrue|HP] by (apply epsilon_spec; exists true; left; reflexivity).",
                        "VernacExtend",
                        "eb0a3af9583ed1405cb7572bc7f793d703cb825f"
                    ]
                },
                {
                    "command": [
                        "right; intro HP.",
                        "VernacExtend",
                        "66f1c21747486d2d75ce8a6471a36b7f7da2e08c"
                    ]
                },
                {
                    "command": [
                        "assert (forall y, B y <-> C y) by (intro y; split; intro; right; assumption).",
                        "VernacExtend",
                        "faaae7db67cc6b8c42c74e4f3e4b01a582190606"
                    ]
                },
                {
                    "command": [
                        "rewrite epsilon_extensionality with (1:=H) in Hfalse.",
                        "VernacExtend",
                        "33be5a90cf81b84604017cf2fd369f7110c1e518"
                    ]
                },
                {
                    "command": [
                        "rewrite Htrue in Hfalse.",
                        "VernacExtend",
                        "6fe32d5595017d8edaaa67ebd2e9dcf5879140e3"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}