{
    "filename": "theories/Logic/ClassicalFacts.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Definition prop_degeneracy := forall A:Prop, A = True \\/ A = False.",
            "VernacDefinition",
            "1b490885110e206b1fd2cb680abf47de02fe32c7"
        ],
        [
            "Definition prop_extensionality := forall A B:Prop, (A <-> B) -> A = B.",
            "VernacDefinition",
            "77044e866a4340ea19bb6affc51443690750ecac"
        ],
        [
            "Definition excluded_middle := forall A:Prop, A \\/ ~ A.",
            "VernacDefinition",
            "783135f505af7ab67e64adacbdadd05609f66edb"
        ],
        [
            "Lemma prop_degen_ext : prop_degeneracy -> prop_extensionality.",
            "VernacStartTheoremProof",
            "48d590de89e988c0ba400a7c8c946343e2cb15c8"
        ],
        [
            "intros H A B [Hab Hba].",
            "VernacExtend",
            "635411052d21fbe987e10a1d650d32c12284a572"
        ],
        [
            "destruct (H A); destruct (H B).",
            "VernacExtend",
            "d431c02ad4234d46eb330db97dd5f7d28696d1f3"
        ],
        [
            "rewrite H1; exact H0.",
            "VernacExtend",
            "4b355460cd4cd1bc8e864a199261b622e6c74554"
        ],
        [
            "absurd B.",
            "VernacExtend",
            "2735f1234b3cdc4c37728dc31bb4292656f5158d"
        ],
        [
            "rewrite H1; exact (fun H => H).",
            "VernacExtend",
            "4fcbe90a80d1ded021ffccb8dfbaa3f76c208091"
        ],
        [
            "apply Hab; rewrite H0; exact I.",
            "VernacExtend",
            "9ac4329ad581a972704d054f71d9e0dc4b8d423d"
        ],
        [
            "absurd A.",
            "VernacExtend",
            "3f36f78300eab91d7a0ba83d038ed8bf126d2d4e"
        ],
        [
            "rewrite H0; exact (fun H => H).",
            "VernacExtend",
            "affb6b84d6d1c8e6df48836823b2a043d8616f28"
        ],
        [
            "apply Hba; rewrite H1; exact I.",
            "VernacExtend",
            "11a17bde85fcdb069c981eca440c226af25cfd0f"
        ],
        [
            "rewrite H1; exact H0.",
            "VernacExtend",
            "4b355460cd4cd1bc8e864a199261b622e6c74554"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop_degen_em : prop_degeneracy -> excluded_middle.",
            "VernacStartTheoremProof",
            "b534f3efb4c050e9f89c564be39a3ea703a72fd0"
        ],
        [
            "intros H A.",
            "VernacExtend",
            "010ccb73cba17ccbfd72234b553000b81dcbcb40"
        ],
        [
            "destruct (H A).",
            "VernacExtend",
            "9225852e89222b692b59eae97bf90aad576b76bd"
        ],
        [
            "left; rewrite H0; exact I.",
            "VernacExtend",
            "09a03d34c80c27359780a6345f4da9fc6ae336ba"
        ],
        [
            "right; rewrite H0; exact (fun x => x).",
            "VernacExtend",
            "12e440ad45f4e54f160d089d7a1ae5c0ee0651c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prop_ext_em_degen : prop_extensionality -> excluded_middle -> prop_degeneracy.",
            "VernacStartTheoremProof",
            "7fab047e9ac9642017d6b58fcdbf5d101f50d9de"
        ],
        [
            "intros Ext EM A.",
            "VernacExtend",
            "284d4e2275425a6119b3c9864911ab93ec445997"
        ],
        [
            "destruct (EM A).",
            "VernacExtend",
            "e1f5ba6cdc1473464f8aff0c0db3318062e9ae26"
        ],
        [
            "left; apply (Ext A True); split; [ exact (fun _ => I) | exact (fun _ => H) ].",
            "VernacExtend",
            "759280b58b985aa0ea005fcb2a0e67a0f94c068a"
        ],
        [
            "right; apply (Ext A False); split; [ exact H | apply False_ind ].",
            "VernacExtend",
            "34bbcc13e2442e2ed2e6ba9b07ebaf0341dc6d89"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Require Import PropExtensionalityFacts.",
            "VernacRequire",
            "7d5a4e1e644e7e0844cee99a935d9ff94ee2236c"
        ],
        [
            "Definition provable_prop_extensionality := forall A:Prop, A -> A = True.",
            "VernacDefinition",
            "95111a25fb86296b44b7fd565d6fe572648113b3"
        ],
        [
            "Lemma provable_prop_ext : prop_extensionality -> provable_prop_extensionality.",
            "VernacStartTheoremProof",
            "2a1dca5a5a6ba80e5ab357a3e309c30ea9e7c12c"
        ],
        [
            "exact PropExt_imp_ProvPropExt.",
            "VernacExtend",
            "36bd90e3f152f5caecf8e6dc6c79abef60e58229"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Local Notation inhabited A := A (only parsing).",
            "VernacSyntacticDefinition",
            "345186f55d5016107f16644711c216ee47a3e93c"
        ],
        [
            "Lemma prop_ext_A_eq_A_imp_A : prop_extensionality -> forall A:Prop, inhabited A -> (A -> A) = A.",
            "VernacStartTheoremProof",
            "336f4eb5d35f6ad686cf06c2ebefb950b115822e"
        ],
        [
            "intros Ext A a.",
            "VernacExtend",
            "6136c35420b663c9d51668836390a3f8e515dd1c"
        ],
        [
            "apply (Ext (A -> A) A); split; [ exact (fun _ => a) | exact (fun _ _ => a) ].",
            "VernacExtend",
            "9bf2d3c07173b47cd170373084958a99ca861d85"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record retract (A B:Prop) : Prop := {f1 : A -> B; f2 : B -> A; f1_o_f2 : forall x:B, f1 (f2 x) = x}.",
            "VernacInductive",
            "b922ff079ee54be2c6b1d5a59e55f2b10c694af7"
        ],
        [
            "Lemma prop_ext_retract_A_A_imp_A : prop_extensionality -> forall A:Prop, inhabited A -> retract A (A -> A).",
            "VernacStartTheoremProof",
            "5b5fe041705e1be75ef991fc8706359b974913b3"
        ],
        [
            "intros Ext A a.",
            "VernacExtend",
            "6136c35420b663c9d51668836390a3f8e515dd1c"
        ],
        [
            "rewrite (prop_ext_A_eq_A_imp_A Ext A a).",
            "VernacExtend",
            "28a904f1fe1fe936d98d278e121a61f6ec5b52c3"
        ],
        [
            "exists (fun x:A => x) (fun x:A => x).",
            "VernacExtend",
            "e48d5e507c3c2c75ccb75c36506848e020190af8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record has_fixpoint (A:Prop) : Prop := {F : (A -> A) -> A; Fix : forall f:A -> A, F f = f (F f)}.",
            "VernacInductive",
            "286d4ae5247390c54b86e59b9a612064bf7fe4fb"
        ],
        [
            "Lemma ext_prop_fixpoint : prop_extensionality -> forall A:Prop, inhabited A -> has_fixpoint A.",
            "VernacStartTheoremProof",
            "db734e7d054a08087dd94695b945a3eb5d738351"
        ],
        [
            "intros Ext A a.",
            "VernacExtend",
            "6136c35420b663c9d51668836390a3f8e515dd1c"
        ],
        [
            "case (prop_ext_retract_A_A_imp_A Ext A a); intros g1 g2 g1_o_g2.",
            "VernacExtend",
            "352d5dee19265c8ed8464c3f54162aab13bc6796"
        ],
        [
            "exists (fun f => (fun x:A => f (g1 x x)) (g2 (fun x => f (g1 x x)))).",
            "VernacExtend",
            "5688742b73115785a028fe7ca406d615dbf717f6"
        ],
        [
            "intro f.",
            "VernacExtend",
            "cfca43118419dd191a669828299d7df459d583f5"
        ],
        [
            "pattern (g1 (g2 (fun x:A => f (g1 x x)))) at 1.",
            "VernacExtend",
            "e5fccfc9bc470ac137839af82ade6c5236364d44"
        ],
        [
            "rewrite (g1_o_g2 (fun x:A => f (g1 x x))).",
            "VernacExtend",
            "3bddd16972a406fc1b8d146d058434bc27c58455"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition proof_irrelevance := forall (A:Prop) (a1 a2:A), a1 = a2.",
            "VernacDefinition",
            "15b3f23cfa7bf0961073b808e4daabca9c0a653e"
        ],
        [
            "Section Proof_irrelevance_gen.",
            "VernacBeginSection",
            "6f54b9b70ffe93cc39d6e4fe08ed1dc1f2e87882"
        ],
        [
            "Variable bool : Prop.",
            "VernacAssumption",
            "e419f4ae45463ad5246c5a535541fbd00bbefb30"
        ],
        [
            "Variable true : bool.",
            "VernacAssumption",
            "6bd30570ddbb0b17d0c47d85f04dc7280c797836"
        ],
        [
            "Variable false : bool.",
            "VernacAssumption",
            "29cf8497648559144ee07fdc32647f087276647e"
        ],
        [
            "Hypothesis bool_elim : forall C:Prop, C -> C -> bool -> C.",
            "VernacAssumption",
            "ef9c288d0143712ef54e1a6a2e0c307cea791a41"
        ],
        [
            "Hypothesis bool_elim_redl : forall (C:Prop) (c1 c2:C), c1 = bool_elim C c1 c2 true.",
            "VernacAssumption",
            "668bf51b2e664574b5797ceaddb4e73d971ba170"
        ],
        [
            "Hypothesis bool_elim_redr : forall (C:Prop) (c1 c2:C), c2 = bool_elim C c1 c2 false.",
            "VernacAssumption",
            "9cd25746ef69b3f471a6f05ac6cccf34ee85f46e"
        ],
        [
            "Let bool_dep_induction := forall P:bool -> Prop, P true -> P false -> forall b:bool, P b.",
            "VernacDefinition",
            "57f1cbfb9c3a169ad3270620d1fae3beef795929"
        ],
        [
            "Lemma aux : prop_extensionality -> bool_dep_induction -> true = false.",
            "VernacStartTheoremProof",
            "d2b60d683d989ac36b1b9c3947d948475297d414"
        ],
        [
            "intros Ext Ind.",
            "VernacExtend",
            "fa23f5fc2c58ed27ff6dc5e9e778684ac29db753"
        ],
        [
            "case (ext_prop_fixpoint Ext bool true); intros G Gfix.",
            "VernacExtend",
            "adcb434ab316ce1030118d2fe17cddb42ca8b4da"
        ],
        [
            "set (neg := fun b:bool => bool_elim bool false true b).",
            "VernacExtend",
            "29430bf86ce7147ed869bb3c98dd3873a58c71c3"
        ],
        [
            "generalize (eq_refl (G neg)).",
            "VernacExtend",
            "705e21d3c374619c21f9d8d4f8db42782956b83b"
        ],
        [
            "pattern (G neg) at 1.",
            "VernacExtend",
            "fe744a5903b73de9510cbe15f6c969dad34b2233"
        ],
        [
            "apply Ind with (b := G neg); intro Heq.",
            "VernacExtend",
            "d3b3eada359ea38e5f3414df6ec06cf3796f0ede"
        ],
        [
            "rewrite (bool_elim_redl bool false true).",
            "VernacExtend",
            "b37e96f94aa7c26d321413782752d6224ea98519"
        ],
        [
            "change (true = neg true); rewrite Heq; apply Gfix.",
            "VernacExtend",
            "0b3212b70945d054a271d92be9d883d836b04cf1"
        ],
        [
            "rewrite (bool_elim_redr bool false true).",
            "VernacExtend",
            "314367f3c11f10ceec853f0bb09393db80c55f21"
        ],
        [
            "change (neg false = false); rewrite Heq; symmetry ; apply Gfix.",
            "VernacExtend",
            "99c9644945ab43eb99af912408e5eb58e59eef6b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ext_prop_dep_proof_irrel_gen : prop_extensionality -> bool_dep_induction -> proof_irrelevance.",
            "VernacStartTheoremProof",
            "c42ddbcb22b750983f0ba3ec6a0e0719d1374d6d"
        ],
        [
            "intros Ext Ind A a1 a2.",
            "VernacExtend",
            "c4f6459b9ef8cb37cd20ac0aaec27d27c960d629"
        ],
        [
            "set (f := fun b:bool => bool_elim A a1 a2 b).",
            "VernacExtend",
            "e5da8284fe6cbc9d6fab36969172b016e67f83ff"
        ],
        [
            "rewrite (bool_elim_redl A a1 a2).",
            "VernacExtend",
            "b2c482b227681916a83a4e8d3ce16b69f534db2f"
        ],
        [
            "change (f true = a2).",
            "VernacExtend",
            "baa9b95df0bf81f43313f725d079be9285ef88ef"
        ],
        [
            "rewrite (bool_elim_redr A a1 a2).",
            "VernacExtend",
            "137e945f84f8eec8febbf6b7ca4628ea3991e47e"
        ],
        [
            "change (f true = f false).",
            "VernacExtend",
            "befef6874c3cc03bdd17dd56cc2bebd07e239b45"
        ],
        [
            "rewrite (aux Ext Ind).",
            "VernacExtend",
            "d5beff970a9dc5749d17e59d4e7557366081ef32"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Proof_irrelevance_gen.",
            "VernacEndSegment",
            "623075e93ffc2dec70dd74dea9b363c5006590af"
        ],
        [
            "Section Proof_irrelevance_Prop_Ext_CC.",
            "VernacBeginSection",
            "5b50382e2317a8ec4366a83556946dd3c16c49cb"
        ],
        [
            "Definition BoolP := forall C:Prop, C -> C -> C.",
            "VernacDefinition",
            "a89045ac2af25f5e9fcfa882add4ae1a74b9557c"
        ],
        [
            "Definition TrueP : BoolP := fun C c1 c2 => c1.",
            "VernacDefinition",
            "c4df2d68cad28b8553a5506376130021787aeca7"
        ],
        [
            "Definition FalseP : BoolP := fun C c1 c2 => c2.",
            "VernacDefinition",
            "57a2880243a6ce859664c832dac0fcc0d4e80a6a"
        ],
        [
            "Definition BoolP_elim C c1 c2 (b:BoolP) := b C c1 c2.",
            "VernacDefinition",
            "898d87a3f6b90b065b38f187c96add8b42a38a37"
        ],
        [
            "Definition BoolP_elim_redl (C:Prop) (c1 c2:C) : c1 = BoolP_elim C c1 c2 TrueP := eq_refl c1.",
            "VernacDefinition",
            "2ab30f1ff2ccb811866f3ec8f8429fc7af5da1f9"
        ],
        [
            "Definition BoolP_elim_redr (C:Prop) (c1 c2:C) : c2 = BoolP_elim C c1 c2 FalseP := eq_refl c2.",
            "VernacDefinition",
            "8529257c4ca1b0a51be0e7e852c86a6bcb4d1ca4"
        ],
        [
            "Definition BoolP_dep_induction := forall P:BoolP -> Prop, P TrueP -> P FalseP -> forall b:BoolP, P b.",
            "VernacDefinition",
            "a2130be52c6336cd05b5f6592093393e3dc2040a"
        ],
        [
            "Lemma ext_prop_dep_proof_irrel_cc : prop_extensionality -> BoolP_dep_induction -> proof_irrelevance.",
            "VernacStartTheoremProof",
            "4e7577f6f28bd5f6989c3baccf3ec7dec6719773"
        ],
        [
            "exact (ext_prop_dep_proof_irrel_gen BoolP TrueP FalseP BoolP_elim BoolP_elim_redl BoolP_elim_redr).",
            "VernacExtend",
            "480195488c985c3c6b6854dabffa3ec2ed1681d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Proof_irrelevance_Prop_Ext_CC.",
            "VernacEndSegment",
            "b885e2835008dda1180698bb7582414d0e44622d"
        ],
        [
            "Section Proof_irrelevance_CIC.",
            "VernacBeginSection",
            "d7dd24262abf1618a02b66fb18cf68f4bb39bbe3"
        ],
        [
            "Inductive boolP : Prop := | trueP : boolP | falseP : boolP.",
            "VernacInductive",
            "9086972428d3836225f0083bafdabe52503e5076"
        ],
        [
            "Definition boolP_elim_redl (C:Prop) (c1 c2:C) : c1 = boolP_ind C c1 c2 trueP := eq_refl c1.",
            "VernacDefinition",
            "6efc40f80075d71ce2f9ef9d76450f8df9bccf1a"
        ],
        [
            "Definition boolP_elim_redr (C:Prop) (c1 c2:C) : c2 = boolP_ind C c1 c2 falseP := eq_refl c2.",
            "VernacDefinition",
            "799a331f518137a5afd7971625f106dac6b7ac1a"
        ],
        [
            "Scheme boolP_indd := Induction for boolP Sort Prop.",
            "VernacScheme",
            "be528146f82b9fb0012a518d23f2a751cd8d4dbc"
        ],
        [
            "Lemma ext_prop_dep_proof_irrel_cic : prop_extensionality -> proof_irrelevance.",
            "VernacStartTheoremProof",
            "d480bbe1460c5787a884ba3e523ac6892acd83d1"
        ],
        [
            "exact (fun pe => ext_prop_dep_proof_irrel_gen boolP trueP falseP boolP_ind boolP_elim_redl boolP_elim_redr pe boolP_indd).",
            "VernacExtend",
            "a5c25c98fa9f70bacbcec09c89d8b28ad423d658"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Proof_irrelevance_CIC.",
            "VernacEndSegment",
            "5b547279f7c03138959a98ce2a5afd9c6e9f43e9"
        ],
        [
            "Require Import Hurkens.",
            "VernacRequire",
            "060292ed64b0ceb65ef84de843b1b2a2e09015da"
        ],
        [
            "Section Proof_irrelevance_EM_CC.",
            "VernacBeginSection",
            "9d8a79a397af13f9e98f0722beca3fa3bb511425"
        ],
        [
            "Variable or : Prop -> Prop -> Prop.",
            "VernacAssumption",
            "8ab777f104731d9a54da052222149ea7e65c626e"
        ],
        [
            "Variable or_introl : forall A B:Prop, A -> or A B.",
            "VernacAssumption",
            "a148472212de087c53254ccd16b7d59a7070ccde"
        ],
        [
            "Variable or_intror : forall A B:Prop, B -> or A B.",
            "VernacAssumption",
            "ec0efcfd8284e85c8e7868fcd855461418ab1357"
        ],
        [
            "Hypothesis or_elim : forall A B C:Prop, (A -> C) -> (B -> C) -> or A B -> C.",
            "VernacAssumption",
            "8844e223eefc973cff84eb812c1f38c6c6961ec6"
        ],
        [
            "Hypothesis or_elim_redl : forall (A B C:Prop) (f:A -> C) (g:B -> C) (a:A), f a = or_elim A B C f g (or_introl A B a).",
            "VernacAssumption",
            "e43cac61a9f647cc08c96732e6ec6cc5dc0c3713"
        ],
        [
            "Hypothesis or_elim_redr : forall (A B C:Prop) (f:A -> C) (g:B -> C) (b:B), g b = or_elim A B C f g (or_intror A B b).",
            "VernacAssumption",
            "8a255e1e0b7c70c958d98167ea8472b6ca24f558"
        ],
        [
            "Hypothesis or_dep_elim : forall (A B:Prop) (P:or A B -> Prop), (forall a:A, P (or_introl A B a)) -> (forall b:B, P (or_intror A B b)) -> forall b:or A B, P b.",
            "VernacAssumption",
            "8211b41168c6d20b6dc838b34eb33bb5bfac2888"
        ],
        [
            "Hypothesis em : forall A:Prop, or A (~ A).",
            "VernacAssumption",
            "f0d7b371c36d0b3dec247b569d4a51ecc617c8b5"
        ],
        [
            "Variable B : Prop.",
            "VernacAssumption",
            "1e4f6d192771e1c9f5d010db67b5985870b05f2f"
        ],
        [
            "Variables b1 b2 : B.",
            "VernacAssumption",
            "ed37a0ac365c2cb69c98db75d263809460cd5540"
        ],
        [
            "Let p2b A := or_elim A (~ A) B (fun _ => b1) (fun _ => b2) (em A).",
            "VernacDefinition",
            "4be72a01972b4d40e977ec05e9c4199eb82d473b"
        ],
        [
            "Let b2p b := b1 = b.",
            "VernacDefinition",
            "76f1baabbe4b1e0cedc6f68453bbc90568f36374"
        ],
        [
            "Lemma p2p1 : forall A:Prop, A -> b2p (p2b A).",
            "VernacStartTheoremProof",
            "093c7fc8fd2dd72f927a8b28171e482fad5fc9f8"
        ],
        [
            "unfold p2b; intro A; apply or_dep_elim with (b := em A); unfold b2p; intros.",
            "VernacExtend",
            "458522a3fe8f24913fde0b4fc74df0fba8610d93"
        ],
        [
            "apply (or_elim_redl A (~ A) B (fun _ => b1) (fun _ => b2)).",
            "VernacExtend",
            "c2183e010eb4ba793c556101114d7253423e4399"
        ],
        [
            "destruct (b H).",
            "VernacExtend",
            "6cc55df5899f757600f0db0788d558f12baf3063"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma p2p2 : b1 <> b2 -> forall A:Prop, b2p (p2b A) -> A.",
            "VernacStartTheoremProof",
            "02a0b33d592d94ae343c9c1c17284fe531db2176"
        ],
        [
            "intro not_eq_b1_b2.",
            "VernacExtend",
            "b830eca619d5f5b244ea2af0653ee0faf725cef2"
        ],
        [
            "unfold p2b; intro A; apply or_dep_elim with (b := em A); unfold b2p; intros.",
            "VernacExtend",
            "458522a3fe8f24913fde0b4fc74df0fba8610d93"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct not_eq_b1_b2.",
            "VernacExtend",
            "48e166d8abf4da70dd3607bc04a715bf9b5d4ed4"
        ],
        [
            "rewrite <- (or_elim_redr A (~ A) B (fun _ => b1) (fun _ => b2)) in H.",
            "VernacExtend",
            "b7d95bf495e551829b8cbdc04184b4ec2a175e57"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem proof_irrelevance_cc : b1 = b2.",
            "VernacStartTheoremProof",
            "673b221960e40753394b9d21b34940f2379acfa4"
        ],
        [
            "refine (or_elim _ _ _ _ _ (em (b1 = b2))); intro H.",
            "VernacExtend",
            "f1ab45726c23e9d086fccd049f1853d6bd2e0524"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply (NoRetractFromSmallPropositionToProp.paradox B p2b b2p (p2p2 H) p2p1).",
            "VernacExtend",
            "08703f60b065f5fce5dafb384fad05720f8f6562"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Proof_irrelevance_EM_CC.",
            "VernacEndSegment",
            "a2c47bd3df443e5b12342993252e27d6dfa5e013"
        ],
        [
            "Section Proof_irrelevance_WEM_CC.",
            "VernacBeginSection",
            "eace13704ffc6f5a2a0f8d00082b3dbe68d47e20"
        ],
        [
            "Variable or : Prop -> Prop -> Prop.",
            "VernacAssumption",
            "8ab777f104731d9a54da052222149ea7e65c626e"
        ],
        [
            "Variable or_introl : forall A B:Prop, A -> or A B.",
            "VernacAssumption",
            "a148472212de087c53254ccd16b7d59a7070ccde"
        ],
        [
            "Variable or_intror : forall A B:Prop, B -> or A B.",
            "VernacAssumption",
            "ec0efcfd8284e85c8e7868fcd855461418ab1357"
        ],
        [
            "Hypothesis or_elim : forall A B C:Prop, (A -> C) -> (B -> C) -> or A B -> C.",
            "VernacAssumption",
            "8844e223eefc973cff84eb812c1f38c6c6961ec6"
        ],
        [
            "Hypothesis or_elim_redl : forall (A B C:Prop) (f:A -> C) (g:B -> C) (a:A), f a = or_elim A B C f g (or_introl A B a).",
            "VernacAssumption",
            "e43cac61a9f647cc08c96732e6ec6cc5dc0c3713"
        ],
        [
            "Hypothesis or_elim_redr : forall (A B C:Prop) (f:A -> C) (g:B -> C) (b:B), g b = or_elim A B C f g (or_intror A B b).",
            "VernacAssumption",
            "8a255e1e0b7c70c958d98167ea8472b6ca24f558"
        ],
        [
            "Hypothesis or_dep_elim : forall (A B:Prop) (P:or A B -> Prop), (forall a:A, P (or_introl A B a)) -> (forall b:B, P (or_intror A B b)) -> forall b:or A B, P b.",
            "VernacAssumption",
            "8211b41168c6d20b6dc838b34eb33bb5bfac2888"
        ],
        [
            "Hypothesis wem : forall A:Prop, or (~~A) (~ A).",
            "VernacAssumption",
            "dd1204c3230104f1d4cf45c6cff8d144bcb5f615"
        ],
        [
            "Local Notation NProp := NoRetractToNegativeProp.NProp.",
            "VernacSyntacticDefinition",
            "183e57137128038de9bbb7992d3d3f6546cebf2a"
        ],
        [
            "Local Notation El := NoRetractToNegativeProp.El.",
            "VernacSyntacticDefinition",
            "0cbefc684a04d8bfcab983b4098e5d5551296fb8"
        ],
        [
            "Variable B : Prop.",
            "VernacAssumption",
            "1e4f6d192771e1c9f5d010db67b5985870b05f2f"
        ],
        [
            "Variables b1 b2 : B.",
            "VernacAssumption",
            "ed37a0ac365c2cb69c98db75d263809460cd5540"
        ],
        [
            "Let p2b (A:NProp) := or_elim (~~El A) (~El A) B (fun _ => b1) (fun _ => b2) (wem (El A)).",
            "VernacDefinition",
            "d1f919cd00962b467974979abea8d25732221631"
        ],
        [
            "Let b2p b : NProp := exist (fun P=>~~P -> P) (~~(b1 = b)) (fun h x => h (fun k => k x)).",
            "VernacDefinition",
            "7b34958042542c26d937f8d165e520e7945d8ee0"
        ],
        [
            "Lemma wp2p1 : forall A:NProp, El A -> El (b2p (p2b A)).",
            "VernacStartTheoremProof",
            "a702a25e583fd41f07023c3c878c893b04734e4a"
        ],
        [
            "intros A.",
            "VernacExtend",
            "1e674201f6164f095fcb9efa159981a648ffff11"
        ],
        [
            "unfold p2b.",
            "VernacExtend",
            "66dab408871ed6d11968c75561f80a1b23f51699"
        ],
        [
            "apply or_dep_elim with (b := wem (El A)).",
            "VernacExtend",
            "60dbbcfb0aadfd7cf26f802544b1da74c7569928"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "intros nna a.",
            "VernacExtend",
            "d05a9f42b8d4ecd7f4d478a485d090299d0d6769"
        ],
        [
            "rewrite <- or_elim_redl.",
            "VernacExtend",
            "a20cc044675c69d20246ffbe75af178a4863d8ac"
        ],
        [
            "cbn.",
            "VernacExtend",
            "2de4be1c15e6f71a05c3809cbe562a67585b4b18"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "intros n x.",
            "VernacExtend",
            "ffcb8ab9021fddb9f2e0669fb0d732ac2d8ea32c"
        ],
        [
            "destruct (n x).",
            "VernacExtend",
            "138d9024eec8b389e3ff80902b0ee4459feb66d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma wp2p2 : b1 <> b2 -> forall A:NProp, El (b2p (p2b A)) -> El A.",
            "VernacStartTheoremProof",
            "63de00e580000a51f62c2e786a771f74490538da"
        ],
        [
            "intro not_eq_b1_b2.",
            "VernacExtend",
            "b830eca619d5f5b244ea2af0653ee0faf725cef2"
        ],
        [
            "intros A.",
            "VernacExtend",
            "1e674201f6164f095fcb9efa159981a648ffff11"
        ],
        [
            "unfold p2b.",
            "VernacExtend",
            "66dab408871ed6d11968c75561f80a1b23f51699"
        ],
        [
            "apply or_dep_elim with (b := wem (El A)).",
            "VernacExtend",
            "60dbbcfb0aadfd7cf26f802544b1da74c7569928"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "cbn.",
            "VernacExtend",
            "2de4be1c15e6f71a05c3809cbe562a67585b4b18"
        ],
        [
            "intros x _.",
            "VernacExtend",
            "a217ac7c130d591b56438fb1fd6c2cc8c3f9de57"
        ],
        [
            "destruct A.",
            "VernacExtend",
            "0f975e57337711bcb9af8ef6166251e7035574a3"
        ],
        [
            "cbn in x |- *.",
            "VernacExtend",
            "c3baae68464ae410bcb31c3331409f078a7d9567"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "intros na.",
            "VernacExtend",
            "80162cb44cbc2218aae5d4228f05888b00e03bfa"
        ],
        [
            "rewrite <- or_elim_redr.",
            "VernacExtend",
            "004df758d75f61ac328a41879707b3bdb2a107fd"
        ],
        [
            "cbn.",
            "VernacExtend",
            "2de4be1c15e6f71a05c3809cbe562a67585b4b18"
        ],
        [
            "intros h.",
            "VernacExtend",
            "d9af23d7f0cb5ed2eb064c0cac858c6211d58837"
        ],
        [
            "destruct (h not_eq_b1_b2).",
            "VernacExtend",
            "1c1ebf0353efc7a5466b9c96abcd03aa3f1468ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem wproof_irrelevance_cc : ~~(b1 = b2).",
            "VernacStartTheoremProof",
            "8cc85e2cb75098038b1a9f0d1a2c8060b7e764bb"
        ],
        [
            "intros h.",
            "VernacExtend",
            "d9af23d7f0cb5ed2eb064c0cac858c6211d58837"
        ],
        [
            "unshelve (refine (let NB := exist (fun P=>~~P -> P) B _ in _)).",
            "VernacExtend",
            "ca7e6b6e01c9fb24cf748fc864ef1aab5316c032"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "exact (fun _ => b1).",
            "VernacExtend",
            "e1d9f3d20e1fabc13bbdc3ef397e045e53194811"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "pose proof (NoRetractToNegativeProp.paradox NB p2b b2p (wp2p2 h) wp2p1) as paradox.",
            "VernacExtend",
            "a5e628016e3198ebae97ce4dfab07c861887f3ac"
        ],
        [
            "unshelve (refine (let F := exist (fun P=>~~P->P) False _ in _)).",
            "VernacExtend",
            "ccf4bb401bd537fd4cd754750b262c7175786313"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "exact (paradox F).",
            "VernacExtend",
            "8aa86a9ecbc07e0a4b33d464f378168356febffb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Proof_irrelevance_WEM_CC.",
            "VernacEndSegment",
            "0caf26a3edce6f5cbab7288972670485a1aa21d6"
        ],
        [
            "Section Proof_irrelevance_CCI.",
            "VernacBeginSection",
            "f43279ffadd95800f9b03789905265ceedff3e99"
        ],
        [
            "Hypothesis em : forall A:Prop, A \\/ ~ A.",
            "VernacAssumption",
            "849cec520456c6c78de89d58209316d4f17f0735"
        ],
        [
            "Definition or_elim_redl (A B C:Prop) (f:A -> C) (g:B -> C) (a:A) : f a = or_ind f g (or_introl B a) := eq_refl (f a).",
            "VernacDefinition",
            "8a6091bcabfea6595b8b5497eeb40a6ce4b0f635"
        ],
        [
            "Definition or_elim_redr (A B C:Prop) (f:A -> C) (g:B -> C) (b:B) : g b = or_ind f g (or_intror A b) := eq_refl (g b).",
            "VernacDefinition",
            "4e716a621cf6cc7a9736cc4d8ce55e5425e9b01e"
        ],
        [
            "Scheme or_indd := Induction for or Sort Prop.",
            "VernacScheme",
            "134686a75d5e8719b01669b928848055dfacea45"
        ],
        [
            "Theorem proof_irrelevance_cci : forall (B:Prop) (b1 b2:B), b1 = b2.",
            "VernacStartTheoremProof",
            "ca2044c46bb96a3c2193efea395779ef5fc85c95"
        ],
        [
            "exact (proof_irrelevance_cc or or_introl or_intror or_ind or_elim_redl or_elim_redr or_indd em).",
            "VernacExtend",
            "b09d8b6dbcc1970d645b94427d84cfecb72450c7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Proof_irrelevance_CCI.",
            "VernacEndSegment",
            "0363077ac5682ec189f46d46deeb8f27c32bc042"
        ],
        [
            "Section Weak_proof_irrelevance_CCI.",
            "VernacBeginSection",
            "636fb6fbf0741230a2a36eb73340341bef4c91ee"
        ],
        [
            "Hypothesis wem : forall A:Prop, ~~A \\/ ~ A.",
            "VernacAssumption",
            "a090edb62b2e0db3ea88c820ceb179adb1569495"
        ],
        [
            "Theorem wem_proof_irrelevance_cci : forall (B:Prop) (b1 b2:B), ~~b1 = b2.",
            "VernacStartTheoremProof",
            "f44de9bea97e11f497c8610311548fc7e5415940"
        ],
        [
            "exact (wproof_irrelevance_cc or or_introl or_intror or_ind or_elim_redl or_elim_redr or_indd wem).",
            "VernacExtend",
            "81c0ab7d810c6d0233ed2b3f8a115ce9e82cafcc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Weak_proof_irrelevance_CCI.",
            "VernacEndSegment",
            "9b592b6027bd8d6b2fb611643acf6b214c599261"
        ],
        [
            "Definition weak_excluded_middle := forall A:Prop, ~~A \\/ ~A.",
            "VernacDefinition",
            "661c234b94a6b9571b8d1defa2d0e66a160babac"
        ],
        [
            "Definition weak_generalized_excluded_middle := forall A B:Prop, ((A -> B) -> B) \\/ (A -> B).",
            "VernacDefinition",
            "aae8d7bb94378598833b82afe9988c27dafbb0f6"
        ],
        [
            "Definition GodelDummett := forall A B:Prop, (A -> B) \\/ (B -> A).",
            "VernacDefinition",
            "c03251fe18474dc313750b1b8dad6999a0cce76d"
        ],
        [
            "Lemma excluded_middle_Godel_Dummett : excluded_middle -> GodelDummett.",
            "VernacStartTheoremProof",
            "5f1494948baab4608aa473b87ef12c18c58d865e"
        ],
        [
            "intros EM A B.",
            "VernacExtend",
            "d51f3ba91c9999934253fdb325a336a87952ff59"
        ],
        [
            "destruct (EM B) as [HB|HnotB].",
            "VernacExtend",
            "97b1b2ce19666c3ac436756f25208e3a208cbf9a"
        ],
        [
            "left; intros _; exact HB.",
            "VernacExtend",
            "c7591b823b78124ba9a835081e7c93d7cec647ac"
        ],
        [
            "right; intros HB; destruct (HnotB HB).",
            "VernacExtend",
            "6dd3f9b43093548d6a01ee6541f2e27344683bd1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition RightDistributivityImplicationOverDisjunction := forall A B C:Prop, (C -> A\\/B) -> (C->A) \\/ (C->B).",
            "VernacDefinition",
            "1686bd1080365d47556e79b1ef2b8700f5c7c448"
        ],
        [
            "Lemma Godel_Dummett_iff_right_distr_implication_over_disjunction : GodelDummett <-> RightDistributivityImplicationOverDisjunction.",
            "VernacStartTheoremProof",
            "9ead591ac63324196358058afde515280702035c"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros GD A B C HCAB.",
            "VernacExtend",
            "973e6e3280f15d4a5bb4c40cace89d47885eb260"
        ],
        [
            "destruct (GD B A) as [HBA|HAB]; [left|right]; intro HC; destruct (HCAB HC) as [HA|HB]; [ | apply HBA | apply HAB | ]; assumption.",
            "VernacExtend",
            "fb2898db23264d3d83abb5ae224bd3577895d9a5"
        ],
        [
            "intros Distr A B.",
            "VernacExtend",
            "7fd43a2494ffa3a5a355840c8bd097d9f2eef277"
        ],
        [
            "destruct (Distr A B (A\\/B)) as [HABA|HABB].",
            "VernacExtend",
            "92da0c25c45e94d7cde1a558436934ec5659402b"
        ],
        [
            "intro HAB; exact HAB.",
            "VernacExtend",
            "518f73909809926d16aef053b3499bbb22c26168"
        ],
        [
            "right; intro HB; apply HABA; right; assumption.",
            "VernacExtend",
            "bf186893e5c6b64cf24da2542bc6c455a9cf5e3d"
        ],
        [
            "left; intro HA; apply HABB; left; assumption.",
            "VernacExtend",
            "d4e6e02e7f33d59402bc5860e1a2bc08ea93089f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Godel_Dummett_weak_excluded_middle : GodelDummett -> weak_excluded_middle.",
            "VernacStartTheoremProof",
            "b642e64be8e531dea24c09b78e7567782975f941"
        ],
        [
            "intros GD A.",
            "VernacExtend",
            "cf4a3cb750462f76c681cf27c328f3509eb8dd6c"
        ],
        [
            "destruct (GD (~A) A) as [HnotAA|HAnotA].",
            "VernacExtend",
            "56fc465c2abf0f8c3a0f6e2fe4a0bda3a5a2cec4"
        ],
        [
            "left; intro HnotA; apply (HnotA (HnotAA HnotA)).",
            "VernacExtend",
            "4f4d10f4748a58c941ab2dc993019c19578ed664"
        ],
        [
            "right; intro HA; apply (HAnotA HA HA).",
            "VernacExtend",
            "0b5961727745869623f2e41617058aed877ad3db"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition IndependenceOfGeneralPremises := forall (A:Type) (P:A -> Prop) (Q:Prop), inhabited A -> (Q -> exists x, P x) -> exists x, Q -> P x.",
            "VernacDefinition",
            "b471f1f508bffa1b09f0ee2025aa3b2fe5ce78ce"
        ],
        [
            "Lemma independence_general_premises_right_distr_implication_over_disjunction : IndependenceOfGeneralPremises -> RightDistributivityImplicationOverDisjunction.",
            "VernacStartTheoremProof",
            "9f9aebb6baee0e6f2756f740e8746c0534ca0f91"
        ],
        [
            "intros IP A B C HCAB.",
            "VernacExtend",
            "df4c286dbf4809bd05a8f51cced652f0bcf9b794"
        ],
        [
            "destruct (IP bool (fun b => if b then A else B) C true) as ([|],H).",
            "VernacExtend",
            "c6b727087c156ad8a157cbc74dd8c1e764e7ca1d"
        ],
        [
            "intro HC; destruct (HCAB HC); [exists true|exists false]; assumption.",
            "VernacExtend",
            "0bd30075a77501154ed35cebfc6bf78756727d80"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma independence_general_premises_Godel_Dummett : IndependenceOfGeneralPremises -> GodelDummett.",
            "VernacStartTheoremProof",
            "21eff206b2f7e1edd1c677dcacd7b33e38b24b73"
        ],
        [
            "destruct Godel_Dummett_iff_right_distr_implication_over_disjunction.",
            "VernacExtend",
            "c5515924fec63d41f166792035133dcf26c206ff"
        ],
        [
            "auto using independence_general_premises_right_distr_implication_over_disjunction.",
            "VernacExtend",
            "f085de96b1ca8e06875719ae3aa04bce56adcb05"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition DrinkerParadox := forall (A:Type) (P:A -> Prop), inhabited A -> exists x, (exists x, P x) -> P x.",
            "VernacDefinition",
            "52c7e87bf43bb05dbb8411f3e215365a43a38315"
        ],
        [
            "Lemma independence_general_premises_drinker : IndependenceOfGeneralPremises <-> DrinkerParadox.",
            "VernacStartTheoremProof",
            "d9f5a5bac678066773a9b46d4df886c0d0c87659"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros IP A P InhA; apply (IP A P (exists x, P x) InhA); intro Hx; exact Hx.",
            "VernacExtend",
            "426ae69d415124a370aa8e7ba86b881b2216771f"
        ],
        [
            "intros Drinker A P Q InhA H; destruct (Drinker A P InhA) as (x,Hx).",
            "VernacExtend",
            "c7462843c667a3f1f0a3a8d821bec9f818a054c2"
        ],
        [
            "exists x; intro HQ; apply (Hx (H HQ)).",
            "VernacExtend",
            "f1118181e44340396738e3a14708e8a15740aebe"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition generalized_excluded_middle := forall A B:Prop, A \\/ (A -> B).",
            "VernacDefinition",
            "66175364b001a4c2b5f30acf41558035c901a0c1"
        ],
        [
            "Lemma excluded_middle_independence_general_premises : generalized_excluded_middle -> DrinkerParadox.",
            "VernacStartTheoremProof",
            "f4f04e88e59da43eacd60e8297a0d54fdc26d9ec"
        ],
        [
            "intros GEM A P x0.",
            "VernacExtend",
            "4fc2f983954e69c199c98b08eeb35113df847348"
        ],
        [
            "destruct (GEM (exists x, P x) (P x0)) as [(x,Hx)|Hnot].",
            "VernacExtend",
            "d439a5c1c3ad2b053783b83d5b21d5245fc0fa2f"
        ],
        [
            "exists x; intro; exact Hx.",
            "VernacExtend",
            "07ea1a946351da0fe395c36b6bf5bcd12919605b"
        ],
        [
            "exists x0; exact Hnot.",
            "VernacExtend",
            "fa04097f23fd8c89f4453389d6e3c6b98604d164"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Require Import Coq.Arith.PeanoNat.",
            "VernacRequire",
            "6d4764c749a74bcffb2642b5e99e4fde456970b6"
        ],
        [
            "Definition Minimal (P:nat -> Prop) (n:nat) : Prop := P n /\\ forall k, P k -> n<=k.",
            "VernacDefinition",
            "18db9ae493087387cc144c04dad1ac059f36ac4f"
        ],
        [
            "Definition Minimization_Property (P : nat -> Prop) : Prop := forall n, P n -> exists m, Minimal P m.",
            "VernacDefinition",
            "d40d126c6203b6df8d9bf4174546cf0c075cc300"
        ],
        [
            "Section Unrestricted_minimization_entails_excluded_middle.",
            "VernacBeginSection",
            "a49da3a139e84c3c82213ad67f96da4a27f19995"
        ],
        [
            "Hypothesis unrestricted_minimization: forall P, Minimization_Property P.",
            "VernacAssumption",
            "a369ff6d131698285b5592f6f330c4020ccef120"
        ],
        [
            "Theorem unrestricted_minimization_entails_excluded_middle : forall A, A\\/~A.",
            "VernacStartTheoremProof",
            "3e3286d8868b4914f8d05c562ccbf209a5d08cc4"
        ],
        [
            "intros A.",
            "VernacExtend",
            "1e674201f6164f095fcb9efa159981a648ffff11"
        ],
        [
            "pose (P := fun n:nat => n=0/\\A \\/ n=1).",
            "VernacExtend",
            "43bc56fe3c29ae267f2d25f111975328697c37a9"
        ],
        [
            "assert (P 1) as h.",
            "VernacExtend",
            "36f0970000a4f3b1096cc483ca6bf060fcbee181"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "unfold P.",
            "VernacExtend",
            "434cc3f55beee2a7785044446fc359fddb900b69"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "assert (P 0 <-> A) as p\u2080.",
            "VernacExtend",
            "ab2274b63591c50714e7fa733f3f13e06f85b786"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "intros [[_ h\u2080]|[=]].",
            "VernacExtend",
            "ac29a4e5352e77dbc1eba16d9e4c08893d6bdb8f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "unfold P.",
            "VernacExtend",
            "434cc3f55beee2a7785044446fc359fddb900b69"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "apply unrestricted_minimization in h as ([|[|m]] & hm & hmm).",
            "VernacExtend",
            "ba86de1875de35df00f1ad30d2b5d28dec3f7619"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intros HA.",
            "VernacExtend",
            "db7cc303581483c789d859b0b7295105db17af3a"
        ],
        [
            "apply p\u2080, hmm, PeanoNat.Nat.nle_succ_0 in HA.",
            "VernacExtend",
            "3441d3fc918a184a9fc0d5f06945fddda13f2ff4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct hm as [([=],_) | [=] ].",
            "VernacExtend",
            "2d6561b6914b2617c9197a6c66998f0ba7efdcd4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Unrestricted_minimization_entails_excluded_middle.",
            "VernacEndSegment",
            "5af7dd3d07ab34873457caa40aa449886d09d513"
        ],
        [
            "Require Import Wf_nat.",
            "VernacRequire",
            "e78e8b6524a9771b7c95f37880c2b88f96465784"
        ],
        [
            "Section Excluded_middle_entails_unrestricted_minimization.",
            "VernacBeginSection",
            "152d3d8c4f423e32e8693b90002b88c9cc79a094"
        ],
        [
            "Hypothesis em : forall A, A\\/~A.",
            "VernacAssumption",
            "68467e2720321eb226b3c4957b23560b58eaf17b"
        ],
        [
            "Theorem excluded_middle_entails_unrestricted_minimization : forall P, Minimization_Property P.",
            "VernacStartTheoremProof",
            "d263a5e0a4cee595685c1665c8b9b22d4e63bab8"
        ],
        [
            "intros P n HPn.",
            "VernacExtend",
            "53d71f941aacaa004dc159dffc1e213040ef8561"
        ],
        [
            "assert (dec : forall n, P n \\/ ~ P n) by auto using em.",
            "VernacExtend",
            "f0ba85d218845c7674022f8e22422f795119c925"
        ],
        [
            "assert (ex : exists n, P n) by (exists n; assumption).",
            "VernacExtend",
            "8e5fda6186cfa1ec42be9a20f9c3ef6106ffa022"
        ],
        [
            "destruct (dec_inh_nat_subset_has_unique_least_element P dec ex) as (n' & HPn' & _).",
            "VernacExtend",
            "1d0fd4c4172b6fd25f539af82efa2e82995f5b12"
        ],
        [
            "exists n'.",
            "VernacExtend",
            "3f88ed3ce6982c83e60e0797bf14de9f7fcd412b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Excluded_middle_entails_unrestricted_minimization.",
            "VernacEndSegment",
            "c09af1a90beafcb33bf2ff2173608232de94686c"
        ],
        [
            "Section Example_of_undecidable_predicate_with_the_minimization_property.",
            "VernacBeginSection",
            "aa323e4029f7023cb7ea166cffd1234d73b42ed2"
        ],
        [
            "Variable s : nat -> bool.",
            "VernacAssumption",
            "c03ea23fb4fc85d4f6bd57c9efa1726a33c234b0"
        ],
        [
            "Let P n := exists k, n<=k /\\ s k = true.",
            "VernacDefinition",
            "cda36533c960ffd2fe890f7b9e17cf2f5d4e9eca"
        ],
        [
            "Example undecidable_predicate_with_the_minimization_property : Minimization_Property P.",
            "VernacDefinition",
            "34e0e104f9aa242f25c4a2b5b67acca4f1be2f6e"
        ],
        [
            "unfold Minimization_Property.",
            "VernacExtend",
            "003869719071b91c5aded15d705626cadc709498"
        ],
        [
            "intros h hn.",
            "VernacExtend",
            "ee3b7b23971fae49222945fc81c8cd691961a3e8"
        ],
        [
            "exists 0.",
            "VernacExtend",
            "b12b8acd7a1526ef0683513a127984e4864502d9"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "unfold P in *.",
            "VernacExtend",
            "c140dc56ae8dcb5bbff4890e1e5fa6d6f7df136e"
        ],
        [
            "destruct hn as (k&hk\u2081&hk\u2082).",
            "VernacExtend",
            "87f941b1bd799639b625c2ac8f9034b10cb8774c"
        ],
        [
            "exists k.",
            "VernacExtend",
            "5bd085ef2f3e8bbd4bde88ae4ddb2fb4c72df1a9"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "rewrite <- hk\u2081.",
            "VernacExtend",
            "6b3fafa2c33785f126629ee21a6dc1baab646080"
        ],
        [
            "apply PeanoNat.Nat.le_0_l.",
            "VernacExtend",
            "dedc3ce65621d16af11bee45263fec75872c3e45"
        ],
        [
            "*",
            "VernacBullet",
            "8a329d054468e0c41ce333043e0978e30eed7b98"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "intros **.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply PeanoNat.Nat.le_0_l.",
            "VernacExtend",
            "dedc3ce65621d16af11bee45263fec75872c3e45"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Example_of_undecidable_predicate_with_the_minimization_property.",
            "VernacEndSegment",
            "c00819cf977d7f63f056e9734db7d3ab1accbb1f"
        ],
        [
            "Require Import RelationClasses.",
            "VernacRequire",
            "4477b0931b4b8fa1b7266888d518499524bf9df2"
        ],
        [
            "Local Notation representative_boolean_partition := (forall R:bool->bool->Prop, Equivalence R -> exists f, forall x, R x (f x) /\\ forall y, R x y -> f x = f y).",
            "VernacSyntacticDefinition",
            "e5f7e0e90a543b43890d43065a73bb9c289efdc9"
        ],
        [
            "Theorem representative_boolean_partition_imp_excluded_middle : representative_boolean_partition -> excluded_middle.",
            "VernacStartTheoremProof",
            "f495e980d47d1fad3f0d6ffd67f51d5f43789e35"
        ],
        [
            "intros ReprFunChoice P.",
            "VernacExtend",
            "1c66d567d9629c29585f5a0d7e3280a49642d87f"
        ],
        [
            "pose (R (b1 b2 : bool) := b1 = b2 \\/ P).",
            "VernacExtend",
            "4d8aaf28915fb69b66ce17e21e1d0325778f5ecc"
        ],
        [
            "assert (Equivalence R).",
            "VernacExtend",
            "ab0214de68810e8ec185d90fff42ca1a25e25052"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct 1.",
            "VernacExtend",
            "0e61c29dbe9a16af1faa0807bdb22c467076a9d2"
        ],
        [
            "now left.",
            "VernacExtend",
            "2bd81021638064dbaa3d520cec398253376a1f37"
        ],
        [
            "now right.",
            "VernacExtend",
            "18eb395a45fbe5648757d528efaf583b695576c7"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct 1, 1; try now right.",
            "VernacExtend",
            "28acbd6c96238bce01b2b9ed1aff00bd7e966192"
        ],
        [
            "left; now transitivity y.",
            "VernacExtend",
            "da76d3c078b9c652ad406d4f04b961d146bf6144"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "destruct (ReprFunChoice R H) as (f,Hf).",
            "VernacExtend",
            "bc923c8fd595560416790c353f74348581278d53"
        ],
        [
            "clear H.",
            "VernacExtend",
            "f2c5826643b985ca1b67f3433f38ccbe2735e582"
        ],
        [
            "destruct (Bool.bool_dec (f true) (f false)) as [Heq|Hneq].",
            "VernacExtend",
            "c022d7ef718aa52b0cc0dd0a3b7458468649e355"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "destruct (Hf false) as ([Hfalse|HP],_); try easy.",
            "VernacExtend",
            "0f6a0a5cbe62dc709c9a6aaed8ac845e79e09e2a"
        ],
        [
            "destruct (Hf true) as ([Htrue|HP],_); try easy.",
            "VernacExtend",
            "65e911747a6e4291bbaf0d527c1237e563119aca"
        ],
        [
            "congruence.",
            "VernacExtend",
            "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "intro HP.",
            "VernacExtend",
            "6862bd7ae05de72632887e57f731f07f22fd6080"
        ],
        [
            "destruct (Hf true) as (_,H).",
            "VernacExtend",
            "7d11e6ef48654306d8b4c0e19766ba1f1ef23eb0"
        ],
        [
            "apply Hneq, H.",
            "VernacExtend",
            "c87d7ab0c39d8858bda0f96658c2a0de328c213c"
        ],
        [
            "now right.",
            "VernacExtend",
            "18eb395a45fbe5648757d528efaf583b695576c7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem excluded_middle_imp_representative_boolean_partition : excluded_middle -> representative_boolean_partition.",
            "VernacStartTheoremProof",
            "3ed0375bf288361d8ef6cc5a3676e03821d33fdd"
        ],
        [
            "intros EM R H.",
            "VernacExtend",
            "74cf6cbcfabcd73c7b21ddf1fb095d5b1b06c6f6"
        ],
        [
            "destruct (EM (R true false)).",
            "VernacExtend",
            "dc36a1a7a2318874c3fabbc660b170cb264a2d0f"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exists (fun _ => true).",
            "VernacExtend",
            "312f2638107e200d6232b9a3fd226ee5e5d7a531"
        ],
        [
            "intros []; firstorder.",
            "VernacExtend",
            "d02373858f9280389c22bd9789445ec9b6e76ca0"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "exists (fun b => b).",
            "VernacExtend",
            "7fe82bbf832eeb83c928c80f338296b9fe195bc2"
        ],
        [
            "intro b.",
            "VernacExtend",
            "069cd7d34a03b833d46b6b4ca32ac31560c50264"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "destruct b, y; intros HR; easy || now symmetry in HR.",
            "VernacExtend",
            "92643c881d0acf95b518ebea1b468c023cf835d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem excluded_middle_iff_representative_boolean_partition : excluded_middle <-> representative_boolean_partition.",
            "VernacStartTheoremProof",
            "0791e88c25704adbe060e0b08e55f8cd4d368dcc"
        ],
        [
            "split; auto using excluded_middle_imp_representative_boolean_partition, representative_boolean_partition_imp_excluded_middle.",
            "VernacExtend",
            "e9fa5cfb67e7f398f0ddb98e5a95283ab35006a8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "prop_degen_ext",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros H A B [Hab Hba].",
                        "VernacExtend",
                        "635411052d21fbe987e10a1d650d32c12284a572"
                    ]
                },
                {
                    "command": [
                        "destruct (H A); destruct (H B).",
                        "VernacExtend",
                        "d431c02ad4234d46eb330db97dd5f7d28696d1f3"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; exact H0.",
                        "VernacExtend",
                        "4b355460cd4cd1bc8e864a199261b622e6c74554"
                    ]
                },
                {
                    "command": [
                        "absurd B.",
                        "VernacExtend",
                        "2735f1234b3cdc4c37728dc31bb4292656f5158d"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; exact (fun H => H).",
                        "VernacExtend",
                        "4fcbe90a80d1ded021ffccb8dfbaa3f76c208091"
                    ]
                },
                {
                    "command": [
                        "apply Hab; rewrite H0; exact I.",
                        "VernacExtend",
                        "9ac4329ad581a972704d054f71d9e0dc4b8d423d"
                    ]
                },
                {
                    "command": [
                        "absurd A.",
                        "VernacExtend",
                        "3f36f78300eab91d7a0ba83d038ed8bf126d2d4e"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; exact (fun H => H).",
                        "VernacExtend",
                        "affb6b84d6d1c8e6df48836823b2a043d8616f28"
                    ]
                },
                {
                    "command": [
                        "apply Hba; rewrite H1; exact I.",
                        "VernacExtend",
                        "11a17bde85fcdb069c981eca440c226af25cfd0f"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; exact H0.",
                        "VernacExtend",
                        "4b355460cd4cd1bc8e864a199261b622e6c74554"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_degen_em",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "intros H A.",
                        "VernacExtend",
                        "010ccb73cba17ccbfd72234b553000b81dcbcb40"
                    ]
                },
                {
                    "command": [
                        "destruct (H A).",
                        "VernacExtend",
                        "9225852e89222b692b59eae97bf90aad576b76bd"
                    ]
                },
                {
                    "command": [
                        "left; rewrite H0; exact I.",
                        "VernacExtend",
                        "09a03d34c80c27359780a6345f4da9fc6ae336ba"
                    ]
                },
                {
                    "command": [
                        "right; rewrite H0; exact (fun x => x).",
                        "VernacExtend",
                        "12e440ad45f4e54f160d089d7a1ae5c0ee0651c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_ext_em_degen",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros Ext EM A.",
                        "VernacExtend",
                        "284d4e2275425a6119b3c9864911ab93ec445997"
                    ]
                },
                {
                    "command": [
                        "destruct (EM A).",
                        "VernacExtend",
                        "e1f5ba6cdc1473464f8aff0c0db3318062e9ae26"
                    ]
                },
                {
                    "command": [
                        "left; apply (Ext A True); split; [ exact (fun _ => I) | exact (fun _ => H) ].",
                        "VernacExtend",
                        "759280b58b985aa0ea005fcb2a0e67a0f94c068a"
                    ]
                },
                {
                    "command": [
                        "right; apply (Ext A False); split; [ exact H | apply False_ind ].",
                        "VernacExtend",
                        "34bbcc13e2442e2ed2e6ba9b07ebaf0341dc6d89"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "provable_prop_ext",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "exact PropExt_imp_ProvPropExt.",
                        "VernacExtend",
                        "36bd90e3f152f5caecf8e6dc6c79abef60e58229"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_ext_A_eq_A_imp_A",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros Ext A a.",
                        "VernacExtend",
                        "6136c35420b663c9d51668836390a3f8e515dd1c"
                    ]
                },
                {
                    "command": [
                        "apply (Ext (A -> A) A); split; [ exact (fun _ => a) | exact (fun _ _ => a) ].",
                        "VernacExtend",
                        "9bf2d3c07173b47cd170373084958a99ca861d85"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prop_ext_retract_A_A_imp_A",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "intros Ext A a.",
                        "VernacExtend",
                        "6136c35420b663c9d51668836390a3f8e515dd1c"
                    ]
                },
                {
                    "command": [
                        "rewrite (prop_ext_A_eq_A_imp_A Ext A a).",
                        "VernacExtend",
                        "28a904f1fe1fe936d98d278e121a61f6ec5b52c3"
                    ]
                },
                {
                    "command": [
                        "exists (fun x:A => x) (fun x:A => x).",
                        "VernacExtend",
                        "e48d5e507c3c2c75ccb75c36506848e020190af8"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ext_prop_fixpoint",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros Ext A a.",
                        "VernacExtend",
                        "6136c35420b663c9d51668836390a3f8e515dd1c"
                    ]
                },
                {
                    "command": [
                        "case (prop_ext_retract_A_A_imp_A Ext A a); intros g1 g2 g1_o_g2.",
                        "VernacExtend",
                        "352d5dee19265c8ed8464c3f54162aab13bc6796"
                    ]
                },
                {
                    "command": [
                        "exists (fun f => (fun x:A => f (g1 x x)) (g2 (fun x => f (g1 x x)))).",
                        "VernacExtend",
                        "5688742b73115785a028fe7ca406d615dbf717f6"
                    ]
                },
                {
                    "command": [
                        "intro f.",
                        "VernacExtend",
                        "cfca43118419dd191a669828299d7df459d583f5"
                    ]
                },
                {
                    "command": [
                        "pattern (g1 (g2 (fun x:A => f (g1 x x)))) at 1.",
                        "VernacExtend",
                        "e5fccfc9bc470ac137839af82ade6c5236364d44"
                    ]
                },
                {
                    "command": [
                        "rewrite (g1_o_g2 (fun x:A => f (g1 x x))).",
                        "VernacExtend",
                        "3bddd16972a406fc1b8d146d058434bc27c58455"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "aux",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "intros Ext Ind.",
                        "VernacExtend",
                        "fa23f5fc2c58ed27ff6dc5e9e778684ac29db753"
                    ]
                },
                {
                    "command": [
                        "case (ext_prop_fixpoint Ext bool true); intros G Gfix.",
                        "VernacExtend",
                        "adcb434ab316ce1030118d2fe17cddb42ca8b4da"
                    ]
                },
                {
                    "command": [
                        "set (neg := fun b:bool => bool_elim bool false true b).",
                        "VernacExtend",
                        "29430bf86ce7147ed869bb3c98dd3873a58c71c3"
                    ]
                },
                {
                    "command": [
                        "generalize (eq_refl (G neg)).",
                        "VernacExtend",
                        "705e21d3c374619c21f9d8d4f8db42782956b83b"
                    ]
                },
                {
                    "command": [
                        "pattern (G neg) at 1.",
                        "VernacExtend",
                        "fe744a5903b73de9510cbe15f6c969dad34b2233"
                    ]
                },
                {
                    "command": [
                        "apply Ind with (b := G neg); intro Heq.",
                        "VernacExtend",
                        "d3b3eada359ea38e5f3414df6ec06cf3796f0ede"
                    ]
                },
                {
                    "command": [
                        "rewrite (bool_elim_redl bool false true).",
                        "VernacExtend",
                        "b37e96f94aa7c26d321413782752d6224ea98519"
                    ]
                },
                {
                    "command": [
                        "change (true = neg true); rewrite Heq; apply Gfix.",
                        "VernacExtend",
                        "0b3212b70945d054a271d92be9d883d836b04cf1"
                    ]
                },
                {
                    "command": [
                        "rewrite (bool_elim_redr bool false true).",
                        "VernacExtend",
                        "314367f3c11f10ceec853f0bb09393db80c55f21"
                    ]
                },
                {
                    "command": [
                        "change (neg false = false); rewrite Heq; symmetry ; apply Gfix.",
                        "VernacExtend",
                        "99c9644945ab43eb99af912408e5eb58e59eef6b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ext_prop_dep_proof_irrel_gen",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "intros Ext Ind A a1 a2.",
                        "VernacExtend",
                        "c4f6459b9ef8cb37cd20ac0aaec27d27c960d629"
                    ]
                },
                {
                    "command": [
                        "set (f := fun b:bool => bool_elim A a1 a2 b).",
                        "VernacExtend",
                        "e5da8284fe6cbc9d6fab36969172b016e67f83ff"
                    ]
                },
                {
                    "command": [
                        "rewrite (bool_elim_redl A a1 a2).",
                        "VernacExtend",
                        "b2c482b227681916a83a4e8d3ce16b69f534db2f"
                    ]
                },
                {
                    "command": [
                        "change (f true = a2).",
                        "VernacExtend",
                        "baa9b95df0bf81f43313f725d079be9285ef88ef"
                    ]
                },
                {
                    "command": [
                        "rewrite (bool_elim_redr A a1 a2).",
                        "VernacExtend",
                        "137e945f84f8eec8febbf6b7ca4628ea3991e47e"
                    ]
                },
                {
                    "command": [
                        "change (f true = f false).",
                        "VernacExtend",
                        "befef6874c3cc03bdd17dd56cc2bebd07e239b45"
                    ]
                },
                {
                    "command": [
                        "rewrite (aux Ext Ind).",
                        "VernacExtend",
                        "d5beff970a9dc5749d17e59d4e7557366081ef32"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ext_prop_dep_proof_irrel_cc",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "exact (ext_prop_dep_proof_irrel_gen BoolP TrueP FalseP BoolP_elim BoolP_elim_redl BoolP_elim_redr).",
                        "VernacExtend",
                        "480195488c985c3c6b6854dabffa3ec2ed1681d2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ext_prop_dep_proof_irrel_cic",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "exact (fun pe => ext_prop_dep_proof_irrel_gen boolP trueP falseP boolP_ind boolP_elim_redl boolP_elim_redr pe boolP_indd).",
                        "VernacExtend",
                        "a5c25c98fa9f70bacbcec09c89d8b28ad423d658"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "p2p1",
            "line_nb": 121,
            "steps": [
                {
                    "command": [
                        "unfold p2b; intro A; apply or_dep_elim with (b := em A); unfold b2p; intros.",
                        "VernacExtend",
                        "458522a3fe8f24913fde0b4fc74df0fba8610d93"
                    ]
                },
                {
                    "command": [
                        "apply (or_elim_redl A (~ A) B (fun _ => b1) (fun _ => b2)).",
                        "VernacExtend",
                        "c2183e010eb4ba793c556101114d7253423e4399"
                    ]
                },
                {
                    "command": [
                        "destruct (b H).",
                        "VernacExtend",
                        "6cc55df5899f757600f0db0788d558f12baf3063"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "p2p2",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "intro not_eq_b1_b2.",
                        "VernacExtend",
                        "b830eca619d5f5b244ea2af0653ee0faf725cef2"
                    ]
                },
                {
                    "command": [
                        "unfold p2b; intro A; apply or_dep_elim with (b := em A); unfold b2p; intros.",
                        "VernacExtend",
                        "458522a3fe8f24913fde0b4fc74df0fba8610d93"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "destruct not_eq_b1_b2.",
                        "VernacExtend",
                        "48e166d8abf4da70dd3607bc04a715bf9b5d4ed4"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (or_elim_redr A (~ A) B (fun _ => b1) (fun _ => b2)) in H.",
                        "VernacExtend",
                        "b7d95bf495e551829b8cbdc04184b4ec2a175e57"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proof_irrelevance_cc",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "refine (or_elim _ _ _ _ _ (em (b1 = b2))); intro H.",
                        "VernacExtend",
                        "f1ab45726c23e9d086fccd049f1853d6bd2e0524"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply (NoRetractFromSmallPropositionToProp.paradox B p2b b2p (p2p2 H) p2p1).",
                        "VernacExtend",
                        "08703f60b065f5fce5dafb384fad05720f8f6562"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wp2p1",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "intros A.",
                        "VernacExtend",
                        "1e674201f6164f095fcb9efa159981a648ffff11"
                    ]
                },
                {
                    "command": [
                        "unfold p2b.",
                        "VernacExtend",
                        "66dab408871ed6d11968c75561f80a1b23f51699"
                    ]
                },
                {
                    "command": [
                        "apply or_dep_elim with (b := wem (El A)).",
                        "VernacExtend",
                        "60dbbcfb0aadfd7cf26f802544b1da74c7569928"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "intros nna a.",
                        "VernacExtend",
                        "d05a9f42b8d4ecd7f4d478a485d090299d0d6769"
                    ]
                },
                {
                    "command": [
                        "rewrite <- or_elim_redl.",
                        "VernacExtend",
                        "a20cc044675c69d20246ffbe75af178a4863d8ac"
                    ]
                },
                {
                    "command": [
                        "cbn.",
                        "VernacExtend",
                        "2de4be1c15e6f71a05c3809cbe562a67585b4b18"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "intros n x.",
                        "VernacExtend",
                        "ffcb8ab9021fddb9f2e0669fb0d732ac2d8ea32c"
                    ]
                },
                {
                    "command": [
                        "destruct (n x).",
                        "VernacExtend",
                        "138d9024eec8b389e3ff80902b0ee4459feb66d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wp2p2",
            "line_nb": 168,
            "steps": [
                {
                    "command": [
                        "intro not_eq_b1_b2.",
                        "VernacExtend",
                        "b830eca619d5f5b244ea2af0653ee0faf725cef2"
                    ]
                },
                {
                    "command": [
                        "intros A.",
                        "VernacExtend",
                        "1e674201f6164f095fcb9efa159981a648ffff11"
                    ]
                },
                {
                    "command": [
                        "unfold p2b.",
                        "VernacExtend",
                        "66dab408871ed6d11968c75561f80a1b23f51699"
                    ]
                },
                {
                    "command": [
                        "apply or_dep_elim with (b := wem (El A)).",
                        "VernacExtend",
                        "60dbbcfb0aadfd7cf26f802544b1da74c7569928"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "cbn.",
                        "VernacExtend",
                        "2de4be1c15e6f71a05c3809cbe562a67585b4b18"
                    ]
                },
                {
                    "command": [
                        "intros x _.",
                        "VernacExtend",
                        "a217ac7c130d591b56438fb1fd6c2cc8c3f9de57"
                    ]
                },
                {
                    "command": [
                        "destruct A.",
                        "VernacExtend",
                        "0f975e57337711bcb9af8ef6166251e7035574a3"
                    ]
                },
                {
                    "command": [
                        "cbn in x |- *.",
                        "VernacExtend",
                        "c3baae68464ae410bcb31c3331409f078a7d9567"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "intros na.",
                        "VernacExtend",
                        "80162cb44cbc2218aae5d4228f05888b00e03bfa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- or_elim_redr.",
                        "VernacExtend",
                        "004df758d75f61ac328a41879707b3bdb2a107fd"
                    ]
                },
                {
                    "command": [
                        "cbn.",
                        "VernacExtend",
                        "2de4be1c15e6f71a05c3809cbe562a67585b4b18"
                    ]
                },
                {
                    "command": [
                        "intros h.",
                        "VernacExtend",
                        "d9af23d7f0cb5ed2eb064c0cac858c6211d58837"
                    ]
                },
                {
                    "command": [
                        "destruct (h not_eq_b1_b2).",
                        "VernacExtend",
                        "1c1ebf0353efc7a5466b9c96abcd03aa3f1468ad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wproof_irrelevance_cc",
            "line_nb": 186,
            "steps": [
                {
                    "command": [
                        "intros h.",
                        "VernacExtend",
                        "d9af23d7f0cb5ed2eb064c0cac858c6211d58837"
                    ]
                },
                {
                    "command": [
                        "unshelve (refine (let NB := exist (fun P=>~~P -> P) B _ in _)).",
                        "VernacExtend",
                        "ca7e6b6e01c9fb24cf748fc864ef1aab5316c032"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "exact (fun _ => b1).",
                        "VernacExtend",
                        "e1d9f3d20e1fabc13bbdc3ef397e045e53194811"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "pose proof (NoRetractToNegativeProp.paradox NB p2b b2p (wp2p2 h) wp2p1) as paradox.",
                        "VernacExtend",
                        "a5e628016e3198ebae97ce4dfab07c861887f3ac"
                    ]
                },
                {
                    "command": [
                        "unshelve (refine (let F := exist (fun P=>~~P->P) False _ in _)).",
                        "VernacExtend",
                        "ccf4bb401bd537fd4cd754750b262c7175786313"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "exact (paradox F).",
                        "VernacExtend",
                        "8aa86a9ecbc07e0a4b33d464f378168356febffb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "proof_irrelevance_cci",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "exact (proof_irrelevance_cc or or_introl or_intror or_ind or_elim_redl or_elim_redr or_indd em).",
                        "VernacExtend",
                        "b09d8b6dbcc1970d645b94427d84cfecb72450c7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wem_proof_irrelevance_cci",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "exact (wproof_irrelevance_cc or or_introl or_intror or_ind or_elim_redl or_elim_redr or_indd wem).",
                        "VernacExtend",
                        "81c0ab7d810c6d0233ed2b3f8a115ce9e82cafcc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "excluded_middle_Godel_Dummett",
            "line_nb": 218,
            "steps": [
                {
                    "command": [
                        "intros EM A B.",
                        "VernacExtend",
                        "d51f3ba91c9999934253fdb325a336a87952ff59"
                    ]
                },
                {
                    "command": [
                        "destruct (EM B) as [HB|HnotB].",
                        "VernacExtend",
                        "97b1b2ce19666c3ac436756f25208e3a208cbf9a"
                    ]
                },
                {
                    "command": [
                        "left; intros _; exact HB.",
                        "VernacExtend",
                        "c7591b823b78124ba9a835081e7c93d7cec647ac"
                    ]
                },
                {
                    "command": [
                        "right; intros HB; destruct (HnotB HB).",
                        "VernacExtend",
                        "6dd3f9b43093548d6a01ee6541f2e27344683bd1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Godel_Dummett_iff_right_distr_implication_over_disjunction",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intros GD A B C HCAB.",
                        "VernacExtend",
                        "973e6e3280f15d4a5bb4c40cace89d47885eb260"
                    ]
                },
                {
                    "command": [
                        "destruct (GD B A) as [HBA|HAB]; [left|right]; intro HC; destruct (HCAB HC) as [HA|HB]; [ | apply HBA | apply HAB | ]; assumption.",
                        "VernacExtend",
                        "fb2898db23264d3d83abb5ae224bd3577895d9a5"
                    ]
                },
                {
                    "command": [
                        "intros Distr A B.",
                        "VernacExtend",
                        "7fd43a2494ffa3a5a355840c8bd097d9f2eef277"
                    ]
                },
                {
                    "command": [
                        "destruct (Distr A B (A\\/B)) as [HABA|HABB].",
                        "VernacExtend",
                        "92da0c25c45e94d7cde1a558436934ec5659402b"
                    ]
                },
                {
                    "command": [
                        "intro HAB; exact HAB.",
                        "VernacExtend",
                        "518f73909809926d16aef053b3499bbb22c26168"
                    ]
                },
                {
                    "command": [
                        "right; intro HB; apply HABA; right; assumption.",
                        "VernacExtend",
                        "bf186893e5c6b64cf24da2542bc6c455a9cf5e3d"
                    ]
                },
                {
                    "command": [
                        "left; intro HA; apply HABB; left; assumption.",
                        "VernacExtend",
                        "d4e6e02e7f33d59402bc5860e1a2bc08ea93089f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Godel_Dummett_weak_excluded_middle",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "intros GD A.",
                        "VernacExtend",
                        "cf4a3cb750462f76c681cf27c328f3509eb8dd6c"
                    ]
                },
                {
                    "command": [
                        "destruct (GD (~A) A) as [HnotAA|HAnotA].",
                        "VernacExtend",
                        "56fc465c2abf0f8c3a0f6e2fe4a0bda3a5a2cec4"
                    ]
                },
                {
                    "command": [
                        "left; intro HnotA; apply (HnotA (HnotAA HnotA)).",
                        "VernacExtend",
                        "4f4d10f4748a58c941ab2dc993019c19578ed664"
                    ]
                },
                {
                    "command": [
                        "right; intro HA; apply (HAnotA HA HA).",
                        "VernacExtend",
                        "0b5961727745869623f2e41617058aed877ad3db"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "independence_general_premises_right_distr_implication_over_disjunction",
            "line_nb": 242,
            "steps": [
                {
                    "command": [
                        "intros IP A B C HCAB.",
                        "VernacExtend",
                        "df4c286dbf4809bd05a8f51cced652f0bcf9b794"
                    ]
                },
                {
                    "command": [
                        "destruct (IP bool (fun b => if b then A else B) C true) as ([|],H).",
                        "VernacExtend",
                        "c6b727087c156ad8a157cbc74dd8c1e764e7ca1d"
                    ]
                },
                {
                    "command": [
                        "intro HC; destruct (HCAB HC); [exists true|exists false]; assumption.",
                        "VernacExtend",
                        "0bd30075a77501154ed35cebfc6bf78756727d80"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "independence_general_premises_Godel_Dummett",
            "line_nb": 249,
            "steps": [
                {
                    "command": [
                        "destruct Godel_Dummett_iff_right_distr_implication_over_disjunction.",
                        "VernacExtend",
                        "c5515924fec63d41f166792035133dcf26c206ff"
                    ]
                },
                {
                    "command": [
                        "auto using independence_general_premises_right_distr_implication_over_disjunction.",
                        "VernacExtend",
                        "f085de96b1ca8e06875719ae3aa04bce56adcb05"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "independence_general_premises_drinker",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intros IP A P InhA; apply (IP A P (exists x, P x) InhA); intro Hx; exact Hx.",
                        "VernacExtend",
                        "426ae69d415124a370aa8e7ba86b881b2216771f"
                    ]
                },
                {
                    "command": [
                        "intros Drinker A P Q InhA H; destruct (Drinker A P InhA) as (x,Hx).",
                        "VernacExtend",
                        "c7462843c667a3f1f0a3a8d821bec9f818a054c2"
                    ]
                },
                {
                    "command": [
                        "exists x; intro HQ; apply (Hx (H HQ)).",
                        "VernacExtend",
                        "f1118181e44340396738e3a14708e8a15740aebe"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "excluded_middle_independence_general_premises",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "intros GEM A P x0.",
                        "VernacExtend",
                        "4fc2f983954e69c199c98b08eeb35113df847348"
                    ]
                },
                {
                    "command": [
                        "destruct (GEM (exists x, P x) (P x0)) as [(x,Hx)|Hnot].",
                        "VernacExtend",
                        "d439a5c1c3ad2b053783b83d5b21d5245fc0fa2f"
                    ]
                },
                {
                    "command": [
                        "exists x; intro; exact Hx.",
                        "VernacExtend",
                        "07ea1a946351da0fe395c36b6bf5bcd12919605b"
                    ]
                },
                {
                    "command": [
                        "exists x0; exact Hnot.",
                        "VernacExtend",
                        "fa04097f23fd8c89f4453389d6e3c6b98604d164"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "unrestricted_minimization_entails_excluded_middle",
            "line_nb": 272,
            "steps": [
                {
                    "command": [
                        "intros A.",
                        "VernacExtend",
                        "1e674201f6164f095fcb9efa159981a648ffff11"
                    ]
                },
                {
                    "command": [
                        "pose (P := fun n:nat => n=0/\\A \\/ n=1).",
                        "VernacExtend",
                        "43bc56fe3c29ae267f2d25f111975328697c37a9"
                    ]
                },
                {
                    "command": [
                        "assert (P 1) as h.",
                        "VernacExtend",
                        "36f0970000a4f3b1096cc483ca6bf060fcbee181"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "unfold P.",
                        "VernacExtend",
                        "434cc3f55beee2a7785044446fc359fddb900b69"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "assert (P 0 <-> A) as p\u2080.",
                        "VernacExtend",
                        "ab2274b63591c50714e7fa733f3f13e06f85b786"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "intros [[_ h\u2080]|[=]].",
                        "VernacExtend",
                        "ac29a4e5352e77dbc1eba16d9e4c08893d6bdb8f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "unfold P.",
                        "VernacExtend",
                        "434cc3f55beee2a7785044446fc359fddb900b69"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "apply unrestricted_minimization in h as ([|[|m]] & hm & hmm).",
                        "VernacExtend",
                        "ba86de1875de35df00f1ad30d2b5d28dec3f7619"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "intros HA.",
                        "VernacExtend",
                        "db7cc303581483c789d859b0b7295105db17af3a"
                    ]
                },
                {
                    "command": [
                        "apply p\u2080, hmm, PeanoNat.Nat.nle_succ_0 in HA.",
                        "VernacExtend",
                        "3441d3fc918a184a9fc0d5f06945fddda13f2ff4"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct hm as [([=],_) | [=] ].",
                        "VernacExtend",
                        "2d6561b6914b2617c9197a6c66998f0ba7efdcd4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "excluded_middle_entails_unrestricted_minimization",
            "line_nb": 305,
            "steps": [
                {
                    "command": [
                        "intros P n HPn.",
                        "VernacExtend",
                        "53d71f941aacaa004dc159dffc1e213040ef8561"
                    ]
                },
                {
                    "command": [
                        "assert (dec : forall n, P n \\/ ~ P n) by auto using em.",
                        "VernacExtend",
                        "f0ba85d218845c7674022f8e22422f795119c925"
                    ]
                },
                {
                    "command": [
                        "assert (ex : exists n, P n) by (exists n; assumption).",
                        "VernacExtend",
                        "8e5fda6186cfa1ec42be9a20f9c3ef6106ffa022"
                    ]
                },
                {
                    "command": [
                        "destruct (dec_inh_nat_subset_has_unique_least_element P dec ex) as (n' & HPn' & _).",
                        "VernacExtend",
                        "1d0fd4c4172b6fd25f539af82efa2e82995f5b12"
                    ]
                },
                {
                    "command": [
                        "exists n'.",
                        "VernacExtend",
                        "3f88ed3ce6982c83e60e0797bf14de9f7fcd412b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "undecidable_predicate_with_the_minimization_property",
            "line_nb": 317,
            "steps": [
                {
                    "command": [
                        "unfold Minimization_Property.",
                        "VernacExtend",
                        "003869719071b91c5aded15d705626cadc709498"
                    ]
                },
                {
                    "command": [
                        "intros h hn.",
                        "VernacExtend",
                        "ee3b7b23971fae49222945fc81c8cd691961a3e8"
                    ]
                },
                {
                    "command": [
                        "exists 0.",
                        "VernacExtend",
                        "b12b8acd7a1526ef0683513a127984e4864502d9"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "unfold P in *.",
                        "VernacExtend",
                        "c140dc56ae8dcb5bbff4890e1e5fa6d6f7df136e"
                    ]
                },
                {
                    "command": [
                        "destruct hn as (k&hk\u2081&hk\u2082).",
                        "VernacExtend",
                        "87f941b1bd799639b625c2ac8f9034b10cb8774c"
                    ]
                },
                {
                    "command": [
                        "exists k.",
                        "VernacExtend",
                        "5bd085ef2f3e8bbd4bde88ae4ddb2fb4c72df1a9"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "rewrite <- hk\u2081.",
                        "VernacExtend",
                        "6b3fafa2c33785f126629ee21a6dc1baab646080"
                    ]
                },
                {
                    "command": [
                        "apply PeanoNat.Nat.le_0_l.",
                        "VernacExtend",
                        "dedc3ce65621d16af11bee45263fec75872c3e45"
                    ]
                },
                {
                    "command": [
                        "*",
                        "VernacBullet",
                        "8a329d054468e0c41ce333043e0978e30eed7b98"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "intros **.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply PeanoNat.Nat.le_0_l.",
                        "VernacExtend",
                        "dedc3ce65621d16af11bee45263fec75872c3e45"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "representative_boolean_partition_imp_excluded_middle",
            "line_nb": 339,
            "steps": [
                {
                    "command": [
                        "intros ReprFunChoice P.",
                        "VernacExtend",
                        "1c66d567d9629c29585f5a0d7e3280a49642d87f"
                    ]
                },
                {
                    "command": [
                        "pose (R (b1 b2 : bool) := b1 = b2 \\/ P).",
                        "VernacExtend",
                        "4d8aaf28915fb69b66ce17e21e1d0325778f5ecc"
                    ]
                },
                {
                    "command": [
                        "assert (Equivalence R).",
                        "VernacExtend",
                        "ab0214de68810e8ec185d90fff42ca1a25e25052"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "now left.",
                        "VernacExtend",
                        "2bd81021638064dbaa3d520cec398253376a1f37"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct 1.",
                        "VernacExtend",
                        "0e61c29dbe9a16af1faa0807bdb22c467076a9d2"
                    ]
                },
                {
                    "command": [
                        "now left.",
                        "VernacExtend",
                        "2bd81021638064dbaa3d520cec398253376a1f37"
                    ]
                },
                {
                    "command": [
                        "now right.",
                        "VernacExtend",
                        "18eb395a45fbe5648757d528efaf583b695576c7"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct 1, 1; try now right.",
                        "VernacExtend",
                        "28acbd6c96238bce01b2b9ed1aff00bd7e966192"
                    ]
                },
                {
                    "command": [
                        "left; now transitivity y.",
                        "VernacExtend",
                        "da76d3c078b9c652ad406d4f04b961d146bf6144"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "destruct (ReprFunChoice R H) as (f,Hf).",
                        "VernacExtend",
                        "bc923c8fd595560416790c353f74348581278d53"
                    ]
                },
                {
                    "command": [
                        "clear H.",
                        "VernacExtend",
                        "f2c5826643b985ca1b67f3433f38ccbe2735e582"
                    ]
                },
                {
                    "command": [
                        "destruct (Bool.bool_dec (f true) (f false)) as [Heq|Hneq].",
                        "VernacExtend",
                        "c022d7ef718aa52b0cc0dd0a3b7458468649e355"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "destruct (Hf false) as ([Hfalse|HP],_); try easy.",
                        "VernacExtend",
                        "0f6a0a5cbe62dc709c9a6aaed8ac845e79e09e2a"
                    ]
                },
                {
                    "command": [
                        "destruct (Hf true) as ([Htrue|HP],_); try easy.",
                        "VernacExtend",
                        "65e911747a6e4291bbaf0d527c1237e563119aca"
                    ]
                },
                {
                    "command": [
                        "congruence.",
                        "VernacExtend",
                        "d8c818f6cffeaee6a722a71acc77f2d6e5199eb9"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "intro HP.",
                        "VernacExtend",
                        "6862bd7ae05de72632887e57f731f07f22fd6080"
                    ]
                },
                {
                    "command": [
                        "destruct (Hf true) as (_,H).",
                        "VernacExtend",
                        "7d11e6ef48654306d8b4c0e19766ba1f1ef23eb0"
                    ]
                },
                {
                    "command": [
                        "apply Hneq, H.",
                        "VernacExtend",
                        "c87d7ab0c39d8858bda0f96658c2a0de328c213c"
                    ]
                },
                {
                    "command": [
                        "now right.",
                        "VernacExtend",
                        "18eb395a45fbe5648757d528efaf583b695576c7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "excluded_middle_imp_representative_boolean_partition",
            "line_nb": 370,
            "steps": [
                {
                    "command": [
                        "intros EM R H.",
                        "VernacExtend",
                        "74cf6cbcfabcd73c7b21ddf1fb095d5b1b06c6f6"
                    ]
                },
                {
                    "command": [
                        "destruct (EM (R true false)).",
                        "VernacExtend",
                        "dc36a1a7a2318874c3fabbc660b170cb264a2d0f"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "exists (fun _ => true).",
                        "VernacExtend",
                        "312f2638107e200d6232b9a3fd226ee5e5d7a531"
                    ]
                },
                {
                    "command": [
                        "intros []; firstorder.",
                        "VernacExtend",
                        "d02373858f9280389c22bd9789445ec9b6e76ca0"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "exists (fun b => b).",
                        "VernacExtend",
                        "7fe82bbf832eeb83c928c80f338296b9fe195bc2"
                    ]
                },
                {
                    "command": [
                        "intro b.",
                        "VernacExtend",
                        "069cd7d34a03b833d46b6b4ca32ac31560c50264"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "destruct b, y; intros HR; easy || now symmetry in HR.",
                        "VernacExtend",
                        "92643c881d0acf95b518ebea1b468c023cf835d3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "excluded_middle_iff_representative_boolean_partition",
            "line_nb": 385,
            "steps": [
                {
                    "command": [
                        "split; auto using excluded_middle_imp_representative_boolean_partition, representative_boolean_partition_imp_excluded_middle.",
                        "VernacExtend",
                        "e9fa5cfb67e7f398f0ddb98e5a95283ab35006a8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}