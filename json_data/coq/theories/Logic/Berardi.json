{
    "filename": "theories/Logic/Berardi.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Section Berardis_paradox.",
            "VernacBeginSection",
            "00abee71cf3dea384edc386386ea3a7ec0b0fe5b"
        ],
        [
            "Hypothesis EM : forall P:Prop, P \\/ ~ P.",
            "VernacAssumption",
            "3e25886345d606ad14e40edceaedd83d6688faec"
        ],
        [
            "Definition IFProp (P B:Prop) (e1 e2:P) := match EM B with | or_introl _ => e1 | or_intror _ => e2 end.",
            "VernacDefinition",
            "b831954cd8c9f772306a677c64c2d15724778837"
        ],
        [
            "Lemma AC_IF : forall (P B:Prop) (e1 e2:P) (Q:P -> Prop), (B -> Q e1) -> (~ B -> Q e2) -> Q (IFProp B e1 e2).",
            "VernacStartTheoremProof",
            "757ded39737bf26b7d9b72c2d72d04b9013ba0b2"
        ],
        [
            "intros P B e1 e2 Q p1 p2.",
            "VernacExtend",
            "c65eab4b33a3bca279402cdeb319bdd11334f974"
        ],
        [
            "unfold IFProp.",
            "VernacExtend",
            "686ea4e4a2862c7188d0e8a5b80bd5be0b1ae336"
        ],
        [
            "case (EM B); assumption.",
            "VernacExtend",
            "f4148014d72b2354aeca7087ab179b602badc4b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable Bool : Prop.",
            "VernacAssumption",
            "2da66fa229061fea8cbe27a7e0d627a5fb93c76f"
        ],
        [
            "Variable T : Bool.",
            "VernacAssumption",
            "aa51b5da4775931bfdc0a26137444da0086711ef"
        ],
        [
            "Variable F : Bool.",
            "VernacAssumption",
            "f7f4e4237d2fd23d301dc41c5f417d5f180b347e"
        ],
        [
            "Definition pow (P:Prop) := P -> Bool.",
            "VernacDefinition",
            "e60df17381e6e878760983860cc508bb0e09119a"
        ],
        [
            "Section Retracts.",
            "VernacBeginSection",
            "e71a7f30a4a320919ccc2954e7a0dce26235d059"
        ],
        [
            "Variables A B : Prop.",
            "VernacAssumption",
            "c87baaa017bb2785f9f6e3a0a2d4350728510972"
        ],
        [
            "Record retract : Prop := {i : A -> B; j : B -> A; inv : forall a:A, j (i a) = a}.",
            "VernacInductive",
            "79a02d6ea89419ffeeeb41c73832dfb6b588e409"
        ],
        [
            "Record retract_cond : Prop := {i2 : A -> B; j2 : B -> A; inv2 : retract -> forall a:A, j2 (i2 a) = a}.",
            "VernacInductive",
            "7ddf4aeecb458c41e10e31ed75cb3deab53deee4"
        ],
        [
            "Lemma AC : forall r:retract_cond, retract -> forall a:A, r.(j2) (r.(i2) a) = a.",
            "VernacStartTheoremProof",
            "80e7ac1ce64b42bf919423dfc760292e33e73d7c"
        ],
        [
            "intros r.",
            "VernacExtend",
            "5819060771cad2a5b744225cdd7aa4cb65e09e7b"
        ],
        [
            "exact r.(inv2).",
            "VernacExtend",
            "eafdd63d5a4f6cdaa06e0e4ad7ecf74e84d73e51"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Retracts.",
            "VernacEndSegment",
            "746bc01d025eef21d8f803f6833087117cdfc4b5"
        ],
        [
            "Lemma L1 : forall A B:Prop, retract_cond (pow A) (pow B).",
            "VernacStartTheoremProof",
            "60a099bcb3fcc956fc87a6bb7d5e86fd8db90a97"
        ],
        [
            "intros A B.",
            "VernacExtend",
            "f0fdd14fe43c412ab9e9cf2b93b27330098322c4"
        ],
        [
            "destruct (EM (retract (pow A) (pow B))) as [(f0,g0,e) | hf].",
            "VernacExtend",
            "def797224d060bf2be3a1434f6179e812796d06d"
        ],
        [
            "exists f0 g0; trivial.",
            "VernacExtend",
            "a5d090e4c0bb6b2afdc0fc7d3ce7fb0518c45945"
        ],
        [
            "exists (fun (x:pow A) (y:B) => F) (fun (x:pow B) (y:A) => F); intros; destruct hf; auto.",
            "VernacExtend",
            "aace16b5fc4c5c851e0e834818cd0a470ab893b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition U := forall P:Prop, pow P.",
            "VernacDefinition",
            "e5125751d3bcaa114db484d5ede0294ebb99fc57"
        ],
        [
            "Definition f (u:U) : pow U := u U.",
            "VernacDefinition",
            "9fc928bf649e1b1d93dbf2570e9f83e907375111"
        ],
        [
            "Definition g (h:pow U) : U := fun X => let lX := j2 (L1 X U) in let rU := i2 (L1 U U) in lX (rU h).",
            "VernacDefinition",
            "b2a4667c1d85b1df880ceba33f10354e4737fc36"
        ],
        [
            "Lemma retract_pow_U_U : retract (pow U) U.",
            "VernacStartTheoremProof",
            "be06bf9f8b0ad66f7f9741d81c54c3566a9200dd"
        ],
        [
            "exists g f.",
            "VernacExtend",
            "56980c79a1fc18c5e639ed3d122bb581a875eb8e"
        ],
        [
            "intro a.",
            "VernacExtend",
            "14896994838b4c124c1f1123678e1f3468f5e2ea"
        ],
        [
            "unfold f, g; simpl.",
            "VernacExtend",
            "f6780e2a76b64c95661d9821653f68acd013e6fa"
        ],
        [
            "apply AC.",
            "VernacExtend",
            "9dc85fb038d856b26ff4410b400fd74ec15c1797"
        ],
        [
            "exists (fun x:pow U => x) (fun x:pow U => x).",
            "VernacExtend",
            "0195006793b8b44e61a0e61533981e382297624b"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Not_b (b:Bool) := IFProp (b = T) F T.",
            "VernacDefinition",
            "d4939a8169206f0c4b0a33433b623defe35281fd"
        ],
        [
            "Definition R : U := g (fun u:U => Not_b (u U u)).",
            "VernacDefinition",
            "b2985222a1d4fa01beda8bf24cb26cc50b2b1831"
        ],
        [
            "Lemma not_has_fixpoint : R R = Not_b (R R).",
            "VernacStartTheoremProof",
            "f7b3048ef6201ac3a66e8827ddea0dbf23774f8b"
        ],
        [
            "unfold R at 1.",
            "VernacExtend",
            "23b746c81c0655d983674ec21290cd9a0ef2632f"
        ],
        [
            "unfold g.",
            "VernacExtend",
            "fd78415b188602b878d030c2cbc915af33ab1e1d"
        ],
        [
            "rewrite AC.",
            "VernacExtend",
            "7f1dfefc4d22f571427f040f4795831a5e32c219"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "exists (fun x:pow U => x) (fun x:pow U => x).",
            "VernacExtend",
            "0195006793b8b44e61a0e61533981e382297624b"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem classical_proof_irrelevance : T = F.",
            "VernacStartTheoremProof",
            "6c1967767ab68731c0ef2ff9ddd564b3b5a2304d"
        ],
        [
            "generalize not_has_fixpoint.",
            "VernacExtend",
            "b4465094227c229799a47d6af68924b18b46ef66"
        ],
        [
            "unfold Not_b.",
            "VernacExtend",
            "0a766b8c0680bfadc430209a3d364a85664fb1be"
        ],
        [
            "apply AC_IF.",
            "VernacExtend",
            "b691255aed91dc6bc581d2430d3579748f77dac7"
        ],
        [
            "intros is_true is_false.",
            "VernacExtend",
            "18c45b0739990b1c683d54bd40d8fc7ab267c9e3"
        ],
        [
            "elim is_true; elim is_false; trivial.",
            "VernacExtend",
            "79ba5069e3fa2e4780424c18e8cf9dc7ae19ed19"
        ],
        [
            "intros not_true is_true.",
            "VernacExtend",
            "931a3d08cc7d3bf5df3524d41560303772d2a57c"
        ],
        [
            "elim not_true; trivial.",
            "VernacExtend",
            "3a7ec7b66c6a851bc7b2de2f0f468c077fbb80e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation classical_proof_irrelevence := classical_proof_irrelevance (compat \"8.8\").",
            "VernacSyntacticDefinition",
            "133516676f9a52bc72c50e0a5473286d117d7084"
        ],
        [
            "End Berardis_paradox.",
            "VernacEndSegment",
            "4faa5478b79b2fe217442941cc6c30dad74f4125"
        ]
    ],
    "proofs": [
        {
            "name": "AC_IF",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros P B e1 e2 Q p1 p2.",
                        "VernacExtend",
                        "c65eab4b33a3bca279402cdeb319bdd11334f974"
                    ]
                },
                {
                    "command": [
                        "unfold IFProp.",
                        "VernacExtend",
                        "686ea4e4a2862c7188d0e8a5b80bd5be0b1ae336"
                    ]
                },
                {
                    "command": [
                        "case (EM B); assumption.",
                        "VernacExtend",
                        "f4148014d72b2354aeca7087ab179b602badc4b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "AC",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros r.",
                        "VernacExtend",
                        "5819060771cad2a5b744225cdd7aa4cb65e09e7b"
                    ]
                },
                {
                    "command": [
                        "exact r.(inv2).",
                        "VernacExtend",
                        "eafdd63d5a4f6cdaa06e0e4ad7ecf74e84d73e51"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "L1",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros A B.",
                        "VernacExtend",
                        "f0fdd14fe43c412ab9e9cf2b93b27330098322c4"
                    ]
                },
                {
                    "command": [
                        "destruct (EM (retract (pow A) (pow B))) as [(f0,g0,e) | hf].",
                        "VernacExtend",
                        "def797224d060bf2be3a1434f6179e812796d06d"
                    ]
                },
                {
                    "command": [
                        "exists f0 g0; trivial.",
                        "VernacExtend",
                        "a5d090e4c0bb6b2afdc0fc7d3ce7fb0518c45945"
                    ]
                },
                {
                    "command": [
                        "exists (fun (x:pow A) (y:B) => F) (fun (x:pow B) (y:A) => F); intros; destruct hf; auto.",
                        "VernacExtend",
                        "aace16b5fc4c5c851e0e834818cd0a470ab893b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "retract_pow_U_U",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "exists g f.",
                        "VernacExtend",
                        "56980c79a1fc18c5e639ed3d122bb581a875eb8e"
                    ]
                },
                {
                    "command": [
                        "intro a.",
                        "VernacExtend",
                        "14896994838b4c124c1f1123678e1f3468f5e2ea"
                    ]
                },
                {
                    "command": [
                        "unfold f, g; simpl.",
                        "VernacExtend",
                        "f6780e2a76b64c95661d9821653f68acd013e6fa"
                    ]
                },
                {
                    "command": [
                        "apply AC.",
                        "VernacExtend",
                        "9dc85fb038d856b26ff4410b400fd74ec15c1797"
                    ]
                },
                {
                    "command": [
                        "exists (fun x:pow U => x) (fun x:pow U => x).",
                        "VernacExtend",
                        "0195006793b8b44e61a0e61533981e382297624b"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_has_fixpoint",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "unfold R at 1.",
                        "VernacExtend",
                        "23b746c81c0655d983674ec21290cd9a0ef2632f"
                    ]
                },
                {
                    "command": [
                        "unfold g.",
                        "VernacExtend",
                        "fd78415b188602b878d030c2cbc915af33ab1e1d"
                    ]
                },
                {
                    "command": [
                        "rewrite AC.",
                        "VernacExtend",
                        "7f1dfefc4d22f571427f040f4795831a5e32c219"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "exists (fun x:pow U => x) (fun x:pow U => x).",
                        "VernacExtend",
                        "0195006793b8b44e61a0e61533981e382297624b"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "classical_proof_irrelevance",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "generalize not_has_fixpoint.",
                        "VernacExtend",
                        "b4465094227c229799a47d6af68924b18b46ef66"
                    ]
                },
                {
                    "command": [
                        "unfold Not_b.",
                        "VernacExtend",
                        "0a766b8c0680bfadc430209a3d364a85664fb1be"
                    ]
                },
                {
                    "command": [
                        "apply AC_IF.",
                        "VernacExtend",
                        "b691255aed91dc6bc581d2430d3579748f77dac7"
                    ]
                },
                {
                    "command": [
                        "intros is_true is_false.",
                        "VernacExtend",
                        "18c45b0739990b1c683d54bd40d8fc7ab267c9e3"
                    ]
                },
                {
                    "command": [
                        "elim is_true; elim is_false; trivial.",
                        "VernacExtend",
                        "79ba5069e3fa2e4780424c18e8cf9dc7ae19ed19"
                    ]
                },
                {
                    "command": [
                        "intros not_true is_true.",
                        "VernacExtend",
                        "931a3d08cc7d3bf5df3524d41560303772d2a57c"
                    ]
                },
                {
                    "command": [
                        "elim not_true; trivial.",
                        "VernacExtend",
                        "3a7ec7b66c6a851bc7b2de2f0f468c077fbb80e7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}