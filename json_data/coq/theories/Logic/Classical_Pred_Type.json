{
    "filename": "theories/Logic/Classical_Pred_Type.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Classical_Prop.",
            "VernacRequire",
            "4ea5121b46cb94a964b9761d1c61cca4c510f8d4"
        ],
        [
            "Section Generic.",
            "VernacBeginSection",
            "73dbdef3b406b604704918cfc4ce587d0c37ccd2"
        ],
        [
            "Variable U : Type.",
            "VernacAssumption",
            "eb05258af3da16894daf420a97be779934a15d7e"
        ],
        [
            "Lemma not_all_not_ex : forall P:U -> Prop, ~ (forall n:U, ~ P n) -> exists n : U, P n.",
            "VernacStartTheoremProof",
            "658ffa2c58438460757f60ffb1b75ade4c18cb0a"
        ],
        [
            "intros P notall.",
            "VernacExtend",
            "e6421d4c36c93d8e9fd1d9360c29dce64a7ba539"
        ],
        [
            "apply NNPP.",
            "VernacExtend",
            "c972af1947412f7363e48b809906d3283d0fb638"
        ],
        [
            "intro abs.",
            "VernacExtend",
            "507faad5f60d8bacbff74bbb8b97320ddc30b274"
        ],
        [
            "apply notall.",
            "VernacExtend",
            "70e3e12d86d3470bb69ef07d1623b0f254bec9fb"
        ],
        [
            "intros n H.",
            "VernacExtend",
            "348ce37d2f619b733a523bd998a06fecedcf3fc4"
        ],
        [
            "apply abs; exists n; exact H.",
            "VernacExtend",
            "66ee433a80b4fe2bd2e563edfe18ac40e1560f5c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_all_ex_not : forall P:U -> Prop, ~ (forall n:U, P n) -> exists n : U, ~ P n.",
            "VernacStartTheoremProof",
            "549c056841419e116ec3b4759adfa7870fe3ef85"
        ],
        [
            "intros P notall.",
            "VernacExtend",
            "e6421d4c36c93d8e9fd1d9360c29dce64a7ba539"
        ],
        [
            "apply not_all_not_ex with (P:=fun x => ~ P x).",
            "VernacExtend",
            "cc92e9abe5fe214e0bf7fb098aad46a937ff67d5"
        ],
        [
            "intro all; apply notall.",
            "VernacExtend",
            "1c4e1854970c8bd189691c3ca06a3f378c7f7118"
        ],
        [
            "intro n; apply NNPP.",
            "VernacExtend",
            "e21dacf8d6a7619ed893eba5403cfd78bbe074e9"
        ],
        [
            "apply all.",
            "VernacExtend",
            "2f2a1f8cf083c051ebe9251d8ae949511544a7a9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_ex_all_not : forall P:U -> Prop, ~ (exists n : U, P n) -> forall n:U, ~ P n.",
            "VernacStartTheoremProof",
            "eccae517212e6d9e91c445194c702ab26abe1266"
        ],
        [
            "unfold not; intros P notex n abs.",
            "VernacExtend",
            "f78b99b2595378cc035d301333aa4ca267ef966c"
        ],
        [
            "apply notex.",
            "VernacExtend",
            "2f2bac2149f17bc54a912ce2bc85b2179a6103c5"
        ],
        [
            "exists n; trivial.",
            "VernacExtend",
            "9df9df2d5a5e6bb1c29175298d1652102eb7f8fd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_ex_not_all : forall P:U -> Prop, ~ (exists n : U, ~ P n) -> forall n:U, P n.",
            "VernacStartTheoremProof",
            "5767bc561f171f00ff37ce6e8c95c3b26a640771"
        ],
        [
            "intros P H n.",
            "VernacExtend",
            "f405440cc8d2612505cf8c1013f6e07255cac294"
        ],
        [
            "apply NNPP.",
            "VernacExtend",
            "c972af1947412f7363e48b809906d3283d0fb638"
        ],
        [
            "red; intro K; apply H; exists n; trivial.",
            "VernacExtend",
            "054e06a2549926b8600fef8902d9d85ab34a4fdc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ex_not_not_all : forall P:U -> Prop, (exists n : U, ~ P n) -> ~ (forall n:U, P n).",
            "VernacStartTheoremProof",
            "8a68b2c94489053deb3397cfdd98acb35bba5c6c"
        ],
        [
            "unfold not; intros P exnot allP.",
            "VernacExtend",
            "8466f5a6efb8abfc6dfd837f15edc79f87cd8090"
        ],
        [
            "elim exnot; auto.",
            "VernacExtend",
            "5de92b2d8aca191bccc5ebd9bf1c041521673b61"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma all_not_not_ex : forall P:U -> Prop, (forall n:U, ~ P n) -> ~ (exists n : U, P n).",
            "VernacStartTheoremProof",
            "4105f9c112d49d5f853729364a348940d4dab7fe"
        ],
        [
            "unfold not; intros P allnot exP; elim exP; intros n p.",
            "VernacExtend",
            "3c30d36dd415d2c6c6edcbd54ee771edec094ddd"
        ],
        [
            "apply allnot with n; auto.",
            "VernacExtend",
            "10679919a97998093735f93c1a885ba83c589901"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Generic.",
            "VernacEndSegment",
            "f8ae555c2c1febd3363f905591dd4b1f5c2646a9"
        ]
    ],
    "proofs": [
        {
            "name": "not_all_not_ex",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros P notall.",
                        "VernacExtend",
                        "e6421d4c36c93d8e9fd1d9360c29dce64a7ba539"
                    ]
                },
                {
                    "command": [
                        "apply NNPP.",
                        "VernacExtend",
                        "c972af1947412f7363e48b809906d3283d0fb638"
                    ]
                },
                {
                    "command": [
                        "intro abs.",
                        "VernacExtend",
                        "507faad5f60d8bacbff74bbb8b97320ddc30b274"
                    ]
                },
                {
                    "command": [
                        "apply notall.",
                        "VernacExtend",
                        "70e3e12d86d3470bb69ef07d1623b0f254bec9fb"
                    ]
                },
                {
                    "command": [
                        "intros n H.",
                        "VernacExtend",
                        "348ce37d2f619b733a523bd998a06fecedcf3fc4"
                    ]
                },
                {
                    "command": [
                        "apply abs; exists n; exact H.",
                        "VernacExtend",
                        "66ee433a80b4fe2bd2e563edfe18ac40e1560f5c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_all_ex_not",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros P notall.",
                        "VernacExtend",
                        "e6421d4c36c93d8e9fd1d9360c29dce64a7ba539"
                    ]
                },
                {
                    "command": [
                        "apply not_all_not_ex with (P:=fun x => ~ P x).",
                        "VernacExtend",
                        "cc92e9abe5fe214e0bf7fb098aad46a937ff67d5"
                    ]
                },
                {
                    "command": [
                        "intro all; apply notall.",
                        "VernacExtend",
                        "1c4e1854970c8bd189691c3ca06a3f378c7f7118"
                    ]
                },
                {
                    "command": [
                        "intro n; apply NNPP.",
                        "VernacExtend",
                        "e21dacf8d6a7619ed893eba5403cfd78bbe074e9"
                    ]
                },
                {
                    "command": [
                        "apply all.",
                        "VernacExtend",
                        "2f2a1f8cf083c051ebe9251d8ae949511544a7a9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_ex_all_not",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "unfold not; intros P notex n abs.",
                        "VernacExtend",
                        "f78b99b2595378cc035d301333aa4ca267ef966c"
                    ]
                },
                {
                    "command": [
                        "apply notex.",
                        "VernacExtend",
                        "2f2bac2149f17bc54a912ce2bc85b2179a6103c5"
                    ]
                },
                {
                    "command": [
                        "exists n; trivial.",
                        "VernacExtend",
                        "9df9df2d5a5e6bb1c29175298d1652102eb7f8fd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_ex_not_all",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros P H n.",
                        "VernacExtend",
                        "f405440cc8d2612505cf8c1013f6e07255cac294"
                    ]
                },
                {
                    "command": [
                        "apply NNPP.",
                        "VernacExtend",
                        "c972af1947412f7363e48b809906d3283d0fb638"
                    ]
                },
                {
                    "command": [
                        "red; intro K; apply H; exists n; trivial.",
                        "VernacExtend",
                        "054e06a2549926b8600fef8902d9d85ab34a4fdc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ex_not_not_all",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "unfold not; intros P exnot allP.",
                        "VernacExtend",
                        "8466f5a6efb8abfc6dfd837f15edc79f87cd8090"
                    ]
                },
                {
                    "command": [
                        "elim exnot; auto.",
                        "VernacExtend",
                        "5de92b2d8aca191bccc5ebd9bf1c041521673b61"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "all_not_not_ex",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "unfold not; intros P allnot exP; elim exP; intros n p.",
                        "VernacExtend",
                        "3c30d36dd415d2c6c6edcbd54ee771edec094ddd"
                    ]
                },
                {
                    "command": [
                        "apply allnot with n; auto.",
                        "VernacExtend",
                        "10679919a97998093735f93c1a885ba83c589901"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}