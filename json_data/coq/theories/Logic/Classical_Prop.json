{
    "filename": "theories/Logic/Classical_Prop.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import ClassicalFacts.",
            "VernacRequire",
            "88d465132f064f2c956186d6af199e741164b028"
        ],
        [
            "Hint Unfold not: core.",
            "VernacHints",
            "cb4cf010cae88f834a383f7dc9345c35d7c10346"
        ],
        [
            "Axiom classic : forall P:Prop, P \\/ ~ P.",
            "VernacAssumption",
            "df7fe76f3ad39b4a587e8e06e162a6c0030a1063"
        ],
        [
            "Lemma NNPP : forall p:Prop, ~ ~ p -> p.",
            "VernacStartTheoremProof",
            "3045530e955caff7b06a0d136a96d19e75ca1c17"
        ],
        [
            "unfold not; intros; elim (classic p); auto.",
            "VernacExtend",
            "82ddaf050f0fe73e56aeb09740c0d67d606c4133"
        ],
        [
            "intro NP; elim (H NP).",
            "VernacExtend",
            "d7ce02dea793a5d1fd579a40761a04b7e7f1f35e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Peirce : forall P:Prop, ((P -> False) -> P) -> P.",
            "VernacStartTheoremProof",
            "d7e6cb34b2bc871ccc369094e48055ab175bb33a"
        ],
        [
            "intros P H; destruct (classic P); auto.",
            "VernacExtend",
            "8e166f783325e431b6fb26c0a299c23e47dacf0c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_imply_elim : forall P Q:Prop, ~ (P -> Q) -> P.",
            "VernacStartTheoremProof",
            "d0f0f2d0eb665713326e7e8b47a0e164c7f09257"
        ],
        [
            "intros; apply NNPP; red.",
            "VernacExtend",
            "5fa09b4886678ed4b4ae65e2ccab963ec40e1598"
        ],
        [
            "intro; apply H; intro; absurd P; trivial.",
            "VernacExtend",
            "6b399e129dff2785076f2a60d1f0b880d1776013"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_imply_elim2 : forall P Q:Prop, ~ (P -> Q) -> ~ Q.",
            "VernacStartTheoremProof",
            "033989b8cfff2abb88915ad453031e827451f25e"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imply_to_or : forall P Q:Prop, (P -> Q) -> ~ P \\/ Q.",
            "VernacStartTheoremProof",
            "eb3233074894e0de7aa0efbc78aedf4ca5c71122"
        ],
        [
            "intros; elim (classic P); auto.",
            "VernacExtend",
            "3841761108886abc3a11aa90289524d2156c5cda"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imply_to_and : forall P Q:Prop, ~ (P -> Q) -> P /\\ ~ Q.",
            "VernacStartTheoremProof",
            "d766a9b32bffeae412039356ac33341b3820b8a6"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "apply not_imply_elim with Q; trivial.",
            "VernacExtend",
            "1f53b44ca1e5fd465ea2218945b870b9e4b495fa"
        ],
        [
            "apply not_imply_elim2 with P; trivial.",
            "VernacExtend",
            "beaf799e3def0039e8449f81da2c10247e334697"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma or_to_imply : forall P Q:Prop, ~ P \\/ Q -> P -> Q.",
            "VernacStartTheoremProof",
            "9ae92fd47cf079b172d5e0936d585fe22e025863"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_and_or : forall P Q:Prop, ~ (P /\\ Q) -> ~ P \\/ ~ Q.",
            "VernacStartTheoremProof",
            "db4d1e309b65dff7e0346e7b8177e660878b6c09"
        ],
        [
            "intros; elim (classic P); auto.",
            "VernacExtend",
            "3841761108886abc3a11aa90289524d2156c5cda"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma or_not_and : forall P Q:Prop, ~ P \\/ ~ Q -> ~ (P /\\ Q).",
            "VernacStartTheoremProof",
            "b7574510703e23840f0e74ac13a060b9832d5dc6"
        ],
        [
            "simple induction 1; red; simple induction 2; auto.",
            "VernacExtend",
            "64e47acade02e6096e70a6980d4fb7c4f51b4cce"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_or_and : forall P Q:Prop, ~ (P \\/ Q) -> ~ P /\\ ~ Q.",
            "VernacStartTheoremProof",
            "99177378b148cba7da974152bc5f27c9589e5de1"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma and_not_or : forall P Q:Prop, ~ P /\\ ~ Q -> ~ (P \\/ Q).",
            "VernacStartTheoremProof",
            "9e843758e0aa911f019e6ad51cabf25dba2dcda1"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imply_and_or : forall P Q:Prop, (P -> Q) -> P \\/ Q -> Q.",
            "VernacStartTheoremProof",
            "b69cab6752137653786cc634c296217418f8a304"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma imply_and_or2 : forall P Q R:Prop, (P -> Q) -> P \\/ R -> Q \\/ R.",
            "VernacStartTheoremProof",
            "1873540ad8ab60cf03715c9f703a0d98c00d89e4"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma proof_irrelevance : forall (P:Prop) (p1 p2:P), p1 = p2.",
            "VernacStartTheoremProof",
            "6345ca2c7516ff828e382bd20ad062821794e7e0"
        ],
        [
            "Proof proof_irrelevance_cci classic.",
            "VernacExactProof",
            "d4bf41606c76e0772dc57ff01672494f82b10447"
        ],
        [
            "Ltac classical_right := match goal with |- ?X \\/ _ => (elim (classic X);intro;[left;trivial|right]) end.",
            "VernacExtend",
            "49429e5884a2783f8746c3d4e75e6f6037a3529c"
        ],
        [
            "Ltac classical_left := match goal with |- _ \\/ ?X => (elim (classic X);intro;[right;trivial|left]) end.",
            "VernacExtend",
            "4f670d95c3507e687dbcad0119b36c3c6e9a9a56"
        ],
        [
            "Require Export EqdepFacts.",
            "VernacRequire",
            "3fe0e2f77b53a55fd304b18304c16426a6e26488"
        ],
        [
            "Module Eq_rect_eq.",
            "VernacDefineModule",
            "991de8331d5a4b9c62361a83b5aff0f2352bbc85"
        ],
        [
            "Lemma eq_rect_eq : forall (U:Type) (p:U) (Q:U -> Type) (x:Q p) (h:p = p), x = eq_rect p Q x p h.",
            "VernacStartTheoremProof",
            "6cdb07289bf22209c7cb682718b57a2867045119"
        ],
        [
            "intros; rewrite proof_irrelevance with (p1:=h) (p2:=eq_refl p); reflexivity.",
            "VernacExtend",
            "289b549e6eaad21aee3f22f913ade48d520358ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Eq_rect_eq.",
            "VernacEndSegment",
            "4998c43332fcd9da87afb681fb4c06c42b51a698"
        ],
        [
            "Module EqdepTheory := EqdepTheory(Eq_rect_eq).",
            "VernacDefineModule",
            "dbcd6d3b96f53c4d8e2208464f8ecec703ad1882"
        ],
        [
            "Export EqdepTheory.",
            "VernacImport",
            "fd2a20b0aae17f8f8dbfaf4324761005083bb13d"
        ]
    ],
    "proofs": [
        {
            "name": "NNPP",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "unfold not; intros; elim (classic p); auto.",
                        "VernacExtend",
                        "82ddaf050f0fe73e56aeb09740c0d67d606c4133"
                    ]
                },
                {
                    "command": [
                        "intro NP; elim (H NP).",
                        "VernacExtend",
                        "d7ce02dea793a5d1fd579a40761a04b7e7f1f35e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Peirce",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros P H; destruct (classic P); auto.",
                        "VernacExtend",
                        "8e166f783325e431b6fb26c0a299c23e47dacf0c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_imply_elim",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros; apply NNPP; red.",
                        "VernacExtend",
                        "5fa09b4886678ed4b4ae65e2ccab963ec40e1598"
                    ]
                },
                {
                    "command": [
                        "intro; apply H; intro; absurd P; trivial.",
                        "VernacExtend",
                        "6b399e129dff2785076f2a60d1f0b880d1776013"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_imply_elim2",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imply_to_or",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros; elim (classic P); auto.",
                        "VernacExtend",
                        "3841761108886abc3a11aa90289524d2156c5cda"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imply_to_and",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "apply not_imply_elim with Q; trivial.",
                        "VernacExtend",
                        "1f53b44ca1e5fd465ea2218945b870b9e4b495fa"
                    ]
                },
                {
                    "command": [
                        "apply not_imply_elim2 with P; trivial.",
                        "VernacExtend",
                        "beaf799e3def0039e8449f81da2c10247e334697"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "or_to_imply",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_and_or",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intros; elim (classic P); auto.",
                        "VernacExtend",
                        "3841761108886abc3a11aa90289524d2156c5cda"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "or_not_and",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "simple induction 1; red; simple induction 2; auto.",
                        "VernacExtend",
                        "64e47acade02e6096e70a6980d4fb7c4f51b4cce"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_or_and",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "and_not_or",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imply_and_or",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imply_and_or2",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_rect_eq",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "intros; rewrite proof_irrelevance with (p1:=h) (p2:=eq_refl p); reflexivity.",
                        "VernacExtend",
                        "289b549e6eaad21aee3f22f913ade48d520358ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}