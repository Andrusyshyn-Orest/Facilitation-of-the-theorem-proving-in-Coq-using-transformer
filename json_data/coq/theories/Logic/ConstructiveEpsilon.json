{
    "filename": "theories/Logic/ConstructiveEpsilon.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Section ConstructiveIndefiniteGroundDescription_Direct.",
            "VernacBeginSection",
            "f14d59b546834e843b3bf6b9e0937e3a3cbbd59f"
        ],
        [
            "Variable P : nat -> Prop.",
            "VernacAssumption",
            "c0bcdb477b6575fff01dd2a331b869e2340f5f2f"
        ],
        [
            "Hypothesis P_dec : forall n, {P n}+{~(P n)}.",
            "VernacAssumption",
            "ee6bece8f09db4374bd53be9b093f6c4f26aaaa6"
        ],
        [
            "Inductive before_witness (n:nat) : Prop := | stop : P n -> before_witness n | next : before_witness (S n) -> before_witness n.",
            "VernacInductive",
            "b4e2aa163293ecb10b9bc738bc8baa2b1033c509"
        ],
        [
            "Fixpoint O_witness (n : nat) : before_witness n -> before_witness 0 := match n return (before_witness n -> before_witness 0) with | 0 => fun b => b | S n => fun b => O_witness n (next n b) end.",
            "VernacFixpoint",
            "7b07bf4af603c2d0511778ff088c9b722c1164af"
        ],
        [
            "Definition inv_before_witness : forall n, before_witness n -> ~(P n) -> before_witness (S n) := fun n b => match b return ~ P n -> before_witness (S n) with | stop _ p => fun not_p => match (not_p p) with end | next _ b => fun _ => b end.",
            "VernacDefinition",
            "2139cdcdd9eed51123b7d157a878a287a5c7f61a"
        ],
        [
            "Fixpoint linear_search m (b : before_witness m) : {n : nat | P n} := match P_dec m with | left yes => exist (fun n => P n) m yes | right no => linear_search (S m) (inv_before_witness m b no) end.",
            "VernacFixpoint",
            "c4fb5c461c96a6f2c073f0c41bdbd71700ab31ab"
        ],
        [
            "Definition constructive_indefinite_ground_description_nat : (exists n, P n) -> {n:nat | P n} := fun e => linear_search O (let (n, p) := e in O_witness n (stop n p)).",
            "VernacDefinition",
            "9fe5e0b0c80e258b0479953ad2f2a78e1e54e1ba"
        ],
        [
            "End ConstructiveIndefiniteGroundDescription_Direct.",
            "VernacEndSegment",
            "ca1d22bed725b2a674104cece402b42f39454ffc"
        ],
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Section ConstructiveIndefiniteGroundDescription_Acc.",
            "VernacBeginSection",
            "ae93a2c75c3c72124089651b231876dac3c96e4e"
        ],
        [
            "Variable P : nat -> Prop.",
            "VernacAssumption",
            "c0bcdb477b6575fff01dd2a331b869e2340f5f2f"
        ],
        [
            "Hypothesis P_decidable : forall n : nat, {P n} + {~ P n}.",
            "VernacAssumption",
            "01778a3b400dd3d7f50e033520afb30bc5521a33"
        ],
        [
            "Let R (x y : nat) : Prop := x = S y /\\ ~ P y.",
            "VernacDefinition",
            "af6127eda07826b1d00cef9acbbb0a1d1c8a0366"
        ],
        [
            "Local Notation acc x := (Acc R x).",
            "VernacSyntacticDefinition",
            "40a8ae312f7c9be5a1b3b9cc13d1687ce3809e99"
        ],
        [
            "Lemma P_implies_acc : forall x : nat, P x -> acc x.",
            "VernacStartTheoremProof",
            "7d7554ead97e8ef88ef2ea138df8990ad81d2379"
        ],
        [
            "intros x H.",
            "VernacExtend",
            "a0cd74b85812810ce5a78a540bad98f664bd4842"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "intros y [_ not_Px].",
            "VernacExtend",
            "e18ac9f16f638c980abd35d74acf381d55adae6b"
        ],
        [
            "absurd (P x); assumption.",
            "VernacExtend",
            "6171de35adde6c14c2e59ef0fd4dd6b8e410702a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma P_eventually_implies_acc : forall (x : nat) (n : nat), P (n + x) -> acc x.",
            "VernacStartTheoremProof",
            "eb83fcb9c2a01e7f2843c9a0125db7c21d3d8c5e"
        ],
        [
            "intros x n; generalize x; clear x; induction n as [|n IH]; simpl.",
            "VernacExtend",
            "72394e045145eae3199c349d7537b908eec53672"
        ],
        [
            "apply P_implies_acc.",
            "VernacExtend",
            "a32782fba63212e63c145db1bad642b5bc239033"
        ],
        [
            "intros x H.",
            "VernacExtend",
            "a0cd74b85812810ce5a78a540bad98f664bd4842"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "intros y [fxy _].",
            "VernacExtend",
            "cb1c3ca098bda6eb370863663b42b229c276a980"
        ],
        [
            "apply IH.",
            "VernacExtend",
            "88103d45393d3ee3ab547447d913543854db8cea"
        ],
        [
            "rewrite fxy.",
            "VernacExtend",
            "88df4b0e4775cf51c7ca84eda21c6458d7051b7f"
        ],
        [
            "replace (n + S x) with (S (n + x)); auto with arith.",
            "VernacExtend",
            "b4a584e594126b52ecd1db0f354105d0356c59a3"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Corollary P_eventually_implies_acc_ex : (exists n : nat, P n) -> acc 0.",
            "VernacStartTheoremProof",
            "5ebfa46eb4cfbb3a3182ab04b1635897bd1dab10"
        ],
        [
            "intros H; elim H.",
            "VernacExtend",
            "c422fffbd8d09eb95223611bdd2c40108abb4884"
        ],
        [
            "intros x Px.",
            "VernacExtend",
            "dce43951acf95e3bdf21f35d66e96c306e50a7ef"
        ],
        [
            "apply P_eventually_implies_acc with (n := x).",
            "VernacExtend",
            "7dbf1b17529c3a01b6d92f6276f2e65b3a37ab7a"
        ],
        [
            "replace (x + 0) with x; auto with arith.",
            "VernacExtend",
            "a3130116a36dcaba901efc06614007ed29478dda"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Theorem acc_implies_P_eventually : acc 0 -> {n : nat | P n}.",
            "VernacStartTheoremProof",
            "ba380c622288b7260557d0fe19aa7806f62c95e2"
        ],
        [
            "intros Acc_0.",
            "VernacExtend",
            "8c2224dc0b6e44f37db114c0e62421b6c7e2f204"
        ],
        [
            "pattern 0.",
            "VernacExtend",
            "44ccdf932525bc24041e7201dc0d288c6200ce7b"
        ],
        [
            "apply Fix_F with (R := R); [| assumption].",
            "VernacExtend",
            "fb9b34ef27b4019296bf1df934989a426a8ae9ea"
        ],
        [
            "clear Acc_0; intros x IH.",
            "VernacExtend",
            "12636622d1e94532b0209f9a19a573e76130ee7b"
        ],
        [
            "destruct (P_decidable x) as [Px | not_Px].",
            "VernacExtend",
            "f23de8a9707c77178da18e819696c3061b06055a"
        ],
        [
            "exists x; simpl; assumption.",
            "VernacExtend",
            "c7e021c06efcb3bc33aad4bc236ec84645e67040"
        ],
        [
            "set (y := S x).",
            "VernacExtend",
            "8fb791c934a84c5d2d4502f50701f015641f7d0d"
        ],
        [
            "assert (Ryx : R y x).",
            "VernacExtend",
            "60a8bbc8da0a06104ae06ab91d2faaa295304216"
        ],
        [
            "unfold R; split; auto.",
            "VernacExtend",
            "aa0b83dda56fa161cdd6d051a2707c89ebe9ca2e"
        ],
        [
            "destruct (IH y Ryx) as [n Hn].",
            "VernacExtend",
            "f010e7b7e5f7041c320188671a9e8eeeccfda298"
        ],
        [
            "exists n; assumption.",
            "VernacExtend",
            "f203607832b72a8b4d4308fa94abe89f3661c746"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Theorem constructive_indefinite_ground_description_nat_Acc : (exists n : nat, P n) -> {n : nat | P n}.",
            "VernacStartTheoremProof",
            "e86b70ad0fcae6adef658beeae163111acb4f892"
        ],
        [
            "intros H; apply acc_implies_P_eventually.",
            "VernacExtend",
            "235c164884b583031710e5bb5fa9ea65b3760e9a"
        ],
        [
            "apply P_eventually_implies_acc_ex; assumption.",
            "VernacExtend",
            "1d3daedbb10f65881ce113ced2303de00e93fdce"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "End ConstructiveIndefiniteGroundDescription_Acc.",
            "VernacEndSegment",
            "429405b4b574452a9a6806a1a37795bb1581da95"
        ],
        [
            "Section ConstructiveGroundEpsilon_nat.",
            "VernacBeginSection",
            "9777ff806cbea1108035cb7effd6dccae6ab2729"
        ],
        [
            "Variable P : nat -> Prop.",
            "VernacAssumption",
            "c0bcdb477b6575fff01dd2a331b869e2340f5f2f"
        ],
        [
            "Hypothesis P_decidable : forall x : nat, {P x} + {~ P x}.",
            "VernacAssumption",
            "32327a86459a8fa57f376f088a2b56eae130705e"
        ],
        [
            "Definition constructive_ground_epsilon_nat (E : exists n : nat, P n) : nat := proj1_sig (constructive_indefinite_ground_description_nat P P_decidable E).",
            "VernacDefinition",
            "d814ec34ea73ce210e431eb000c135cde2c8dbd7"
        ],
        [
            "Definition constructive_ground_epsilon_spec_nat (E : (exists n, P n)) : P (constructive_ground_epsilon_nat E) := proj2_sig (constructive_indefinite_ground_description_nat P P_decidable E).",
            "VernacDefinition",
            "0caa3b46bd2d29c3f1e931abaa0c134c028b8948"
        ],
        [
            "End ConstructiveGroundEpsilon_nat.",
            "VernacEndSegment",
            "ae049ee25d8108f416627706ccf5a795ec27a82b"
        ],
        [
            "Section ConstructiveGroundEpsilon.",
            "VernacBeginSection",
            "c2bd407a287d17482983327e12d3b666103e0dea"
        ],
        [
            "Variable A : Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable f : A -> nat.",
            "VernacAssumption",
            "9f23c668cb9b44da0a7007cf5e6e948fbeb3f99a"
        ],
        [
            "Variable g : nat -> A.",
            "VernacAssumption",
            "741f31fcad05adbee8001669d38d170e4a96cb50"
        ],
        [
            "Hypothesis gof_eq_id : forall x : A, g (f x) = x.",
            "VernacAssumption",
            "a9cc0f3bd35407fd32a27dbcb2bf3d8ac8df19e8"
        ],
        [
            "Variable P : A -> Prop.",
            "VernacAssumption",
            "c4c1d04be97fb87f7ef5221a5c608ce908b2cefd"
        ],
        [
            "Hypothesis P_decidable : forall x : A, {P x} + {~ P x}.",
            "VernacAssumption",
            "81de94f3f6a0b736265b75de5c2827819d289a8c"
        ],
        [
            "Definition P' (x : nat) : Prop := P (g x).",
            "VernacDefinition",
            "9daa453fb8a5227f09004cd26217f07465e8bc9e"
        ],
        [
            "Lemma P'_decidable : forall n : nat, {P' n} + {~ P' n}.",
            "VernacStartTheoremProof",
            "0b6ca04676c9f72430bee8367815056dfbb516cb"
        ],
        [
            "intro n; unfold P'; destruct (P_decidable (g n)); auto.",
            "VernacExtend",
            "41372537069d01e8ee89c5d2659317ee2c96a485"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma constructive_indefinite_ground_description : (exists x : A, P x) -> {x : A | P x}.",
            "VernacStartTheoremProof",
            "ed9729788e14335049625aa939f11180a2ae1725"
        ],
        [
            "intro H.",
            "VernacExtend",
            "a9535760040671e8853f25f0b4e9eda38ca392a6"
        ],
        [
            "assert (H1 : exists n : nat, P' n).",
            "VernacExtend",
            "46a0777b3260efbb21c8caf6cf3c0c20bf4a081d"
        ],
        [
            "destruct H as [x Hx].",
            "VernacExtend",
            "fd50916aeb05bc3f9485d3c0c6522bf88e6fa544"
        ],
        [
            "exists (f x); unfold P'.",
            "VernacExtend",
            "cab3d25b6c1f5eda16223ef4d2f01af322c48aaf"
        ],
        [
            "rewrite gof_eq_id; assumption.",
            "VernacExtend",
            "340840983a0def7a226b2a5ae385f7add71bb4b8"
        ],
        [
            "apply (constructive_indefinite_ground_description_nat P' P'_decidable) in H1.",
            "VernacExtend",
            "1911f2057c4df22af05cea08aba05f516c2f389a"
        ],
        [
            "destruct H1 as [n Hn].",
            "VernacExtend",
            "23e33f8b286240b2823191b9d4ebd7e912b7f448"
        ],
        [
            "exists (g n); unfold P' in Hn; assumption.",
            "VernacExtend",
            "c5f732ed070dbb5e7e35597715829c69b871a86e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma constructive_definite_ground_description : (exists! x : A, P x) -> {x : A | P x}.",
            "VernacStartTheoremProof",
            "ce797fb134e4b0400a0cb2f1161d37157da41977"
        ],
        [
            "intros; apply constructive_indefinite_ground_description; firstorder.",
            "VernacExtend",
            "1fba132f615c16b22316568f668f791dbc77486a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition constructive_ground_epsilon (E : exists x : A, P x) : A := proj1_sig (constructive_indefinite_ground_description E).",
            "VernacDefinition",
            "c710b424b9a27694a8122af7da0f5f407cd46d7a"
        ],
        [
            "Definition constructive_ground_epsilon_spec (E : (exists x, P x)) : P (constructive_ground_epsilon E) := proj2_sig (constructive_indefinite_ground_description E).",
            "VernacDefinition",
            "1314d7e58b967c1253eca5166dd47cdac4be74f7"
        ],
        [
            "End ConstructiveGroundEpsilon.",
            "VernacEndSegment",
            "6a9d334f7162cdccb7cd8b9c59bf83502bd513db"
        ],
        [
            "Notation constructive_indefinite_description_nat := constructive_indefinite_ground_description_nat (only parsing).",
            "VernacSyntacticDefinition",
            "0096ee66e31c96b6c6ae5718a80142c5587aa196"
        ],
        [
            "Notation constructive_epsilon_spec_nat := constructive_ground_epsilon_spec_nat (only parsing).",
            "VernacSyntacticDefinition",
            "4fd132754522b086a97b36d43d00617a1e1abd34"
        ],
        [
            "Notation constructive_epsilon_nat := constructive_ground_epsilon_nat (only parsing).",
            "VernacSyntacticDefinition",
            "09ec3c454544526efee78a182c8f1530c9633c7a"
        ],
        [
            "Notation constructive_indefinite_description := constructive_indefinite_ground_description (only parsing).",
            "VernacSyntacticDefinition",
            "8575df4d0f41865c31fce22c0d039d928a9e83e7"
        ],
        [
            "Notation constructive_definite_description := constructive_definite_ground_description (only parsing).",
            "VernacSyntacticDefinition",
            "907fd93f17ca9b0810b3746af4d93f1ac2c464a1"
        ],
        [
            "Notation constructive_epsilon_spec := constructive_ground_epsilon_spec (only parsing).",
            "VernacSyntacticDefinition",
            "63f62bd1476fdc4dcde24dd4e6973b783896ce79"
        ],
        [
            "Notation constructive_epsilon := constructive_ground_epsilon (only parsing).",
            "VernacSyntacticDefinition",
            "7475c92a92ae0f8cadc340ece4dc3bc68b091800"
        ]
    ],
    "proofs": [
        {
            "name": "P_implies_acc",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "intros x H.",
                        "VernacExtend",
                        "a0cd74b85812810ce5a78a540bad98f664bd4842"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "intros y [_ not_Px].",
                        "VernacExtend",
                        "e18ac9f16f638c980abd35d74acf381d55adae6b"
                    ]
                },
                {
                    "command": [
                        "absurd (P x); assumption.",
                        "VernacExtend",
                        "6171de35adde6c14c2e59ef0fd4dd6b8e410702a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "P_eventually_implies_acc",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros x n; generalize x; clear x; induction n as [|n IH]; simpl.",
                        "VernacExtend",
                        "72394e045145eae3199c349d7537b908eec53672"
                    ]
                },
                {
                    "command": [
                        "apply P_implies_acc.",
                        "VernacExtend",
                        "a32782fba63212e63c145db1bad642b5bc239033"
                    ]
                },
                {
                    "command": [
                        "intros x H.",
                        "VernacExtend",
                        "a0cd74b85812810ce5a78a540bad98f664bd4842"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "intros y [fxy _].",
                        "VernacExtend",
                        "cb1c3ca098bda6eb370863663b42b229c276a980"
                    ]
                },
                {
                    "command": [
                        "apply IH.",
                        "VernacExtend",
                        "88103d45393d3ee3ab547447d913543854db8cea"
                    ]
                },
                {
                    "command": [
                        "rewrite fxy.",
                        "VernacExtend",
                        "88df4b0e4775cf51c7ca84eda21c6458d7051b7f"
                    ]
                },
                {
                    "command": [
                        "replace (n + S x) with (S (n + x)); auto with arith.",
                        "VernacExtend",
                        "b4a584e594126b52ecd1db0f354105d0356c59a3"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "P_eventually_implies_acc_ex",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "intros H; elim H.",
                        "VernacExtend",
                        "c422fffbd8d09eb95223611bdd2c40108abb4884"
                    ]
                },
                {
                    "command": [
                        "intros x Px.",
                        "VernacExtend",
                        "dce43951acf95e3bdf21f35d66e96c306e50a7ef"
                    ]
                },
                {
                    "command": [
                        "apply P_eventually_implies_acc with (n := x).",
                        "VernacExtend",
                        "7dbf1b17529c3a01b6d92f6276f2e65b3a37ab7a"
                    ]
                },
                {
                    "command": [
                        "replace (x + 0) with x; auto with arith.",
                        "VernacExtend",
                        "a3130116a36dcaba901efc06614007ed29478dda"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "acc_implies_P_eventually",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "intros Acc_0.",
                        "VernacExtend",
                        "8c2224dc0b6e44f37db114c0e62421b6c7e2f204"
                    ]
                },
                {
                    "command": [
                        "pattern 0.",
                        "VernacExtend",
                        "44ccdf932525bc24041e7201dc0d288c6200ce7b"
                    ]
                },
                {
                    "command": [
                        "apply Fix_F with (R := R); [| assumption].",
                        "VernacExtend",
                        "fb9b34ef27b4019296bf1df934989a426a8ae9ea"
                    ]
                },
                {
                    "command": [
                        "clear Acc_0; intros x IH.",
                        "VernacExtend",
                        "12636622d1e94532b0209f9a19a573e76130ee7b"
                    ]
                },
                {
                    "command": [
                        "destruct (P_decidable x) as [Px | not_Px].",
                        "VernacExtend",
                        "f23de8a9707c77178da18e819696c3061b06055a"
                    ]
                },
                {
                    "command": [
                        "exists x; simpl; assumption.",
                        "VernacExtend",
                        "c7e021c06efcb3bc33aad4bc236ec84645e67040"
                    ]
                },
                {
                    "command": [
                        "set (y := S x).",
                        "VernacExtend",
                        "8fb791c934a84c5d2d4502f50701f015641f7d0d"
                    ]
                },
                {
                    "command": [
                        "assert (Ryx : R y x).",
                        "VernacExtend",
                        "60a8bbc8da0a06104ae06ab91d2faaa295304216"
                    ]
                },
                {
                    "command": [
                        "unfold R; split; auto.",
                        "VernacExtend",
                        "aa0b83dda56fa161cdd6d051a2707c89ebe9ca2e"
                    ]
                },
                {
                    "command": [
                        "destruct (IH y Ryx) as [n Hn].",
                        "VernacExtend",
                        "f010e7b7e5f7041c320188671a9e8eeeccfda298"
                    ]
                },
                {
                    "command": [
                        "exists n; assumption.",
                        "VernacExtend",
                        "f203607832b72a8b4d4308fa94abe89f3661c746"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "constructive_indefinite_ground_description_nat_Acc",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "intros H; apply acc_implies_P_eventually.",
                        "VernacExtend",
                        "235c164884b583031710e5bb5fa9ea65b3760e9a"
                    ]
                },
                {
                    "command": [
                        "apply P_eventually_implies_acc_ex; assumption.",
                        "VernacExtend",
                        "1d3daedbb10f65881ce113ced2303de00e93fdce"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "P'_decidable",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intro n; unfold P'; destruct (P_decidable (g n)); auto.",
                        "VernacExtend",
                        "41372537069d01e8ee89c5d2659317ee2c96a485"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "constructive_indefinite_ground_description",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intro H.",
                        "VernacExtend",
                        "a9535760040671e8853f25f0b4e9eda38ca392a6"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : exists n : nat, P' n).",
                        "VernacExtend",
                        "46a0777b3260efbb21c8caf6cf3c0c20bf4a081d"
                    ]
                },
                {
                    "command": [
                        "destruct H as [x Hx].",
                        "VernacExtend",
                        "fd50916aeb05bc3f9485d3c0c6522bf88e6fa544"
                    ]
                },
                {
                    "command": [
                        "exists (f x); unfold P'.",
                        "VernacExtend",
                        "cab3d25b6c1f5eda16223ef4d2f01af322c48aaf"
                    ]
                },
                {
                    "command": [
                        "rewrite gof_eq_id; assumption.",
                        "VernacExtend",
                        "340840983a0def7a226b2a5ae385f7add71bb4b8"
                    ]
                },
                {
                    "command": [
                        "apply (constructive_indefinite_ground_description_nat P' P'_decidable) in H1.",
                        "VernacExtend",
                        "1911f2057c4df22af05cea08aba05f516c2f389a"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [n Hn].",
                        "VernacExtend",
                        "23e33f8b286240b2823191b9d4ebd7e912b7f448"
                    ]
                },
                {
                    "command": [
                        "exists (g n); unfold P' in Hn; assumption.",
                        "VernacExtend",
                        "c5f732ed070dbb5e7e35597715829c69b871a86e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "constructive_definite_ground_description",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "intros; apply constructive_indefinite_ground_description; firstorder.",
                        "VernacExtend",
                        "1fba132f615c16b22316568f668f791dbc77486a"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}