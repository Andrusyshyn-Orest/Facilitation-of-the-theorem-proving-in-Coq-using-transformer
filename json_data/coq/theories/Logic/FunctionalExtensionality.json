{
    "filename": "theories/Logic/FunctionalExtensionality.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Lemma equal_f : forall {A B : Type} {f g : A -> B}, f = g -> forall x, f x = g x.",
            "VernacStartTheoremProof",
            "5261866c4ef26f5ed6ba13f77e3628eb68d6a51c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_f_dep : forall {A B} {f g : forall (x : A), B x}, f = g -> forall x, f x = g x.",
            "VernacStartTheoremProof",
            "26df3c83a76c961b902ab70faa6bbb9d71d1f95b"
        ],
        [
            "intros A B f g <- H; reflexivity.",
            "VernacExtend",
            "9d497071b0bdf6d7fefbc0fd0a3056d982777369"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Axiom functional_extensionality_dep : forall {A} {B : A -> Type}, forall (f g : forall x : A, B x), (forall x, f x = g x) -> f = g.",
            "VernacAssumption",
            "ca7594c51edfe5c2fc2d97c95e02c09c004ece1a"
        ],
        [
            "Lemma functional_extensionality {A B} (f g : A -> B) : (forall x, f x = g x) -> f = g.",
            "VernacStartTheoremProof",
            "7dfb0b7ada5183f36dcfc8ac5f76fbd181f9960f"
        ],
        [
            "intros ; eauto using @functional_extensionality_dep.",
            "VernacExtend",
            "7dc0c504b3da4eb20dfe0efedbdffa47d78bba94"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma forall_extensionality {A} {B C : A -> Type} (H : forall x : A, B x = C x) : (forall x, B x) = (forall x, C x).",
            "VernacStartTheoremProof",
            "97af70717e49329a7ec080676a11fda58c8a422c"
        ],
        [
            "apply functional_extensionality in H.",
            "VernacExtend",
            "d2aaed0de3e075c5aa2070bf42141d94a4955f26"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma forall_extensionalityP {A} {B C : A -> Prop} (H : forall x : A, B x = C x) : (forall x, B x) = (forall x, C x).",
            "VernacStartTheoremProof",
            "e864689782494fbf1c0a69324cce78f6fb749513"
        ],
        [
            "apply functional_extensionality in H.",
            "VernacExtend",
            "d2aaed0de3e075c5aa2070bf42141d94a4955f26"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma forall_extensionalityS {A} {B C : A -> Set} (H : forall x : A, B x = C x) : (forall x, B x) = (forall x, C x).",
            "VernacStartTheoremProof",
            "7d7606be281afa6b8a6fc30529e3492896e9a397"
        ],
        [
            "apply functional_extensionality in H.",
            "VernacExtend",
            "d2aaed0de3e075c5aa2070bf42141d94a4955f26"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition functional_extensionality_dep_good {A} {B : A -> Type} (f g : forall x : A, B x) (H : forall x, f x = g x) : f = g := eq_trans (eq_sym (functional_extensionality_dep f f (fun _ => eq_refl))) (functional_extensionality_dep f g H).",
            "VernacDefinition",
            "0160acbce781d9a759f6e76bad5c769b9c43b5a9"
        ],
        [
            "Lemma functional_extensionality_dep_good_refl {A B} f : @functional_extensionality_dep_good A B f f (fun _ => eq_refl) = eq_refl.",
            "VernacStartTheoremProof",
            "627077b70e5b0d5d82acdff99e20865787cfd17e"
        ],
        [
            "unfold functional_extensionality_dep_good; edestruct functional_extensionality_dep; reflexivity.",
            "VernacExtend",
            "457a72ed1a79be8958a6ebd9f3fdf229eee8711e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Opaque functional_extensionality_dep_good.",
            "VernacSetOpacity",
            "123ae7f77213df9ff2fefccd31c7b1e44de0ca70"
        ],
        [
            "Lemma forall_sig_eq_rect {A B} (f : forall a : A, B a) (P : { g : _ | (forall a, f a = g a) } -> Type) (k : P (exist (fun g => forall a, f a = g a) f (fun a => eq_refl))) g : P g.",
            "VernacStartTheoremProof",
            "e06c134c5c21a1c363e39d1f505b01a63a3dde5c"
        ],
        [
            "destruct g as [g1 g2].",
            "VernacExtend",
            "86e8ec4309a7e52f6998626c71db82b5d3ff753c"
        ],
        [
            "set (g' := fun x => (exist _ (g1 x) (g2 x))).",
            "VernacExtend",
            "69c91bb4a09676e25c1d79b9cf730650b11aeaaf"
        ],
        [
            "change g2 with (fun x => proj2_sig (g' x)).",
            "VernacExtend",
            "aabc797e533d992dacd8b1dcc16480847cc2d554"
        ],
        [
            "change g1 with (fun x => proj1_sig (g' x)).",
            "VernacExtend",
            "4e6b6e26dac956263c7695d3f1b1c442b955ba1f"
        ],
        [
            "clearbody g'; clear g1 g2.",
            "VernacExtend",
            "e259945184c8515f7fa6db61d0bd80ce3f3d4545"
        ],
        [
            "cut (forall x, (exist _ (f x) eq_refl) = g' x).",
            "VernacExtend",
            "69de85259d4e046d3eed07892c54b810868186a6"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro H'.",
            "VernacExtend",
            "3160ba192fa58e5db60b3e67645ce925759bb788"
        ],
        [
            "apply functional_extensionality_dep_good in H'.",
            "VernacExtend",
            "30797582fe9ef9dd1aa5c8b950223ef5e1cfbaf5"
        ],
        [
            "destruct H'.",
            "VernacExtend",
            "6b415f99235d5d47642f9e2340679885dc667286"
        ],
        [
            "exact k.",
            "VernacExtend",
            "4d8a81ef11a6a187027958849d3f6ff8f176319d"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intro x.",
            "VernacExtend",
            "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
        ],
        [
            "destruct (g' x) as [g'x1 g'x2].",
            "VernacExtend",
            "79f60fe53d28a3cb76fc066219c4901e6af2ad83"
        ],
        [
            "destruct g'x2.",
            "VernacExtend",
            "380a5a1d8dbb1e6019497eed1d3763fb57f2d79a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition forall_eq_rect {A B} (f : forall a : A, B a) (P : forall g, (forall a, f a = g a) -> Type) (k : P f (fun a => eq_refl)) g H : P g H := @forall_sig_eq_rect A B f (fun g => P (proj1_sig g) (proj2_sig g)) k (exist _ g H).",
            "VernacDefinition",
            "25359042856403f2e93dfc20f61d2a124343bbce"
        ],
        [
            "Definition forall_eq_rect_comp {A B} f P k : @forall_eq_rect A B f P k f (fun _ => eq_refl) = k.",
            "VernacDefinition",
            "f3eb5cbe3c365d230cd5e93e109c16b433d43424"
        ],
        [
            "unfold forall_eq_rect, forall_sig_eq_rect; simpl.",
            "VernacExtend",
            "0bd7d0160441d7eb266889fa3d4c2465a200dca5"
        ],
        [
            "rewrite functional_extensionality_dep_good_refl; reflexivity.",
            "VernacExtend",
            "26978a8d7b4caef05128f41c6b35238d21a1275d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition f_equal__functional_extensionality_dep_good {A B f g} H a : f_equal (fun h => h a) (@functional_extensionality_dep_good A B f g H) = H a.",
            "VernacDefinition",
            "b9e326858c24e11dab128593709dfb124dae0371"
        ],
        [
            "apply forall_eq_rect with (H := H); clear H g.",
            "VernacExtend",
            "9b1da76d29657b2f321030b10d818a31f33e09ef"
        ],
        [
            "change (eq_refl (f a)) with (f_equal (fun h => h a) (eq_refl f)).",
            "VernacExtend",
            "8cb8999b6790acf22d3ab4308913aaa314fb1066"
        ],
        [
            "apply f_equal, functional_extensionality_dep_good_refl.",
            "VernacExtend",
            "9b048a2a4015f7357f3bb58329d89263bcfc116e"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition f_equal__functional_extensionality_dep_good__fun {A B f g} H : (fun a => f_equal (fun h => h a) (@functional_extensionality_dep_good A B f g H)) = H.",
            "VernacDefinition",
            "8c4acb290fe5804f3529f09d5ce5059f21129d14"
        ],
        [
            "apply functional_extensionality_dep_good; intro a; apply f_equal__functional_extensionality_dep_good.",
            "VernacExtend",
            "224032ae0d7671e37f7539c47cf69fd3099321fa"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Tactic Notation \"extensionality\" ident(x) := match goal with [ |- ?X = ?Y ] => (apply (@functional_extensionality _ _ X Y) || apply (@functional_extensionality_dep _ _ X Y) || apply forall_extensionalityP || apply forall_extensionalityS || apply forall_extensionality) ; intro x end.",
            "VernacExtend",
            "91d89d35d12f4758a1d655aedbb5dc282d004668"
        ],
        [
            "Ltac extensionality_in_checker tac := first [ tac tt | fail 1 \"Anomaly: Unexpected error in extensionality tactic. Please report.\" ].",
            "VernacExtend",
            "271d10958e702434f063ef95c80590feeb2c4f79"
        ],
        [
            "Tactic Notation \"extensionality\" \"in\" hyp(H) := let rec check_is_extensional_equality H := lazymatch type of H with | _ = _ => constr:(Prop) | forall a : ?A, ?T => let Ha := fresh in constr:(forall a : A, match H a with Ha => ltac:(let v := check_is_extensional_equality Ha in exact v) end) end in let assert_is_extensional_equality H := first [ let dummy := check_is_extensional_equality H in idtac | fail 1 \"Not an extensional equality\" ] in let assert_not_intensional_equality H := lazymatch type of H with | _ = _ => fail \"Already an intensional equality\" | _ => idtac end in let enforce_no_body H := (tryif (let dummy := (eval unfold H in H) in idtac) then clearbody H else idtac) in let rec extensionality_step_make_type H := lazymatch type of H with | forall a : ?A, ?f = ?g => constr:({ H' | (fun a => f_equal (fun h => h a) H') = H }) | forall a : ?A, _ => let H' := fresh in constr:(forall a : A, match H a with H' => ltac:(let ret := extensionality_step_make_type H' in exact ret) end) end in let rec eta_contract T := lazymatch (eval cbv beta in T) with | context T'[fun a : ?A => ?f a] => let T'' := context T'[f] in eta_contract T'' | ?T => T end in let rec lift_sig_extensionality H := lazymatch type of H with | sig _ => H | forall a : ?A, _ => let Ha := fresh in let ret := constr:(fun a : A => match H a with Ha => ltac:(let v := lift_sig_extensionality Ha in exact v) end) in lazymatch type of ret with | forall a : ?A, sig (fun b : ?B => @?f a b = @?g a b) => eta_contract (exist (fun b : (forall a : A, B) => (fun a : A => f a (b a)) = (fun a : A => g a (b a))) (fun a : A => proj1_sig (ret a)) (@functional_extensionality_dep_good _ _ _ _ (fun a : A => proj2_sig (ret a)))) end end in let extensionality_pre_step H H_out Heq := let T := extensionality_step_make_type H in let H' := fresh in assert (H' : T) by (intros; eexists; apply f_equal__functional_extensionality_dep_good__fun); let H''b := lift_sig_extensionality H' in case H''b; clear H'; intros H_out Heq in let rec extensionality_rec H H_out Heq := lazymatch type of H with | forall a, _ = _ => extensionality_pre_step H H_out Heq | _ => let pre_H_out' := fresh H_out in let H_out' := fresh pre_H_out' in extensionality_pre_step H H_out' Heq; let Heq' := fresh Heq in extensionality_rec H_out' H_out Heq'; subst H_out' end in first [ assert_is_extensional_equality H | fail 1 \"Not an extensional equality\" ]; first [ assert_not_intensional_equality H | fail 1 \"Already an intensional equality\" ]; (tryif enforce_no_body H then idtac else clearbody H); let H_out := fresh in let Heq := fresh \"Heq\" in extensionality_in_checker ltac:(fun tt => extensionality_rec H H_out Heq); destruct Heq; rename H_out into H.",
            "VernacExtend",
            "d6cf906defc49a067931b94df0a9e4b875439eb4"
        ],
        [
            "Lemma eta_expansion_dep {A} {B : A -> Type} (f : forall x : A, B x) : f = fun x => f x.",
            "VernacStartTheoremProof",
            "87f57c69f46d1d8bedb8b4c780ddf9c2be5cfaed"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eta_expansion {A B} (f : A -> B) : f = fun x => f x.",
            "VernacStartTheoremProof",
            "39ae33eccce8909a41f3a43bc61e72a93d43185c"
        ],
        [
            "apply (eta_expansion_dep f).",
            "VernacExtend",
            "95ed2cdeefafa8bc22b44f8b20a1c9081f15d99e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "equal_f",
            "line_nb": 0,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_f_dep",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros A B f g <- H; reflexivity.",
                        "VernacExtend",
                        "9d497071b0bdf6d7fefbc0fd0a3056d982777369"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "functional_extensionality",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros ; eauto using @functional_extensionality_dep.",
                        "VernacExtend",
                        "7dc0c504b3da4eb20dfe0efedbdffa47d78bba94"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "forall_extensionality",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "apply functional_extensionality in H.",
                        "VernacExtend",
                        "d2aaed0de3e075c5aa2070bf42141d94a4955f26"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "forall_extensionalityP",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "apply functional_extensionality in H.",
                        "VernacExtend",
                        "d2aaed0de3e075c5aa2070bf42141d94a4955f26"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "forall_extensionalityS",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "apply functional_extensionality in H.",
                        "VernacExtend",
                        "d2aaed0de3e075c5aa2070bf42141d94a4955f26"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "functional_extensionality_dep_good_refl",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "unfold functional_extensionality_dep_good; edestruct functional_extensionality_dep; reflexivity.",
                        "VernacExtend",
                        "457a72ed1a79be8958a6ebd9f3fdf229eee8711e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "forall_sig_eq_rect",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "destruct g as [g1 g2].",
                        "VernacExtend",
                        "86e8ec4309a7e52f6998626c71db82b5d3ff753c"
                    ]
                },
                {
                    "command": [
                        "set (g' := fun x => (exist _ (g1 x) (g2 x))).",
                        "VernacExtend",
                        "69c91bb4a09676e25c1d79b9cf730650b11aeaaf"
                    ]
                },
                {
                    "command": [
                        "change g2 with (fun x => proj2_sig (g' x)).",
                        "VernacExtend",
                        "aabc797e533d992dacd8b1dcc16480847cc2d554"
                    ]
                },
                {
                    "command": [
                        "change g1 with (fun x => proj1_sig (g' x)).",
                        "VernacExtend",
                        "4e6b6e26dac956263c7695d3f1b1c442b955ba1f"
                    ]
                },
                {
                    "command": [
                        "clearbody g'; clear g1 g2.",
                        "VernacExtend",
                        "e259945184c8515f7fa6db61d0bd80ce3f3d4545"
                    ]
                },
                {
                    "command": [
                        "cut (forall x, (exist _ (f x) eq_refl) = g' x).",
                        "VernacExtend",
                        "69de85259d4e046d3eed07892c54b810868186a6"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro H'.",
                        "VernacExtend",
                        "3160ba192fa58e5db60b3e67645ce925759bb788"
                    ]
                },
                {
                    "command": [
                        "apply functional_extensionality_dep_good in H'.",
                        "VernacExtend",
                        "30797582fe9ef9dd1aa5c8b950223ef5e1cfbaf5"
                    ]
                },
                {
                    "command": [
                        "destruct H'.",
                        "VernacExtend",
                        "6b415f99235d5d47642f9e2340679885dc667286"
                    ]
                },
                {
                    "command": [
                        "exact k.",
                        "VernacExtend",
                        "4d8a81ef11a6a187027958849d3f6ff8f176319d"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intro x.",
                        "VernacExtend",
                        "f7163633eedf12f483fa0d8c0c119dd59431ca1e"
                    ]
                },
                {
                    "command": [
                        "destruct (g' x) as [g'x1 g'x2].",
                        "VernacExtend",
                        "79f60fe53d28a3cb76fc066219c4901e6af2ad83"
                    ]
                },
                {
                    "command": [
                        "destruct g'x2.",
                        "VernacExtend",
                        "380a5a1d8dbb1e6019497eed1d3763fb57f2d79a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "forall_eq_rect_comp",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "unfold forall_eq_rect, forall_sig_eq_rect; simpl.",
                        "VernacExtend",
                        "0bd7d0160441d7eb266889fa3d4c2465a200dca5"
                    ]
                },
                {
                    "command": [
                        "rewrite functional_extensionality_dep_good_refl; reflexivity.",
                        "VernacExtend",
                        "26978a8d7b4caef05128f41c6b35238d21a1275d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "f_equal__functional_extensionality_dep_good",
            "line_nb": 57,
            "steps": [
                {
                    "command": [
                        "apply forall_eq_rect with (H := H); clear H g.",
                        "VernacExtend",
                        "9b1da76d29657b2f321030b10d818a31f33e09ef"
                    ]
                },
                {
                    "command": [
                        "change (eq_refl (f a)) with (f_equal (fun h => h a) (eq_refl f)).",
                        "VernacExtend",
                        "8cb8999b6790acf22d3ab4308913aaa314fb1066"
                    ]
                },
                {
                    "command": [
                        "apply f_equal, functional_extensionality_dep_good_refl.",
                        "VernacExtend",
                        "9b048a2a4015f7357f3bb58329d89263bcfc116e"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "f_equal__functional_extensionality_dep_good__fun",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "apply functional_extensionality_dep_good; intro a; apply f_equal__functional_extensionality_dep_good.",
                        "VernacExtend",
                        "224032ae0d7671e37f7539c47cf69fd3099321fa"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "eta_expansion_dep",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eta_expansion",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "apply (eta_expansion_dep f).",
                        "VernacExtend",
                        "95ed2cdeefafa8bc22b44f8b20a1c9081f15d99e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}