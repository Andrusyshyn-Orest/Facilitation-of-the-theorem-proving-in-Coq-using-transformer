{
    "filename": "theories/Lists/StreamMemo.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Eqdep_dec.",
            "VernacRequire",
            "3df4d5c5706856734a53d6d3e96f8d8cd6d87f23"
        ],
        [
            "Require Import Streams.",
            "VernacRequire",
            "a5434de7332fb37ff7339d156041eb614016dee2"
        ],
        [
            "Section MemoFunction.",
            "VernacBeginSection",
            "a18074fa7f7c9da96bc4a5744e3fa7e83d3c002d"
        ],
        [
            "Variable A: Type.",
            "VernacAssumption",
            "8c1a433b6dc10de37f30039d70ed7113b3dab0e0"
        ],
        [
            "Variable f: nat -> A.",
            "VernacAssumption",
            "3290d9ac98d7e3c1ce70d4dcbffceab1cb5123d2"
        ],
        [
            "CoFixpoint memo_make (n:nat) : Stream A := Cons (f n) (memo_make (S n)).",
            "VernacCoFixpoint",
            "763739e58a7c5a85caa174e039d9d5efc2cba6cc"
        ],
        [
            "Definition memo_list := memo_make 0.",
            "VernacDefinition",
            "94d4bb441126c5e2a938267a4e3054dc4fb33db6"
        ],
        [
            "Fixpoint memo_get (n:nat) (l:Stream A) : A := match n with | O => hd l | S n1 => memo_get n1 (tl l) end.",
            "VernacFixpoint",
            "d25242188de815a4b0291050c83be6dab31783fb"
        ],
        [
            "Theorem memo_get_correct: forall n, memo_get n memo_list = f n.",
            "VernacStartTheoremProof",
            "fc0817c22184612bf1d958425cf0d2f4981cc3ee"
        ],
        [
            "assert (F1: forall n m, memo_get n (memo_make m) = f (n + m)).",
            "VernacExtend",
            "778eea34a947d4f37bb418309ffb3a557678cd2f"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "induction n as [| n Hrec]; try (intros m; reflexivity).",
            "VernacExtend",
            "a34d9af4cca1881a97d5738394c6e96b7b7e4483"
        ],
        [
            "intros m; simpl; rewrite Hrec.",
            "VernacExtend",
            "ae10f39a6fb03a7ee3e26524794c481dd57c0030"
        ],
        [
            "rewrite plus_n_Sm; auto.",
            "VernacExtend",
            "0e66659e30080a20dbadf7f07e1d26c8ec48e05c"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "intros n; transitivity (f (n + 0)); try exact (F1 n 0).",
            "VernacExtend",
            "0fcc584d755b919455a0c2bd5c61b1f292883a3e"
        ],
        [
            "rewrite <- plus_n_O; auto.",
            "VernacExtend",
            "229d4541e9794f31e225bacc6712100938a78367"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable g: A -> A.",
            "VernacAssumption",
            "18c7c7a2724a9d86efe954e55781826cf94fab1b"
        ],
        [
            "Hypothesis Hg_correct: forall n, f (S n) = g (f n).",
            "VernacAssumption",
            "8bf3ab54c93b22eff8d22258bdd7547acd62f83a"
        ],
        [
            "CoFixpoint imemo_make (fn:A) : Stream A := let fn1 := g fn in Cons fn1 (imemo_make fn1).",
            "VernacCoFixpoint",
            "74b9842dbcef12bb29575a9acfb4523940a63675"
        ],
        [
            "Definition imemo_list := let f0 := f 0 in Cons f0 (imemo_make f0).",
            "VernacDefinition",
            "84934ced8de31f7f1e2b7f1a09054792c8dc3fbc"
        ],
        [
            "Theorem imemo_get_correct: forall n, memo_get n imemo_list = f n.",
            "VernacStartTheoremProof",
            "b055b7fc8e696a7b9b30f021fa9acb785ac01dde"
        ],
        [
            "assert (F1: forall n m, memo_get n (imemo_make (f m)) = f (S (n + m))).",
            "VernacExtend",
            "23c498131c59521b24ea7302348b573f483cfd72"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "induction n as [| n Hrec]; try (intros m; exact (eq_sym (Hg_correct m))).",
            "VernacExtend",
            "dfe2fd49502d0997cfbabe6ffab95defcea21154"
        ],
        [
            "simpl; intros m; rewrite <- Hg_correct, Hrec, <- plus_n_Sm; auto.",
            "VernacExtend",
            "4c75311c9f5e220f5875dd34d0572cb6939bbf11"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "destruct n as [| n]; try reflexivity.",
            "VernacExtend",
            "b2169d163a48de2ce88e7887734aab68f1574b5e"
        ],
        [
            "unfold imemo_list; simpl; rewrite F1.",
            "VernacExtend",
            "53aadc103d23138eff9804ef6636db066510a350"
        ],
        [
            "rewrite <- plus_n_O; auto.",
            "VernacExtend",
            "229d4541e9794f31e225bacc6712100938a78367"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End MemoFunction.",
            "VernacEndSegment",
            "15777837788ca97b790d3c8ad1962175f46ba544"
        ],
        [
            "Section DependentMemoFunction.",
            "VernacBeginSection",
            "1de63198e4e1d0f9a621ff8b14369e7163441540"
        ],
        [
            "Variable A: nat -> Type.",
            "VernacAssumption",
            "33c7ace31c45c0b096ba8231b36cb4bb2ff0b666"
        ],
        [
            "Variable f: forall n, A n.",
            "VernacAssumption",
            "a738d9b06656912a60e6e8c164f2c77f23a4c398"
        ],
        [
            "Inductive memo_val: Type := memo_mval: forall n, A n -> memo_val.",
            "VernacInductive",
            "d14292f71a75f0a6d0b2fa07d8fc66848573a4ee"
        ],
        [
            "Fixpoint is_eq (n m : nat) : {n = m} + {True} := match n, m return {n = m} + {True} with | 0, 0 =>left True (eq_refl 0) | 0, S m1 => right (0 = S m1) I | S n1, 0 => right (S n1 = 0) I | S n1, S m1 => match is_eq n1 m1 with | left H => left True (f_equal S H) | right _ => right (S n1 = S m1) I end end.",
            "VernacFixpoint",
            "219b81c64c40ee2f965485c4ab98970f55f59a00"
        ],
        [
            "Definition memo_get_val n (v: memo_val): A n := match v with | memo_mval m x => match is_eq n m with | left H => match H in (eq _ y) return (A y -> A n) with | eq_refl => fun v1 : A n => v1 end | right _ => fun _ : A m => f n end x end.",
            "VernacDefinition",
            "b21f2956a571254b360642ee654d499070f26938"
        ],
        [
            "Let mf n := memo_mval n (f n).",
            "VernacDefinition",
            "60de2e6c5279897878c53e92a151ec311d1dfc94"
        ],
        [
            "Definition dmemo_list := memo_list _ mf.",
            "VernacDefinition",
            "323047a5856a9603cf883ca94a1a9f390a688db5"
        ],
        [
            "Definition dmemo_get n l := memo_get_val n (memo_get _ n l).",
            "VernacDefinition",
            "3119df653e8b8833bb64162d66d871c9bf06149c"
        ],
        [
            "Theorem dmemo_get_correct: forall n, dmemo_get n dmemo_list = f n.",
            "VernacStartTheoremProof",
            "0346993a9b5b7771ceb982674e79b704a6588ad0"
        ],
        [
            "intros n; unfold dmemo_get, dmemo_list.",
            "VernacExtend",
            "513155b50efa1c05393a2c6684c430563a7a4876"
        ],
        [
            "rewrite (memo_get_correct memo_val mf n); simpl.",
            "VernacExtend",
            "56119b3796c8ce95d3531249bbd675a9ca4fc6bd"
        ],
        [
            "case (is_eq n n); simpl; auto; intros e.",
            "VernacExtend",
            "545d945d5d4611585ef4f4b56b101a85f671e989"
        ],
        [
            "assert (e = eq_refl n).",
            "VernacExtend",
            "482bd32278ddc662be08685fdddc587cd07bb4d8"
        ],
        [
            "apply eq_proofs_unicity.",
            "VernacExtend",
            "77d84e6f924174693a7f4eff3520df946c2d75d8"
        ],
        [
            "induction x as [| x Hx]; destruct y as [| y].",
            "VernacExtend",
            "55a7fddbf4f9013e94023c144691c1245d141056"
        ],
        [
            "left; auto.",
            "VernacExtend",
            "b03090a3068bb41ee1034a9c886a5e47eddfb98a"
        ],
        [
            "right; intros HH; discriminate HH.",
            "VernacExtend",
            "0b1149f727d08ab50aa8b0e55420ff26bdede303"
        ],
        [
            "right; intros HH; discriminate HH.",
            "VernacExtend",
            "0b1149f727d08ab50aa8b0e55420ff26bdede303"
        ],
        [
            "case (Hx y).",
            "VernacExtend",
            "16e7e7834348038507ea5e2f824b03dfc5ce3eda"
        ],
        [
            "intros HH; left; case HH; auto.",
            "VernacExtend",
            "cb54a47fd93f5337e7ac0e1c3c5bca98cb7eea52"
        ],
        [
            "intros HH; right; intros HH1; case HH.",
            "VernacExtend",
            "85f2cfee0e6c18d9cb7bbc19f9b359a0db940bd4"
        ],
        [
            "injection HH1; auto.",
            "VernacExtend",
            "804c79ef58fd8344444873636f31ab8d8a241ed3"
        ],
        [
            "rewrite H; auto.",
            "VernacExtend",
            "3e25713af8eaa76cddf9287af10d66733da2ee16"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable g: forall n, A n -> A (S n).",
            "VernacAssumption",
            "cccc2965c175a5ca3c507dacd7971cc75cc10f5b"
        ],
        [
            "Hypothesis Hg_correct: forall n, f (S n) = g n (f n).",
            "VernacAssumption",
            "8a3e50b46715cb44517507e6274656d3e742c675"
        ],
        [
            "Let mg v := match v with memo_mval n1 v1 => memo_mval (S n1) (g n1 v1) end.",
            "VernacDefinition",
            "4309c00239a6fb70be10da0a50c0fabd1ab19d5d"
        ],
        [
            "Definition dimemo_list := imemo_list _ mf mg.",
            "VernacDefinition",
            "68569cb625251dd80c252405ecbb7136e16c34dd"
        ],
        [
            "Theorem dimemo_get_correct: forall n, dmemo_get n dimemo_list = f n.",
            "VernacStartTheoremProof",
            "5b298cdcf8f1511fa2d9a7dc3f92930b3462248d"
        ],
        [
            "intros n; unfold dmemo_get, dimemo_list.",
            "VernacExtend",
            "fc41e5715a2d2e0e991bc4455a94f0b4a874f628"
        ],
        [
            "rewrite (imemo_get_correct memo_val mf mg); simpl.",
            "VernacExtend",
            "eb7541c894a450f65d392922e7ea33a6360c185b"
        ],
        [
            "case (is_eq n n); simpl; auto; intros e.",
            "VernacExtend",
            "545d945d5d4611585ef4f4b56b101a85f671e989"
        ],
        [
            "assert (e = eq_refl n).",
            "VernacExtend",
            "482bd32278ddc662be08685fdddc587cd07bb4d8"
        ],
        [
            "apply eq_proofs_unicity.",
            "VernacExtend",
            "77d84e6f924174693a7f4eff3520df946c2d75d8"
        ],
        [
            "induction x as [| x Hx]; destruct y as [| y].",
            "VernacExtend",
            "55a7fddbf4f9013e94023c144691c1245d141056"
        ],
        [
            "left; auto.",
            "VernacExtend",
            "b03090a3068bb41ee1034a9c886a5e47eddfb98a"
        ],
        [
            "right; intros HH; discriminate HH.",
            "VernacExtend",
            "0b1149f727d08ab50aa8b0e55420ff26bdede303"
        ],
        [
            "right; intros HH; discriminate HH.",
            "VernacExtend",
            "0b1149f727d08ab50aa8b0e55420ff26bdede303"
        ],
        [
            "case (Hx y).",
            "VernacExtend",
            "16e7e7834348038507ea5e2f824b03dfc5ce3eda"
        ],
        [
            "intros HH; left; case HH; auto.",
            "VernacExtend",
            "cb54a47fd93f5337e7ac0e1c3c5bca98cb7eea52"
        ],
        [
            "intros HH; right; intros HH1; case HH.",
            "VernacExtend",
            "85f2cfee0e6c18d9cb7bbc19f9b359a0db940bd4"
        ],
        [
            "injection HH1; auto.",
            "VernacExtend",
            "804c79ef58fd8344444873636f31ab8d8a241ed3"
        ],
        [
            "rewrite H; auto.",
            "VernacExtend",
            "3e25713af8eaa76cddf9287af10d66733da2ee16"
        ],
        [
            "intros n1; unfold mf; rewrite Hg_correct; auto.",
            "VernacExtend",
            "68dedfdf7c8d1e83cfe2ceeb22d092cb4cfd1e70"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End DependentMemoFunction.",
            "VernacEndSegment",
            "2848c2bbad93c0d2bc1bdc3bcc3c734234317cc0"
        ]
    ],
    "proofs": [
        {
            "name": "memo_get_correct",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "assert (F1: forall n m, memo_get n (memo_make m) = f (n + m)).",
                        "VernacExtend",
                        "778eea34a947d4f37bb418309ffb3a557678cd2f"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrec]; try (intros m; reflexivity).",
                        "VernacExtend",
                        "a34d9af4cca1881a97d5738394c6e96b7b7e4483"
                    ]
                },
                {
                    "command": [
                        "intros m; simpl; rewrite Hrec.",
                        "VernacExtend",
                        "ae10f39a6fb03a7ee3e26524794c481dd57c0030"
                    ]
                },
                {
                    "command": [
                        "rewrite plus_n_Sm; auto.",
                        "VernacExtend",
                        "0e66659e30080a20dbadf7f07e1d26c8ec48e05c"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "intros n; transitivity (f (n + 0)); try exact (F1 n 0).",
                        "VernacExtend",
                        "0fcc584d755b919455a0c2bd5c61b1f292883a3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- plus_n_O; auto.",
                        "VernacExtend",
                        "229d4541e9794f31e225bacc6712100938a78367"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "imemo_get_correct",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "assert (F1: forall n m, memo_get n (imemo_make (f m)) = f (S (n + m))).",
                        "VernacExtend",
                        "23c498131c59521b24ea7302348b573f483cfd72"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrec]; try (intros m; exact (eq_sym (Hg_correct m))).",
                        "VernacExtend",
                        "dfe2fd49502d0997cfbabe6ffab95defcea21154"
                    ]
                },
                {
                    "command": [
                        "simpl; intros m; rewrite <- Hg_correct, Hrec, <- plus_n_Sm; auto.",
                        "VernacExtend",
                        "4c75311c9f5e220f5875dd34d0572cb6939bbf11"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "destruct n as [| n]; try reflexivity.",
                        "VernacExtend",
                        "b2169d163a48de2ce88e7887734aab68f1574b5e"
                    ]
                },
                {
                    "command": [
                        "unfold imemo_list; simpl; rewrite F1.",
                        "VernacExtend",
                        "53aadc103d23138eff9804ef6636db066510a350"
                    ]
                },
                {
                    "command": [
                        "rewrite <- plus_n_O; auto.",
                        "VernacExtend",
                        "229d4541e9794f31e225bacc6712100938a78367"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dmemo_get_correct",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "intros n; unfold dmemo_get, dmemo_list.",
                        "VernacExtend",
                        "513155b50efa1c05393a2c6684c430563a7a4876"
                    ]
                },
                {
                    "command": [
                        "rewrite (memo_get_correct memo_val mf n); simpl.",
                        "VernacExtend",
                        "56119b3796c8ce95d3531249bbd675a9ca4fc6bd"
                    ]
                },
                {
                    "command": [
                        "case (is_eq n n); simpl; auto; intros e.",
                        "VernacExtend",
                        "545d945d5d4611585ef4f4b56b101a85f671e989"
                    ]
                },
                {
                    "command": [
                        "assert (e = eq_refl n).",
                        "VernacExtend",
                        "482bd32278ddc662be08685fdddc587cd07bb4d8"
                    ]
                },
                {
                    "command": [
                        "apply eq_proofs_unicity.",
                        "VernacExtend",
                        "77d84e6f924174693a7f4eff3520df946c2d75d8"
                    ]
                },
                {
                    "command": [
                        "induction x as [| x Hx]; destruct y as [| y].",
                        "VernacExtend",
                        "55a7fddbf4f9013e94023c144691c1245d141056"
                    ]
                },
                {
                    "command": [
                        "left; auto.",
                        "VernacExtend",
                        "b03090a3068bb41ee1034a9c886a5e47eddfb98a"
                    ]
                },
                {
                    "command": [
                        "right; intros HH; discriminate HH.",
                        "VernacExtend",
                        "0b1149f727d08ab50aa8b0e55420ff26bdede303"
                    ]
                },
                {
                    "command": [
                        "right; intros HH; discriminate HH.",
                        "VernacExtend",
                        "0b1149f727d08ab50aa8b0e55420ff26bdede303"
                    ]
                },
                {
                    "command": [
                        "case (Hx y).",
                        "VernacExtend",
                        "16e7e7834348038507ea5e2f824b03dfc5ce3eda"
                    ]
                },
                {
                    "command": [
                        "intros HH; left; case HH; auto.",
                        "VernacExtend",
                        "cb54a47fd93f5337e7ac0e1c3c5bca98cb7eea52"
                    ]
                },
                {
                    "command": [
                        "intros HH; right; intros HH1; case HH.",
                        "VernacExtend",
                        "85f2cfee0e6c18d9cb7bbc19f9b359a0db940bd4"
                    ]
                },
                {
                    "command": [
                        "injection HH1; auto.",
                        "VernacExtend",
                        "804c79ef58fd8344444873636f31ab8d8a241ed3"
                    ]
                },
                {
                    "command": [
                        "rewrite H; auto.",
                        "VernacExtend",
                        "3e25713af8eaa76cddf9287af10d66733da2ee16"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dimemo_get_correct",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros n; unfold dmemo_get, dimemo_list.",
                        "VernacExtend",
                        "fc41e5715a2d2e0e991bc4455a94f0b4a874f628"
                    ]
                },
                {
                    "command": [
                        "rewrite (imemo_get_correct memo_val mf mg); simpl.",
                        "VernacExtend",
                        "eb7541c894a450f65d392922e7ea33a6360c185b"
                    ]
                },
                {
                    "command": [
                        "case (is_eq n n); simpl; auto; intros e.",
                        "VernacExtend",
                        "545d945d5d4611585ef4f4b56b101a85f671e989"
                    ]
                },
                {
                    "command": [
                        "assert (e = eq_refl n).",
                        "VernacExtend",
                        "482bd32278ddc662be08685fdddc587cd07bb4d8"
                    ]
                },
                {
                    "command": [
                        "apply eq_proofs_unicity.",
                        "VernacExtend",
                        "77d84e6f924174693a7f4eff3520df946c2d75d8"
                    ]
                },
                {
                    "command": [
                        "induction x as [| x Hx]; destruct y as [| y].",
                        "VernacExtend",
                        "55a7fddbf4f9013e94023c144691c1245d141056"
                    ]
                },
                {
                    "command": [
                        "left; auto.",
                        "VernacExtend",
                        "b03090a3068bb41ee1034a9c886a5e47eddfb98a"
                    ]
                },
                {
                    "command": [
                        "right; intros HH; discriminate HH.",
                        "VernacExtend",
                        "0b1149f727d08ab50aa8b0e55420ff26bdede303"
                    ]
                },
                {
                    "command": [
                        "right; intros HH; discriminate HH.",
                        "VernacExtend",
                        "0b1149f727d08ab50aa8b0e55420ff26bdede303"
                    ]
                },
                {
                    "command": [
                        "case (Hx y).",
                        "VernacExtend",
                        "16e7e7834348038507ea5e2f824b03dfc5ce3eda"
                    ]
                },
                {
                    "command": [
                        "intros HH; left; case HH; auto.",
                        "VernacExtend",
                        "cb54a47fd93f5337e7ac0e1c3c5bca98cb7eea52"
                    ]
                },
                {
                    "command": [
                        "intros HH; right; intros HH1; case HH.",
                        "VernacExtend",
                        "85f2cfee0e6c18d9cb7bbc19f9b359a0db940bd4"
                    ]
                },
                {
                    "command": [
                        "injection HH1; auto.",
                        "VernacExtend",
                        "804c79ef58fd8344444873636f31ab8d8a241ed3"
                    ]
                },
                {
                    "command": [
                        "rewrite H; auto.",
                        "VernacExtend",
                        "3e25713af8eaa76cddf9287af10d66733da2ee16"
                    ]
                },
                {
                    "command": [
                        "intros n1; unfold mf; rewrite Hg_correct; auto.",
                        "VernacExtend",
                        "68dedfdf7c8d1e83cfe2ceeb22d092cb4cfd1e70"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}