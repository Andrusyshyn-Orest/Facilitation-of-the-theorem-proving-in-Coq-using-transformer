{
    "filename": "theories/FSets/FSetCompat.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import FSetInterface FSetFacts MSetInterface MSetFacts.",
            "VernacRequire",
            "d232c0306a1af6133df5f4cfad1fddada7a17eac"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Module Backport_WSets (E:DecidableType.DecidableType) (M:MSetInterface.WSets with Definition E.t := E.t with Definition E.eq := E.eq) <: FSetInterface.WSfun E.",
            "VernacDefineModule",
            "1af28aaa2e7076bfe64dc127407af4e7ec22ba6d"
        ],
        [
            "Definition elt := E.t.",
            "VernacDefinition",
            "c01573ae079b75bbdc31b7d5baf6207a2114f9d3"
        ],
        [
            "Definition t := M.t.",
            "VernacDefinition",
            "b3d72cc3faf575c9783921cd3e33f8163dbcab8d"
        ],
        [
            "Implicit Type s : t.",
            "VernacReserve",
            "173cf4e976a84fc5c8254276654cd3ff5806fca9"
        ],
        [
            "Implicit Type x y : elt.",
            "VernacReserve",
            "4480cb6fdd7cb3f3641255df0007006f173f7eb0"
        ],
        [
            "Implicit Type f : elt -> bool.",
            "VernacReserve",
            "a88d308bd5fe07cf8258fd32fdffe67d7a8a96e1"
        ],
        [
            "Definition In : elt -> t -> Prop := M.In.",
            "VernacDefinition",
            "172d79f783729b0cda6ff324fa3fb6fe9bb6e679"
        ],
        [
            "Definition Equal s s' := forall a : elt, In a s <-> In a s'.",
            "VernacDefinition",
            "cd5f6ee7097e7157ccbc10af82ffd932eaf3c423"
        ],
        [
            "Definition Subset s s' := forall a : elt, In a s -> In a s'.",
            "VernacDefinition",
            "106ca6bd7b6e4a40ea51abcc05e3c9af2fc2bee5"
        ],
        [
            "Definition Empty s := forall a : elt, ~ In a s.",
            "VernacDefinition",
            "99dffcced2023a4cba92e934e92ab887beb9ff43"
        ],
        [
            "Definition For_all (P : elt -> Prop) s := forall x, In x s -> P x.",
            "VernacDefinition",
            "4d362106a16edcc40d0eef5faef1552c0586f113"
        ],
        [
            "Definition Exists (P : elt -> Prop) s := exists x, In x s /\\ P x.",
            "VernacDefinition",
            "7a3d224adfc848e82fb49eb1cbd9c21d19ce40b7"
        ],
        [
            "Definition empty : t := M.empty.",
            "VernacDefinition",
            "60e526f72530aab884adf42a2b782ace169d61b2"
        ],
        [
            "Definition is_empty : t -> bool := M.is_empty.",
            "VernacDefinition",
            "ed3328cb99a686bd8f48ad72ff456f6a9a036502"
        ],
        [
            "Definition mem : elt -> t -> bool := M.mem.",
            "VernacDefinition",
            "385f82a7db612a1a8706a445df415000e2b83f65"
        ],
        [
            "Definition add : elt -> t -> t := M.add.",
            "VernacDefinition",
            "77c5afe4213f079c16e6a1c2fe63de6b462bc075"
        ],
        [
            "Definition singleton : elt -> t := M.singleton.",
            "VernacDefinition",
            "79a1feefb60d454881ac3edd63ea34d8e665ec3d"
        ],
        [
            "Definition remove : elt -> t -> t := M.remove.",
            "VernacDefinition",
            "cfb9c3d6607d3c401b035fcb371957a19d45f1c1"
        ],
        [
            "Definition union : t -> t -> t := M.union.",
            "VernacDefinition",
            "6191d6f3a556ff6ba51e28ec14802fc0d6fa4b80"
        ],
        [
            "Definition inter : t -> t -> t := M.inter.",
            "VernacDefinition",
            "994905be025b2f94078aaf6cb8aa89c1003ec7a7"
        ],
        [
            "Definition diff : t -> t -> t := M.diff.",
            "VernacDefinition",
            "5128b4b4d6753669550abca455bf3de25b590d1f"
        ],
        [
            "Definition eq : t -> t -> Prop := M.eq.",
            "VernacDefinition",
            "3bac57c71397f2db5867558f3c293e2992254950"
        ],
        [
            "Definition eq_dec : forall s s', {eq s s'}+{~eq s s'}:= M.eq_dec.",
            "VernacDefinition",
            "c68c7910605be3a049c29e36d228d6e05db32a68"
        ],
        [
            "Definition equal : t -> t -> bool := M.equal.",
            "VernacDefinition",
            "fc3420bffa22733504661ea287cdbb2c6f42eaf7"
        ],
        [
            "Definition subset : t -> t -> bool := M.subset.",
            "VernacDefinition",
            "b288b784ba7f1e7252decd860888d3da2244d40f"
        ],
        [
            "Definition fold : forall A : Type, (elt -> A -> A) -> t -> A -> A := M.fold.",
            "VernacDefinition",
            "e4dffac36a60c77c59d71973069eee03a8c7819a"
        ],
        [
            "Definition for_all : (elt -> bool) -> t -> bool := M.for_all.",
            "VernacDefinition",
            "6b18dff818c548c41b952020ec0a7242da3451dc"
        ],
        [
            "Definition exists_ : (elt -> bool) -> t -> bool := M.exists_.",
            "VernacDefinition",
            "c9f1ddb4cce297aa06bfa1589c9f20be8480a907"
        ],
        [
            "Definition filter : (elt -> bool) -> t -> t := M.filter.",
            "VernacDefinition",
            "83cb399abeaa8395d87dbd7d4afe917d738403cb"
        ],
        [
            "Definition partition : (elt -> bool) -> t -> t * t:= M.partition.",
            "VernacDefinition",
            "ba41d482203e11bddbb52d4768dd52bfa104b0cb"
        ],
        [
            "Definition cardinal : t -> nat := M.cardinal.",
            "VernacDefinition",
            "dbce1d600d26963b3d17c77ea2ef6f471cf4fda2"
        ],
        [
            "Definition elements : t -> list elt := M.elements.",
            "VernacDefinition",
            "527d4affff756f6c738de1b722d0ac340c388c95"
        ],
        [
            "Definition choose : t -> option elt := M.choose.",
            "VernacDefinition",
            "2e0e36d9a3837154f9da27363494a702b955c4a9"
        ],
        [
            "Module MF := MSetFacts.WFacts M.",
            "VernacDefineModule",
            "ca8813654d99fe10005749d47f3c473b929226df"
        ],
        [
            "Definition In_1 : forall s x y, E.eq x y -> In x s -> In y s := MF.In_1.",
            "VernacDefinition",
            "335f311db4107039f4706b9e16698efc8cf69a89"
        ],
        [
            "Definition eq_refl : forall s, eq s s := @Equivalence_Reflexive _ _ M.eq_equiv.",
            "VernacDefinition",
            "d503932ac88a3431bafa32472ef45f8f674ae47a"
        ],
        [
            "Definition eq_sym : forall s s', eq s s' -> eq s' s := @Equivalence_Symmetric _ _ M.eq_equiv.",
            "VernacDefinition",
            "325c65128776d7a9b64c975a2d7c99da2507cabe"
        ],
        [
            "Definition eq_trans : forall s s' s'', eq s s' -> eq s' s'' -> eq s s'' := @Equivalence_Transitive _ _ M.eq_equiv.",
            "VernacDefinition",
            "9c4bbcd1f825b291bd43677856bcec4601f7f5ff"
        ],
        [
            "Definition mem_1 : forall s x, In x s -> mem x s = true := MF.mem_1.",
            "VernacDefinition",
            "b6d974f1043d7f305a48d229261879818d157299"
        ],
        [
            "Definition mem_2 : forall s x, mem x s = true -> In x s := MF.mem_2.",
            "VernacDefinition",
            "391d8724372e6cfe8d3c01fbc9820d3f04ea481d"
        ],
        [
            "Definition equal_1 : forall s s', Equal s s' -> equal s s' = true := MF.equal_1.",
            "VernacDefinition",
            "210385e686bf8fd8f690116de580348739578c9b"
        ],
        [
            "Definition equal_2 : forall s s', equal s s' = true -> Equal s s' := MF.equal_2.",
            "VernacDefinition",
            "355b48290222a280cf9865e82500604aaed6ba00"
        ],
        [
            "Definition subset_1 : forall s s', Subset s s' -> subset s s' = true := MF.subset_1.",
            "VernacDefinition",
            "c4aa771c992e30a2e1b914ec25d617006892a273"
        ],
        [
            "Definition subset_2 : forall s s', subset s s' = true -> Subset s s' := MF.subset_2.",
            "VernacDefinition",
            "930fe479ca9ae282a700a5f1fc1ba1a2e6036845"
        ],
        [
            "Definition empty_1 : Empty empty := MF.empty_1.",
            "VernacDefinition",
            "4dbd34397b8160bb9cb616b1078384e8cd013ff7"
        ],
        [
            "Definition is_empty_1 : forall s, Empty s -> is_empty s = true := MF.is_empty_1.",
            "VernacDefinition",
            "00b8da9c89c40f355cc7a84b5a8846ce8542e735"
        ],
        [
            "Definition is_empty_2 : forall s, is_empty s = true -> Empty s := MF.is_empty_2.",
            "VernacDefinition",
            "7491ec7b20f76a62803f6c475b939f370d4c65b9"
        ],
        [
            "Definition add_1 : forall s x y, E.eq x y -> In y (add x s) := MF.add_1.",
            "VernacDefinition",
            "d7c63399cc485bf91b968a18caecdf5644598107"
        ],
        [
            "Definition add_2 : forall s x y, In y s -> In y (add x s) := MF.add_2.",
            "VernacDefinition",
            "d32ec7c472c366dea42d68db666b67e29c1c1983"
        ],
        [
            "Definition add_3 : forall s x y, ~ E.eq x y -> In y (add x s) -> In y s := MF.add_3.",
            "VernacDefinition",
            "76f7a79f4a03c500a32f2ef4d2fea832fde70140"
        ],
        [
            "Definition remove_1 : forall s x y, E.eq x y -> ~ In y (remove x s) := MF.remove_1.",
            "VernacDefinition",
            "9d2df7f21197af6e7f111c41cfe2ee44e3371761"
        ],
        [
            "Definition remove_2 : forall s x y, ~ E.eq x y -> In y s -> In y (remove x s) := MF.remove_2.",
            "VernacDefinition",
            "4a8e7f87958d1700c088aa396b34c75961303001"
        ],
        [
            "Definition remove_3 : forall s x y, In y (remove x s) -> In y s := MF.remove_3.",
            "VernacDefinition",
            "f7e5c8504855be3d6889a3c81b7abf27c7ff9cae"
        ],
        [
            "Definition union_1 : forall s s' x, In x (union s s') -> In x s \\/ In x s' := MF.union_1.",
            "VernacDefinition",
            "c6fd223e2057a13f8b28c93febecb3ccc0ab4901"
        ],
        [
            "Definition union_2 : forall s s' x, In x s -> In x (union s s') := MF.union_2.",
            "VernacDefinition",
            "97c13535219c220c466f01f09347a1a4271efb98"
        ],
        [
            "Definition union_3 : forall s s' x, In x s' -> In x (union s s') := MF.union_3.",
            "VernacDefinition",
            "785f3512aa12da65378d9ad2526a60ebfeabf83c"
        ],
        [
            "Definition inter_1 : forall s s' x, In x (inter s s') -> In x s := MF.inter_1.",
            "VernacDefinition",
            "656964280dc6ac3b8503fb86e55e01c47539cf56"
        ],
        [
            "Definition inter_2 : forall s s' x, In x (inter s s') -> In x s' := MF.inter_2.",
            "VernacDefinition",
            "f8a05a19cc70a84beffef561bae90974b69c0805"
        ],
        [
            "Definition inter_3 : forall s s' x, In x s -> In x s' -> In x (inter s s') := MF.inter_3.",
            "VernacDefinition",
            "fd6c8846aba76b092be8f7e9f2e4ed8875fcee37"
        ],
        [
            "Definition diff_1 : forall s s' x, In x (diff s s') -> In x s := MF.diff_1.",
            "VernacDefinition",
            "352e32a3a0c7870e429d9eeca6af65e8ba1d5d4e"
        ],
        [
            "Definition diff_2 : forall s s' x, In x (diff s s') -> ~ In x s' := MF.diff_2.",
            "VernacDefinition",
            "6f33bfcab8b29506bc71f185c598244bf201c487"
        ],
        [
            "Definition diff_3 : forall s s' x, In x s -> ~ In x s' -> In x (diff s s') := MF.diff_3.",
            "VernacDefinition",
            "032f4376c0adef841457597c6a0918e2a80a341a"
        ],
        [
            "Definition singleton_1 : forall x y, In y (singleton x) -> E.eq x y := MF.singleton_1.",
            "VernacDefinition",
            "f0bbde42281932075d77ff1157bee123fad3960d"
        ],
        [
            "Definition singleton_2 : forall x y, E.eq x y -> In y (singleton x) := MF.singleton_2.",
            "VernacDefinition",
            "953031c87087f676df5b579d56185a933fd51f18"
        ],
        [
            "Definition fold_1 : forall s (A : Type) (i : A) (f : elt -> A -> A), fold f s i = fold_left (fun a e => f e a) (elements s) i := MF.fold_1.",
            "VernacDefinition",
            "f8c614b0f7105e6ee85c94d79042bdda279ede26"
        ],
        [
            "Definition cardinal_1 : forall s, cardinal s = length (elements s) := MF.cardinal_1.",
            "VernacDefinition",
            "c0d6dbc0f3653eb3ecf180d989ca5c10b722e1ce"
        ],
        [
            "Definition filter_1 : forall s x f, compat_bool E.eq f -> In x (filter f s) -> In x s := MF.filter_1.",
            "VernacDefinition",
            "fed28c374ac88f7724e51077cd5f3732001af08f"
        ],
        [
            "Definition filter_2 : forall s x f, compat_bool E.eq f -> In x (filter f s) -> f x = true := MF.filter_2.",
            "VernacDefinition",
            "7aa3a7ad90a3cfb16260f57c75dbbd9ce15db12c"
        ],
        [
            "Definition filter_3 : forall s x f, compat_bool E.eq f -> In x s -> f x = true -> In x (filter f s) := MF.filter_3.",
            "VernacDefinition",
            "3a4493d5bdb69ac9597b2798095679fbe5e1af37"
        ],
        [
            "Definition for_all_1 : forall s f, compat_bool E.eq f -> For_all (fun x => f x = true) s -> for_all f s = true := MF.for_all_1.",
            "VernacDefinition",
            "4bac58da4ad289973a6fd65c038f8aec7a580504"
        ],
        [
            "Definition for_all_2 : forall s f, compat_bool E.eq f -> for_all f s = true -> For_all (fun x => f x = true) s := MF.for_all_2.",
            "VernacDefinition",
            "51ddbb8334cf555c1d6746ae2c327106a307b401"
        ],
        [
            "Definition exists_1 : forall s f, compat_bool E.eq f -> Exists (fun x => f x = true) s -> exists_ f s = true := MF.exists_1.",
            "VernacDefinition",
            "3269cc208d56ae88cbf7a9c25844fc15ba518106"
        ],
        [
            "Definition exists_2 : forall s f, compat_bool E.eq f -> exists_ f s = true -> Exists (fun x => f x = true) s := MF.exists_2.",
            "VernacDefinition",
            "9b12201eb4c3c32772c915ce1dcd88084369d063"
        ],
        [
            "Definition partition_1 : forall s f, compat_bool E.eq f -> Equal (fst (partition f s)) (filter f s) := MF.partition_1.",
            "VernacDefinition",
            "92d1bd5a89a050ddd6eb3ab75b039ce9e97e30a2"
        ],
        [
            "Definition partition_2 : forall s f, compat_bool E.eq f -> Equal (snd (partition f s)) (filter (fun x => negb (f x)) s) := MF.partition_2.",
            "VernacDefinition",
            "3e4e430aba6085d71d88f55b1ed270865f20a856"
        ],
        [
            "Definition choose_1 : forall s x, choose s = Some x -> In x s := MF.choose_1.",
            "VernacDefinition",
            "711bdce61ee917a8ce6d4ec6c4ed2609325a3add"
        ],
        [
            "Definition choose_2 : forall s, choose s = None -> Empty s := MF.choose_2.",
            "VernacDefinition",
            "7287297a04acb3ed509b9e54e51fc18e77086dbd"
        ],
        [
            "Definition elements_1 : forall s x, In x s -> InA E.eq x (elements s) := MF.elements_1.",
            "VernacDefinition",
            "4218f3c1dd354311e9a77dd687525ebe0dc0cddc"
        ],
        [
            "Definition elements_2 : forall s x, InA E.eq x (elements s) -> In x s := MF.elements_2.",
            "VernacDefinition",
            "812d17a41bf9b5a4d969de3665bc85ebeee4bb23"
        ],
        [
            "Definition elements_3w : forall s, NoDupA E.eq (elements s) := MF.elements_3w.",
            "VernacDefinition",
            "c7069735de8ce825077e2e9e57ce168526e9dd85"
        ],
        [
            "End Backport_WSets.",
            "VernacEndSegment",
            "54b9d106c4cd1bcb7f9065efa064e60e77cded0e"
        ],
        [
            "Module Backport_Sets (O:OrderedType.OrderedType) (M:MSetInterface.Sets with Definition E.t := O.t with Definition E.eq := O.eq with Definition E.lt := O.lt) <: FSetInterface.S with Module E:=O.",
            "VernacDefineModule",
            "47e9dd0fe7158dd9451982ed24a2ed7445cf9b60"
        ],
        [
            "Include Backport_WSets O M.",
            "VernacInclude",
            "8fc818974f129406d76cedf3f8adb5b224d425f4"
        ],
        [
            "Implicit Type s : t.",
            "VernacReserve",
            "173cf4e976a84fc5c8254276654cd3ff5806fca9"
        ],
        [
            "Implicit Type x y : elt.",
            "VernacReserve",
            "4480cb6fdd7cb3f3641255df0007006f173f7eb0"
        ],
        [
            "Definition lt : t -> t -> Prop := M.lt.",
            "VernacDefinition",
            "8a1903476bc110a385d96d0d563912a0c15cc066"
        ],
        [
            "Definition min_elt : t -> option elt := M.min_elt.",
            "VernacDefinition",
            "5c72f4d385267e4d4dd4480b9e141a632308ea72"
        ],
        [
            "Definition max_elt : t -> option elt := M.max_elt.",
            "VernacDefinition",
            "c90f1c4fbf564ebddaab1d9df6cb02ec34f85fab"
        ],
        [
            "Definition min_elt_1 : forall s x, min_elt s = Some x -> In x s := M.min_elt_spec1.",
            "VernacDefinition",
            "6b52e027a2c729c247d7027522ee020ac388e40b"
        ],
        [
            "Definition min_elt_2 : forall s x y, min_elt s = Some x -> In y s -> ~ O.lt y x := M.min_elt_spec2.",
            "VernacDefinition",
            "420a037f7e31020008230fccb150b55cc9a7a4ee"
        ],
        [
            "Definition min_elt_3 : forall s, min_elt s = None -> Empty s := M.min_elt_spec3.",
            "VernacDefinition",
            "1583e3e80049dfc4d390b69b5615998c2fea9f9c"
        ],
        [
            "Definition max_elt_1 : forall s x, max_elt s = Some x -> In x s := M.max_elt_spec1.",
            "VernacDefinition",
            "11930951e85baef477eae98fe062baa045c3aefa"
        ],
        [
            "Definition max_elt_2 : forall s x y, max_elt s = Some x -> In y s -> ~ O.lt x y := M.max_elt_spec2.",
            "VernacDefinition",
            "1c90d3bf63127e2e3fc19603e0552574e82376f4"
        ],
        [
            "Definition max_elt_3 : forall s, max_elt s = None -> Empty s := M.max_elt_spec3.",
            "VernacDefinition",
            "4dc6f603d1a69e7b712d7da5f611b464dd7b84db"
        ],
        [
            "Definition elements_3 : forall s, sort O.lt (elements s) := M.elements_spec2.",
            "VernacDefinition",
            "087f924902c4b86f65957eba9e1c3541c8260b17"
        ],
        [
            "Definition choose_3 : forall s s' x y, choose s = Some x -> choose s' = Some y -> Equal s s' -> O.eq x y := M.choose_spec3.",
            "VernacDefinition",
            "a09cb4faf8b1a4265b7683084c962f9db511c7ec"
        ],
        [
            "Definition lt_trans : forall s s' s'', lt s s' -> lt s' s'' -> lt s s'' := @StrictOrder_Transitive _ _ M.lt_strorder.",
            "VernacDefinition",
            "d2a4533d57bbe743ba58eac5be10e8918210208e"
        ],
        [
            "Lemma lt_not_eq : forall s s', lt s s' -> ~ eq s s'.",
            "VernacStartTheoremProof",
            "b07f80795d76f28a66de046f82dc2cf6cb02c965"
        ],
        [
            "unfold lt, eq.",
            "VernacExtend",
            "f23d9f3cec4848073f261288dc3810727ba8c950"
        ],
        [
            "intros s s' Hlt Heq.",
            "VernacExtend",
            "406ce937acfd82992899849598016e5d396dad74"
        ],
        [
            "rewrite Heq in Hlt.",
            "VernacExtend",
            "258db177ddac51269f33f5df567278120981fb37"
        ],
        [
            "apply (StrictOrder_Irreflexive s'); auto.",
            "VernacExtend",
            "b0765b0abbea97fa20b64099e35d2937e984c90a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition compare : forall s s', Compare lt eq s s'.",
            "VernacDefinition",
            "3724f984711d86b00147029fdcbea581b07666e6"
        ],
        [
            "intros s s'; destruct (CompSpec2Type (M.compare_spec s s')); [ apply EQ | apply LT | apply GT ]; auto.",
            "VernacExtend",
            "9f3f002db3f9357750e077e87abc339209f9f0eb"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Module E := O.",
            "VernacDefineModule",
            "b04c02d8173401b36dc29bd0d45a1e413cbba9b6"
        ],
        [
            "End Backport_Sets.",
            "VernacEndSegment",
            "a0ebcc0142f73b347e3affee89d80cfa17a076ae"
        ],
        [
            "Module Update_WSets (E:Equalities.DecidableType) (M:FSetInterface.WS with Definition E.t := E.t with Definition E.eq := E.eq) <: MSetInterface.WSetsOn E.",
            "VernacDefineModule",
            "879ee82763d9d94eea8a2d7a83d439960e65b2e7"
        ],
        [
            "Definition elt := E.t.",
            "VernacDefinition",
            "c01573ae079b75bbdc31b7d5baf6207a2114f9d3"
        ],
        [
            "Definition t := M.t.",
            "VernacDefinition",
            "b3d72cc3faf575c9783921cd3e33f8163dbcab8d"
        ],
        [
            "Implicit Type s : t.",
            "VernacReserve",
            "173cf4e976a84fc5c8254276654cd3ff5806fca9"
        ],
        [
            "Implicit Type x y : elt.",
            "VernacReserve",
            "4480cb6fdd7cb3f3641255df0007006f173f7eb0"
        ],
        [
            "Implicit Type f : elt -> bool.",
            "VernacReserve",
            "a88d308bd5fe07cf8258fd32fdffe67d7a8a96e1"
        ],
        [
            "Definition In : elt -> t -> Prop := M.In.",
            "VernacDefinition",
            "172d79f783729b0cda6ff324fa3fb6fe9bb6e679"
        ],
        [
            "Definition Equal s s' := forall a : elt, In a s <-> In a s'.",
            "VernacDefinition",
            "cd5f6ee7097e7157ccbc10af82ffd932eaf3c423"
        ],
        [
            "Definition Subset s s' := forall a : elt, In a s -> In a s'.",
            "VernacDefinition",
            "106ca6bd7b6e4a40ea51abcc05e3c9af2fc2bee5"
        ],
        [
            "Definition Empty s := forall a : elt, ~ In a s.",
            "VernacDefinition",
            "99dffcced2023a4cba92e934e92ab887beb9ff43"
        ],
        [
            "Definition For_all (P : elt -> Prop) s := forall x, In x s -> P x.",
            "VernacDefinition",
            "4d362106a16edcc40d0eef5faef1552c0586f113"
        ],
        [
            "Definition Exists (P : elt -> Prop) s := exists x, In x s /\\ P x.",
            "VernacDefinition",
            "7a3d224adfc848e82fb49eb1cbd9c21d19ce40b7"
        ],
        [
            "Definition empty : t := M.empty.",
            "VernacDefinition",
            "60e526f72530aab884adf42a2b782ace169d61b2"
        ],
        [
            "Definition is_empty : t -> bool := M.is_empty.",
            "VernacDefinition",
            "ed3328cb99a686bd8f48ad72ff456f6a9a036502"
        ],
        [
            "Definition mem : elt -> t -> bool := M.mem.",
            "VernacDefinition",
            "385f82a7db612a1a8706a445df415000e2b83f65"
        ],
        [
            "Definition add : elt -> t -> t := M.add.",
            "VernacDefinition",
            "77c5afe4213f079c16e6a1c2fe63de6b462bc075"
        ],
        [
            "Definition singleton : elt -> t := M.singleton.",
            "VernacDefinition",
            "79a1feefb60d454881ac3edd63ea34d8e665ec3d"
        ],
        [
            "Definition remove : elt -> t -> t := M.remove.",
            "VernacDefinition",
            "cfb9c3d6607d3c401b035fcb371957a19d45f1c1"
        ],
        [
            "Definition union : t -> t -> t := M.union.",
            "VernacDefinition",
            "6191d6f3a556ff6ba51e28ec14802fc0d6fa4b80"
        ],
        [
            "Definition inter : t -> t -> t := M.inter.",
            "VernacDefinition",
            "994905be025b2f94078aaf6cb8aa89c1003ec7a7"
        ],
        [
            "Definition diff : t -> t -> t := M.diff.",
            "VernacDefinition",
            "5128b4b4d6753669550abca455bf3de25b590d1f"
        ],
        [
            "Definition eq : t -> t -> Prop := M.eq.",
            "VernacDefinition",
            "3bac57c71397f2db5867558f3c293e2992254950"
        ],
        [
            "Definition eq_dec : forall s s', {eq s s'}+{~eq s s'}:= M.eq_dec.",
            "VernacDefinition",
            "c68c7910605be3a049c29e36d228d6e05db32a68"
        ],
        [
            "Definition equal : t -> t -> bool := M.equal.",
            "VernacDefinition",
            "fc3420bffa22733504661ea287cdbb2c6f42eaf7"
        ],
        [
            "Definition subset : t -> t -> bool := M.subset.",
            "VernacDefinition",
            "b288b784ba7f1e7252decd860888d3da2244d40f"
        ],
        [
            "Definition fold : forall A : Type, (elt -> A -> A) -> t -> A -> A := M.fold.",
            "VernacDefinition",
            "e4dffac36a60c77c59d71973069eee03a8c7819a"
        ],
        [
            "Definition for_all : (elt -> bool) -> t -> bool := M.for_all.",
            "VernacDefinition",
            "6b18dff818c548c41b952020ec0a7242da3451dc"
        ],
        [
            "Definition exists_ : (elt -> bool) -> t -> bool := M.exists_.",
            "VernacDefinition",
            "c9f1ddb4cce297aa06bfa1589c9f20be8480a907"
        ],
        [
            "Definition filter : (elt -> bool) -> t -> t := M.filter.",
            "VernacDefinition",
            "83cb399abeaa8395d87dbd7d4afe917d738403cb"
        ],
        [
            "Definition partition : (elt -> bool) -> t -> t * t:= M.partition.",
            "VernacDefinition",
            "ba41d482203e11bddbb52d4768dd52bfa104b0cb"
        ],
        [
            "Definition cardinal : t -> nat := M.cardinal.",
            "VernacDefinition",
            "dbce1d600d26963b3d17c77ea2ef6f471cf4fda2"
        ],
        [
            "Definition elements : t -> list elt := M.elements.",
            "VernacDefinition",
            "527d4affff756f6c738de1b722d0ac340c388c95"
        ],
        [
            "Definition choose : t -> option elt := M.choose.",
            "VernacDefinition",
            "2e0e36d9a3837154f9da27363494a702b955c4a9"
        ],
        [
            "Module MF := FSetFacts.WFacts M.",
            "VernacDefineModule",
            "303f65e4f2e91f2265180149ac1ca4866d508c53"
        ],
        [
            "Instance In_compat : Proper (E.eq==>Logic.eq==>iff) In.",
            "VernacInstance",
            "064aeac2bce0ee5b34b01845f4216bb86a4328c2"
        ],
        [
            "intros x x' Hx s s' Hs.",
            "VernacExtend",
            "a29d7537a4d4986afefd3cf7fdc3543e13430290"
        ],
        [
            "subst.",
            "VernacExtend",
            "ccc9cb848804101be22a0bb6c324861981c5c7f1"
        ],
        [
            "apply MF.In_eq_iff; auto.",
            "VernacExtend",
            "aae1cb12b67e4514ad2cd4928df0a35798b60d44"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance eq_equiv : Equivalence eq := _.",
            "VernacInstance",
            "40e55dd84c200b843f9af967c401dfd20f923d82"
        ],
        [
            "Section Spec.",
            "VernacBeginSection",
            "7149befcee62ca51a0db409eab4bd8ffcf7b52fc"
        ],
        [
            "Variable s s': t.",
            "VernacAssumption",
            "35bc5d98dcdbe83753f467727dc866c24c6874c3"
        ],
        [
            "Variable x y : elt.",
            "VernacAssumption",
            "06d759bbdac2711f4a0194d3ba8a408974451a05"
        ],
        [
            "Lemma mem_spec : mem x s = true <-> In x s.",
            "VernacStartTheoremProof",
            "e0b35e188eb545f306775158c7b0ee92367d1d29"
        ],
        [
            "intros; symmetry; apply MF.mem_iff.",
            "VernacExtend",
            "ffc50321e38bc37fcdd6406eb380cb24ac67f6c2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_spec : equal s s' = true <-> Equal s s'.",
            "VernacStartTheoremProof",
            "61b148e5ac753727a4c3200b1fcd12331709c2f0"
        ],
        [
            "intros; symmetry; apply MF.equal_iff.",
            "VernacExtend",
            "97d7f82144ceb1093e6fefa89b8d41c992814396"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_spec : subset s s' = true <-> Subset s s'.",
            "VernacStartTheoremProof",
            "ea1b99667eb99f550024b3588f6a0f6fe99babc3"
        ],
        [
            "intros; symmetry; apply MF.subset_iff.",
            "VernacExtend",
            "5d4856039c2292da768a83434290ef6ac04630de"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition empty_spec : Empty empty := M.empty_1.",
            "VernacDefinition",
            "78c17e82c7a7fe7bb1d0ede298390c63d45325cf"
        ],
        [
            "Lemma is_empty_spec : is_empty s = true <-> Empty s.",
            "VernacStartTheoremProof",
            "d82028e51d85880d23cdb31c8e4c3c13ec5260e3"
        ],
        [
            "intros; symmetry; apply MF.is_empty_iff.",
            "VernacExtend",
            "4254439e4013a32a494240354dcfdf3efbe55c17"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Declare Equivalent Keys In M.In.",
            "VernacExtend",
            "71e1d6c82c283ceddb2f720df9357bcb9decdada"
        ],
        [
            "Lemma add_spec : In y (add x s) <-> E.eq y x \\/ In y s.",
            "VernacStartTheoremProof",
            "5d415f9b306897ef43460981fc60f2272dc8ea48"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite MF.add_iff.",
            "VernacExtend",
            "0f32f925c642eab5413994a9d3dbcbd97e6ad22f"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_spec : In y (remove x s) <-> In y s /\\ ~E.eq y x.",
            "VernacStartTheoremProof",
            "e33940928b87f5daec300794ac4ce61065238fab"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite MF.remove_iff.",
            "VernacExtend",
            "1e6c3560857a0af1f988e085af7e319718cf775e"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma singleton_spec : In y (singleton x) <-> E.eq y x.",
            "VernacStartTheoremProof",
            "18855ce972ddab01db98b41bf1729b0884776cc2"
        ],
        [
            "intros; rewrite MF.singleton_iff.",
            "VernacExtend",
            "0b2675e37ed24100e49a2f762b45a9d4aade632b"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition union_spec : In x (union s s') <-> In x s \\/ In x s' := @MF.union_iff s s' x.",
            "VernacDefinition",
            "a36dc0af5b914595b187e7d3837c06b742423b28"
        ],
        [
            "Definition inter_spec : In x (inter s s') <-> In x s /\\ In x s' := @MF.inter_iff s s' x.",
            "VernacDefinition",
            "407508156feb03223d01b0e9eef33536ff573bfa"
        ],
        [
            "Definition diff_spec : In x (diff s s') <-> In x s /\\ ~In x s' := @MF.diff_iff s s' x.",
            "VernacDefinition",
            "3784312a30e0f582df55b8b64b5d9f777550a388"
        ],
        [
            "Definition fold_spec : forall (A : Type) (i : A) (f : elt -> A -> A), fold f s i = fold_left (flip f) (elements s) i := @M.fold_1 s.",
            "VernacDefinition",
            "452420d1ea2bb0913373054d6e7ecb654171220f"
        ],
        [
            "Definition cardinal_spec : cardinal s = length (elements s) := @M.cardinal_1 s.",
            "VernacDefinition",
            "65f53e02f7b5aa2afdcf0b4c5adbe6b7b631dcd5"
        ],
        [
            "Lemma elements_spec1 : InA E.eq x (elements s) <-> In x s.",
            "VernacStartTheoremProof",
            "1cb08d17b3a9e9803a797239111e3adca85b5e1c"
        ],
        [
            "intros; symmetry; apply MF.elements_iff.",
            "VernacExtend",
            "99d80f0dacfbe7021506549f7425b0802c67d5d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition elements_spec2w : NoDupA E.eq (elements s) := @M.elements_3w s.",
            "VernacDefinition",
            "a1dc8fc62b3c33111cf2f09f2bc4cb8381351180"
        ],
        [
            "Definition choose_spec1 : choose s = Some x -> In x s := @M.choose_1 s x.",
            "VernacDefinition",
            "c817e58e791c77170fb3dbb0e43c21a24889d36d"
        ],
        [
            "Definition choose_spec2 : choose s = None -> Empty s := @M.choose_2 s.",
            "VernacDefinition",
            "4db0299bb95c31ff9f98c4a42515c33dfb93b326"
        ],
        [
            "Definition filter_spec : forall f, Proper (E.eq==>Logic.eq) f -> (In x (filter f s) <-> In x s /\\ f x = true) := @MF.filter_iff s x.",
            "VernacDefinition",
            "f5b910143ffffa6f9f7bb0aea34ccca971aeeb3a"
        ],
        [
            "Definition partition_spec1 : forall f, Proper (E.eq==>Logic.eq) f -> Equal (fst (partition f s)) (filter f s) := @M.partition_1 s.",
            "VernacDefinition",
            "0b2fe2f4de3408c904d44efff785a233f1fb5bdc"
        ],
        [
            "Definition partition_spec2 : forall f, Proper (E.eq==>Logic.eq) f -> Equal (snd (partition f s)) (filter (fun x => negb (f x)) s) := @M.partition_2 s.",
            "VernacDefinition",
            "48f17c4fd769912c0d8a940c312ce67775f7a11c"
        ],
        [
            "Lemma for_all_spec : forall f, Proper (E.eq==>Logic.eq) f -> (for_all f s = true <-> For_all (fun x => f x = true) s).",
            "VernacStartTheoremProof",
            "562d1bfe07a85f96f733fc3fc9ebf4e3f4aa9e31"
        ],
        [
            "intros; symmetry; apply MF.for_all_iff; auto.",
            "VernacExtend",
            "39d9780b418b8fbaf4a3ba304e58552985d5e0c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_spec : forall f, Proper (E.eq==>Logic.eq) f -> (exists_ f s = true <-> Exists (fun x => f x = true) s).",
            "VernacStartTheoremProof",
            "067fa045daaf87dbff15a212f546375f7eea8cc5"
        ],
        [
            "intros; symmetry; apply MF.exists_iff; auto.",
            "VernacExtend",
            "8617646018b7b4293a8ffd75d1844dc71bb1fbbd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Spec.",
            "VernacEndSegment",
            "5ee638cb91032793de2974877933ead96cae3b7c"
        ],
        [
            "End Update_WSets.",
            "VernacEndSegment",
            "50ef2010a3085293c6270c3ae51c66dfe7de3046"
        ],
        [
            "Module Update_Sets (O:Orders.OrderedType) (M:FSetInterface.S with Definition E.t := O.t with Definition E.eq := O.eq with Definition E.lt := O.lt) <: MSetInterface.Sets with Module E:=O.",
            "VernacDefineModule",
            "06088bfdac2e999bb9d647f9ba771f1ae3e43b8d"
        ],
        [
            "Include Update_WSets O M.",
            "VernacInclude",
            "fd9a0ef0f3003bd8fb1403c9aa3f8d9c2b8c5bce"
        ],
        [
            "Implicit Type s : t.",
            "VernacReserve",
            "173cf4e976a84fc5c8254276654cd3ff5806fca9"
        ],
        [
            "Implicit Type x y : elt.",
            "VernacReserve",
            "4480cb6fdd7cb3f3641255df0007006f173f7eb0"
        ],
        [
            "Definition lt : t -> t -> Prop := M.lt.",
            "VernacDefinition",
            "8a1903476bc110a385d96d0d563912a0c15cc066"
        ],
        [
            "Definition min_elt : t -> option elt := M.min_elt.",
            "VernacDefinition",
            "5c72f4d385267e4d4dd4480b9e141a632308ea72"
        ],
        [
            "Definition max_elt : t -> option elt := M.max_elt.",
            "VernacDefinition",
            "c90f1c4fbf564ebddaab1d9df6cb02ec34f85fab"
        ],
        [
            "Definition min_elt_spec1 : forall s x, min_elt s = Some x -> In x s := M.min_elt_1.",
            "VernacDefinition",
            "78229b1a32fa9f6b7299077913079e72b8431606"
        ],
        [
            "Definition min_elt_spec2 : forall s x y, min_elt s = Some x -> In y s -> ~ O.lt y x := M.min_elt_2.",
            "VernacDefinition",
            "ea1bd6af20e0289aa2bbadf875be0e0e8ecabf90"
        ],
        [
            "Definition min_elt_spec3 : forall s, min_elt s = None -> Empty s := M.min_elt_3.",
            "VernacDefinition",
            "5e8f6b60c8b3e2fe6e7f8a1176caa65c9c4e8ec1"
        ],
        [
            "Definition max_elt_spec1 : forall s x, max_elt s = Some x -> In x s := M.max_elt_1.",
            "VernacDefinition",
            "978035a615eea5f3cea97667c7574f5a302aa39b"
        ],
        [
            "Definition max_elt_spec2 : forall s x y, max_elt s = Some x -> In y s -> ~ O.lt x y := M.max_elt_2.",
            "VernacDefinition",
            "e78988408221ddd5549e999cde436f800b58e179"
        ],
        [
            "Definition max_elt_spec3 : forall s, max_elt s = None -> Empty s := M.max_elt_3.",
            "VernacDefinition",
            "98370c4a5c255425335e34a62d7e52515aa4b522"
        ],
        [
            "Definition elements_spec2 : forall s, sort O.lt (elements s) := M.elements_3.",
            "VernacDefinition",
            "870a60d78a7a42d33398d81d2a9eb991532b59a1"
        ],
        [
            "Definition choose_spec3 : forall s s' x y, choose s = Some x -> choose s' = Some y -> Equal s s' -> O.eq x y := M.choose_3.",
            "VernacDefinition",
            "c420f0969022086f5de9d28417435733284bc9cf"
        ],
        [
            "Instance lt_strorder : StrictOrder lt.",
            "VernacInstance",
            "fa189ac61b1474957ad71f3e51fbb244abde9f22"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros x Hx.",
            "VernacExtend",
            "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
        ],
        [
            "apply (M.lt_not_eq Hx); auto with *.",
            "VernacExtend",
            "e51c3c362205092078f2a31a52350c43366998f0"
        ],
        [
            "exact M.lt_trans.",
            "VernacExtend",
            "0d6c4ebf17c3177b75ba427ba4efc77fa67ecf43"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Instance lt_compat : Proper (eq==>eq==>iff) lt.",
            "VernacInstance",
            "04e2deec4194fc51245d368b9c1ad29da27fd761"
        ],
        [
            "apply proper_sym_impl_iff_2; auto with *.",
            "VernacExtend",
            "eee994524435b39e51e978935650dd48d24678a0"
        ],
        [
            "intros s s' Hs u u' Hu H.",
            "VernacExtend",
            "f850253aa7cbd06b82ab7abf9534fef07cb2439f"
        ],
        [
            "assert (H0 : lt s' u).",
            "VernacExtend",
            "9c34696e34576d9b377daf403707c23db755f994"
        ],
        [
            "destruct (M.compare s' u) as [H'|H'|H']; auto.",
            "VernacExtend",
            "e0b01d143409fc66b1fcebca443e6d53b4bb1428"
        ],
        [
            "elim (M.lt_not_eq H).",
            "VernacExtend",
            "7a6ded9d5e20abc51c1a972eed9c223cbf92e8cf"
        ],
        [
            "transitivity s'; auto with *.",
            "VernacExtend",
            "f61bee25efae45bb29b4aeba645cc6aa3eca09dc"
        ],
        [
            "elim (M.lt_not_eq (M.lt_trans H H')); auto.",
            "VernacExtend",
            "eed32e268531ad6667061e4fcc607e4ca62a7267"
        ],
        [
            "destruct (M.compare s' u') as [H'|H'|H']; auto.",
            "VernacExtend",
            "4787ce56fe29b766c427cedaf4867e4d6423e2d6"
        ],
        [
            "elim (M.lt_not_eq H).",
            "VernacExtend",
            "7a6ded9d5e20abc51c1a972eed9c223cbf92e8cf"
        ],
        [
            "transitivity u'; auto with *.",
            "VernacExtend",
            "91556b584f134084f7c4543dbe88d27815be3392"
        ],
        [
            "transitivity s'; auto with *.",
            "VernacExtend",
            "f61bee25efae45bb29b4aeba645cc6aa3eca09dc"
        ],
        [
            "elim (M.lt_not_eq (M.lt_trans H' H0)); auto with *.",
            "VernacExtend",
            "df0d12efc985d29e8fca315e4e245dfa03b46507"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition compare s s' := match M.compare s s' with | EQ _ => Eq | LT _ => Lt | GT _ => Gt end.",
            "VernacDefinition",
            "31e1b12e37c3884fdc65ed14fdaeb8c7711777f6"
        ],
        [
            "Lemma compare_spec : forall s s', CompSpec eq lt s s' (compare s s').",
            "VernacStartTheoremProof",
            "4b4ee1b57337aa4287a17975aba67bec55b62386"
        ],
        [
            "intros; unfold compare; destruct M.compare; auto.",
            "VernacExtend",
            "0895e5bd903982ff20c340f41f8147be9b229713"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Module E := O.",
            "VernacDefineModule",
            "b04c02d8173401b36dc29bd0d45a1e413cbba9b6"
        ],
        [
            "End Update_Sets.",
            "VernacEndSegment",
            "a8d03eef974683ed04a0908771d920f73cde5214"
        ]
    ],
    "proofs": [
        {
            "name": "lt_not_eq",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "unfold lt, eq.",
                        "VernacExtend",
                        "f23d9f3cec4848073f261288dc3810727ba8c950"
                    ]
                },
                {
                    "command": [
                        "intros s s' Hlt Heq.",
                        "VernacExtend",
                        "406ce937acfd82992899849598016e5d396dad74"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq in Hlt.",
                        "VernacExtend",
                        "258db177ddac51269f33f5df567278120981fb37"
                    ]
                },
                {
                    "command": [
                        "apply (StrictOrder_Irreflexive s'); auto.",
                        "VernacExtend",
                        "b0765b0abbea97fa20b64099e35d2937e984c90a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "intros s s'; destruct (CompSpec2Type (M.compare_spec s s')); [ apply EQ | apply LT | apply GT ]; auto.",
                        "VernacExtend",
                        "9f3f002db3f9357750e077e87abc339209f9f0eb"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "lt_strorder",
            "line_nb": 219,
            "steps": [
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intros x Hx.",
                        "VernacExtend",
                        "4f408fcf0db2619f08da1108b4fc92384e2a5db3"
                    ]
                },
                {
                    "command": [
                        "apply (M.lt_not_eq Hx); auto with *.",
                        "VernacExtend",
                        "e51c3c362205092078f2a31a52350c43366998f0"
                    ]
                },
                {
                    "command": [
                        "exact M.lt_trans.",
                        "VernacExtend",
                        "0d6c4ebf17c3177b75ba427ba4efc77fa67ecf43"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_compat",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "apply proper_sym_impl_iff_2; auto with *.",
                        "VernacExtend",
                        "eee994524435b39e51e978935650dd48d24678a0"
                    ]
                },
                {
                    "command": [
                        "intros s s' Hs u u' Hu H.",
                        "VernacExtend",
                        "f850253aa7cbd06b82ab7abf9534fef07cb2439f"
                    ]
                },
                {
                    "command": [
                        "assert (H0 : lt s' u).",
                        "VernacExtend",
                        "9c34696e34576d9b377daf403707c23db755f994"
                    ]
                },
                {
                    "command": [
                        "destruct (M.compare s' u) as [H'|H'|H']; auto.",
                        "VernacExtend",
                        "e0b01d143409fc66b1fcebca443e6d53b4bb1428"
                    ]
                },
                {
                    "command": [
                        "elim (M.lt_not_eq H).",
                        "VernacExtend",
                        "7a6ded9d5e20abc51c1a972eed9c223cbf92e8cf"
                    ]
                },
                {
                    "command": [
                        "transitivity s'; auto with *.",
                        "VernacExtend",
                        "f61bee25efae45bb29b4aeba645cc6aa3eca09dc"
                    ]
                },
                {
                    "command": [
                        "elim (M.lt_not_eq (M.lt_trans H H')); auto.",
                        "VernacExtend",
                        "eed32e268531ad6667061e4fcc607e4ca62a7267"
                    ]
                },
                {
                    "command": [
                        "destruct (M.compare s' u') as [H'|H'|H']; auto.",
                        "VernacExtend",
                        "4787ce56fe29b766c427cedaf4867e4d6423e2d6"
                    ]
                },
                {
                    "command": [
                        "elim (M.lt_not_eq H).",
                        "VernacExtend",
                        "7a6ded9d5e20abc51c1a972eed9c223cbf92e8cf"
                    ]
                },
                {
                    "command": [
                        "transitivity u'; auto with *.",
                        "VernacExtend",
                        "91556b584f134084f7c4543dbe88d27815be3392"
                    ]
                },
                {
                    "command": [
                        "transitivity s'; auto with *.",
                        "VernacExtend",
                        "f61bee25efae45bb29b4aeba645cc6aa3eca09dc"
                    ]
                },
                {
                    "command": [
                        "elim (M.lt_not_eq (M.lt_trans H' H0)); auto with *.",
                        "VernacExtend",
                        "df0d12efc985d29e8fca315e4e245dfa03b46507"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_spec",
            "line_nb": 240,
            "steps": [
                {
                    "command": [
                        "intros; unfold compare; destruct M.compare; auto.",
                        "VernacExtend",
                        "0895e5bd903982ff20c340f41f8147be9b229713"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}