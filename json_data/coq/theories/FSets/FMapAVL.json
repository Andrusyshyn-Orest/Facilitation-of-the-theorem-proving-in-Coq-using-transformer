{
    "filename": "theories/FSets/FMapAVL.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import FunInd FMapInterface FMapList ZArith Int.",
            "VernacRequire",
            "f23b0ba795dc48387b07b78c47b8d3a06bb9b36c"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Notation \"s #1\" := (fst s) (at level 9, format \"s '#1'\") : pair_scope.",
            "VernacNotation",
            "9525e701785da7533020cedeec2c41712866543c"
        ],
        [
            "Notation \"s #2\" := (snd s) (at level 9, format \"s '#2'\") : pair_scope.",
            "VernacNotation",
            "327b45dc7a8ac08cedc37bb33f247a2ac5ff4814"
        ],
        [
            "Module Raw (Import I:Int)(X: OrderedType).",
            "VernacDefineModule",
            "6c7bd9e95fd57583b92082c915e517deec7a3a67"
        ],
        [
            "Local Open Scope pair_scope.",
            "VernacOpenCloseScope",
            "dc0dcd7d851fdcb4f21419978fcd045b285d11f4"
        ],
        [
            "Local Open Scope lazy_bool_scope.",
            "VernacOpenCloseScope",
            "82821dc944d698b2d14658b321a7dfca6f09554d"
        ],
        [
            "Local Open Scope Int_scope.",
            "VernacOpenCloseScope",
            "7ceb4e893c3620e71cc3f8f031adbda11a943f86"
        ],
        [
            "Local Notation int := I.t.",
            "VernacSyntacticDefinition",
            "9e0664327a1f0963deed0dedf5650ea2ed18c469"
        ],
        [
            "Definition key := X.t.",
            "VernacDefinition",
            "a4017bb4ea3d793c2c3a043de86c8620ded974b2"
        ],
        [
            "Hint Transparent key.",
            "VernacHints",
            "6e951250ef0415b21eca916df2eb0ef5fc023496"
        ],
        [
            "Section Elt.",
            "VernacBeginSection",
            "7d8c2b7c85358610d3707ffaa378f25da37c746b"
        ],
        [
            "Variable elt : Type.",
            "VernacAssumption",
            "b310aa6dfd45260477c670b93268036cda9cb86b"
        ],
        [
            "Inductive tree := | Leaf : tree | Node : tree -> key -> elt -> tree -> int -> tree.",
            "VernacInductive",
            "894f596633274f04620479c1459d7e853b77bb0a"
        ],
        [
            "Notation t := tree.",
            "VernacSyntacticDefinition",
            "57048785fa3c27a131beb0ac5d8ddb1403ebfb30"
        ],
        [
            "Definition height (m : t) : int := match m with | Leaf => 0 | Node _ _ _ _ h => h end.",
            "VernacDefinition",
            "1896fbad96ceb7864484b4e721bc61243beecbc5"
        ],
        [
            "Fixpoint cardinal (m : t) : nat := match m with | Leaf => 0%nat | Node l _ _ r _ => S (cardinal l + cardinal r) end.",
            "VernacFixpoint",
            "56f44237e78d6e0920df0a4ecf137650c0d49799"
        ],
        [
            "Definition empty := Leaf.",
            "VernacDefinition",
            "63395e1518cebe061823ccfe7da24dc611f2356f"
        ],
        [
            "Definition is_empty m := match m with Leaf => true | _ => false end.",
            "VernacDefinition",
            "8a6bc4fb04a7fa2fae9885a359b091ec6773efd8"
        ],
        [
            "Fixpoint mem x m : bool := match m with | Leaf => false | Node l y _ r _ => match X.compare x y with | LT _ => mem x l | EQ _ => true | GT _ => mem x r end end.",
            "VernacFixpoint",
            "8095467da8ac46f898348c33dd1473a59fefc914"
        ],
        [
            "Fixpoint find x m : option elt := match m with | Leaf => None | Node l y d r _ => match X.compare x y with | LT _ => find x l | EQ _ => Some d | GT _ => find x r end end.",
            "VernacFixpoint",
            "2898f775396eae35175a4fd95abfafa46a6f42ec"
        ],
        [
            "Definition create l x e r := Node l x e r (max (height l) (height r) + 1).",
            "VernacDefinition",
            "c1c7d05b16a544080e7b6ee669a3c8f1f16e035c"
        ],
        [
            "Definition assert_false := create.",
            "VernacDefinition",
            "9260a3671d9da44f9d1af0b2a06172956019b2f2"
        ],
        [
            "Fixpoint bal l x d r := let hl := height l in let hr := height r in if gt_le_dec hl (hr+2) then match l with | Leaf => assert_false l x d r | Node ll lx ld lr _ => if ge_lt_dec (height ll) (height lr) then create ll lx ld (create lr x d r) else match lr with | Leaf => assert_false l x d r | Node lrl lrx lrd lrr _ => create (create ll lx ld lrl) lrx lrd (create lrr x d r) end end else if gt_le_dec hr (hl+2) then match r with | Leaf => assert_false l x d r | Node rl rx rd rr _ => if ge_lt_dec (height rr) (height rl) then create (create l x d rl) rx rd rr else match rl with | Leaf => assert_false l x d r | Node rll rlx rld rlr _ => create (create l x d rll) rlx rld (create rlr rx rd rr) end end else create l x d r.",
            "VernacFixpoint",
            "e9117f4325bbc7a8257a2057ae7338723611fd9b"
        ],
        [
            "Fixpoint add x d m := match m with | Leaf => Node Leaf x d Leaf 1 | Node l y d' r h => match X.compare x y with | LT _ => bal (add x d l) y d' r | EQ _ => Node l y d r h | GT _ => bal l y d' (add x d r) end end.",
            "VernacFixpoint",
            "0e4b48658405fed9c51385f7fe2a2a2e47cdf03b"
        ],
        [
            "Fixpoint remove_min l x d r : t*(key*elt) := match l with | Leaf => (r,(x,d)) | Node ll lx ld lr lh => let (l',m) := remove_min ll lx ld lr in (bal l' x d r, m) end.",
            "VernacFixpoint",
            "2071adc37e73d2d91de3654a5e299b2e5c983c0b"
        ],
        [
            "Fixpoint merge s1 s2 := match s1,s2 with | Leaf, _ => s2 | _, Leaf => s1 | _, Node l2 x2 d2 r2 h2 => match remove_min l2 x2 d2 r2 with (s2',(x,d)) => bal s1 x d s2' end end.",
            "VernacFixpoint",
            "c513b9060efdc02d985570434b1c6f8e8c8db324"
        ],
        [
            "Fixpoint remove x m := match m with | Leaf => Leaf | Node l y d r h => match X.compare x y with | LT _ => bal (remove x l) y d r | EQ _ => merge l r | GT _ => bal l y d (remove x r) end end.",
            "VernacFixpoint",
            "e5509f4822a8168fd09b434e8ba7f7828dca9ca9"
        ],
        [
            "Fixpoint join l : key -> elt -> t -> t := match l with | Leaf => add | Node ll lx ld lr lh => fun x d => fix join_aux (r:t) : t := match r with | Leaf => add x d l | Node rl rx rd rr rh => if gt_le_dec lh (rh+2) then bal ll lx ld (join lr x d r) else if gt_le_dec rh (lh+2) then bal (join_aux rl) rx rd rr else create l x d r end end.",
            "VernacFixpoint",
            "1a9e016b633980ce4539d5c485c407d0bc1697e6"
        ],
        [
            "Record triple := mktriple { t_left:t; t_opt:option elt; t_right:t }.",
            "VernacInductive",
            "37f68499118c432ebb54ec09a8bdf55b9a0be940"
        ],
        [
            "Notation \"<< l , b , r >>\" := (mktriple l b r) (at level 9).",
            "VernacNotation",
            "0cf956727fbec025b2823a63c64fa001626a9ad1"
        ],
        [
            "Fixpoint split x m : triple := match m with | Leaf => << Leaf, None, Leaf >> | Node l y d r h => match X.compare x y with | LT _ => let (ll,o,rl) := split x l in << ll, o, join rl y d r >> | EQ _ => << l, Some d, r >> | GT _ => let (rl,o,rr) := split x r in << join l y d rl, o, rr >> end end.",
            "VernacFixpoint",
            "8f133907a1b85271f56de91d4922e540f46d67e3"
        ],
        [
            "Definition concat m1 m2 := match m1, m2 with | Leaf, _ => m2 | _ , Leaf => m1 | _, Node l2 x2 d2 r2 _ => let (m2',xd) := remove_min l2 x2 d2 r2 in join m1 xd#1 xd#2 m2' end.",
            "VernacDefinition",
            "304236c40e8c05d2b615066da5f6499a57af0784"
        ],
        [
            "Fixpoint elements_aux (acc : list (key*elt)) m : list (key*elt) := match m with | Leaf => acc | Node l x d r _ => elements_aux ((x,d) :: elements_aux acc r) l end.",
            "VernacFixpoint",
            "aaa736f57d2f1e15b656a8fe0c419db018d5a415"
        ],
        [
            "Definition elements := elements_aux nil.",
            "VernacDefinition",
            "c48e25d1f68f4a0cfbf219ced502ef2793958dce"
        ],
        [
            "Fixpoint fold (A : Type) (f : key -> elt -> A -> A) (m : t) : A -> A := fun a => match m with | Leaf => a | Node l x d r _ => fold f r (f x d (fold f l a)) end.",
            "VernacFixpoint",
            "0abea8f7c175a3409c216aadf71a97f0617607a8"
        ],
        [
            "Variable cmp : elt->elt->bool.",
            "VernacAssumption",
            "44ec5f8194e3ecf4368d8d64a6d995481d6114a9"
        ],
        [
            "Inductive enumeration := | End : enumeration | More : key -> elt -> t -> enumeration -> enumeration.",
            "VernacInductive",
            "7d493eb3329c005f5880d258f48b1f0eb3c9fd96"
        ],
        [
            "Fixpoint cons m e : enumeration := match m with | Leaf => e | Node l x d r h => cons l (More x d r e) end.",
            "VernacFixpoint",
            "bbf53f44d963305a522c563235526e535afcb3b2"
        ],
        [
            "Definition equal_more x1 d1 (cont:enumeration->bool) e2 := match e2 with | End => false | More x2 d2 r2 e2 => match X.compare x1 x2 with | EQ _ => cmp d1 d2 &&& cont (cons r2 e2) | _ => false end end.",
            "VernacDefinition",
            "2c54d2882a0ff7030246e9de62bdd7fd284dc072"
        ],
        [
            "Fixpoint equal_cont m1 (cont:enumeration->bool) e2 := match m1 with | Leaf => cont e2 | Node l1 x1 d1 r1 _ => equal_cont l1 (equal_more x1 d1 (equal_cont r1 cont)) e2 end.",
            "VernacFixpoint",
            "dddd3437f2a5c5dceba34e1f47f79bdbfc83f8df"
        ],
        [
            "Definition equal_end e2 := match e2 with End => true | _ => false end.",
            "VernacDefinition",
            "465294a20d3fcd274de5bf675f38d497c1250610"
        ],
        [
            "Definition equal m1 m2 := equal_cont m1 equal_end (cons m2 End).",
            "VernacDefinition",
            "28b7cb62a5ad9bc23c9cbeeadad55568b04392ed"
        ],
        [
            "End Elt.",
            "VernacEndSegment",
            "ef6686463d3f7dfcb40f4805cf8f45019f83fdad"
        ],
        [
            "Notation t := tree.",
            "VernacSyntacticDefinition",
            "57048785fa3c27a131beb0ac5d8ddb1403ebfb30"
        ],
        [
            "Notation \"<< l , b , r >>\" := (mktriple l b r) (at level 9).",
            "VernacNotation",
            "0cf956727fbec025b2823a63c64fa001626a9ad1"
        ],
        [
            "Notation \"t #l\" := (t_left t) (at level 9, format \"t '#l'\").",
            "VernacNotation",
            "48c7313034d6161f17ead1c22ecc24fbc4d0ee7f"
        ],
        [
            "Notation \"t #o\" := (t_opt t) (at level 9, format \"t '#o'\").",
            "VernacNotation",
            "3fda3c58ea8a8c34a3c0309f3616af0c1976576f"
        ],
        [
            "Notation \"t #r\" := (t_right t) (at level 9, format \"t '#r'\").",
            "VernacNotation",
            "9e902b13ccf47fb4ca2a1c34bbaf7e2edee663cc"
        ],
        [
            "Fixpoint map (elt elt' : Type)(f : elt -> elt')(m : t elt) : t elt' := match m with | Leaf _ => Leaf _ | Node l x d r h => Node (map f l) x (f d) (map f r) h end.",
            "VernacFixpoint",
            "48fc705f054efcc441f69ba3a8b860253dea8b6f"
        ],
        [
            "Fixpoint mapi (elt elt' : Type)(f : key -> elt -> elt')(m : t elt) : t elt' := match m with | Leaf _ => Leaf _ | Node l x d r h => Node (mapi f l) x (f x d) (mapi f r) h end.",
            "VernacFixpoint",
            "9fa2bb4f0538eb0acb936a56f9bceaf1ec2fd6b9"
        ],
        [
            "Fixpoint map_option (elt elt' : Type)(f : key -> elt -> option elt')(m : t elt) : t elt' := match m with | Leaf _ => Leaf _ | Node l x d r h => match f x d with | Some d' => join (map_option f l) x d' (map_option f r) | None => concat (map_option f l) (map_option f r) end end.",
            "VernacFixpoint",
            "72c65383cc2ca6b5eabf20880a98bc6dc58ba4e9"
        ],
        [
            "Section Map2_opt.",
            "VernacBeginSection",
            "059752336374022831adc958a93190abd0679419"
        ],
        [
            "Variable elt elt' elt'' : Type.",
            "VernacAssumption",
            "bf8f6f82bf5fcf2b225f5a782e20a1205b1ec879"
        ],
        [
            "Variable f : key -> elt -> option elt' -> option elt''.",
            "VernacAssumption",
            "f8292fe09825370e9d2d86b82699e2781ffd7282"
        ],
        [
            "Variable mapl : t elt -> t elt''.",
            "VernacAssumption",
            "c34b564f43720c603f04fde4285977f85d96f776"
        ],
        [
            "Variable mapr : t elt' -> t elt''.",
            "VernacAssumption",
            "1935c39a36c0932adcc9cdd325e9545e609b2c01"
        ],
        [
            "Fixpoint map2_opt m1 m2 := match m1, m2 with | Leaf _, _ => mapr m2 | _, Leaf _ => mapl m1 | Node l1 x1 d1 r1 h1, _ => let (l2',o2,r2') := split x1 m2 in match f x1 d1 o2 with | Some e => join (map2_opt l1 l2') x1 e (map2_opt r1 r2') | None => concat (map2_opt l1 l2') (map2_opt r1 r2') end end.",
            "VernacFixpoint",
            "5c289d07a0b3bb8bb8bec331930cbfbb612376d1"
        ],
        [
            "End Map2_opt.",
            "VernacEndSegment",
            "44b12ccb48a1c9067a5347f5397e83ab0cc4df04"
        ],
        [
            "Section Map2.",
            "VernacBeginSection",
            "a20fcc0973d231a9779b32459547d72ce8555020"
        ],
        [
            "Variable elt elt' elt'' : Type.",
            "VernacAssumption",
            "bf8f6f82bf5fcf2b225f5a782e20a1205b1ec879"
        ],
        [
            "Variable f : option elt -> option elt' -> option elt''.",
            "VernacAssumption",
            "5c2bf6fde81f6e3dd77961f7c70459242790763c"
        ],
        [
            "Definition map2 : t elt -> t elt' -> t elt'' := map2_opt (fun _ d o => f (Some d) o) (map_option (fun _ d => f (Some d) None)) (map_option (fun _ d' => f None (Some d'))).",
            "VernacDefinition",
            "3aad693c0c38840a5e1bd05694fbe23ae213f579"
        ],
        [
            "End Map2.",
            "VernacEndSegment",
            "203f30e285aaeffd619bfa6c0902c22eb06c5f17"
        ],
        [
            "Section Invariants.",
            "VernacBeginSection",
            "5d8baf04325f6a5f85e66374c1b02ac3363e050c"
        ],
        [
            "Variable elt : Type.",
            "VernacAssumption",
            "b310aa6dfd45260477c670b93268036cda9cb86b"
        ],
        [
            "Inductive MapsTo (x : key)(e : elt) : t elt -> Prop := | MapsRoot : forall l r h y, X.eq x y -> MapsTo x e (Node l y e r h) | MapsLeft : forall l r h y e', MapsTo x e l -> MapsTo x e (Node l y e' r h) | MapsRight : forall l r h y e', MapsTo x e r -> MapsTo x e (Node l y e' r h).",
            "VernacInductive",
            "aba01cd7ce211344b0513e888e0c30149dcd6ff2"
        ],
        [
            "Inductive In (x : key) : t elt -> Prop := | InRoot : forall l r h y e, X.eq x y -> In x (Node l y e r h) | InLeft : forall l r h y e', In x l -> In x (Node l y e' r h) | InRight : forall l r h y e', In x r -> In x (Node l y e' r h).",
            "VernacInductive",
            "b6d14dc0ef75ccb4b4cef048dd0d0812952a8ef4"
        ],
        [
            "Definition In0 k m := exists e:elt, MapsTo k e m.",
            "VernacDefinition",
            "f3c21ad2db7ed2bf2741566da779246d3ae602b6"
        ],
        [
            "Definition lt_tree x m := forall y, In y m -> X.lt y x.",
            "VernacDefinition",
            "fa29cc520afef5995100c854401f586553695d15"
        ],
        [
            "Definition gt_tree x m := forall y, In y m -> X.lt x y.",
            "VernacDefinition",
            "5b15a5ff962f3af0696d70decac42701196e3b47"
        ],
        [
            "Inductive bst : t elt -> Prop := | BSLeaf : bst (Leaf _) | BSNode : forall x e l r h, bst l -> bst r -> lt_tree x l -> gt_tree x r -> bst (Node l x e r h).",
            "VernacInductive",
            "c9f8a91b467cfc033226eba3d9c8b094b75cd7f1"
        ],
        [
            "End Invariants.",
            "VernacEndSegment",
            "e58d9d160c8fddec4b2351b31156d891bc8bf906"
        ],
        [
            "Module Proofs.",
            "VernacDefineModule",
            "0edc949ca7c490c1b423533db13f70219d34dbe5"
        ],
        [
            "Module MX := OrderedTypeFacts X.",
            "VernacDefineModule",
            "475213dc98f0d74696bd3156472afe1aa1df1dad"
        ],
        [
            "Module PX := KeyOrderedType X.",
            "VernacDefineModule",
            "bc80aa67dcdc482bcd397cc067798e7bcfcb4dcd"
        ],
        [
            "Module L := FMapList.Raw X.",
            "VernacDefineModule",
            "e18da445d5ef7a5305430c49db13e7eb883e4268"
        ],
        [
            "Functional Scheme mem_ind := Induction for mem Sort Prop.",
            "VernacExtend",
            "2555acffe65d4cbb5aa7be61ddf86ac771496ea5"
        ],
        [
            "Functional Scheme find_ind := Induction for find Sort Prop.",
            "VernacExtend",
            "8bf3978a974b4fa9727db26fe6290c2498816625"
        ],
        [
            "Functional Scheme bal_ind := Induction for bal Sort Prop.",
            "VernacExtend",
            "2ffffcfca85460d2d138f84a79e16a058b0ef4cd"
        ],
        [
            "Functional Scheme add_ind := Induction for add Sort Prop.",
            "VernacExtend",
            "ce48ae28c83926e82e9bb12f5e84bdd46b5911f3"
        ],
        [
            "Functional Scheme remove_min_ind := Induction for remove_min Sort Prop.",
            "VernacExtend",
            "d755a6a77cc7801b11200f8a7370a2a60a63bf52"
        ],
        [
            "Functional Scheme merge_ind := Induction for merge Sort Prop.",
            "VernacExtend",
            "575274cc3f3eeee7d5e2bf1f3afed5b6b530bce0"
        ],
        [
            "Functional Scheme remove_ind := Induction for remove Sort Prop.",
            "VernacExtend",
            "824da04085f07dd4b4507e77e523a45ca1a8a6ce"
        ],
        [
            "Functional Scheme concat_ind := Induction for concat Sort Prop.",
            "VernacExtend",
            "f61eb4d3521b7a4684e388c80b90c59f2970b02d"
        ],
        [
            "Functional Scheme split_ind := Induction for split Sort Prop.",
            "VernacExtend",
            "e1b5034161426a1c9945b840ea5f62908654bea4"
        ],
        [
            "Functional Scheme map_option_ind := Induction for map_option Sort Prop.",
            "VernacExtend",
            "279f928322657cc934a8f692d04af937e4254db4"
        ],
        [
            "Functional Scheme map2_opt_ind := Induction for map2_opt Sort Prop.",
            "VernacExtend",
            "2c69906338ad4e8f4f34840c0bb27de1c037762d"
        ],
        [
            "Hint Constructors tree MapsTo In bst.",
            "VernacHints",
            "377ee16e3f03434ce587f2f9caf73bc6200ea819"
        ],
        [
            "Hint Unfold lt_tree gt_tree.",
            "VernacHints",
            "0fe7866bada75bcbe13f3246f19be1a9ddaab2e4"
        ],
        [
            "Tactic Notation \"factornode\" ident(l) ident(x) ident(d) ident(r) ident(h) \"as\" ident(s) := set (s:=Node l x d r h) in *; clearbody s; clear l x d r h.",
            "VernacExtend",
            "1d84a4cfae7894c214f5df9bb34f0f8312a44f20"
        ],
        [
            "Ltac clearf := match goal with | H : (@Logic.eq (Compare _ _ _ _) _ _) |- _ => clear H; clearf | H : (@Logic.eq (sumbool _ _) _ _) |- _ => clear H; clearf | _ => idtac end.",
            "VernacExtend",
            "53cc284c571abc42947a0c5be068f4940b0502af"
        ],
        [
            "Ltac inv f := match goal with | H:f (Leaf _) |- _ => inversion_clear H; inv f | H:f _ (Leaf _) |- _ => inversion_clear H; inv f | H:f _ _ (Leaf _) |- _ => inversion_clear H; inv f | H:f _ _ _ (Leaf _) |- _ => inversion_clear H; inv f | H:f (Node _ _ _ _ _) |- _ => inversion_clear H; inv f | H:f _ (Node _ _ _ _ _) |- _ => inversion_clear H; inv f | H:f _ _ (Node _ _ _ _ _) |- _ => inversion_clear H; inv f | H:f _ _ _ (Node _ _ _ _ _) |- _ => inversion_clear H; inv f | _ => idtac end.",
            "VernacExtend",
            "e0ef237f4a1b65ca9ead92c57c2226dce14b82fc"
        ],
        [
            "Ltac inv_all f := match goal with | H: f _ |- _ => inversion_clear H; inv f | H: f _ _ |- _ => inversion_clear H; inv f | H: f _ _ _ |- _ => inversion_clear H; inv f | H: f _ _ _ _ |- _ => inversion_clear H; inv f | _ => idtac end.",
            "VernacExtend",
            "b46d7675d79c771760a8fc58c783b9c5cbccc3f8"
        ],
        [
            "Ltac order := match goal with | U: lt_tree _ ?s, V: In _ ?s |- _ => generalize (U _ V); clear U; order | U: gt_tree _ ?s, V: In _ ?s |- _ => generalize (U _ V); clear U; order | _ => MX.order end.",
            "VernacExtend",
            "5770965abd152888501de19f377d0e304cce4c8d"
        ],
        [
            "Ltac intuition_in := repeat (intuition; inv In; inv MapsTo).",
            "VernacExtend",
            "8710c2259c0b758c3f55221565040e57872b6438"
        ],
        [
            "Ltac join_tac := intros l; induction l as [| ll _ lx ld lr Hlr lh]; [ | intros x d r; induction r as [| rl Hrl rx rd rr _ rh]; unfold join; [ | destruct (gt_le_dec lh (rh+2)) as [GT|LE]; [ match goal with |- context [ bal ?u ?v ?w ?z ] => replace (bal u v w z) with (bal ll lx ld (join lr x d (Node rl rx rd rr rh))); [ | auto] end | destruct (gt_le_dec rh (lh+2)) as [GT'|LE']; [ match goal with |- context [ bal ?u ?v ?w ?z ] => replace (bal u v w z) with (bal (join (Node ll lx ld lr lh) x d rl) rx rd rr); [ | auto] end | ] ] ] ]; intros.",
            "VernacExtend",
            "4d86b824be2ffffab4806fcbae25b5eacf9cd501"
        ],
        [
            "Section Elt.",
            "VernacBeginSection",
            "7d8c2b7c85358610d3707ffaa378f25da37c746b"
        ],
        [
            "Variable elt:Type.",
            "VernacAssumption",
            "b310aa6dfd45260477c670b93268036cda9cb86b"
        ],
        [
            "Implicit Types m r : t elt.",
            "VernacReserve",
            "f93820f56337dfc84a5a07aade23fdcb7b1724ca"
        ],
        [
            "Lemma MapsTo_In : forall k e m, MapsTo k e m -> In k m.",
            "VernacStartTheoremProof",
            "f1ce0839a4149537423dd624af8dc0022545f437"
        ],
        [
            "induction 1; auto.",
            "VernacExtend",
            "1f706f8985097cf30b2449a4fda927a48fc6a84a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve MapsTo_In.",
            "VernacHints",
            "67e3281fc29e38ba9fb85982850adc144a390894"
        ],
        [
            "Lemma In_MapsTo : forall k m, In k m -> exists e, MapsTo k e m.",
            "VernacStartTheoremProof",
            "0c79c5a0fd5b73c77b87c204641011426ba72663"
        ],
        [
            "induction 1; try destruct IHIn as (e,He); exists e; auto.",
            "VernacExtend",
            "e7e950a4740e41d7617fae3cd426c9939edcff9b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_alt : forall k m, In0 k m <-> In k m.",
            "VernacStartTheoremProof",
            "ea816e4608728b0dbc150da72b7b4a3c56d220e9"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros (e,H); eauto.",
            "VernacExtend",
            "4b7a65331fd976749477fc83d06bec5d93f8498c"
        ],
        [
            "unfold In0; apply In_MapsTo; auto.",
            "VernacExtend",
            "834c402f529b13ff697c9e586647f03ef9c16aee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma MapsTo_1 : forall m x y e, X.eq x y -> MapsTo x e m -> MapsTo y e m.",
            "VernacStartTheoremProof",
            "c57f2ff98b2f67aa95d09ad6d4ecf468141aef60"
        ],
        [
            "induction m; simpl; intuition_in; eauto.",
            "VernacExtend",
            "27f41e5fff1ecd3ff157e319b31c58856f60c81a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Immediate MapsTo_1.",
            "VernacHints",
            "dd312b6066151aa11f69554a6547698a99fb550a"
        ],
        [
            "Lemma In_1 : forall m x y, X.eq x y -> In x m -> In y m.",
            "VernacStartTheoremProof",
            "5bb2aaaa7ecc254c4c3c9ac7c186ec31e2d40c5e"
        ],
        [
            "intros m x y; induction m; simpl; intuition_in; eauto.",
            "VernacExtend",
            "9529ed25ddb3a82282c5f6fa99fd295045310cc3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma In_node_iff : forall l x e r h y, In y (Node l x e r h) <-> In y l \\/ X.eq y x \\/ In y r.",
            "VernacStartTheoremProof",
            "e70b0c05ae4bc542c499aaa3e3604b89ad148377"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_leaf : forall x, lt_tree x (Leaf elt).",
            "VernacStartTheoremProof",
            "5b74bbffc03a3ba619495f9295629d30ba2af19f"
        ],
        [
            "unfold lt_tree; intros; intuition_in.",
            "VernacExtend",
            "625b4053f510ae37d54db8f5019b66e4eafdf70c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gt_leaf : forall x, gt_tree x (Leaf elt).",
            "VernacStartTheoremProof",
            "c4edf671e38789cfd6d782eb2071812a2a718ab2"
        ],
        [
            "unfold gt_tree; intros; intuition_in.",
            "VernacExtend",
            "db580a1c4868ec59e703a8bbfae3025b3bef204f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_tree_node : forall x y l r e h, lt_tree x l -> lt_tree x r -> X.lt y x -> lt_tree x (Node l y e r h).",
            "VernacStartTheoremProof",
            "1232d06cc763773e738d559335b85f573f1f57ff"
        ],
        [
            "unfold lt_tree in *; intuition_in; order.",
            "VernacExtend",
            "a69ebe92ad8da29e65ea76cd3b4fe9dfee3e6374"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gt_tree_node : forall x y l r e h, gt_tree x l -> gt_tree x r -> X.lt x y -> gt_tree x (Node l y e r h).",
            "VernacStartTheoremProof",
            "35c008c601ea064ea97677a4fa1774f095e5b1e1"
        ],
        [
            "unfold gt_tree in *; intuition_in; order.",
            "VernacExtend",
            "7bf8d840a25ff363d700985442a8ecb14c6d4a76"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve lt_leaf gt_leaf lt_tree_node gt_tree_node.",
            "VernacHints",
            "332bb7884cf6b60da2d557c6b63990fbce57be67"
        ],
        [
            "Lemma lt_left : forall x y l r e h, lt_tree x (Node l y e r h) -> lt_tree x l.",
            "VernacStartTheoremProof",
            "7b0455c078965b3f58f05abe8c94a4931f5d5e7e"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_right : forall x y l r e h, lt_tree x (Node l y e r h) -> lt_tree x r.",
            "VernacStartTheoremProof",
            "bdb89db1dacd61384a05230ddc887a52321d028a"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gt_left : forall x y l r e h, gt_tree x (Node l y e r h) -> gt_tree x l.",
            "VernacStartTheoremProof",
            "caea271e145ccc17cf31b4e81dbc361e9bf374c2"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gt_right : forall x y l r e h, gt_tree x (Node l y e r h) -> gt_tree x r.",
            "VernacStartTheoremProof",
            "557add3e72eaf169a3411249fb27e2b898cddaa9"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve lt_left lt_right gt_left gt_right.",
            "VernacHints",
            "0d1cb94ac9a9a4e050029b4ad292079f956c3c62"
        ],
        [
            "Lemma lt_tree_not_in : forall x m, lt_tree x m -> ~ In x m.",
            "VernacStartTheoremProof",
            "1e7aa4570a29c91ec58683b00ae4ff9ab9535b17"
        ],
        [
            "intros; intro; generalize (H _ H0); order.",
            "VernacExtend",
            "0b27c7c6f0ec75fd2dd0356154568b36d0b60952"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_tree_trans : forall x y, X.lt x y -> forall m, lt_tree x m -> lt_tree y m.",
            "VernacStartTheoremProof",
            "3eaa4be5b55f2379dc6ac1634efb061b5333eb8b"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gt_tree_not_in : forall x m, gt_tree x m -> ~ In x m.",
            "VernacStartTheoremProof",
            "148fd5648fa3ed1e8ddcfae3281cf78dc80393fa"
        ],
        [
            "intros; intro; generalize (H _ H0); order.",
            "VernacExtend",
            "0b27c7c6f0ec75fd2dd0356154568b36d0b60952"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma gt_tree_trans : forall x y, X.lt y x -> forall m, gt_tree x m -> gt_tree y m.",
            "VernacStartTheoremProof",
            "8ec51da555561b66362429e78063e1279277ce2b"
        ],
        [
            "eauto.",
            "VernacExtend",
            "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve lt_tree_not_in lt_tree_trans gt_tree_not_in gt_tree_trans.",
            "VernacHints",
            "f1d777605d718b81fa14504ec40c70f7e5846d45"
        ],
        [
            "Definition Empty m := forall (a:key)(e:elt) , ~ MapsTo a e m.",
            "VernacDefinition",
            "8d194df0e3c0baf7ef86194fa2dae620855a84ff"
        ],
        [
            "Lemma empty_bst : bst (empty elt).",
            "VernacStartTheoremProof",
            "c8b131bd03c1034a6749254813cf799b9d873e52"
        ],
        [
            "unfold empty; auto.",
            "VernacExtend",
            "a2693eb12ba268d474a985e95db0bb58ccb52aa5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma empty_1 : Empty (empty elt).",
            "VernacStartTheoremProof",
            "970880673e688a239fd32762507ce8addfa646c0"
        ],
        [
            "unfold empty, Empty; intuition_in.",
            "VernacExtend",
            "919d1cd8481b9d89ab0c54c9c0d23bc2e6c3488f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_empty_1 : forall m, Empty m -> is_empty m = true.",
            "VernacStartTheoremProof",
            "628b7ce292bdf73b2cba9ef8febb80dbce9ab9ca"
        ],
        [
            "destruct m as [|r x e l h]; simpl; auto.",
            "VernacExtend",
            "f5f02179f4e9338c7767068b7277f29be83e1992"
        ],
        [
            "intro H; elim (H x e); auto.",
            "VernacExtend",
            "e48f3df8b66b52d005f5f1bcb3f314794bbf4c3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_empty_2 : forall m, is_empty m = true -> Empty m.",
            "VernacStartTheoremProof",
            "0f82c7c668abe77d36ee9dc489312870431944e3"
        ],
        [
            "destruct m; simpl; intros; try discriminate; red; intuition_in.",
            "VernacExtend",
            "ca233ee8474538b2256b9fa107395b3dcc1d7124"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_1 : forall m x, bst m -> In x m -> mem x m = true.",
            "VernacStartTheoremProof",
            "887c4ca1f02baf44cdb7d2506347e9ed23e716dd"
        ],
        [
            "intros m x; functional induction (mem x m); auto; intros; clearf; inv bst; intuition_in; order.",
            "VernacExtend",
            "e73afff675e41e56b81ab6d025d7a662df219556"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_2 : forall m x, mem x m = true -> In x m.",
            "VernacStartTheoremProof",
            "4dcad3c69977d67f0f833466356e3779831d3d4e"
        ],
        [
            "intros m x; functional induction (mem x m); auto; intros; discriminate.",
            "VernacExtend",
            "8ecd8d39c3102e8540d2390de82e4696c60420c9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_1 : forall m x e, bst m -> MapsTo x e m -> find x m = Some e.",
            "VernacStartTheoremProof",
            "dd3945044b64cc8067eeff4aca26537d49381f16"
        ],
        [
            "intros m x; functional induction (find x m); auto; intros; clearf; inv bst; intuition_in; simpl; auto; try solve [order | absurd (X.lt x y); eauto | absurd (X.lt y x); eauto].",
            "VernacExtend",
            "cda2565f395f6cc22bb93a68343323ede37693cf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_2 : forall m x e, find x m = Some e -> MapsTo x e m.",
            "VernacStartTheoremProof",
            "3836b618816ed2c6e9ccfed50231b9f4c0fdd2c0"
        ],
        [
            "intros m x; functional induction (find x m); subst; intros; clearf; try discriminate.",
            "VernacExtend",
            "a0081a03af8d53a2a0c61a0e8a8437d10d683468"
        ],
        [
            "constructor 2; auto.",
            "VernacExtend",
            "7da0a8caf04c8554762a019f74337cf755edf2f1"
        ],
        [
            "inversion H; auto.",
            "VernacExtend",
            "ca70ce9532e796fd752cb12d4d270e557a16bc8a"
        ],
        [
            "constructor 3; auto.",
            "VernacExtend",
            "1193a5d85313fd36623cfcd3f11324c7e9d07a07"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_iff : forall m x e, bst m -> (find x m = Some e <-> MapsTo x e m).",
            "VernacStartTheoremProof",
            "356534968975c8dad76b2f7f960c021570844447"
        ],
        [
            "split; auto using find_1, find_2.",
            "VernacExtend",
            "5581e85b5be13d4e5d8a15dc10add633f69dca0e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_in : forall m x, find x m <> None -> In x m.",
            "VernacStartTheoremProof",
            "406117a622f8bc3e5d466e8a8587f3bf4a5b81e4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "case_eq (find x m); [intros|congruence].",
            "VernacExtend",
            "09ac842d0a3fbb6f85836d8995b77a9cda0769bb"
        ],
        [
            "apply MapsTo_In with e; apply find_2; auto.",
            "VernacExtend",
            "e8bf35892d21ecefa828889773dd20186b73f38f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma in_find : forall m x, bst m -> In x m -> find x m <> None.",
            "VernacStartTheoremProof",
            "a15bef6052ae0eb6b6be5e51e26ea7d2cfcac846"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (In_MapsTo H0) as (d,Hd).",
            "VernacExtend",
            "689d4fd19b7d6874b690701886e85c91de85dee6"
        ],
        [
            "rewrite (find_1 H Hd); discriminate.",
            "VernacExtend",
            "48375c8e2e836085cb3c6bd96e2c128e077ff8d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_in_iff : forall m x, bst m -> (find x m <> None <-> In x m).",
            "VernacStartTheoremProof",
            "7dd4a736ea4264383e15841d351f7a2eec9656dc"
        ],
        [
            "split; auto using find_in, in_find.",
            "VernacExtend",
            "4c98a8c031779c0bfa0dcd09e8acdf42c543a8ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_find_iff : forall m x, bst m -> (find x m = None <-> ~In x m).",
            "VernacStartTheoremProof",
            "1b9b2f48e0517bade0561fad71957c875290ca91"
        ],
        [
            "split; intros.",
            "VernacExtend",
            "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
        ],
        [
            "red; intros.",
            "VernacExtend",
            "cac589df0c867c7c46c31951b6da5495d0153212"
        ],
        [
            "elim (in_find H H1 H0).",
            "VernacExtend",
            "3ee60507891dd0b8b4a85934aacb9da9b4865d9e"
        ],
        [
            "case_eq (find x m); [ intros | auto ].",
            "VernacExtend",
            "70e11f30f6cbad424a4201b3389ab46eaaa08fca"
        ],
        [
            "elim H0; apply find_in; congruence.",
            "VernacExtend",
            "186bd2055aea905c22f277fceeb70253cd196b6b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_find : forall m m' x, find x m = find x m' <-> (forall d, find x m = Some d <-> find x m' = Some d).",
            "VernacStartTheoremProof",
            "77b3aaaba41a34f49ca6ba6b2d370a3dec38910f"
        ],
        [
            "intros; destruct (find x m); destruct (find x m'); split; intros; try split; try congruence.",
            "VernacExtend",
            "5cc7a45b7a1d5321dbd993d1d45ed08e93575d48"
        ],
        [
            "rewrite H; auto.",
            "VernacExtend",
            "3e25713af8eaa76cddf9287af10d66733da2ee16"
        ],
        [
            "symmetry; rewrite <- H; auto.",
            "VernacExtend",
            "8cc0d78aeee2a3af794d0c5aece2ce147fe8d241"
        ],
        [
            "rewrite H; auto.",
            "VernacExtend",
            "3e25713af8eaa76cddf9287af10d66733da2ee16"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_mapsto_equiv : forall m m' x, bst m -> bst m' -> (find x m = find x m' <-> (forall d, MapsTo x d m <-> MapsTo x d m')).",
            "VernacStartTheoremProof",
            "6231cf382b0bb34c4efab3ac65b772d12504a4de"
        ],
        [
            "intros m m' x Hm Hm'.",
            "VernacExtend",
            "444c55a5f091a943668b6ad1d91b8579dbbf031c"
        ],
        [
            "rewrite find_find.",
            "VernacExtend",
            "d50e2ccab50d371e9ec205e3a5d22453870e7c83"
        ],
        [
            "split; intros H d; specialize H with d.",
            "VernacExtend",
            "03ac538fa4945a087bca3f9d8c365a4f6e65aacf"
        ],
        [
            "rewrite <- 2 find_iff; auto.",
            "VernacExtend",
            "44854c34cbf2045cacb6fbd07e468fb2064a5f1f"
        ],
        [
            "rewrite 2 find_iff; auto.",
            "VernacExtend",
            "cd414d76187aac17a81c1e93719f18ed051df303"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_in_equiv : forall m m' x, bst m -> bst m' -> find x m = find x m' -> (In x m <-> In x m').",
            "VernacStartTheoremProof",
            "a4e174d1e02848427f6a43e934cab758d3b40908"
        ],
        [
            "split; intros; apply find_in; [ rewrite <- H1 | rewrite H1 ]; apply in_find; auto.",
            "VernacExtend",
            "b142e98ae1a171462321b29f8d275d4946bf7cc0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma create_bst : forall l x e r, bst l -> bst r -> lt_tree x l -> gt_tree x r -> bst (create l x e r).",
            "VernacStartTheoremProof",
            "17abb0593a67b7b15067d7bd6659f5b598dfeb28"
        ],
        [
            "unfold create; auto.",
            "VernacExtend",
            "4d89f4b44a39fae4ef436be7c5a318c2b03c802d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve create_bst.",
            "VernacHints",
            "fa6a4e8caabc09b69863df53fd3c3140235213d4"
        ],
        [
            "Lemma create_in : forall l x e r y, In y (create l x e r) <-> X.eq y x \\/ In y l \\/ In y r.",
            "VernacStartTheoremProof",
            "1422b346b80d1f9b293bb5a799a789c49527e3c4"
        ],
        [
            "unfold create; split; [ inversion_clear 1 | ]; intuition.",
            "VernacExtend",
            "ef8d68f7e5f64dbc3f13801c31216f5d1dfde89e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bal_bst : forall l x e r, bst l -> bst r -> lt_tree x l -> gt_tree x r -> bst (bal l x e r).",
            "VernacStartTheoremProof",
            "9e0c79067041761fad5e3f87b505a0bcc2ff3638"
        ],
        [
            "intros l x e r; functional induction (bal l x e r); intros; clearf; inv bst; repeat apply create_bst; auto; unfold create; try constructor; (apply lt_tree_node || apply gt_tree_node); auto; (eapply lt_tree_trans || eapply gt_tree_trans); eauto.",
            "VernacExtend",
            "8ba15a563c3b42743c0d9f48b720214569f17bfc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve bal_bst.",
            "VernacHints",
            "dfe903deed93434dda75c6e398955f2cbfc18870"
        ],
        [
            "Lemma bal_in : forall l x e r y, In y (bal l x e r) <-> X.eq y x \\/ In y l \\/ In y r.",
            "VernacStartTheoremProof",
            "0c3e955da809ebe4b768d6a300ec6a3934fed67d"
        ],
        [
            "intros l x e r; functional induction (bal l x e r); intros; clearf; rewrite !create_in; intuition_in.",
            "VernacExtend",
            "f1c76f2f791892adce58fcfcef2b206065c17b3f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bal_mapsto : forall l x e r y e', MapsTo y e' (bal l x e r) <-> MapsTo y e' (create l x e r).",
            "VernacStartTheoremProof",
            "56ae6acd7e6d9073613a6b4d53d7f1095647afac"
        ],
        [
            "intros l x e r; functional induction (bal l x e r); intros; clearf; unfold assert_false, create; intuition_in.",
            "VernacExtend",
            "78f0486c53ecc1422065244b2c32caff2087365e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bal_find : forall l x e r y, bst l -> bst r -> lt_tree x l -> gt_tree x r -> find y (bal l x e r) = find y (create l x e r).",
            "VernacStartTheoremProof",
            "7acdc6ce9b89f295fc42672d58b2f1d227fc9722"
        ],
        [
            "intros; rewrite find_mapsto_equiv; auto; intros; apply bal_mapsto.",
            "VernacExtend",
            "a18dd25bd07c7cacd4bf52bae83b19241772eb18"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_in : forall m x y e, In y (add x e m) <-> X.eq y x \\/ In y m.",
            "VernacStartTheoremProof",
            "d018df69516e8a613bb092adc329f19b4178d723"
        ],
        [
            "intros m x y e; functional induction (add x e m); auto; intros; try (rewrite bal_in, IHt); intuition_in.",
            "VernacExtend",
            "c8d6839f648523bf92ca76ca6de7a664650bc0bc"
        ],
        [
            "apply In_1 with x; auto.",
            "VernacExtend",
            "402590a78da6b45b9141619a6a4e9b4f81260919"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_bst : forall m x e, bst m -> bst (add x e m).",
            "VernacStartTheoremProof",
            "12007634e44449113a562261f2df0f3907a28df9"
        ],
        [
            "intros m x e; functional induction (add x e m); intros; inv bst; try apply bal_bst; auto; intro z; rewrite add_in; intuition.",
            "VernacExtend",
            "6fa3492606ebb8bfe2160a054e1c12c7484003ff"
        ],
        [
            "apply MX.eq_lt with x; auto.",
            "VernacExtend",
            "c9285d4259d4b3b392c2780ba1ed4a148f1a4099"
        ],
        [
            "apply MX.lt_eq with x; auto.",
            "VernacExtend",
            "3197a25b7f4121c9c0d4c68d132ff179b2d45b8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve add_bst.",
            "VernacHints",
            "62accbb0d893ea1912903c2258bfcc5e08919888"
        ],
        [
            "Lemma add_1 : forall m x y e, X.eq x y -> MapsTo y e (add x e m).",
            "VernacStartTheoremProof",
            "932ff7bccdd1343ad94ba9db038c47434066b858"
        ],
        [
            "intros m x y e; functional induction (add x e m); intros; inv bst; try rewrite bal_mapsto; unfold create; eauto.",
            "VernacExtend",
            "5afaa9d355b4a22be70dc8a0b50541ab506b1d2a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_2 : forall m x y e e', ~X.eq x y -> MapsTo y e m -> MapsTo y e (add x e' m).",
            "VernacStartTheoremProof",
            "3a492bba8b8eadf655f456fd9c0a98e7d64b8aa0"
        ],
        [
            "intros m x y e e'; induction m; simpl; auto.",
            "VernacExtend",
            "f1dd682c9bb51b9d65bcd90b78b98a497581dfa7"
        ],
        [
            "destruct (X.compare x k); intros; inv bst; try rewrite bal_mapsto; unfold create; auto; inv MapsTo; auto; order.",
            "VernacExtend",
            "276cabf1ca4b50fb6786520ddc21eb3074db7652"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_3 : forall m x y e e', ~X.eq x y -> MapsTo y e (add x e' m) -> MapsTo y e m.",
            "VernacStartTheoremProof",
            "72bbe5e646093de0c6bab38833f38727a01bf774"
        ],
        [
            "intros m x y e e'; induction m; simpl; auto.",
            "VernacExtend",
            "f1dd682c9bb51b9d65bcd90b78b98a497581dfa7"
        ],
        [
            "intros; inv MapsTo; auto; order.",
            "VernacExtend",
            "b1aef6c3796416e25f3cf1cef9226cdc404b66cc"
        ],
        [
            "destruct (X.compare x k); intro; try rewrite bal_mapsto; auto; unfold create; intros; inv MapsTo; auto; order.",
            "VernacExtend",
            "036b44dc183df5eebd278f558e46bf6ac80c4431"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_find : forall m x y e, bst m -> find y (add x e m) = match X.compare y x with EQ _ => Some e | _ => find y m end.",
            "VernacStartTheoremProof",
            "349087275a98f0564e694ccef060eadf4a2da27e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (~X.eq x y -> find y (add x e m) = find y m).",
            "VernacExtend",
            "1717def8d38225030ae9f16a3d905cf0de386c8d"
        ],
        [
            "intros; rewrite find_mapsto_equiv; auto.",
            "VernacExtend",
            "4a33b769d253c2a703a97753085ee16ad80a37d0"
        ],
        [
            "split; eauto using add_2, add_3.",
            "VernacExtend",
            "d20300d05d6ea61782b31ef5f9fdf36324cab836"
        ],
        [
            "destruct X.compare; try (apply H0; order).",
            "VernacExtend",
            "aca1163c0380dee15d5a99a5ef4f7189bd8e23fd"
        ],
        [
            "auto using find_1, add_1.",
            "VernacExtend",
            "2ba2142a49fb4dab9e359f279b03b09b11bc7e35"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_min_in : forall l x e r h y, In y (Node l x e r h) <-> X.eq y (remove_min l x e r)#2#1 \\/ In y (remove_min l x e r)#1.",
            "VernacStartTheoremProof",
            "ca613d0f1c724089f608c27a18ee1427fab0f198"
        ],
        [
            "intros l x e r; functional induction (remove_min l x e r); simpl in *; intros.",
            "VernacExtend",
            "b502c42666fa2f8e1aacdbf6e8d6ffd52a33b956"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "rewrite e0 in *; simpl; intros.",
            "VernacExtend",
            "290f75bb17a79f4313ce7cf7832e94a96d6e3d2c"
        ],
        [
            "rewrite bal_in, In_node_iff, IHp; intuition.",
            "VernacExtend",
            "b8b5a9f72856e819b15699978eaad024b747bb5c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_min_mapsto : forall l x e r h y e', MapsTo y e' (Node l x e r h) <-> ((X.eq y (remove_min l x e r)#2#1) /\\ e' = (remove_min l x e r)#2#2) \\/ MapsTo y e' (remove_min l x e r)#1.",
            "VernacStartTheoremProof",
            "371d4711eb565746231d623bb82ebf7e99839314"
        ],
        [
            "intros l x e r; functional induction (remove_min l x e r); simpl in *; intros.",
            "VernacExtend",
            "b502c42666fa2f8e1aacdbf6e8d6ffd52a33b956"
        ],
        [
            "intuition_in; subst; auto.",
            "VernacExtend",
            "44c4ab3151cc247799cef27906b758dea86a5711"
        ],
        [
            "rewrite e0 in *; simpl; intros.",
            "VernacExtend",
            "290f75bb17a79f4313ce7cf7832e94a96d6e3d2c"
        ],
        [
            "rewrite bal_mapsto; auto; unfold create.",
            "VernacExtend",
            "7fbedc0eba8de96e18f11e5274b5d7a3bfc00e4d"
        ],
        [
            "simpl in *;destruct (IHp _x y e').",
            "VernacExtend",
            "bf3057a7901e0661655343928007786bc4fbe287"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "inversion_clear H1; intuition.",
            "VernacExtend",
            "aab18041153d11bb39eb1f141ab24e40236a5e42"
        ],
        [
            "inversion_clear H3; intuition.",
            "VernacExtend",
            "c1e90aa75ee62de82addbe9b7e1f282647e5f97a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_min_bst : forall l x e r h, bst (Node l x e r h) -> bst (remove_min l x e r)#1.",
            "VernacStartTheoremProof",
            "62ad1af13ea50017bcf4ff0af0132dd3c00f1eb2"
        ],
        [
            "intros l x e r; functional induction (remove_min l x e r); simpl in *; intros.",
            "VernacExtend",
            "b502c42666fa2f8e1aacdbf6e8d6ffd52a33b956"
        ],
        [
            "inv bst; auto.",
            "VernacExtend",
            "938c9705f9e23ee303989449c4a40a9261936f3f"
        ],
        [
            "inversion_clear H; inversion_clear H0.",
            "VernacExtend",
            "a3a264fe7e36953984b0a5de48c77a3870a8f2fa"
        ],
        [
            "apply bal_bst; auto.",
            "VernacExtend",
            "76acbf39c93023468b95a607211ce0104e8d9ff1"
        ],
        [
            "rewrite e0 in *; simpl in *; apply (IHp _x); auto.",
            "VernacExtend",
            "95c8370feb9c506cf9288620f7238a7dd53bf021"
        ],
        [
            "intro; intros.",
            "VernacExtend",
            "0cdd5fdbe3e02025c50d75d2ceac375faa9c4b87"
        ],
        [
            "generalize (remove_min_in ll lx ld lr _x y).",
            "VernacExtend",
            "88255624ea50717a52dd1e13e5ea6a7288a6d6bc"
        ],
        [
            "rewrite e0; simpl in *.",
            "VernacExtend",
            "125a223882e163e6943dfd76cedf30425ed85f66"
        ],
        [
            "destruct 1.",
            "VernacExtend",
            "0e61c29dbe9a16af1faa0807bdb22c467076a9d2"
        ],
        [
            "apply H2; intuition.",
            "VernacExtend",
            "62ccf470386d42ddfc8ada6b4a85def485590063"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve remove_min_bst.",
            "VernacHints",
            "52fcb9eeec0a3c939c7a23acc242ae7b548531b7"
        ],
        [
            "Lemma remove_min_gt_tree : forall l x e r h, bst (Node l x e r h) -> gt_tree (remove_min l x e r)#2#1 (remove_min l x e r)#1.",
            "VernacStartTheoremProof",
            "11c43703bb016b701749e53e7c4a5da18db7bdfc"
        ],
        [
            "intros l x e r; functional induction (remove_min l x e r); simpl in *; intros.",
            "VernacExtend",
            "b502c42666fa2f8e1aacdbf6e8d6ffd52a33b956"
        ],
        [
            "inv bst; auto.",
            "VernacExtend",
            "938c9705f9e23ee303989449c4a40a9261936f3f"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "intro; intro.",
            "VernacExtend",
            "364fb55c2e6981f6f1c3e7958106b5d05470b327"
        ],
        [
            "rewrite e0 in *;simpl in *.",
            "VernacExtend",
            "f7f5dacd687cc806d6f8bc943e7025c8eb93c60c"
        ],
        [
            "generalize (IHp _x H0).",
            "VernacExtend",
            "2e2de149f997e567bdb445a20d7a433728c19b04"
        ],
        [
            "generalize (remove_min_in ll lx ld lr _x m#1).",
            "VernacExtend",
            "b465f52d2e44f2c0bc0d1ad2e50d86a7fabb4ce6"
        ],
        [
            "rewrite e0; simpl; intros.",
            "VernacExtend",
            "4636d20862cce7905c56922537464da4ac24b0db"
        ],
        [
            "rewrite (bal_in l' x d r y) in H.",
            "VernacExtend",
            "176a340fabc357c7c95a5579b183b55526f5f460"
        ],
        [
            "assert (In m#1 (Node ll lx ld lr _x)) by (rewrite H4; auto); clear H4.",
            "VernacExtend",
            "fbf04ff208736eb738fbb1fb9f5c844344bb9b94"
        ],
        [
            "assert (X.lt m#1 x) by order.",
            "VernacExtend",
            "b29c67b72a65d2dd94fb89fb478e362cda19b30c"
        ],
        [
            "decompose [or] H; order.",
            "VernacExtend",
            "5a66faa9b6f1701622ccdc2d142f281d8b2cf713"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve remove_min_gt_tree.",
            "VernacHints",
            "d17345205360292c6f75fda4162ce497b06752f4"
        ],
        [
            "Lemma remove_min_find : forall l x e r h y, bst (Node l x e r h) -> find y (Node l x e r h) = match X.compare y (remove_min l x e r)#2#1 with | LT _ => None | EQ _ => Some (remove_min l x e r)#2#2 | GT _ => find y (remove_min l x e r)#1 end.",
            "VernacStartTheoremProof",
            "a61de6d1c28d31970346996324373b6955bd02d6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct X.compare.",
            "VernacExtend",
            "cf7d7ef93dece2204a9fc333c6c9d151ff6c00a8"
        ],
        [
            "rewrite not_find_iff; auto.",
            "VernacExtend",
            "8b8fd68851c15c4bf587e40f431e32e440769ce8"
        ],
        [
            "rewrite remove_min_in; red; destruct 1 as [H'|H']; [ order | ].",
            "VernacExtend",
            "4374f172c5d12c639a6dfb4d5d5128befa52df81"
        ],
        [
            "generalize (remove_min_gt_tree H H'); order.",
            "VernacExtend",
            "6277acec475a7ce05cd85dc707367f1eb94af972"
        ],
        [
            "apply find_1; auto.",
            "VernacExtend",
            "fbc62f085a9b001085e937996a14400269b19beb"
        ],
        [
            "rewrite remove_min_mapsto; auto.",
            "VernacExtend",
            "c7067651cd7c07a9b02fa7c549a47de13c89c69c"
        ],
        [
            "rewrite find_mapsto_equiv; eauto; intros.",
            "VernacExtend",
            "9aa795f02ef4490f8c595da0ca5ee77b61790dfe"
        ],
        [
            "rewrite remove_min_mapsto; intuition; order.",
            "VernacExtend",
            "e84cf64ac97272433d0e11f2359d42b68d55a699"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma merge_in : forall m1 m2 y, bst m1 -> bst m2 -> (In y (merge m1 m2) <-> In y m1 \\/ In y m2).",
            "VernacStartTheoremProof",
            "0dce8c13c6a900b91cd768b55b22de7f2320d2c5"
        ],
        [
            "intros m1 m2; functional induction (merge m1 m2);intros; try factornode _x _x0 _x1 _x2 _x3 as m1.",
            "VernacExtend",
            "f21b08739296bb9161f745026965190db923af9b"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "rewrite bal_in, remove_min_in, e1; simpl; intuition.",
            "VernacExtend",
            "88423274ef4f9fdee2071378481498fbe3986f62"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma merge_mapsto : forall m1 m2 y e, bst m1 -> bst m2 -> (MapsTo y e (merge m1 m2) <-> MapsTo y e m1 \\/ MapsTo y e m2).",
            "VernacStartTheoremProof",
            "e3d418d7272a8a109edf2b6910e8130443382097"
        ],
        [
            "intros m1 m2; functional induction (merge m1 m2); intros; try factornode _x _x0 _x1 _x2 _x3 as m1.",
            "VernacExtend",
            "f21b08739296bb9161f745026965190db923af9b"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "rewrite bal_mapsto, remove_min_mapsto, e1; simpl; auto.",
            "VernacExtend",
            "d3e2a939c3e1121b69c4f67e865b5f5fc39d24b4"
        ],
        [
            "unfold create.",
            "VernacExtend",
            "b0ea35b2ed0636c23f14d2b00842d6c95b3b8d14"
        ],
        [
            "intuition; subst; auto.",
            "VernacExtend",
            "a413b1004b36e70518df6bcd5c477cb046def878"
        ],
        [
            "inversion_clear H1; intuition.",
            "VernacExtend",
            "aab18041153d11bb39eb1f141ab24e40236a5e42"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma merge_bst : forall m1 m2, bst m1 -> bst m2 -> (forall y1 y2 : key, In y1 m1 -> In y2 m2 -> X.lt y1 y2) -> bst (merge m1 m2).",
            "VernacStartTheoremProof",
            "2bb7481522a1f98889c552ff202eb0f5be038ded"
        ],
        [
            "intros m1 m2; functional induction (merge m1 m2); intros; auto; try factornode _x _x0 _x1 _x2 _x3 as m1.",
            "VernacExtend",
            "37ffc189cb7c29ae448336c746f2d9f8d8221de6"
        ],
        [
            "apply bal_bst; auto.",
            "VernacExtend",
            "76acbf39c93023468b95a607211ce0104e8d9ff1"
        ],
        [
            "generalize (remove_min_bst H0); rewrite e1; simpl in *; auto.",
            "VernacExtend",
            "8f7ba43fcf4d8b3342d6f8f97c09e996e75a0fdf"
        ],
        [
            "intro; intro.",
            "VernacExtend",
            "364fb55c2e6981f6f1c3e7958106b5d05470b327"
        ],
        [
            "apply H1; auto.",
            "VernacExtend",
            "57fc44af14fcaf3758941b68060efcbab0060c55"
        ],
        [
            "generalize (remove_min_in l2 x2 d2 r2 _x4 x); rewrite e1; simpl; intuition.",
            "VernacExtend",
            "6b19d5ed4b2c7c72ba31274bad0e571bd38aeab7"
        ],
        [
            "generalize (remove_min_gt_tree H0); rewrite e1; simpl; auto.",
            "VernacExtend",
            "7ee25d53f859080ca991e416751565690490066d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_in : forall m x y, bst m -> (In y (remove x m) <-> ~ X.eq y x /\\ In y m).",
            "VernacStartTheoremProof",
            "6337ea83da4cc4fb4d14ceec792c93948422dc26"
        ],
        [
            "intros m x; functional induction (remove x m); simpl; intros.",
            "VernacExtend",
            "3069c4c30344439abd361f0314edce2a8816a88c"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "inv bst; clear e0.",
            "VernacExtend",
            "4a22ac51275c70265a231f1ad31b34f5befcbb8f"
        ],
        [
            "rewrite bal_in; auto.",
            "VernacExtend",
            "cd6c8732532e6e92527be63bba9ad4223187b268"
        ],
        [
            "generalize (IHt y0 H0); intuition; [ order | order | intuition_in ].",
            "VernacExtend",
            "ca96e1d14d5ce532a7266aace2f21136427263bd"
        ],
        [
            "inv bst; clear e0.",
            "VernacExtend",
            "4a22ac51275c70265a231f1ad31b34f5befcbb8f"
        ],
        [
            "rewrite merge_in; intuition; [ order | order | intuition_in ].",
            "VernacExtend",
            "737cfa8722a150d2dd6d0d8d132e17ce6f2b617e"
        ],
        [
            "elim H4; eauto.",
            "VernacExtend",
            "539a083c18313d5b45996cae172c778067b56827"
        ],
        [
            "inv bst; clear e0.",
            "VernacExtend",
            "4a22ac51275c70265a231f1ad31b34f5befcbb8f"
        ],
        [
            "rewrite bal_in; auto.",
            "VernacExtend",
            "cd6c8732532e6e92527be63bba9ad4223187b268"
        ],
        [
            "generalize (IHt y0 H1); intuition; [ order | order | intuition_in ].",
            "VernacExtend",
            "e6b92eca3d18975d91f84de22daa687b59a4d945"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_bst : forall m x, bst m -> bst (remove x m).",
            "VernacStartTheoremProof",
            "4e8e4f96d7aee3b0106ef6bf5942c467f519ddc7"
        ],
        [
            "intros m x; functional induction (remove x m); simpl; intros.",
            "VernacExtend",
            "3069c4c30344439abd361f0314edce2a8816a88c"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "inv bst.",
            "VernacExtend",
            "7b9bcd5fb58f45d193506b4496468572f97994c7"
        ],
        [
            "apply bal_bst; auto.",
            "VernacExtend",
            "76acbf39c93023468b95a607211ce0104e8d9ff1"
        ],
        [
            "intro; intro.",
            "VernacExtend",
            "364fb55c2e6981f6f1c3e7958106b5d05470b327"
        ],
        [
            "rewrite (remove_in x y0 H0) in H; auto.",
            "VernacExtend",
            "78e8ece4096181a29743f7529a5962f3aa4624a1"
        ],
        [
            "destruct H; eauto.",
            "VernacExtend",
            "9cecd497f9d4dd3ddf7452c86226c8b65280a858"
        ],
        [
            "inv bst.",
            "VernacExtend",
            "7b9bcd5fb58f45d193506b4496468572f97994c7"
        ],
        [
            "apply merge_bst; eauto.",
            "VernacExtend",
            "8732e924ae4a8035d8215f5565486d5c5b0893e3"
        ],
        [
            "inv bst.",
            "VernacExtend",
            "7b9bcd5fb58f45d193506b4496468572f97994c7"
        ],
        [
            "apply bal_bst; auto.",
            "VernacExtend",
            "76acbf39c93023468b95a607211ce0104e8d9ff1"
        ],
        [
            "intro; intro.",
            "VernacExtend",
            "364fb55c2e6981f6f1c3e7958106b5d05470b327"
        ],
        [
            "rewrite (remove_in x y0 H1) in H; auto.",
            "VernacExtend",
            "7acbfa0e4f3c6de4a0c0fcacf2611f7e194dfb90"
        ],
        [
            "destruct H; eauto.",
            "VernacExtend",
            "9cecd497f9d4dd3ddf7452c86226c8b65280a858"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_1 : forall m x y, bst m -> X.eq x y -> ~ In y (remove x m).",
            "VernacStartTheoremProof",
            "04a904aec16f6f1729ab44df6d4819636975feec"
        ],
        [
            "intros; rewrite remove_in; intuition.",
            "VernacExtend",
            "45f134b6b0049a7d15177778ef0e2ad2635f9c99"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_2 : forall m x y e, bst m -> ~X.eq x y -> MapsTo y e m -> MapsTo y e (remove x m).",
            "VernacStartTheoremProof",
            "e080c4fad50cc11c971ffaba8f6c17c7889ce585"
        ],
        [
            "intros m x y e; induction m; simpl; auto.",
            "VernacExtend",
            "78d8f1746fd3874f3732c527bcbead1563495b30"
        ],
        [
            "destruct (X.compare x k); intros; inv bst; try rewrite bal_mapsto; unfold create; auto; try solve [inv MapsTo; auto].",
            "VernacExtend",
            "6f5548bb27586bde6adb25bc5bbd3f5402705cbf"
        ],
        [
            "rewrite merge_mapsto; auto.",
            "VernacExtend",
            "c3e0d1b3948d06af851aba7b9605d182b3a71548"
        ],
        [
            "inv MapsTo; auto; order.",
            "VernacExtend",
            "a2c23b321d42fbc592a72f5ddbe23b9c195fa36c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_3 : forall m x y e, bst m -> MapsTo y e (remove x m) -> MapsTo y e m.",
            "VernacStartTheoremProof",
            "4d35b36ae204ddb147f039d31d5223234422d94a"
        ],
        [
            "intros m x y e; induction m; simpl; auto.",
            "VernacExtend",
            "78d8f1746fd3874f3732c527bcbead1563495b30"
        ],
        [
            "destruct (X.compare x k); intros Bs; inv bst; try rewrite bal_mapsto; auto; unfold create.",
            "VernacExtend",
            "4cb37d747e0bb8c140c6878f50ec5e32ba76309f"
        ],
        [
            "intros; inv MapsTo; auto.",
            "VernacExtend",
            "afd4c999bb10f242d404b6c8de033544c5a68710"
        ],
        [
            "rewrite merge_mapsto; intuition.",
            "VernacExtend",
            "bdbe5b54505a79cb722c463f8ee3f7c1b364407e"
        ],
        [
            "intros; inv MapsTo; auto.",
            "VernacExtend",
            "afd4c999bb10f242d404b6c8de033544c5a68710"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma join_in : forall l x d r y, In y (join l x d r) <-> X.eq y x \\/ In y l \\/ In y r.",
            "VernacStartTheoremProof",
            "264dfba81241476ce0d905a3ded44811c186a851"
        ],
        [
            "join_tac.",
            "VernacExtend",
            "fcadd626977256d2b588fba3ffaada8d55550e24"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite add_in; intuition_in.",
            "VernacExtend",
            "2c29feee650cf351f1b292c84833fdbab17787f0"
        ],
        [
            "rewrite add_in; intuition_in.",
            "VernacExtend",
            "2c29feee650cf351f1b292c84833fdbab17787f0"
        ],
        [
            "rewrite bal_in, Hlr; clear Hlr Hrl; intuition_in.",
            "VernacExtend",
            "15000e36b4e4e6be0bb9faf13bec87a2794877b7"
        ],
        [
            "rewrite bal_in, Hrl; clear Hlr Hrl; intuition_in.",
            "VernacExtend",
            "2de0b2c492189bab641a29c0e4ed4fce02ffc439"
        ],
        [
            "apply create_in.",
            "VernacExtend",
            "0828877c2738e6a665d5468f4520577522cefbca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma join_bst : forall l x d r, bst l -> bst r -> lt_tree x l -> gt_tree x r -> bst (join l x d r).",
            "VernacStartTheoremProof",
            "1cafdf3961dcb0ccb6b5131e0841634d7f83fa4d"
        ],
        [
            "join_tac; auto; try (simpl; auto; fail); inv bst; apply bal_bst; auto; clear Hrl Hlr; intro; intros; rewrite join_in in *.",
            "VernacExtend",
            "be83d48b3fd707c19ae18e662e40733aee813f79"
        ],
        [
            "intuition; [ apply MX.lt_eq with x | ]; eauto.",
            "VernacExtend",
            "9fecd88ae8d483a587193e8071263f29c4f64329"
        ],
        [
            "intuition; [ apply MX.eq_lt with x | ]; eauto.",
            "VernacExtend",
            "9194b1989a3cbdccc84fdeab2cd6d1156fbcfe56"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve join_bst.",
            "VernacHints",
            "9f73b7c7705a27c82ccf27a878d073977179b798"
        ],
        [
            "Lemma join_find : forall l x d r y, bst l -> bst r -> lt_tree x l -> gt_tree x r -> find y (join l x d r) = find y (create l x d r).",
            "VernacStartTheoremProof",
            "5456dd4f6c963126f941dfacac989d1017664561"
        ],
        [
            "join_tac; auto; inv bst; simpl (join (Leaf elt)); try (assert (X.lt lx x) by auto); try (assert (X.lt x rx) by auto); rewrite ?add_find, ?bal_find; auto.",
            "VernacExtend",
            "e21241ca45daa9f84568c0f6c92e9202d11c32cd"
        ],
        [
            "simpl; destruct X.compare; auto.",
            "VernacExtend",
            "93ae2c8fe491ecb870860143708f43dd5655c74c"
        ],
        [
            "rewrite not_find_iff; auto; intro; order.",
            "VernacExtend",
            "29852a8a7503736131225d2b714be73de3b08b06"
        ],
        [
            "simpl; repeat (destruct X.compare; auto); try (order; fail).",
            "VernacExtend",
            "7c6074231fe9db9e68ffa76c6a9fd99f32b5772e"
        ],
        [
            "rewrite not_find_iff by auto; intro.",
            "VernacExtend",
            "a3a8421ad72e80270d806b52fd0f1a36af8abe28"
        ],
        [
            "assert (X.lt y x) by auto; order.",
            "VernacExtend",
            "c4fa12c62165a6021d5961f3c751e56adf90c05d"
        ],
        [
            "simpl; rewrite Hlr; simpl; auto.",
            "VernacExtend",
            "5660a610d1a02d5512493012c3ad7dd7383544ab"
        ],
        [
            "repeat (destruct X.compare; auto); order.",
            "VernacExtend",
            "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
        ],
        [
            "intros u Hu; rewrite join_in in Hu.",
            "VernacExtend",
            "81b3b92e02871c35808857c5523e5b0c4ea9ca4b"
        ],
        [
            "destruct Hu as [Hu|[Hu|Hu]]; try generalize (H2 _ Hu); order.",
            "VernacExtend",
            "33cd50c8775ab8ba1f4dfa43d6602065ca023985"
        ],
        [
            "simpl; rewrite Hrl; simpl; auto.",
            "VernacExtend",
            "3dcda30fdf35d4937eb1899481767b270e0c1b79"
        ],
        [
            "repeat (destruct X.compare; auto); order.",
            "VernacExtend",
            "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
        ],
        [
            "intros u Hu; rewrite join_in in Hu.",
            "VernacExtend",
            "81b3b92e02871c35808857c5523e5b0c4ea9ca4b"
        ],
        [
            "destruct Hu as [Hu|[Hu|Hu]]; order.",
            "VernacExtend",
            "ad0d367084cde6da8869be6ab0c6f6e9deb6ca1f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_in_1 : forall m x, bst m -> forall y, (In y (split x m)#l <-> In y m /\\ X.lt y x).",
            "VernacStartTheoremProof",
            "9c6d663b4536c1aac6eaf045a1ab2f91daa8c81d"
        ],
        [
            "intros m x; functional induction (split x m); simpl; intros; inv bst; try clear e0.",
            "VernacExtend",
            "02c474b0430632f5fb4ed7a2f8514ebcb2eec7ce"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "rewrite e1 in IHt; simpl in IHt; rewrite IHt; intuition_in; order.",
            "VernacExtend",
            "2209cc3b96eb7b2617dd67ec34f8160b295bb530"
        ],
        [
            "intuition_in; order.",
            "VernacExtend",
            "e3f8a8989f5e1da4d90687866dd0f1c64c953e1e"
        ],
        [
            "rewrite join_in.",
            "VernacExtend",
            "189db8ad2079b664a69d13554fe96fbeaa596a55"
        ],
        [
            "rewrite e1 in IHt; simpl in IHt; rewrite IHt; intuition_in; order.",
            "VernacExtend",
            "2209cc3b96eb7b2617dd67ec34f8160b295bb530"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_in_2 : forall m x, bst m -> forall y, (In y (split x m)#r <-> In y m /\\ X.lt x y).",
            "VernacStartTheoremProof",
            "9d0bffc9ab85822e64b105bcadbfb655e4977af5"
        ],
        [
            "intros m x; functional induction (split x m); subst; simpl; intros; inv bst; try clear e0.",
            "VernacExtend",
            "8f3c4337d018c3286523ed01b3892cf01694cc64"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "rewrite join_in.",
            "VernacExtend",
            "189db8ad2079b664a69d13554fe96fbeaa596a55"
        ],
        [
            "rewrite e1 in IHt; simpl in IHt; rewrite IHt; intuition_in; order.",
            "VernacExtend",
            "2209cc3b96eb7b2617dd67ec34f8160b295bb530"
        ],
        [
            "intuition_in; order.",
            "VernacExtend",
            "e3f8a8989f5e1da4d90687866dd0f1c64c953e1e"
        ],
        [
            "rewrite e1 in IHt; simpl in IHt; rewrite IHt; intuition_in; order.",
            "VernacExtend",
            "2209cc3b96eb7b2617dd67ec34f8160b295bb530"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_in_3 : forall m x, bst m -> (split x m)#o = find x m.",
            "VernacStartTheoremProof",
            "10c6969b1b329cad500628b15779b59fc50ef4b7"
        ],
        [
            "intros m x; functional induction (split x m); subst; simpl; auto; intros; inv bst; try clear e0; destruct X.compare; try order; trivial; rewrite <- IHt, e1; auto.",
            "VernacExtend",
            "982f0aab9e7f4df939ca78ead4889288123a7311"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_bst : forall m x, bst m -> bst (split x m)#l /\\ bst (split x m)#r.",
            "VernacStartTheoremProof",
            "ac07ccb64ebb52422b6e0ffc920ee6aee6746c16"
        ],
        [
            "intros m x; functional induction (split x m); subst; simpl; intros; inv bst; try clear e0; try rewrite e1 in *; simpl in *; intuition; apply join_bst; auto.",
            "VernacExtend",
            "bd26916af86e01b6ae95194d41253e59043a759b"
        ],
        [
            "intros y0.",
            "VernacExtend",
            "8f8d2a78fcdba553265db91171c74d5cc90a0908"
        ],
        [
            "generalize (split_in_2 x H0 y0); rewrite e1; simpl; intuition.",
            "VernacExtend",
            "7c5470574b0a830f607e95d9a3164429653f977e"
        ],
        [
            "intros y0.",
            "VernacExtend",
            "8f8d2a78fcdba553265db91171c74d5cc90a0908"
        ],
        [
            "generalize (split_in_1 x H1 y0); rewrite e1; simpl; intuition.",
            "VernacExtend",
            "0a5aefa903b85ed30a55b470b00ef1ade2ae3639"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_lt_tree : forall m x, bst m -> lt_tree x (split x m)#l.",
            "VernacStartTheoremProof",
            "abe85d007a314cf59df88fd3594fc5f4a5981146"
        ],
        [
            "intros m x B y Hy; rewrite split_in_1 in Hy; intuition.",
            "VernacExtend",
            "9fae3a5ef734b09463213e813a73a75ee187d02e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_gt_tree : forall m x, bst m -> gt_tree x (split x m)#r.",
            "VernacStartTheoremProof",
            "a4d174bde94d858483b2299d28f854653195b761"
        ],
        [
            "intros m x B y Hy; rewrite split_in_2 in Hy; intuition.",
            "VernacExtend",
            "9bf416e9f78b7d46af7da60e169c2cd265b9c0ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma split_find : forall m x y, bst m -> find y m = match X.compare y x with | LT _ => find y (split x m)#l | EQ _ => (split x m)#o | GT _ => find y (split x m)#r end.",
            "VernacStartTheoremProof",
            "50d94116802ab2762bb11290bd087328f9f2561a"
        ],
        [
            "intros m x; functional induction (split x m); subst; simpl; intros; inv bst; try clear e0; try rewrite e1 in *; simpl in *; [ destruct X.compare; auto | .. ]; try match goal with E:split ?x ?t = _, B:bst ?t |- _ => generalize (split_in_1 x B)(split_in_2 x B)(split_bst x B); rewrite E; simpl; destruct 3 end.",
            "VernacExtend",
            "3b1ce7b8ce9fd6c7838c54e677c3a6eecbbce6c5"
        ],
        [
            "rewrite join_find, IHt; auto; clear IHt; simpl.",
            "VernacExtend",
            "19000715969772f605ce5fc6686ffb4cc79ae8ad"
        ],
        [
            "repeat (destruct X.compare; auto); order.",
            "VernacExtend",
            "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
        ],
        [
            "intro y1; rewrite H4; intuition.",
            "VernacExtend",
            "a4e5024d7296034ebda6d5252f4774a63fcd6844"
        ],
        [
            "repeat (destruct X.compare; auto); order.",
            "VernacExtend",
            "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
        ],
        [
            "rewrite join_find, IHt; auto; clear IHt; simpl.",
            "VernacExtend",
            "19000715969772f605ce5fc6686ffb4cc79ae8ad"
        ],
        [
            "repeat (destruct X.compare; auto); order.",
            "VernacExtend",
            "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
        ],
        [
            "intros y1; rewrite H; intuition.",
            "VernacExtend",
            "bd6cd0d5ccd7d313f463ad3f57c94908827a6f24"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concat_in : forall m1 m2 y, In y (concat m1 m2) <-> In y m1 \\/ In y m2.",
            "VernacStartTheoremProof",
            "4e218dd1e40450b043f67a3ecc833c69c3d788c8"
        ],
        [
            "intros m1 m2; functional induction (concat m1 m2); intros; try factornode _x _x0 _x1 _x2 _x3 as m1.",
            "VernacExtend",
            "7030c6721b16192ab252e53da2a39c31555da24e"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "intuition_in.",
            "VernacExtend",
            "d8943b758f8da03177723f43853aa754dd563cb6"
        ],
        [
            "rewrite join_in, remove_min_in, e1; simpl; intuition.",
            "VernacExtend",
            "dc6424e22f622652c82cbd3c9cb24dccc710206b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma concat_bst : forall m1 m2, bst m1 -> bst m2 -> (forall y1 y2, In y1 m1 -> In y2 m2 -> X.lt y1 y2) -> bst (concat m1 m2).",
            "VernacStartTheoremProof",
            "baf09e0f4d118d937fa969ab698972efb3bfbecc"
        ],
        [
            "intros m1 m2; functional induction (concat m1 m2); intros; auto; try factornode _x _x0 _x1 _x2 _x3 as m1.",
            "VernacExtend",
            "da8498417ce13650da8d553ec1af166dd6da2966"
        ],
        [
            "apply join_bst; auto.",
            "VernacExtend",
            "e3516841c6cd61e54881112f5d1409ea2e2fbe2e"
        ],
        [
            "change (bst (m2',xd)#1).",
            "VernacExtend",
            "81c06fa44a97d3b80b3bcd290d6a01ff4258292a"
        ],
        [
            "rewrite <-e1; eauto.",
            "VernacExtend",
            "16aecf2965a0f2c552c17fd80ce125855e211175"
        ],
        [
            "intros y Hy.",
            "VernacExtend",
            "d610d987f827782ed7ad408419c9743f4107dcdc"
        ],
        [
            "apply H1; auto.",
            "VernacExtend",
            "57fc44af14fcaf3758941b68060efcbab0060c55"
        ],
        [
            "rewrite remove_min_in, e1; simpl; auto.",
            "VernacExtend",
            "aeb7ddacfaab96a9bd6cf18eb622764fcdcd750a"
        ],
        [
            "change (gt_tree (m2',xd)#2#1 (m2',xd)#1).",
            "VernacExtend",
            "6acc9a81fde8e9558f095238256429be9223aac8"
        ],
        [
            "rewrite <-e1; eauto.",
            "VernacExtend",
            "16aecf2965a0f2c552c17fd80ce125855e211175"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve concat_bst.",
            "VernacHints",
            "ed802b1764699531312a8ceedca25b3290b72d84"
        ],
        [
            "Lemma concat_find : forall m1 m2 y, bst m1 -> bst m2 -> (forall y1 y2, In y1 m1 -> In y2 m2 -> X.lt y1 y2) -> find y (concat m1 m2) = match find y m2 with Some d => Some d | None => find y m1 end.",
            "VernacStartTheoremProof",
            "64807c43e74d0171049e21aebc7aee434405e68b"
        ],
        [
            "intros m1 m2; functional induction (concat m1 m2); intros; auto; try factornode _x _x0 _x1 _x2 _x3 as m1.",
            "VernacExtend",
            "da8498417ce13650da8d553ec1af166dd6da2966"
        ],
        [
            "simpl; destruct (find y m2); auto.",
            "VernacExtend",
            "c30d7b196e7ea1dbe80c73bcff1b8be47fb125c0"
        ],
        [
            "generalize (remove_min_find y H0)(remove_min_in l2 x2 d2 r2 _x4) (remove_min_bst H0)(remove_min_gt_tree H0); rewrite e1; simpl fst; simpl snd; intros.",
            "VernacExtend",
            "b5aed286ca0828aebdfd7df9b7bcf657f7b21d3c"
        ],
        [
            "inv bst.",
            "VernacExtend",
            "7b9bcd5fb58f45d193506b4496468572f97994c7"
        ],
        [
            "rewrite H2, join_find; auto; clear H2.",
            "VernacExtend",
            "c7468ae85f972ae7039126ab76b449b14de764b1"
        ],
        [
            "simpl; destruct X.compare as [Hlt| |Hlt]; simpl; auto.",
            "VernacExtend",
            "96870eee3391cd21762a4ed9355ce4ad97c3bd49"
        ],
        [
            "destruct (find y m2'); auto.",
            "VernacExtend",
            "ea07a4dcf7bb60f0d75cc0ad997cf33b9f9088d8"
        ],
        [
            "symmetry; rewrite not_find_iff; auto; intro.",
            "VernacExtend",
            "877b8f71d347bf7621a294dbfba8fcad2a755d2b"
        ],
        [
            "apply (MX.lt_not_gt Hlt); apply H1; auto; rewrite H3; auto.",
            "VernacExtend",
            "92f3d179f2a374e8031cb02926998d0f6b5001ca"
        ],
        [
            "intros z Hz; apply H1; auto; rewrite H3; auto.",
            "VernacExtend",
            "0a2a6842e49822cd3080454afc1059dba8164fc3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation eqk := (PX.eqk (elt:= elt)).",
            "VernacSyntacticDefinition",
            "8bc8c388cd5ecdf47cd37a3dc223081ace152cfe"
        ],
        [
            "Notation eqke := (PX.eqke (elt:= elt)).",
            "VernacSyntacticDefinition",
            "9c5149db7ae7a83a255f0ba9501d50521adcbc20"
        ],
        [
            "Notation ltk := (PX.ltk (elt:= elt)).",
            "VernacSyntacticDefinition",
            "6f81ae5a6978f8067041e1d38a938a2314697069"
        ],
        [
            "Lemma elements_aux_mapsto : forall (s:t elt) acc x e, InA eqke (x,e) (elements_aux acc s) <-> MapsTo x e s \\/ InA eqke (x,e) acc.",
            "VernacStartTheoremProof",
            "a774aba1f8d2b644b7119876564ecf21b6f7eb31"
        ],
        [
            "induction s as [ | l Hl x e r Hr h ]; simpl; auto.",
            "VernacExtend",
            "fee5c8b5d33e4a46bd16d4ee42b9fd8b862af4c9"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite Hl.",
            "VernacExtend",
            "bcb5a79f143a574cb4193cb68e496aca9c8a7cc3"
        ],
        [
            "destruct (Hr acc x0 e0); clear Hl Hr.",
            "VernacExtend",
            "0ee40587e54b8e3240fad648e7d36db18058f2a3"
        ],
        [
            "intuition; inversion_clear H3; intuition.",
            "VernacExtend",
            "852ca57661d7dd48d9f5a1d2060e7383228abe07"
        ],
        [
            "destruct H0; simpl in *; subst; intuition.",
            "VernacExtend",
            "7c5d4a8b213357e6948c2c7d1a983cc4c0646a47"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_mapsto : forall (s:t elt) x e, InA eqke (x,e) (elements s) <-> MapsTo x e s.",
            "VernacStartTheoremProof",
            "b6522bea17cdcb531377c72d4330786f59f665a2"
        ],
        [
            "intros; generalize (elements_aux_mapsto s nil x e); intuition.",
            "VernacExtend",
            "3906bc776419d71be9f3ea85aac01231db0257f6"
        ],
        [
            "inversion_clear H0.",
            "VernacExtend",
            "e21f851b9423020c7f22dae666bca7829c9b1967"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_in : forall (s:t elt) x, L.PX.In x (elements s) <-> In x s.",
            "VernacStartTheoremProof",
            "02f73df4e8247f5002e4ccd0a91eb404279070eb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold L.PX.In.",
            "VernacExtend",
            "6c8a034475811151437059a82e6e658a24256a96"
        ],
        [
            "rewrite <- In_alt; unfold In0.",
            "VernacExtend",
            "775891578a10f949bceaaf5b4381fa39bc433f1a"
        ],
        [
            "firstorder.",
            "VernacExtend",
            "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "rewrite <- elements_mapsto; auto.",
            "VernacExtend",
            "a3c6d1055251a2870fb3bc487bb1f06d26b66981"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "unfold L.PX.MapsTo; rewrite elements_mapsto; auto.",
            "VernacExtend",
            "4c55e3e94d3a02fd596bda0f45bdf669239b25c3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_aux_sort : forall (s:t elt) acc, bst s -> sort ltk acc -> (forall x e y, InA eqke (x,e) acc -> In y s -> X.lt y x) -> sort ltk (elements_aux acc s).",
            "VernacStartTheoremProof",
            "3de5e705c8f81a9701dd45f25e2ec545c200c14e"
        ],
        [
            "induction s as [ | l Hl y e r Hr h]; simpl; intuition.",
            "VernacExtend",
            "966e3d4e055fa6ee1c3f25ed8c34f449384da18c"
        ],
        [
            "inv bst.",
            "VernacExtend",
            "7b9bcd5fb58f45d193506b4496468572f97994c7"
        ],
        [
            "apply Hl; auto.",
            "VernacExtend",
            "affd29bfb905b3e9f612f7867f266fb57716c53e"
        ],
        [
            "constructor.",
            "VernacExtend",
            "3c77e6be855b5086df5e918bf2a0537e1010479a"
        ],
        [
            "apply Hr; eauto.",
            "VernacExtend",
            "eb3d9bdc1066422d40e0527d40ad8a83eb46cb16"
        ],
        [
            "apply InA_InfA with (eqA:=eqke); auto with *.",
            "VernacExtend",
            "f80cd92923f5734035ff4e1d5c3526883c638cb0"
        ],
        [
            "intros (y',e') H6.",
            "VernacExtend",
            "93e60c8f7cbcf2c7d6d5f7bee6ab70d9e28e89da"
        ],
        [
            "destruct (elements_aux_mapsto r acc y' e'); intuition.",
            "VernacExtend",
            "54b26c1f4c160625789d3c26fe1f065dc7f0518e"
        ],
        [
            "red; simpl; eauto.",
            "VernacExtend",
            "39398b970083e16fdab7df079f160a4ebb1ed0fa"
        ],
        [
            "red; simpl; eauto.",
            "VernacExtend",
            "39398b970083e16fdab7df079f160a4ebb1ed0fa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "inversion_clear H.",
            "VernacExtend",
            "90909d92eb32e95a21a5b90b29a49dc97bcea342"
        ],
        [
            "destruct H7; simpl in *.",
            "VernacExtend",
            "cb8d2fc77acb7e61caabf26341a8a69b5d79b80e"
        ],
        [
            "order.",
            "VernacExtend",
            "1befdab9038d1868ab2c465bac8af3e25c5ac3da"
        ],
        [
            "destruct (elements_aux_mapsto r acc x e0); intuition eauto.",
            "VernacExtend",
            "8f146d373226a8270f2492bc35b917db32a6b4a7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_sort : forall s : t elt, bst s -> sort ltk (elements s).",
            "VernacStartTheoremProof",
            "7f1d185ba724d4974eaad1ff92970e57293af544"
        ],
        [
            "intros; unfold elements; apply elements_aux_sort; auto.",
            "VernacExtend",
            "01cf1696fd9c7f3fe3cb1622730e5c8d7059231c"
        ],
        [
            "intros; inversion H0.",
            "VernacExtend",
            "5b5bb256fd3a25af10fe5269009c9c424ffef90a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve elements_sort.",
            "VernacHints",
            "c22bdefaadaab4402e34e88736c9f9784cda10fc"
        ],
        [
            "Lemma elements_nodup : forall s : t elt, bst s -> NoDupA eqk (elements s).",
            "VernacStartTheoremProof",
            "0ad4ef889d952779adb82af68c8a7864dfee1b30"
        ],
        [
            "intros; apply PX.Sort_NoDupA; auto.",
            "VernacExtend",
            "a591c63bd966a56f782e312b93cff9be36c13356"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_aux_cardinal : forall (m:t elt) acc, (length acc + cardinal m)%nat = length (elements_aux acc m).",
            "VernacStartTheoremProof",
            "f8687cf0fff940f24a66cf7d2fbc2e05faa03ec6"
        ],
        [
            "simple induction m; simpl; intuition.",
            "VernacExtend",
            "8a2890657250ceaf32344f85965b1b9b121c21b7"
        ],
        [
            "rewrite <- H; simpl.",
            "VernacExtend",
            "e8238f5ec1a7a8a6da09dbe89b55898b7c037993"
        ],
        [
            "rewrite <- H0; omega.",
            "VernacExtend",
            "8f7d7f13b9fa53809bfc704a2fa5a9d070d908c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_cardinal : forall (m:t elt), cardinal m = length (elements m).",
            "VernacStartTheoremProof",
            "ab67e227fd383ab6a70bb9af414f51c9952ed95c"
        ],
        [
            "exact (fun m => elements_aux_cardinal m nil).",
            "VernacExtend",
            "05397603639c000bc92b2a23dafc90769b4ae41e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_app : forall (s:t elt) acc, elements_aux acc s = elements s ++ acc.",
            "VernacStartTheoremProof",
            "509e8d121fc32c60bfbcf45dd547fc945a249251"
        ],
        [
            "induction s; simpl; intros; auto.",
            "VernacExtend",
            "959f715c7053f7a7d894450f1f31103c87459625"
        ],
        [
            "rewrite IHs1, IHs2.",
            "VernacExtend",
            "3365e3c5023d8e463d7af7048e4ff019f8cc1937"
        ],
        [
            "unfold elements; simpl.",
            "VernacExtend",
            "3a5ede3fc95cc2d937dc2e580411df13d3f8a30c"
        ],
        [
            "rewrite 2 IHs1, IHs2, !app_nil_r, !app_ass; auto.",
            "VernacExtend",
            "2db4dc49d2fb68c3949c26765b74f253d379ac66"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_node : forall (t1 t2:t elt) x e z l, elements t1 ++ (x,e) :: elements t2 ++ l = elements (Node t1 x e t2 z) ++ l.",
            "VernacStartTheoremProof",
            "d11dd81a771bef65afc4d7d28ce87ca328c7cc13"
        ],
        [
            "unfold elements; simpl; intros.",
            "VernacExtend",
            "1dd628ebc6735beeeef33700c74c6160cb647d53"
        ],
        [
            "rewrite !elements_app, !app_nil_r, !app_ass; auto.",
            "VernacExtend",
            "2f35fa23ac18e68743d29fb14946a2954cdfbc37"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fold' (A : Type) (f : key -> elt -> A -> A)(s : t elt) := L.fold f (elements s).",
            "VernacDefinition",
            "a4e4a10e3a44364341e94b126266046e904fa396"
        ],
        [
            "Lemma fold_equiv_aux : forall (A : Type) (s : t elt) (f : key -> elt -> A -> A) (a : A) acc, L.fold f (elements_aux acc s) a = L.fold f acc (fold f s a).",
            "VernacStartTheoremProof",
            "995dfc005727c69d625e7043e8f69de8dfc1c064"
        ],
        [
            "simple induction s.",
            "VernacExtend",
            "15315e9486524eeadf6f490cd6a6309641d2d7e2"
        ],
        [
            "simpl; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "simpl; intros.",
            "VernacExtend",
            "429a59199da524088af55673600740ccc58db31e"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fold_equiv : forall (A : Type) (s : t elt) (f : key -> elt -> A -> A) (a : A), fold f s a = fold' f s a.",
            "VernacStartTheoremProof",
            "1a2f91d6a8430fda34116490549fdaca80c207f5"
        ],
        [
            "unfold fold', elements.",
            "VernacExtend",
            "6f1c483c634d020a66c8745f582350f1b68bb0f0"
        ],
        [
            "simple induction s; simpl; auto; intros.",
            "VernacExtend",
            "558b0fd873e331b664291802a8366c889cdf681d"
        ],
        [
            "rewrite fold_equiv_aux.",
            "VernacExtend",
            "354a61d1cbae9142e6633995f249a3ab183853e0"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fold_1 : forall (s:t elt)(Hs:bst s)(A : Type)(i:A)(f : key -> elt -> A -> A), fold f s i = fold_left (fun a p => f p#1 p#2 a) (elements s) i.",
            "VernacStartTheoremProof",
            "d426ee5cf69cdf5f917e6ea576cda4afbc709703"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite fold_equiv.",
            "VernacExtend",
            "0db7255508df51bc533fe197a3ceab3689a9c078"
        ],
        [
            "unfold fold'.",
            "VernacExtend",
            "890354cd2816a1db4e93a50f4710afd7eaae5576"
        ],
        [
            "rewrite L.fold_1.",
            "VernacExtend",
            "0e5fc6ae135e8c2a32ae4f60917feefbe41aee23"
        ],
        [
            "unfold L.elements; auto.",
            "VernacExtend",
            "3898b5091455aadaa52907fdc6cb0ba55a2a2e23"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint flatten_e (e : enumeration elt) : list (key*elt) := match e with | End _ => nil | More x e t r => (x,e) :: elements t ++ flatten_e r end.",
            "VernacFixpoint",
            "7f120e8cb4241249453a4001b106e648753bde7f"
        ],
        [
            "Lemma flatten_e_elements : forall (l:t elt) r x d z e, elements l ++ flatten_e (More x d r e) = elements (Node l x d r z) ++ flatten_e e.",
            "VernacStartTheoremProof",
            "6709f12dcabd1d28ed4c905fbb7d6fbe2bb777aa"
        ],
        [
            "intros; apply elements_node.",
            "VernacExtend",
            "38f19b22a1592f0ec62efcec94d92c8f5cd3f946"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cons_1 : forall (s:t elt) e, flatten_e (cons s e) = elements s ++ flatten_e e.",
            "VernacStartTheoremProof",
            "11d82c1bbebb4cdb125f7921ee5c2a5eda544156"
        ],
        [
            "induction s; auto; intros.",
            "VernacExtend",
            "7e11a55f60f88dd2e5375132e1f3b7f94c0933b9"
        ],
        [
            "simpl flatten_e; rewrite IHs1; apply flatten_e_elements; auto.",
            "VernacExtend",
            "05956b3b8c16a9780fae2b4172283b175532069c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Variable cmp : elt->elt->bool.",
            "VernacAssumption",
            "44ec5f8194e3ecf4368d8d64a6d995481d6114a9"
        ],
        [
            "Definition IfEq b l1 l2 := L.equal cmp l1 l2 = b.",
            "VernacDefinition",
            "3cfccb3e2f5797a22713b48734625359e1aa9a31"
        ],
        [
            "Lemma cons_IfEq : forall b x1 x2 d1 d2 l1 l2, X.eq x1 x2 -> cmp d1 d2 = true -> IfEq b l1 l2 -> IfEq b ((x1,d1)::l1) ((x2,d2)::l2).",
            "VernacStartTheoremProof",
            "1b2d02d709dd1abe64a489af5093fbf2537805de"
        ],
        [
            "unfold IfEq; destruct b; simpl; intros; destruct X.compare; simpl; try rewrite H0; auto; order.",
            "VernacExtend",
            "b21cd559b70160e84f4da9c325496854d1e8af15"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_end_IfEq : forall e2, IfEq (equal_end e2) nil (flatten_e e2).",
            "VernacStartTheoremProof",
            "acdc3923752403b4fd2fef5888788d34a7768c86"
        ],
        [
            "destruct e2; red; auto.",
            "VernacExtend",
            "69af8d5c51712029246b8e3fca68b9e6bc0f9313"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_more_IfEq : forall x1 d1 (cont:enumeration elt -> bool) x2 d2 r2 e2 l, IfEq (cont (cons r2 e2)) l (elements r2 ++ flatten_e e2) -> IfEq (equal_more cmp x1 d1 cont (More x2 d2 r2 e2)) ((x1,d1)::l) (flatten_e (More x2 d2 r2 e2)).",
            "VernacStartTheoremProof",
            "c6ec6b2b3cd42c65dc062762efeba721d82c99f4"
        ],
        [
            "unfold IfEq; simpl; intros; destruct X.compare; simpl; auto.",
            "VernacExtend",
            "6e520628e821f9b938eb114191a5a9443753e07e"
        ],
        [
            "rewrite <-andb_lazy_alt; f_equal; auto.",
            "VernacExtend",
            "9845caf9be927ff541767f76c1114b9b14e3a707"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_cont_IfEq : forall m1 cont e2 l, (forall e, IfEq (cont e) l (flatten_e e)) -> IfEq (equal_cont cmp m1 cont e2) (elements m1 ++ l) (flatten_e e2).",
            "VernacStartTheoremProof",
            "b10db8fdb239781dc16f083bf6c1d8b775f28454"
        ],
        [
            "induction m1 as [|l1 Hl1 x1 d1 r1 Hr1 h1]; intros; auto.",
            "VernacExtend",
            "1849dc9c59d42c73406e26537045c7dadf6db84a"
        ],
        [
            "rewrite <- elements_node; simpl.",
            "VernacExtend",
            "b0df2d54638b9390c4cf67ca02051bd65388bd96"
        ],
        [
            "apply Hl1; auto.",
            "VernacExtend",
            "247b19b1a76df71264ab7b1b51ad1eda98cffa03"
        ],
        [
            "clear e2; intros [|x2 d2 r2 e2].",
            "VernacExtend",
            "b93f0b38aa29d0c1216c09b976fd1499b1774e61"
        ],
        [
            "simpl; red; auto.",
            "VernacExtend",
            "9ed6460e4e61d353d112cc43c92538d9dc50b5ff"
        ],
        [
            "apply equal_more_IfEq.",
            "VernacExtend",
            "0d7674feafdf5f7e24fd0104ee574768d596fa25"
        ],
        [
            "rewrite <- cons_1; auto.",
            "VernacExtend",
            "023e9b6f744de2cce6cbb7b277e4c9fa570707ab"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_IfEq : forall (m1 m2:t elt), IfEq (equal cmp m1 m2) (elements m1) (elements m2).",
            "VernacStartTheoremProof",
            "aaca19b30369fb06aada6639e6a8d99e26a8b17d"
        ],
        [
            "intros; unfold equal.",
            "VernacExtend",
            "0320d667e01a7a1fc718b0238c0252d62dda91b7"
        ],
        [
            "rewrite <- (app_nil_r (elements m1)).",
            "VernacExtend",
            "4e691370356ba7938589d63fe02015c2d2183773"
        ],
        [
            "replace (elements m2) with (flatten_e (cons m2 (End _))) by (rewrite cons_1; simpl; rewrite app_nil_r; auto).",
            "VernacExtend",
            "4049272aba9e82af1f0cb87200223ce8d89933d6"
        ],
        [
            "apply equal_cont_IfEq.",
            "VernacExtend",
            "6394e1b7e7c28b575b7f6a452003198622090aec"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply equal_end_IfEq; auto.",
            "VernacExtend",
            "63b5274e3af59b491537d137117b788bed7a2ac2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Equivb m m' := (forall k, In k m <-> In k m') /\\ (forall k e e', MapsTo k e m -> MapsTo k e' m' -> cmp e e' = true).",
            "VernacDefinition",
            "072cab3a3f845eb0954628a68789b2fb9f3e42dd"
        ],
        [
            "Lemma Equivb_elements : forall s s', Equivb s s' <-> L.Equivb cmp (elements s) (elements s').",
            "VernacStartTheoremProof",
            "497555f8c0ee0f0f90e44245e7bef2b3f7b5bfbc"
        ],
        [
            "unfold Equivb, L.Equivb; split; split; intros.",
            "VernacExtend",
            "b5755227b81daf6772176d1ef8b8debf05c378dd"
        ],
        [
            "do 2 rewrite elements_in; firstorder.",
            "VernacExtend",
            "d3ca6886de6bb497ee22a80d839e44e786b025ef"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "apply (H2 k); rewrite <- elements_mapsto; auto.",
            "VernacExtend",
            "e8745b767029f958b85e9516270909e64907f9b8"
        ],
        [
            "do 2 rewrite <- elements_in; firstorder.",
            "VernacExtend",
            "a73f245d0a08c442cb07833b3fec2767d31762e1"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "apply (H2 k); unfold L.PX.MapsTo; rewrite elements_mapsto; auto.",
            "VernacExtend",
            "c99cfdd8e52625bd346a812c0dbce6fff128901a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_Equivb : forall (s s': t elt), bst s -> bst s' -> (equal cmp s s' = true <-> Equivb s s').",
            "VernacStartTheoremProof",
            "79db83f46ad1ce6c6509e6cee269f6d399729c1b"
        ],
        [
            "intros s s' B B'.",
            "VernacExtend",
            "1ee3b284d3233338d7be96044c708fda6b7edf40"
        ],
        [
            "rewrite Equivb_elements, <- equal_IfEq.",
            "VernacExtend",
            "1ffcddf559e7955dd8458a0e0788f3e61bdf1ab6"
        ],
        [
            "split; [apply L.equal_2|apply L.equal_1]; auto.",
            "VernacExtend",
            "f26643e7474fabcca299af5f028aa1bd6c070759"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Elt.",
            "VernacEndSegment",
            "ef6686463d3f7dfcb40f4805cf8f45019f83fdad"
        ],
        [
            "Section Map.",
            "VernacBeginSection",
            "12ca5ab2f7de3292eec6072cc06769cd51c25553"
        ],
        [
            "Variable elt elt' : Type.",
            "VernacAssumption",
            "75e2ab475766496c51355c093e5b307931d67c82"
        ],
        [
            "Variable f : elt -> elt'.",
            "VernacAssumption",
            "eb0bc3e9ce5ad6c2d8cd82a51bfa42784178d922"
        ],
        [
            "Lemma map_1 : forall (m: t elt)(x:key)(e:elt), MapsTo x e m -> MapsTo x (f e) (map f m).",
            "VernacStartTheoremProof",
            "134ac4d3043d09dddb8250dde995c3854341a9e9"
        ],
        [
            "induction m; simpl; inversion_clear 1; auto.",
            "VernacExtend",
            "af11f63c4e0d4e193352bdaa0a3e37bf908df605"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_2 : forall (m: t elt)(x:key), In x (map f m) -> In x m.",
            "VernacStartTheoremProof",
            "7054253de531f1b7bd01af74a1a6d01b2b94328b"
        ],
        [
            "induction m; simpl; inversion_clear 1; auto.",
            "VernacExtend",
            "af11f63c4e0d4e193352bdaa0a3e37bf908df605"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_bst : forall m, bst m -> bst (map f m).",
            "VernacStartTheoremProof",
            "f6e673c36fa358384ee05939915660f85f91a044"
        ],
        [
            "induction m; simpl; auto.",
            "VernacExtend",
            "fef957ed452ac0981dd5620d82fa8cb3b652f75b"
        ],
        [
            "inversion_clear 1; constructor; auto; red; auto using map_2.",
            "VernacExtend",
            "70aaaef30ec098854fa6123190f2bfe5b585b5ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Map.",
            "VernacEndSegment",
            "8fa7735d92e76131e10c5cfe95a2247db65a4b9f"
        ],
        [
            "Section Mapi.",
            "VernacBeginSection",
            "0582f5d525e5d38139cbfb8e3d1a1106ab04d8db"
        ],
        [
            "Variable elt elt' : Type.",
            "VernacAssumption",
            "75e2ab475766496c51355c093e5b307931d67c82"
        ],
        [
            "Variable f : key -> elt -> elt'.",
            "VernacAssumption",
            "6e757c0087a0146bed539a352c41d32879d7f257"
        ],
        [
            "Lemma mapi_1 : forall (m: tree elt)(x:key)(e:elt), MapsTo x e m -> exists y, X.eq y x /\\ MapsTo x (f y e) (mapi f m).",
            "VernacStartTheoremProof",
            "ccf02ed3401a3f05c6df9f9889af56bd8d09aec6"
        ],
        [
            "induction m; simpl; inversion_clear 1; auto.",
            "VernacExtend",
            "af11f63c4e0d4e193352bdaa0a3e37bf908df605"
        ],
        [
            "exists k; auto.",
            "VernacExtend",
            "930bbe24c94723a9e2f5da004090011e877c06d9"
        ],
        [
            "destruct (IHm1 _ _ H0).",
            "VernacExtend",
            "3a94834f6bcdb8900e0722d551e4a7cd2a58c723"
        ],
        [
            "exists x0; intuition.",
            "VernacExtend",
            "3744c7fe0cedc1906401ed802cd31c7149e10d10"
        ],
        [
            "destruct (IHm2 _ _ H0).",
            "VernacExtend",
            "8a891bf5b03595a623c916fa95fed286bbb211e1"
        ],
        [
            "exists x0; intuition.",
            "VernacExtend",
            "3744c7fe0cedc1906401ed802cd31c7149e10d10"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapi_2 : forall (m: t elt)(x:key), In x (mapi f m) -> In x m.",
            "VernacStartTheoremProof",
            "4ef63319985498c141f765065cb777b09fe590e2"
        ],
        [
            "induction m; simpl; inversion_clear 1; auto.",
            "VernacExtend",
            "af11f63c4e0d4e193352bdaa0a3e37bf908df605"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapi_bst : forall m, bst m -> bst (mapi f m).",
            "VernacStartTheoremProof",
            "d1f0a886881929e22ffdc1f33dd46bf57cfac5ef"
        ],
        [
            "induction m; simpl; auto.",
            "VernacExtend",
            "fef957ed452ac0981dd5620d82fa8cb3b652f75b"
        ],
        [
            "inversion_clear 1; constructor; auto; red; auto using mapi_2.",
            "VernacExtend",
            "4511a42beedeb484551761c59821a4f8f2f1f124"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Mapi.",
            "VernacEndSegment",
            "450125240f70fa598260db1ffde7d3ba90692641"
        ],
        [
            "Section Map_option.",
            "VernacBeginSection",
            "838490cb3cea5c318aa9757ba7fcb4043ce0ab37"
        ],
        [
            "Variable elt elt' : Type.",
            "VernacAssumption",
            "75e2ab475766496c51355c093e5b307931d67c82"
        ],
        [
            "Variable f : key -> elt -> option elt'.",
            "VernacAssumption",
            "bdee4e50008c1114dd86a1be45f861da76bb1dfe"
        ],
        [
            "Hypothesis f_compat : forall x x' d, X.eq x x' -> f x d = f x' d.",
            "VernacAssumption",
            "e2446e733d4f7ce3a36dcf28c6711af0dc99560a"
        ],
        [
            "Lemma map_option_2 : forall (m:t elt)(x:key), In x (map_option f m) -> exists d, MapsTo x d m /\\ f x d <> None.",
            "VernacStartTheoremProof",
            "d5cd07f58f5d9dd9de90df518d28715ea403dacb"
        ],
        [
            "intros m; functional induction (map_option f m); simpl; auto; intros.",
            "VernacExtend",
            "3a23111596838235cbc2a0407dcecefe82574295"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "rewrite join_in in H; destruct H as [H|[H|H]].",
            "VernacExtend",
            "8bee5317802361028a3e631b8b79a77efb83b129"
        ],
        [
            "exists d; split; auto; rewrite (f_compat d H), e0; discriminate.",
            "VernacExtend",
            "ee19619c0ca1239df58da3dc9b32423a1bcd6be3"
        ],
        [
            "destruct (IHt _ H) as (d0 & ? & ?); exists d0; auto.",
            "VernacExtend",
            "015024a712387dc41a0f51b8a10b2041fe2489cd"
        ],
        [
            "destruct (IHt0 _ H) as (d0 & ? & ?); exists d0; auto.",
            "VernacExtend",
            "8e82c77ff1b8a996ed99b7ee8e4a78d85a9cac91"
        ],
        [
            "rewrite concat_in in H; destruct H as [H|H].",
            "VernacExtend",
            "dd58bda5b7733a4dd29755eb94ff9bc6aa08956c"
        ],
        [
            "destruct (IHt _ H) as (d0 & ? & ?); exists d0; auto.",
            "VernacExtend",
            "015024a712387dc41a0f51b8a10b2041fe2489cd"
        ],
        [
            "destruct (IHt0 _ H) as (d0 & ? & ?); exists d0; auto.",
            "VernacExtend",
            "8e82c77ff1b8a996ed99b7ee8e4a78d85a9cac91"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_option_bst : forall m, bst m -> bst (map_option f m).",
            "VernacStartTheoremProof",
            "97e6c66310b68b1c35d484bc57808bfb8324834b"
        ],
        [
            "intros m; functional induction (map_option f m); simpl; auto; intros; inv bst.",
            "VernacExtend",
            "7b0ff7d89c2cfc7a802efafc28418d9a8d83ae2a"
        ],
        [
            "apply join_bst; auto; intros y H; destruct (map_option_2 H) as (d0 & ? & ?); eauto using MapsTo_In.",
            "VernacExtend",
            "2c2af67038fe209dabf9885a5c0fce1afa3cc75f"
        ],
        [
            "apply concat_bst; auto; intros y y' H H'.",
            "VernacExtend",
            "6723388d328188dbee79b9dc8b23d72553eb4c20"
        ],
        [
            "destruct (map_option_2 H) as (d0 & ? & ?).",
            "VernacExtend",
            "75d0eb9d521b6e2399f43fdb063b34d40e03bbaa"
        ],
        [
            "destruct (map_option_2 H') as (d0' & ? & ?).",
            "VernacExtend",
            "759b5a19e78390ca2fa5d9799d545171c5f122e2"
        ],
        [
            "eapply X.lt_trans with x; eauto using MapsTo_In.",
            "VernacExtend",
            "654854615686d211afa1c4f0f571d8cebbf08822"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve map_option_bst.",
            "VernacHints",
            "6dcc7b113fe6a6221bbd30c4b0ac4a1968e20279"
        ],
        [
            "Ltac nonify e := replace e with (@None elt) by (symmetry; rewrite not_find_iff; auto; intro; order).",
            "VernacExtend",
            "76546d7621bf646ae046485dc432aa8ca2fa8181"
        ],
        [
            "Lemma map_option_find : forall (m:t elt)(x:key), bst m -> find x (map_option f m) = match (find x m) with Some d => f x d | None => None end.",
            "VernacStartTheoremProof",
            "807d7d0a3da095bb3621579f4458ef104312224e"
        ],
        [
            "intros m; functional induction (map_option f m); simpl; auto; intros; inv bst; rewrite join_find || rewrite concat_find; auto; simpl; try destruct X.compare as [Hlt|Heq|Hlt]; simpl; auto.",
            "VernacExtend",
            "f55dfe0be9f58e43a69b645289c28333cdd80dc9"
        ],
        [
            "rewrite (f_compat d Heq); auto.",
            "VernacExtend",
            "f9df3f5e4feb0509032fd5587af1b8251b9a0555"
        ],
        [
            "intros y H; destruct (map_option_2 H) as (? & ? & ?); eauto using MapsTo_In.",
            "VernacExtend",
            "3af37751a0ab7ef09af9f143de29ce0be13342d2"
        ],
        [
            "intros y H; destruct (map_option_2 H) as (? & ? & ?); eauto using MapsTo_In.",
            "VernacExtend",
            "3af37751a0ab7ef09af9f143de29ce0be13342d2"
        ],
        [
            "rewrite <- IHt, IHt0; auto; nonify (find x0 r); auto.",
            "VernacExtend",
            "9df4dfc29afe741270d8bebd1a97343a032cad77"
        ],
        [
            "rewrite IHt, IHt0; auto; nonify (find x0 r); nonify (find x0 l); auto.",
            "VernacExtend",
            "7ef117a092254437aa78431cad27f5f73471f3b1"
        ],
        [
            "rewrite (f_compat d Heq); auto.",
            "VernacExtend",
            "f9df3f5e4feb0509032fd5587af1b8251b9a0555"
        ],
        [
            "rewrite <- IHt0, IHt; auto; nonify (find x0 l); auto.",
            "VernacExtend",
            "cb89ffc13bf4ebca8acd4c90445a86d9eb60c33b"
        ],
        [
            "destruct (find x0 (map_option f r)); auto.",
            "VernacExtend",
            "edd9509f9a79edcb406cbde640c1b8124fa9c45b"
        ],
        [
            "intros y y' H H'.",
            "VernacExtend",
            "48bed1db0c2e140c88a3667d920b28c3ad85a1e1"
        ],
        [
            "destruct (map_option_2 H) as (? & ? & ?).",
            "VernacExtend",
            "e50d3fa88cef0bffe1d42628b4d916892d154b65"
        ],
        [
            "destruct (map_option_2 H') as (? & ? & ?).",
            "VernacExtend",
            "7b9af0349ad32fbd319442d3438a1fd79ac412dd"
        ],
        [
            "eapply X.lt_trans with x; eauto using MapsTo_In.",
            "VernacExtend",
            "654854615686d211afa1c4f0f571d8cebbf08822"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Map_option.",
            "VernacEndSegment",
            "bf97f17271e1085a5739f04ff4af112833cf66c7"
        ],
        [
            "Section Map2_opt.",
            "VernacBeginSection",
            "059752336374022831adc958a93190abd0679419"
        ],
        [
            "Variable elt elt' elt'' : Type.",
            "VernacAssumption",
            "bf8f6f82bf5fcf2b225f5a782e20a1205b1ec879"
        ],
        [
            "Variable f0 : key -> option elt -> option elt' -> option elt''.",
            "VernacAssumption",
            "f7cf056431ef995e13348223f1c818a06525c104"
        ],
        [
            "Variable f : key -> elt -> option elt' -> option elt''.",
            "VernacAssumption",
            "f8292fe09825370e9d2d86b82699e2781ffd7282"
        ],
        [
            "Variable mapl : t elt -> t elt''.",
            "VernacAssumption",
            "c34b564f43720c603f04fde4285977f85d96f776"
        ],
        [
            "Variable mapr : t elt' -> t elt''.",
            "VernacAssumption",
            "1935c39a36c0932adcc9cdd325e9545e609b2c01"
        ],
        [
            "Hypothesis f0_f : forall x d o, f x d o = f0 x (Some d) o.",
            "VernacAssumption",
            "732d9e2893ab6449d92cbb3db2ff743a573fd015"
        ],
        [
            "Hypothesis mapl_bst : forall m, bst m -> bst (mapl m).",
            "VernacAssumption",
            "5315f5b49ec286516f63758d2f3f085a4486e35c"
        ],
        [
            "Hypothesis mapr_bst : forall m', bst m' -> bst (mapr m').",
            "VernacAssumption",
            "7e5db3d6914ff199ade0e258bb9351b9819090a6"
        ],
        [
            "Hypothesis mapl_f0 : forall x m, bst m -> find x (mapl m) = match find x m with Some d => f0 x (Some d) None | None => None end.",
            "VernacAssumption",
            "eaf73bd437066bfddfbd3332417b13cde51fafd7"
        ],
        [
            "Hypothesis mapr_f0 : forall x m', bst m' -> find x (mapr m') = match find x m' with Some d' => f0 x None (Some d') | None => None end.",
            "VernacAssumption",
            "0ac7c494682f04bf5fbc85c9053d26bf3c512717"
        ],
        [
            "Hypothesis f0_compat : forall x x' o o', X.eq x x' -> f0 x o o' = f0 x' o o'.",
            "VernacAssumption",
            "8b494951bd7af640f7b67ebf9b55ac9de859086a"
        ],
        [
            "Notation map2_opt := (map2_opt f mapl mapr).",
            "VernacSyntacticDefinition",
            "cf20915347a47ef21302c16a0ec16d19fb0197a2"
        ],
        [
            "Lemma map2_opt_2 : forall m m' y, bst m -> bst m' -> In y (map2_opt m m') -> In y m \\/ In y m'.",
            "VernacStartTheoremProof",
            "bc429db76223777d5c999db8f234ec5439c32911"
        ],
        [
            "intros m m'; functional induction (map2_opt m m'); intros; auto; try factornode _x0 _x1 _x2 _x3 _x4 as m2; try (generalize (split_in_1 x1 H0 y)(split_in_2 x1 H0 y) (split_bst x1 H0); rewrite e1; simpl; destruct 3; inv bst).",
            "VernacExtend",
            "9657619b97610ac5964d12eb0353481b89cd2b03"
        ],
        [
            "right; apply find_in.",
            "VernacExtend",
            "36360cf224a9b49a55fb305697e7694eeec3d56d"
        ],
        [
            "generalize (in_find (mapr_bst H0) H1); rewrite mapr_f0; auto.",
            "VernacExtend",
            "9f643af9b8e503c42d35a2224a45624665e14d7e"
        ],
        [
            "destruct (find y m2); auto; intros; discriminate.",
            "VernacExtend",
            "c214c1b59eaee5f884438bb82a157c66c614cec7"
        ],
        [
            "factornode l1 x1 d1 r1 _x as m1.",
            "VernacExtend",
            "93f157da9e94083776573602ba32efd26f63fee1"
        ],
        [
            "left; apply find_in.",
            "VernacExtend",
            "4c8b1d1dbc442346de204685653b5a49a485fe61"
        ],
        [
            "generalize (in_find (mapl_bst H) H1); rewrite mapl_f0; auto.",
            "VernacExtend",
            "a4a8ba3842cceb3ab0643e810ba0506cb38cfeff"
        ],
        [
            "destruct (find y m1); auto; intros; discriminate.",
            "VernacExtend",
            "e026db3efa38dc6f7abe47bec16fcd86f4304004"
        ],
        [
            "rewrite join_in in H1; destruct H1 as [H'|[H'|H']]; auto.",
            "VernacExtend",
            "48f947571f88c5b644061db3c06b640ea6c8847f"
        ],
        [
            "destruct (IHt1 y H6 H4 H'); intuition.",
            "VernacExtend",
            "44ed84d75006b3164ff0e2613c571af71ed776bb"
        ],
        [
            "destruct (IHt0 y H7 H5 H'); intuition.",
            "VernacExtend",
            "8b19ab867550fa58452b8d7997a2d731c8af0ce8"
        ],
        [
            "rewrite concat_in in H1; destruct H1 as [H'|H']; auto.",
            "VernacExtend",
            "8b465971d0b8c9d7b6624163ca11b94565d7fae3"
        ],
        [
            "destruct (IHt1 y H6 H4 H'); intuition.",
            "VernacExtend",
            "44ed84d75006b3164ff0e2613c571af71ed776bb"
        ],
        [
            "destruct (IHt0 y H7 H5 H'); intuition.",
            "VernacExtend",
            "8b19ab867550fa58452b8d7997a2d731c8af0ce8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map2_opt_bst : forall m m', bst m -> bst m' -> bst (map2_opt m m').",
            "VernacStartTheoremProof",
            "7de9a546898304f972d089c07c9f4dcc60f9a4cc"
        ],
        [
            "intros m m'; functional induction (map2_opt m m'); intros; auto; try factornode _x0 _x1 _x2 _x3 _x4 as m2; inv bst; generalize (split_in_1 x1 H0)(split_in_2 x1 H0)(split_bst x1 H0); rewrite e1; simpl in *; destruct 3.",
            "VernacExtend",
            "5e7dd23ff5a3737a88d0e09d4996e1f94cee4cb3"
        ],
        [
            "apply join_bst; auto.",
            "VernacExtend",
            "e3516841c6cd61e54881112f5d1409ea2e2fbe2e"
        ],
        [
            "intros y Hy; specialize H with y.",
            "VernacExtend",
            "18ecc3ea45f08d6bb7361da4794f5f5451e304c0"
        ],
        [
            "destruct (map2_opt_2 H1 H6 Hy); intuition.",
            "VernacExtend",
            "b70c6c098f9fc8de1c30f8a27f3f26ea847a4ee1"
        ],
        [
            "intros y Hy; specialize H5 with y.",
            "VernacExtend",
            "bc9215f72c880f2f42c0301a528fc8a542ddc3ee"
        ],
        [
            "destruct (map2_opt_2 H2 H7 Hy); intuition.",
            "VernacExtend",
            "33475c156ff738463edad3b4403455d878124752"
        ],
        [
            "apply concat_bst; auto.",
            "VernacExtend",
            "172c5a231e862286eccc5b23b545330ff871f388"
        ],
        [
            "intros y y' Hy Hy'; specialize H with y; specialize H5 with y'.",
            "VernacExtend",
            "4cd73629de7580e3794e4d15590251458656ca2b"
        ],
        [
            "apply X.lt_trans with x1.",
            "VernacExtend",
            "b2bd1d6cf830f7a4c2d88801f6a7c088a9900a78"
        ],
        [
            "destruct (map2_opt_2 H1 H6 Hy); intuition.",
            "VernacExtend",
            "b70c6c098f9fc8de1c30f8a27f3f26ea847a4ee1"
        ],
        [
            "destruct (map2_opt_2 H2 H7 Hy'); intuition.",
            "VernacExtend",
            "d737268d61ebbbcad4dc91c79a83c1a18e88d8cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve map2_opt_bst.",
            "VernacHints",
            "94964be3dd0b64e8a3be5befc4368f923fc4632e"
        ],
        [
            "Ltac map2_aux := match goal with | H : In ?x _ \\/ In ?x ?m, H' : find ?x ?m = find ?x ?m', B:bst ?m, B':bst ?m' |- _ => destruct H; [ intuition_in; order | rewrite <-(find_in_equiv B B' H'); auto ] end.",
            "VernacExtend",
            "11eb2778d61210e8dfecdea7ddfec2be96b5f369"
        ],
        [
            "Ltac nonify t := match t with (find ?y (map2_opt ?m ?m')) => replace t with (@None elt''); [ | symmetry; rewrite not_find_iff; auto; intro; destruct (@map2_opt_2 m m' y); auto; order ] end.",
            "VernacExtend",
            "6c0fcf86587507ef025f829d0513578690ad324e"
        ],
        [
            "Lemma map2_opt_1 : forall m m' y, bst m -> bst m' -> In y m \\/ In y m' -> find y (map2_opt m m') = f0 y (find y m) (find y m').",
            "VernacStartTheoremProof",
            "43115d64fc9aeeb7857e3d942f62d4a06f1e046a"
        ],
        [
            "intros m m'; functional induction (map2_opt m m'); intros; auto; try factornode _x0 _x1 _x2 _x3 _x4 as m2; try (generalize (split_in_1 x1 H0)(split_in_2 x1 H0) (split_in_3 x1 H0)(split_bst x1 H0)(split_find x1 y H0) (split_lt_tree (x:=x1) H0)(split_gt_tree (x:=x1) H0); rewrite e1; simpl in *; destruct 4; intros; inv bst; subst o2; rewrite H7, ?join_find, ?concat_find; auto).",
            "VernacExtend",
            "eb5a45674bc26594afba1a8779e3c0acade74447"
        ],
        [
            "simpl; destruct H1; [ inversion_clear H1 | ].",
            "VernacExtend",
            "5d0e67d60b73c03e4df166173e13b4daccc3e87f"
        ],
        [
            "rewrite mapr_f0; auto.",
            "VernacExtend",
            "43f4c1e2a89fb4576583e09fa6dd90c42053f4e1"
        ],
        [
            "generalize (in_find H0 H1); destruct (find y m2); intuition.",
            "VernacExtend",
            "c34531b333d7886f6c2d6cf922ba4b08c567566d"
        ],
        [
            "factornode l1 x1 d1 r1 _x as m1.",
            "VernacExtend",
            "93f157da9e94083776573602ba32efd26f63fee1"
        ],
        [
            "destruct H1; [ | inversion_clear H1 ].",
            "VernacExtend",
            "89024f57f71f8b43fd1f80d5eda0c66d2d37aa71"
        ],
        [
            "rewrite mapl_f0; auto.",
            "VernacExtend",
            "566b42c23fb661a2b2e53c65e47609d3398ac283"
        ],
        [
            "generalize (in_find H H1); destruct (find y m1); intuition.",
            "VernacExtend",
            "c90fd0889fc15770ff0c622a80e6081b82424a46"
        ],
        [
            "simpl; destruct X.compare; auto.",
            "VernacExtend",
            "93ae2c8fe491ecb870860143708f43dd5655c74c"
        ],
        [
            "apply IHt1; auto; map2_aux.",
            "VernacExtend",
            "edee7419f483681fd1e1badbeae67d2784bda6f7"
        ],
        [
            "rewrite (@f0_compat y x1), <- f0_f; auto.",
            "VernacExtend",
            "d2fb57edde2f85d4126b1d6c718c3b93b3aafcfe"
        ],
        [
            "apply IHt0; auto; map2_aux.",
            "VernacExtend",
            "efb299e92d4dce3248353ba107b805f6bbdef051"
        ],
        [
            "intros z Hz; destruct (@map2_opt_2 l1 l2' z); auto.",
            "VernacExtend",
            "4715d15a29cb3c2b03a5993dbf825d49979502d3"
        ],
        [
            "intros z Hz; destruct (@map2_opt_2 r1 r2' z); auto.",
            "VernacExtend",
            "4a30e20921bd364097d5c349db7d26e86018c148"
        ],
        [
            "destruct X.compare.",
            "VernacExtend",
            "cf7d7ef93dece2204a9fc333c6c9d151ff6c00a8"
        ],
        [
            "nonify (find y (map2_opt r1 r2')).",
            "VernacExtend",
            "d6a3626318f85886971df008274c6d87d1d4d30f"
        ],
        [
            "apply IHt1; auto; map2_aux.",
            "VernacExtend",
            "edee7419f483681fd1e1badbeae67d2784bda6f7"
        ],
        [
            "nonify (find y (map2_opt r1 r2')).",
            "VernacExtend",
            "d6a3626318f85886971df008274c6d87d1d4d30f"
        ],
        [
            "nonify (find y (map2_opt l1 l2')).",
            "VernacExtend",
            "65780cf74dee2779779b8299c48d54b6d7a4de1c"
        ],
        [
            "rewrite (@f0_compat y x1), <- f0_f; auto.",
            "VernacExtend",
            "d2fb57edde2f85d4126b1d6c718c3b93b3aafcfe"
        ],
        [
            "nonify (find y (map2_opt l1 l2')).",
            "VernacExtend",
            "65780cf74dee2779779b8299c48d54b6d7a4de1c"
        ],
        [
            "rewrite IHt0; auto; [ | map2_aux ].",
            "VernacExtend",
            "87908865410277f40a57f6367ce07cd5cd10c965"
        ],
        [
            "destruct (f0 y (find y r1) (find y r2')); auto.",
            "VernacExtend",
            "732a3e25c54a4bd14ba688621a5cfacc4ae1f774"
        ],
        [
            "intros y1 y2 Hy1 Hy2; apply X.lt_trans with x1.",
            "VernacExtend",
            "6905b4cda18c41c391c4761ba89262857d00791a"
        ],
        [
            "destruct (@map2_opt_2 l1 l2' y1); auto.",
            "VernacExtend",
            "b952951d97667905fc25f7e8a0a2bab5b6b28619"
        ],
        [
            "destruct (@map2_opt_2 r1 r2' y2); auto.",
            "VernacExtend",
            "c250a7466badf94b40d1773d918cb1ac8cad2efb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Map2_opt.",
            "VernacEndSegment",
            "44b12ccb48a1c9067a5347f5397e83ab0cc4df04"
        ],
        [
            "Section Map2.",
            "VernacBeginSection",
            "a20fcc0973d231a9779b32459547d72ce8555020"
        ],
        [
            "Variable elt elt' elt'' : Type.",
            "VernacAssumption",
            "bf8f6f82bf5fcf2b225f5a782e20a1205b1ec879"
        ],
        [
            "Variable f : option elt -> option elt' -> option elt''.",
            "VernacAssumption",
            "5c2bf6fde81f6e3dd77961f7c70459242790763c"
        ],
        [
            "Lemma map2_bst : forall m m', bst m -> bst m' -> bst (map2 f m m').",
            "VernacStartTheoremProof",
            "dfb1c54891d398c9716e8068cb6d8d035e9d4fb5"
        ],
        [
            "unfold map2; intros.",
            "VernacExtend",
            "f575b5c8e48d0a1bd912009358b880d6209bbabe"
        ],
        [
            "apply map2_opt_bst with (fun _ => f); auto using map_option_bst; intros; rewrite map_option_find; auto.",
            "VernacExtend",
            "0883666ace1b7b26141b6b65c2c29a1e475a4d8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map2_1 : forall m m' y, bst m -> bst m' -> In y m \\/ In y m' -> find y (map2 f m m') = f (find y m) (find y m').",
            "VernacStartTheoremProof",
            "1f74f8fb972b1b89b82913c615af1499ba539246"
        ],
        [
            "unfold map2; intros.",
            "VernacExtend",
            "f575b5c8e48d0a1bd912009358b880d6209bbabe"
        ],
        [
            "rewrite (map2_opt_1 (f0:=fun _ => f)); auto using map_option_bst; intros; rewrite map_option_find; auto.",
            "VernacExtend",
            "ad428e0458e063dc0c1c8fcef76b80cecb9a6d7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map2_2 : forall m m' y, bst m -> bst m' -> In y (map2 f m m') -> In y m \\/ In y m'.",
            "VernacStartTheoremProof",
            "b38f036c179562627f7cc3170375bd414e4b73bb"
        ],
        [
            "unfold map2; intros.",
            "VernacExtend",
            "f575b5c8e48d0a1bd912009358b880d6209bbabe"
        ],
        [
            "eapply map2_opt_2 with (f0:=fun _ => f); try eassumption; trivial; intros.",
            "VernacExtend",
            "df897538a030be39252e624257b37cd7beb5c1af"
        ],
        [
            "apply map_option_bst; auto.",
            "VernacExtend",
            "1177e8e883268cc6d42c5da77149fe42894f9e41"
        ],
        [
            "apply map_option_bst; auto.",
            "VernacExtend",
            "1177e8e883268cc6d42c5da77149fe42894f9e41"
        ],
        [
            "rewrite map_option_find; auto.",
            "VernacExtend",
            "f99d1046664cdc03a1dbb14fab5fab6a642e6a5d"
        ],
        [
            "rewrite map_option_find; auto.",
            "VernacExtend",
            "f99d1046664cdc03a1dbb14fab5fab6a642e6a5d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Map2.",
            "VernacEndSegment",
            "203f30e285aaeffd619bfa6c0902c22eb06c5f17"
        ],
        [
            "End Proofs.",
            "VernacEndSegment",
            "524bd7e70edfea276308014ea7047271cc26e471"
        ],
        [
            "End Raw.",
            "VernacEndSegment",
            "2fd749d80ea291efaaecadd9d1993cc21838a722"
        ],
        [
            "Module IntMake (I:Int)(X: OrderedType) <: S with Module E := X.",
            "VernacDefineModule",
            "27983f657924756f17a29e31901d4638e1e40594"
        ],
        [
            "Module E := X.",
            "VernacDefineModule",
            "dd5467716b9394b87429487ba1be9693c17fd44c"
        ],
        [
            "Module Raw := Raw I X.",
            "VernacDefineModule",
            "dc5a4ef55fe14aec4090087075ef0aef93545a9c"
        ],
        [
            "Import Raw.Proofs.",
            "VernacImport",
            "634614f64b599e90276abb2be591f306813fbdb1"
        ],
        [
            "Record bst (elt:Type) := Bst {this :> Raw.tree elt; is_bst : Raw.bst this}.",
            "VernacInductive",
            "43ab91e1fdc35cce68c4e67c8e732fc4f389fb80"
        ],
        [
            "Definition t := bst.",
            "VernacDefinition",
            "834dec36f50762006b2a32cdfb6f4fead1a5f87d"
        ],
        [
            "Definition key := E.t.",
            "VernacDefinition",
            "fd09f36b2126b865eb099cbc442b5be4de605813"
        ],
        [
            "Section Elt.",
            "VernacBeginSection",
            "7d8c2b7c85358610d3707ffaa378f25da37c746b"
        ],
        [
            "Variable elt elt' elt'': Type.",
            "VernacAssumption",
            "bf8f6f82bf5fcf2b225f5a782e20a1205b1ec879"
        ],
        [
            "Implicit Types m : t elt.",
            "VernacReserve",
            "d4f53d0a39ec20b73e2612cacb69ed5dddf67a6b"
        ],
        [
            "Implicit Types x y : key.",
            "VernacReserve",
            "3625728a16e3dec4fd95d75d69595f7d0e8376a2"
        ],
        [
            "Implicit Types e : elt.",
            "VernacReserve",
            "ac06a64eb104c51e778df522bd57ad4df3e47a12"
        ],
        [
            "Definition empty : t elt := Bst (empty_bst elt).",
            "VernacDefinition",
            "4506d7601bc0720ca178a43585aaeebd2cc5522e"
        ],
        [
            "Definition is_empty m : bool := Raw.is_empty m.(this).",
            "VernacDefinition",
            "a2fdcc04fce01f4c6b1ab5af231ff889895c6f6d"
        ],
        [
            "Definition add x e m : t elt := Bst (add_bst x e m.(is_bst)).",
            "VernacDefinition",
            "1bc2edb495c99836aade6ac4388440313347bd20"
        ],
        [
            "Definition remove x m : t elt := Bst (remove_bst x m.(is_bst)).",
            "VernacDefinition",
            "d42e75f979c7609a20addc4329d0a963d5f83cef"
        ],
        [
            "Definition mem x m : bool := Raw.mem x m.(this).",
            "VernacDefinition",
            "c84e50bf440420cbf9b218ad88abac1648899a74"
        ],
        [
            "Definition find x m : option elt := Raw.find x m.(this).",
            "VernacDefinition",
            "8e35b9d64f59afe59a502d1980a46e8c5e4d9c97"
        ],
        [
            "Definition map f m : t elt' := Bst (map_bst f m.(is_bst)).",
            "VernacDefinition",
            "6415e3150be50d75f5960670d67453b7faadef07"
        ],
        [
            "Definition mapi (f:key->elt->elt') m : t elt' := Bst (mapi_bst f m.(is_bst)).",
            "VernacDefinition",
            "693ebddea413d6dcc1f316d428963e7d2614aa59"
        ],
        [
            "Definition map2 f m (m':t elt') : t elt'' := Bst (map2_bst f m.(is_bst) m'.(is_bst)).",
            "VernacDefinition",
            "9df1e59e9986e582976de4aa9428d4e6aa3e1543"
        ],
        [
            "Definition elements m : list (key*elt) := Raw.elements m.(this).",
            "VernacDefinition",
            "cbfcb67a406041bede3863be4e44abf028cb50a8"
        ],
        [
            "Definition cardinal m := Raw.cardinal m.(this).",
            "VernacDefinition",
            "5b3e7b579e931f501ba13a8d757272bc282ffb52"
        ],
        [
            "Definition fold (A:Type) (f:key->elt->A->A) m i := Raw.fold (A:=A) f m.(this) i.",
            "VernacDefinition",
            "067b0ff4031248b36109517d79422cb4e98f9057"
        ],
        [
            "Definition equal cmp m m' : bool := Raw.equal cmp m.(this) m'.(this).",
            "VernacDefinition",
            "8ef0b484bc515bb5b631a9622f8a261c0b530cce"
        ],
        [
            "Definition MapsTo x e m : Prop := Raw.MapsTo x e m.(this).",
            "VernacDefinition",
            "997b403b828ae07a1de07a806cd8ed87dcca546d"
        ],
        [
            "Definition In x m : Prop := Raw.In0 x m.(this).",
            "VernacDefinition",
            "27f2b56b620bfab5324e520b4058db9fb4bbbc02"
        ],
        [
            "Definition Empty m : Prop := Empty m.(this).",
            "VernacDefinition",
            "071f3989439edc4c136f72873ebe02aad346e392"
        ],
        [
            "Definition eq_key : (key*elt) -> (key*elt) -> Prop := @PX.eqk elt.",
            "VernacDefinition",
            "56c892c90b50521c9e034a8236c7e5d51c82c23f"
        ],
        [
            "Definition eq_key_elt : (key*elt) -> (key*elt) -> Prop := @PX.eqke elt.",
            "VernacDefinition",
            "bbfaa5b35f801dcf5c8a2b2f375d490f77093ad2"
        ],
        [
            "Definition lt_key : (key*elt) -> (key*elt) -> Prop := @PX.ltk elt.",
            "VernacDefinition",
            "7c4475297227f9ffd8358d49530dd2213a408a1e"
        ],
        [
            "Lemma MapsTo_1 : forall m x y e, E.eq x y -> MapsTo x e m -> MapsTo y e m.",
            "VernacStartTheoremProof",
            "236e193b12e75c6faf36f1b32e13fafd742bd121"
        ],
        [
            "intros m; exact (@MapsTo_1 _ m.(this)).",
            "VernacExtend",
            "c90ecfdc8d3faf0d32b0c3ff4d16f1131d67ef33"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_1 : forall m x, In x m -> mem x m = true.",
            "VernacStartTheoremProof",
            "53af0a412d4c6f4c4cbc1dc817302d4bfb4af597"
        ],
        [
            "unfold In, mem; intros m x; rewrite In_alt; simpl; apply mem_1; auto.",
            "VernacExtend",
            "f9c260a166b01601cad1370d97c814e7e930870b"
        ],
        [
            "apply m.(is_bst).",
            "VernacExtend",
            "0ef8eba2302b0f71f9ac3e9b8e7040530e31f6df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_2 : forall m x, mem x m = true -> In x m.",
            "VernacStartTheoremProof",
            "4dcad3c69977d67f0f833466356e3779831d3d4e"
        ],
        [
            "unfold In, mem; intros m x; rewrite In_alt; simpl; apply mem_2; auto.",
            "VernacExtend",
            "5f2e3d449723a77ecb7ee20d0da60ac526fc9a88"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma empty_1 : Empty empty.",
            "VernacStartTheoremProof",
            "7522f2b7a60d5493f09b33f63d37755f64932135"
        ],
        [
            "exact (@empty_1 elt).",
            "VernacExtend",
            "343739a20ec10ce66de63f37124406e38f832fa6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_empty_1 : forall m, Empty m -> is_empty m = true.",
            "VernacStartTheoremProof",
            "628b7ce292bdf73b2cba9ef8febb80dbce9ab9ca"
        ],
        [
            "intros m; exact (@is_empty_1 _ m.(this)).",
            "VernacExtend",
            "9f34eb5d1149619e67e3d6313fe81bae2e271c5a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_empty_2 : forall m, is_empty m = true -> Empty m.",
            "VernacStartTheoremProof",
            "0f82c7c668abe77d36ee9dc489312870431944e3"
        ],
        [
            "intros m; exact (@is_empty_2 _ m.(this)).",
            "VernacExtend",
            "fb9d4d3d099588612bbf11d370bb794e22a0b0bb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_1 : forall m x y e, E.eq x y -> MapsTo y e (add x e m).",
            "VernacStartTheoremProof",
            "387d4c09eef57243a3b1a59a71595e103e492bf5"
        ],
        [
            "intros m x y e; exact (@add_1 elt _ x y e).",
            "VernacExtend",
            "7e63a938860aec53550349eadb44d6a6cb27c65b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_2 : forall m x y e e', ~ E.eq x y -> MapsTo y e m -> MapsTo y e (add x e' m).",
            "VernacStartTheoremProof",
            "b4b372b49877ade47044ff293a448d7b76535d99"
        ],
        [
            "intros m x y e e'; exact (@add_2 elt _ x y e e').",
            "VernacExtend",
            "b9f5602e4e7922f4ebc9b566bf4c90431e6e9a2e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_3 : forall m x y e e', ~ E.eq x y -> MapsTo y e (add x e' m) -> MapsTo y e m.",
            "VernacStartTheoremProof",
            "faae6494468653de34d596c09d5ce1e698478471"
        ],
        [
            "intros m x y e e'; exact (@add_3 elt _ x y e e').",
            "VernacExtend",
            "7f0e9550263c57716b794935e59a7d7190960453"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_1 : forall m x y, E.eq x y -> ~ In y (remove x m).",
            "VernacStartTheoremProof",
            "fbf28b0f05e8158a0b50d4786ac497f751b90395"
        ],
        [
            "unfold In, remove; intros m x y; rewrite In_alt; simpl; apply remove_1; auto.",
            "VernacExtend",
            "eeaf4ad590bb7235d51b56743055cd944283b776"
        ],
        [
            "apply m.(is_bst).",
            "VernacExtend",
            "0ef8eba2302b0f71f9ac3e9b8e7040530e31f6df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_2 : forall m x y e, ~ E.eq x y -> MapsTo y e m -> MapsTo y e (remove x m).",
            "VernacStartTheoremProof",
            "585d0ee8befca3bea3679c16b3101a98feef2d4d"
        ],
        [
            "intros m x y e; exact (@remove_2 elt _ x y e m.(is_bst)).",
            "VernacExtend",
            "2b6cd682300953bb4fa8c05db1a71928b8df4f2f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_3 : forall m x y e, MapsTo y e (remove x m) -> MapsTo y e m.",
            "VernacStartTheoremProof",
            "de38975c8ce80a907f1fa2da03ad92b8eea7f4fe"
        ],
        [
            "intros m x y e; exact (@remove_3 elt _ x y e m.(is_bst)).",
            "VernacExtend",
            "bc2ca5e69de864aab6796f263b07baa421a5cc4f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_1 : forall m x e, MapsTo x e m -> find x m = Some e.",
            "VernacStartTheoremProof",
            "9f3974ce4c9fe9ec1aaee64c8ea8c682b7882a4d"
        ],
        [
            "intros m x e; exact (@find_1 elt _ x e m.(is_bst)).",
            "VernacExtend",
            "865909fb91aab7b9df49b6ff05f0253840458862"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma find_2 : forall m x e, find x m = Some e -> MapsTo x e m.",
            "VernacStartTheoremProof",
            "3836b618816ed2c6e9ccfed50231b9f4c0fdd2c0"
        ],
        [
            "intros m; exact (@find_2 elt m.(this)).",
            "VernacExtend",
            "46011616780cee71f1ea3bc0863ca7551d159810"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fold_1 : forall m (A : Type) (i : A) (f : key -> elt -> A -> A), fold f m i = fold_left (fun a p => f (fst p) (snd p) a) (elements m) i.",
            "VernacStartTheoremProof",
            "3f9eccb77601fb87dcbc813fae883044a2c866f5"
        ],
        [
            "intros m; exact (@fold_1 elt m.(this) m.(is_bst)).",
            "VernacExtend",
            "4b73165f7339dd8e8af2ff1a44210deda895b345"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_1 : forall m x e, MapsTo x e m -> InA eq_key_elt (x,e) (elements m).",
            "VernacStartTheoremProof",
            "db64bb8ac9de62851889ea518b5661428bd2f2ae"
        ],
        [
            "intros; unfold elements, MapsTo, eq_key_elt; rewrite elements_mapsto; auto.",
            "VernacExtend",
            "3bd925a09de89b68d12e39d538e24b0474e3aa93"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_2 : forall m x e, InA eq_key_elt (x,e) (elements m) -> MapsTo x e m.",
            "VernacStartTheoremProof",
            "86a573eb790c07e67636569383bc0b412900455f"
        ],
        [
            "intros; unfold elements, MapsTo, eq_key_elt; rewrite <- elements_mapsto; auto.",
            "VernacExtend",
            "081dcb0ff5367efbaa54fc7b23bcdf414653f6d2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_3 : forall m, sort lt_key (elements m).",
            "VernacStartTheoremProof",
            "f44e1c315c58c6a7c446c56c81ff06635ccefa8d"
        ],
        [
            "intros m; exact (@elements_sort elt m.(this) m.(is_bst)).",
            "VernacExtend",
            "90e5d13cb97a1140ba43745c93140d726d358cbf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_3w : forall m, NoDupA eq_key (elements m).",
            "VernacStartTheoremProof",
            "b6bfca2c73d2f91d063d0d5611644e287fa9551a"
        ],
        [
            "intros m; exact (@elements_nodup elt m.(this) m.(is_bst)).",
            "VernacExtend",
            "778efe9762a145281d11a1624a07611be6e85fe9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cardinal_1 : forall m, cardinal m = length (elements m).",
            "VernacStartTheoremProof",
            "287b29d944df021bc5dc1caf364ddc3c0d974c72"
        ],
        [
            "intro m; exact (@elements_cardinal elt m.(this)).",
            "VernacExtend",
            "01f6cfedfbba2b187c1ef3334684138f90545633"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Equal m m' := forall y, find y m = find y m'.",
            "VernacDefinition",
            "06ccbe2ad525772df84cf3466a7c055ca59c8508"
        ],
        [
            "Definition Equiv (eq_elt:elt->elt->Prop) m m' := (forall k, In k m <-> In k m') /\\ (forall k e e', MapsTo k e m -> MapsTo k e' m' -> eq_elt e e').",
            "VernacDefinition",
            "442cc2976421ab343212ad7d40dbea1021c30690"
        ],
        [
            "Definition Equivb cmp := Equiv (Cmp cmp).",
            "VernacDefinition",
            "30aa14693b8bfe713452d0f4f1b9d6eb0dc4b5c3"
        ],
        [
            "Lemma Equivb_Equivb : forall cmp m m', Equivb cmp m m' <-> Raw.Proofs.Equivb cmp m m'.",
            "VernacStartTheoremProof",
            "d049df598b6fc204baa66d019c629f85fc2c8d36"
        ],
        [
            "intros; unfold Equivb, Equiv, Raw.Proofs.Equivb, In.",
            "VernacExtend",
            "03e539cc448c796c0cacdfeef4c9ee1bbe768146"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "generalize (H0 k); do 2 rewrite In_alt; intuition.",
            "VernacExtend",
            "da8983e340df010e64d5cb12565c4993f060dfc8"
        ],
        [
            "generalize (H0 k); do 2 rewrite In_alt; intuition.",
            "VernacExtend",
            "da8983e340df010e64d5cb12565c4993f060dfc8"
        ],
        [
            "generalize (H0 k); do 2 rewrite <- In_alt; intuition.",
            "VernacExtend",
            "943fb480c4f239fb9f33cd93ce1280fefed57289"
        ],
        [
            "generalize (H0 k); do 2 rewrite <- In_alt; intuition.",
            "VernacExtend",
            "943fb480c4f239fb9f33cd93ce1280fefed57289"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_1 : forall m m' cmp, Equivb cmp m m' -> equal cmp m m' = true.",
            "VernacStartTheoremProof",
            "4e3380e8d5d00798de92a0f634c9b639634d041d"
        ],
        [
            "unfold equal; intros (m,b) (m',b') cmp; rewrite Equivb_Equivb; intros; simpl in *; rewrite equal_Equivb; auto.",
            "VernacExtend",
            "c6409e58e1478b3e9422f6a609a6f7be74345ab4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_2 : forall m m' cmp, equal cmp m m' = true -> Equivb cmp m m'.",
            "VernacStartTheoremProof",
            "0a3e6332234234e5064dee245e91ef87b60e59ed"
        ],
        [
            "unfold equal; intros (m,b) (m',b') cmp; rewrite Equivb_Equivb; intros; simpl in *; rewrite <-equal_Equivb; auto.",
            "VernacExtend",
            "aa32614211b7c8f596fb35166ecbd7cc495feea4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Elt.",
            "VernacEndSegment",
            "ef6686463d3f7dfcb40f4805cf8f45019f83fdad"
        ],
        [
            "Lemma map_1 : forall (elt elt':Type)(m: t elt)(x:key)(e:elt)(f:elt->elt'), MapsTo x e m -> MapsTo x (f e) (map f m).",
            "VernacStartTheoremProof",
            "027831aeae0a12f308f70711834c67f777a47dd2"
        ],
        [
            "intros elt elt' m x e f; exact (@map_1 elt elt' f m.(this) x e).",
            "VernacExtend",
            "94c552455136fc010f0a979f6d04bc9453cd4bbc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_2 : forall (elt elt':Type)(m:t elt)(x:key)(f:elt->elt'), In x (map f m) -> In x m.",
            "VernacStartTheoremProof",
            "4f35923037fc76633d3829114ddb403e82fda61a"
        ],
        [
            "intros elt elt' m x f; do 2 unfold In in *; do 2 rewrite In_alt; simpl.",
            "VernacExtend",
            "f8d6d413775a45c23d555a4c0419281f0848fc05"
        ],
        [
            "apply map_2; auto.",
            "VernacExtend",
            "33bb962e2eafd283761b45691661ab50a3a39469"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapi_1 : forall (elt elt':Type)(m: t elt)(x:key)(e:elt) (f:key->elt->elt'), MapsTo x e m -> exists y, E.eq y x /\\ MapsTo x (f y e) (mapi f m).",
            "VernacStartTheoremProof",
            "d8167586f558cb12b099d01333e74d8190c208d4"
        ],
        [
            "intros elt elt' m x e f; exact (@mapi_1 elt elt' f m.(this) x e).",
            "VernacExtend",
            "2fd588d04490e77bfea057865f381e018869f00d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mapi_2 : forall (elt elt':Type)(m: t elt)(x:key) (f:key->elt->elt'), In x (mapi f m) -> In x m.",
            "VernacStartTheoremProof",
            "f8df0096e48cdc0f5b1e0e0ebf4916fa875bf3fc"
        ],
        [
            "intros elt elt' m x f; unfold In in *; do 2 rewrite In_alt; simpl; apply mapi_2; auto.",
            "VernacExtend",
            "31168e49839101a730f123ded292f339b58f820f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map2_1 : forall (elt elt' elt'':Type)(m: t elt)(m': t elt') (x:key)(f:option elt->option elt'->option elt''), In x m \\/ In x m' -> find x (map2 f m m') = f (find x m) (find x m').",
            "VernacStartTheoremProof",
            "1a21f7a88012be566bfb557908fbca1e62177951"
        ],
        [
            "unfold find, map2, In; intros elt elt' elt'' m m' x f.",
            "VernacExtend",
            "11c33e5730a09a023c2e5a71990718af464755d5"
        ],
        [
            "do 2 rewrite In_alt; intros; simpl; apply map2_1; auto.",
            "VernacExtend",
            "6f56c75f49fcd86ad515d3a12464874e3df3eb76"
        ],
        [
            "apply m.(is_bst).",
            "VernacExtend",
            "0ef8eba2302b0f71f9ac3e9b8e7040530e31f6df"
        ],
        [
            "apply m'.(is_bst).",
            "VernacExtend",
            "bdee2c928b748d1f85dc70e4f38ef0b3f5394098"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map2_2 : forall (elt elt' elt'':Type)(m: t elt)(m': t elt') (x:key)(f:option elt->option elt'->option elt''), In x (map2 f m m') -> In x m \\/ In x m'.",
            "VernacStartTheoremProof",
            "c9a4bfe524623e9105614d341a15b410a729c2ef"
        ],
        [
            "unfold In, map2; intros elt elt' elt'' m m' x f.",
            "VernacExtend",
            "9155a883e0fa56f94a8baf2480bc749a3e6e427d"
        ],
        [
            "do 3 rewrite In_alt; intros; simpl in *; eapply map2_2; eauto.",
            "VernacExtend",
            "e926535b45e1afba7dcaca0eadfcbdfca943389b"
        ],
        [
            "apply m.(is_bst).",
            "VernacExtend",
            "0ef8eba2302b0f71f9ac3e9b8e7040530e31f6df"
        ],
        [
            "apply m'.(is_bst).",
            "VernacExtend",
            "bdee2c928b748d1f85dc70e4f38ef0b3f5394098"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IntMake.",
            "VernacEndSegment",
            "ffe73b4930e1bd1c15e0d86c1aba077160e53f0f"
        ],
        [
            "Module IntMake_ord (I:Int)(X: OrderedType)(D : OrderedType) <: Sord with Module Data := D with Module MapS.E := X.",
            "VernacDefineModule",
            "9823b3a1131bea7117931d691d325d09d550aadf"
        ],
        [
            "Module Data := D.",
            "VernacDefineModule",
            "01ed9424ba01e7b75bec4d0086d03142d0a334a4"
        ],
        [
            "Module Import MapS := IntMake(I)(X).",
            "VernacDefineModule",
            "540d280b44da05f34d9a86f85f480fca0c049b34"
        ],
        [
            "Module LO := FMapList.Make_ord(X)(D).",
            "VernacDefineModule",
            "0bb44236307065ee09706733439a464e370fb84d"
        ],
        [
            "Module R := Raw.",
            "VernacDefineModule",
            "6cafd6ee984149e23f2715f798e865115b1fc018"
        ],
        [
            "Module P := Raw.Proofs.",
            "VernacDefineModule",
            "a00412c971cdca067f6b23d5a1ee0b4b87e422cc"
        ],
        [
            "Definition t := MapS.t D.t.",
            "VernacDefinition",
            "557d982e478b506419daeab63ff0666f8cfe66ba"
        ],
        [
            "Definition cmp e e' := match D.compare e e' with EQ _ => true | _ => false end.",
            "VernacDefinition",
            "e653fab33c070635a1f5ababb0c33851219cd24a"
        ],
        [
            "Definition compare_more x1 d1 (cont:R.enumeration D.t -> comparison) e2 := match e2 with | R.End _ => Gt | R.More x2 d2 r2 e2 => match X.compare x1 x2 with | EQ _ => match D.compare d1 d2 with | EQ _ => cont (R.cons r2 e2) | LT _ => Lt | GT _ => Gt end | LT _ => Lt | GT _ => Gt end end.",
            "VernacDefinition",
            "e79fcbb08add717501e658a6b5ccc6f781efe153"
        ],
        [
            "Fixpoint compare_cont s1 (cont:R.enumeration D.t -> comparison) e2 := match s1 with | R.Leaf _ => cont e2 | R.Node l1 x1 d1 r1 _ => compare_cont l1 (compare_more x1 d1 (compare_cont r1 cont)) e2 end.",
            "VernacFixpoint",
            "93ae041f4512433d58e99879a3735aa517ae7532"
        ],
        [
            "Definition compare_end (e2:R.enumeration D.t) := match e2 with R.End _ => Eq | _ => Lt end.",
            "VernacDefinition",
            "a753ac8a3f21706015a096355d97200854601358"
        ],
        [
            "Definition compare_pure s1 s2 := compare_cont s1 compare_end (R.cons s2 (Raw.End _)).",
            "VernacDefinition",
            "34ba86ded670fcb8981d49cf199e8335333581d9"
        ],
        [
            "Definition Cmp c := match c with | Eq => LO.eq_list | Lt => LO.lt_list | Gt => (fun l1 l2 => LO.lt_list l2 l1) end.",
            "VernacDefinition",
            "4731cb4bdbb9aa8f1b60a23121fc184c6f66fa11"
        ],
        [
            "Lemma cons_Cmp : forall c x1 x2 d1 d2 l1 l2, X.eq x1 x2 -> D.eq d1 d2 -> Cmp c l1 l2 -> Cmp c ((x1,d1)::l1) ((x2,d2)::l2).",
            "VernacStartTheoremProof",
            "df86f018234aa5d3e55109852c7ef9309c55103f"
        ],
        [
            "destruct c; simpl; intros; P.MX.elim_comp; auto.",
            "VernacExtend",
            "0d7e3e7e316f87bb5645322c4735b59317206f21"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve cons_Cmp.",
            "VernacHints",
            "b92b21fc21a90d303cadbb7dac1ff095101db91a"
        ],
        [
            "Lemma compare_end_Cmp : forall e2, Cmp (compare_end e2) nil (P.flatten_e e2).",
            "VernacStartTheoremProof",
            "4a84c52b73ea00ff44f8a1c9d82fcc0aae04221b"
        ],
        [
            "destruct e2; simpl; auto.",
            "VernacExtend",
            "5e3e575d9ca34c1874272b5ae24c6fcfd38a2239"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compare_more_Cmp : forall x1 d1 cont x2 d2 r2 e2 l, Cmp (cont (R.cons r2 e2)) l (R.elements r2 ++ P.flatten_e e2) -> Cmp (compare_more x1 d1 cont (R.More x2 d2 r2 e2)) ((x1,d1)::l) (P.flatten_e (R.More x2 d2 r2 e2)).",
            "VernacStartTheoremProof",
            "c89437dcf945b224138ae49476a06ecfcac8c671"
        ],
        [
            "simpl; intros; destruct X.compare; simpl; try destruct D.compare; simpl; auto; P.MX.elim_comp; auto.",
            "VernacExtend",
            "2dd79f3892651e1feca59f3a93297b4ebe234bcf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compare_cont_Cmp : forall s1 cont e2 l, (forall e, Cmp (cont e) l (P.flatten_e e)) -> Cmp (compare_cont s1 cont e2) (R.elements s1 ++ l) (P.flatten_e e2).",
            "VernacStartTheoremProof",
            "4b02c40e662500a679469a261210a5569a59c850"
        ],
        [
            "induction s1 as [|l1 Hl1 x1 d1 r1 Hr1 h1]; intros; auto.",
            "VernacExtend",
            "9dce6b8a4b94948b093947c2e0d02f2c67e5cebd"
        ],
        [
            "rewrite <- P.elements_node; simpl.",
            "VernacExtend",
            "02d0a3a6b8265ac1695fc8926d6e59cee8ef409f"
        ],
        [
            "apply Hl1; auto.",
            "VernacExtend",
            "247b19b1a76df71264ab7b1b51ad1eda98cffa03"
        ],
        [
            "clear e2.",
            "VernacExtend",
            "3939743f01c0d90dfd875e763b8437a8e7072be0"
        ],
        [
            "intros [|x2 d2 r2 e2].",
            "VernacExtend",
            "3bce98780e0e61a8bfba76e3f38e2875110630eb"
        ],
        [
            "simpl; auto.",
            "VernacExtend",
            "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
        ],
        [
            "apply compare_more_Cmp.",
            "VernacExtend",
            "61488033014635f609ff9d822949e23a240cfb72"
        ],
        [
            "rewrite <- P.cons_1; auto.",
            "VernacExtend",
            "39513555291136dbdecef23c2b94c19da5055a9a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compare_Cmp : forall s1 s2, Cmp (compare_pure s1 s2) (R.elements s1) (R.elements s2).",
            "VernacStartTheoremProof",
            "df85ea6eefd270d319b2589a2c23760c0316b452"
        ],
        [
            "intros; unfold compare_pure.",
            "VernacExtend",
            "21b5207781350e09d91460c4c600adc1301ef53c"
        ],
        [
            "rewrite <- (app_nil_r (R.elements s1)).",
            "VernacExtend",
            "830b25f7403738f9c821d06a4e23bc3b42a59c53"
        ],
        [
            "replace (R.elements s2) with (P.flatten_e (R.cons s2 (R.End _))) by (rewrite P.cons_1; simpl; rewrite app_nil_r; auto).",
            "VernacExtend",
            "9605c844ba5761b6afd4bcfa5741422856036d68"
        ],
        [
            "auto using compare_cont_Cmp, compare_end_Cmp.",
            "VernacExtend",
            "8f7b06d9dc9463d767c60db8d21e204357496385"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eq (m1 m2 : t) := LO.eq_list (elements m1) (elements m2).",
            "VernacDefinition",
            "c04035db731a52c704805c19f919714d3c29ed0e"
        ],
        [
            "Definition lt (m1 m2 : t) := LO.lt_list (elements m1) (elements m2).",
            "VernacDefinition",
            "975ae485a41d9e3e52ff539bb69058a6c4b8c784"
        ],
        [
            "Definition compare (s s':t) : Compare lt eq s s'.",
            "VernacDefinition",
            "b3db3c9cd1057669643c51980892657387a1cefa"
        ],
        [
            "destruct s as (s,b), s' as (s',b').",
            "VernacExtend",
            "d44d83146ffad358485805831ed6b29b4039604c"
        ],
        [
            "generalize (compare_Cmp s s').",
            "VernacExtend",
            "ec1cc16b900f601c509d6c4efc54b7608cdb6c6b"
        ],
        [
            "destruct compare_pure; intros; [apply EQ|apply LT|apply GT]; red; auto.",
            "VernacExtend",
            "3ced2da0e0e3fac88bbdca11e7420c1d82a494dd"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition selements (m1 : t) := LO.MapS.Build_slist (P.elements_sort m1.(is_bst)).",
            "VernacDefinition",
            "4d2d6df4b3d067d2591670d190fd13cf51fcb2bb"
        ],
        [
            "Definition seq (m1 m2 : t) := LO.eq (selements m1) (selements m2).",
            "VernacDefinition",
            "afbd4317c0e7e8d9dbbb8e0bdd3f68377a201b64"
        ],
        [
            "Definition slt (m1 m2 : t) := LO.lt (selements m1) (selements m2).",
            "VernacDefinition",
            "44258f3905758bb51dffe5bc9f8cef79cf079cf1"
        ],
        [
            "Lemma eq_seq : forall m1 m2, eq m1 m2 <-> seq m1 m2.",
            "VernacStartTheoremProof",
            "c4fb086ddbee69681975deb613165f2a93be79a9"
        ],
        [
            "unfold eq, seq, selements, elements, LO.eq; intuition.",
            "VernacExtend",
            "f1b87ec9cba6716377dc2c6914c2fd87c3f3e490"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_slt : forall m1 m2, lt m1 m2 <-> slt m1 m2.",
            "VernacStartTheoremProof",
            "47bd6cf82d684c85049df2e50ac40e2001683e14"
        ],
        [
            "unfold lt, slt, selements, elements, LO.lt; intuition.",
            "VernacExtend",
            "8c5d62688bbb8f08aa1f26dd3f05d2c51e6cdb0d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_1 : forall (m m' : t), Equivb cmp m m' -> eq m m'.",
            "VernacStartTheoremProof",
            "3bae086559cbb242bcada49ee6d361c93044459f"
        ],
        [
            "intros m m'.",
            "VernacExtend",
            "617ebb524c10b94a79f3da66164aa5e3960dcac8"
        ],
        [
            "rewrite eq_seq; unfold seq.",
            "VernacExtend",
            "ca8a32ee8b7194903be6c7526f7034c2990a83b7"
        ],
        [
            "rewrite Equivb_Equivb.",
            "VernacExtend",
            "170c2a8a3cf5e094a49f59b4410e3b6c60a5d3b6"
        ],
        [
            "rewrite P.Equivb_elements.",
            "VernacExtend",
            "6fc91d4a9b6656106b6a9ea04aeb7ec7b44ef857"
        ],
        [
            "auto using LO.eq_1.",
            "VernacExtend",
            "af9a5d142df2b0d65ffc0b037f51b45fdf7d30bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_2 : forall m m', eq m m' -> Equivb cmp m m'.",
            "VernacStartTheoremProof",
            "5a8e440bb884c9ea16c355ec0f29aa277c46fffd"
        ],
        [
            "intros m m'.",
            "VernacExtend",
            "617ebb524c10b94a79f3da66164aa5e3960dcac8"
        ],
        [
            "rewrite eq_seq; unfold seq.",
            "VernacExtend",
            "ca8a32ee8b7194903be6c7526f7034c2990a83b7"
        ],
        [
            "rewrite Equivb_Equivb.",
            "VernacExtend",
            "170c2a8a3cf5e094a49f59b4410e3b6c60a5d3b6"
        ],
        [
            "rewrite P.Equivb_elements.",
            "VernacExtend",
            "6fc91d4a9b6656106b6a9ea04aeb7ec7b44ef857"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (LO.eq_2 H).",
            "VernacExtend",
            "44d07de09b961ade0d4192fdbbe59ea368b10dbb"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_refl : forall m : t, eq m m.",
            "VernacStartTheoremProof",
            "f0918db2d8b72b37a9538de6909f3ff1bc680083"
        ],
        [
            "intros; rewrite eq_seq; unfold seq; intros; apply LO.eq_refl.",
            "VernacExtend",
            "633c4a51af6d588f7950123e7bad5bd1bf421345"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_sym : forall m1 m2 : t, eq m1 m2 -> eq m2 m1.",
            "VernacStartTheoremProof",
            "f683acad99e020461d70e6fb9afe1ea6bc67091f"
        ],
        [
            "intros m1 m2; rewrite 2 eq_seq; unfold seq; intros; apply LO.eq_sym; auto.",
            "VernacExtend",
            "e0d993183acac4f90a2754f50105781e3ec97270"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma eq_trans : forall m1 m2 m3 : t, eq m1 m2 -> eq m2 m3 -> eq m1 m3.",
            "VernacStartTheoremProof",
            "be15a55834141362cd82a8dfca477265d3671fd6"
        ],
        [
            "intros m1 m2 M3; rewrite 3 eq_seq; unfold seq.",
            "VernacExtend",
            "6708854da61ff7ecc51591589748f73fbcf5144b"
        ],
        [
            "intros; eapply LO.eq_trans; eauto.",
            "VernacExtend",
            "102e13138d77f959fbc1542434bf54fe03ee509a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_trans : forall m1 m2 m3 : t, lt m1 m2 -> lt m2 m3 -> lt m1 m3.",
            "VernacStartTheoremProof",
            "2e207e30725561e88b0c53a5de0f09aba9b8c821"
        ],
        [
            "intros m1 m2 m3; rewrite 3 lt_slt; unfold slt; intros; eapply LO.lt_trans; eauto.",
            "VernacExtend",
            "5ddb770e0d76f7f28c94d293bfc0582ab336cf38"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_not_eq : forall m1 m2 : t, lt m1 m2 -> ~ eq m1 m2.",
            "VernacStartTheoremProof",
            "035b059bb7f1cabd294a31313f2e54f9f5752abf"
        ],
        [
            "intros m1 m2; rewrite lt_slt, eq_seq; unfold slt, seq; intros; apply LO.lt_not_eq; auto.",
            "VernacExtend",
            "1da3241f32daad70ea11257aff2a4a2691909fa1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IntMake_ord.",
            "VernacEndSegment",
            "362dd85760a4c2c3276d56fb0117255853893c0e"
        ],
        [
            "Module Make (X: OrderedType) <: S with Module E := X :=IntMake(Z_as_Int)(X).",
            "VernacDefineModule",
            "72ff8ec4799bd6b7d7ad0601f54d91fbb6446bc0"
        ],
        [
            "Module Make_ord (X: OrderedType)(D: OrderedType) <: Sord with Module Data := D with Module MapS.E := X :=IntMake_ord(Z_as_Int)(X)(D).",
            "VernacDefineModule",
            "e866e2815e98be8e1e9ecc05a02a58115fc5b7ce"
        ]
    ],
    "proofs": [
        {
            "name": "MapsTo_In",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "induction 1; auto.",
                        "VernacExtend",
                        "1f706f8985097cf30b2449a4fda927a48fc6a84a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_MapsTo",
            "line_nb": 105,
            "steps": [
                {
                    "command": [
                        "induction 1; try destruct IHIn as (e,He); exists e; auto.",
                        "VernacExtend",
                        "e7e950a4740e41d7617fae3cd426c9939edcff9b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_alt",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intros (e,H); eauto.",
                        "VernacExtend",
                        "4b7a65331fd976749477fc83d06bec5d93f8498c"
                    ]
                },
                {
                    "command": [
                        "unfold In0; apply In_MapsTo; auto.",
                        "VernacExtend",
                        "834c402f529b13ff697c9e586647f03ef9c16aee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MapsTo_1",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "induction m; simpl; intuition_in; eauto.",
                        "VernacExtend",
                        "27f41e5fff1ecd3ff157e319b31c58856f60c81a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_1",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "intros m x y; induction m; simpl; intuition_in; eauto.",
                        "VernacExtend",
                        "9529ed25ddb3a82282c5f6fa99fd295045310cc3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "In_node_iff",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_leaf",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "unfold lt_tree; intros; intuition_in.",
                        "VernacExtend",
                        "625b4053f510ae37d54db8f5019b66e4eafdf70c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gt_leaf",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "unfold gt_tree; intros; intuition_in.",
                        "VernacExtend",
                        "db580a1c4868ec59e703a8bbfae3025b3bef204f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_tree_node",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "unfold lt_tree in *; intuition_in; order.",
                        "VernacExtend",
                        "a69ebe92ad8da29e65ea76cd3b4fe9dfee3e6374"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gt_tree_node",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "unfold gt_tree in *; intuition_in; order.",
                        "VernacExtend",
                        "7bf8d840a25ff363d700985442a8ecb14c6d4a76"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_left",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_right",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gt_left",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gt_right",
            "line_nb": 145,
            "steps": [
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_tree_not_in",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "intros; intro; generalize (H _ H0); order.",
                        "VernacExtend",
                        "0b27c7c6f0ec75fd2dd0356154568b36d0b60952"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_tree_trans",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "eauto.",
                        "VernacExtend",
                        "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gt_tree_not_in",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "intros; intro; generalize (H _ H0); order.",
                        "VernacExtend",
                        "0b27c7c6f0ec75fd2dd0356154568b36d0b60952"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "gt_tree_trans",
            "line_nb": 158,
            "steps": [
                {
                    "command": [
                        "eauto.",
                        "VernacExtend",
                        "d5f3a05ca887c29bb0b422fc64ae2775fea3935e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "empty_bst",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "unfold empty; auto.",
                        "VernacExtend",
                        "a2693eb12ba268d474a985e95db0bb58ccb52aa5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "empty_1",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "unfold empty, Empty; intuition_in.",
                        "VernacExtend",
                        "919d1cd8481b9d89ab0c54c9c0d23bc2e6c3488f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_empty_1",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "destruct m as [|r x e l h]; simpl; auto.",
                        "VernacExtend",
                        "f5f02179f4e9338c7767068b7277f29be83e1992"
                    ]
                },
                {
                    "command": [
                        "intro H; elim (H x e); auto.",
                        "VernacExtend",
                        "e48f3df8b66b52d005f5f1bcb3f314794bbf4c3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_empty_2",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "destruct m; simpl; intros; try discriminate; red; intuition_in.",
                        "VernacExtend",
                        "ca233ee8474538b2256b9fa107395b3dcc1d7124"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_1",
            "line_nb": 176,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (mem x m); auto; intros; clearf; inv bst; intuition_in; order.",
                        "VernacExtend",
                        "e73afff675e41e56b81ab6d025d7a662df219556"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_2",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (mem x m); auto; intros; discriminate.",
                        "VernacExtend",
                        "8ecd8d39c3102e8540d2390de82e4696c60420c9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_1",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (find x m); auto; intros; clearf; inv bst; intuition_in; simpl; auto; try solve [order | absurd (X.lt x y); eauto | absurd (X.lt y x); eauto].",
                        "VernacExtend",
                        "cda2565f395f6cc22bb93a68343323ede37693cf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_2",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (find x m); subst; intros; clearf; try discriminate.",
                        "VernacExtend",
                        "a0081a03af8d53a2a0c61a0e8a8437d10d683468"
                    ]
                },
                {
                    "command": [
                        "constructor 2; auto.",
                        "VernacExtend",
                        "7da0a8caf04c8554762a019f74337cf755edf2f1"
                    ]
                },
                {
                    "command": [
                        "inversion H; auto.",
                        "VernacExtend",
                        "ca70ce9532e796fd752cb12d4d270e557a16bc8a"
                    ]
                },
                {
                    "command": [
                        "constructor 3; auto.",
                        "VernacExtend",
                        "1193a5d85313fd36623cfcd3f11324c7e9d07a07"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_iff",
            "line_nb": 191,
            "steps": [
                {
                    "command": [
                        "split; auto using find_1, find_2.",
                        "VernacExtend",
                        "5581e85b5be13d4e5d8a15dc10add633f69dca0e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_in",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "case_eq (find x m); [intros|congruence].",
                        "VernacExtend",
                        "09ac842d0a3fbb6f85836d8995b77a9cda0769bb"
                    ]
                },
                {
                    "command": [
                        "apply MapsTo_In with e; apply find_2; auto.",
                        "VernacExtend",
                        "e8bf35892d21ecefa828889773dd20186b73f38f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_find",
            "line_nb": 199,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (In_MapsTo H0) as (d,Hd).",
                        "VernacExtend",
                        "689d4fd19b7d6874b690701886e85c91de85dee6"
                    ]
                },
                {
                    "command": [
                        "rewrite (find_1 H Hd); discriminate.",
                        "VernacExtend",
                        "48375c8e2e836085cb3c6bd96e2c128e077ff8d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_in_iff",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "split; auto using find_in, in_find.",
                        "VernacExtend",
                        "4c98a8c031779c0bfa0dcd09e8acdf42c543a8ee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_find_iff",
            "line_nb": 207,
            "steps": [
                {
                    "command": [
                        "split; intros.",
                        "VernacExtend",
                        "3c0a2af2969d0c39838e9010244dfd28201b7f3e"
                    ]
                },
                {
                    "command": [
                        "red; intros.",
                        "VernacExtend",
                        "cac589df0c867c7c46c31951b6da5495d0153212"
                    ]
                },
                {
                    "command": [
                        "elim (in_find H H1 H0).",
                        "VernacExtend",
                        "3ee60507891dd0b8b4a85934aacb9da9b4865d9e"
                    ]
                },
                {
                    "command": [
                        "case_eq (find x m); [ intros | auto ].",
                        "VernacExtend",
                        "70e11f30f6cbad424a4201b3389ab46eaaa08fca"
                    ]
                },
                {
                    "command": [
                        "elim H0; apply find_in; congruence.",
                        "VernacExtend",
                        "186bd2055aea905c22f277fceeb70253cd196b6b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_find",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "intros; destruct (find x m); destruct (find x m'); split; intros; try split; try congruence.",
                        "VernacExtend",
                        "5cc7a45b7a1d5321dbd993d1d45ed08e93575d48"
                    ]
                },
                {
                    "command": [
                        "rewrite H; auto.",
                        "VernacExtend",
                        "3e25713af8eaa76cddf9287af10d66733da2ee16"
                    ]
                },
                {
                    "command": [
                        "symmetry; rewrite <- H; auto.",
                        "VernacExtend",
                        "8cc0d78aeee2a3af794d0c5aece2ce147fe8d241"
                    ]
                },
                {
                    "command": [
                        "rewrite H; auto.",
                        "VernacExtend",
                        "3e25713af8eaa76cddf9287af10d66733da2ee16"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_mapsto_equiv",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "intros m m' x Hm Hm'.",
                        "VernacExtend",
                        "444c55a5f091a943668b6ad1d91b8579dbbf031c"
                    ]
                },
                {
                    "command": [
                        "rewrite find_find.",
                        "VernacExtend",
                        "d50e2ccab50d371e9ec205e3a5d22453870e7c83"
                    ]
                },
                {
                    "command": [
                        "split; intros H d; specialize H with d.",
                        "VernacExtend",
                        "03ac538fa4945a087bca3f9d8c365a4f6e65aacf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- 2 find_iff; auto.",
                        "VernacExtend",
                        "44854c34cbf2045cacb6fbd07e468fb2064a5f1f"
                    ]
                },
                {
                    "command": [
                        "rewrite 2 find_iff; auto.",
                        "VernacExtend",
                        "cd414d76187aac17a81c1e93719f18ed051df303"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "find_in_equiv",
            "line_nb": 227,
            "steps": [
                {
                    "command": [
                        "split; intros; apply find_in; [ rewrite <- H1 | rewrite H1 ]; apply in_find; auto.",
                        "VernacExtend",
                        "b142e98ae1a171462321b29f8d275d4946bf7cc0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "create_bst",
            "line_nb": 230,
            "steps": [
                {
                    "command": [
                        "unfold create; auto.",
                        "VernacExtend",
                        "4d89f4b44a39fae4ef436be7c5a318c2b03c802d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "create_in",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "unfold create; split; [ inversion_clear 1 | ]; intuition.",
                        "VernacExtend",
                        "ef8d68f7e5f64dbc3f13801c31216f5d1dfde89e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bal_bst",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "intros l x e r; functional induction (bal l x e r); intros; clearf; inv bst; repeat apply create_bst; auto; unfold create; try constructor; (apply lt_tree_node || apply gt_tree_node); auto; (eapply lt_tree_trans || eapply gt_tree_trans); eauto.",
                        "VernacExtend",
                        "8ba15a563c3b42743c0d9f48b720214569f17bfc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bal_in",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "intros l x e r; functional induction (bal l x e r); intros; clearf; rewrite !create_in; intuition_in.",
                        "VernacExtend",
                        "f1c76f2f791892adce58fcfcef2b206065c17b3f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bal_mapsto",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "intros l x e r; functional induction (bal l x e r); intros; clearf; unfold assert_false, create; intuition_in.",
                        "VernacExtend",
                        "78f0486c53ecc1422065244b2c32caff2087365e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bal_find",
            "line_nb": 247,
            "steps": [
                {
                    "command": [
                        "intros; rewrite find_mapsto_equiv; auto; intros; apply bal_mapsto.",
                        "VernacExtend",
                        "a18dd25bd07c7cacd4bf52bae83b19241772eb18"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_in",
            "line_nb": 250,
            "steps": [
                {
                    "command": [
                        "intros m x y e; functional induction (add x e m); auto; intros; try (rewrite bal_in, IHt); intuition_in.",
                        "VernacExtend",
                        "c8d6839f648523bf92ca76ca6de7a664650bc0bc"
                    ]
                },
                {
                    "command": [
                        "apply In_1 with x; auto.",
                        "VernacExtend",
                        "402590a78da6b45b9141619a6a4e9b4f81260919"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_bst",
            "line_nb": 254,
            "steps": [
                {
                    "command": [
                        "intros m x e; functional induction (add x e m); intros; inv bst; try apply bal_bst; auto; intro z; rewrite add_in; intuition.",
                        "VernacExtend",
                        "6fa3492606ebb8bfe2160a054e1c12c7484003ff"
                    ]
                },
                {
                    "command": [
                        "apply MX.eq_lt with x; auto.",
                        "VernacExtend",
                        "c9285d4259d4b3b392c2780ba1ed4a148f1a4099"
                    ]
                },
                {
                    "command": [
                        "apply MX.lt_eq with x; auto.",
                        "VernacExtend",
                        "3197a25b7f4121c9c0d4c68d132ff179b2d45b8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_1",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "intros m x y e; functional induction (add x e m); intros; inv bst; try rewrite bal_mapsto; unfold create; eauto.",
                        "VernacExtend",
                        "5afaa9d355b4a22be70dc8a0b50541ab506b1d2a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_2",
            "line_nb": 263,
            "steps": [
                {
                    "command": [
                        "intros m x y e e'; induction m; simpl; auto.",
                        "VernacExtend",
                        "f1dd682c9bb51b9d65bcd90b78b98a497581dfa7"
                    ]
                },
                {
                    "command": [
                        "destruct (X.compare x k); intros; inv bst; try rewrite bal_mapsto; unfold create; auto; inv MapsTo; auto; order.",
                        "VernacExtend",
                        "276cabf1ca4b50fb6786520ddc21eb3074db7652"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_3",
            "line_nb": 267,
            "steps": [
                {
                    "command": [
                        "intros m x y e e'; induction m; simpl; auto.",
                        "VernacExtend",
                        "f1dd682c9bb51b9d65bcd90b78b98a497581dfa7"
                    ]
                },
                {
                    "command": [
                        "intros; inv MapsTo; auto; order.",
                        "VernacExtend",
                        "b1aef6c3796416e25f3cf1cef9226cdc404b66cc"
                    ]
                },
                {
                    "command": [
                        "destruct (X.compare x k); intro; try rewrite bal_mapsto; auto; unfold create; intros; inv MapsTo; auto; order.",
                        "VernacExtend",
                        "036b44dc183df5eebd278f558e46bf6ac80c4431"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_find",
            "line_nb": 272,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (~X.eq x y -> find y (add x e m) = find y m).",
                        "VernacExtend",
                        "1717def8d38225030ae9f16a3d905cf0de386c8d"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite find_mapsto_equiv; auto.",
                        "VernacExtend",
                        "4a33b769d253c2a703a97753085ee16ad80a37d0"
                    ]
                },
                {
                    "command": [
                        "split; eauto using add_2, add_3.",
                        "VernacExtend",
                        "d20300d05d6ea61782b31ef5f9fdf36324cab836"
                    ]
                },
                {
                    "command": [
                        "destruct X.compare; try (apply H0; order).",
                        "VernacExtend",
                        "aca1163c0380dee15d5a99a5ef4f7189bd8e23fd"
                    ]
                },
                {
                    "command": [
                        "auto using find_1, add_1.",
                        "VernacExtend",
                        "2ba2142a49fb4dab9e359f279b03b09b11bc7e35"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_min_in",
            "line_nb": 280,
            "steps": [
                {
                    "command": [
                        "intros l x e r; functional induction (remove_min l x e r); simpl in *; intros.",
                        "VernacExtend",
                        "b502c42666fa2f8e1aacdbf6e8d6ffd52a33b956"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "rewrite e0 in *; simpl; intros.",
                        "VernacExtend",
                        "290f75bb17a79f4313ce7cf7832e94a96d6e3d2c"
                    ]
                },
                {
                    "command": [
                        "rewrite bal_in, In_node_iff, IHp; intuition.",
                        "VernacExtend",
                        "b8b5a9f72856e819b15699978eaad024b747bb5c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_min_mapsto",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "intros l x e r; functional induction (remove_min l x e r); simpl in *; intros.",
                        "VernacExtend",
                        "b502c42666fa2f8e1aacdbf6e8d6ffd52a33b956"
                    ]
                },
                {
                    "command": [
                        "intuition_in; subst; auto.",
                        "VernacExtend",
                        "44c4ab3151cc247799cef27906b758dea86a5711"
                    ]
                },
                {
                    "command": [
                        "rewrite e0 in *; simpl; intros.",
                        "VernacExtend",
                        "290f75bb17a79f4313ce7cf7832e94a96d6e3d2c"
                    ]
                },
                {
                    "command": [
                        "rewrite bal_mapsto; auto; unfold create.",
                        "VernacExtend",
                        "7fbedc0eba8de96e18f11e5274b5d7a3bfc00e4d"
                    ]
                },
                {
                    "command": [
                        "simpl in *;destruct (IHp _x y e').",
                        "VernacExtend",
                        "bf3057a7901e0661655343928007786bc4fbe287"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H1; intuition.",
                        "VernacExtend",
                        "aab18041153d11bb39eb1f141ab24e40236a5e42"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H3; intuition.",
                        "VernacExtend",
                        "c1e90aa75ee62de82addbe9b7e1f282647e5f97a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_min_bst",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "intros l x e r; functional induction (remove_min l x e r); simpl in *; intros.",
                        "VernacExtend",
                        "b502c42666fa2f8e1aacdbf6e8d6ffd52a33b956"
                    ]
                },
                {
                    "command": [
                        "inv bst; auto.",
                        "VernacExtend",
                        "938c9705f9e23ee303989449c4a40a9261936f3f"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H; inversion_clear H0.",
                        "VernacExtend",
                        "a3a264fe7e36953984b0a5de48c77a3870a8f2fa"
                    ]
                },
                {
                    "command": [
                        "apply bal_bst; auto.",
                        "VernacExtend",
                        "76acbf39c93023468b95a607211ce0104e8d9ff1"
                    ]
                },
                {
                    "command": [
                        "rewrite e0 in *; simpl in *; apply (IHp _x); auto.",
                        "VernacExtend",
                        "95c8370feb9c506cf9288620f7238a7dd53bf021"
                    ]
                },
                {
                    "command": [
                        "intro; intros.",
                        "VernacExtend",
                        "0cdd5fdbe3e02025c50d75d2ceac375faa9c4b87"
                    ]
                },
                {
                    "command": [
                        "generalize (remove_min_in ll lx ld lr _x y).",
                        "VernacExtend",
                        "88255624ea50717a52dd1e13e5ea6a7288a6d6bc"
                    ]
                },
                {
                    "command": [
                        "rewrite e0; simpl in *.",
                        "VernacExtend",
                        "125a223882e163e6943dfd76cedf30425ed85f66"
                    ]
                },
                {
                    "command": [
                        "destruct 1.",
                        "VernacExtend",
                        "0e61c29dbe9a16af1faa0807bdb22c467076a9d2"
                    ]
                },
                {
                    "command": [
                        "apply H2; intuition.",
                        "VernacExtend",
                        "62ccf470386d42ddfc8ada6b4a85def485590063"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_min_gt_tree",
            "line_nb": 309,
            "steps": [
                {
                    "command": [
                        "intros l x e r; functional induction (remove_min l x e r); simpl in *; intros.",
                        "VernacExtend",
                        "b502c42666fa2f8e1aacdbf6e8d6ffd52a33b956"
                    ]
                },
                {
                    "command": [
                        "inv bst; auto.",
                        "VernacExtend",
                        "938c9705f9e23ee303989449c4a40a9261936f3f"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H.",
                        "VernacExtend",
                        "90909d92eb32e95a21a5b90b29a49dc97bcea342"
                    ]
                },
                {
                    "command": [
                        "intro; intro.",
                        "VernacExtend",
                        "364fb55c2e6981f6f1c3e7958106b5d05470b327"
                    ]
                },
                {
                    "command": [
                        "rewrite e0 in *;simpl in *.",
                        "VernacExtend",
                        "f7f5dacd687cc806d6f8bc943e7025c8eb93c60c"
                    ]
                },
                {
                    "command": [
                        "generalize (IHp _x H0).",
                        "VernacExtend",
                        "2e2de149f997e567bdb445a20d7a433728c19b04"
                    ]
                },
                {
                    "command": [
                        "generalize (remove_min_in ll lx ld lr _x m#1).",
                        "VernacExtend",
                        "b465f52d2e44f2c0bc0d1ad2e50d86a7fabb4ce6"
                    ]
                },
                {
                    "command": [
                        "rewrite e0; simpl; intros.",
                        "VernacExtend",
                        "4636d20862cce7905c56922537464da4ac24b0db"
                    ]
                },
                {
                    "command": [
                        "rewrite (bal_in l' x d r y) in H.",
                        "VernacExtend",
                        "176a340fabc357c7c95a5579b183b55526f5f460"
                    ]
                },
                {
                    "command": [
                        "assert (In m#1 (Node ll lx ld lr _x)) by (rewrite H4; auto); clear H4.",
                        "VernacExtend",
                        "fbf04ff208736eb738fbb1fb9f5c844344bb9b94"
                    ]
                },
                {
                    "command": [
                        "assert (X.lt m#1 x) by order.",
                        "VernacExtend",
                        "b29c67b72a65d2dd94fb89fb478e362cda19b30c"
                    ]
                },
                {
                    "command": [
                        "decompose [or] H; order.",
                        "VernacExtend",
                        "5a66faa9b6f1701622ccdc2d142f281d8b2cf713"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_min_find",
            "line_nb": 324,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct X.compare.",
                        "VernacExtend",
                        "cf7d7ef93dece2204a9fc333c6c9d151ff6c00a8"
                    ]
                },
                {
                    "command": [
                        "rewrite not_find_iff; auto.",
                        "VernacExtend",
                        "8b8fd68851c15c4bf587e40f431e32e440769ce8"
                    ]
                },
                {
                    "command": [
                        "rewrite remove_min_in; red; destruct 1 as [H'|H']; [ order | ].",
                        "VernacExtend",
                        "4374f172c5d12c639a6dfb4d5d5128befa52df81"
                    ]
                },
                {
                    "command": [
                        "generalize (remove_min_gt_tree H H'); order.",
                        "VernacExtend",
                        "6277acec475a7ce05cd85dc707367f1eb94af972"
                    ]
                },
                {
                    "command": [
                        "apply find_1; auto.",
                        "VernacExtend",
                        "fbc62f085a9b001085e937996a14400269b19beb"
                    ]
                },
                {
                    "command": [
                        "rewrite remove_min_mapsto; auto.",
                        "VernacExtend",
                        "c7067651cd7c07a9b02fa7c549a47de13c89c69c"
                    ]
                },
                {
                    "command": [
                        "rewrite find_mapsto_equiv; eauto; intros.",
                        "VernacExtend",
                        "9aa795f02ef4490f8c595da0ca5ee77b61790dfe"
                    ]
                },
                {
                    "command": [
                        "rewrite remove_min_mapsto; intuition; order.",
                        "VernacExtend",
                        "e84cf64ac97272433d0e11f2359d42b68d55a699"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "merge_in",
            "line_nb": 335,
            "steps": [
                {
                    "command": [
                        "intros m1 m2; functional induction (merge m1 m2);intros; try factornode _x _x0 _x1 _x2 _x3 as m1.",
                        "VernacExtend",
                        "f21b08739296bb9161f745026965190db923af9b"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "rewrite bal_in, remove_min_in, e1; simpl; intuition.",
                        "VernacExtend",
                        "88423274ef4f9fdee2071378481498fbe3986f62"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "merge_mapsto",
            "line_nb": 341,
            "steps": [
                {
                    "command": [
                        "intros m1 m2; functional induction (merge m1 m2); intros; try factornode _x _x0 _x1 _x2 _x3 as m1.",
                        "VernacExtend",
                        "f21b08739296bb9161f745026965190db923af9b"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "rewrite bal_mapsto, remove_min_mapsto, e1; simpl; auto.",
                        "VernacExtend",
                        "d3e2a939c3e1121b69c4f67e865b5f5fc39d24b4"
                    ]
                },
                {
                    "command": [
                        "unfold create.",
                        "VernacExtend",
                        "b0ea35b2ed0636c23f14d2b00842d6c95b3b8d14"
                    ]
                },
                {
                    "command": [
                        "intuition; subst; auto.",
                        "VernacExtend",
                        "a413b1004b36e70518df6bcd5c477cb046def878"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H1; intuition.",
                        "VernacExtend",
                        "aab18041153d11bb39eb1f141ab24e40236a5e42"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "merge_bst",
            "line_nb": 350,
            "steps": [
                {
                    "command": [
                        "intros m1 m2; functional induction (merge m1 m2); intros; auto; try factornode _x _x0 _x1 _x2 _x3 as m1.",
                        "VernacExtend",
                        "37ffc189cb7c29ae448336c746f2d9f8d8221de6"
                    ]
                },
                {
                    "command": [
                        "apply bal_bst; auto.",
                        "VernacExtend",
                        "76acbf39c93023468b95a607211ce0104e8d9ff1"
                    ]
                },
                {
                    "command": [
                        "generalize (remove_min_bst H0); rewrite e1; simpl in *; auto.",
                        "VernacExtend",
                        "8f7ba43fcf4d8b3342d6f8f97c09e996e75a0fdf"
                    ]
                },
                {
                    "command": [
                        "intro; intro.",
                        "VernacExtend",
                        "364fb55c2e6981f6f1c3e7958106b5d05470b327"
                    ]
                },
                {
                    "command": [
                        "apply H1; auto.",
                        "VernacExtend",
                        "57fc44af14fcaf3758941b68060efcbab0060c55"
                    ]
                },
                {
                    "command": [
                        "generalize (remove_min_in l2 x2 d2 r2 _x4 x); rewrite e1; simpl; intuition.",
                        "VernacExtend",
                        "6b19d5ed4b2c7c72ba31274bad0e571bd38aeab7"
                    ]
                },
                {
                    "command": [
                        "generalize (remove_min_gt_tree H0); rewrite e1; simpl; auto.",
                        "VernacExtend",
                        "7ee25d53f859080ca991e416751565690490066d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_in",
            "line_nb": 359,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (remove x m); simpl; intros.",
                        "VernacExtend",
                        "3069c4c30344439abd361f0314edce2a8816a88c"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "inv bst; clear e0.",
                        "VernacExtend",
                        "4a22ac51275c70265a231f1ad31b34f5befcbb8f"
                    ]
                },
                {
                    "command": [
                        "rewrite bal_in; auto.",
                        "VernacExtend",
                        "cd6c8732532e6e92527be63bba9ad4223187b268"
                    ]
                },
                {
                    "command": [
                        "generalize (IHt y0 H0); intuition; [ order | order | intuition_in ].",
                        "VernacExtend",
                        "ca96e1d14d5ce532a7266aace2f21136427263bd"
                    ]
                },
                {
                    "command": [
                        "inv bst; clear e0.",
                        "VernacExtend",
                        "4a22ac51275c70265a231f1ad31b34f5befcbb8f"
                    ]
                },
                {
                    "command": [
                        "rewrite merge_in; intuition; [ order | order | intuition_in ].",
                        "VernacExtend",
                        "737cfa8722a150d2dd6d0d8d132e17ce6f2b617e"
                    ]
                },
                {
                    "command": [
                        "elim H4; eauto.",
                        "VernacExtend",
                        "539a083c18313d5b45996cae172c778067b56827"
                    ]
                },
                {
                    "command": [
                        "inv bst; clear e0.",
                        "VernacExtend",
                        "4a22ac51275c70265a231f1ad31b34f5befcbb8f"
                    ]
                },
                {
                    "command": [
                        "rewrite bal_in; auto.",
                        "VernacExtend",
                        "cd6c8732532e6e92527be63bba9ad4223187b268"
                    ]
                },
                {
                    "command": [
                        "generalize (IHt y0 H1); intuition; [ order | order | intuition_in ].",
                        "VernacExtend",
                        "e6b92eca3d18975d91f84de22daa687b59a4d945"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_bst",
            "line_nb": 372,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (remove x m); simpl; intros.",
                        "VernacExtend",
                        "3069c4c30344439abd361f0314edce2a8816a88c"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "inv bst.",
                        "VernacExtend",
                        "7b9bcd5fb58f45d193506b4496468572f97994c7"
                    ]
                },
                {
                    "command": [
                        "apply bal_bst; auto.",
                        "VernacExtend",
                        "76acbf39c93023468b95a607211ce0104e8d9ff1"
                    ]
                },
                {
                    "command": [
                        "intro; intro.",
                        "VernacExtend",
                        "364fb55c2e6981f6f1c3e7958106b5d05470b327"
                    ]
                },
                {
                    "command": [
                        "rewrite (remove_in x y0 H0) in H; auto.",
                        "VernacExtend",
                        "78e8ece4096181a29743f7529a5962f3aa4624a1"
                    ]
                },
                {
                    "command": [
                        "destruct H; eauto.",
                        "VernacExtend",
                        "9cecd497f9d4dd3ddf7452c86226c8b65280a858"
                    ]
                },
                {
                    "command": [
                        "inv bst.",
                        "VernacExtend",
                        "7b9bcd5fb58f45d193506b4496468572f97994c7"
                    ]
                },
                {
                    "command": [
                        "apply merge_bst; eauto.",
                        "VernacExtend",
                        "8732e924ae4a8035d8215f5565486d5c5b0893e3"
                    ]
                },
                {
                    "command": [
                        "inv bst.",
                        "VernacExtend",
                        "7b9bcd5fb58f45d193506b4496468572f97994c7"
                    ]
                },
                {
                    "command": [
                        "apply bal_bst; auto.",
                        "VernacExtend",
                        "76acbf39c93023468b95a607211ce0104e8d9ff1"
                    ]
                },
                {
                    "command": [
                        "intro; intro.",
                        "VernacExtend",
                        "364fb55c2e6981f6f1c3e7958106b5d05470b327"
                    ]
                },
                {
                    "command": [
                        "rewrite (remove_in x y0 H1) in H; auto.",
                        "VernacExtend",
                        "7acbfa0e4f3c6de4a0c0fcacf2611f7e194dfb90"
                    ]
                },
                {
                    "command": [
                        "destruct H; eauto.",
                        "VernacExtend",
                        "9cecd497f9d4dd3ddf7452c86226c8b65280a858"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_1",
            "line_nb": 388,
            "steps": [
                {
                    "command": [
                        "intros; rewrite remove_in; intuition.",
                        "VernacExtend",
                        "45f134b6b0049a7d15177778ef0e2ad2635f9c99"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_2",
            "line_nb": 391,
            "steps": [
                {
                    "command": [
                        "intros m x y e; induction m; simpl; auto.",
                        "VernacExtend",
                        "78d8f1746fd3874f3732c527bcbead1563495b30"
                    ]
                },
                {
                    "command": [
                        "destruct (X.compare x k); intros; inv bst; try rewrite bal_mapsto; unfold create; auto; try solve [inv MapsTo; auto].",
                        "VernacExtend",
                        "6f5548bb27586bde6adb25bc5bbd3f5402705cbf"
                    ]
                },
                {
                    "command": [
                        "rewrite merge_mapsto; auto.",
                        "VernacExtend",
                        "c3e0d1b3948d06af851aba7b9605d182b3a71548"
                    ]
                },
                {
                    "command": [
                        "inv MapsTo; auto; order.",
                        "VernacExtend",
                        "a2c23b321d42fbc592a72f5ddbe23b9c195fa36c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_3",
            "line_nb": 397,
            "steps": [
                {
                    "command": [
                        "intros m x y e; induction m; simpl; auto.",
                        "VernacExtend",
                        "78d8f1746fd3874f3732c527bcbead1563495b30"
                    ]
                },
                {
                    "command": [
                        "destruct (X.compare x k); intros Bs; inv bst; try rewrite bal_mapsto; auto; unfold create.",
                        "VernacExtend",
                        "4cb37d747e0bb8c140c6878f50ec5e32ba76309f"
                    ]
                },
                {
                    "command": [
                        "intros; inv MapsTo; auto.",
                        "VernacExtend",
                        "afd4c999bb10f242d404b6c8de033544c5a68710"
                    ]
                },
                {
                    "command": [
                        "rewrite merge_mapsto; intuition.",
                        "VernacExtend",
                        "bdbe5b54505a79cb722c463f8ee3f7c1b364407e"
                    ]
                },
                {
                    "command": [
                        "intros; inv MapsTo; auto.",
                        "VernacExtend",
                        "afd4c999bb10f242d404b6c8de033544c5a68710"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "join_in",
            "line_nb": 404,
            "steps": [
                {
                    "command": [
                        "join_tac.",
                        "VernacExtend",
                        "fcadd626977256d2b588fba3ffaada8d55550e24"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite add_in; intuition_in.",
                        "VernacExtend",
                        "2c29feee650cf351f1b292c84833fdbab17787f0"
                    ]
                },
                {
                    "command": [
                        "rewrite add_in; intuition_in.",
                        "VernacExtend",
                        "2c29feee650cf351f1b292c84833fdbab17787f0"
                    ]
                },
                {
                    "command": [
                        "rewrite bal_in, Hlr; clear Hlr Hrl; intuition_in.",
                        "VernacExtend",
                        "15000e36b4e4e6be0bb9faf13bec87a2794877b7"
                    ]
                },
                {
                    "command": [
                        "rewrite bal_in, Hrl; clear Hlr Hrl; intuition_in.",
                        "VernacExtend",
                        "2de0b2c492189bab641a29c0e4ed4fce02ffc439"
                    ]
                },
                {
                    "command": [
                        "apply create_in.",
                        "VernacExtend",
                        "0828877c2738e6a665d5468f4520577522cefbca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "join_bst",
            "line_nb": 413,
            "steps": [
                {
                    "command": [
                        "join_tac; auto; try (simpl; auto; fail); inv bst; apply bal_bst; auto; clear Hrl Hlr; intro; intros; rewrite join_in in *.",
                        "VernacExtend",
                        "be83d48b3fd707c19ae18e662e40733aee813f79"
                    ]
                },
                {
                    "command": [
                        "intuition; [ apply MX.lt_eq with x | ]; eauto.",
                        "VernacExtend",
                        "9fecd88ae8d483a587193e8071263f29c4f64329"
                    ]
                },
                {
                    "command": [
                        "intuition; [ apply MX.eq_lt with x | ]; eauto.",
                        "VernacExtend",
                        "9194b1989a3cbdccc84fdeab2cd6d1156fbcfe56"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "join_find",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "join_tac; auto; inv bst; simpl (join (Leaf elt)); try (assert (X.lt lx x) by auto); try (assert (X.lt x rx) by auto); rewrite ?add_find, ?bal_find; auto.",
                        "VernacExtend",
                        "e21241ca45daa9f84568c0f6c92e9202d11c32cd"
                    ]
                },
                {
                    "command": [
                        "simpl; destruct X.compare; auto.",
                        "VernacExtend",
                        "93ae2c8fe491ecb870860143708f43dd5655c74c"
                    ]
                },
                {
                    "command": [
                        "rewrite not_find_iff; auto; intro; order.",
                        "VernacExtend",
                        "29852a8a7503736131225d2b714be73de3b08b06"
                    ]
                },
                {
                    "command": [
                        "simpl; repeat (destruct X.compare; auto); try (order; fail).",
                        "VernacExtend",
                        "7c6074231fe9db9e68ffa76c6a9fd99f32b5772e"
                    ]
                },
                {
                    "command": [
                        "rewrite not_find_iff by auto; intro.",
                        "VernacExtend",
                        "a3a8421ad72e80270d806b52fd0f1a36af8abe28"
                    ]
                },
                {
                    "command": [
                        "assert (X.lt y x) by auto; order.",
                        "VernacExtend",
                        "c4fa12c62165a6021d5961f3c751e56adf90c05d"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite Hlr; simpl; auto.",
                        "VernacExtend",
                        "5660a610d1a02d5512493012c3ad7dd7383544ab"
                    ]
                },
                {
                    "command": [
                        "repeat (destruct X.compare; auto); order.",
                        "VernacExtend",
                        "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
                    ]
                },
                {
                    "command": [
                        "intros u Hu; rewrite join_in in Hu.",
                        "VernacExtend",
                        "81b3b92e02871c35808857c5523e5b0c4ea9ca4b"
                    ]
                },
                {
                    "command": [
                        "destruct Hu as [Hu|[Hu|Hu]]; try generalize (H2 _ Hu); order.",
                        "VernacExtend",
                        "33cd50c8775ab8ba1f4dfa43d6602065ca023985"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite Hrl; simpl; auto.",
                        "VernacExtend",
                        "3dcda30fdf35d4937eb1899481767b270e0c1b79"
                    ]
                },
                {
                    "command": [
                        "repeat (destruct X.compare; auto); order.",
                        "VernacExtend",
                        "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
                    ]
                },
                {
                    "command": [
                        "intros u Hu; rewrite join_in in Hu.",
                        "VernacExtend",
                        "81b3b92e02871c35808857c5523e5b0c4ea9ca4b"
                    ]
                },
                {
                    "command": [
                        "destruct Hu as [Hu|[Hu|Hu]]; order.",
                        "VernacExtend",
                        "ad0d367084cde6da8869be6ab0c6f6e9deb6ca1f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_in_1",
            "line_nb": 435,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (split x m); simpl; intros; inv bst; try clear e0.",
                        "VernacExtend",
                        "02c474b0430632f5fb4ed7a2f8514ebcb2eec7ce"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "rewrite e1 in IHt; simpl in IHt; rewrite IHt; intuition_in; order.",
                        "VernacExtend",
                        "2209cc3b96eb7b2617dd67ec34f8160b295bb530"
                    ]
                },
                {
                    "command": [
                        "intuition_in; order.",
                        "VernacExtend",
                        "e3f8a8989f5e1da4d90687866dd0f1c64c953e1e"
                    ]
                },
                {
                    "command": [
                        "rewrite join_in.",
                        "VernacExtend",
                        "189db8ad2079b664a69d13554fe96fbeaa596a55"
                    ]
                },
                {
                    "command": [
                        "rewrite e1 in IHt; simpl in IHt; rewrite IHt; intuition_in; order.",
                        "VernacExtend",
                        "2209cc3b96eb7b2617dd67ec34f8160b295bb530"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_in_2",
            "line_nb": 443,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (split x m); subst; simpl; intros; inv bst; try clear e0.",
                        "VernacExtend",
                        "8f3c4337d018c3286523ed01b3892cf01694cc64"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "rewrite join_in.",
                        "VernacExtend",
                        "189db8ad2079b664a69d13554fe96fbeaa596a55"
                    ]
                },
                {
                    "command": [
                        "rewrite e1 in IHt; simpl in IHt; rewrite IHt; intuition_in; order.",
                        "VernacExtend",
                        "2209cc3b96eb7b2617dd67ec34f8160b295bb530"
                    ]
                },
                {
                    "command": [
                        "intuition_in; order.",
                        "VernacExtend",
                        "e3f8a8989f5e1da4d90687866dd0f1c64c953e1e"
                    ]
                },
                {
                    "command": [
                        "rewrite e1 in IHt; simpl in IHt; rewrite IHt; intuition_in; order.",
                        "VernacExtend",
                        "2209cc3b96eb7b2617dd67ec34f8160b295bb530"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_in_3",
            "line_nb": 451,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (split x m); subst; simpl; auto; intros; inv bst; try clear e0; destruct X.compare; try order; trivial; rewrite <- IHt, e1; auto.",
                        "VernacExtend",
                        "982f0aab9e7f4df939ca78ead4889288123a7311"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_bst",
            "line_nb": 454,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (split x m); subst; simpl; intros; inv bst; try clear e0; try rewrite e1 in *; simpl in *; intuition; apply join_bst; auto.",
                        "VernacExtend",
                        "bd26916af86e01b6ae95194d41253e59043a759b"
                    ]
                },
                {
                    "command": [
                        "intros y0.",
                        "VernacExtend",
                        "8f8d2a78fcdba553265db91171c74d5cc90a0908"
                    ]
                },
                {
                    "command": [
                        "generalize (split_in_2 x H0 y0); rewrite e1; simpl; intuition.",
                        "VernacExtend",
                        "7c5470574b0a830f607e95d9a3164429653f977e"
                    ]
                },
                {
                    "command": [
                        "intros y0.",
                        "VernacExtend",
                        "8f8d2a78fcdba553265db91171c74d5cc90a0908"
                    ]
                },
                {
                    "command": [
                        "generalize (split_in_1 x H1 y0); rewrite e1; simpl; intuition.",
                        "VernacExtend",
                        "0a5aefa903b85ed30a55b470b00ef1ade2ae3639"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_lt_tree",
            "line_nb": 461,
            "steps": [
                {
                    "command": [
                        "intros m x B y Hy; rewrite split_in_1 in Hy; intuition.",
                        "VernacExtend",
                        "9fae3a5ef734b09463213e813a73a75ee187d02e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_gt_tree",
            "line_nb": 464,
            "steps": [
                {
                    "command": [
                        "intros m x B y Hy; rewrite split_in_2 in Hy; intuition.",
                        "VernacExtend",
                        "9bf416e9f78b7d46af7da60e169c2cd265b9c0ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "split_find",
            "line_nb": 467,
            "steps": [
                {
                    "command": [
                        "intros m x; functional induction (split x m); subst; simpl; intros; inv bst; try clear e0; try rewrite e1 in *; simpl in *; [ destruct X.compare; auto | .. ]; try match goal with E:split ?x ?t = _, B:bst ?t |- _ => generalize (split_in_1 x B)(split_in_2 x B)(split_bst x B); rewrite E; simpl; destruct 3 end.",
                        "VernacExtend",
                        "3b1ce7b8ce9fd6c7838c54e677c3a6eecbbce6c5"
                    ]
                },
                {
                    "command": [
                        "rewrite join_find, IHt; auto; clear IHt; simpl.",
                        "VernacExtend",
                        "19000715969772f605ce5fc6686ffb4cc79ae8ad"
                    ]
                },
                {
                    "command": [
                        "repeat (destruct X.compare; auto); order.",
                        "VernacExtend",
                        "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
                    ]
                },
                {
                    "command": [
                        "intro y1; rewrite H4; intuition.",
                        "VernacExtend",
                        "a4e5024d7296034ebda6d5252f4774a63fcd6844"
                    ]
                },
                {
                    "command": [
                        "repeat (destruct X.compare; auto); order.",
                        "VernacExtend",
                        "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
                    ]
                },
                {
                    "command": [
                        "rewrite join_find, IHt; auto; clear IHt; simpl.",
                        "VernacExtend",
                        "19000715969772f605ce5fc6686ffb4cc79ae8ad"
                    ]
                },
                {
                    "command": [
                        "repeat (destruct X.compare; auto); order.",
                        "VernacExtend",
                        "aedb3198ed7972a92b3db15c4b3c329f7ac7d9f2"
                    ]
                },
                {
                    "command": [
                        "intros y1; rewrite H; intuition.",
                        "VernacExtend",
                        "bd6cd0d5ccd7d313f463ad3f57c94908827a6f24"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "concat_in",
            "line_nb": 477,
            "steps": [
                {
                    "command": [
                        "intros m1 m2; functional induction (concat m1 m2); intros; try factornode _x _x0 _x1 _x2 _x3 as m1.",
                        "VernacExtend",
                        "7030c6721b16192ab252e53da2a39c31555da24e"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "intuition_in.",
                        "VernacExtend",
                        "d8943b758f8da03177723f43853aa754dd563cb6"
                    ]
                },
                {
                    "command": [
                        "rewrite join_in, remove_min_in, e1; simpl; intuition.",
                        "VernacExtend",
                        "dc6424e22f622652c82cbd3c9cb24dccc710206b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "concat_bst",
            "line_nb": 483,
            "steps": [
                {
                    "command": [
                        "intros m1 m2; functional induction (concat m1 m2); intros; auto; try factornode _x _x0 _x1 _x2 _x3 as m1.",
                        "VernacExtend",
                        "da8498417ce13650da8d553ec1af166dd6da2966"
                    ]
                },
                {
                    "command": [
                        "apply join_bst; auto.",
                        "VernacExtend",
                        "e3516841c6cd61e54881112f5d1409ea2e2fbe2e"
                    ]
                },
                {
                    "command": [
                        "change (bst (m2',xd)#1).",
                        "VernacExtend",
                        "81c06fa44a97d3b80b3bcd290d6a01ff4258292a"
                    ]
                },
                {
                    "command": [
                        "rewrite <-e1; eauto.",
                        "VernacExtend",
                        "16aecf2965a0f2c552c17fd80ce125855e211175"
                    ]
                },
                {
                    "command": [
                        "intros y Hy.",
                        "VernacExtend",
                        "d610d987f827782ed7ad408419c9743f4107dcdc"
                    ]
                },
                {
                    "command": [
                        "apply H1; auto.",
                        "VernacExtend",
                        "57fc44af14fcaf3758941b68060efcbab0060c55"
                    ]
                },
                {
                    "command": [
                        "rewrite remove_min_in, e1; simpl; auto.",
                        "VernacExtend",
                        "aeb7ddacfaab96a9bd6cf18eb622764fcdcd750a"
                    ]
                },
                {
                    "command": [
                        "change (gt_tree (m2',xd)#2#1 (m2',xd)#1).",
                        "VernacExtend",
                        "6acc9a81fde8e9558f095238256429be9223aac8"
                    ]
                },
                {
                    "command": [
                        "rewrite <-e1; eauto.",
                        "VernacExtend",
                        "16aecf2965a0f2c552c17fd80ce125855e211175"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "concat_find",
            "line_nb": 495,
            "steps": [
                {
                    "command": [
                        "intros m1 m2; functional induction (concat m1 m2); intros; auto; try factornode _x _x0 _x1 _x2 _x3 as m1.",
                        "VernacExtend",
                        "da8498417ce13650da8d553ec1af166dd6da2966"
                    ]
                },
                {
                    "command": [
                        "simpl; destruct (find y m2); auto.",
                        "VernacExtend",
                        "c30d7b196e7ea1dbe80c73bcff1b8be47fb125c0"
                    ]
                },
                {
                    "command": [
                        "generalize (remove_min_find y H0)(remove_min_in l2 x2 d2 r2 _x4) (remove_min_bst H0)(remove_min_gt_tree H0); rewrite e1; simpl fst; simpl snd; intros.",
                        "VernacExtend",
                        "b5aed286ca0828aebdfd7df9b7bcf657f7b21d3c"
                    ]
                },
                {
                    "command": [
                        "inv bst.",
                        "VernacExtend",
                        "7b9bcd5fb58f45d193506b4496468572f97994c7"
                    ]
                },
                {
                    "command": [
                        "rewrite H2, join_find; auto; clear H2.",
                        "VernacExtend",
                        "c7468ae85f972ae7039126ab76b449b14de764b1"
                    ]
                },
                {
                    "command": [
                        "simpl; destruct X.compare as [Hlt| |Hlt]; simpl; auto.",
                        "VernacExtend",
                        "96870eee3391cd21762a4ed9355ce4ad97c3bd49"
                    ]
                },
                {
                    "command": [
                        "destruct (find y m2'); auto.",
                        "VernacExtend",
                        "ea07a4dcf7bb60f0d75cc0ad997cf33b9f9088d8"
                    ]
                },
                {
                    "command": [
                        "symmetry; rewrite not_find_iff; auto; intro.",
                        "VernacExtend",
                        "877b8f71d347bf7621a294dbfba8fcad2a755d2b"
                    ]
                },
                {
                    "command": [
                        "apply (MX.lt_not_gt Hlt); apply H1; auto; rewrite H3; auto.",
                        "VernacExtend",
                        "92f3d179f2a374e8031cb02926998d0f6b5001ca"
                    ]
                },
                {
                    "command": [
                        "intros z Hz; apply H1; auto; rewrite H3; auto.",
                        "VernacExtend",
                        "0a2a6842e49822cd3080454afc1059dba8164fc3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_aux_mapsto",
            "line_nb": 510,
            "steps": [
                {
                    "command": [
                        "induction s as [ | l Hl x e r Hr h ]; simpl; auto.",
                        "VernacExtend",
                        "fee5c8b5d33e4a46bd16d4ee42b9fd8b862af4c9"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite Hl.",
                        "VernacExtend",
                        "bcb5a79f143a574cb4193cb68e496aca9c8a7cc3"
                    ]
                },
                {
                    "command": [
                        "destruct (Hr acc x0 e0); clear Hl Hr.",
                        "VernacExtend",
                        "0ee40587e54b8e3240fad648e7d36db18058f2a3"
                    ]
                },
                {
                    "command": [
                        "intuition; inversion_clear H3; intuition.",
                        "VernacExtend",
                        "852ca57661d7dd48d9f5a1d2060e7383228abe07"
                    ]
                },
                {
                    "command": [
                        "destruct H0; simpl in *; subst; intuition.",
                        "VernacExtend",
                        "7c5d4a8b213357e6948c2c7d1a983cc4c0646a47"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_mapsto",
            "line_nb": 520,
            "steps": [
                {
                    "command": [
                        "intros; generalize (elements_aux_mapsto s nil x e); intuition.",
                        "VernacExtend",
                        "3906bc776419d71be9f3ea85aac01231db0257f6"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H0.",
                        "VernacExtend",
                        "e21f851b9423020c7f22dae666bca7829c9b1967"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_in",
            "line_nb": 524,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold L.PX.In.",
                        "VernacExtend",
                        "6c8a034475811151437059a82e6e658a24256a96"
                    ]
                },
                {
                    "command": [
                        "rewrite <- In_alt; unfold In0.",
                        "VernacExtend",
                        "775891578a10f949bceaaf5b4381fa39bc433f1a"
                    ]
                },
                {
                    "command": [
                        "firstorder.",
                        "VernacExtend",
                        "ceb9f57e98a5f5a73ee421cf30fd2f4f09432d14"
                    ]
                },
                {
                    "command": [
                        "exists x0.",
                        "VernacExtend",
                        "9cf0657053433e90b28a795544f893f4a0f1ace3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- elements_mapsto; auto.",
                        "VernacExtend",
                        "a3c6d1055251a2870fb3bc487bb1f06d26b66981"
                    ]
                },
                {
                    "command": [
                        "exists x0.",
                        "VernacExtend",
                        "9cf0657053433e90b28a795544f893f4a0f1ace3"
                    ]
                },
                {
                    "command": [
                        "unfold L.PX.MapsTo; rewrite elements_mapsto; auto.",
                        "VernacExtend",
                        "4c55e3e94d3a02fd596bda0f45bdf669239b25c3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_aux_sort",
            "line_nb": 534,
            "steps": [
                {
                    "command": [
                        "induction s as [ | l Hl y e r Hr h]; simpl; intuition.",
                        "VernacExtend",
                        "966e3d4e055fa6ee1c3f25ed8c34f449384da18c"
                    ]
                },
                {
                    "command": [
                        "inv bst.",
                        "VernacExtend",
                        "7b9bcd5fb58f45d193506b4496468572f97994c7"
                    ]
                },
                {
                    "command": [
                        "apply Hl; auto.",
                        "VernacExtend",
                        "affd29bfb905b3e9f612f7867f266fb57716c53e"
                    ]
                },
                {
                    "command": [
                        "constructor.",
                        "VernacExtend",
                        "3c77e6be855b5086df5e918bf2a0537e1010479a"
                    ]
                },
                {
                    "command": [
                        "apply Hr; eauto.",
                        "VernacExtend",
                        "eb3d9bdc1066422d40e0527d40ad8a83eb46cb16"
                    ]
                },
                {
                    "command": [
                        "apply InA_InfA with (eqA:=eqke); auto with *.",
                        "VernacExtend",
                        "f80cd92923f5734035ff4e1d5c3526883c638cb0"
                    ]
                },
                {
                    "command": [
                        "intros (y',e') H6.",
                        "VernacExtend",
                        "93e60c8f7cbcf2c7d6d5f7bee6ab70d9e28e89da"
                    ]
                },
                {
                    "command": [
                        "destruct (elements_aux_mapsto r acc y' e'); intuition.",
                        "VernacExtend",
                        "54b26c1f4c160625789d3c26fe1f065dc7f0518e"
                    ]
                },
                {
                    "command": [
                        "red; simpl; eauto.",
                        "VernacExtend",
                        "39398b970083e16fdab7df079f160a4ebb1ed0fa"
                    ]
                },
                {
                    "command": [
                        "red; simpl; eauto.",
                        "VernacExtend",
                        "39398b970083e16fdab7df079f160a4ebb1ed0fa"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "inversion_clear H.",
                        "VernacExtend",
                        "90909d92eb32e95a21a5b90b29a49dc97bcea342"
                    ]
                },
                {
                    "command": [
                        "destruct H7; simpl in *.",
                        "VernacExtend",
                        "cb8d2fc77acb7e61caabf26341a8a69b5d79b80e"
                    ]
                },
                {
                    "command": [
                        "order.",
                        "VernacExtend",
                        "1befdab9038d1868ab2c465bac8af3e25c5ac3da"
                    ]
                },
                {
                    "command": [
                        "destruct (elements_aux_mapsto r acc x e0); intuition eauto.",
                        "VernacExtend",
                        "8f146d373226a8270f2492bc35b917db32a6b4a7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_sort",
            "line_nb": 551,
            "steps": [
                {
                    "command": [
                        "intros; unfold elements; apply elements_aux_sort; auto.",
                        "VernacExtend",
                        "01cf1696fd9c7f3fe3cb1622730e5c8d7059231c"
                    ]
                },
                {
                    "command": [
                        "intros; inversion H0.",
                        "VernacExtend",
                        "5b5bb256fd3a25af10fe5269009c9c424ffef90a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_nodup",
            "line_nb": 556,
            "steps": [
                {
                    "command": [
                        "intros; apply PX.Sort_NoDupA; auto.",
                        "VernacExtend",
                        "a591c63bd966a56f782e312b93cff9be36c13356"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_aux_cardinal",
            "line_nb": 559,
            "steps": [
                {
                    "command": [
                        "simple induction m; simpl; intuition.",
                        "VernacExtend",
                        "8a2890657250ceaf32344f85965b1b9b121c21b7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H; simpl.",
                        "VernacExtend",
                        "e8238f5ec1a7a8a6da09dbe89b55898b7c037993"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; omega.",
                        "VernacExtend",
                        "8f7d7f13b9fa53809bfc704a2fa5a9d070d908c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_cardinal",
            "line_nb": 564,
            "steps": [
                {
                    "command": [
                        "exact (fun m => elements_aux_cardinal m nil).",
                        "VernacExtend",
                        "05397603639c000bc92b2a23dafc90769b4ae41e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_app",
            "line_nb": 567,
            "steps": [
                {
                    "command": [
                        "induction s; simpl; intros; auto.",
                        "VernacExtend",
                        "959f715c7053f7a7d894450f1f31103c87459625"
                    ]
                },
                {
                    "command": [
                        "rewrite IHs1, IHs2.",
                        "VernacExtend",
                        "3365e3c5023d8e463d7af7048e4ff019f8cc1937"
                    ]
                },
                {
                    "command": [
                        "unfold elements; simpl.",
                        "VernacExtend",
                        "3a5ede3fc95cc2d937dc2e580411df13d3f8a30c"
                    ]
                },
                {
                    "command": [
                        "rewrite 2 IHs1, IHs2, !app_nil_r, !app_ass; auto.",
                        "VernacExtend",
                        "2db4dc49d2fb68c3949c26765b74f253d379ac66"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_node",
            "line_nb": 573,
            "steps": [
                {
                    "command": [
                        "unfold elements; simpl; intros.",
                        "VernacExtend",
                        "1dd628ebc6735beeeef33700c74c6160cb647d53"
                    ]
                },
                {
                    "command": [
                        "rewrite !elements_app, !app_nil_r, !app_ass; auto.",
                        "VernacExtend",
                        "2f35fa23ac18e68743d29fb14946a2954cdfbc37"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fold_equiv_aux",
            "line_nb": 578,
            "steps": [
                {
                    "command": [
                        "simple induction s.",
                        "VernacExtend",
                        "15315e9486524eeadf6f490cd6a6309641d2d7e2"
                    ]
                },
                {
                    "command": [
                        "simpl; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "simpl; intros.",
                        "VernacExtend",
                        "429a59199da524088af55673600740ccc58db31e"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fold_equiv",
            "line_nb": 586,
            "steps": [
                {
                    "command": [
                        "unfold fold', elements.",
                        "VernacExtend",
                        "6f1c483c634d020a66c8745f582350f1b68bb0f0"
                    ]
                },
                {
                    "command": [
                        "simple induction s; simpl; auto; intros.",
                        "VernacExtend",
                        "558b0fd873e331b664291802a8366c889cdf681d"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_equiv_aux.",
                        "VernacExtend",
                        "354a61d1cbae9142e6633995f249a3ab183853e0"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fold_1",
            "line_nb": 593,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite fold_equiv.",
                        "VernacExtend",
                        "0db7255508df51bc533fe197a3ceab3689a9c078"
                    ]
                },
                {
                    "command": [
                        "unfold fold'.",
                        "VernacExtend",
                        "890354cd2816a1db4e93a50f4710afd7eaae5576"
                    ]
                },
                {
                    "command": [
                        "rewrite L.fold_1.",
                        "VernacExtend",
                        "0e5fc6ae135e8c2a32ae4f60917feefbe41aee23"
                    ]
                },
                {
                    "command": [
                        "unfold L.elements; auto.",
                        "VernacExtend",
                        "3898b5091455aadaa52907fdc6cb0ba55a2a2e23"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "flatten_e_elements",
            "line_nb": 601,
            "steps": [
                {
                    "command": [
                        "intros; apply elements_node.",
                        "VernacExtend",
                        "38f19b22a1592f0ec62efcec94d92c8f5cd3f946"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cons_1",
            "line_nb": 604,
            "steps": [
                {
                    "command": [
                        "induction s; auto; intros.",
                        "VernacExtend",
                        "7e11a55f60f88dd2e5375132e1f3b7f94c0933b9"
                    ]
                },
                {
                    "command": [
                        "simpl flatten_e; rewrite IHs1; apply flatten_e_elements; auto.",
                        "VernacExtend",
                        "05956b3b8c16a9780fae2b4172283b175532069c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cons_IfEq",
            "line_nb": 610,
            "steps": [
                {
                    "command": [
                        "unfold IfEq; destruct b; simpl; intros; destruct X.compare; simpl; try rewrite H0; auto; order.",
                        "VernacExtend",
                        "b21cd559b70160e84f4da9c325496854d1e8af15"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_end_IfEq",
            "line_nb": 613,
            "steps": [
                {
                    "command": [
                        "destruct e2; red; auto.",
                        "VernacExtend",
                        "69af8d5c51712029246b8e3fca68b9e6bc0f9313"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_more_IfEq",
            "line_nb": 616,
            "steps": [
                {
                    "command": [
                        "unfold IfEq; simpl; intros; destruct X.compare; simpl; auto.",
                        "VernacExtend",
                        "6e520628e821f9b938eb114191a5a9443753e07e"
                    ]
                },
                {
                    "command": [
                        "rewrite <-andb_lazy_alt; f_equal; auto.",
                        "VernacExtend",
                        "9845caf9be927ff541767f76c1114b9b14e3a707"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_cont_IfEq",
            "line_nb": 620,
            "steps": [
                {
                    "command": [
                        "induction m1 as [|l1 Hl1 x1 d1 r1 Hr1 h1]; intros; auto.",
                        "VernacExtend",
                        "1849dc9c59d42c73406e26537045c7dadf6db84a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- elements_node; simpl.",
                        "VernacExtend",
                        "b0df2d54638b9390c4cf67ca02051bd65388bd96"
                    ]
                },
                {
                    "command": [
                        "apply Hl1; auto.",
                        "VernacExtend",
                        "247b19b1a76df71264ab7b1b51ad1eda98cffa03"
                    ]
                },
                {
                    "command": [
                        "clear e2; intros [|x2 d2 r2 e2].",
                        "VernacExtend",
                        "b93f0b38aa29d0c1216c09b976fd1499b1774e61"
                    ]
                },
                {
                    "command": [
                        "simpl; red; auto.",
                        "VernacExtend",
                        "9ed6460e4e61d353d112cc43c92538d9dc50b5ff"
                    ]
                },
                {
                    "command": [
                        "apply equal_more_IfEq.",
                        "VernacExtend",
                        "0d7674feafdf5f7e24fd0104ee574768d596fa25"
                    ]
                },
                {
                    "command": [
                        "rewrite <- cons_1; auto.",
                        "VernacExtend",
                        "023e9b6f744de2cce6cbb7b277e4c9fa570707ab"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_IfEq",
            "line_nb": 629,
            "steps": [
                {
                    "command": [
                        "intros; unfold equal.",
                        "VernacExtend",
                        "0320d667e01a7a1fc718b0238c0252d62dda91b7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (app_nil_r (elements m1)).",
                        "VernacExtend",
                        "4e691370356ba7938589d63fe02015c2d2183773"
                    ]
                },
                {
                    "command": [
                        "replace (elements m2) with (flatten_e (cons m2 (End _))) by (rewrite cons_1; simpl; rewrite app_nil_r; auto).",
                        "VernacExtend",
                        "4049272aba9e82af1f0cb87200223ce8d89933d6"
                    ]
                },
                {
                    "command": [
                        "apply equal_cont_IfEq.",
                        "VernacExtend",
                        "6394e1b7e7c28b575b7f6a452003198622090aec"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply equal_end_IfEq; auto.",
                        "VernacExtend",
                        "63b5274e3af59b491537d137117b788bed7a2ac2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Equivb_elements",
            "line_nb": 638,
            "steps": [
                {
                    "command": [
                        "unfold Equivb, L.Equivb; split; split; intros.",
                        "VernacExtend",
                        "b5755227b81daf6772176d1ef8b8debf05c378dd"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite elements_in; firstorder.",
                        "VernacExtend",
                        "d3ca6886de6bb497ee22a80d839e44e786b025ef"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "apply (H2 k); rewrite <- elements_mapsto; auto.",
                        "VernacExtend",
                        "e8745b767029f958b85e9516270909e64907f9b8"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- elements_in; firstorder.",
                        "VernacExtend",
                        "a73f245d0a08c442cb07833b3fec2767d31762e1"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "apply (H2 k); unfold L.PX.MapsTo; rewrite elements_mapsto; auto.",
                        "VernacExtend",
                        "c99cfdd8e52625bd346a812c0dbce6fff128901a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_Equivb",
            "line_nb": 647,
            "steps": [
                {
                    "command": [
                        "intros s s' B B'.",
                        "VernacExtend",
                        "1ee3b284d3233338d7be96044c708fda6b7edf40"
                    ]
                },
                {
                    "command": [
                        "rewrite Equivb_elements, <- equal_IfEq.",
                        "VernacExtend",
                        "1ffcddf559e7955dd8458a0e0788f3e61bdf1ab6"
                    ]
                },
                {
                    "command": [
                        "split; [apply L.equal_2|apply L.equal_1]; auto.",
                        "VernacExtend",
                        "f26643e7474fabcca299af5f028aa1bd6c070759"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_1",
            "line_nb": 656,
            "steps": [
                {
                    "command": [
                        "induction m; simpl; inversion_clear 1; auto.",
                        "VernacExtend",
                        "af11f63c4e0d4e193352bdaa0a3e37bf908df605"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_2",
            "line_nb": 659,
            "steps": [
                {
                    "command": [
                        "induction m; simpl; inversion_clear 1; auto.",
                        "VernacExtend",
                        "af11f63c4e0d4e193352bdaa0a3e37bf908df605"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapi_1",
            "line_nb": 670,
            "steps": [
                {
                    "command": [
                        "induction m; simpl; inversion_clear 1; auto.",
                        "VernacExtend",
                        "af11f63c4e0d4e193352bdaa0a3e37bf908df605"
                    ]
                },
                {
                    "command": [
                        "exists k; auto.",
                        "VernacExtend",
                        "930bbe24c94723a9e2f5da004090011e877c06d9"
                    ]
                },
                {
                    "command": [
                        "destruct (IHm1 _ _ H0).",
                        "VernacExtend",
                        "3a94834f6bcdb8900e0722d551e4a7cd2a58c723"
                    ]
                },
                {
                    "command": [
                        "exists x0; intuition.",
                        "VernacExtend",
                        "3744c7fe0cedc1906401ed802cd31c7149e10d10"
                    ]
                },
                {
                    "command": [
                        "destruct (IHm2 _ _ H0).",
                        "VernacExtend",
                        "8a891bf5b03595a623c916fa95fed286bbb211e1"
                    ]
                },
                {
                    "command": [
                        "exists x0; intuition.",
                        "VernacExtend",
                        "3744c7fe0cedc1906401ed802cd31c7149e10d10"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapi_2",
            "line_nb": 678,
            "steps": [
                {
                    "command": [
                        "induction m; simpl; inversion_clear 1; auto.",
                        "VernacExtend",
                        "af11f63c4e0d4e193352bdaa0a3e37bf908df605"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mapi_bst",
            "line_nb": 681,
            "steps": [
                {
                    "command": [
                        "induction m; simpl; auto.",
                        "VernacExtend",
                        "fef957ed452ac0981dd5620d82fa8cb3b652f75b"
                    ]
                },
                {
                    "command": [
                        "inversion_clear 1; constructor; auto; red; auto using mapi_2.",
                        "VernacExtend",
                        "4511a42beedeb484551761c59821a4f8f2f1f124"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_option_2",
            "line_nb": 690,
            "steps": [
                {
                    "command": [
                        "intros m; functional induction (map_option f m); simpl; auto; intros.",
                        "VernacExtend",
                        "3a23111596838235cbc2a0407dcecefe82574295"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "rewrite join_in in H; destruct H as [H|[H|H]].",
                        "VernacExtend",
                        "8bee5317802361028a3e631b8b79a77efb83b129"
                    ]
                },
                {
                    "command": [
                        "exists d; split; auto; rewrite (f_compat d H), e0; discriminate.",
                        "VernacExtend",
                        "ee19619c0ca1239df58da3dc9b32423a1bcd6be3"
                    ]
                },
                {
                    "command": [
                        "destruct (IHt _ H) as (d0 & ? & ?); exists d0; auto.",
                        "VernacExtend",
                        "015024a712387dc41a0f51b8a10b2041fe2489cd"
                    ]
                },
                {
                    "command": [
                        "destruct (IHt0 _ H) as (d0 & ? & ?); exists d0; auto.",
                        "VernacExtend",
                        "8e82c77ff1b8a996ed99b7ee8e4a78d85a9cac91"
                    ]
                },
                {
                    "command": [
                        "rewrite concat_in in H; destruct H as [H|H].",
                        "VernacExtend",
                        "dd58bda5b7733a4dd29755eb94ff9bc6aa08956c"
                    ]
                },
                {
                    "command": [
                        "destruct (IHt _ H) as (d0 & ? & ?); exists d0; auto.",
                        "VernacExtend",
                        "015024a712387dc41a0f51b8a10b2041fe2489cd"
                    ]
                },
                {
                    "command": [
                        "destruct (IHt0 _ H) as (d0 & ? & ?); exists d0; auto.",
                        "VernacExtend",
                        "8e82c77ff1b8a996ed99b7ee8e4a78d85a9cac91"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_option_bst",
            "line_nb": 701,
            "steps": [
                {
                    "command": [
                        "intros m; functional induction (map_option f m); simpl; auto; intros; inv bst.",
                        "VernacExtend",
                        "7b0ff7d89c2cfc7a802efafc28418d9a8d83ae2a"
                    ]
                },
                {
                    "command": [
                        "apply join_bst; auto; intros y H; destruct (map_option_2 H) as (d0 & ? & ?); eauto using MapsTo_In.",
                        "VernacExtend",
                        "2c2af67038fe209dabf9885a5c0fce1afa3cc75f"
                    ]
                },
                {
                    "command": [
                        "apply concat_bst; auto; intros y y' H H'.",
                        "VernacExtend",
                        "6723388d328188dbee79b9dc8b23d72553eb4c20"
                    ]
                },
                {
                    "command": [
                        "destruct (map_option_2 H) as (d0 & ? & ?).",
                        "VernacExtend",
                        "75d0eb9d521b6e2399f43fdb063b34d40e03bbaa"
                    ]
                },
                {
                    "command": [
                        "destruct (map_option_2 H') as (d0' & ? & ?).",
                        "VernacExtend",
                        "759b5a19e78390ca2fa5d9799d545171c5f122e2"
                    ]
                },
                {
                    "command": [
                        "eapply X.lt_trans with x; eauto using MapsTo_In.",
                        "VernacExtend",
                        "654854615686d211afa1c4f0f571d8cebbf08822"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_option_find",
            "line_nb": 711,
            "steps": [
                {
                    "command": [
                        "intros m; functional induction (map_option f m); simpl; auto; intros; inv bst; rewrite join_find || rewrite concat_find; auto; simpl; try destruct X.compare as [Hlt|Heq|Hlt]; simpl; auto.",
                        "VernacExtend",
                        "f55dfe0be9f58e43a69b645289c28333cdd80dc9"
                    ]
                },
                {
                    "command": [
                        "rewrite (f_compat d Heq); auto.",
                        "VernacExtend",
                        "f9df3f5e4feb0509032fd5587af1b8251b9a0555"
                    ]
                },
                {
                    "command": [
                        "intros y H; destruct (map_option_2 H) as (? & ? & ?); eauto using MapsTo_In.",
                        "VernacExtend",
                        "3af37751a0ab7ef09af9f143de29ce0be13342d2"
                    ]
                },
                {
                    "command": [
                        "intros y H; destruct (map_option_2 H) as (? & ? & ?); eauto using MapsTo_In.",
                        "VernacExtend",
                        "3af37751a0ab7ef09af9f143de29ce0be13342d2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHt, IHt0; auto; nonify (find x0 r); auto.",
                        "VernacExtend",
                        "9df4dfc29afe741270d8bebd1a97343a032cad77"
                    ]
                },
                {
                    "command": [
                        "rewrite IHt, IHt0; auto; nonify (find x0 r); nonify (find x0 l); auto.",
                        "VernacExtend",
                        "7ef117a092254437aa78431cad27f5f73471f3b1"
                    ]
                },
                {
                    "command": [
                        "rewrite (f_compat d Heq); auto.",
                        "VernacExtend",
                        "f9df3f5e4feb0509032fd5587af1b8251b9a0555"
                    ]
                },
                {
                    "command": [
                        "rewrite <- IHt0, IHt; auto; nonify (find x0 l); auto.",
                        "VernacExtend",
                        "cb89ffc13bf4ebca8acd4c90445a86d9eb60c33b"
                    ]
                },
                {
                    "command": [
                        "destruct (find x0 (map_option f r)); auto.",
                        "VernacExtend",
                        "edd9509f9a79edcb406cbde640c1b8124fa9c45b"
                    ]
                },
                {
                    "command": [
                        "intros y y' H H'.",
                        "VernacExtend",
                        "48bed1db0c2e140c88a3667d920b28c3ad85a1e1"
                    ]
                },
                {
                    "command": [
                        "destruct (map_option_2 H) as (? & ? & ?).",
                        "VernacExtend",
                        "e50d3fa88cef0bffe1d42628b4d916892d154b65"
                    ]
                },
                {
                    "command": [
                        "destruct (map_option_2 H') as (? & ? & ?).",
                        "VernacExtend",
                        "7b9af0349ad32fbd319442d3438a1fd79ac412dd"
                    ]
                },
                {
                    "command": [
                        "eapply X.lt_trans with x; eauto using MapsTo_In.",
                        "VernacExtend",
                        "654854615686d211afa1c4f0f571d8cebbf08822"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map2_opt_2",
            "line_nb": 740,
            "steps": [
                {
                    "command": [
                        "intros m m'; functional induction (map2_opt m m'); intros; auto; try factornode _x0 _x1 _x2 _x3 _x4 as m2; try (generalize (split_in_1 x1 H0 y)(split_in_2 x1 H0 y) (split_bst x1 H0); rewrite e1; simpl; destruct 3; inv bst).",
                        "VernacExtend",
                        "9657619b97610ac5964d12eb0353481b89cd2b03"
                    ]
                },
                {
                    "command": [
                        "right; apply find_in.",
                        "VernacExtend",
                        "36360cf224a9b49a55fb305697e7694eeec3d56d"
                    ]
                },
                {
                    "command": [
                        "generalize (in_find (mapr_bst H0) H1); rewrite mapr_f0; auto.",
                        "VernacExtend",
                        "9f643af9b8e503c42d35a2224a45624665e14d7e"
                    ]
                },
                {
                    "command": [
                        "destruct (find y m2); auto; intros; discriminate.",
                        "VernacExtend",
                        "c214c1b59eaee5f884438bb82a157c66c614cec7"
                    ]
                },
                {
                    "command": [
                        "factornode l1 x1 d1 r1 _x as m1.",
                        "VernacExtend",
                        "93f157da9e94083776573602ba32efd26f63fee1"
                    ]
                },
                {
                    "command": [
                        "left; apply find_in.",
                        "VernacExtend",
                        "4c8b1d1dbc442346de204685653b5a49a485fe61"
                    ]
                },
                {
                    "command": [
                        "generalize (in_find (mapl_bst H) H1); rewrite mapl_f0; auto.",
                        "VernacExtend",
                        "a4a8ba3842cceb3ab0643e810ba0506cb38cfeff"
                    ]
                },
                {
                    "command": [
                        "destruct (find y m1); auto; intros; discriminate.",
                        "VernacExtend",
                        "e026db3efa38dc6f7abe47bec16fcd86f4304004"
                    ]
                },
                {
                    "command": [
                        "rewrite join_in in H1; destruct H1 as [H'|[H'|H']]; auto.",
                        "VernacExtend",
                        "48f947571f88c5b644061db3c06b640ea6c8847f"
                    ]
                },
                {
                    "command": [
                        "destruct (IHt1 y H6 H4 H'); intuition.",
                        "VernacExtend",
                        "44ed84d75006b3164ff0e2613c571af71ed776bb"
                    ]
                },
                {
                    "command": [
                        "destruct (IHt0 y H7 H5 H'); intuition.",
                        "VernacExtend",
                        "8b19ab867550fa58452b8d7997a2d731c8af0ce8"
                    ]
                },
                {
                    "command": [
                        "rewrite concat_in in H1; destruct H1 as [H'|H']; auto.",
                        "VernacExtend",
                        "8b465971d0b8c9d7b6624163ca11b94565d7fae3"
                    ]
                },
                {
                    "command": [
                        "destruct (IHt1 y H6 H4 H'); intuition.",
                        "VernacExtend",
                        "44ed84d75006b3164ff0e2613c571af71ed776bb"
                    ]
                },
                {
                    "command": [
                        "destruct (IHt0 y H7 H5 H'); intuition.",
                        "VernacExtend",
                        "8b19ab867550fa58452b8d7997a2d731c8af0ce8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map2_opt_bst",
            "line_nb": 756,
            "steps": [
                {
                    "command": [
                        "intros m m'; functional induction (map2_opt m m'); intros; auto; try factornode _x0 _x1 _x2 _x3 _x4 as m2; inv bst; generalize (split_in_1 x1 H0)(split_in_2 x1 H0)(split_bst x1 H0); rewrite e1; simpl in *; destruct 3.",
                        "VernacExtend",
                        "5e7dd23ff5a3737a88d0e09d4996e1f94cee4cb3"
                    ]
                },
                {
                    "command": [
                        "apply join_bst; auto.",
                        "VernacExtend",
                        "e3516841c6cd61e54881112f5d1409ea2e2fbe2e"
                    ]
                },
                {
                    "command": [
                        "intros y Hy; specialize H with y.",
                        "VernacExtend",
                        "18ecc3ea45f08d6bb7361da4794f5f5451e304c0"
                    ]
                },
                {
                    "command": [
                        "destruct (map2_opt_2 H1 H6 Hy); intuition.",
                        "VernacExtend",
                        "b70c6c098f9fc8de1c30f8a27f3f26ea847a4ee1"
                    ]
                },
                {
                    "command": [
                        "intros y Hy; specialize H5 with y.",
                        "VernacExtend",
                        "bc9215f72c880f2f42c0301a528fc8a542ddc3ee"
                    ]
                },
                {
                    "command": [
                        "destruct (map2_opt_2 H2 H7 Hy); intuition.",
                        "VernacExtend",
                        "33475c156ff738463edad3b4403455d878124752"
                    ]
                },
                {
                    "command": [
                        "apply concat_bst; auto.",
                        "VernacExtend",
                        "172c5a231e862286eccc5b23b545330ff871f388"
                    ]
                },
                {
                    "command": [
                        "intros y y' Hy Hy'; specialize H with y; specialize H5 with y'.",
                        "VernacExtend",
                        "4cd73629de7580e3794e4d15590251458656ca2b"
                    ]
                },
                {
                    "command": [
                        "apply X.lt_trans with x1.",
                        "VernacExtend",
                        "b2bd1d6cf830f7a4c2d88801f6a7c088a9900a78"
                    ]
                },
                {
                    "command": [
                        "destruct (map2_opt_2 H1 H6 Hy); intuition.",
                        "VernacExtend",
                        "b70c6c098f9fc8de1c30f8a27f3f26ea847a4ee1"
                    ]
                },
                {
                    "command": [
                        "destruct (map2_opt_2 H2 H7 Hy'); intuition.",
                        "VernacExtend",
                        "d737268d61ebbbcad4dc91c79a83c1a18e88d8cc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map2_opt_1",
            "line_nb": 772,
            "steps": [
                {
                    "command": [
                        "intros m m'; functional induction (map2_opt m m'); intros; auto; try factornode _x0 _x1 _x2 _x3 _x4 as m2; try (generalize (split_in_1 x1 H0)(split_in_2 x1 H0) (split_in_3 x1 H0)(split_bst x1 H0)(split_find x1 y H0) (split_lt_tree (x:=x1) H0)(split_gt_tree (x:=x1) H0); rewrite e1; simpl in *; destruct 4; intros; inv bst; subst o2; rewrite H7, ?join_find, ?concat_find; auto).",
                        "VernacExtend",
                        "eb5a45674bc26594afba1a8779e3c0acade74447"
                    ]
                },
                {
                    "command": [
                        "simpl; destruct H1; [ inversion_clear H1 | ].",
                        "VernacExtend",
                        "5d0e67d60b73c03e4df166173e13b4daccc3e87f"
                    ]
                },
                {
                    "command": [
                        "rewrite mapr_f0; auto.",
                        "VernacExtend",
                        "43f4c1e2a89fb4576583e09fa6dd90c42053f4e1"
                    ]
                },
                {
                    "command": [
                        "generalize (in_find H0 H1); destruct (find y m2); intuition.",
                        "VernacExtend",
                        "c34531b333d7886f6c2d6cf922ba4b08c567566d"
                    ]
                },
                {
                    "command": [
                        "factornode l1 x1 d1 r1 _x as m1.",
                        "VernacExtend",
                        "93f157da9e94083776573602ba32efd26f63fee1"
                    ]
                },
                {
                    "command": [
                        "destruct H1; [ | inversion_clear H1 ].",
                        "VernacExtend",
                        "89024f57f71f8b43fd1f80d5eda0c66d2d37aa71"
                    ]
                },
                {
                    "command": [
                        "rewrite mapl_f0; auto.",
                        "VernacExtend",
                        "566b42c23fb661a2b2e53c65e47609d3398ac283"
                    ]
                },
                {
                    "command": [
                        "generalize (in_find H H1); destruct (find y m1); intuition.",
                        "VernacExtend",
                        "c90fd0889fc15770ff0c622a80e6081b82424a46"
                    ]
                },
                {
                    "command": [
                        "simpl; destruct X.compare; auto.",
                        "VernacExtend",
                        "93ae2c8fe491ecb870860143708f43dd5655c74c"
                    ]
                },
                {
                    "command": [
                        "apply IHt1; auto; map2_aux.",
                        "VernacExtend",
                        "edee7419f483681fd1e1badbeae67d2784bda6f7"
                    ]
                },
                {
                    "command": [
                        "rewrite (@f0_compat y x1), <- f0_f; auto.",
                        "VernacExtend",
                        "d2fb57edde2f85d4126b1d6c718c3b93b3aafcfe"
                    ]
                },
                {
                    "command": [
                        "apply IHt0; auto; map2_aux.",
                        "VernacExtend",
                        "efb299e92d4dce3248353ba107b805f6bbdef051"
                    ]
                },
                {
                    "command": [
                        "intros z Hz; destruct (@map2_opt_2 l1 l2' z); auto.",
                        "VernacExtend",
                        "4715d15a29cb3c2b03a5993dbf825d49979502d3"
                    ]
                },
                {
                    "command": [
                        "intros z Hz; destruct (@map2_opt_2 r1 r2' z); auto.",
                        "VernacExtend",
                        "4a30e20921bd364097d5c349db7d26e86018c148"
                    ]
                },
                {
                    "command": [
                        "destruct X.compare.",
                        "VernacExtend",
                        "cf7d7ef93dece2204a9fc333c6c9d151ff6c00a8"
                    ]
                },
                {
                    "command": [
                        "nonify (find y (map2_opt r1 r2')).",
                        "VernacExtend",
                        "d6a3626318f85886971df008274c6d87d1d4d30f"
                    ]
                },
                {
                    "command": [
                        "apply IHt1; auto; map2_aux.",
                        "VernacExtend",
                        "edee7419f483681fd1e1badbeae67d2784bda6f7"
                    ]
                },
                {
                    "command": [
                        "nonify (find y (map2_opt r1 r2')).",
                        "VernacExtend",
                        "d6a3626318f85886971df008274c6d87d1d4d30f"
                    ]
                },
                {
                    "command": [
                        "nonify (find y (map2_opt l1 l2')).",
                        "VernacExtend",
                        "65780cf74dee2779779b8299c48d54b6d7a4de1c"
                    ]
                },
                {
                    "command": [
                        "rewrite (@f0_compat y x1), <- f0_f; auto.",
                        "VernacExtend",
                        "d2fb57edde2f85d4126b1d6c718c3b93b3aafcfe"
                    ]
                },
                {
                    "command": [
                        "nonify (find y (map2_opt l1 l2')).",
                        "VernacExtend",
                        "65780cf74dee2779779b8299c48d54b6d7a4de1c"
                    ]
                },
                {
                    "command": [
                        "rewrite IHt0; auto; [ | map2_aux ].",
                        "VernacExtend",
                        "87908865410277f40a57f6367ce07cd5cd10c965"
                    ]
                },
                {
                    "command": [
                        "destruct (f0 y (find y r1) (find y r2')); auto.",
                        "VernacExtend",
                        "732a3e25c54a4bd14ba688621a5cfacc4ae1f774"
                    ]
                },
                {
                    "command": [
                        "intros y1 y2 Hy1 Hy2; apply X.lt_trans with x1.",
                        "VernacExtend",
                        "6905b4cda18c41c391c4761ba89262857d00791a"
                    ]
                },
                {
                    "command": [
                        "destruct (@map2_opt_2 l1 l2' y1); auto.",
                        "VernacExtend",
                        "b952951d97667905fc25f7e8a0a2bab5b6b28619"
                    ]
                },
                {
                    "command": [
                        "destruct (@map2_opt_2 r1 r2' y2); auto.",
                        "VernacExtend",
                        "c250a7466badf94b40d1773d918cb1ac8cad2efb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map2_bst",
            "line_nb": 804,
            "steps": [
                {
                    "command": [
                        "unfold map2; intros.",
                        "VernacExtend",
                        "f575b5c8e48d0a1bd912009358b880d6209bbabe"
                    ]
                },
                {
                    "command": [
                        "apply map2_opt_bst with (fun _ => f); auto using map_option_bst; intros; rewrite map_option_find; auto.",
                        "VernacExtend",
                        "0883666ace1b7b26141b6b65c2c29a1e475a4d8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map2_1",
            "line_nb": 808,
            "steps": [
                {
                    "command": [
                        "unfold map2; intros.",
                        "VernacExtend",
                        "f575b5c8e48d0a1bd912009358b880d6209bbabe"
                    ]
                },
                {
                    "command": [
                        "rewrite (map2_opt_1 (f0:=fun _ => f)); auto using map_option_bst; intros; rewrite map_option_find; auto.",
                        "VernacExtend",
                        "ad428e0458e063dc0c1c8fcef76b80cecb9a6d7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map2_2",
            "line_nb": 812,
            "steps": [
                {
                    "command": [
                        "unfold map2; intros.",
                        "VernacExtend",
                        "f575b5c8e48d0a1bd912009358b880d6209bbabe"
                    ]
                },
                {
                    "command": [
                        "eapply map2_opt_2 with (f0:=fun _ => f); try eassumption; trivial; intros.",
                        "VernacExtend",
                        "df897538a030be39252e624257b37cd7beb5c1af"
                    ]
                },
                {
                    "command": [
                        "apply map_option_bst; auto.",
                        "VernacExtend",
                        "1177e8e883268cc6d42c5da77149fe42894f9e41"
                    ]
                },
                {
                    "command": [
                        "apply map_option_bst; auto.",
                        "VernacExtend",
                        "1177e8e883268cc6d42c5da77149fe42894f9e41"
                    ]
                },
                {
                    "command": [
                        "rewrite map_option_find; auto.",
                        "VernacExtend",
                        "f99d1046664cdc03a1dbb14fab5fab6a642e6a5d"
                    ]
                },
                {
                    "command": [
                        "rewrite map_option_find; auto.",
                        "VernacExtend",
                        "f99d1046664cdc03a1dbb14fab5fab6a642e6a5d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_1",
            "line_nb": 901,
            "steps": [
                {
                    "command": [
                        "intros; unfold elements, MapsTo, eq_key_elt; rewrite elements_mapsto; auto.",
                        "VernacExtend",
                        "3bd925a09de89b68d12e39d538e24b0474e3aa93"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_2",
            "line_nb": 904,
            "steps": [
                {
                    "command": [
                        "intros; unfold elements, MapsTo, eq_key_elt; rewrite <- elements_mapsto; auto.",
                        "VernacExtend",
                        "081dcb0ff5367efbaa54fc7b23bcdf414653f6d2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_3",
            "line_nb": 907,
            "steps": [
                {
                    "command": [
                        "intros m; exact (@elements_sort elt m.(this) m.(is_bst)).",
                        "VernacExtend",
                        "90e5d13cb97a1140ba43745c93140d726d358cbf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_3w",
            "line_nb": 910,
            "steps": [
                {
                    "command": [
                        "intros m; exact (@elements_nodup elt m.(this) m.(is_bst)).",
                        "VernacExtend",
                        "778efe9762a145281d11a1624a07611be6e85fe9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardinal_1",
            "line_nb": 913,
            "steps": [
                {
                    "command": [
                        "intro m; exact (@elements_cardinal elt m.(this)).",
                        "VernacExtend",
                        "01f6cfedfbba2b187c1ef3334684138f90545633"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Equivb_Equivb",
            "line_nb": 919,
            "steps": [
                {
                    "command": [
                        "intros; unfold Equivb, Equiv, Raw.Proofs.Equivb, In.",
                        "VernacExtend",
                        "03e539cc448c796c0cacdfeef4c9ee1bbe768146"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "generalize (H0 k); do 2 rewrite In_alt; intuition.",
                        "VernacExtend",
                        "da8983e340df010e64d5cb12565c4993f060dfc8"
                    ]
                },
                {
                    "command": [
                        "generalize (H0 k); do 2 rewrite In_alt; intuition.",
                        "VernacExtend",
                        "da8983e340df010e64d5cb12565c4993f060dfc8"
                    ]
                },
                {
                    "command": [
                        "generalize (H0 k); do 2 rewrite <- In_alt; intuition.",
                        "VernacExtend",
                        "943fb480c4f239fb9f33cd93ce1280fefed57289"
                    ]
                },
                {
                    "command": [
                        "generalize (H0 k); do 2 rewrite <- In_alt; intuition.",
                        "VernacExtend",
                        "943fb480c4f239fb9f33cd93ce1280fefed57289"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_1",
            "line_nb": 927,
            "steps": [
                {
                    "command": [
                        "unfold equal; intros (m,b) (m',b') cmp; rewrite Equivb_Equivb; intros; simpl in *; rewrite equal_Equivb; auto.",
                        "VernacExtend",
                        "c6409e58e1478b3e9422f6a609a6f7be74345ab4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_2",
            "line_nb": 930,
            "steps": [
                {
                    "command": [
                        "unfold equal; intros (m,b) (m',b') cmp; rewrite Equivb_Equivb; intros; simpl in *; rewrite <-equal_Equivb; auto.",
                        "VernacExtend",
                        "aa32614211b7c8f596fb35166ecbd7cc495feea4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cons_Cmp",
            "line_nb": 973,
            "steps": [
                {
                    "command": [
                        "destruct c; simpl; intros; P.MX.elim_comp; auto.",
                        "VernacExtend",
                        "0d7e3e7e316f87bb5645322c4735b59317206f21"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_end_Cmp",
            "line_nb": 977,
            "steps": [
                {
                    "command": [
                        "destruct e2; simpl; auto.",
                        "VernacExtend",
                        "5e3e575d9ca34c1874272b5ae24c6fcfd38a2239"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_more_Cmp",
            "line_nb": 980,
            "steps": [
                {
                    "command": [
                        "simpl; intros; destruct X.compare; simpl; try destruct D.compare; simpl; auto; P.MX.elim_comp; auto.",
                        "VernacExtend",
                        "2dd79f3892651e1feca59f3a93297b4ebe234bcf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_cont_Cmp",
            "line_nb": 983,
            "steps": [
                {
                    "command": [
                        "induction s1 as [|l1 Hl1 x1 d1 r1 Hr1 h1]; intros; auto.",
                        "VernacExtend",
                        "9dce6b8a4b94948b093947c2e0d02f2c67e5cebd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- P.elements_node; simpl.",
                        "VernacExtend",
                        "02d0a3a6b8265ac1695fc8926d6e59cee8ef409f"
                    ]
                },
                {
                    "command": [
                        "apply Hl1; auto.",
                        "VernacExtend",
                        "247b19b1a76df71264ab7b1b51ad1eda98cffa03"
                    ]
                },
                {
                    "command": [
                        "clear e2.",
                        "VernacExtend",
                        "3939743f01c0d90dfd875e763b8437a8e7072be0"
                    ]
                },
                {
                    "command": [
                        "intros [|x2 d2 r2 e2].",
                        "VernacExtend",
                        "3bce98780e0e61a8bfba76e3f38e2875110630eb"
                    ]
                },
                {
                    "command": [
                        "simpl; auto.",
                        "VernacExtend",
                        "9b631374b1d3067f703fd99c5dc6e1e5c8405957"
                    ]
                },
                {
                    "command": [
                        "apply compare_more_Cmp.",
                        "VernacExtend",
                        "61488033014635f609ff9d822949e23a240cfb72"
                    ]
                },
                {
                    "command": [
                        "rewrite <- P.cons_1; auto.",
                        "VernacExtend",
                        "39513555291136dbdecef23c2b94c19da5055a9a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare_Cmp",
            "line_nb": 993,
            "steps": [
                {
                    "command": [
                        "intros; unfold compare_pure.",
                        "VernacExtend",
                        "21b5207781350e09d91460c4c600adc1301ef53c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (app_nil_r (R.elements s1)).",
                        "VernacExtend",
                        "830b25f7403738f9c821d06a4e23bc3b42a59c53"
                    ]
                },
                {
                    "command": [
                        "replace (R.elements s2) with (P.flatten_e (R.cons s2 (R.End _))) by (rewrite P.cons_1; simpl; rewrite app_nil_r; auto).",
                        "VernacExtend",
                        "9605c844ba5761b6afd4bcfa5741422856036d68"
                    ]
                },
                {
                    "command": [
                        "auto using compare_cont_Cmp, compare_end_Cmp.",
                        "VernacExtend",
                        "8f7b06d9dc9463d767c60db8d21e204357496385"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compare",
            "line_nb": 1001,
            "steps": [
                {
                    "command": [
                        "destruct s as (s,b), s' as (s',b').",
                        "VernacExtend",
                        "d44d83146ffad358485805831ed6b29b4039604c"
                    ]
                },
                {
                    "command": [
                        "generalize (compare_Cmp s s').",
                        "VernacExtend",
                        "ec1cc16b900f601c509d6c4efc54b7608cdb6c6b"
                    ]
                },
                {
                    "command": [
                        "destruct compare_pure; intros; [apply EQ|apply LT|apply GT]; red; auto.",
                        "VernacExtend",
                        "3ced2da0e0e3fac88bbdca11e7420c1d82a494dd"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "eq_seq",
            "line_nb": 1009,
            "steps": [
                {
                    "command": [
                        "unfold eq, seq, selements, elements, LO.eq; intuition.",
                        "VernacExtend",
                        "f1b87ec9cba6716377dc2c6914c2fd87c3f3e490"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_slt",
            "line_nb": 1012,
            "steps": [
                {
                    "command": [
                        "unfold lt, slt, selements, elements, LO.lt; intuition.",
                        "VernacExtend",
                        "8c5d62688bbb8f08aa1f26dd3f05d2c51e6cdb0d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_1",
            "line_nb": 1015,
            "steps": [
                {
                    "command": [
                        "intros m m'.",
                        "VernacExtend",
                        "617ebb524c10b94a79f3da66164aa5e3960dcac8"
                    ]
                },
                {
                    "command": [
                        "rewrite eq_seq; unfold seq.",
                        "VernacExtend",
                        "ca8a32ee8b7194903be6c7526f7034c2990a83b7"
                    ]
                },
                {
                    "command": [
                        "rewrite Equivb_Equivb.",
                        "VernacExtend",
                        "170c2a8a3cf5e094a49f59b4410e3b6c60a5d3b6"
                    ]
                },
                {
                    "command": [
                        "rewrite P.Equivb_elements.",
                        "VernacExtend",
                        "6fc91d4a9b6656106b6a9ea04aeb7ec7b44ef857"
                    ]
                },
                {
                    "command": [
                        "auto using LO.eq_1.",
                        "VernacExtend",
                        "af9a5d142df2b0d65ffc0b037f51b45fdf7d30bd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_2",
            "line_nb": 1022,
            "steps": [
                {
                    "command": [
                        "intros m m'.",
                        "VernacExtend",
                        "617ebb524c10b94a79f3da66164aa5e3960dcac8"
                    ]
                },
                {
                    "command": [
                        "rewrite eq_seq; unfold seq.",
                        "VernacExtend",
                        "ca8a32ee8b7194903be6c7526f7034c2990a83b7"
                    ]
                },
                {
                    "command": [
                        "rewrite Equivb_Equivb.",
                        "VernacExtend",
                        "170c2a8a3cf5e094a49f59b4410e3b6c60a5d3b6"
                    ]
                },
                {
                    "command": [
                        "rewrite P.Equivb_elements.",
                        "VernacExtend",
                        "6fc91d4a9b6656106b6a9ea04aeb7ec7b44ef857"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (LO.eq_2 H).",
                        "VernacExtend",
                        "44d07de09b961ade0d4192fdbbe59ea368b10dbb"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_refl",
            "line_nb": 1031,
            "steps": [
                {
                    "command": [
                        "intros; rewrite eq_seq; unfold seq; intros; apply LO.eq_refl.",
                        "VernacExtend",
                        "633c4a51af6d588f7950123e7bad5bd1bf421345"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_sym",
            "line_nb": 1034,
            "steps": [
                {
                    "command": [
                        "intros m1 m2; rewrite 2 eq_seq; unfold seq; intros; apply LO.eq_sym; auto.",
                        "VernacExtend",
                        "e0d993183acac4f90a2754f50105781e3ec97270"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_trans",
            "line_nb": 1037,
            "steps": [
                {
                    "command": [
                        "intros m1 m2 M3; rewrite 3 eq_seq; unfold seq.",
                        "VernacExtend",
                        "6708854da61ff7ecc51591589748f73fbcf5144b"
                    ]
                },
                {
                    "command": [
                        "intros; eapply LO.eq_trans; eauto.",
                        "VernacExtend",
                        "102e13138d77f959fbc1542434bf54fe03ee509a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_trans",
            "line_nb": 1041,
            "steps": [
                {
                    "command": [
                        "intros m1 m2 m3; rewrite 3 lt_slt; unfold slt; intros; eapply LO.lt_trans; eauto.",
                        "VernacExtend",
                        "5ddb770e0d76f7f28c94d293bfc0582ab336cf38"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_not_eq",
            "line_nb": 1044,
            "steps": [
                {
                    "command": [
                        "intros m1 m2; rewrite lt_slt, eq_seq; unfold slt, seq; intros; apply LO.lt_not_eq; auto.",
                        "VernacExtend",
                        "1da3241f32daad70ea11257aff2a4a2691909fa1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}