{
    "filename": "theories/FSets/FSetBridge.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Export FSetInterface.",
            "VernacRequire",
            "c262aa8e8197a03b6beeeea1b8014a11f65b20d3"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Unset Strict Implicit.",
            "VernacUnsetOption",
            "2842adaf6959318f2042805935c46f513bdc0348"
        ],
        [
            "Set Firstorder Depth 2.",
            "VernacSetOption",
            "3ac83e055876095acf55a73b6f1a97756f769301"
        ],
        [
            "Module DepOfNodep (Import M: S) <: Sdep with Module E := M.E.",
            "VernacDefineModule",
            "722c9f74798f1c37298007f7bf93b6dfeb9f0353"
        ],
        [
            "Definition empty : {s : t | Empty s}.",
            "VernacDefinition",
            "897d762c5f3192d1ce0c15fc0f0b07a12a961fe5"
        ],
        [
            "exists empty; auto with set.",
            "VernacExtend",
            "621cd070179d5b86f8b34bdcba22e376d315fcda"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_empty : forall s : t, {Empty s} + {~ Empty s}.",
            "VernacDefinition",
            "45ef04cba7002cc3749f32d78842b079528c4c65"
        ],
        [
            "intros; generalize (is_empty_1 (s:=s)) (is_empty_2 (s:=s)).",
            "VernacExtend",
            "878b040f37d6b3ce3fc9e93afe71d63e111ce98c"
        ],
        [
            "case (is_empty s); intuition.",
            "VernacExtend",
            "1213d4052663962ade6cf40c90c2e9d8875f5496"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mem : forall (x : elt) (s : t), {In x s} + {~ In x s}.",
            "VernacDefinition",
            "f28073635ea914840af50fa5e20ef159b2f8506f"
        ],
        [
            "intros; generalize (mem_1 (s:=s) (x:=x)) (mem_2 (s:=s) (x:=x)).",
            "VernacExtend",
            "7673fd6dbabb90cbd940ae5e5120d861e28ed5d3"
        ],
        [
            "case (mem x s); intuition.",
            "VernacExtend",
            "3ee79d48b2a7a36cda50544a8880aa85c94c73e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Add (x : elt) (s s' : t) := forall y : elt, In y s' <-> E.eq x y \\/ In y s.",
            "VernacDefinition",
            "09d1f4eafe1160001eef2bf1025d60ab6da967b7"
        ],
        [
            "Definition add : forall (x : elt) (s : t), {s' : t | Add x s s'}.",
            "VernacDefinition",
            "70801613c96e4bc86e9716abdda8d221973a3904"
        ],
        [
            "intros; exists (add x s); auto.",
            "VernacExtend",
            "3b30c696c7cdba4c3b08cd3f8c17a9faf1032366"
        ],
        [
            "unfold Add; intuition.",
            "VernacExtend",
            "e4256d59aee515aec2185b29e336da692fff8891"
        ],
        [
            "elim (E.eq_dec x y); auto.",
            "VernacExtend",
            "af8c974e87b58d7875c1f5f884d23f5f217b401b"
        ],
        [
            "intros; right.",
            "VernacExtend",
            "0c97a3d964169defe64399098f1fa99f7c30db48"
        ],
        [
            "eapply add_3; eauto.",
            "VernacExtend",
            "ec2f1bbed7038547c2b58e97127a55f1b3ca4227"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition singleton : forall x : elt, {s : t | forall y : elt, In y s <-> E.eq x y}.",
            "VernacDefinition",
            "f189d668bf7db8a37f3d63823423b4a88e1d2a8e"
        ],
        [
            "intros; exists (singleton x); intuition.",
            "VernacExtend",
            "6e3b210d1f7f0753a2f3d810e3cba5cc27e63b6e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition remove : forall (x : elt) (s : t), {s' : t | forall y : elt, In y s' <-> ~ E.eq x y /\\ In y s}.",
            "VernacDefinition",
            "6d54750da7bcf596d492cc430642b4feb3b4abc1"
        ],
        [
            "intros; exists (remove x s); intuition.",
            "VernacExtend",
            "c9b4ac091b6874a1780160680acb10e1d4696b70"
        ],
        [
            "absurd (In x (remove x s)); auto with set.",
            "VernacExtend",
            "6d0b196632361611b97a0439e15937c00aa85c15"
        ],
        [
            "apply In_1 with y; auto.",
            "VernacExtend",
            "33ed708b63892a7cbe55dff1a68ca65aa6e8f052"
        ],
        [
            "elim (E.eq_dec x y); intros; auto.",
            "VernacExtend",
            "3d20deb6e8b5b4e28e215df45c0d23b2abde86e5"
        ],
        [
            "absurd (In x (remove x s)); auto with set.",
            "VernacExtend",
            "6d0b196632361611b97a0439e15937c00aa85c15"
        ],
        [
            "apply In_1 with y; auto.",
            "VernacExtend",
            "33ed708b63892a7cbe55dff1a68ca65aa6e8f052"
        ],
        [
            "eauto with set.",
            "VernacExtend",
            "c7f52469ec93c12f0a6e2e69596b6e2fa445057d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition union : forall s s' : t, {s'' : t | forall x : elt, In x s'' <-> In x s \\/ In x s'}.",
            "VernacDefinition",
            "3eb13a07477464e20cc2305d551a34313a8101c9"
        ],
        [
            "intros; exists (union s s'); intuition.",
            "VernacExtend",
            "4e6aa4cd73a9567d4020c80234cae49725c877dd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition inter : forall s s' : t, {s'' : t | forall x : elt, In x s'' <-> In x s /\\ In x s'}.",
            "VernacDefinition",
            "95958522547e148728c2a235f306111bbff3d7d4"
        ],
        [
            "intros; exists (inter s s'); intuition; eauto with set.",
            "VernacExtend",
            "a1f51109dfdbcf92cba46370e190601d9be9ab4b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition diff : forall s s' : t, {s'' : t | forall x : elt, In x s'' <-> In x s /\\ ~ In x s'}.",
            "VernacDefinition",
            "de7058d108077e7652d28771bf894652785cf433"
        ],
        [
            "intros; exists (diff s s'); intuition; eauto with set.",
            "VernacExtend",
            "9b0dbcd67e399a7c38b46641f5ae2c5df0027c86"
        ],
        [
            "absurd (In x s'); eauto with set.",
            "VernacExtend",
            "9bd1c4207ec082933bc018cfd16a870c1a71940f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition equal : forall s s' : t, {Equal s s'} + {~ Equal s s'}.",
            "VernacDefinition",
            "34bf495de93b9390d67ce9d6d0030641956a57e5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (equal_1 (s:=s) (s':=s')) (equal_2 (s:=s) (s':=s')).",
            "VernacExtend",
            "eac8965dc36fecedd60d9b2c6404ab8533668c65"
        ],
        [
            "case (equal s s'); intuition.",
            "VernacExtend",
            "31b42c6ecad7bb14b7cce40707a326058d1a5855"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subset : forall s s' : t, {Subset s s'} + {~Subset s s'}.",
            "VernacDefinition",
            "aca6915101e2781bdd7b5a634e10b98429406c8d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (subset_1 (s:=s) (s':=s')) (subset_2 (s:=s) (s':=s')).",
            "VernacExtend",
            "33c86e1a2efab96a10c12406dc261389550b4694"
        ],
        [
            "case (subset s s'); intuition.",
            "VernacExtend",
            "2512f10896a31179ebc90894bc4113ce11519225"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition elements : forall s : t, {l : list elt | sort E.lt l /\\ (forall x : elt, In x s <-> InA E.eq x l)}.",
            "VernacDefinition",
            "cfae28df382fae8cf6a5df3605f2c5a0cec6f2f8"
        ],
        [
            "intros; exists (elements s); intuition.",
            "VernacExtend",
            "85923745907f65a9c9441ddda87054be3c4b7dbc"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition fold : forall (A : Type) (f : elt -> A -> A) (s : t) (i : A), {r : A | let (l,_) := elements s in r = fold_left (fun a e => f e a) l i}.",
            "VernacDefinition",
            "94c16f66704a5ca74140d543888e7ba59b712a23"
        ],
        [
            "intros; exists (fold (A:=A) f s i); exact (fold_1 s i f).",
            "VernacExtend",
            "17077eace75ea1ec84e21614cb696be2689ba21a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cardinal : forall s : t, {r : nat | let (l,_) := elements s in r = length l }.",
            "VernacDefinition",
            "c35eb9c886101e590e6d1549041bbb54afd83056"
        ],
        [
            "intros; exists (cardinal s); exact (cardinal_1 s).",
            "VernacExtend",
            "6729d982bbe838e52ca38e2a12b15382394bad3d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fdec (P : elt -> Prop) (Pdec : forall x : elt, {P x} + {~ P x}) (x : elt) := if Pdec x then true else false.",
            "VernacDefinition",
            "44c8bd7adec8e79f5bb562be0b188c66e720e59a"
        ],
        [
            "Lemma compat_P_aux : forall (P : elt -> Prop) (Pdec : forall x : elt, {P x} + {~ P x}), compat_P E.eq P -> compat_bool E.eq (fdec Pdec).",
            "VernacStartTheoremProof",
            "92617461e3500139acf56abf965e8cee2c894c9b"
        ],
        [
            "unfold compat_P, compat_bool, Proper, respectful, fdec; intros.",
            "VernacExtend",
            "f2f5c5d97d08a2786687af0582c9b815ef969004"
        ],
        [
            "generalize (E.eq_sym H0); case (Pdec x); case (Pdec y); firstorder.",
            "VernacExtend",
            "03220b13ee19d762babe20bd6044f9974af5d0c0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve compat_P_aux.",
            "VernacHints",
            "e1d8415150fb56f21d9bffe09472d42e67971b3e"
        ],
        [
            "Definition filter : forall (P : elt -> Prop) (Pdec : forall x : elt, {P x} + {~ P x}) (s : t), {s' : t | compat_P E.eq P -> forall x : elt, In x s' <-> In x s /\\ P x}.",
            "VernacDefinition",
            "e9be1d8364a8a525eb4e56937b350f651485fe9d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists (filter (fdec Pdec) s).",
            "VernacExtend",
            "43570e782f909e940d9f967d186d5bacaafb5ba4"
        ],
        [
            "intro H; assert (compat_bool E.eq (fdec Pdec)); auto.",
            "VernacExtend",
            "7154decca9334bf22091a757031343b864e99075"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "eauto with set.",
            "VernacExtend",
            "c7f52469ec93c12f0a6e2e69596b6e2fa445057d"
        ],
        [
            "generalize (filter_2 H0 H1).",
            "VernacExtend",
            "6b4e31e11c58a8152f8ba40c9cbf22fea8b7c75f"
        ],
        [
            "unfold fdec.",
            "VernacExtend",
            "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
        ],
        [
            "case (Pdec x); intuition.",
            "VernacExtend",
            "4ecfde9848172f9a222db148a648d6af46195cde"
        ],
        [
            "inversion H2.",
            "VernacExtend",
            "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
        ],
        [
            "apply filter_3; auto.",
            "VernacExtend",
            "c4d5746fa00763bed5a0d475f46d166b05d2ace0"
        ],
        [
            "unfold fdec; simpl.",
            "VernacExtend",
            "bae6b158afcada6e67c655bb93c24a8e39550635"
        ],
        [
            "case (Pdec x); intuition.",
            "VernacExtend",
            "4ecfde9848172f9a222db148a648d6af46195cde"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition for_all : forall (P : elt -> Prop) (Pdec : forall x : elt, {P x} + {~ P x}) (s : t), {compat_P E.eq P -> For_all P s} + {compat_P E.eq P -> ~ For_all P s}.",
            "VernacDefinition",
            "c120e11eb172d4ba0ab3fc60604f41ca44f4ca6e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (for_all_1 (s:=s) (f:=fdec Pdec)) (for_all_2 (s:=s) (f:=fdec Pdec)).",
            "VernacExtend",
            "22985e5b6946077fe0452c5aaff11842aa5a06c8"
        ],
        [
            "case (for_all (fdec Pdec) s); unfold For_all; [ left | right ]; intros.",
            "VernacExtend",
            "db0657c7158703d3a5bbea623213da9d77afeb43"
        ],
        [
            "assert (compat_bool E.eq (fdec Pdec)); auto.",
            "VernacExtend",
            "ff55e8e7c152c6d46b7d97ee58b2730ed1beb3cc"
        ],
        [
            "generalize (H0 H3 Logic.eq_refl _ H2).",
            "VernacExtend",
            "854348ce26232456701911c54a5f07116f3b706e"
        ],
        [
            "unfold fdec.",
            "VernacExtend",
            "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
        ],
        [
            "case (Pdec x); intuition.",
            "VernacExtend",
            "4ecfde9848172f9a222db148a648d6af46195cde"
        ],
        [
            "inversion H4.",
            "VernacExtend",
            "184e412874313f14014d688ef3b69568302d00ff"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "absurd (false = true); [ auto with bool | apply H; auto ].",
            "VernacExtend",
            "381ee87a7975ef03637348ca6fabeef287aaa6e9"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold fdec.",
            "VernacExtend",
            "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
        ],
        [
            "case (Pdec x); intuition.",
            "VernacExtend",
            "4ecfde9848172f9a222db148a648d6af46195cde"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition exists_ : forall (P : elt -> Prop) (Pdec : forall x : elt, {P x} + {~ P x}) (s : t), {compat_P E.eq P -> Exists P s} + {compat_P E.eq P -> ~ Exists P s}.",
            "VernacDefinition",
            "0572fcc6a4bc198e3498b892440917dbcdb06b71"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (exists_1 (s:=s) (f:=fdec Pdec)) (exists_2 (s:=s) (f:=fdec Pdec)).",
            "VernacExtend",
            "fc5c1e90e9e32bcf023b75bd3c99face039f7f9a"
        ],
        [
            "case (exists_ (fdec Pdec) s); unfold Exists; [ left | right ]; intros.",
            "VernacExtend",
            "9713ed3fdcf4b44ceb5fbcf827c9bec950e40b8c"
        ],
        [
            "elim H0; auto; intros.",
            "VernacExtend",
            "97fbeaed608ae11363bbff0a6efbbcb79e51cb3f"
        ],
        [
            "exists x; intuition.",
            "VernacExtend",
            "5265b0752ff2ed4bffe4b91b951e6ea4268a5bda"
        ],
        [
            "generalize H4.",
            "VernacExtend",
            "2e85cdbd389b45f04e41f682681d2f86e3deb8f9"
        ],
        [
            "unfold fdec.",
            "VernacExtend",
            "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
        ],
        [
            "case (Pdec x); intuition.",
            "VernacExtend",
            "4ecfde9848172f9a222db148a648d6af46195cde"
        ],
        [
            "inversion H2.",
            "VernacExtend",
            "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "elim H2; intros.",
            "VernacExtend",
            "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
        ],
        [
            "absurd (false = true); [ auto with bool | apply H; auto ].",
            "VernacExtend",
            "381ee87a7975ef03637348ca6fabeef287aaa6e9"
        ],
        [
            "exists x; intuition.",
            "VernacExtend",
            "5265b0752ff2ed4bffe4b91b951e6ea4268a5bda"
        ],
        [
            "unfold fdec.",
            "VernacExtend",
            "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
        ],
        [
            "case (Pdec x); intuition.",
            "VernacExtend",
            "4ecfde9848172f9a222db148a648d6af46195cde"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition partition : forall (P : elt -> Prop) (Pdec : forall x : elt, {P x} + {~ P x}) (s : t), {partition : t * t | let (s1, s2) := partition in compat_P E.eq P -> For_all P s1 /\\ For_all (fun x => ~ P x) s2 /\\ (forall x : elt, In x s <-> In x s1 \\/ In x s2)}.",
            "VernacDefinition",
            "2df91df0594a33d3808e41cfb9db95292a83293f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "exists (partition (fdec Pdec) s).",
            "VernacExtend",
            "9c0d713e4ca5b5ba4930a9d95a9470e06020b08b"
        ],
        [
            "generalize (partition_1 s (f:=fdec Pdec)) (partition_2 s (f:=fdec Pdec)).",
            "VernacExtend",
            "fb58ffd4b90d7063dd1ac3965022d51239d8556f"
        ],
        [
            "case (partition (fdec Pdec) s).",
            "VernacExtend",
            "36e2a54fe62d6819095065c97274f05600ff26af"
        ],
        [
            "intros s1 s2; simpl.",
            "VernacExtend",
            "32bdc725b62c6552bd344e8be9804f825144e579"
        ],
        [
            "intros; assert (compat_bool E.eq (fdec Pdec)); auto.",
            "VernacExtend",
            "a85e286b73e899d5a44e670704e057e5e372c440"
        ],
        [
            "intros; assert (compat_bool E.eq (fun x => negb (fdec Pdec x))).",
            "VernacExtend",
            "381beb8b3702168fb76c86e3716fb3d3c0e36eb4"
        ],
        [
            "generalize H2; unfold compat_bool, Proper, respectful; intuition; apply (f_equal negb); auto.",
            "VernacExtend",
            "37a046f242ac9c5c4034c1aa6e7b3d378e1c01e7"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "generalize H4; unfold For_all, Equal; intuition.",
            "VernacExtend",
            "f6cf2a7a3453515e924545e3e378781a333a2232"
        ],
        [
            "elim (H0 x); intros.",
            "VernacExtend",
            "f42c658aed3eb3e37f5778e0e12c8ddd945bc4dd"
        ],
        [
            "assert (fdec Pdec x = true).",
            "VernacExtend",
            "4e699700591b1c9a475079b87852e7382fa327da"
        ],
        [
            "eapply filter_2; eauto with set.",
            "VernacExtend",
            "ca55661a427655be715fc927041b399b13bbdc4d"
        ],
        [
            "generalize H8; unfold fdec; case (Pdec x); intuition.",
            "VernacExtend",
            "7754524e3b9542de2bffd7940c7b3f71cd9260a9"
        ],
        [
            "inversion H9.",
            "VernacExtend",
            "ba06d75575d77a771abfe438435f8748713f713e"
        ],
        [
            "generalize H; unfold For_all, Equal; intuition.",
            "VernacExtend",
            "24c6ebf713efe9ac1288f6666581461c438810ab"
        ],
        [
            "elim (H0 x); intros.",
            "VernacExtend",
            "f42c658aed3eb3e37f5778e0e12c8ddd945bc4dd"
        ],
        [
            "cut ((fun x => negb (fdec Pdec x)) x = true).",
            "VernacExtend",
            "73f22bddff42d93cfe53a2fc9c2ad1d1a6c527aa"
        ],
        [
            "unfold fdec; case (Pdec x); intuition.",
            "VernacExtend",
            "c775afad3b167a806c4d053dd60c13168c38eaf5"
        ],
        [
            "change ((fun x => negb (fdec Pdec x)) x = true).",
            "VernacExtend",
            "c560e99edd15a14c91cf032933850a7605d31fc9"
        ],
        [
            "apply (filter_2 (s:=s) (x:=x)); auto.",
            "VernacExtend",
            "41701d41e5be41b791b4db3dd9052185511e056b"
        ],
        [
            "set (b := fdec Pdec x) in *; generalize (Logic.eq_refl b); pattern b at -1; case b; unfold b; [ left | right ].",
            "VernacExtend",
            "2b4abdfd1f724669c18a6040f696ded8a6cc40fe"
        ],
        [
            "elim (H4 x); intros _ B; apply B; auto with set.",
            "VernacExtend",
            "bb2f94289e1d83ee1b6285b46935f98017c69d14"
        ],
        [
            "elim (H x); intros _ B; apply B; auto with set.",
            "VernacExtend",
            "3cbf6bcf0f0464e6fc02b2dfbd3f5b0b7ad47ef7"
        ],
        [
            "apply filter_3; auto.",
            "VernacExtend",
            "c4d5746fa00763bed5a0d475f46d166b05d2ace0"
        ],
        [
            "rewrite H5; auto.",
            "VernacExtend",
            "b21071c2373ca254f86470b0d9b124cb25551839"
        ],
        [
            "eapply (filter_1 (s:=s) (x:=x) H2); elim (H4 x); intros B _; apply B; auto.",
            "VernacExtend",
            "a54296fa086bff96882a4bc0ec28c5447480c845"
        ],
        [
            "eapply (filter_1 (s:=s) (x:=x) H3); elim (H x); intros B _; apply B; auto.",
            "VernacExtend",
            "e659d73635b76a321877a63c5651b845d1dde834"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition choose_aux: forall s : t, { x : elt | M.choose s = Some x } + { M.choose s = None }.",
            "VernacDefinition",
            "04dc676f109192a414ce0d45f74a4daa9a51babb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (M.choose s); [left | right]; auto.",
            "VernacExtend",
            "0be8e7d4dd70b5441e2c770c20f1a7191250561b"
        ],
        [
            "exists e; auto.",
            "VernacExtend",
            "5789629a110c642815687c3512a8c438259c58a1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition choose : forall s : t, {x : elt | In x s} + {Empty s}.",
            "VernacDefinition",
            "b6de56c1f965ebbcff52dae1f8fc19c302d52a4d"
        ],
        [
            "intros; destruct (choose_aux s) as [(x,Hx)|H].",
            "VernacExtend",
            "ba1955b9a8a60e3d98267a31e220938e10a6eb6a"
        ],
        [
            "left; exists x; apply choose_1; auto.",
            "VernacExtend",
            "a55d046d92c663a3a927d4dfd5d4972f292d3833"
        ],
        [
            "right; apply choose_2; auto.",
            "VernacExtend",
            "8f81da0772d8ccf1d54047765096191d0a421a85"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma choose_ok1 : forall s x, M.choose s = Some x <-> exists H:In x s, choose s = inleft _ (exist (fun x => In x s) x H).",
            "VernacStartTheoremProof",
            "9f58d552e7a09c19a14dc8b90392b0345675167f"
        ],
        [
            "intros s x.",
            "VernacExtend",
            "2d36874eb73f1057ebcb9050ba57f7baca1f1919"
        ],
        [
            "unfold choose; split; intros.",
            "VernacExtend",
            "3528b61d61b1c3cc10345c0ce2a71be4588249d1"
        ],
        [
            "destruct (choose_aux s) as [(y,Hy)|H']; try congruence.",
            "VernacExtend",
            "b77251056548218d1d4a807e5ed3443691e8a3bb"
        ],
        [
            "replace x with y in * by congruence.",
            "VernacExtend",
            "ff8705fb73fbf8cc46aeb72548393935d8d3475c"
        ],
        [
            "exists (choose_1 Hy); auto.",
            "VernacExtend",
            "0ba26f35fb661a8acf918ac091488f14df66fd7f"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "destruct (choose_aux s) as [(y,Hy)|H']; congruence.",
            "VernacExtend",
            "57983fa20be233328bbf81feea7c7fe0e96d1a99"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma choose_ok2 : forall s, M.choose s = None <-> exists H:Empty s, choose s = inright _ H.",
            "VernacStartTheoremProof",
            "7965c3c60f904fab21d2f3bd376f335b70bf3d2d"
        ],
        [
            "intros s.",
            "VernacExtend",
            "f24a724dc5e422652c0513af3278d221ab4df04a"
        ],
        [
            "unfold choose; split; intros.",
            "VernacExtend",
            "3528b61d61b1c3cc10345c0ce2a71be4588249d1"
        ],
        [
            "destruct (choose_aux s) as [(y,Hy)|H']; try congruence.",
            "VernacExtend",
            "b77251056548218d1d4a807e5ed3443691e8a3bb"
        ],
        [
            "exists (choose_2 H'); auto.",
            "VernacExtend",
            "b43597295bf1094f0ea30c831fe735f0d1758e67"
        ],
        [
            "destruct H.",
            "VernacExtend",
            "8b2bca015429da94c456243b461e17a2a0582c40"
        ],
        [
            "destruct (choose_aux s) as [(y,Hy)|H']; congruence.",
            "VernacExtend",
            "57983fa20be233328bbf81feea7c7fe0e96d1a99"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma choose_equal : forall s s', Equal s s' -> match choose s, choose s' with | inleft (exist _ x _), inleft (exist _ x' _) => E.eq x x' | inright _, inright _ => True | _, _ => False end.",
            "VernacStartTheoremProof",
            "3c86208bb2b7dccdb2bd72552bd6aba4e0ca326c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "generalize (@M.choose_1 s)(@M.choose_2 s) (@M.choose_1 s')(@M.choose_2 s')(@M.choose_3 s s') (choose_ok1 s)(choose_ok2 s)(choose_ok1 s')(choose_ok2 s').",
            "VernacExtend",
            "6f24bf5aed83116acd7515c46e40ddb3cccedded"
        ],
        [
            "destruct (choose s) as [(x,Hx)|Hx]; destruct (choose s') as [(x',Hx')|Hx']; auto; intros.",
            "VernacExtend",
            "ebb5d840229344eed030b62dc485365567929787"
        ],
        [
            "apply H4; auto.",
            "VernacExtend",
            "07cffeff5484e6b62a3843cb783b50b5dcc09af8"
        ],
        [
            "rewrite H5; exists Hx; auto.",
            "VernacExtend",
            "5b50c353203c3dd0b418dfbd29d6d6f42056420f"
        ],
        [
            "rewrite H7; exists Hx'; auto.",
            "VernacExtend",
            "bbdafc22e7041203316af58e61e0bd754b62d450"
        ],
        [
            "apply Hx' with x; unfold Equal in H; rewrite <-H; auto.",
            "VernacExtend",
            "c642a1b0f232896184c03d509626ba8a54fcc205"
        ],
        [
            "apply Hx with x'; unfold Equal in H; rewrite H; auto.",
            "VernacExtend",
            "e5f226ca321d87cb19f4fd37d61f176fa1028d0a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition min_elt : forall s : t, {x : elt | In x s /\\ For_all (fun y => ~ E.lt y x) s} + {Empty s}.",
            "VernacDefinition",
            "272b984a41deb80149e271f09aed0eb54624b548"
        ],
        [
            "intros; generalize (min_elt_1 (s:=s)) (min_elt_2 (s:=s)) (min_elt_3 (s:=s)).",
            "VernacExtend",
            "21094aa86394dfb9cfd8d7fced018dc3ce20503b"
        ],
        [
            "case (min_elt s); [ left | right ]; auto.",
            "VernacExtend",
            "e1b90955978b024c6414e0c5b65e61eb213117d9"
        ],
        [
            "exists e; unfold For_all; eauto.",
            "VernacExtend",
            "38fe7c31a183fe8e3c13d1caadbed5027485c437"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition max_elt : forall s : t, {x : elt | In x s /\\ For_all (fun y => ~ E.lt x y) s} + {Empty s}.",
            "VernacDefinition",
            "71c7819e219c0af482a0dac79f125981f74148d0"
        ],
        [
            "intros; generalize (max_elt_1 (s:=s)) (max_elt_2 (s:=s)) (max_elt_3 (s:=s)).",
            "VernacExtend",
            "80825caef4d2cd397ca73559f38c0601206a65cb"
        ],
        [
            "case (max_elt s); [ left | right ]; auto.",
            "VernacExtend",
            "9ab9c069df7f46f3fe0afaf21c5b1f2849b23007"
        ],
        [
            "exists e; unfold For_all; eauto.",
            "VernacExtend",
            "38fe7c31a183fe8e3c13d1caadbed5027485c437"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition elt := elt.",
            "VernacDefinition",
            "6b95f0d5899c87a0df94cd761eccbd480ca22c14"
        ],
        [
            "Definition t := t.",
            "VernacDefinition",
            "e7e60c889544351df20327af7f53fca7bf65d064"
        ],
        [
            "Definition In := In.",
            "VernacDefinition",
            "279e9a8a957eccda75aa33e84615d040434073be"
        ],
        [
            "Definition Equal s s' := forall a : elt, In a s <-> In a s'.",
            "VernacDefinition",
            "cd5f6ee7097e7157ccbc10af82ffd932eaf3c423"
        ],
        [
            "Definition Subset s s' := forall a : elt, In a s -> In a s'.",
            "VernacDefinition",
            "106ca6bd7b6e4a40ea51abcc05e3c9af2fc2bee5"
        ],
        [
            "Definition Empty s := forall a : elt, ~ In a s.",
            "VernacDefinition",
            "99dffcced2023a4cba92e934e92ab887beb9ff43"
        ],
        [
            "Definition For_all (P : elt -> Prop) (s : t) := forall x : elt, In x s -> P x.",
            "VernacDefinition",
            "f1acf2872d5b5775ed6d73a7a16eba95d9713f3e"
        ],
        [
            "Definition Exists (P : elt -> Prop) (s : t) := exists x : elt, In x s /\\ P x.",
            "VernacDefinition",
            "99ff40e1a8f70aa26ac407c30a5c017f1bb0e6b6"
        ],
        [
            "Definition eq_In := In_1.",
            "VernacDefinition",
            "4c7d9fac1e0d26083b4d05f4f29745b0e4de5ebb"
        ],
        [
            "Definition eq := Equal.",
            "VernacDefinition",
            "c5a98812a71ff074452a9b20100debd2359418d4"
        ],
        [
            "Definition lt := lt.",
            "VernacDefinition",
            "9a9ba3478b35dec451a8185d13a239b05c2717a9"
        ],
        [
            "Definition eq_refl := eq_refl.",
            "VernacDefinition",
            "1575adc69e81605dce8fff89a446488867c71fc0"
        ],
        [
            "Definition eq_sym := eq_sym.",
            "VernacDefinition",
            "2375fd19b9827793f8c0622ee9e4ad38f91708aa"
        ],
        [
            "Definition eq_trans := eq_trans.",
            "VernacDefinition",
            "611f8dd8533ad84a43fe86e4578688f3368171c3"
        ],
        [
            "Definition lt_trans := lt_trans.",
            "VernacDefinition",
            "bee90d8f3b47db8715d17b51dbabb9457a8e3610"
        ],
        [
            "Definition lt_not_eq := lt_not_eq.",
            "VernacDefinition",
            "afe00dda60337bb1dbc80f5b66578eebe623a63f"
        ],
        [
            "Definition compare := compare.",
            "VernacDefinition",
            "9ff0a9b1412f3807a1d6ba42c8cefbd97e3bcf75"
        ],
        [
            "Module E := E.",
            "VernacDefineModule",
            "0721132e4e42ca4befe6b33d826e78193fe1d429"
        ],
        [
            "End DepOfNodep.",
            "VernacEndSegment",
            "ab3bb91c020ea43e728bc0566c60a268ab04408d"
        ],
        [
            "Module NodepOfDep (M: Sdep) <: S with Module E := M.E.",
            "VernacDefineModule",
            "9f0658cbfd446793310b1c5f859c4befb636482b"
        ],
        [
            "Import M.",
            "VernacImport",
            "69325bbd0268095c07cfca05f898394c270b2c07"
        ],
        [
            "Module ME := OrderedTypeFacts E.",
            "VernacDefineModule",
            "6fb3a2bdd07213ec85d8af80c7a98301a9104f4c"
        ],
        [
            "Definition empty : t := let (s, _) := empty in s.",
            "VernacDefinition",
            "35b6da5f8cfa58b574633bb011a13d233027a0f0"
        ],
        [
            "Lemma empty_1 : Empty empty.",
            "VernacStartTheoremProof",
            "7522f2b7a60d5493f09b33f63d37755f64932135"
        ],
        [
            "unfold empty; case M.empty; auto.",
            "VernacExtend",
            "ea275c57fcf55f9261a0266352556d33fed69b6a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition is_empty (s : t) : bool := if is_empty s then true else false.",
            "VernacDefinition",
            "b9861a246084f9145723041d52026d8f5c9dda25"
        ],
        [
            "Lemma is_empty_1 : forall s : t, Empty s -> is_empty s = true.",
            "VernacStartTheoremProof",
            "9a93404778f29245d71b83d3c31748216e673f33"
        ],
        [
            "intros; unfold is_empty; case (M.is_empty s); auto.",
            "VernacExtend",
            "5c160c5675e2076a371b58426698661f6f3e66c3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma is_empty_2 : forall s : t, is_empty s = true -> Empty s.",
            "VernacStartTheoremProof",
            "7b6ad7e1f6c1aeac3c9dfa7217840e46efefdba6"
        ],
        [
            "intro s; unfold is_empty; case (M.is_empty s); auto.",
            "VernacExtend",
            "34b983463e231fae01eb303357452551d68b1104"
        ],
        [
            "intros; discriminate H.",
            "VernacExtend",
            "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mem (x : elt) (s : t) : bool := if mem x s then true else false.",
            "VernacDefinition",
            "aaa0f76ad7705d58a9c198e7f9fd9eb6cd23e6e4"
        ],
        [
            "Lemma mem_1 : forall (s : t) (x : elt), In x s -> mem x s = true.",
            "VernacStartTheoremProof",
            "4abe196111c59fbcb5118a6bf789434e0e596e3c"
        ],
        [
            "intros; unfold mem; case (M.mem x s); auto.",
            "VernacExtend",
            "20ba6c419081ab53dc479cad112d95d0eba96591"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma mem_2 : forall (s : t) (x : elt), mem x s = true -> In x s.",
            "VernacStartTheoremProof",
            "1661198b9a7aae05059a7d33a2aabb7afca3a6cd"
        ],
        [
            "intros s x; unfold mem; case (M.mem x s); auto.",
            "VernacExtend",
            "6a0c6bbd153973fc7d01a519080cbdba9fc1aee6"
        ],
        [
            "intros; discriminate H.",
            "VernacExtend",
            "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eq_dec := equal.",
            "VernacDefinition",
            "c37490d6514a6eecc151ab5e0deb3c5d4234eec0"
        ],
        [
            "Definition equal (s s' : t) : bool := if equal s s' then true else false.",
            "VernacDefinition",
            "bf04d96911d93a84670a0881cd65891f1dd62db0"
        ],
        [
            "Lemma equal_1 : forall s s' : t, Equal s s' -> equal s s' = true.",
            "VernacStartTheoremProof",
            "965ea2ef9b0ae2ecc1d0f78d4c1673c356245cd0"
        ],
        [
            "intros; unfold equal; case M.equal; intuition.",
            "VernacExtend",
            "730b2e98f7e9fd9be027a44cb18df4d6feb1c128"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma equal_2 : forall s s' : t, equal s s' = true -> Equal s s'.",
            "VernacStartTheoremProof",
            "84300600e5dc9c9f74e1ad9dc0938ef4ce10df87"
        ],
        [
            "intros s s'; unfold equal; case (M.equal s s'); intuition; inversion H.",
            "VernacExtend",
            "a92071c3b78af3d4c7edf527476b55f9460892df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subset (s s' : t) : bool := if subset s s' then true else false.",
            "VernacDefinition",
            "9537f12939d070721c43c72c9175691699304aa7"
        ],
        [
            "Lemma subset_1 : forall s s' : t, Subset s s' -> subset s s' = true.",
            "VernacStartTheoremProof",
            "fa0e1e97f154b58594d476e04b1d9fe1dc5c1afa"
        ],
        [
            "intros; unfold subset; case M.subset; intuition.",
            "VernacExtend",
            "a4f65ec090d71b00c34912280d2d6fc94ead35b7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma subset_2 : forall s s' : t, subset s s' = true -> Subset s s'.",
            "VernacStartTheoremProof",
            "97148c5d8d64f072a2287b37e29e15fce52149d2"
        ],
        [
            "intros s s'; unfold subset; case (M.subset s s'); intuition; inversion H.",
            "VernacExtend",
            "7535eb1ee3d005e02806f472951f5c27160a8d9c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition choose (s : t) : option elt := match choose s with | inleft (exist _ x _) => Some x | inright _ => None end.",
            "VernacDefinition",
            "71bae7cc50c1da1e57273ea40cf5ba94b8b9a1e4"
        ],
        [
            "Lemma choose_1 : forall (s : t) (x : elt), choose s = Some x -> In x s.",
            "VernacStartTheoremProof",
            "8027de1b193eb148499960a36ba7ba6f55b0e987"
        ],
        [
            "intros s x; unfold choose; case (M.choose s).",
            "VernacExtend",
            "a4fe1eb5bb01be8f8883cf32dfca13e76bb23447"
        ],
        [
            "simple destruct s0; intros; injection H; intros; subst; auto.",
            "VernacExtend",
            "068203f1cee99e34973497596bace904e07951cf"
        ],
        [
            "intros; discriminate H.",
            "VernacExtend",
            "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma choose_2 : forall s : t, choose s = None -> Empty s.",
            "VernacStartTheoremProof",
            "4eb5deae64062e076ccf860403feb5b065e31d54"
        ],
        [
            "intro s; unfold choose; case (M.choose s); auto.",
            "VernacExtend",
            "32cd5791e2142be591c99b00df3821ad447130d1"
        ],
        [
            "simple destruct s0; intros; discriminate H.",
            "VernacExtend",
            "dfc04ec614a77335b6ced5ea1e06901498bf19f5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma choose_3 : forall s s' x x', choose s = Some x -> choose s' = Some x' -> Equal s s' -> E.eq x x'.",
            "VernacStartTheoremProof",
            "dde3e13d1a302e90bff2104d77d495b3d8afaf59"
        ],
        [
            "unfold choose; intros.",
            "VernacExtend",
            "c0a5fbe3963555f31158d6295a81f4032b6070cc"
        ],
        [
            "generalize (M.choose_equal H1); clear H1.",
            "VernacExtend",
            "55639ff026729a70de21a16bd0a61021f7fcb125"
        ],
        [
            "destruct (M.choose s) as [(?,?)|?]; destruct (M.choose s') as [(?,?)|?]; simpl; auto; congruence.",
            "VernacExtend",
            "fc4f360e717a17fe1e4352ae96e46ed1266aa915"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition elements (s : t) : list elt := let (l, _) := elements s in l.",
            "VernacDefinition",
            "a2ad236af5094a37af27f7c5b7263d4a00d3ec29"
        ],
        [
            "Lemma elements_1 : forall (s : t) (x : elt), In x s -> InA E.eq x (elements s).",
            "VernacStartTheoremProof",
            "2f173d379c474649229795edb58cf83ce1a7c44e"
        ],
        [
            "intros; unfold elements; case (M.elements s); firstorder.",
            "VernacExtend",
            "0345b11bdccce26fce323b9e2cd9b4a2d92973e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_2 : forall (s : t) (x : elt), InA E.eq x (elements s) -> In x s.",
            "VernacStartTheoremProof",
            "cab8d91b938f70829e3d57065ba94b9e22295e6a"
        ],
        [
            "intros s x; unfold elements; case (M.elements s); firstorder.",
            "VernacExtend",
            "3aff9fdc14e544f2813ff8e318658fa56641dc1c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma elements_3 : forall s : t, sort E.lt (elements s).",
            "VernacStartTheoremProof",
            "3a6ce03449493d7f97c4703073ba00b9508fee0c"
        ],
        [
            "intros; unfold elements; case (M.elements s); firstorder.",
            "VernacExtend",
            "0345b11bdccce26fce323b9e2cd9b4a2d92973e9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve elements_3.",
            "VernacHints",
            "23c9c2948c5324f3628363677642fd75c23ee6e4"
        ],
        [
            "Lemma elements_3w : forall s : t, NoDupA E.eq (elements s).",
            "VernacStartTheoremProof",
            "53a9c89a1f22e2414a4af427ce840a9207c064ab"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition min_elt (s : t) : option elt := match min_elt s with | inleft (exist _ x _) => Some x | inright _ => None end.",
            "VernacDefinition",
            "a770b8cd498b90f6365819652193bf59e5a2c044"
        ],
        [
            "Lemma min_elt_1 : forall (s : t) (x : elt), min_elt s = Some x -> In x s.",
            "VernacStartTheoremProof",
            "7c40be3e219ccb6fd01f72d4c5a1c16b89bb0463"
        ],
        [
            "intros s x; unfold min_elt; case (M.min_elt s).",
            "VernacExtend",
            "c73cb86aed4fe301dc65bad1e60005bc16832b02"
        ],
        [
            "simple destruct s0; intros; injection H; intros; subst; intuition.",
            "VernacExtend",
            "2fdeb67d41da0415d645f9a5f0a6a6d0d91fcc57"
        ],
        [
            "intros; discriminate H.",
            "VernacExtend",
            "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma min_elt_2 : forall (s : t) (x y : elt), min_elt s = Some x -> In y s -> ~ E.lt y x.",
            "VernacStartTheoremProof",
            "e72f524fe7fbdba90d43ecd2d7689ef2025b274f"
        ],
        [
            "intros s x y; unfold min_elt; case (M.min_elt s).",
            "VernacExtend",
            "60f3f623588f2c30eb649d8a2f9d606d398d450c"
        ],
        [
            "unfold For_all; simple destruct s0; intros; injection H; intros; subst; firstorder.",
            "VernacExtend",
            "c7519d9a46ee1c9a085c333c1718de0bf58511a5"
        ],
        [
            "intros; discriminate H.",
            "VernacExtend",
            "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma min_elt_3 : forall s : t, min_elt s = None -> Empty s.",
            "VernacStartTheoremProof",
            "82f380f6cbb9da239fbbc6913afbfcd1a49e42d4"
        ],
        [
            "intros s; unfold min_elt; case (M.min_elt s); auto.",
            "VernacExtend",
            "4716899115a1123a9a154da4b76342ed1613ec47"
        ],
        [
            "simple destruct s0; intros; discriminate H.",
            "VernacExtend",
            "dfc04ec614a77335b6ced5ea1e06901498bf19f5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition max_elt (s : t) : option elt := match max_elt s with | inleft (exist _ x _) => Some x | inright _ => None end.",
            "VernacDefinition",
            "1cffe35185387c8b589b1560b01bfc63ca6ca95d"
        ],
        [
            "Lemma max_elt_1 : forall (s : t) (x : elt), max_elt s = Some x -> In x s.",
            "VernacStartTheoremProof",
            "e4389dcd62edc78803e3157b96ab7a6d5021653d"
        ],
        [
            "intros s x; unfold max_elt; case (M.max_elt s).",
            "VernacExtend",
            "a4f641644de5a78ed8ded105dce20463a884dec9"
        ],
        [
            "simple destruct s0; intros; injection H; intros; subst; intuition.",
            "VernacExtend",
            "2fdeb67d41da0415d645f9a5f0a6a6d0d91fcc57"
        ],
        [
            "intros; discriminate H.",
            "VernacExtend",
            "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma max_elt_2 : forall (s : t) (x y : elt), max_elt s = Some x -> In y s -> ~ E.lt x y.",
            "VernacStartTheoremProof",
            "c534690087ac7760784ceb70a78a4b3bc26c0e23"
        ],
        [
            "intros s x y; unfold max_elt; case (M.max_elt s).",
            "VernacExtend",
            "59000381e55b7824401463959a9ba06eb43128eb"
        ],
        [
            "unfold For_all; simple destruct s0; intros; injection H; intros; subst; firstorder.",
            "VernacExtend",
            "c7519d9a46ee1c9a085c333c1718de0bf58511a5"
        ],
        [
            "intros; discriminate H.",
            "VernacExtend",
            "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma max_elt_3 : forall s : t, max_elt s = None -> Empty s.",
            "VernacStartTheoremProof",
            "74fa2d1c920f1adc78a8730dac859473ea698c76"
        ],
        [
            "intros s; unfold max_elt; case (M.max_elt s); auto.",
            "VernacExtend",
            "03e5af01e0b2ab97ff6b03d8c26cb4d7e7a6c58f"
        ],
        [
            "simple destruct s0; intros; discriminate H.",
            "VernacExtend",
            "dfc04ec614a77335b6ced5ea1e06901498bf19f5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition add (x : elt) (s : t) : t := let (s', _) := add x s in s'.",
            "VernacDefinition",
            "350176ce83389b66ce6b912c9cacab3d8b076fc8"
        ],
        [
            "Lemma add_1 : forall (s : t) (x y : elt), E.eq x y -> In y (add x s).",
            "VernacStartTheoremProof",
            "059578d13ab9718cefca25c1432065897fd98bcd"
        ],
        [
            "intros; unfold add; case (M.add x s); unfold Add; firstorder.",
            "VernacExtend",
            "144486663d28cdd95d9b7eb3ea797dd436546ec3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_2 : forall (s : t) (x y : elt), In y s -> In y (add x s).",
            "VernacStartTheoremProof",
            "a251e8edafd55f23e7d16bf2f01a0e91a1aade16"
        ],
        [
            "intros; unfold add; case (M.add x s); unfold Add; firstorder.",
            "VernacExtend",
            "144486663d28cdd95d9b7eb3ea797dd436546ec3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma add_3 : forall (s : t) (x y : elt), ~ E.eq x y -> In y (add x s) -> In y s.",
            "VernacStartTheoremProof",
            "b396266599e2055b6c05a387acb5998334cfeb4b"
        ],
        [
            "intros s x y; unfold add; case (M.add x s); unfold Add; firstorder.",
            "VernacExtend",
            "a9409610fcb316a6fdc4a53c59b71603d7eb7e95"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition remove (x : elt) (s : t) : t := let (s', _) := remove x s in s'.",
            "VernacDefinition",
            "251fe233336de850b74e107ac913a113390d1167"
        ],
        [
            "Lemma remove_1 : forall (s : t) (x y : elt), E.eq x y -> ~ In y (remove x s).",
            "VernacStartTheoremProof",
            "97fa5657d663ceca1d6a050de550889d183b360b"
        ],
        [
            "intros; unfold remove; case (M.remove x s); firstorder.",
            "VernacExtend",
            "433e077ba3f91146f5b0393951bf3c206798c479"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_2 : forall (s : t) (x y : elt), ~ E.eq x y -> In y s -> In y (remove x s).",
            "VernacStartTheoremProof",
            "933d14975824028a1729fe20980d54ef8900dfb2"
        ],
        [
            "intros; unfold remove; case (M.remove x s); firstorder.",
            "VernacExtend",
            "433e077ba3f91146f5b0393951bf3c206798c479"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma remove_3 : forall (s : t) (x y : elt), In y (remove x s) -> In y s.",
            "VernacStartTheoremProof",
            "b75138a4fe76ae7ead0dd1e99b5a6f1ca8a8e5f0"
        ],
        [
            "intros s x y; unfold remove; case (M.remove x s); firstorder.",
            "VernacExtend",
            "e7ae04e8e237bb1bfd4b97ef528ffe3378c4e981"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition singleton (x : elt) : t := let (s, _) := singleton x in s.",
            "VernacDefinition",
            "3799a9b3fd06ab4483b300db450005b118876f97"
        ],
        [
            "Lemma singleton_1 : forall x y : elt, In y (singleton x) -> E.eq x y.",
            "VernacStartTheoremProof",
            "7da2ff56c52a9d30269141841d5056750ee6c57c"
        ],
        [
            "intros x y; unfold singleton; case (M.singleton x); firstorder.",
            "VernacExtend",
            "e56cd7a94f54c0fb50d3c2954a313ce691ab7c2f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma singleton_2 : forall x y : elt, E.eq x y -> In y (singleton x).",
            "VernacStartTheoremProof",
            "61e3219a004fc55f09d990dff48ce7b747d09dc1"
        ],
        [
            "intros x y; unfold singleton; case (M.singleton x); firstorder.",
            "VernacExtend",
            "e56cd7a94f54c0fb50d3c2954a313ce691ab7c2f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition union (s s' : t) : t := let (s'', _) := union s s' in s''.",
            "VernacDefinition",
            "c68a4239fd2c53ec220aa9c63a12ef115b07e61f"
        ],
        [
            "Lemma union_1 : forall (s s' : t) (x : elt), In x (union s s') -> In x s \\/ In x s'.",
            "VernacStartTheoremProof",
            "a2a58c8a43cc772363c6b378a014c71ce8281082"
        ],
        [
            "intros s s' x; unfold union; case (M.union s s'); firstorder.",
            "VernacExtend",
            "d8133dfaa9f43c2da8266c40d03c278bbd03c126"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_2 : forall (s s' : t) (x : elt), In x s -> In x (union s s').",
            "VernacStartTheoremProof",
            "53ae2ff8b7abc94a6dff25d81e4661e23fdb57c3"
        ],
        [
            "intros s s' x; unfold union; case (M.union s s'); firstorder.",
            "VernacExtend",
            "d8133dfaa9f43c2da8266c40d03c278bbd03c126"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma union_3 : forall (s s' : t) (x : elt), In x s' -> In x (union s s').",
            "VernacStartTheoremProof",
            "97eb899d8e84fb273a6aec78ceca430ca6600006"
        ],
        [
            "intros s s' x; unfold union; case (M.union s s'); firstorder.",
            "VernacExtend",
            "d8133dfaa9f43c2da8266c40d03c278bbd03c126"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition inter (s s' : t) : t := let (s'', _) := inter s s' in s''.",
            "VernacDefinition",
            "82cf09c26650f04ed435df1512ad4e9c54b7e380"
        ],
        [
            "Lemma inter_1 : forall (s s' : t) (x : elt), In x (inter s s') -> In x s.",
            "VernacStartTheoremProof",
            "c2a9d428c7947908bb60f481fd6013f07dd03aad"
        ],
        [
            "intros s s' x; unfold inter; case (M.inter s s'); firstorder.",
            "VernacExtend",
            "f5ed5ceaebfc6b4e84db6c2856ef8a4e67c86fdd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inter_2 : forall (s s' : t) (x : elt), In x (inter s s') -> In x s'.",
            "VernacStartTheoremProof",
            "6442fb5f48318438c8b04d27f297429a339d1a81"
        ],
        [
            "intros s s' x; unfold inter; case (M.inter s s'); firstorder.",
            "VernacExtend",
            "f5ed5ceaebfc6b4e84db6c2856ef8a4e67c86fdd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma inter_3 : forall (s s' : t) (x : elt), In x s -> In x s' -> In x (inter s s').",
            "VernacStartTheoremProof",
            "6182aa9e9207a2598303590101deab8b68865e4f"
        ],
        [
            "intros s s' x; unfold inter; case (M.inter s s'); firstorder.",
            "VernacExtend",
            "f5ed5ceaebfc6b4e84db6c2856ef8a4e67c86fdd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition diff (s s' : t) : t := let (s'', _) := diff s s' in s''.",
            "VernacDefinition",
            "672d91ab3d61084a855d5fe788a853e84763e2c8"
        ],
        [
            "Lemma diff_1 : forall (s s' : t) (x : elt), In x (diff s s') -> In x s.",
            "VernacStartTheoremProof",
            "a1251514b2f335b5ff2145b70bd64bf279851844"
        ],
        [
            "intros s s' x; unfold diff; case (M.diff s s'); firstorder.",
            "VernacExtend",
            "19f0a7623adbc5e81836f7b7a3aa3ab085e684cd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma diff_2 : forall (s s' : t) (x : elt), In x (diff s s') -> ~ In x s'.",
            "VernacStartTheoremProof",
            "7c39b1b1c521131ceb9738354f29cd096ef5c40f"
        ],
        [
            "intros s s' x; unfold diff; case (M.diff s s'); firstorder.",
            "VernacExtend",
            "19f0a7623adbc5e81836f7b7a3aa3ab085e684cd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma diff_3 : forall (s s' : t) (x : elt), In x s -> ~ In x s' -> In x (diff s s').",
            "VernacStartTheoremProof",
            "8b3a24e309a857bf4eba8e0c0bccea0b53dc1572"
        ],
        [
            "intros s s' x; unfold diff; case (M.diff s s'); firstorder.",
            "VernacExtend",
            "19f0a7623adbc5e81836f7b7a3aa3ab085e684cd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cardinal (s : t) : nat := let (f, _) := cardinal s in f.",
            "VernacDefinition",
            "9088859521cecc7d7c3f785235a07d5eb72f1a0d"
        ],
        [
            "Lemma cardinal_1 : forall s, cardinal s = length (elements s).",
            "VernacStartTheoremProof",
            "4582b815aaf12ade367fabaf44e43e1e1eaffe4f"
        ],
        [
            "intros; unfold cardinal; case (M.cardinal s); unfold elements in *; destruct (M.elements s); auto.",
            "VernacExtend",
            "264462ca6d6eb1ecc49c82b2f13b91e3a8f62fe3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition fold (B : Type) (f : elt -> B -> B) (i : t) (s : B) : B := let (fold, _) := fold f i s in fold.",
            "VernacDefinition",
            "9ca22fe0d7b806fe5572ff8c52863b7f11ba8364"
        ],
        [
            "Lemma fold_1 : forall (s : t) (A : Type) (i : A) (f : elt -> A -> A), fold f s i = fold_left (fun a e => f e a) (elements s) i.",
            "VernacStartTheoremProof",
            "8ff35483e115bbffde16e57e9e38b189867740a6"
        ],
        [
            "intros; unfold fold; case (M.fold f s i); unfold elements in *; destruct (M.elements s); auto.",
            "VernacExtend",
            "4179ed18db74dd7516bab1345576927b08c5b0de"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition f_dec : forall (f : elt -> bool) (x : elt), {f x = true} + {f x <> true}.",
            "VernacDefinition",
            "660332b3c921ede915ab3a8c8fa9cb18899d3e6b"
        ],
        [
            "intros; case (f x); auto with bool.",
            "VernacExtend",
            "df50e603ba0551906ac06ce3639693bc48578597"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma compat_P_aux : forall f : elt -> bool, compat_bool E.eq f -> compat_P E.eq (fun x => f x = true).",
            "VernacStartTheoremProof",
            "63dead0daad0b94c58fda417b3ae8b48b5944c2b"
        ],
        [
            "unfold compat_bool, compat_P, Proper, respectful, impl; intros; rewrite <- H1; firstorder.",
            "VernacExtend",
            "a79492c1d570715dee813e2077df1e348e3ec4ed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve compat_P_aux.",
            "VernacHints",
            "e1d8415150fb56f21d9bffe09472d42e67971b3e"
        ],
        [
            "Definition filter (f : elt -> bool) (s : t) : t := let (s', _) := filter (P:=fun x => f x = true) (f_dec f) s in s'.",
            "VernacDefinition",
            "b036b566c436222891c1b434b4b15865aa27e26b"
        ],
        [
            "Lemma filter_1 : forall (s : t) (x : elt) (f : elt -> bool), compat_bool E.eq f -> In x (filter f s) -> In x s.",
            "VernacStartTheoremProof",
            "3ee6623aa2ba096b042f59cd8bf5a171f582c41d"
        ],
        [
            "intros s x f; unfold filter; case M.filter as (x0,Hiff); intuition.",
            "VernacExtend",
            "c0c60277794bcac31da5c77069d07c22479a57b8"
        ],
        [
            "generalize (Hiff (compat_P_aux H)); firstorder.",
            "VernacExtend",
            "cde78b97a68bcf20dc9ef7300e34e0e92237fe4f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_2 : forall (s : t) (x : elt) (f : elt -> bool), compat_bool E.eq f -> In x (filter f s) -> f x = true.",
            "VernacStartTheoremProof",
            "a6e314805c609f7c43d4769c1890b2f47205c613"
        ],
        [
            "intros s x f; unfold filter; case M.filter as (x0,Hiff); intuition.",
            "VernacExtend",
            "c0c60277794bcac31da5c77069d07c22479a57b8"
        ],
        [
            "generalize (Hiff (compat_P_aux H)); firstorder.",
            "VernacExtend",
            "cde78b97a68bcf20dc9ef7300e34e0e92237fe4f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma filter_3 : forall (s : t) (x : elt) (f : elt -> bool), compat_bool E.eq f -> In x s -> f x = true -> In x (filter f s).",
            "VernacStartTheoremProof",
            "b6dd0ae496d5491b33e384349724f94d9ed93fc8"
        ],
        [
            "intros s x f; unfold filter; case M.filter as (x0,Hiff); intuition.",
            "VernacExtend",
            "c0c60277794bcac31da5c77069d07c22479a57b8"
        ],
        [
            "generalize (Hiff (compat_P_aux H)); firstorder.",
            "VernacExtend",
            "cde78b97a68bcf20dc9ef7300e34e0e92237fe4f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition for_all (f : elt -> bool) (s : t) : bool := if for_all (P:=fun x => f x = true) (f_dec f) s then true else false.",
            "VernacDefinition",
            "6034213f4ca3c61e6e825e8cc55ef87f36412c46"
        ],
        [
            "Lemma for_all_1 : forall (s : t) (f : elt -> bool), compat_bool E.eq f -> For_all (fun x => f x = true) s -> for_all f s = true.",
            "VernacStartTheoremProof",
            "e9d8cce2239c14cbc8efd1abc90b236b4877a8d9"
        ],
        [
            "intros s f; unfold for_all; case M.for_all; intuition; elim n; auto.",
            "VernacExtend",
            "60bba9dba1b60778b3eb721d8ae83d18c1e875d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma for_all_2 : forall (s : t) (f : elt -> bool), compat_bool E.eq f -> for_all f s = true -> For_all (fun x => f x = true) s.",
            "VernacStartTheoremProof",
            "4bacaef70930402eb524c87871d2d53f6c2b705a"
        ],
        [
            "intros s f; unfold for_all; case M.for_all; intuition; inversion H0.",
            "VernacExtend",
            "4737b06d80a4410aa8f3b9b5310da2d146b77c0f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition exists_ (f : elt -> bool) (s : t) : bool := if exists_ (P:=fun x => f x = true) (f_dec f) s then true else false.",
            "VernacDefinition",
            "ff4441112f9b2ca2273f8b8d1317c2d7d55699e8"
        ],
        [
            "Lemma exists_1 : forall (s : t) (f : elt -> bool), compat_bool E.eq f -> Exists (fun x => f x = true) s -> exists_ f s = true.",
            "VernacStartTheoremProof",
            "9573076da2b0293ab9120d10ba789d9b6b937b63"
        ],
        [
            "intros s f; unfold exists_; case M.exists_; intuition; elim n; auto.",
            "VernacExtend",
            "78a55ff7bcd5d8ef2d1228d24eae44f94bacf883"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_2 : forall (s : t) (f : elt -> bool), compat_bool E.eq f -> exists_ f s = true -> Exists (fun x => f x = true) s.",
            "VernacStartTheoremProof",
            "ebaeda9640f8f3f3930d831b7cc9828e2ea5eb10"
        ],
        [
            "intros s f; unfold exists_; case M.exists_; intuition; inversion H0.",
            "VernacExtend",
            "fe51e74ff86dcda731a8cef4cd14965a37148da7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition partition (f : elt -> bool) (s : t) : t * t := let (p, _) := partition (P:=fun x => f x = true) (f_dec f) s in p.",
            "VernacDefinition",
            "f7ccc7af323b5f5c2bc83954e8fdb1e006e59dd9"
        ],
        [
            "Lemma partition_1 : forall (s : t) (f : elt -> bool), compat_bool E.eq f -> Equal (fst (partition f s)) (filter f s).",
            "VernacStartTheoremProof",
            "6fa7129d156fd384a802bb8134c8b08782db25d2"
        ],
        [
            "intros s f; unfold partition; case M.partition.",
            "VernacExtend",
            "4cad70dd2afa7f9bbcb3977bd0aa4dfc68fd643d"
        ],
        [
            "intro p; case p; clear p; intros s1 s2 H C.",
            "VernacExtend",
            "f8105c063ccf727e107b415ddbc82b1e97ef7fb0"
        ],
        [
            "generalize (H (compat_P_aux C)); clear H; intro H.",
            "VernacExtend",
            "ae042befa5fbeb837ee8fe4f0278e8b61f51832b"
        ],
        [
            "simpl; unfold Equal; intuition.",
            "VernacExtend",
            "685a5b44380e2ada14b90cc2bf1c77a5d1a0cdc5"
        ],
        [
            "apply filter_3; firstorder.",
            "VernacExtend",
            "83abd2919b65de95491544b8c8269557a393a931"
        ],
        [
            "elim (H2 a); intros.",
            "VernacExtend",
            "751118923db4a01eac00f94e089d92d6a38bf25d"
        ],
        [
            "assert (In a s).",
            "VernacExtend",
            "af1279f268220f44ea61de2a2b24fb5a114f65ca"
        ],
        [
            "eapply filter_1; eauto.",
            "VernacExtend",
            "dacff2b8f507601bfce2ea32717f1815ff66d55b"
        ],
        [
            "elim H3; intros; auto.",
            "VernacExtend",
            "51793ba3492860d82d2a27b6b5e68b32d154516c"
        ],
        [
            "absurd (f a = true).",
            "VernacExtend",
            "47dfe9cf33d9fd52d6b13101600719b9cd06f280"
        ],
        [
            "exact (H a H6).",
            "VernacExtend",
            "d4db5f564f63e8489a7c5a1812342eb0fc3e249a"
        ],
        [
            "eapply filter_2; eauto.",
            "VernacExtend",
            "2a9b67aa4c4f3f251fc03d1260d289bd6b7f6a97"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma partition_2 : forall (s : t) (f : elt -> bool), compat_bool E.eq f -> Equal (snd (partition f s)) (filter (fun x => negb (f x)) s).",
            "VernacStartTheoremProof",
            "64151d10e627e018cd18019f06f02c3fb6598a3e"
        ],
        [
            "intros s f; unfold partition; case M.partition.",
            "VernacExtend",
            "4cad70dd2afa7f9bbcb3977bd0aa4dfc68fd643d"
        ],
        [
            "intro p; case p; clear p; intros s1 s2 H C.",
            "VernacExtend",
            "f8105c063ccf727e107b415ddbc82b1e97ef7fb0"
        ],
        [
            "generalize (H (compat_P_aux C)); clear H; intro H.",
            "VernacExtend",
            "ae042befa5fbeb837ee8fe4f0278e8b61f51832b"
        ],
        [
            "assert (D : compat_bool E.eq (fun x => negb (f x))).",
            "VernacExtend",
            "ff5f3d102016c0cddd6881a20e3ebcb57cb52cdb"
        ],
        [
            "generalize C; unfold compat_bool, Proper, respectful; intros; apply (f_equal negb); auto.",
            "VernacExtend",
            "33bacfb130323ca02070f2c834f9443d10ce6a6c"
        ],
        [
            "simpl; unfold Equal; intuition.",
            "VernacExtend",
            "685a5b44380e2ada14b90cc2bf1c77a5d1a0cdc5"
        ],
        [
            "apply filter_3; firstorder.",
            "VernacExtend",
            "83abd2919b65de95491544b8c8269557a393a931"
        ],
        [
            "elim (H2 a); intros.",
            "VernacExtend",
            "751118923db4a01eac00f94e089d92d6a38bf25d"
        ],
        [
            "assert (In a s).",
            "VernacExtend",
            "af1279f268220f44ea61de2a2b24fb5a114f65ca"
        ],
        [
            "eapply filter_1; eauto.",
            "VernacExtend",
            "dacff2b8f507601bfce2ea32717f1815ff66d55b"
        ],
        [
            "elim H3; intros; auto.",
            "VernacExtend",
            "51793ba3492860d82d2a27b6b5e68b32d154516c"
        ],
        [
            "absurd (f a = true).",
            "VernacExtend",
            "47dfe9cf33d9fd52d6b13101600719b9cd06f280"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "generalize (filter_2 D H1).",
            "VernacExtend",
            "064587f9f0ab49ae3074516580a433486567f5c4"
        ],
        [
            "rewrite H7; intros H8; inversion H8.",
            "VernacExtend",
            "1e0ccb0c93f23aca56ef3ef4d28d2cee03eafe3e"
        ],
        [
            "exact (H0 a H6).",
            "VernacExtend",
            "f2d2995c6fc0186612b18c63927545252b2aaa74"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition elt := elt.",
            "VernacDefinition",
            "6b95f0d5899c87a0df94cd761eccbd480ca22c14"
        ],
        [
            "Definition t := t.",
            "VernacDefinition",
            "e7e60c889544351df20327af7f53fca7bf65d064"
        ],
        [
            "Definition In := In.",
            "VernacDefinition",
            "279e9a8a957eccda75aa33e84615d040434073be"
        ],
        [
            "Definition Equal s s' := forall a : elt, In a s <-> In a s'.",
            "VernacDefinition",
            "cd5f6ee7097e7157ccbc10af82ffd932eaf3c423"
        ],
        [
            "Definition Subset s s' := forall a : elt, In a s -> In a s'.",
            "VernacDefinition",
            "106ca6bd7b6e4a40ea51abcc05e3c9af2fc2bee5"
        ],
        [
            "Definition Add (x : elt) (s s' : t) := forall y : elt, In y s' <-> E.eq y x \\/ In y s.",
            "VernacDefinition",
            "b0b5e0e2e4cd1ca9009ef6a12b06dae42eae6d46"
        ],
        [
            "Definition Empty s := forall a : elt, ~ In a s.",
            "VernacDefinition",
            "99dffcced2023a4cba92e934e92ab887beb9ff43"
        ],
        [
            "Definition For_all (P : elt -> Prop) (s : t) := forall x : elt, In x s -> P x.",
            "VernacDefinition",
            "f1acf2872d5b5775ed6d73a7a16eba95d9713f3e"
        ],
        [
            "Definition Exists (P : elt -> Prop) (s : t) := exists x : elt, In x s /\\ P x.",
            "VernacDefinition",
            "99ff40e1a8f70aa26ac407c30a5c017f1bb0e6b6"
        ],
        [
            "Definition In_1 := eq_In.",
            "VernacDefinition",
            "4c770589dd9cf02d941d88f35d8bff242822553e"
        ],
        [
            "Definition eq := Equal.",
            "VernacDefinition",
            "c5a98812a71ff074452a9b20100debd2359418d4"
        ],
        [
            "Definition lt := lt.",
            "VernacDefinition",
            "9a9ba3478b35dec451a8185d13a239b05c2717a9"
        ],
        [
            "Definition eq_refl := eq_refl.",
            "VernacDefinition",
            "1575adc69e81605dce8fff89a446488867c71fc0"
        ],
        [
            "Definition eq_sym := eq_sym.",
            "VernacDefinition",
            "2375fd19b9827793f8c0622ee9e4ad38f91708aa"
        ],
        [
            "Definition eq_trans := eq_trans.",
            "VernacDefinition",
            "611f8dd8533ad84a43fe86e4578688f3368171c3"
        ],
        [
            "Definition lt_trans := lt_trans.",
            "VernacDefinition",
            "bee90d8f3b47db8715d17b51dbabb9457a8e3610"
        ],
        [
            "Definition lt_not_eq := lt_not_eq.",
            "VernacDefinition",
            "afe00dda60337bb1dbc80f5b66578eebe623a63f"
        ],
        [
            "Definition compare := compare.",
            "VernacDefinition",
            "9ff0a9b1412f3807a1d6ba42c8cefbd97e3bcf75"
        ],
        [
            "Module E := E.",
            "VernacDefineModule",
            "0721132e4e42ca4befe6b33d826e78193fe1d429"
        ],
        [
            "End NodepOfDep.",
            "VernacEndSegment",
            "4d6de558787a438baa58e66621243bed6c05b7d7"
        ]
    ],
    "proofs": [
        {
            "name": "empty",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "exists empty; auto with set.",
                        "VernacExtend",
                        "621cd070179d5b86f8b34bdcba22e376d315fcda"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_empty",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros; generalize (is_empty_1 (s:=s)) (is_empty_2 (s:=s)).",
                        "VernacExtend",
                        "878b040f37d6b3ce3fc9e93afe71d63e111ce98c"
                    ]
                },
                {
                    "command": [
                        "case (is_empty s); intuition.",
                        "VernacExtend",
                        "1213d4052663962ade6cf40c90c2e9d8875f5496"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros; generalize (mem_1 (s:=s) (x:=x)) (mem_2 (s:=s) (x:=x)).",
                        "VernacExtend",
                        "7673fd6dbabb90cbd940ae5e5120d861e28ed5d3"
                    ]
                },
                {
                    "command": [
                        "case (mem x s); intuition.",
                        "VernacExtend",
                        "3ee79d48b2a7a36cda50544a8880aa85c94c73e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "intros; exists (add x s); auto.",
                        "VernacExtend",
                        "3b30c696c7cdba4c3b08cd3f8c17a9faf1032366"
                    ]
                },
                {
                    "command": [
                        "unfold Add; intuition.",
                        "VernacExtend",
                        "e4256d59aee515aec2185b29e336da692fff8891"
                    ]
                },
                {
                    "command": [
                        "elim (E.eq_dec x y); auto.",
                        "VernacExtend",
                        "af8c974e87b58d7875c1f5f884d23f5f217b401b"
                    ]
                },
                {
                    "command": [
                        "intros; right.",
                        "VernacExtend",
                        "0c97a3d964169defe64399098f1fa99f7c30db48"
                    ]
                },
                {
                    "command": [
                        "eapply add_3; eauto.",
                        "VernacExtend",
                        "ec2f1bbed7038547c2b58e97127a55f1b3ca4227"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "singleton",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "intros; exists (singleton x); intuition.",
                        "VernacExtend",
                        "6e3b210d1f7f0753a2f3d810e3cba5cc27e63b6e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros; exists (remove x s); intuition.",
                        "VernacExtend",
                        "c9b4ac091b6874a1780160680acb10e1d4696b70"
                    ]
                },
                {
                    "command": [
                        "absurd (In x (remove x s)); auto with set.",
                        "VernacExtend",
                        "6d0b196632361611b97a0439e15937c00aa85c15"
                    ]
                },
                {
                    "command": [
                        "apply In_1 with y; auto.",
                        "VernacExtend",
                        "33ed708b63892a7cbe55dff1a68ca65aa6e8f052"
                    ]
                },
                {
                    "command": [
                        "elim (E.eq_dec x y); intros; auto.",
                        "VernacExtend",
                        "3d20deb6e8b5b4e28e215df45c0d23b2abde86e5"
                    ]
                },
                {
                    "command": [
                        "absurd (In x (remove x s)); auto with set.",
                        "VernacExtend",
                        "6d0b196632361611b97a0439e15937c00aa85c15"
                    ]
                },
                {
                    "command": [
                        "apply In_1 with y; auto.",
                        "VernacExtend",
                        "33ed708b63892a7cbe55dff1a68ca65aa6e8f052"
                    ]
                },
                {
                    "command": [
                        "eauto with set.",
                        "VernacExtend",
                        "c7f52469ec93c12f0a6e2e69596b6e2fa445057d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "intros; exists (union s s'); intuition.",
                        "VernacExtend",
                        "4e6aa4cd73a9567d4020c80234cae49725c877dd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inter",
            "line_nb": 39,
            "steps": [
                {
                    "command": [
                        "intros; exists (inter s s'); intuition; eauto with set.",
                        "VernacExtend",
                        "a1f51109dfdbcf92cba46370e190601d9be9ab4b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diff",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "intros; exists (diff s s'); intuition; eauto with set.",
                        "VernacExtend",
                        "9b0dbcd67e399a7c38b46641f5ae2c5df0027c86"
                    ]
                },
                {
                    "command": [
                        "absurd (In x s'); eauto with set.",
                        "VernacExtend",
                        "9bd1c4207ec082933bc018cfd16a870c1a71940f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal",
            "line_nb": 46,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (equal_1 (s:=s) (s':=s')) (equal_2 (s:=s) (s':=s')).",
                        "VernacExtend",
                        "eac8965dc36fecedd60d9b2c6404ab8533668c65"
                    ]
                },
                {
                    "command": [
                        "case (equal s s'); intuition.",
                        "VernacExtend",
                        "31b42c6ecad7bb14b7cce40707a326058d1a5855"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (subset_1 (s:=s) (s':=s')) (subset_2 (s:=s) (s':=s')).",
                        "VernacExtend",
                        "33c86e1a2efab96a10c12406dc261389550b4694"
                    ]
                },
                {
                    "command": [
                        "case (subset s s'); intuition.",
                        "VernacExtend",
                        "2512f10896a31179ebc90894bc4113ce11519225"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intros; exists (elements s); intuition.",
                        "VernacExtend",
                        "85923745907f65a9c9441ddda87054be3c4b7dbc"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "fold",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "intros; exists (fold (A:=A) f s i); exact (fold_1 s i f).",
                        "VernacExtend",
                        "17077eace75ea1ec84e21614cb696be2689ba21a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardinal",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros; exists (cardinal s); exact (cardinal_1 s).",
                        "VernacExtend",
                        "6729d982bbe838e52ca38e2a12b15382394bad3d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compat_P_aux",
            "line_nb": 66,
            "steps": [
                {
                    "command": [
                        "unfold compat_P, compat_bool, Proper, respectful, fdec; intros.",
                        "VernacExtend",
                        "f2f5c5d97d08a2786687af0582c9b815ef969004"
                    ]
                },
                {
                    "command": [
                        "generalize (E.eq_sym H0); case (Pdec x); case (Pdec y); firstorder.",
                        "VernacExtend",
                        "03220b13ee19d762babe20bd6044f9974af5d0c0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "exists (filter (fdec Pdec) s).",
                        "VernacExtend",
                        "43570e782f909e940d9f967d186d5bacaafb5ba4"
                    ]
                },
                {
                    "command": [
                        "intro H; assert (compat_bool E.eq (fdec Pdec)); auto.",
                        "VernacExtend",
                        "7154decca9334bf22091a757031343b864e99075"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "eauto with set.",
                        "VernacExtend",
                        "c7f52469ec93c12f0a6e2e69596b6e2fa445057d"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_2 H0 H1).",
                        "VernacExtend",
                        "6b4e31e11c58a8152f8ba40c9cbf22fea8b7c75f"
                    ]
                },
                {
                    "command": [
                        "unfold fdec.",
                        "VernacExtend",
                        "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
                    ]
                },
                {
                    "command": [
                        "case (Pdec x); intuition.",
                        "VernacExtend",
                        "4ecfde9848172f9a222db148a648d6af46195cde"
                    ]
                },
                {
                    "command": [
                        "inversion H2.",
                        "VernacExtend",
                        "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
                    ]
                },
                {
                    "command": [
                        "apply filter_3; auto.",
                        "VernacExtend",
                        "c4d5746fa00763bed5a0d475f46d166b05d2ace0"
                    ]
                },
                {
                    "command": [
                        "unfold fdec; simpl.",
                        "VernacExtend",
                        "bae6b158afcada6e67c655bb93c24a8e39550635"
                    ]
                },
                {
                    "command": [
                        "case (Pdec x); intuition.",
                        "VernacExtend",
                        "4ecfde9848172f9a222db148a648d6af46195cde"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "for_all",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (for_all_1 (s:=s) (f:=fdec Pdec)) (for_all_2 (s:=s) (f:=fdec Pdec)).",
                        "VernacExtend",
                        "22985e5b6946077fe0452c5aaff11842aa5a06c8"
                    ]
                },
                {
                    "command": [
                        "case (for_all (fdec Pdec) s); unfold For_all; [ left | right ]; intros.",
                        "VernacExtend",
                        "db0657c7158703d3a5bbea623213da9d77afeb43"
                    ]
                },
                {
                    "command": [
                        "assert (compat_bool E.eq (fdec Pdec)); auto.",
                        "VernacExtend",
                        "ff55e8e7c152c6d46b7d97ee58b2730ed1beb3cc"
                    ]
                },
                {
                    "command": [
                        "generalize (H0 H3 Logic.eq_refl _ H2).",
                        "VernacExtend",
                        "854348ce26232456701911c54a5f07116f3b706e"
                    ]
                },
                {
                    "command": [
                        "unfold fdec.",
                        "VernacExtend",
                        "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
                    ]
                },
                {
                    "command": [
                        "case (Pdec x); intuition.",
                        "VernacExtend",
                        "4ecfde9848172f9a222db148a648d6af46195cde"
                    ]
                },
                {
                    "command": [
                        "inversion H4.",
                        "VernacExtend",
                        "184e412874313f14014d688ef3b69568302d00ff"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "absurd (false = true); [ auto with bool | apply H; auto ].",
                        "VernacExtend",
                        "381ee87a7975ef03637348ca6fabeef287aaa6e9"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold fdec.",
                        "VernacExtend",
                        "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
                    ]
                },
                {
                    "command": [
                        "case (Pdec x); intuition.",
                        "VernacExtend",
                        "4ecfde9848172f9a222db148a648d6af46195cde"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (exists_1 (s:=s) (f:=fdec Pdec)) (exists_2 (s:=s) (f:=fdec Pdec)).",
                        "VernacExtend",
                        "fc5c1e90e9e32bcf023b75bd3c99face039f7f9a"
                    ]
                },
                {
                    "command": [
                        "case (exists_ (fdec Pdec) s); unfold Exists; [ left | right ]; intros.",
                        "VernacExtend",
                        "9713ed3fdcf4b44ceb5fbcf827c9bec950e40b8c"
                    ]
                },
                {
                    "command": [
                        "elim H0; auto; intros.",
                        "VernacExtend",
                        "97fbeaed608ae11363bbff0a6efbbcb79e51cb3f"
                    ]
                },
                {
                    "command": [
                        "exists x; intuition.",
                        "VernacExtend",
                        "5265b0752ff2ed4bffe4b91b951e6ea4268a5bda"
                    ]
                },
                {
                    "command": [
                        "generalize H4.",
                        "VernacExtend",
                        "2e85cdbd389b45f04e41f682681d2f86e3deb8f9"
                    ]
                },
                {
                    "command": [
                        "unfold fdec.",
                        "VernacExtend",
                        "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
                    ]
                },
                {
                    "command": [
                        "case (Pdec x); intuition.",
                        "VernacExtend",
                        "4ecfde9848172f9a222db148a648d6af46195cde"
                    ]
                },
                {
                    "command": [
                        "inversion H2.",
                        "VernacExtend",
                        "afdc959ca1f20d64005a6cd95d8f83134e6ae5f8"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros.",
                        "VernacExtend",
                        "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
                    ]
                },
                {
                    "command": [
                        "absurd (false = true); [ auto with bool | apply H; auto ].",
                        "VernacExtend",
                        "381ee87a7975ef03637348ca6fabeef287aaa6e9"
                    ]
                },
                {
                    "command": [
                        "exists x; intuition.",
                        "VernacExtend",
                        "5265b0752ff2ed4bffe4b91b951e6ea4268a5bda"
                    ]
                },
                {
                    "command": [
                        "unfold fdec.",
                        "VernacExtend",
                        "21edca939bef9ba1d3e1bbeba2c886dfd4e118cc"
                    ]
                },
                {
                    "command": [
                        "case (Pdec x); intuition.",
                        "VernacExtend",
                        "4ecfde9848172f9a222db148a648d6af46195cde"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "partition",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "exists (partition (fdec Pdec) s).",
                        "VernacExtend",
                        "9c0d713e4ca5b5ba4930a9d95a9470e06020b08b"
                    ]
                },
                {
                    "command": [
                        "generalize (partition_1 s (f:=fdec Pdec)) (partition_2 s (f:=fdec Pdec)).",
                        "VernacExtend",
                        "fb58ffd4b90d7063dd1ac3965022d51239d8556f"
                    ]
                },
                {
                    "command": [
                        "case (partition (fdec Pdec) s).",
                        "VernacExtend",
                        "36e2a54fe62d6819095065c97274f05600ff26af"
                    ]
                },
                {
                    "command": [
                        "intros s1 s2; simpl.",
                        "VernacExtend",
                        "32bdc725b62c6552bd344e8be9804f825144e579"
                    ]
                },
                {
                    "command": [
                        "intros; assert (compat_bool E.eq (fdec Pdec)); auto.",
                        "VernacExtend",
                        "a85e286b73e899d5a44e670704e057e5e372c440"
                    ]
                },
                {
                    "command": [
                        "intros; assert (compat_bool E.eq (fun x => negb (fdec Pdec x))).",
                        "VernacExtend",
                        "381beb8b3702168fb76c86e3716fb3d3c0e36eb4"
                    ]
                },
                {
                    "command": [
                        "generalize H2; unfold compat_bool, Proper, respectful; intuition; apply (f_equal negb); auto.",
                        "VernacExtend",
                        "37a046f242ac9c5c4034c1aa6e7b3d378e1c01e7"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "generalize H4; unfold For_all, Equal; intuition.",
                        "VernacExtend",
                        "f6cf2a7a3453515e924545e3e378781a333a2232"
                    ]
                },
                {
                    "command": [
                        "elim (H0 x); intros.",
                        "VernacExtend",
                        "f42c658aed3eb3e37f5778e0e12c8ddd945bc4dd"
                    ]
                },
                {
                    "command": [
                        "assert (fdec Pdec x = true).",
                        "VernacExtend",
                        "4e699700591b1c9a475079b87852e7382fa327da"
                    ]
                },
                {
                    "command": [
                        "eapply filter_2; eauto with set.",
                        "VernacExtend",
                        "ca55661a427655be715fc927041b399b13bbdc4d"
                    ]
                },
                {
                    "command": [
                        "generalize H8; unfold fdec; case (Pdec x); intuition.",
                        "VernacExtend",
                        "7754524e3b9542de2bffd7940c7b3f71cd9260a9"
                    ]
                },
                {
                    "command": [
                        "inversion H9.",
                        "VernacExtend",
                        "ba06d75575d77a771abfe438435f8748713f713e"
                    ]
                },
                {
                    "command": [
                        "generalize H; unfold For_all, Equal; intuition.",
                        "VernacExtend",
                        "24c6ebf713efe9ac1288f6666581461c438810ab"
                    ]
                },
                {
                    "command": [
                        "elim (H0 x); intros.",
                        "VernacExtend",
                        "f42c658aed3eb3e37f5778e0e12c8ddd945bc4dd"
                    ]
                },
                {
                    "command": [
                        "cut ((fun x => negb (fdec Pdec x)) x = true).",
                        "VernacExtend",
                        "73f22bddff42d93cfe53a2fc9c2ad1d1a6c527aa"
                    ]
                },
                {
                    "command": [
                        "unfold fdec; case (Pdec x); intuition.",
                        "VernacExtend",
                        "c775afad3b167a806c4d053dd60c13168c38eaf5"
                    ]
                },
                {
                    "command": [
                        "change ((fun x => negb (fdec Pdec x)) x = true).",
                        "VernacExtend",
                        "c560e99edd15a14c91cf032933850a7605d31fc9"
                    ]
                },
                {
                    "command": [
                        "apply (filter_2 (s:=s) (x:=x)); auto.",
                        "VernacExtend",
                        "41701d41e5be41b791b4db3dd9052185511e056b"
                    ]
                },
                {
                    "command": [
                        "set (b := fdec Pdec x) in *; generalize (Logic.eq_refl b); pattern b at -1; case b; unfold b; [ left | right ].",
                        "VernacExtend",
                        "2b4abdfd1f724669c18a6040f696ded8a6cc40fe"
                    ]
                },
                {
                    "command": [
                        "elim (H4 x); intros _ B; apply B; auto with set.",
                        "VernacExtend",
                        "bb2f94289e1d83ee1b6285b46935f98017c69d14"
                    ]
                },
                {
                    "command": [
                        "elim (H x); intros _ B; apply B; auto with set.",
                        "VernacExtend",
                        "3cbf6bcf0f0464e6fc02b2dfbd3f5b0b7ad47ef7"
                    ]
                },
                {
                    "command": [
                        "apply filter_3; auto.",
                        "VernacExtend",
                        "c4d5746fa00763bed5a0d475f46d166b05d2ace0"
                    ]
                },
                {
                    "command": [
                        "rewrite H5; auto.",
                        "VernacExtend",
                        "b21071c2373ca254f86470b0d9b124cb25551839"
                    ]
                },
                {
                    "command": [
                        "eapply (filter_1 (s:=s) (x:=x) H2); elim (H4 x); intros B _; apply B; auto.",
                        "VernacExtend",
                        "a54296fa086bff96882a4bc0ec28c5447480c845"
                    ]
                },
                {
                    "command": [
                        "eapply (filter_1 (s:=s) (x:=x) H3); elim (H x); intros B _; apply B; auto.",
                        "VernacExtend",
                        "e659d73635b76a321877a63c5651b845d1dde834"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "choose_aux",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (M.choose s); [left | right]; auto.",
                        "VernacExtend",
                        "0be8e7d4dd70b5441e2c770c20f1a7191250561b"
                    ]
                },
                {
                    "command": [
                        "exists e; auto.",
                        "VernacExtend",
                        "5789629a110c642815687c3512a8c438259c58a1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "choose",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "intros; destruct (choose_aux s) as [(x,Hx)|H].",
                        "VernacExtend",
                        "ba1955b9a8a60e3d98267a31e220938e10a6eb6a"
                    ]
                },
                {
                    "command": [
                        "left; exists x; apply choose_1; auto.",
                        "VernacExtend",
                        "a55d046d92c663a3a927d4dfd5d4972f292d3833"
                    ]
                },
                {
                    "command": [
                        "right; apply choose_2; auto.",
                        "VernacExtend",
                        "8f81da0772d8ccf1d54047765096191d0a421a85"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "choose_ok1",
            "line_nb": 157,
            "steps": [
                {
                    "command": [
                        "intros s x.",
                        "VernacExtend",
                        "2d36874eb73f1057ebcb9050ba57f7baca1f1919"
                    ]
                },
                {
                    "command": [
                        "unfold choose; split; intros.",
                        "VernacExtend",
                        "3528b61d61b1c3cc10345c0ce2a71be4588249d1"
                    ]
                },
                {
                    "command": [
                        "destruct (choose_aux s) as [(y,Hy)|H']; try congruence.",
                        "VernacExtend",
                        "b77251056548218d1d4a807e5ed3443691e8a3bb"
                    ]
                },
                {
                    "command": [
                        "replace x with y in * by congruence.",
                        "VernacExtend",
                        "ff8705fb73fbf8cc46aeb72548393935d8d3475c"
                    ]
                },
                {
                    "command": [
                        "exists (choose_1 Hy); auto.",
                        "VernacExtend",
                        "0ba26f35fb661a8acf918ac091488f14df66fd7f"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "destruct (choose_aux s) as [(y,Hy)|H']; congruence.",
                        "VernacExtend",
                        "57983fa20be233328bbf81feea7c7fe0e96d1a99"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "choose_ok2",
            "line_nb": 166,
            "steps": [
                {
                    "command": [
                        "intros s.",
                        "VernacExtend",
                        "f24a724dc5e422652c0513af3278d221ab4df04a"
                    ]
                },
                {
                    "command": [
                        "unfold choose; split; intros.",
                        "VernacExtend",
                        "3528b61d61b1c3cc10345c0ce2a71be4588249d1"
                    ]
                },
                {
                    "command": [
                        "destruct (choose_aux s) as [(y,Hy)|H']; try congruence.",
                        "VernacExtend",
                        "b77251056548218d1d4a807e5ed3443691e8a3bb"
                    ]
                },
                {
                    "command": [
                        "exists (choose_2 H'); auto.",
                        "VernacExtend",
                        "b43597295bf1094f0ea30c831fe735f0d1758e67"
                    ]
                },
                {
                    "command": [
                        "destruct H.",
                        "VernacExtend",
                        "8b2bca015429da94c456243b461e17a2a0582c40"
                    ]
                },
                {
                    "command": [
                        "destruct (choose_aux s) as [(y,Hy)|H']; congruence.",
                        "VernacExtend",
                        "57983fa20be233328bbf81feea7c7fe0e96d1a99"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "choose_equal",
            "line_nb": 174,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "generalize (@M.choose_1 s)(@M.choose_2 s) (@M.choose_1 s')(@M.choose_2 s')(@M.choose_3 s s') (choose_ok1 s)(choose_ok2 s)(choose_ok1 s')(choose_ok2 s').",
                        "VernacExtend",
                        "6f24bf5aed83116acd7515c46e40ddb3cccedded"
                    ]
                },
                {
                    "command": [
                        "destruct (choose s) as [(x,Hx)|Hx]; destruct (choose s') as [(x',Hx')|Hx']; auto; intros.",
                        "VernacExtend",
                        "ebb5d840229344eed030b62dc485365567929787"
                    ]
                },
                {
                    "command": [
                        "apply H4; auto.",
                        "VernacExtend",
                        "07cffeff5484e6b62a3843cb783b50b5dcc09af8"
                    ]
                },
                {
                    "command": [
                        "rewrite H5; exists Hx; auto.",
                        "VernacExtend",
                        "5b50c353203c3dd0b418dfbd29d6d6f42056420f"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; exists Hx'; auto.",
                        "VernacExtend",
                        "bbdafc22e7041203316af58e61e0bd754b62d450"
                    ]
                },
                {
                    "command": [
                        "apply Hx' with x; unfold Equal in H; rewrite <-H; auto.",
                        "VernacExtend",
                        "c642a1b0f232896184c03d509626ba8a54fcc205"
                    ]
                },
                {
                    "command": [
                        "apply Hx with x'; unfold Equal in H; rewrite H; auto.",
                        "VernacExtend",
                        "e5f226ca321d87cb19f4fd37d61f176fa1028d0a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min_elt",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "intros; generalize (min_elt_1 (s:=s)) (min_elt_2 (s:=s)) (min_elt_3 (s:=s)).",
                        "VernacExtend",
                        "21094aa86394dfb9cfd8d7fced018dc3ce20503b"
                    ]
                },
                {
                    "command": [
                        "case (min_elt s); [ left | right ]; auto.",
                        "VernacExtend",
                        "e1b90955978b024c6414e0c5b65e61eb213117d9"
                    ]
                },
                {
                    "command": [
                        "exists e; unfold For_all; eauto.",
                        "VernacExtend",
                        "38fe7c31a183fe8e3c13d1caadbed5027485c437"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "max_elt",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "intros; generalize (max_elt_1 (s:=s)) (max_elt_2 (s:=s)) (max_elt_3 (s:=s)).",
                        "VernacExtend",
                        "80825caef4d2cd397ca73559f38c0601206a65cb"
                    ]
                },
                {
                    "command": [
                        "case (max_elt s); [ left | right ]; auto.",
                        "VernacExtend",
                        "9ab9c069df7f46f3fe0afaf21c5b1f2849b23007"
                    ]
                },
                {
                    "command": [
                        "exists e; unfold For_all; eauto.",
                        "VernacExtend",
                        "38fe7c31a183fe8e3c13d1caadbed5027485c437"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "empty_1",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "unfold empty; case M.empty; auto.",
                        "VernacExtend",
                        "ea275c57fcf55f9261a0266352556d33fed69b6a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_empty_1",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "intros; unfold is_empty; case (M.is_empty s); auto.",
                        "VernacExtend",
                        "5c160c5675e2076a371b58426698661f6f3e66c3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_empty_2",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "intro s; unfold is_empty; case (M.is_empty s); auto.",
                        "VernacExtend",
                        "34b983463e231fae01eb303357452551d68b1104"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate H.",
                        "VernacExtend",
                        "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_1",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "intros; unfold mem; case (M.mem x s); auto.",
                        "VernacExtend",
                        "20ba6c419081ab53dc479cad112d95d0eba96591"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mem_2",
            "line_nb": 232,
            "steps": [
                {
                    "command": [
                        "intros s x; unfold mem; case (M.mem x s); auto.",
                        "VernacExtend",
                        "6a0c6bbd153973fc7d01a519080cbdba9fc1aee6"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate H.",
                        "VernacExtend",
                        "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_1",
            "line_nb": 238,
            "steps": [
                {
                    "command": [
                        "intros; unfold equal; case M.equal; intuition.",
                        "VernacExtend",
                        "730b2e98f7e9fd9be027a44cb18df4d6feb1c128"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "equal_2",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "intros s s'; unfold equal; case (M.equal s s'); intuition; inversion H.",
                        "VernacExtend",
                        "a92071c3b78af3d4c7edf527476b55f9460892df"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_1",
            "line_nb": 245,
            "steps": [
                {
                    "command": [
                        "intros; unfold subset; case M.subset; intuition.",
                        "VernacExtend",
                        "a4f65ec090d71b00c34912280d2d6fc94ead35b7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "subset_2",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "intros s s'; unfold subset; case (M.subset s s'); intuition; inversion H.",
                        "VernacExtend",
                        "7535eb1ee3d005e02806f472951f5c27160a8d9c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "choose_1",
            "line_nb": 252,
            "steps": [
                {
                    "command": [
                        "intros s x; unfold choose; case (M.choose s).",
                        "VernacExtend",
                        "a4fe1eb5bb01be8f8883cf32dfca13e76bb23447"
                    ]
                },
                {
                    "command": [
                        "simple destruct s0; intros; injection H; intros; subst; auto.",
                        "VernacExtend",
                        "068203f1cee99e34973497596bace904e07951cf"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate H.",
                        "VernacExtend",
                        "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "choose_2",
            "line_nb": 257,
            "steps": [
                {
                    "command": [
                        "intro s; unfold choose; case (M.choose s); auto.",
                        "VernacExtend",
                        "32cd5791e2142be591c99b00df3821ad447130d1"
                    ]
                },
                {
                    "command": [
                        "simple destruct s0; intros; discriminate H.",
                        "VernacExtend",
                        "dfc04ec614a77335b6ced5ea1e06901498bf19f5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "choose_3",
            "line_nb": 261,
            "steps": [
                {
                    "command": [
                        "unfold choose; intros.",
                        "VernacExtend",
                        "c0a5fbe3963555f31158d6295a81f4032b6070cc"
                    ]
                },
                {
                    "command": [
                        "generalize (M.choose_equal H1); clear H1.",
                        "VernacExtend",
                        "55639ff026729a70de21a16bd0a61021f7fcb125"
                    ]
                },
                {
                    "command": [
                        "destruct (M.choose s) as [(?,?)|?]; destruct (M.choose s') as [(?,?)|?]; simpl; auto; congruence.",
                        "VernacExtend",
                        "fc4f360e717a17fe1e4352ae96e46ed1266aa915"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_1",
            "line_nb": 267,
            "steps": [
                {
                    "command": [
                        "intros; unfold elements; case (M.elements s); firstorder.",
                        "VernacExtend",
                        "0345b11bdccce26fce323b9e2cd9b4a2d92973e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_2",
            "line_nb": 270,
            "steps": [
                {
                    "command": [
                        "intros s x; unfold elements; case (M.elements s); firstorder.",
                        "VernacExtend",
                        "3aff9fdc14e544f2813ff8e318658fa56641dc1c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_3",
            "line_nb": 273,
            "steps": [
                {
                    "command": [
                        "intros; unfold elements; case (M.elements s); firstorder.",
                        "VernacExtend",
                        "0345b11bdccce26fce323b9e2cd9b4a2d92973e9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "elements_3w",
            "line_nb": 277,
            "steps": [
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min_elt_1",
            "line_nb": 281,
            "steps": [
                {
                    "command": [
                        "intros s x; unfold min_elt; case (M.min_elt s).",
                        "VernacExtend",
                        "c73cb86aed4fe301dc65bad1e60005bc16832b02"
                    ]
                },
                {
                    "command": [
                        "simple destruct s0; intros; injection H; intros; subst; intuition.",
                        "VernacExtend",
                        "2fdeb67d41da0415d645f9a5f0a6a6d0d91fcc57"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate H.",
                        "VernacExtend",
                        "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min_elt_2",
            "line_nb": 286,
            "steps": [
                {
                    "command": [
                        "intros s x y; unfold min_elt; case (M.min_elt s).",
                        "VernacExtend",
                        "60f3f623588f2c30eb649d8a2f9d606d398d450c"
                    ]
                },
                {
                    "command": [
                        "unfold For_all; simple destruct s0; intros; injection H; intros; subst; firstorder.",
                        "VernacExtend",
                        "c7519d9a46ee1c9a085c333c1718de0bf58511a5"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate H.",
                        "VernacExtend",
                        "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min_elt_3",
            "line_nb": 291,
            "steps": [
                {
                    "command": [
                        "intros s; unfold min_elt; case (M.min_elt s); auto.",
                        "VernacExtend",
                        "4716899115a1123a9a154da4b76342ed1613ec47"
                    ]
                },
                {
                    "command": [
                        "simple destruct s0; intros; discriminate H.",
                        "VernacExtend",
                        "dfc04ec614a77335b6ced5ea1e06901498bf19f5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "max_elt_1",
            "line_nb": 296,
            "steps": [
                {
                    "command": [
                        "intros s x; unfold max_elt; case (M.max_elt s).",
                        "VernacExtend",
                        "a4f641644de5a78ed8ded105dce20463a884dec9"
                    ]
                },
                {
                    "command": [
                        "simple destruct s0; intros; injection H; intros; subst; intuition.",
                        "VernacExtend",
                        "2fdeb67d41da0415d645f9a5f0a6a6d0d91fcc57"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate H.",
                        "VernacExtend",
                        "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "max_elt_2",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "intros s x y; unfold max_elt; case (M.max_elt s).",
                        "VernacExtend",
                        "59000381e55b7824401463959a9ba06eb43128eb"
                    ]
                },
                {
                    "command": [
                        "unfold For_all; simple destruct s0; intros; injection H; intros; subst; firstorder.",
                        "VernacExtend",
                        "c7519d9a46ee1c9a085c333c1718de0bf58511a5"
                    ]
                },
                {
                    "command": [
                        "intros; discriminate H.",
                        "VernacExtend",
                        "a2ec6664a5c3cf380360b4e941fe4b0877fcd220"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "max_elt_3",
            "line_nb": 306,
            "steps": [
                {
                    "command": [
                        "intros s; unfold max_elt; case (M.max_elt s); auto.",
                        "VernacExtend",
                        "03e5af01e0b2ab97ff6b03d8c26cb4d7e7a6c58f"
                    ]
                },
                {
                    "command": [
                        "simple destruct s0; intros; discriminate H.",
                        "VernacExtend",
                        "dfc04ec614a77335b6ced5ea1e06901498bf19f5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_1",
            "line_nb": 311,
            "steps": [
                {
                    "command": [
                        "intros; unfold add; case (M.add x s); unfold Add; firstorder.",
                        "VernacExtend",
                        "144486663d28cdd95d9b7eb3ea797dd436546ec3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_2",
            "line_nb": 314,
            "steps": [
                {
                    "command": [
                        "intros; unfold add; case (M.add x s); unfold Add; firstorder.",
                        "VernacExtend",
                        "144486663d28cdd95d9b7eb3ea797dd436546ec3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_3",
            "line_nb": 317,
            "steps": [
                {
                    "command": [
                        "intros s x y; unfold add; case (M.add x s); unfold Add; firstorder.",
                        "VernacExtend",
                        "a9409610fcb316a6fdc4a53c59b71603d7eb7e95"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_1",
            "line_nb": 321,
            "steps": [
                {
                    "command": [
                        "intros; unfold remove; case (M.remove x s); firstorder.",
                        "VernacExtend",
                        "433e077ba3f91146f5b0393951bf3c206798c479"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_2",
            "line_nb": 324,
            "steps": [
                {
                    "command": [
                        "intros; unfold remove; case (M.remove x s); firstorder.",
                        "VernacExtend",
                        "433e077ba3f91146f5b0393951bf3c206798c479"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "remove_3",
            "line_nb": 327,
            "steps": [
                {
                    "command": [
                        "intros s x y; unfold remove; case (M.remove x s); firstorder.",
                        "VernacExtend",
                        "e7ae04e8e237bb1bfd4b97ef528ffe3378c4e981"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "singleton_1",
            "line_nb": 331,
            "steps": [
                {
                    "command": [
                        "intros x y; unfold singleton; case (M.singleton x); firstorder.",
                        "VernacExtend",
                        "e56cd7a94f54c0fb50d3c2954a313ce691ab7c2f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "singleton_2",
            "line_nb": 334,
            "steps": [
                {
                    "command": [
                        "intros x y; unfold singleton; case (M.singleton x); firstorder.",
                        "VernacExtend",
                        "e56cd7a94f54c0fb50d3c2954a313ce691ab7c2f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_1",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "intros s s' x; unfold union; case (M.union s s'); firstorder.",
                        "VernacExtend",
                        "d8133dfaa9f43c2da8266c40d03c278bbd03c126"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_2",
            "line_nb": 341,
            "steps": [
                {
                    "command": [
                        "intros s s' x; unfold union; case (M.union s s'); firstorder.",
                        "VernacExtend",
                        "d8133dfaa9f43c2da8266c40d03c278bbd03c126"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "union_3",
            "line_nb": 344,
            "steps": [
                {
                    "command": [
                        "intros s s' x; unfold union; case (M.union s s'); firstorder.",
                        "VernacExtend",
                        "d8133dfaa9f43c2da8266c40d03c278bbd03c126"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inter_1",
            "line_nb": 348,
            "steps": [
                {
                    "command": [
                        "intros s s' x; unfold inter; case (M.inter s s'); firstorder.",
                        "VernacExtend",
                        "f5ed5ceaebfc6b4e84db6c2856ef8a4e67c86fdd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inter_2",
            "line_nb": 351,
            "steps": [
                {
                    "command": [
                        "intros s s' x; unfold inter; case (M.inter s s'); firstorder.",
                        "VernacExtend",
                        "f5ed5ceaebfc6b4e84db6c2856ef8a4e67c86fdd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "inter_3",
            "line_nb": 354,
            "steps": [
                {
                    "command": [
                        "intros s s' x; unfold inter; case (M.inter s s'); firstorder.",
                        "VernacExtend",
                        "f5ed5ceaebfc6b4e84db6c2856ef8a4e67c86fdd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diff_1",
            "line_nb": 358,
            "steps": [
                {
                    "command": [
                        "intros s s' x; unfold diff; case (M.diff s s'); firstorder.",
                        "VernacExtend",
                        "19f0a7623adbc5e81836f7b7a3aa3ab085e684cd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diff_2",
            "line_nb": 361,
            "steps": [
                {
                    "command": [
                        "intros s s' x; unfold diff; case (M.diff s s'); firstorder.",
                        "VernacExtend",
                        "19f0a7623adbc5e81836f7b7a3aa3ab085e684cd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "diff_3",
            "line_nb": 364,
            "steps": [
                {
                    "command": [
                        "intros s s' x; unfold diff; case (M.diff s s'); firstorder.",
                        "VernacExtend",
                        "19f0a7623adbc5e81836f7b7a3aa3ab085e684cd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cardinal_1",
            "line_nb": 368,
            "steps": [
                {
                    "command": [
                        "intros; unfold cardinal; case (M.cardinal s); unfold elements in *; destruct (M.elements s); auto.",
                        "VernacExtend",
                        "264462ca6d6eb1ecc49c82b2f13b91e3a8f62fe3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fold_1",
            "line_nb": 372,
            "steps": [
                {
                    "command": [
                        "intros; unfold fold; case (M.fold f s i); unfold elements in *; destruct (M.elements s); auto.",
                        "VernacExtend",
                        "4179ed18db74dd7516bab1345576927b08c5b0de"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "f_dec",
            "line_nb": 375,
            "steps": [
                {
                    "command": [
                        "intros; case (f x); auto with bool.",
                        "VernacExtend",
                        "df50e603ba0551906ac06ce3639693bc48578597"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "filter_1",
            "line_nb": 383,
            "steps": [
                {
                    "command": [
                        "intros s x f; unfold filter; case M.filter as (x0,Hiff); intuition.",
                        "VernacExtend",
                        "c0c60277794bcac31da5c77069d07c22479a57b8"
                    ]
                },
                {
                    "command": [
                        "generalize (Hiff (compat_P_aux H)); firstorder.",
                        "VernacExtend",
                        "cde78b97a68bcf20dc9ef7300e34e0e92237fe4f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_2",
            "line_nb": 387,
            "steps": [
                {
                    "command": [
                        "intros s x f; unfold filter; case M.filter as (x0,Hiff); intuition.",
                        "VernacExtend",
                        "c0c60277794bcac31da5c77069d07c22479a57b8"
                    ]
                },
                {
                    "command": [
                        "generalize (Hiff (compat_P_aux H)); firstorder.",
                        "VernacExtend",
                        "cde78b97a68bcf20dc9ef7300e34e0e92237fe4f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "filter_3",
            "line_nb": 391,
            "steps": [
                {
                    "command": [
                        "intros s x f; unfold filter; case M.filter as (x0,Hiff); intuition.",
                        "VernacExtend",
                        "c0c60277794bcac31da5c77069d07c22479a57b8"
                    ]
                },
                {
                    "command": [
                        "generalize (Hiff (compat_P_aux H)); firstorder.",
                        "VernacExtend",
                        "cde78b97a68bcf20dc9ef7300e34e0e92237fe4f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "for_all_1",
            "line_nb": 396,
            "steps": [
                {
                    "command": [
                        "intros s f; unfold for_all; case M.for_all; intuition; elim n; auto.",
                        "VernacExtend",
                        "60bba9dba1b60778b3eb721d8ae83d18c1e875d4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "for_all_2",
            "line_nb": 399,
            "steps": [
                {
                    "command": [
                        "intros s f; unfold for_all; case M.for_all; intuition; inversion H0.",
                        "VernacExtend",
                        "4737b06d80a4410aa8f3b9b5310da2d146b77c0f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_1",
            "line_nb": 403,
            "steps": [
                {
                    "command": [
                        "intros s f; unfold exists_; case M.exists_; intuition; elim n; auto.",
                        "VernacExtend",
                        "78a55ff7bcd5d8ef2d1228d24eae44f94bacf883"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_2",
            "line_nb": 406,
            "steps": [
                {
                    "command": [
                        "intros s f; unfold exists_; case M.exists_; intuition; inversion H0.",
                        "VernacExtend",
                        "fe51e74ff86dcda731a8cef4cd14965a37148da7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "partition_1",
            "line_nb": 410,
            "steps": [
                {
                    "command": [
                        "intros s f; unfold partition; case M.partition.",
                        "VernacExtend",
                        "4cad70dd2afa7f9bbcb3977bd0aa4dfc68fd643d"
                    ]
                },
                {
                    "command": [
                        "intro p; case p; clear p; intros s1 s2 H C.",
                        "VernacExtend",
                        "f8105c063ccf727e107b415ddbc82b1e97ef7fb0"
                    ]
                },
                {
                    "command": [
                        "generalize (H (compat_P_aux C)); clear H; intro H.",
                        "VernacExtend",
                        "ae042befa5fbeb837ee8fe4f0278e8b61f51832b"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold Equal; intuition.",
                        "VernacExtend",
                        "685a5b44380e2ada14b90cc2bf1c77a5d1a0cdc5"
                    ]
                },
                {
                    "command": [
                        "apply filter_3; firstorder.",
                        "VernacExtend",
                        "83abd2919b65de95491544b8c8269557a393a931"
                    ]
                },
                {
                    "command": [
                        "elim (H2 a); intros.",
                        "VernacExtend",
                        "751118923db4a01eac00f94e089d92d6a38bf25d"
                    ]
                },
                {
                    "command": [
                        "assert (In a s).",
                        "VernacExtend",
                        "af1279f268220f44ea61de2a2b24fb5a114f65ca"
                    ]
                },
                {
                    "command": [
                        "eapply filter_1; eauto.",
                        "VernacExtend",
                        "dacff2b8f507601bfce2ea32717f1815ff66d55b"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros; auto.",
                        "VernacExtend",
                        "51793ba3492860d82d2a27b6b5e68b32d154516c"
                    ]
                },
                {
                    "command": [
                        "absurd (f a = true).",
                        "VernacExtend",
                        "47dfe9cf33d9fd52d6b13101600719b9cd06f280"
                    ]
                },
                {
                    "command": [
                        "exact (H a H6).",
                        "VernacExtend",
                        "d4db5f564f63e8489a7c5a1812342eb0fc3e249a"
                    ]
                },
                {
                    "command": [
                        "eapply filter_2; eauto.",
                        "VernacExtend",
                        "2a9b67aa4c4f3f251fc03d1260d289bd6b7f6a97"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "partition_2",
            "line_nb": 424,
            "steps": [
                {
                    "command": [
                        "intros s f; unfold partition; case M.partition.",
                        "VernacExtend",
                        "4cad70dd2afa7f9bbcb3977bd0aa4dfc68fd643d"
                    ]
                },
                {
                    "command": [
                        "intro p; case p; clear p; intros s1 s2 H C.",
                        "VernacExtend",
                        "f8105c063ccf727e107b415ddbc82b1e97ef7fb0"
                    ]
                },
                {
                    "command": [
                        "generalize (H (compat_P_aux C)); clear H; intro H.",
                        "VernacExtend",
                        "ae042befa5fbeb837ee8fe4f0278e8b61f51832b"
                    ]
                },
                {
                    "command": [
                        "assert (D : compat_bool E.eq (fun x => negb (f x))).",
                        "VernacExtend",
                        "ff5f3d102016c0cddd6881a20e3ebcb57cb52cdb"
                    ]
                },
                {
                    "command": [
                        "generalize C; unfold compat_bool, Proper, respectful; intros; apply (f_equal negb); auto.",
                        "VernacExtend",
                        "33bacfb130323ca02070f2c834f9443d10ce6a6c"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold Equal; intuition.",
                        "VernacExtend",
                        "685a5b44380e2ada14b90cc2bf1c77a5d1a0cdc5"
                    ]
                },
                {
                    "command": [
                        "apply filter_3; firstorder.",
                        "VernacExtend",
                        "83abd2919b65de95491544b8c8269557a393a931"
                    ]
                },
                {
                    "command": [
                        "elim (H2 a); intros.",
                        "VernacExtend",
                        "751118923db4a01eac00f94e089d92d6a38bf25d"
                    ]
                },
                {
                    "command": [
                        "assert (In a s).",
                        "VernacExtend",
                        "af1279f268220f44ea61de2a2b24fb5a114f65ca"
                    ]
                },
                {
                    "command": [
                        "eapply filter_1; eauto.",
                        "VernacExtend",
                        "dacff2b8f507601bfce2ea32717f1815ff66d55b"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros; auto.",
                        "VernacExtend",
                        "51793ba3492860d82d2a27b6b5e68b32d154516c"
                    ]
                },
                {
                    "command": [
                        "absurd (f a = true).",
                        "VernacExtend",
                        "47dfe9cf33d9fd52d6b13101600719b9cd06f280"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "generalize (filter_2 D H1).",
                        "VernacExtend",
                        "064587f9f0ab49ae3074516580a433486567f5c4"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; intros H8; inversion H8.",
                        "VernacExtend",
                        "1e0ccb0c93f23aca56ef3ef4d28d2cee03eafe3e"
                    ]
                },
                {
                    "command": [
                        "exact (H0 a H6).",
                        "VernacExtend",
                        "f2d2995c6fc0186612b18c63927545252b2aaa74"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}