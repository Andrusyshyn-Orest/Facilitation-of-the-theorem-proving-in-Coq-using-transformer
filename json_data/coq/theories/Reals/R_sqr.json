{
    "filename": "theories/Reals/R_sqr.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rbasic_fun.",
            "VernacRequire",
            "3c58801de6049d20b7e7c10af13d523524f3b227"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Ltac ring_Rsqr := unfold Rsqr; ring.",
            "VernacExtend",
            "af44cda4c4d421674889dc4b9adffda0a463f7bc"
        ],
        [
            "Lemma Rsqr_neg : forall x:R, Rsqr x = Rsqr (- x).",
            "VernacStartTheoremProof",
            "ba5c1ad3ba0b4fd78caa1a8b73d74a5a13eb7ec8"
        ],
        [
            "intros; ring_Rsqr.",
            "VernacExtend",
            "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_mult : forall x y:R, Rsqr (x * y) = Rsqr x * Rsqr y.",
            "VernacStartTheoremProof",
            "687f2514a5f41f1dce46842c63c2a5b3e297e05d"
        ],
        [
            "intros; ring_Rsqr.",
            "VernacExtend",
            "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_plus : forall x y:R, Rsqr (x + y) = Rsqr x + Rsqr y + 2 * x * y.",
            "VernacStartTheoremProof",
            "2217a7af1f13d4f5525eae4742b3549543665148"
        ],
        [
            "intros; ring_Rsqr.",
            "VernacExtend",
            "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_minus : forall x y:R, Rsqr (x - y) = Rsqr x + Rsqr y - 2 * x * y.",
            "VernacStartTheoremProof",
            "64a0fb798ab2ddf4c26aff36e576abb2d20501f8"
        ],
        [
            "intros; ring_Rsqr.",
            "VernacExtend",
            "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_neg_minus : forall x y:R, Rsqr (x - y) = Rsqr (y - x).",
            "VernacStartTheoremProof",
            "2d3899514adb856dd0e246eb7ea1b152443fa5d9"
        ],
        [
            "intros; ring_Rsqr.",
            "VernacExtend",
            "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_1 : Rsqr 1 = 1.",
            "VernacStartTheoremProof",
            "c7281ba6c181bafc2643f7f6b62b357937cfcf42"
        ],
        [
            "ring_Rsqr.",
            "VernacExtend",
            "0e9acc62ae3bad0971e29cfc72376e2b7652a3a9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_gt_0_0 : forall x:R, 0 < Rsqr x -> x <> 0.",
            "VernacStartTheoremProof",
            "5b16d22deff735294840782ecf8758f64191edf6"
        ],
        [
            "intros; red; intro; rewrite H0 in H; rewrite Rsqr_0 in H; elim (Rlt_irrefl 0 H).",
            "VernacExtend",
            "9b69e5702d73eebdfebbb9a04384eb89196a1e6d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_pos_lt : forall x:R, x <> 0 -> 0 < Rsqr x.",
            "VernacStartTheoremProof",
            "1a248ea751ebecbe75fa4a2a07ddbb00a641f8a4"
        ],
        [
            "intros; case (Rtotal_order 0 x); intro; [ unfold Rsqr; apply Rmult_lt_0_compat; assumption | elim H0; intro; [ elim H; symmetry ; exact H1 | rewrite Rsqr_neg; generalize (Ropp_lt_gt_contravar x 0 H1); rewrite Ropp_0; intro; unfold Rsqr; apply Rmult_lt_0_compat; assumption ] ].",
            "VernacExtend",
            "55b9b16f8ee3410374065e59785e7b472c9c671a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_div : forall x y:R, y <> 0 -> Rsqr (x / y) = Rsqr x / Rsqr y.",
            "VernacStartTheoremProof",
            "2b46ba2b2b7f95ae28febb74ddd62202e649ec5a"
        ],
        [
            "intros; unfold Rsqr.",
            "VernacExtend",
            "1f016dbc739cb08cf3fa0774d11b6cc4dd4097ea"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite Rinv_mult_distr.",
            "VernacExtend",
            "55666fd2776d160fb1bfd9d38a2833e66927f366"
        ],
        [
            "repeat rewrite Rmult_assoc.",
            "VernacExtend",
            "9a62b3359051e53192153e7bfe542316dbd712a8"
        ],
        [
            "apply Rmult_eq_compat_l.",
            "VernacExtend",
            "bd73500ca5d8c6a128502627eccd82ae7c925a31"
        ],
        [
            "rewrite Rmult_comm.",
            "VernacExtend",
            "fd520335d31c715c2f686e2bdc0b380c493b04c0"
        ],
        [
            "repeat rewrite Rmult_assoc.",
            "VernacExtend",
            "9a62b3359051e53192153e7bfe542316dbd712a8"
        ],
        [
            "apply Rmult_eq_compat_l.",
            "VernacExtend",
            "bd73500ca5d8c6a128502627eccd82ae7c925a31"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_eq_0 : forall x:R, Rsqr x = 0 -> x = 0.",
            "VernacStartTheoremProof",
            "89775c2120c83f9c23c1c357494d4795b375231a"
        ],
        [
            "unfold Rsqr; intros; generalize (Rmult_integral x x H); intro; elim H0; intro; assumption.",
            "VernacExtend",
            "990a988f46324040cef785e0548756aeeb723468"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_minus_plus : forall a b:R, (a - b) * (a + b) = Rsqr a - Rsqr b.",
            "VernacStartTheoremProof",
            "36fbacdadd9c96c136056711ac55af5d31601552"
        ],
        [
            "intros; ring_Rsqr.",
            "VernacExtend",
            "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_plus_minus : forall a b:R, (a + b) * (a - b) = Rsqr a - Rsqr b.",
            "VernacStartTheoremProof",
            "ec63621bec86706aa6be6287c7193ed905ee5fe8"
        ],
        [
            "intros; ring_Rsqr.",
            "VernacExtend",
            "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_incr_0 : forall x y:R, Rsqr x <= Rsqr y -> 0 <= x -> 0 <= y -> x <= y.",
            "VernacStartTheoremProof",
            "d7524ccf0b6f834dbcbf72db6eed34259a44bfcb"
        ],
        [
            "intros; destruct (Rle_dec x y) as [Hle|Hnle]; [ assumption | cut (y < x); [ intro; unfold Rsqr in H; generalize (Rmult_le_0_lt_compat y x y x H1 H1 H2 H2); intro; generalize (Rle_lt_trans (x * x) (y * y) (x * x) H H3); intro; elim (Rlt_irrefl (x * x) H4) | auto with real ] ].",
            "VernacExtend",
            "1fe4b072f49a4ef5cd3427c8a884267cefd8c173"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_incr_0_var : forall x y:R, Rsqr x <= Rsqr y -> 0 <= y -> x <= y.",
            "VernacStartTheoremProof",
            "90882de0e323052b1e435474fde998a402f031b8"
        ],
        [
            "intros; destruct (Rle_dec x y) as [Hle|Hnle]; [ assumption | cut (y < x); [ intro; unfold Rsqr in H; generalize (Rmult_le_0_lt_compat y x y x H0 H0 H1 H1); intro; generalize (Rle_lt_trans (x * x) (y * y) (x * x) H H2); intro; elim (Rlt_irrefl (x * x) H3) | auto with real ] ].",
            "VernacExtend",
            "cb69264c69fe002297d49f86137a8260c4c59f89"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_incr_1 : forall x y:R, x <= y -> 0 <= x -> 0 <= y -> Rsqr x <= Rsqr y.",
            "VernacStartTheoremProof",
            "bce132f8c3e7368850b0856cdde5d0b9b50c4de1"
        ],
        [
            "intros; unfold Rsqr; apply Rmult_le_compat; assumption.",
            "VernacExtend",
            "27137d060e32b667d19f477b0aebfcb12e5d56de"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_incrst_0 : forall x y:R, Rsqr x < Rsqr y -> 0 <= x -> 0 <= y -> x < y.",
            "VernacStartTheoremProof",
            "cebe3ca9b703295bd135e164bed5170f625358eb"
        ],
        [
            "intros; case (Rtotal_order x y); intro; [ assumption | elim H2; intro; [ rewrite H3 in H; elim (Rlt_irrefl (Rsqr y) H) | generalize (Rmult_le_0_lt_compat y x y x H1 H1 H3 H3); intro; unfold Rsqr in H; generalize (Rlt_trans (x * x) (y * y) (x * x) H H4); intro; elim (Rlt_irrefl (x * x) H5) ] ].",
            "VernacExtend",
            "8d8e46f613508927fb4763fb45bee53249c68f65"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_incrst_1 : forall x y:R, x < y -> 0 <= x -> 0 <= y -> Rsqr x < Rsqr y.",
            "VernacStartTheoremProof",
            "451357528254150c2d5d3c187ae10f7dc28d59bc"
        ],
        [
            "intros; unfold Rsqr; apply Rmult_le_0_lt_compat; assumption.",
            "VernacExtend",
            "8ed5da94bcd36467eafccf3ce89f8c9816bdcd5a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_neg_pos_le_0 : forall x y:R, Rsqr x <= Rsqr y -> 0 <= y -> - y <= x.",
            "VernacStartTheoremProof",
            "e5b667a08a524d34ca26aeaf38116f577307f504"
        ],
        [
            "intros; destruct (Rcase_abs x) as [Hlt|Hle].",
            "VernacExtend",
            "d376deb038704350a3a057073cd4992b9538b45b"
        ],
        [
            "generalize (Ropp_lt_gt_contravar x 0 Hlt); rewrite Ropp_0; intro; generalize (Rlt_le 0 (- x) H1); intro; rewrite (Rsqr_neg x) in H; generalize (Rsqr_incr_0 (- x) y H H2 H0); intro; rewrite <- (Ropp_involutive x); apply Ropp_ge_le_contravar; apply Rle_ge; assumption.",
            "VernacExtend",
            "1a6ca1b148e910c00192ab69f46c1d46ded3780a"
        ],
        [
            "apply Rle_trans with 0; [ rewrite <- Ropp_0; apply Ropp_ge_le_contravar; apply Rle_ge; assumption | apply Rge_le; assumption ].",
            "VernacExtend",
            "251540e449d762c3cd90184d9a8c4127801d5e40"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_neg_pos_le_1 : forall x y:R, - y <= x -> x <= y -> 0 <= y -> Rsqr x <= Rsqr y.",
            "VernacStartTheoremProof",
            "5ce0e1127139fecce67ea7dd763f44cb08858661"
        ],
        [
            "intros x y H H0 H1; destruct (Rcase_abs x) as [Hlt|Hle].",
            "VernacExtend",
            "e44439f1d1b142d1ccf83edb49651debfd9464f0"
        ],
        [
            "apply Ropp_lt_gt_contravar, Rlt_le in Hlt; rewrite Ropp_0 in Hlt; apply Ropp_le_ge_contravar, Rge_le in H; rewrite Ropp_involutive in H; rewrite (Rsqr_neg x); apply Rsqr_incr_1; assumption.",
            "VernacExtend",
            "7fda571c76bf768781df6fc67402894a42fe2802"
        ],
        [
            "apply Rge_le in Hle; apply Rsqr_incr_1; assumption.",
            "VernacExtend",
            "a24e85914d88d6939df10079d00c43614b74db01"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neg_pos_Rsqr_le : forall x y:R, - y <= x -> x <= y -> Rsqr x <= Rsqr y.",
            "VernacStartTheoremProof",
            "ad9101b23b94dbb8012cfce0cae3de45c332b87b"
        ],
        [
            "intros x y H H0; destruct (Rcase_abs x) as [Hlt|Hle].",
            "VernacExtend",
            "e6e9d36b782cfb3bb6fb9344fee4a2464cc93431"
        ],
        [
            "apply Ropp_lt_gt_contravar, Rlt_le in Hlt; rewrite Ropp_0 in Hlt; apply Ropp_le_ge_contravar, Rge_le in H; rewrite Ropp_involutive in H.",
            "VernacExtend",
            "be75f4886de8a886e9c02d05cdc899b7d3523a83"
        ],
        [
            "assert (0 <= y) by (apply Rle_trans with (-x); assumption).",
            "VernacExtend",
            "57b33673e6df297872e3248f04aa0a7aabcfec6b"
        ],
        [
            "rewrite (Rsqr_neg x); apply Rsqr_incr_1; assumption.",
            "VernacExtend",
            "5c6210112cd82ab3d2a3bf57fb181cd41e73b4c1"
        ],
        [
            "apply Rge_le in Hle; assert (0 <= y) by (apply Rle_trans with x; assumption).",
            "VernacExtend",
            "08e1b05d484e32d8bc0177bf79973a254261061b"
        ],
        [
            "apply Rsqr_incr_1; assumption.",
            "VernacExtend",
            "25146cd617428c4f32171770329b8a270d110426"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_abs : forall x:R, Rsqr x = Rsqr (Rabs x).",
            "VernacStartTheoremProof",
            "89eecb4ea8be538d47282dc4d6215dd1f6027708"
        ],
        [
            "intro; unfold Rabs; case (Rcase_abs x); intro; [ apply Rsqr_neg | reflexivity ].",
            "VernacExtend",
            "f4cecc88fb14116346d270b817ecf51fbc8b071e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_le_abs_0 : forall x y:R, Rsqr x <= Rsqr y -> Rabs x <= Rabs y.",
            "VernacStartTheoremProof",
            "8414991776fcc1cd8828b393218221913bc866d3"
        ],
        [
            "intros; apply Rsqr_incr_0; repeat rewrite <- Rsqr_abs; [ assumption | apply Rabs_pos | apply Rabs_pos ].",
            "VernacExtend",
            "1e29b863166dc7cdc7e98a6676888651750c1ea5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_le_abs_1 : forall x y:R, Rabs x <= Rabs y -> Rsqr x <= Rsqr y.",
            "VernacStartTheoremProof",
            "64fb72d8632fd1a2a6d61e7d5458e7fb853eeab7"
        ],
        [
            "intros; rewrite (Rsqr_abs x); rewrite (Rsqr_abs y); apply (Rsqr_incr_1 (Rabs x) (Rabs y) H (Rabs_pos x) (Rabs_pos y)).",
            "VernacExtend",
            "2bf9da7558954bf6f0838329cccc9dd0353b813c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_lt_abs_0 : forall x y:R, Rsqr x < Rsqr y -> Rabs x < Rabs y.",
            "VernacStartTheoremProof",
            "8bb9db94380d4143c81a1a23e79c6873a0c7d9bf"
        ],
        [
            "intros; apply Rsqr_incrst_0; repeat rewrite <- Rsqr_abs; [ assumption | apply Rabs_pos | apply Rabs_pos ].",
            "VernacExtend",
            "c5490cb7a12973d04a114551404ab2928421deb9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_lt_abs_1 : forall x y:R, Rabs x < Rabs y -> Rsqr x < Rsqr y.",
            "VernacStartTheoremProof",
            "ec18949059f90533c5c804791ccc9ebfb9c72edb"
        ],
        [
            "intros; rewrite (Rsqr_abs x); rewrite (Rsqr_abs y); apply (Rsqr_incrst_1 (Rabs x) (Rabs y) H (Rabs_pos x) (Rabs_pos y)).",
            "VernacExtend",
            "5dc849d646420e7c06c8046db1a4c4040030ca7f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_inj : forall x y:R, 0 <= x -> 0 <= y -> Rsqr x = Rsqr y -> x = y.",
            "VernacStartTheoremProof",
            "5c1b20d5412038e8af13b7c99a9beb33b5708a12"
        ],
        [
            "intros; generalize (Rle_le_eq (Rsqr x) (Rsqr y)); intro; elim H2; intros _ H3; generalize (H3 H1); intro; elim H4; intros; apply Rle_antisym; apply Rsqr_incr_0; assumption.",
            "VernacExtend",
            "f8f0c2cf332fb262db37ef371e9e38cb3c52c3a9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_eq_abs_0 : forall x y:R, Rsqr x = Rsqr y -> Rabs x = Rabs y.",
            "VernacStartTheoremProof",
            "bbb62d4fe52c33e0f3120415da365369c4f84802"
        ],
        [
            "intros; unfold Rabs; case (Rcase_abs x) as [Hltx|Hgex]; case (Rcase_abs y) as [Hlty|Hgey].",
            "VernacExtend",
            "f3e1bc2b8ff9cd7b61853cf116d1330da1a32bbe"
        ],
        [
            "rewrite (Rsqr_neg x), (Rsqr_neg y) in H; generalize (Ropp_lt_gt_contravar y 0 Hlty); generalize (Ropp_lt_gt_contravar x 0 Hltx); rewrite Ropp_0; intros; generalize (Rlt_le 0 (- x) H0); generalize (Rlt_le 0 (- y) H1); intros; apply Rsqr_inj; assumption.",
            "VernacExtend",
            "5b96602f96b3cc060402538be7a7756f4c991d3d"
        ],
        [
            "rewrite (Rsqr_neg x) in H; generalize (Rge_le y 0 Hgey); intro; generalize (Ropp_lt_gt_contravar x 0 Hltx); rewrite Ropp_0; intro; generalize (Rlt_le 0 (- x) H1); intro; apply Rsqr_inj; assumption.",
            "VernacExtend",
            "ac55f5e4d2a25552791a5eb4a26459aa2e7ca71e"
        ],
        [
            "rewrite (Rsqr_neg y) in H; generalize (Rge_le x 0 Hgex); intro; generalize (Ropp_lt_gt_contravar y 0 Hlty); rewrite Ropp_0; intro; generalize (Rlt_le 0 (- y) H1); intro; apply Rsqr_inj; assumption.",
            "VernacExtend",
            "9d23a686de398f345556cc104f57f8d05d45d4e4"
        ],
        [
            "apply Rsqr_inj; auto using Rge_le.",
            "VernacExtend",
            "fc6ca4bbbd494dcfefd49a126490b85e813d67ed"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_eq_asb_1 : forall x y:R, Rabs x = Rabs y -> Rsqr x = Rsqr y.",
            "VernacStartTheoremProof",
            "987f1ed29edb39f283eba9dd43e3c03ebf2a0b10"
        ],
        [
            "intros; cut (Rsqr (Rabs x) = Rsqr (Rabs y)).",
            "VernacExtend",
            "6afcfef5a4d5735284245fcd504feadc22724271"
        ],
        [
            "intro; repeat rewrite <- Rsqr_abs in H0; assumption.",
            "VernacExtend",
            "3cecb18702f245be9db3a6bc8a901a9262f1f14a"
        ],
        [
            "rewrite H; reflexivity.",
            "VernacExtend",
            "1eef9b63d851b99cfa44117acf0ddd958095123d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma triangle_rectangle : forall x y z:R, 0 <= z -> Rsqr x + Rsqr y <= Rsqr z -> - z <= x <= z /\\ - z <= y <= z.",
            "VernacStartTheoremProof",
            "0194e64c8245e75316d6293aec543354f66f8e39"
        ],
        [
            "intros; generalize (plus_le_is_le (Rsqr x) (Rsqr y) (Rsqr z) (Rle_0_sqr y) H0); rewrite Rplus_comm in H0; generalize (plus_le_is_le (Rsqr y) (Rsqr x) (Rsqr z) (Rle_0_sqr x) H0); intros; split; [ split; [ apply Rsqr_neg_pos_le_0; assumption | apply Rsqr_incr_0_var; assumption ] | split; [ apply Rsqr_neg_pos_le_0; assumption | apply Rsqr_incr_0_var; assumption ] ].",
            "VernacExtend",
            "05840cda3b13fa6d036376649f3d782599b113d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma triangle_rectangle_lt : forall x y z:R, Rsqr x + Rsqr y < Rsqr z -> Rabs x < Rabs z /\\ Rabs y < Rabs z.",
            "VernacStartTheoremProof",
            "36d86ccf7bad96523307bf6508da2dbf8f5cc193"
        ],
        [
            "intros; split; [ generalize (plus_lt_is_lt (Rsqr x) (Rsqr y) (Rsqr z) (Rle_0_sqr y) H); intro; apply Rsqr_lt_abs_0; assumption | rewrite Rplus_comm in H; generalize (plus_lt_is_lt (Rsqr y) (Rsqr x) (Rsqr z) (Rle_0_sqr x) H); intro; apply Rsqr_lt_abs_0; assumption ].",
            "VernacExtend",
            "a34a4b7f4173ab2bfe58b74d034db21db7c9076f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma triangle_rectangle_le : forall x y z:R, Rsqr x + Rsqr y <= Rsqr z -> Rabs x <= Rabs z /\\ Rabs y <= Rabs z.",
            "VernacStartTheoremProof",
            "3acdeed014548d11864b90f49fde455bc6c655c7"
        ],
        [
            "intros; split; [ generalize (plus_le_is_le (Rsqr x) (Rsqr y) (Rsqr z) (Rle_0_sqr y) H); intro; apply Rsqr_le_abs_0; assumption | rewrite Rplus_comm in H; generalize (plus_le_is_le (Rsqr y) (Rsqr x) (Rsqr z) (Rle_0_sqr x) H); intro; apply Rsqr_le_abs_0; assumption ].",
            "VernacExtend",
            "3e46737a5d5640dd0c77fd7f598c8ad1b2912119"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_inv : forall x:R, x <> 0 -> Rsqr (/ x) = / Rsqr x.",
            "VernacStartTheoremProof",
            "51e67d9d436274c2456f40565a0f7dbcdcfc7ab5"
        ],
        [
            "intros; unfold Rsqr.",
            "VernacExtend",
            "1f016dbc739cb08cf3fa0774d11b6cc4dd4097ea"
        ],
        [
            "rewrite Rinv_mult_distr; try reflexivity || assumption.",
            "VernacExtend",
            "c3859e1202ab4b171d5096c6effd73950b93a000"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma canonical_Rsqr : forall (a:nonzeroreal) (b c x:R), a * Rsqr x + b * x + c = a * Rsqr (x + b / (2 * a)) + (4 * a * c - Rsqr b) / (4 * a).",
            "VernacStartTheoremProof",
            "c977fa4ba89acd4007d962d7797f1839e1a2b991"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Rsqr.",
            "VernacExtend",
            "ee8c595e99ab49bf64a7e1aaaa8933ba6a0b0354"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "apply a.",
            "VernacExtend",
            "efcb795685660eed264bd6d68e41b35603ede4a5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqr_eq : forall x y:R, Rsqr x = Rsqr y -> x = y \\/ x = - y.",
            "VernacStartTheoremProof",
            "cad9607980b9541cf0d8e4c49cb45377e12bfd98"
        ],
        [
            "intros; unfold Rsqr in H; generalize (Rplus_eq_compat_l (- (y * y)) (x * x) (y * y) H); rewrite Rplus_opp_l; replace (- (y * y) + x * x) with ((x - y) * (x + y)).",
            "VernacExtend",
            "9e13067a9dc24ec9dbefd75bce505259e1ff2a57"
        ],
        [
            "intro; generalize (Rmult_integral (x - y) (x + y) H0); intro; elim H1; intros.",
            "VernacExtend",
            "aa355a13e71903eac4f94423baccd0a2c6ef846a"
        ],
        [
            "left; apply Rminus_diag_uniq; assumption.",
            "VernacExtend",
            "81accd633bc839a9c8c1b6f7137809fe01ccf5cf"
        ],
        [
            "right; apply Rminus_diag_uniq; unfold Rminus; rewrite Ropp_involutive; assumption.",
            "VernacExtend",
            "9ba34a8071324b23018fe7a4c2df0d363b96a717"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Rsqr_neg",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "intros; ring_Rsqr.",
                        "VernacExtend",
                        "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_mult",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros; ring_Rsqr.",
                        "VernacExtend",
                        "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_plus",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros; ring_Rsqr.",
                        "VernacExtend",
                        "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_minus",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros; ring_Rsqr.",
                        "VernacExtend",
                        "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_neg_minus",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros; ring_Rsqr.",
                        "VernacExtend",
                        "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_1",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "ring_Rsqr.",
                        "VernacExtend",
                        "0e9acc62ae3bad0971e29cfc72376e2b7652a3a9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_gt_0_0",
            "line_nb": 22,
            "steps": [
                {
                    "command": [
                        "intros; red; intro; rewrite H0 in H; rewrite Rsqr_0 in H; elim (Rlt_irrefl 0 H).",
                        "VernacExtend",
                        "9b69e5702d73eebdfebbb9a04384eb89196a1e6d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_pos_lt",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros; case (Rtotal_order 0 x); intro; [ unfold Rsqr; apply Rmult_lt_0_compat; assumption | elim H0; intro; [ elim H; symmetry ; exact H1 | rewrite Rsqr_neg; generalize (Ropp_lt_gt_contravar x 0 H1); rewrite Ropp_0; intro; unfold Rsqr; apply Rmult_lt_0_compat; assumption ] ].",
                        "VernacExtend",
                        "55b9b16f8ee3410374065e59785e7b472c9c671a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_div",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "intros; unfold Rsqr.",
                        "VernacExtend",
                        "1f016dbc739cb08cf3fa0774d11b6cc4dd4097ea"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "55666fd2776d160fb1bfd9d38a2833e66927f366"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rmult_assoc.",
                        "VernacExtend",
                        "9a62b3359051e53192153e7bfe542316dbd712a8"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_compat_l.",
                        "VernacExtend",
                        "bd73500ca5d8c6a128502627eccd82ae7c925a31"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm.",
                        "VernacExtend",
                        "fd520335d31c715c2f686e2bdc0b380c493b04c0"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rmult_assoc.",
                        "VernacExtend",
                        "9a62b3359051e53192153e7bfe542316dbd712a8"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_compat_l.",
                        "VernacExtend",
                        "bd73500ca5d8c6a128502627eccd82ae7c925a31"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_eq_0",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "unfold Rsqr; intros; generalize (Rmult_integral x x H); intro; elim H0; intro; assumption.",
                        "VernacExtend",
                        "990a988f46324040cef785e0548756aeeb723468"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_minus_plus",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros; ring_Rsqr.",
                        "VernacExtend",
                        "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_plus_minus",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros; ring_Rsqr.",
                        "VernacExtend",
                        "c8d5250d0f59dba0df46b4f9f3d0041ebba37229"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_incr_0",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Rle_dec x y) as [Hle|Hnle]; [ assumption | cut (y < x); [ intro; unfold Rsqr in H; generalize (Rmult_le_0_lt_compat y x y x H1 H1 H2 H2); intro; generalize (Rle_lt_trans (x * x) (y * y) (x * x) H H3); intro; elim (Rlt_irrefl (x * x) H4) | auto with real ] ].",
                        "VernacExtend",
                        "1fe4b072f49a4ef5cd3427c8a884267cefd8c173"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_incr_0_var",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Rle_dec x y) as [Hle|Hnle]; [ assumption | cut (y < x); [ intro; unfold Rsqr in H; generalize (Rmult_le_0_lt_compat y x y x H0 H0 H1 H1); intro; generalize (Rle_lt_trans (x * x) (y * y) (x * x) H H2); intro; elim (Rlt_irrefl (x * x) H3) | auto with real ] ].",
                        "VernacExtend",
                        "cb69264c69fe002297d49f86137a8260c4c59f89"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_incr_1",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "intros; unfold Rsqr; apply Rmult_le_compat; assumption.",
                        "VernacExtend",
                        "27137d060e32b667d19f477b0aebfcb12e5d56de"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_incrst_0",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "intros; case (Rtotal_order x y); intro; [ assumption | elim H2; intro; [ rewrite H3 in H; elim (Rlt_irrefl (Rsqr y) H) | generalize (Rmult_le_0_lt_compat y x y x H1 H1 H3 H3); intro; unfold Rsqr in H; generalize (Rlt_trans (x * x) (y * y) (x * x) H H4); intro; elim (Rlt_irrefl (x * x) H5) ] ].",
                        "VernacExtend",
                        "8d8e46f613508927fb4763fb45bee53249c68f65"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_incrst_1",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros; unfold Rsqr; apply Rmult_le_0_lt_compat; assumption.",
                        "VernacExtend",
                        "8ed5da94bcd36467eafccf3ce89f8c9816bdcd5a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_neg_pos_le_0",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Rcase_abs x) as [Hlt|Hle].",
                        "VernacExtend",
                        "d376deb038704350a3a057073cd4992b9538b45b"
                    ]
                },
                {
                    "command": [
                        "generalize (Ropp_lt_gt_contravar x 0 Hlt); rewrite Ropp_0; intro; generalize (Rlt_le 0 (- x) H1); intro; rewrite (Rsqr_neg x) in H; generalize (Rsqr_incr_0 (- x) y H H2 H0); intro; rewrite <- (Ropp_involutive x); apply Ropp_ge_le_contravar; apply Rle_ge; assumption.",
                        "VernacExtend",
                        "1a6ca1b148e910c00192ab69f46c1d46ded3780a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with 0; [ rewrite <- Ropp_0; apply Ropp_ge_le_contravar; apply Rle_ge; assumption | apply Rge_le; assumption ].",
                        "VernacExtend",
                        "251540e449d762c3cd90184d9a8c4127801d5e40"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_neg_pos_le_1",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "intros x y H H0 H1; destruct (Rcase_abs x) as [Hlt|Hle].",
                        "VernacExtend",
                        "e44439f1d1b142d1ccf83edb49651debfd9464f0"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_gt_contravar, Rlt_le in Hlt; rewrite Ropp_0 in Hlt; apply Ropp_le_ge_contravar, Rge_le in H; rewrite Ropp_involutive in H; rewrite (Rsqr_neg x); apply Rsqr_incr_1; assumption.",
                        "VernacExtend",
                        "7fda571c76bf768781df6fc67402894a42fe2802"
                    ]
                },
                {
                    "command": [
                        "apply Rge_le in Hle; apply Rsqr_incr_1; assumption.",
                        "VernacExtend",
                        "a24e85914d88d6939df10079d00c43614b74db01"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neg_pos_Rsqr_le",
            "line_nb": 75,
            "steps": [
                {
                    "command": [
                        "intros x y H H0; destruct (Rcase_abs x) as [Hlt|Hle].",
                        "VernacExtend",
                        "e6e9d36b782cfb3bb6fb9344fee4a2464cc93431"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_gt_contravar, Rlt_le in Hlt; rewrite Ropp_0 in Hlt; apply Ropp_le_ge_contravar, Rge_le in H; rewrite Ropp_involutive in H.",
                        "VernacExtend",
                        "be75f4886de8a886e9c02d05cdc899b7d3523a83"
                    ]
                },
                {
                    "command": [
                        "assert (0 <= y) by (apply Rle_trans with (-x); assumption).",
                        "VernacExtend",
                        "57b33673e6df297872e3248f04aa0a7aabcfec6b"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rsqr_neg x); apply Rsqr_incr_1; assumption.",
                        "VernacExtend",
                        "5c6210112cd82ab3d2a3bf57fb181cd41e73b4c1"
                    ]
                },
                {
                    "command": [
                        "apply Rge_le in Hle; assert (0 <= y) by (apply Rle_trans with x; assumption).",
                        "VernacExtend",
                        "08e1b05d484e32d8bc0177bf79973a254261061b"
                    ]
                },
                {
                    "command": [
                        "apply Rsqr_incr_1; assumption.",
                        "VernacExtend",
                        "25146cd617428c4f32171770329b8a270d110426"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_abs",
            "line_nb": 83,
            "steps": [
                {
                    "command": [
                        "intro; unfold Rabs; case (Rcase_abs x); intro; [ apply Rsqr_neg | reflexivity ].",
                        "VernacExtend",
                        "f4cecc88fb14116346d270b817ecf51fbc8b071e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_le_abs_0",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "intros; apply Rsqr_incr_0; repeat rewrite <- Rsqr_abs; [ assumption | apply Rabs_pos | apply Rabs_pos ].",
                        "VernacExtend",
                        "1e29b863166dc7cdc7e98a6676888651750c1ea5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_le_abs_1",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "intros; rewrite (Rsqr_abs x); rewrite (Rsqr_abs y); apply (Rsqr_incr_1 (Rabs x) (Rabs y) H (Rabs_pos x) (Rabs_pos y)).",
                        "VernacExtend",
                        "2bf9da7558954bf6f0838329cccc9dd0353b813c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_lt_abs_0",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "intros; apply Rsqr_incrst_0; repeat rewrite <- Rsqr_abs; [ assumption | apply Rabs_pos | apply Rabs_pos ].",
                        "VernacExtend",
                        "c5490cb7a12973d04a114551404ab2928421deb9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_lt_abs_1",
            "line_nb": 95,
            "steps": [
                {
                    "command": [
                        "intros; rewrite (Rsqr_abs x); rewrite (Rsqr_abs y); apply (Rsqr_incrst_1 (Rabs x) (Rabs y) H (Rabs_pos x) (Rabs_pos y)).",
                        "VernacExtend",
                        "5dc849d646420e7c06c8046db1a4c4040030ca7f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_inj",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Rle_le_eq (Rsqr x) (Rsqr y)); intro; elim H2; intros _ H3; generalize (H3 H1); intro; elim H4; intros; apply Rle_antisym; apply Rsqr_incr_0; assumption.",
                        "VernacExtend",
                        "f8f0c2cf332fb262db37ef371e9e38cb3c52c3a9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_eq_abs_0",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "intros; unfold Rabs; case (Rcase_abs x) as [Hltx|Hgex]; case (Rcase_abs y) as [Hlty|Hgey].",
                        "VernacExtend",
                        "f3e1bc2b8ff9cd7b61853cf116d1330da1a32bbe"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rsqr_neg x), (Rsqr_neg y) in H; generalize (Ropp_lt_gt_contravar y 0 Hlty); generalize (Ropp_lt_gt_contravar x 0 Hltx); rewrite Ropp_0; intros; generalize (Rlt_le 0 (- x) H0); generalize (Rlt_le 0 (- y) H1); intros; apply Rsqr_inj; assumption.",
                        "VernacExtend",
                        "5b96602f96b3cc060402538be7a7756f4c991d3d"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rsqr_neg x) in H; generalize (Rge_le y 0 Hgey); intro; generalize (Ropp_lt_gt_contravar x 0 Hltx); rewrite Ropp_0; intro; generalize (Rlt_le 0 (- x) H1); intro; apply Rsqr_inj; assumption.",
                        "VernacExtend",
                        "ac55f5e4d2a25552791a5eb4a26459aa2e7ca71e"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rsqr_neg y) in H; generalize (Rge_le x 0 Hgex); intro; generalize (Ropp_lt_gt_contravar y 0 Hlty); rewrite Ropp_0; intro; generalize (Rlt_le 0 (- y) H1); intro; apply Rsqr_inj; assumption.",
                        "VernacExtend",
                        "9d23a686de398f345556cc104f57f8d05d45d4e4"
                    ]
                },
                {
                    "command": [
                        "apply Rsqr_inj; auto using Rge_le.",
                        "VernacExtend",
                        "fc6ca4bbbd494dcfefd49a126490b85e813d67ed"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_eq_asb_1",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "intros; cut (Rsqr (Rabs x) = Rsqr (Rabs y)).",
                        "VernacExtend",
                        "6afcfef5a4d5735284245fcd504feadc22724271"
                    ]
                },
                {
                    "command": [
                        "intro; repeat rewrite <- Rsqr_abs in H0; assumption.",
                        "VernacExtend",
                        "3cecb18702f245be9db3a6bc8a901a9262f1f14a"
                    ]
                },
                {
                    "command": [
                        "rewrite H; reflexivity.",
                        "VernacExtend",
                        "1eef9b63d851b99cfa44117acf0ddd958095123d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "triangle_rectangle",
            "line_nb": 113,
            "steps": [
                {
                    "command": [
                        "intros; generalize (plus_le_is_le (Rsqr x) (Rsqr y) (Rsqr z) (Rle_0_sqr y) H0); rewrite Rplus_comm in H0; generalize (plus_le_is_le (Rsqr y) (Rsqr x) (Rsqr z) (Rle_0_sqr x) H0); intros; split; [ split; [ apply Rsqr_neg_pos_le_0; assumption | apply Rsqr_incr_0_var; assumption ] | split; [ apply Rsqr_neg_pos_le_0; assumption | apply Rsqr_incr_0_var; assumption ] ].",
                        "VernacExtend",
                        "05840cda3b13fa6d036376649f3d782599b113d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "triangle_rectangle_lt",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "intros; split; [ generalize (plus_lt_is_lt (Rsqr x) (Rsqr y) (Rsqr z) (Rle_0_sqr y) H); intro; apply Rsqr_lt_abs_0; assumption | rewrite Rplus_comm in H; generalize (plus_lt_is_lt (Rsqr y) (Rsqr x) (Rsqr z) (Rle_0_sqr x) H); intro; apply Rsqr_lt_abs_0; assumption ].",
                        "VernacExtend",
                        "a34a4b7f4173ab2bfe58b74d034db21db7c9076f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "triangle_rectangle_le",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "intros; split; [ generalize (plus_le_is_le (Rsqr x) (Rsqr y) (Rsqr z) (Rle_0_sqr y) H); intro; apply Rsqr_le_abs_0; assumption | rewrite Rplus_comm in H; generalize (plus_le_is_le (Rsqr y) (Rsqr x) (Rsqr z) (Rle_0_sqr x) H); intro; apply Rsqr_le_abs_0; assumption ].",
                        "VernacExtend",
                        "3e46737a5d5640dd0c77fd7f598c8ad1b2912119"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_inv",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "intros; unfold Rsqr.",
                        "VernacExtend",
                        "1f016dbc739cb08cf3fa0774d11b6cc4dd4097ea"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; try reflexivity || assumption.",
                        "VernacExtend",
                        "c3859e1202ab4b171d5096c6effd73950b93a000"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "canonical_Rsqr",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Rsqr.",
                        "VernacExtend",
                        "ee8c595e99ab49bf64a7e1aaaa8933ba6a0b0354"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "apply a.",
                        "VernacExtend",
                        "efcb795685660eed264bd6d68e41b35603ede4a5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqr_eq",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "intros; unfold Rsqr in H; generalize (Rplus_eq_compat_l (- (y * y)) (x * x) (y * y) H); rewrite Rplus_opp_l; replace (- (y * y) + x * x) with ((x - y) * (x + y)).",
                        "VernacExtend",
                        "9e13067a9dc24ec9dbefd75bce505259e1ff2a57"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (Rmult_integral (x - y) (x + y) H0); intro; elim H1; intros.",
                        "VernacExtend",
                        "aa355a13e71903eac4f94423baccd0a2c6ef846a"
                    ]
                },
                {
                    "command": [
                        "left; apply Rminus_diag_uniq; assumption.",
                        "VernacExtend",
                        "81accd633bc839a9c8c1b6f7137809fe01ccf5cf"
                    ]
                },
                {
                    "command": [
                        "right; apply Rminus_diag_uniq; unfold Rminus; rewrite Ropp_involutive; assumption.",
                        "VernacExtend",
                        "9ba34a8071324b23018fe7a4c2df0d363b96a717"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}