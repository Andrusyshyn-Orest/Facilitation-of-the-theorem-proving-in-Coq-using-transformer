{
    "filename": "theories/Reals/Rpower.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import SeqSeries.",
            "VernacRequire",
            "379ec54d32465fe6d151cce8474fb7ff733028bb"
        ],
        [
            "Require Import Rtrigo1.",
            "VernacRequire",
            "598baa2d58df0ffe31096944ae833778167e93eb"
        ],
        [
            "Require Import Ranalysis1.",
            "VernacRequire",
            "b7df6cdb101f6571d1192419ca4168ab43a628dd"
        ],
        [
            "Require Import Exp_prop.",
            "VernacRequire",
            "dc465af489a099685764a03cd163168488bb2383"
        ],
        [
            "Require Import Rsqrt_def.",
            "VernacRequire",
            "28c3be7cfff2bf04fe4d6c4d3b3b78af95c5424a"
        ],
        [
            "Require Import R_sqrt.",
            "VernacRequire",
            "60858f242c91cc9f5b63e2d3ded98977489b805d"
        ],
        [
            "Require Import Sqrt_reg.",
            "VernacRequire",
            "af9056f93e13e5ea46148777b5c2a5cd517922c7"
        ],
        [
            "Require Import MVT.",
            "VernacRequire",
            "73bac10bab2a56b9f15ce01267ed6660a5edd073"
        ],
        [
            "Require Import Ranalysis4.",
            "VernacRequire",
            "ecab92992e634f50a170f17c753f16606b0f682a"
        ],
        [
            "Require Import Lra.",
            "VernacRequire",
            "6dd90563c90485cd5a8a8b957af14c96d3b4cbc1"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Lemma P_Rmin : forall (P:R -> Prop) (x y:R), P x -> P y -> P (Rmin x y).",
            "VernacStartTheoremProof",
            "fa5612da30698ec8a6ac811c7f69f9e8baef6eca"
        ],
        [
            "intros P x y H1 H2; unfold Rmin; case (Rle_dec x y); intro; assumption.",
            "VernacExtend",
            "7af52172f2a13e40c5e861d163ca4a4cfdab9ce5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exp_le_3 : exp 1 <= 3.",
            "VernacStartTheoremProof",
            "729a6dbfc6cf45255550465c683566edcecf874e"
        ],
        [
            "assert (exp_1 : exp 1 <> 0).",
            "VernacExtend",
            "8c091d15e59312b287d431a87d0e475be090c029"
        ],
        [
            "assert (H0 := exp_pos 1); red; intro; rewrite H in H0; elim (Rlt_irrefl _ H0).",
            "VernacExtend",
            "8bf7bc5ad5daeae2bdd89e21240d07e024b1532b"
        ],
        [
            "apply Rmult_le_reg_l with (/ exp 1).",
            "VernacExtend",
            "56deef6539b3f7d09a79c7d98ac1a4f66d899e2e"
        ],
        [
            "apply Rinv_0_lt_compat; apply exp_pos.",
            "VernacExtend",
            "280ba9bdb9359979ee3025bf636453df3add9203"
        ],
        [
            "rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "6dcb59ca5b85038cc8fddd44b4afdcbe28fba0ba"
        ],
        [
            "apply Rmult_le_reg_l with (/ 3).",
            "VernacExtend",
            "1ede6e26760917261771a58bbf65b07b1742214a"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "ee74bd033c1031a79ef440e1d41037d5c9648214"
        ],
        [
            "rewrite Rmult_1_r; rewrite <- (Rmult_comm 3); rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "0afd839e5e7fc4e3bfcae9158996730c4ebef931"
        ],
        [
            "rewrite Rmult_1_l; replace (/ exp 1) with (exp (-1)).",
            "VernacExtend",
            "b3f1bb05fc8add5003525ac34b3a1251a5052c2f"
        ],
        [
            "unfold exp; case (exist_exp (-1)) as (?,e); simpl in |- *; unfold exp_in in e; assert (H := alternated_series_ineq (fun i:nat => / INR (fact i)) x 1).",
            "VernacExtend",
            "3dd30b9eb670119dc3a2fbf2e13c326f058c7919"
        ],
        [
            "cut (sum_f_R0 (tg_alt (fun i:nat => / INR (fact i))) (S (2 * 1)) <= x <= sum_f_R0 (tg_alt (fun i:nat => / INR (fact i))) (2 * 1)).",
            "VernacExtend",
            "2c721d3c1c6aac0108006b38e8559a8b3a977477"
        ],
        [
            "intro; elim H0; clear H0; intros H0 _; simpl in H0; unfold tg_alt in H0; simpl in H0.",
            "VernacExtend",
            "0646d6d22e53d96a7605f76ebbed49fd90753edc"
        ],
        [
            "replace (/ 3) with (1 * / 1 + -1 * 1 * / 1 + -1 * (-1 * 1) * / 2 + -1 * (-1 * (-1 * 1)) * / (2 + 1 + 1 + 1 + 1)) by field.",
            "VernacExtend",
            "a4b64ec174951300140889bdb96ad663db6aa8dd"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "unfold Un_decreasing; intros; apply Rmult_le_reg_l with (INR (fact n)).",
            "VernacExtend",
            "ae896b9a80ee4784c39902e04c942bba9510ebac"
        ],
        [
            "apply INR_fact_lt_0.",
            "VernacExtend",
            "3f8251d5a5503bb665832e6a37692a2bc449430d"
        ],
        [
            "apply Rmult_le_reg_l with (INR (fact (S n))).",
            "VernacExtend",
            "1bef0754fb29201583f19dc8196bec13cef8b0dc"
        ],
        [
            "apply INR_fact_lt_0.",
            "VernacExtend",
            "3f8251d5a5503bb665832e6a37692a2bc449430d"
        ],
        [
            "rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "2ca74255a63c294f9442d956f32a2e3784636efb"
        ],
        [
            "rewrite Rmult_1_r; rewrite Rmult_comm; rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "85fd96d3c33499db8957e5cd7a4219083c6e9bd9"
        ],
        [
            "rewrite Rmult_1_r; apply le_INR; apply fact_le; apply le_n_Sn.",
            "VernacExtend",
            "a80d39a5f26a10417515e69be409c83758499723"
        ],
        [
            "apply INR_fact_neq_0.",
            "VernacExtend",
            "9f4443217b6f3c8f07648392448a37630452a203"
        ],
        [
            "apply INR_fact_neq_0.",
            "VernacExtend",
            "9f4443217b6f3c8f07648392448a37630452a203"
        ],
        [
            "assert (H0 := cv_speed_pow_fact 1); unfold Un_cv; unfold Un_cv in H0; intros; elim (H0 _ H1); intros; exists x0; intros; unfold R_dist in H2; unfold R_dist; replace (/ INR (fact n)) with (1 ^ n / INR (fact n)).",
            "VernacExtend",
            "b441fed067634dc5c7577d5fb6b1274a2f3c1368"
        ],
        [
            "apply (H2 _ H3).",
            "VernacExtend",
            "778907207a575c5ee439f41d2bf802bcb2573452"
        ],
        [
            "unfold Rdiv; rewrite pow1; rewrite Rmult_1_l; reflexivity.",
            "VernacExtend",
            "4463d349c19f82c3773c0d71146ab957544e8e8f"
        ],
        [
            "unfold infinite_sum in e; unfold Un_cv, tg_alt; intros; elim (e _ H0); intros; exists x0; intros; replace (sum_f_R0 (fun i:nat => (-1) ^ i * / INR (fact i)) n) with (sum_f_R0 (fun i:nat => / INR (fact i) * (-1) ^ i) n).",
            "VernacExtend",
            "63135d1dea8d1eaddeba4a664c8c73afc9604408"
        ],
        [
            "apply (H1 _ H2).",
            "VernacExtend",
            "b62ebed2b51d91f8e1b80571662113711aeb1ce2"
        ],
        [
            "apply sum_eq; intros; apply Rmult_comm.",
            "VernacExtend",
            "9a4c3da8cd66d70176d28c2d5fb1d1c1499a817e"
        ],
        [
            "apply Rmult_eq_reg_l with (exp 1).",
            "VernacExtend",
            "46dcb91f265e5647f1ea7f53d988195b90137604"
        ],
        [
            "rewrite <- exp_plus; rewrite Rplus_opp_r; rewrite exp_0; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "fc0e95a0b103ba3f1ebdef54a5a099347fa1a7e6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem exp_increasing : forall x y:R, x < y -> exp x < exp y.",
            "VernacStartTheoremProof",
            "f436bb763586fe4e1311cbfa28202e4f6bc4c8be"
        ],
        [
            "intros x y H.",
            "VernacExtend",
            "c7ef450aa0313460779fba50c0edf4486e0c7fe4"
        ],
        [
            "assert (H0 : derivable exp).",
            "VernacExtend",
            "2b1f814d04124b602ed35a2d31eed61379a618fc"
        ],
        [
            "apply derivable_exp.",
            "VernacExtend",
            "a547cefa11463a91ea5aba7e79870eb39c69a256"
        ],
        [
            "assert (H1 := positive_derivative _ H0).",
            "VernacExtend",
            "0b796eeb6d53ec1bfd99c1fcff9102b2a6c2135a"
        ],
        [
            "unfold strict_increasing in H1.",
            "VernacExtend",
            "c0ca2b933133328f56e89c24777543c51eb957c0"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "replace (derive_pt exp x0 (H0 x0)) with (exp x0).",
            "VernacExtend",
            "b251f95cf68603e191c0d1bc415c2dea7d6934d2"
        ],
        [
            "apply exp_pos.",
            "VernacExtend",
            "e7aede1d8dff8d25c884324d0860ea3be851262c"
        ],
        [
            "symmetry ; apply derive_pt_eq_0.",
            "VernacExtend",
            "12b6a7d2208f57bf3677a9d970d83b022d4f93fd"
        ],
        [
            "apply (derivable_pt_lim_exp x0).",
            "VernacExtend",
            "16b0d885b9a284eae5f842f530af36c216407715"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem exp_lt_inv : forall x y:R, exp x < exp y -> x < y.",
            "VernacStartTheoremProof",
            "bbb492dfb7a969faaee9215b220d960f7013b05e"
        ],
        [
            "intros x y H; case (Rtotal_order x y); [ intros H1 | intros [H1| H1] ].",
            "VernacExtend",
            "8905535f19ff8eb31ccfca276f7e7ede1868d7c9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H1 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "ce639789d65459f4cd7f751b803b78b31b4a7321"
        ],
        [
            "assert (H2 := exp_increasing _ _ H1).",
            "VernacExtend",
            "49ebaa319e92fdb4e5afc5b9774356e46175f9bd"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_trans _ _ _ H H2)).",
            "VernacExtend",
            "7c61cc9603e9942bb9d3a9800b1107a646eeb078"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exp_ineq1 : forall x:R, 0 < x -> 1 + x < exp x.",
            "VernacStartTheoremProof",
            "33c68a9e44922850b70b3c479e79ea96697c7b4c"
        ],
        [
            "intros; apply Rplus_lt_reg_l with (- exp 0); rewrite <- (Rplus_comm (exp x)); assert (H0 := MVT_cor1 exp 0 x derivable_exp H); elim H0; intros; elim H1; intros; unfold Rminus in H2; rewrite H2; rewrite Ropp_0; rewrite Rplus_0_r; replace (derive_pt exp x0 (derivable_exp x0)) with (exp x0).",
            "VernacExtend",
            "55333ad9ebf08ee1338baf29a0353819ec7b6d19"
        ],
        [
            "rewrite exp_0; rewrite <- Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_l; pattern x at 1; rewrite <- Rmult_1_r; rewrite (Rmult_comm (exp x0)); apply Rmult_lt_compat_l.",
            "VernacExtend",
            "758c32920edafae3a25400221268b2df4046faa5"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite <- exp_0; apply exp_increasing; elim H3; intros; assumption.",
            "VernacExtend",
            "f866770ffdc78049a757e60675c936c017e1fc49"
        ],
        [
            "symmetry ; apply derive_pt_eq_0; apply derivable_pt_lim_exp.",
            "VernacExtend",
            "e247639c39bde0dcdba22d7fdc717040f7e8d2b8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ln_exists1 : forall y:R, 1 <= y -> { z:R | y = exp z }.",
            "VernacStartTheoremProof",
            "0648959849d4199607b7812ddd4bf55728000fcc"
        ],
        [
            "intros; set (f := fun x:R => exp x - y).",
            "VernacExtend",
            "261259d8e26b27b9f88d16683060036600106890"
        ],
        [
            "assert (H0 : 0 < y) by (apply Rlt_le_trans with 1; auto with real).",
            "VernacExtend",
            "118fe75cd1a4f17060e1838c7cb326f209e43407"
        ],
        [
            "cut (f 0 <= 0); [intro H1|].",
            "VernacExtend",
            "9f66c8dc12fd5ddd3df82df0ca103b2ee027bdf9"
        ],
        [
            "cut (continuity f); [intro H2|].",
            "VernacExtend",
            "d69fada07b3dd39936081befa1df3c0dc9461ecf"
        ],
        [
            "cut (0 <= f y); [intro H3|].",
            "VernacExtend",
            "35f7c71d2afc9603022fa82782141dd26ca88f59"
        ],
        [
            "cut (f 0 * f y <= 0); [intro H4|].",
            "VernacExtend",
            "5f9e04ca562d993a53e918e5750239b46fe716ed"
        ],
        [
            "pose proof (IVT_cor f 0 y H2 (Rlt_le _ _ H0) H4) as (t,(_,H7)); exists t; unfold f in H7; apply Rminus_diag_uniq_sym; exact H7.",
            "VernacExtend",
            "bfb7f664a49f55d34c3742c7b4fb121670676c30"
        ],
        [
            "pattern 0 at 2; rewrite <- (Rmult_0_r (f y)); rewrite (Rmult_comm (f 0)); apply Rmult_le_compat_l; assumption.",
            "VernacExtend",
            "56847fdc3892ce9fe3e7074c7e38f5daa754d16d"
        ],
        [
            "unfold f; apply Rplus_le_reg_l with y; left; apply Rlt_trans with (1 + y).",
            "VernacExtend",
            "8653ac335bd3215ab887a4f2176adf9544933473"
        ],
        [
            "rewrite <- (Rplus_comm y); apply Rplus_lt_compat_l; apply Rlt_0_1.",
            "VernacExtend",
            "7d19f3454bf0e63bc4b626af6cd0031ce4deba60"
        ],
        [
            "replace (y + (exp y - y)) with (exp y); [ apply (exp_ineq1 y H0) | ring ].",
            "VernacExtend",
            "6350005e870e8989d8824a3630e011ed81c9cb84"
        ],
        [
            "unfold f; change (continuity (exp - fct_cte y)); apply continuity_minus; [ apply derivable_continuous; apply derivable_exp | apply derivable_continuous; apply derivable_const ].",
            "VernacExtend",
            "519706041ad3d6fd308aae9680396f220eaff4f9"
        ],
        [
            "unfold f; rewrite exp_0; apply Rplus_le_reg_l with y; rewrite Rplus_0_r; replace (y + (1 - y)) with 1; [ apply H | ring ].",
            "VernacExtend",
            "2424bde24e9ecadad3d98959e08145c612bb342f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ln_exists : forall y:R, 0 < y -> { z:R | y = exp z }.",
            "VernacStartTheoremProof",
            "ece9412a12095a3f0ec1b4b5d6707e067db1523d"
        ],
        [
            "intros; destruct (Rle_dec 1 y) as [Hle|Hnle].",
            "VernacExtend",
            "fd33ff4ac7c00d50711440c6285d19d3b0509c89"
        ],
        [
            "apply (ln_exists1 _ Hle).",
            "VernacExtend",
            "323288d02d564f47bfde08ba021483971b25b06a"
        ],
        [
            "assert (H0 : 1 <= / y).",
            "VernacExtend",
            "bcba876be9572053b176601123aaf364feda9a57"
        ],
        [
            "apply Rmult_le_reg_l with y.",
            "VernacExtend",
            "b8bf5ddf442969c27c7a879fc05194f5d88a294f"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "2ca74255a63c294f9442d956f32a2e3784636efb"
        ],
        [
            "rewrite Rmult_1_r; left; apply (Rnot_le_lt _ _ Hnle).",
            "VernacExtend",
            "d7e96308d551846b81ff11d6358ef68498aa1292"
        ],
        [
            "red; intro; rewrite H0 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "a3b8d79f0b022a5fb14cf5ffb39b90b81bade351"
        ],
        [
            "destruct (ln_exists1 _ H0) as (x,p); exists (- x); apply Rmult_eq_reg_l with (exp x / y).",
            "VernacExtend",
            "a3811ac3eff4b7aa692db9ba6c37d16cd39a5014"
        ],
        [
            "unfold Rdiv; rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "900fd0407b050267a745f708459d99196bbb8c6e"
        ],
        [
            "rewrite Rmult_1_r; rewrite <- (Rmult_comm (/ y)); rewrite Rmult_assoc; rewrite <- exp_plus; rewrite Rplus_opp_r; rewrite exp_0; rewrite Rmult_1_r; symmetry ; apply p.",
            "VernacExtend",
            "f9276cdec8b276bd3c231fa2a4ca8f0c6753c2d6"
        ],
        [
            "red; intro H3; rewrite H3 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "5efe63a0dd2e9a350830ed483f79b06591cda509"
        ],
        [
            "unfold Rdiv; apply prod_neq_R0.",
            "VernacExtend",
            "bae86043f3acfd4aeb1f77f1138e1172ace3c7fa"
        ],
        [
            "assert (H3 := exp_pos x); red; intro H4; rewrite H4 in H3; elim (Rlt_irrefl _ H3).",
            "VernacExtend",
            "f775ef2b5ad01c606267464b7663c0f88e7c27fb"
        ],
        [
            "apply Rinv_neq_0_compat; red; intro H3; rewrite H3 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "3290aed3b0ec1d7653e07739ee09b5a72338f238"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Rln (y:posreal) : R := let (a,_) := ln_exists (pos y) (cond_pos y) in a.",
            "VernacDefinition",
            "bd5ff063401a5869c07e2b5efd2cc7eeb5ee5934"
        ],
        [
            "Definition ln (x:R) : R := match Rlt_dec 0 x with | left a => Rln (mkposreal x a) | right a => 0 end.",
            "VernacDefinition",
            "072931f99bc9992b57be8f8c26eba0c6d3b2d50f"
        ],
        [
            "Lemma exp_ln : forall x:R, 0 < x -> exp (ln x) = x.",
            "VernacStartTheoremProof",
            "df712bd5ef38bf1980a32f1d83bf670a9dfd510d"
        ],
        [
            "intros; unfold ln; decide (Rlt_dec 0 x) with H.",
            "VernacExtend",
            "1c582e08c55a1eab9416c3c9219cbaf4cca26234"
        ],
        [
            "unfold Rln; case (ln_exists (mkposreal x H) (cond_pos (mkposreal x H))) as (?,Hex).",
            "VernacExtend",
            "42d6108843b85a45f4cb51f1637e9df81654b675"
        ],
        [
            "symmetry; apply Hex.",
            "VernacExtend",
            "0ec67e4b9d1665055b3252fc8ffaaf11975cb237"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem exp_inv : forall x y:R, exp x = exp y -> x = y.",
            "VernacStartTheoremProof",
            "7ead6bf99b5fb168518b2a134448c95f71ff6d7c"
        ],
        [
            "intros x y H; case (Rtotal_order x y); [ intros H1 | intros [H1| H1] ]; auto; assert (H2 := exp_increasing _ _ H1); rewrite H in H2; elim (Rlt_irrefl _ H2).",
            "VernacExtend",
            "07497f02078ba48ce256f17c7c88431ae13b774f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem exp_Ropp : forall x:R, exp (- x) = / exp x.",
            "VernacStartTheoremProof",
            "4ea81476c51c8750183adfc3fffbcc6674a04eed"
        ],
        [
            "intros x; assert (H : exp x <> 0).",
            "VernacExtend",
            "02500f50b7be30709a0cd90a0259bab24df139ee"
        ],
        [
            "assert (H := exp_pos x); red; intro; rewrite H0 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "fb2e5a084219d47be68a8fe7db51a6b57aab7eee"
        ],
        [
            "apply Rmult_eq_reg_l with (r := exp x).",
            "VernacExtend",
            "a736df2e3bb3fd174b0751a3c2014dd2716512de"
        ],
        [
            "rewrite <- exp_plus; rewrite Rplus_opp_r; rewrite exp_0.",
            "VernacExtend",
            "879cc06507e6f17a90eb636f333d83ed933cb817"
        ],
        [
            "apply Rinv_r_sym.",
            "VernacExtend",
            "1c8e4cc12ed17eb612dd91541aa8d37d81cbfbbd"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ln_increasing : forall x y:R, 0 < x -> x < y -> ln x < ln y.",
            "VernacStartTheoremProof",
            "901cb717c54801bd4f6a7233550671370e427f81"
        ],
        [
            "intros x y H H0; apply exp_lt_inv.",
            "VernacExtend",
            "8f74239ac66bcbe5ebe5fe02c111c2b69f8d78b7"
        ],
        [
            "repeat rewrite exp_ln.",
            "VernacExtend",
            "e7b2520b467063db95dd0195ee226c1649f4387c"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply Rlt_trans with x; assumption.",
            "VernacExtend",
            "b083e59fe6cabd1254edc4e61b928a804ddd5e37"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ln_exp : forall x:R, ln (exp x) = x.",
            "VernacStartTheoremProof",
            "4cac38f04c0be2b4b4b600f803535e81ee1c1ad9"
        ],
        [
            "intros x; apply exp_inv.",
            "VernacExtend",
            "6ea937da0c3799fc7afd45cfb7b3f908b6f40186"
        ],
        [
            "apply exp_ln.",
            "VernacExtend",
            "99794e26d4b566c0ba5df86982a4975b6dde0647"
        ],
        [
            "apply exp_pos.",
            "VernacExtend",
            "e7aede1d8dff8d25c884324d0860ea3be851262c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ln_1 : ln 1 = 0.",
            "VernacStartTheoremProof",
            "47fc16c9c580e5fd860dfee45500aca5599750a2"
        ],
        [
            "rewrite <- exp_0; rewrite ln_exp; reflexivity.",
            "VernacExtend",
            "492a46b525bb143d961572797b2fbc2af4cf3ba3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ln_lt_inv : forall x y:R, 0 < x -> 0 < y -> ln x < ln y -> x < y.",
            "VernacStartTheoremProof",
            "a5047bb123427f279cb0b8d30c0f73829d074171"
        ],
        [
            "intros x y H H0 H1; rewrite <- (exp_ln x); try rewrite <- (exp_ln y).",
            "VernacExtend",
            "1e09478c406c5011c71ecba977db0f0058307374"
        ],
        [
            "apply exp_increasing; apply H1.",
            "VernacExtend",
            "40a6274685006d3814df02ff592233cb6e0b06a3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ln_inv : forall x y:R, 0 < x -> 0 < y -> ln x = ln y -> x = y.",
            "VernacStartTheoremProof",
            "9007a62cfd58a1a31fdda5d02e46fa051bdc64ad"
        ],
        [
            "intros x y H H0 H'0; case (Rtotal_order x y); [ intros H1 | intros [H1| H1] ]; auto.",
            "VernacExtend",
            "41ac8da12eb69610345911d8a36db46e3225d32a"
        ],
        [
            "assert (H2 := ln_increasing _ _ H H1); rewrite H'0 in H2; elim (Rlt_irrefl _ H2).",
            "VernacExtend",
            "c19ad6063b6d18b791af4e99ab348b1472570925"
        ],
        [
            "assert (H2 := ln_increasing _ _ H0 H1); rewrite H'0 in H2; elim (Rlt_irrefl _ H2).",
            "VernacExtend",
            "00292971b11bae522ac116d83f94877b9bab0b52"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ln_mult : forall x y:R, 0 < x -> 0 < y -> ln (x * y) = ln x + ln y.",
            "VernacStartTheoremProof",
            "4125346da90cb1edcb20e6150bfbe34eff09a64d"
        ],
        [
            "intros x y H H0; apply exp_inv.",
            "VernacExtend",
            "c78aaea15989af1587c5e1d7efbddc2433d11a4c"
        ],
        [
            "rewrite exp_plus.",
            "VernacExtend",
            "6d6e784db73c5ec39c5b67ce974fcd38b73e5738"
        ],
        [
            "repeat rewrite exp_ln.",
            "VernacExtend",
            "e7b2520b467063db95dd0195ee226c1649f4387c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmult_lt_0_compat; assumption.",
            "VernacExtend",
            "d1d629dd8069519c8644f4d7cf7d1ca7faab5a6a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ln_Rinv : forall x:R, 0 < x -> ln (/ x) = - ln x.",
            "VernacStartTheoremProof",
            "1da17ba09af0a0595caaea7f3cb1336e9c708d66"
        ],
        [
            "intros x H; apply exp_inv; repeat rewrite exp_ln || rewrite exp_Ropp.",
            "VernacExtend",
            "9ebdb0cbd72f695bf0bd45adc254b7ececc3a260"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ln_continue : forall y:R, 0 < y -> continue_in ln (fun x:R => 0 < x) y.",
            "VernacStartTheoremProof",
            "80cc905432038a30a338703ef6f40df93e373c3d"
        ],
        [
            "intros y H.",
            "VernacExtend",
            "b13857a6f2921c7c94ecf876feb0c6ba8a8482cf"
        ],
        [
            "unfold continue_in, limit1_in, limit_in; intros eps Heps.",
            "VernacExtend",
            "859148fc4f4472b0e6985b20be426452b8326902"
        ],
        [
            "cut (1 < exp eps); [ intros H1 | idtac ].",
            "VernacExtend",
            "79f68e387cb90bf17ad2dc778f61c31535b04900"
        ],
        [
            "cut (exp (- eps) < 1); [ intros H2 | idtac ].",
            "VernacExtend",
            "9771e337b6e452840182bba9fc470ce787aafceb"
        ],
        [
            "exists (Rmin (y * (exp eps - 1)) (y * (1 - exp (- eps)))); split.",
            "VernacExtend",
            "d294dccf2dc870ee7b14dd7c9cc83284bf3a1721"
        ],
        [
            "red; apply P_Rmin.",
            "VernacExtend",
            "1e701b74ef1ad754cc28513c85aac78523af486e"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rplus_lt_reg_l with 1.",
            "VernacExtend",
            "6f34a15f131045fe27932d7dd416a942af5d7ff9"
        ],
        [
            "rewrite Rplus_0_r; replace (1 + (exp eps - 1)) with (exp eps); [ apply H1 | ring ].",
            "VernacExtend",
            "a202854483e335a1bafaf789cea9d05d8bf955f8"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rplus_lt_reg_l with (exp (- eps)).",
            "VernacExtend",
            "3262e60db565b8ec9e90b5a09f986e0bbb464006"
        ],
        [
            "rewrite Rplus_0_r; replace (exp (- eps) + (1 - exp (- eps))) with 1; [ apply H2 | ring ].",
            "VernacExtend",
            "e9d51fe692f10e6bef25a45a259558a87d328102"
        ],
        [
            "unfold dist, R_met, R_dist; simpl.",
            "VernacExtend",
            "5acd675bdef4701f312daaff9b57588434218cf3"
        ],
        [
            "intros x [[H3 H4] H5].",
            "VernacExtend",
            "8a50c7fb24a2a7bda7d74cb10e73027a0e06c143"
        ],
        [
            "cut (y * (x * / y) = x).",
            "VernacExtend",
            "b87d88ad98f92314be28c38d9fb6473599a47c19"
        ],
        [
            "intro Hxyy.",
            "VernacExtend",
            "953fc2b342a0339e855754e9f1547a9930929f43"
        ],
        [
            "replace (ln x - ln y) with (ln (x * / y)).",
            "VernacExtend",
            "8f6daa04224852a1468e30971db012bbbb0de3cb"
        ],
        [
            "case (Rtotal_order x y); [ intros Hxy | intros [Hxy| Hxy] ].",
            "VernacExtend",
            "77031512c9c1976ca829b7cd8ae6de97a33f07d3"
        ],
        [
            "rewrite Rabs_left.",
            "VernacExtend",
            "e4f86365ea2cd6f894fbc670197f200cadc12a6c"
        ],
        [
            "apply Ropp_lt_cancel; rewrite Ropp_involutive.",
            "VernacExtend",
            "e845ad992fede3b4aa9c0de4b65f3a9145f87f2b"
        ],
        [
            "apply exp_lt_inv.",
            "VernacExtend",
            "54122c56a90a857136a1f26dee93cad6533904d0"
        ],
        [
            "rewrite exp_ln.",
            "VernacExtend",
            "e0d05ba5e54e444d4ee2301090c30aee5255afc4"
        ],
        [
            "apply Rmult_lt_reg_l with (r := y).",
            "VernacExtend",
            "2c07685c7bf099b13ad263aa8091e0d264d82828"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite Hxyy.",
            "VernacExtend",
            "88d91bce35cc9e5fa1f90cc377641b6e7abad3b1"
        ],
        [
            "apply Ropp_lt_cancel.",
            "VernacExtend",
            "9b0daa4a36df0c9a309eebcfa294d3bffe6b52b2"
        ],
        [
            "apply Rplus_lt_reg_l with (r := y).",
            "VernacExtend",
            "aa7eff4885d279544ffe0f3ab7bdb74e22afb7aa"
        ],
        [
            "replace (y + - (y * exp (- eps))) with (y * (1 - exp (- eps))); [ idtac | ring ].",
            "VernacExtend",
            "f80d8ed0a2f79d5bacbd1b7c2796bc8fea9cf0fb"
        ],
        [
            "replace (y + - x) with (Rabs (x - y)).",
            "VernacExtend",
            "09710ad0a1e3b63b1eaabd8d63a44fd9d8293c8e"
        ],
        [
            "apply Rlt_le_trans with (1 := H5); apply Rmin_r.",
            "VernacExtend",
            "820164b9d7bdea45163a47a1ed55f30d61c7cad5"
        ],
        [
            "rewrite Rabs_left; [ ring | idtac ].",
            "VernacExtend",
            "02b445c807df398c5dcc399873ff7add3328349f"
        ],
        [
            "apply (Rlt_minus _ _ Hxy).",
            "VernacExtend",
            "15509cec99a33595fdbf5c0e79eb93e72d1ad904"
        ],
        [
            "apply Rmult_lt_0_compat; [ apply H3 | apply (Rinv_0_lt_compat _ H) ].",
            "VernacExtend",
            "de210cae11f74b909924e499c5703135ecfde340"
        ],
        [
            "rewrite <- ln_1.",
            "VernacExtend",
            "c577fcc736cc7376d4a8ac941e60651e452e3dad"
        ],
        [
            "apply ln_increasing.",
            "VernacExtend",
            "a0b0912d7f10a9c69ccaf4e66f4aa3c1ed788a8b"
        ],
        [
            "apply Rmult_lt_0_compat; [ apply H3 | apply (Rinv_0_lt_compat _ H) ].",
            "VernacExtend",
            "de210cae11f74b909924e499c5703135ecfde340"
        ],
        [
            "apply Rmult_lt_reg_l with (r := y).",
            "VernacExtend",
            "2c07685c7bf099b13ad263aa8091e0d264d82828"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite Hxyy; rewrite Rmult_1_r; apply Hxy.",
            "VernacExtend",
            "9f3547a15e44c91654b12a2c349be67649d9def9"
        ],
        [
            "rewrite Hxy; rewrite Rinv_r.",
            "VernacExtend",
            "7c385cff60198ef282cf7f2d5b886e9ac2aa83f2"
        ],
        [
            "rewrite ln_1; rewrite Rabs_R0; apply Heps.",
            "VernacExtend",
            "87310ae7caae78c348cb0dae156cecb8adcab159"
        ],
        [
            "red; intro; rewrite H0 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "a3b8d79f0b022a5fb14cf5ffb39b90b81bade351"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "apply exp_lt_inv.",
            "VernacExtend",
            "54122c56a90a857136a1f26dee93cad6533904d0"
        ],
        [
            "rewrite exp_ln.",
            "VernacExtend",
            "e0d05ba5e54e444d4ee2301090c30aee5255afc4"
        ],
        [
            "apply Rmult_lt_reg_l with (r := y).",
            "VernacExtend",
            "2c07685c7bf099b13ad263aa8091e0d264d82828"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite Hxyy.",
            "VernacExtend",
            "88d91bce35cc9e5fa1f90cc377641b6e7abad3b1"
        ],
        [
            "apply Rplus_lt_reg_l with (r := - y).",
            "VernacExtend",
            "93155e02d5ec030f7a342be55300c471a34aaafe"
        ],
        [
            "replace (- y + y * exp eps) with (y * (exp eps - 1)); [ idtac | ring ].",
            "VernacExtend",
            "f7e45b9ed1ccff8082c7142e126e7dc1240835ae"
        ],
        [
            "replace (- y + x) with (Rabs (x - y)).",
            "VernacExtend",
            "cadb0ab1e6db737ec39f5920539d4344582f80c6"
        ],
        [
            "apply Rlt_le_trans with (1 := H5); apply Rmin_l.",
            "VernacExtend",
            "73fded21da70ae1b29d0b2e850b2e4ea31c46844"
        ],
        [
            "rewrite Rabs_right; [ ring | idtac ].",
            "VernacExtend",
            "ab16abe7c3e046e7e14364897bd20f6387536898"
        ],
        [
            "left; apply (Rgt_minus _ _ Hxy).",
            "VernacExtend",
            "811710ac5652cdf6591f8ecb804cf8928d12f733"
        ],
        [
            "apply Rmult_lt_0_compat; [ apply H3 | apply (Rinv_0_lt_compat _ H) ].",
            "VernacExtend",
            "de210cae11f74b909924e499c5703135ecfde340"
        ],
        [
            "rewrite <- ln_1.",
            "VernacExtend",
            "c577fcc736cc7376d4a8ac941e60651e452e3dad"
        ],
        [
            "apply Rgt_ge; red; apply ln_increasing.",
            "VernacExtend",
            "b901c979337b848058fd3ba3f3ab2b4fa148b633"
        ],
        [
            "apply Rlt_0_1.",
            "VernacExtend",
            "c3f675388bf844e0740197fd71afa66e5eef091d"
        ],
        [
            "apply Rmult_lt_reg_l with (r := y).",
            "VernacExtend",
            "2c07685c7bf099b13ad263aa8091e0d264d82828"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite Hxyy; rewrite Rmult_1_r; apply Hxy.",
            "VernacExtend",
            "9f3547a15e44c91654b12a2c349be67649d9def9"
        ],
        [
            "rewrite ln_mult.",
            "VernacExtend",
            "fba50873cbd53de3025929c9a6b21577222c2f2b"
        ],
        [
            "rewrite ln_Rinv.",
            "VernacExtend",
            "573fa76c34b0d9a77b2be5d4a2e74424bc18e033"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "rewrite (Rmult_comm x); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "65125e91164c30c19db2f73062694134c5571afc"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "red; intro; rewrite H0 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "a3b8d79f0b022a5fb14cf5ffb39b90b81bade351"
        ],
        [
            "apply Rmult_lt_reg_l with (exp eps).",
            "VernacExtend",
            "76bb12351eb96de112c5bbad6ed83fccd25d3cb2"
        ],
        [
            "apply exp_pos.",
            "VernacExtend",
            "e7aede1d8dff8d25c884324d0860ea3be851262c"
        ],
        [
            "rewrite <- exp_plus; rewrite Rmult_1_r; rewrite Rplus_opp_r; rewrite exp_0; apply H1.",
            "VernacExtend",
            "d5adcb789aae28836a0adc7f1b8b066d7c163fb0"
        ],
        [
            "rewrite <- exp_0.",
            "VernacExtend",
            "5ebe08af145ce436ca37dc2ffc7a33d24c9cbd67"
        ],
        [
            "apply exp_increasing; apply Heps.",
            "VernacExtend",
            "fcb4e11addc23d077f09f33b4ca1414f42244ff8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Rpower (x y:R) := exp (y * ln x).",
            "VernacDefinition",
            "e19e2b5545e2ac697dc1aca7c01eed7ef9bb8fd8"
        ],
        [
            "Local Infix \"^R\" := Rpower (at level 30, right associativity) : R_scope.",
            "VernacInfix",
            "cbaf76023fd047366e30fc9ed19258576e9c335b"
        ],
        [
            "Theorem Rpower_plus : forall x y z:R, z ^R (x + y) = z ^R x * z ^R y.",
            "VernacStartTheoremProof",
            "2ec527d1bd63e5a6a672235d7b8b2a22d1dcee40"
        ],
        [
            "intros x y z; unfold Rpower.",
            "VernacExtend",
            "40dfa6e457eee3d63bb4ff223e2fb8a6d55e4e26"
        ],
        [
            "rewrite Rmult_plus_distr_r; rewrite exp_plus; auto.",
            "VernacExtend",
            "ea77e1b07db23eb3c96c22823ef430fc929d459a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rpower_mult : forall x y z:R, (x ^R y) ^R z = x ^R (y * z).",
            "VernacStartTheoremProof",
            "76cd3a7fe5d949345fd0e21a510af016ee83ef60"
        ],
        [
            "intros x y z; unfold Rpower.",
            "VernacExtend",
            "40dfa6e457eee3d63bb4ff223e2fb8a6d55e4e26"
        ],
        [
            "rewrite ln_exp.",
            "VernacExtend",
            "b94cc8096f2d78a8e6d9ebdc428927c745fbdb88"
        ],
        [
            "replace (z * (y * ln x)) with (y * z * ln x).",
            "VernacExtend",
            "1908503e1711f053f7570d69e4f717f3f72499a4"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rpower_O : forall x:R, 0 < x -> x ^R 0 = 1.",
            "VernacStartTheoremProof",
            "ea99608c2da6bcaa2b6ba3980f2ca7bc46c0e347"
        ],
        [
            "intros x _; unfold Rpower.",
            "VernacExtend",
            "07285fb5638403948b50679326fdadf6c4151e2d"
        ],
        [
            "rewrite Rmult_0_l; apply exp_0.",
            "VernacExtend",
            "ecaab2a4bfe532b46d15effd279d20ec1dd56e34"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rpower_1 : forall x:R, 0 < x -> x ^R 1 = x.",
            "VernacStartTheoremProof",
            "013745cdeaebebbf97826bac41f9d9cd81aaf61c"
        ],
        [
            "intros x H; unfold Rpower.",
            "VernacExtend",
            "77be335bda6562b965615d440304964b51d6b5ed"
        ],
        [
            "rewrite Rmult_1_l; apply exp_ln; apply H.",
            "VernacExtend",
            "6c1b08f66d784e9a90ea58250f9d66f24b9f026e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rpower_pow : forall (n:nat) (x:R), 0 < x -> x ^R INR n = x ^ n.",
            "VernacStartTheoremProof",
            "159d1250179eb98410db07ed7816c135f66eb078"
        ],
        [
            "intros n; elim n; simpl; auto; fold INR.",
            "VernacExtend",
            "5d8b8a9827fd7adc82f5a459eb2c327b9a2f3e5f"
        ],
        [
            "intros x H; apply Rpower_O; auto.",
            "VernacExtend",
            "8ebe6e563e783d296e575a5e8c0578953a16dfda"
        ],
        [
            "intros n1; case n1.",
            "VernacExtend",
            "ab9ee37261222a76f2cc41735ea26481180b1b94"
        ],
        [
            "intros H x H0; simpl; rewrite Rmult_1_r; apply Rpower_1; auto.",
            "VernacExtend",
            "0ac825449cc3d55b62ba0929970407be0db0b41b"
        ],
        [
            "intros n0 H x H0; rewrite Rpower_plus; rewrite H; try rewrite Rpower_1; try apply Rmult_comm || assumption.",
            "VernacExtend",
            "00f8c7cc72e2299a6b78bdb866f39576b997a235"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rpower_lt : forall x y z:R, 1 < x -> y < z -> x ^R y < x ^R z.",
            "VernacStartTheoremProof",
            "0a1c4f034c4968d425da763832a2b1a9b5fdea7d"
        ],
        [
            "intros x y z H H1.",
            "VernacExtend",
            "039c07af68910b002da18eaeacb45feeb7f19b44"
        ],
        [
            "unfold Rpower.",
            "VernacExtend",
            "f90fa531424b6ea5ffc96470fb5b1fd75c4c210c"
        ],
        [
            "apply exp_increasing.",
            "VernacExtend",
            "4984f45a56637671bd2bd70226d7dc608d8a3bb4"
        ],
        [
            "apply Rmult_lt_compat_r.",
            "VernacExtend",
            "e041593c57ec6470673cc705c01d215d230e0676"
        ],
        [
            "rewrite <- ln_1; apply ln_increasing.",
            "VernacExtend",
            "5a2746c84ebc6c7a84814c97f98621dc5cd43bbd"
        ],
        [
            "apply Rlt_0_1.",
            "VernacExtend",
            "c3f675388bf844e0740197fd71afa66e5eef091d"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rpower_sqrt : forall x:R, 0 < x -> x ^R (/ 2) = sqrt x.",
            "VernacStartTheoremProof",
            "0d22c5194002becf8cf4a080b3f399f84463c59a"
        ],
        [
            "intros x H.",
            "VernacExtend",
            "a0cd74b85812810ce5a78a540bad98f664bd4842"
        ],
        [
            "apply ln_inv.",
            "VernacExtend",
            "a1e3a494f13db5ec70b16ff899c6dad8b9174ffa"
        ],
        [
            "unfold Rpower; apply exp_pos.",
            "VernacExtend",
            "035b49037496967af73c037ecb1dc61a4738dca8"
        ],
        [
            "apply sqrt_lt_R0; apply H.",
            "VernacExtend",
            "951339c0fb5f3782efd2b31bb9bf3fbea133e101"
        ],
        [
            "apply Rmult_eq_reg_l with (INR 2).",
            "VernacExtend",
            "f238f00b2c0b6d2fa2c3251732ba31a7e2d08af5"
        ],
        [
            "apply exp_inv.",
            "VernacExtend",
            "a4a5ddfcf4ba529b800d1f74c30701f6097a2603"
        ],
        [
            "fold Rpower.",
            "VernacExtend",
            "5979b9474c9af78f2140ada75529a7026fba2f88"
        ],
        [
            "cut ((x ^R (/ INR 2)) ^R INR 2 = sqrt x ^R INR 2).",
            "VernacExtend",
            "7d3eef692ba42dc5b1d525ecb12faae24210dd60"
        ],
        [
            "unfold Rpower; auto.",
            "VernacExtend",
            "24e2ad7c7e1455784df29dc44bd7c2c9cc7942d6"
        ],
        [
            "rewrite Rpower_mult.",
            "VernacExtend",
            "23df7546cc90fc916b6fb12ac22c32be936b04a1"
        ],
        [
            "rewrite Rinv_l.",
            "VernacExtend",
            "ecdf9c2abd7f5f8afdaa87d40c932567a11fd7b1"
        ],
        [
            "change 1 with (INR 1).",
            "VernacExtend",
            "0c13b2bd19d4e02d341ea7d7fe8a37e7b5dfc4fe"
        ],
        [
            "repeat rewrite Rpower_pow; simpl.",
            "VernacExtend",
            "31144c60c8c11e4acba92b6ea5f7d0676491042e"
        ],
        [
            "pattern x at 1; rewrite <- (sqrt_sqrt x (Rlt_le _ _ H)).",
            "VernacExtend",
            "e91628b30b06b75820eb9c7983cef52518a72236"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply sqrt_lt_R0; apply H.",
            "VernacExtend",
            "951339c0fb5f3782efd2b31bb9bf3fbea133e101"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply not_O_INR; discriminate.",
            "VernacExtend",
            "b0377726251b564451c17d0f089ec6fd746a82be"
        ],
        [
            "apply not_O_INR; discriminate.",
            "VernacExtend",
            "b0377726251b564451c17d0f089ec6fd746a82be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rpower_Ropp : forall x y:R, x ^R (- y) = / x ^R y.",
            "VernacStartTheoremProof",
            "893a3e3773b1d93292157f5783c46464ba8ff0e9"
        ],
        [
            "unfold Rpower.",
            "VernacExtend",
            "f90fa531424b6ea5ffc96470fb5b1fd75c4c210c"
        ],
        [
            "intros x y; rewrite Ropp_mult_distr_l_reverse.",
            "VernacExtend",
            "6bb87c42f616ddb4de0fee5d73a6a31d9cf8e991"
        ],
        [
            "apply exp_Ropp.",
            "VernacExtend",
            "9661e640831a299ec2d3a86991a91dcd35f4b3a9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma powerRZ_Rpower x z : (0 < x)%R -> powerRZ x z = Rpower x (IZR z).",
            "VernacStartTheoremProof",
            "014454d363a986d634fa9f1901805e50413efec8"
        ],
        [
            "intros Hx.",
            "VernacExtend",
            "9276b72df3a882c9b4b954c90d9e870c80a906fc"
        ],
        [
            "assert (x <> 0)%R by now intros Habs; rewrite Habs in Hx; apply (Rlt_irrefl 0).",
            "VernacExtend",
            "a94671dab16baaf26ce76b6595b9ae762d135950"
        ],
        [
            "destruct (intP z).",
            "VernacExtend",
            "cbdcaead10f43cc3f7734bc9bb46e59ab12cea99"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "now rewrite Rpower_O.",
            "VernacExtend",
            "80fc856cf832169e8c144e1e6e381a28f0c9605a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite <- pow_powerRZ, <- Rpower_pow by assumption.",
            "VernacExtend",
            "ba5a52d39cad6f4953ba57c5fc2270fdaf49f1ed"
        ],
        [
            "now rewrite INR_IZR_INZ.",
            "VernacExtend",
            "76f7c2dec04858ef9b19fd47907f0be497c3ddd2"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "rewrite opp_IZR, Rpower_Ropp.",
            "VernacExtend",
            "f66c70605218fd574a2269d7ab8b15b7a9795483"
        ],
        [
            "rewrite powerRZ_neg, powerRZ_inv by assumption.",
            "VernacExtend",
            "1c42058345b6594acf48df35d1c566fa48b3b815"
        ],
        [
            "now rewrite <- pow_powerRZ, <- INR_IZR_INZ, Rpower_pow.",
            "VernacExtend",
            "a73ed4f8c0870df50433e57bd362ad2ff7d186c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rle_Rpower : forall e n m:R, 1 <= e -> n <= m -> e ^R n <= e ^R m.",
            "VernacStartTheoremProof",
            "ac8aad953d94209f64ab8cb5ac8cec2ce07b6902"
        ],
        [
            "intros e n m [H | H]; intros H1.",
            "VernacExtend",
            "eb022b90547ffcefaa1dfc051d9410bc4c161aec"
        ],
        [
            "case H1.",
            "VernacExtend",
            "a1cc2c5b7545de9abe2fa54c801395a452f26f10"
        ],
        [
            "intros H2; left; apply Rpower_lt; assumption.",
            "VernacExtend",
            "9fe021e1097f2ced1248538bd07f7f3d6ec9a0a0"
        ],
        [
            "intros H2; rewrite H2; right; reflexivity.",
            "VernacExtend",
            "a04d574cbdd24ecef34783f4a15a7dc29fdc188c"
        ],
        [
            "now rewrite <- H; unfold Rpower; rewrite ln_1, !Rmult_0_r; apply Rle_refl.",
            "VernacExtend",
            "de9fd568ad992ec169a7fbf7caf5bf315a5b74c4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem ln_lt_2 : / 2 < ln 2.",
            "VernacStartTheoremProof",
            "ccd98e867e47229ecafb71f07a6c3c4c1f3e0cc4"
        ],
        [
            "apply Rmult_lt_reg_l with (r := 2).",
            "VernacExtend",
            "beb8ee555d9ad8d12b42812645e47bc0dc98d6fd"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "rewrite Rinv_r.",
            "VernacExtend",
            "901df6dbe8bfa5cb3145649e51a3e451e9ced1a3"
        ],
        [
            "apply exp_lt_inv.",
            "VernacExtend",
            "54122c56a90a857136a1f26dee93cad6533904d0"
        ],
        [
            "apply Rle_lt_trans with (1 := exp_le_3).",
            "VernacExtend",
            "cfc517f713e0d6bf54b4889c5c522c1cc5d1e60b"
        ],
        [
            "change (3 < 2 ^R (1 + 1)).",
            "VernacExtend",
            "57959629425f3e31de4aec580c6b503ca4e98040"
        ],
        [
            "repeat rewrite Rpower_plus; repeat rewrite Rpower_1.",
            "VernacExtend",
            "d90f33893b9490a5be1a1fdd050f4de69e539070"
        ],
        [
            "now apply (IZR_lt 3 4).",
            "VernacExtend",
            "327d99e74ffb7e0fbf04f67eb10455822c99143d"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem limit1_ext : forall (f g:R -> R) (D:R -> Prop) (l x:R), (forall x:R, D x -> f x = g x) -> limit1_in f D l x -> limit1_in g D l x.",
            "VernacStartTheoremProof",
            "5179c0af0aa336bc352e0ce91446dacfe690eccb"
        ],
        [
            "intros f g D l x H; unfold limit1_in, limit_in.",
            "VernacExtend",
            "981942644af792bc8374f84f804bfc9c0f700cb0"
        ],
        [
            "intros H0 eps H1; case (H0 eps); auto.",
            "VernacExtend",
            "fcc2ccdc1327b2b85c93bda25af28ae18070bdcd"
        ],
        [
            "intros x0 [H2 H3]; exists x0; split; auto.",
            "VernacExtend",
            "74cd76ac564d667b4628e1d1ea8fa1bb8d2c8b45"
        ],
        [
            "intros x1 [H4 H5]; rewrite <- H; auto.",
            "VernacExtend",
            "5f466b2b7a99281c7599a353a6f6f4082226933c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem limit1_imp : forall (f:R -> R) (D D1:R -> Prop) (l x:R), (forall x:R, D1 x -> D x) -> limit1_in f D l x -> limit1_in f D1 l x.",
            "VernacStartTheoremProof",
            "8179616a66353eddbdff12cc66cb24e03c6b4161"
        ],
        [
            "intros f D D1 l x H; unfold limit1_in, limit_in.",
            "VernacExtend",
            "da56759e8f0baa44ac72dd8d77e7f3a7043dbd27"
        ],
        [
            "intros H0 eps H1; case (H0 eps H1); auto.",
            "VernacExtend",
            "c89e9a93b48b2366895cc492434fdd9d2940f7d7"
        ],
        [
            "intros alpha [H2 H3]; exists alpha; split; auto.",
            "VernacExtend",
            "dd7b2316ebe08395d5bd70f9dcc5a3ebb5bb5cb2"
        ],
        [
            "intros d [H4 H5]; apply H3; split; auto.",
            "VernacExtend",
            "582187dfb1dfeb07eceb60c72d6ee238196255a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rinv_Rdiv : forall x y:R, x <> 0 -> y <> 0 -> / (x / y) = y / x.",
            "VernacStartTheoremProof",
            "3ccec4832162cf7a2c506391aa65913dc0c28450"
        ],
        [
            "intros x y H1 H2; unfold Rdiv; rewrite Rinv_mult_distr.",
            "VernacExtend",
            "747a74dea8fc13d4041e8174d99440e475525269"
        ],
        [
            "rewrite Rinv_involutive.",
            "VernacExtend",
            "422941d9f5ab1f835c6b4368750431aa4fff0509"
        ],
        [
            "apply Rmult_comm.",
            "VernacExtend",
            "f6a795952024dfb6a8db9b1b3050b14eb7f075aa"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rinv_neq_0_compat; assumption.",
            "VernacExtend",
            "34bdbdad7cea919f16144b67748495a3e0ceac05"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Dln : forall y:R, 0 < y -> D_in ln Rinv (fun x:R => 0 < x) y.",
            "VernacStartTheoremProof",
            "4cf604ebbefaf66ea21b20cf223ae7894489a883"
        ],
        [
            "intros y Hy; unfold D_in.",
            "VernacExtend",
            "40eebd60c6cbb78c52a456d3559380c5f6d212fc"
        ],
        [
            "apply limit1_ext with (f := fun x:R => / ((exp (ln x) - exp (ln y)) / (ln x - ln y))).",
            "VernacExtend",
            "7031d58e782db8bc9d1219f55d2876024724c3f3"
        ],
        [
            "intros x [HD1 HD2]; repeat rewrite exp_ln.",
            "VernacExtend",
            "cac922ada4b327124d99b5d5b8421a659a69c54d"
        ],
        [
            "unfold Rdiv; rewrite Rinv_mult_distr.",
            "VernacExtend",
            "3bf9830f7647c63577f406f658b9e756537f6464"
        ],
        [
            "rewrite Rinv_involutive.",
            "VernacExtend",
            "422941d9f5ab1f835c6b4368750431aa4fff0509"
        ],
        [
            "apply Rmult_comm.",
            "VernacExtend",
            "f6a795952024dfb6a8db9b1b3050b14eb7f075aa"
        ],
        [
            "apply Rminus_eq_contra.",
            "VernacExtend",
            "36628d08ea6e2381fe85c05d842ae9dfbbca2407"
        ],
        [
            "red; intros H2; case HD2.",
            "VernacExtend",
            "b5369e68455acc6ea5d86355fbda2640048dc907"
        ],
        [
            "symmetry ; apply (ln_inv _ _ HD1 Hy H2).",
            "VernacExtend",
            "fac72d459b3d7d6e23d58e319e0542649c686129"
        ],
        [
            "apply Rminus_eq_contra; apply (not_eq_sym HD2).",
            "VernacExtend",
            "227436cc3ae38c778c612ac21b76d926438c3816"
        ],
        [
            "apply Rinv_neq_0_compat; apply Rminus_eq_contra; red; intros H2; case HD2; apply ln_inv; auto.",
            "VernacExtend",
            "8e2650c747542b3138e12b6223a9c578faba97a7"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply limit_inv with (f := fun x:R => (exp (ln x) - exp (ln y)) / (ln x - ln y)).",
            "VernacExtend",
            "7511f97c7a7be99a95b2d355d5b2b33b14ca2660"
        ],
        [
            "apply limit1_imp with (f := fun x:R => (fun x:R => (exp x - exp (ln y)) / (x - ln y)) (ln x)) (D := Dgf (D_x (fun x:R => 0 < x) y) (D_x (fun x:R => True) (ln y)) ln).",
            "VernacExtend",
            "74d00083b56925dd38fe89bf42a6bacc3457d09c"
        ],
        [
            "intros x [H1 H2]; split.",
            "VernacExtend",
            "8c77547fae5faa28f8926559c443e34c896bb6cb"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "split; auto.",
            "VernacExtend",
            "fcd44a714bd12fa54b1c7746996e44dbac16df06"
        ],
        [
            "red; intros H3; case H2; apply ln_inv; auto.",
            "VernacExtend",
            "8d6a8fc9bfca9f6d016dd03db94f0f34051d9eab"
        ],
        [
            "apply limit_comp with (l := ln y) (g := fun x:R => (exp x - exp (ln y)) / (x - ln y)) (f := ln).",
            "VernacExtend",
            "0b60f16282b488399520ad28e44e9cd902a33331"
        ],
        [
            "apply ln_continue; auto.",
            "VernacExtend",
            "f9fc66974b9d68a45cf8c54dd587bb9f43e33d38"
        ],
        [
            "assert (H0 := derivable_pt_lim_exp (ln y)); unfold derivable_pt_lim in H0; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; elim (H0 _ H); intros; exists (pos x); split.",
            "VernacExtend",
            "ad897f1e5ffc141dd4cbd3f245d2d75711c9f252"
        ],
        [
            "apply (cond_pos x).",
            "VernacExtend",
            "13123edebc901eab9feb33dc3cf353ecb7f51a6a"
        ],
        [
            "intros; pattern y at 3; rewrite <- exp_ln.",
            "VernacExtend",
            "0c1ab6db36fbc85f765da5c03ae58647b901c732"
        ],
        [
            "pattern x0 at 1; replace x0 with (ln y + (x0 - ln y)); [ idtac | ring ].",
            "VernacExtend",
            "617c594812e6aea0ad204a4688efb9e94846a310"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "elim H2; intros H3 _; unfold D_x in H3; elim H3; clear H3; intros _ H3; apply Rminus_eq_contra; apply (not_eq_sym (A:=R)); apply H3.",
            "VernacExtend",
            "ff2b21e6cd1ea70e333360531de1c55c6e7de1be"
        ],
        [
            "elim H2; clear H2; intros _ H2; apply H2.",
            "VernacExtend",
            "f59ddb371d9ba1ee68d6a85583f6e21cb9ff3f1a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "red; intro; rewrite H in Hy; elim (Rlt_irrefl _ Hy).",
            "VernacExtend",
            "42c1803e778e02adfdc1753f9a13acde8f966870"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_ln : forall x:R, 0 < x -> derivable_pt_lim ln x (/ x).",
            "VernacStartTheoremProof",
            "44a8698e6655e5e1c4682bd5917fa9a2ef5b5606"
        ],
        [
            "intros; assert (H0 := Dln x H); unfold D_in in H0; unfold limit1_in in H0; unfold limit_in in H0; simpl in H0; unfold R_dist in H0; unfold derivable_pt_lim; intros; elim (H0 _ H1); intros; elim H2; clear H2; intros; set (alp := Rmin x0 (x / 2)); assert (H4 : 0 < alp).",
            "VernacExtend",
            "5acaacf9569c8d3c09c9e7612de03793a8a97a53"
        ],
        [
            "unfold alp; unfold Rmin; case (Rle_dec x0 (x / 2)); intro.",
            "VernacExtend",
            "46d331136e3256bf71d3519e48f0c6c851e36892"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "exists (mkposreal _ H4); intros; pattern h at 2; replace h with (x + h - x); [ idtac | ring ].",
            "VernacExtend",
            "e3cdf28ba570dde223afb2a53f39e1b8a3e312d9"
        ],
        [
            "apply H3; split.",
            "VernacExtend",
            "14ee8b762765c5a3d7361306b2caf70207874eea"
        ],
        [
            "unfold D_x; split.",
            "VernacExtend",
            "dc5d57a38d678104af9755be17a91e30c46fd5bc"
        ],
        [
            "destruct (Rcase_abs h) as [Hlt|Hgt].",
            "VernacExtend",
            "c1c1ddab33ee809f4b9fb3d761c7e872b2e3d040"
        ],
        [
            "assert (H7 : Rabs h < x / 2).",
            "VernacExtend",
            "8725e60a9f76884672aab0841ff20a77d06e93e8"
        ],
        [
            "apply Rlt_le_trans with alp.",
            "VernacExtend",
            "5c6b053e25325bd0ca7a59ad9cac5f57fc4f18a2"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "unfold alp; apply Rmin_r.",
            "VernacExtend",
            "01efd8b4bf10bed7ffc6b2363819fefebfe56254"
        ],
        [
            "apply Rlt_trans with (x / 2).",
            "VernacExtend",
            "dfc80adb5582ee5457be855f6a3108b704fb4683"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "rewrite Rabs_left in H7.",
            "VernacExtend",
            "de8a8997a7b8549e5953e8e3a2ecc4ab54f2d6bb"
        ],
        [
            "apply Rplus_lt_reg_l with (- h - x / 2).",
            "VernacExtend",
            "c1f01e8a1175dd0ff6b8ed7a643000bd7ea5b88d"
        ],
        [
            "replace (- h - x / 2 + x / 2) with (- h); [ idtac | ring ].",
            "VernacExtend",
            "90033bec8ddee39ba45b9da25c3e5a296ece48b7"
        ],
        [
            "pattern x at 2; rewrite double_var.",
            "VernacExtend",
            "6b40b8307edc3fb8b4df29db07d55dbecfb9dc8d"
        ],
        [
            "replace (- h - x / 2 + (x / 2 + x / 2 + h)) with (x / 2); [ apply H7 | ring ].",
            "VernacExtend",
            "23e20a2244a7a95a40dbe61a40919d42f79bc07c"
        ],
        [
            "apply Hlt.",
            "VernacExtend",
            "b07ea4c51489bd1f1a3ab9521cadeda0ed645275"
        ],
        [
            "apply Rplus_lt_le_0_compat; [ assumption | apply Rge_le; apply Hgt ].",
            "VernacExtend",
            "3325bfb29777febcf781c3f1150fec75c20a3dc0"
        ],
        [
            "apply (sym_not_eq (A:=R)); apply Rminus_not_eq; replace (x + h - x) with h; [ apply H5 | ring ].",
            "VernacExtend",
            "be8a33cfc057f05838db97f93aebf9c3ddd2f02f"
        ],
        [
            "replace (x + h - x) with h; [ apply Rlt_le_trans with alp; [ apply H6 | unfold alp; apply Rmin_l ] | ring ].",
            "VernacExtend",
            "ccc0ba635de6a97fd74602ca0521e70c605b55e3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem D_in_imp : forall (f g:R -> R) (D D1:R -> Prop) (x:R), (forall x:R, D1 x -> D x) -> D_in f g D x -> D_in f g D1 x.",
            "VernacStartTheoremProof",
            "d14143abe49cd49e011f768fb1b20b00fd80922d"
        ],
        [
            "intros f g D D1 x H; unfold D_in.",
            "VernacExtend",
            "ac76fe818860239c9bde93ca019fd35be6128b85"
        ],
        [
            "intros H0; apply limit1_imp with (D := D_x D x); auto.",
            "VernacExtend",
            "61ffb71bc17195547a38c7864cdc5435d4ccc7cf"
        ],
        [
            "intros x1 [H1 H2]; split; auto.",
            "VernacExtend",
            "830e29029cd079a91c6e1cfa900ecb739a0c1b7a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem D_in_ext : forall (f g h:R -> R) (D:R -> Prop) (x:R), f x = g x -> D_in h f D x -> D_in h g D x.",
            "VernacStartTheoremProof",
            "41dbefe60670aab4cb540c4f18d9e695f8240b12"
        ],
        [
            "intros f g h D x H; unfold D_in.",
            "VernacExtend",
            "61cfbc635d474255c9a1eb1e6460f36eef7c4242"
        ],
        [
            "rewrite H; auto.",
            "VernacExtend",
            "3e25713af8eaa76cddf9287af10d66733da2ee16"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Dpower : forall y z:R, 0 < y -> D_in (fun x:R => x ^R z) (fun x:R => z * x ^R (z - 1)) ( fun x:R => 0 < x) y.",
            "VernacStartTheoremProof",
            "6e174c62bd794dcd3de9186739577623026569b6"
        ],
        [
            "intros y z H; apply D_in_imp with (D := Dgf (fun x:R => 0 < x) (fun x:R => True) ln).",
            "VernacExtend",
            "c423902983639725f35a4878b5c2d037f9dfa9b6"
        ],
        [
            "intros x H0; repeat split.",
            "VernacExtend",
            "26444570359877b6986c694198fd14b245f980f9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply D_in_ext with (f := fun x:R => / x * (z * exp (z * ln x))).",
            "VernacExtend",
            "a7f1b9a7aa969f6515e6bd8ba00d5b63787a8d6c"
        ],
        [
            "unfold Rminus; rewrite Rpower_plus; rewrite Rpower_Ropp; rewrite (Rpower_1 _ H); unfold Rpower; ring.",
            "VernacExtend",
            "9dd7d1b4390c5e78eaa52e873c0ce0e01569fb72"
        ],
        [
            "apply Dcomp with (f := ln) (g := fun x:R => exp (z * x)) (df := Rinv) (dg := fun x:R => z * exp (z * x)).",
            "VernacExtend",
            "9467d6e9daf499ff0465fe7c41f1ffe0f924e699"
        ],
        [
            "apply (Dln _ H).",
            "VernacExtend",
            "339c7c24ce50310ad49c09686d2eeae043753dcc"
        ],
        [
            "apply D_in_imp with (D := Dgf (fun x:R => True) (fun x:R => True) (fun x:R => z * x)).",
            "VernacExtend",
            "64910d8ec5c18575320061f580c8032e307b8690"
        ],
        [
            "intros x H1; repeat split; auto.",
            "VernacExtend",
            "ad1d740e35ebd7f7a6b8ab167e5be1ea3bfa44e8"
        ],
        [
            "apply (Dcomp (fun _:R => True) (fun _:R => True) (fun x => z) exp (fun x:R => z * x) exp); simpl.",
            "VernacExtend",
            "5aee4c690c486ece58bed38195dea8a4cb9ef892"
        ],
        [
            "apply D_in_ext with (f := fun x:R => z * 1).",
            "VernacExtend",
            "fd4d13e1e446dbcdadd0c7bbc67ef5a2e1896892"
        ],
        [
            "apply Rmult_1_r.",
            "VernacExtend",
            "7e290e72327ec53766aaa3b6504d3f54d3250d15"
        ],
        [
            "apply (Dmult_const (fun x => True) (fun x => x) (fun x => 1)); apply Dx.",
            "VernacExtend",
            "2a068236afe1053cf75b3641992277e06874204d"
        ],
        [
            "assert (H0 := derivable_pt_lim_D_in exp exp (z * ln y)); elim H0; clear H0; intros _ H0; apply H0; apply derivable_pt_lim_exp.",
            "VernacExtend",
            "3fa890f1fbb23cc45700a26718528045656fe734"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem derivable_pt_lim_power : forall x y:R, 0 < x -> derivable_pt_lim (fun x => x ^R y) x (y * x ^R (y - 1)).",
            "VernacStartTheoremProof",
            "36557ddd622aecb7ce0d24e8a2a7b20f8601cabd"
        ],
        [
            "intros x y H.",
            "VernacExtend",
            "c7ef450aa0313460779fba50c0edf4486e0c7fe4"
        ],
        [
            "unfold Rminus; rewrite Rpower_plus.",
            "VernacExtend",
            "417b7bfae2a06c534d98e6ab4936283ff3890219"
        ],
        [
            "rewrite Rpower_Ropp.",
            "VernacExtend",
            "f2b9be8188ca0a20b42ce720d3a551b1b6e322ab"
        ],
        [
            "rewrite Rpower_1; auto.",
            "VernacExtend",
            "a680369972aa69169ba5803c2eb999ac04ce3177"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "unfold Rpower.",
            "VernacExtend",
            "f90fa531424b6ea5ffc96470fb5b1fd75c4c210c"
        ],
        [
            "apply derivable_pt_lim_comp with (f1 := ln) (f2 := fun x => exp (y * x)).",
            "VernacExtend",
            "2d766a80bc7a0bf9648602bce5c8f8e558341698"
        ],
        [
            "apply derivable_pt_lim_ln; assumption.",
            "VernacExtend",
            "75056d8079ec5d27d05eabf518ce612cc7bb1b1b"
        ],
        [
            "rewrite (Rmult_comm y).",
            "VernacExtend",
            "f2cfe05ae8ca4a375875c5383a94b658ee7c9311"
        ],
        [
            "apply derivable_pt_lim_comp with (f1 := fun x => y * x) (f2 := exp).",
            "VernacExtend",
            "27483c60607c775f9c1911ed85b63980b9e43c0b"
        ],
        [
            "pattern y at 2; replace y with (0 * ln x + y * 1).",
            "VernacExtend",
            "cd1f08ccee5695703fe714bb47fbd0a3078e1db2"
        ],
        [
            "apply derivable_pt_lim_mult with (f1 := fun x:R => y) (f2 := fun x:R => x).",
            "VernacExtend",
            "48c12756aec915a4a5e6b813e23060b0694c8fde"
        ],
        [
            "apply derivable_pt_lim_const with (a := y).",
            "VernacExtend",
            "81f7b1c1406af2a7818d358bb5e762b1df47a1c6"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply derivable_pt_lim_exp.",
            "VernacExtend",
            "82e5b81edbc184946c404c79bc9a52dc307dbae6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rpower_mult_distr : forall x y z, 0 < x -> 0 < y -> Rpower x z * Rpower y z = Rpower (x * y) z.",
            "VernacStartTheoremProof",
            "5bfcb11ec9a7d7090b9cd0411501b9fb79e91195"
        ],
        [
            "intros x y z x0 y0; unfold Rpower.",
            "VernacExtend",
            "67471bb7ec7f1d06932c99ae041c552e2fc69391"
        ],
        [
            "rewrite <- exp_plus, ln_mult, Rmult_plus_distr_l; auto.",
            "VernacExtend",
            "8769493da1e73646f672235f9e680400c6843dfa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rlt_Rpower_l a b c: 0 < c -> 0 < a < b -> a ^R c < b ^R c.",
            "VernacStartTheoremProof",
            "b800168ae8f19b3c47b4bc5fd06bccb634b4eb11"
        ],
        [
            "intros c0 [a0 ab]; apply exp_increasing.",
            "VernacExtend",
            "2e0c2af36d263dc90321397bfaa07eac4c0ab356"
        ],
        [
            "now apply Rmult_lt_compat_l; auto; apply ln_increasing; lra.",
            "VernacExtend",
            "849ec84c91240ecc2e04e97976a78fc1f7e88196"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rle_Rpower_l a b c: 0 <= c -> 0 < a <= b -> a ^R c <= b ^R c.",
            "VernacStartTheoremProof",
            "c92d8c2dbbc678f59ad1390aac2ff4d1ef59a284"
        ],
        [
            "intros [c0 | c0]; [ | intros; rewrite <- c0, !Rpower_O; [apply Rle_refl | |] ].",
            "VernacExtend",
            "5920e31b2545428566cbd73c723a9fe6552ceb62"
        ],
        [
            "intros [a0 [ab|ab]].",
            "VernacExtend",
            "88d7feaa53f4258943f678752bd33d80461a09c4"
        ],
        [
            "now apply Rlt_le, Rlt_Rpower_l;[ | split]; lra.",
            "VernacExtend",
            "6f08a020822d5698a701e113343812063d6f95d4"
        ],
        [
            "rewrite ab; apply Rle_refl.",
            "VernacExtend",
            "9800517fbe5781d672c31ad34150072fb9aaaee4"
        ],
        [
            "apply Rlt_le_trans with a; tauto.",
            "VernacExtend",
            "560105a351651eb57985424d5bca9e71a46c9d4e"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition arcsinh x := ln (x + sqrt (x ^ 2 + 1)).",
            "VernacDefinition",
            "3dd65bf16366d9d1a0a11288808115466fae95e7"
        ],
        [
            "Lemma arcsinh_sinh : forall x, arcsinh (sinh x) = x.",
            "VernacStartTheoremProof",
            "9761a4b81c81dcb93133356a7d1e20efbf77227c"
        ],
        [
            "intros x; unfold sinh, arcsinh.",
            "VernacExtend",
            "c2c80cc64ab4617090139285feb6069c5b5b4cfd"
        ],
        [
            "assert (Rminus_eq_0 : forall r, r - r = 0) by (intros; ring).",
            "VernacExtend",
            "0bd08d9caee00349d484f7d970afa67cc5f333f0"
        ],
        [
            "rewrite <- exp_0, <- (Rminus_eq_0 x); unfold Rminus.",
            "VernacExtend",
            "539ef5c011384ac621cf485a8d5fab35fb0477c6"
        ],
        [
            "rewrite exp_plus.",
            "VernacExtend",
            "6d6e784db73c5ec39c5b67ce974fcd38b73e5738"
        ],
        [
            "match goal with |- context[sqrt ?a] => replace a with (((exp x + exp(-x))/2)^2) by field end.",
            "VernacExtend",
            "45909469ffe56545018458b5f1998a64f7a8dba0"
        ],
        [
            "rewrite sqrt_pow2; [|apply Rlt_le, Rmult_lt_0_compat;[apply Rplus_lt_0_compat; apply exp_pos | apply Rinv_0_lt_compat, Rlt_0_2]].",
            "VernacExtend",
            "b771179382b372abced9d6aab315e311d8ffeab5"
        ],
        [
            "match goal with |- context[ln ?a] => replace a with (exp x) by field end.",
            "VernacExtend",
            "aad31cabc4f919120631263f6f8c5160690845e5"
        ],
        [
            "rewrite ln_exp; reflexivity.",
            "VernacExtend",
            "8cfa97eeaa2051f46dac574a389019b864c4761e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sinh_arcsinh x : sinh (arcsinh x) = x.",
            "VernacStartTheoremProof",
            "eaf9afbd2f850142d777c8302fbc142dfdbf1ddf"
        ],
        [
            "unfold sinh, arcsinh.",
            "VernacExtend",
            "d94b72f22a02af268040e4d8c4811f1777e2b6c5"
        ],
        [
            "assert (cmp : 0 < x + sqrt (x ^ 2 + 1)).",
            "VernacExtend",
            "49ab5d542926e1d16c804a619261fc01d2175744"
        ],
        [
            "destruct (Rle_dec x 0).",
            "VernacExtend",
            "f38e751d5eca1e2050c998624b22ad757b7a78ad"
        ],
        [
            "replace (x ^ 2) with ((-x) ^ 2) by ring.",
            "VernacExtend",
            "c1121ec70290ff4e478ee5e06f21e980b2034e55"
        ],
        [
            "assert (sqrt ((- x) ^ 2) < sqrt ((-x)^2+1)).",
            "VernacExtend",
            "4b1d199485422d50d6634663de99e36ed56b04ac"
        ],
        [
            "apply sqrt_lt_1_alt.",
            "VernacExtend",
            "45b4cd2388d55c8102fb6e671b5e2b84734b7c99"
        ],
        [
            "split;[apply pow_le | ]; lra.",
            "VernacExtend",
            "0476b752ae5149c7edac9eae289195d5b5fe51a0"
        ],
        [
            "pattern x at 1; replace x with (- (sqrt ((- x) ^ 2))).",
            "VernacExtend",
            "1959a2c7a59c02589e58c1f18d1411a635782e69"
        ],
        [
            "assert (t:= sqrt_pos ((-x)^2)); lra.",
            "VernacExtend",
            "05c20c78dfc1eb4908fd1cf35f95e457eef355ec"
        ],
        [
            "simpl; rewrite Rmult_1_r, sqrt_square, Ropp_involutive;[reflexivity | lra].",
            "VernacExtend",
            "2b772bf255d2dc9081f21580853663f79e613461"
        ],
        [
            "apply Rplus_lt_le_0_compat;[apply Rnot_le_gt; assumption | apply sqrt_pos].",
            "VernacExtend",
            "0c8dea2a65f827ef886e7144c0c96ea4c580e288"
        ],
        [
            "rewrite exp_ln;[ | assumption].",
            "VernacExtend",
            "e756df4966bbac02478e0a34b500d8d21f795058"
        ],
        [
            "rewrite exp_Ropp, exp_ln;[ | assumption].",
            "VernacExtend",
            "589c554c13b3119aab21e28e09f8bee15429768a"
        ],
        [
            "assert (Rmult_minus_distr_r : forall x y z, (x - y) * z = x * z - y * z) by (intros; ring).",
            "VernacExtend",
            "b0a15e252aeceba1f0338116e83b4d1bdb426c3a"
        ],
        [
            "apply Rminus_diag_uniq; unfold Rdiv; rewrite Rmult_minus_distr_r.",
            "VernacExtend",
            "c17ba07d9fdaa58751e4ef47d598bb96ca2cf23b"
        ],
        [
            "assert (t: forall x y z, x - z = y -> x - y - z = 0);[ | apply t; clear t].",
            "VernacExtend",
            "2a8fff899f444d7aa4aab02fd076067bde69da6c"
        ],
        [
            "intros a b c H; rewrite <- H; ring.",
            "VernacExtend",
            "6e851adde0b5700a9bf5d4c379761a154e3b40a3"
        ],
        [
            "apply Rmult_eq_reg_l with (2 * (x + sqrt (x ^ 2 + 1)));[ | apply Rgt_not_eq, Rmult_lt_0_compat;[apply Rlt_0_2 | assumption]].",
            "VernacExtend",
            "77113853c09574eebfe47179e5a26873ec25fbe7"
        ],
        [
            "assert (pow2_sqrt : forall x, 0 <= x -> sqrt x ^ 2 = x) by (intros; simpl; rewrite Rmult_1_r, sqrt_sqrt; auto).",
            "VernacExtend",
            "291550623f6d405de1bc82c02939dec6d9ab66aa"
        ],
        [
            "field_simplify;[rewrite pow2_sqrt;[field | ] | apply Rgt_not_eq; lra].",
            "VernacExtend",
            "9d046f63b6c179f58f5b6b99b79343cb7d832f78"
        ],
        [
            "apply Rplus_le_le_0_compat;[simpl; rewrite Rmult_1_r; apply (Rle_0_sqr x)|apply Rlt_le, Rlt_0_1].",
            "VernacExtend",
            "3c196bb973227974c3c9a1761601a662ec4bcb10"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_arcsinh : forall x, derivable_pt_lim arcsinh x (/sqrt (x ^ 2 + 1)).",
            "VernacStartTheoremProof",
            "2a2c5b82c5a6e1baeddb4341a16398637489d9ae"
        ],
        [
            "intros x; unfold arcsinh.",
            "VernacExtend",
            "395bc308a5ce33341fedd98ae1471e8a0777a2c9"
        ],
        [
            "assert (0 < x + sqrt (x ^ 2 + 1)).",
            "VernacExtend",
            "48b5081925b29714e688a9fc556a32ade4391467"
        ],
        [
            "destruct (Rle_dec x 0); [ | assert (0 < x) by (apply Rnot_le_gt; assumption); apply Rplus_lt_le_0_compat; auto; apply sqrt_pos].",
            "VernacExtend",
            "772fd933d5876b6e8832b13e09aae4c5ca4cb108"
        ],
        [
            "replace (x ^ 2) with ((-x) ^ 2) by ring.",
            "VernacExtend",
            "c1121ec70290ff4e478ee5e06f21e980b2034e55"
        ],
        [
            "assert (sqrt ((- x) ^ 2) < sqrt ((-x)^2+1)).",
            "VernacExtend",
            "4b1d199485422d50d6634663de99e36ed56b04ac"
        ],
        [
            "apply sqrt_lt_1_alt.",
            "VernacExtend",
            "45b4cd2388d55c8102fb6e671b5e2b84734b7c99"
        ],
        [
            "split;[apply pow_le|]; lra.",
            "VernacExtend",
            "0476b752ae5149c7edac9eae289195d5b5fe51a0"
        ],
        [
            "pattern x at 1; replace x with (- (sqrt ((- x) ^ 2))).",
            "VernacExtend",
            "1959a2c7a59c02589e58c1f18d1411a635782e69"
        ],
        [
            "assert (t:= sqrt_pos ((-x)^2)); lra.",
            "VernacExtend",
            "05c20c78dfc1eb4908fd1cf35f95e457eef355ec"
        ],
        [
            "simpl; rewrite Rmult_1_r, sqrt_square, Ropp_involutive; auto; lra.",
            "VernacExtend",
            "79a5ff467ac700bdce20a0bfc6dc05f9d8bff7c6"
        ],
        [
            "assert (0 < x ^ 2 + 1).",
            "VernacExtend",
            "73643d0083989015958067bc2d5959efb7d8761d"
        ],
        [
            "apply Rplus_le_lt_0_compat;[simpl; rewrite Rmult_1_r; apply Rle_0_sqr|lra].",
            "VernacExtend",
            "e63f69ebbb1044628982a44836febaaf9a424ff8"
        ],
        [
            "replace (/sqrt (x ^ 2 + 1)) with (/(x + sqrt (x ^ 2 + 1)) * (1 + (/(2 * sqrt (x ^ 2 + 1)) * (INR 2 * x ^ 1 + 0)))).",
            "VernacExtend",
            "003ce467eaf4e641942986242ce7b4132080d627"
        ],
        [
            "apply (derivable_pt_lim_comp (fun x => x + sqrt (x ^ 2 + 1)) ln).",
            "VernacExtend",
            "9fdf20069eada786c5f6d64c8adebb01e0f99821"
        ],
        [
            "apply (derivable_pt_lim_plus).",
            "VernacExtend",
            "0ff92de56586834c2b5893a998ecf9b0d0c93d06"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "apply (derivable_pt_lim_comp (fun x => x ^ 2 + 1) sqrt x).",
            "VernacExtend",
            "ff9af048164cedcc9c45d36fc705d1bfb87d160f"
        ],
        [
            "apply derivable_pt_lim_plus.",
            "VernacExtend",
            "0ff92de56586834c2b5893a998ecf9b0d0c93d06"
        ],
        [
            "apply derivable_pt_lim_pow.",
            "VernacExtend",
            "9bbe3c9d12dbbc63415b9b2003584896ab11f729"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "apply derivable_pt_lim_sqrt; assumption.",
            "VernacExtend",
            "28cc51b1645bc1ae7766c457c58fb276c9877379"
        ],
        [
            "apply derivable_pt_lim_ln; assumption.",
            "VernacExtend",
            "75056d8079ec5d27d05eabf518ce612cc7bb1b1b"
        ],
        [
            "replace (INR 2 * x ^ 1 + 0) with (2 * x) by (simpl; ring).",
            "VernacExtend",
            "2b31e9959cb37717b8a55ade662afd7764764945"
        ],
        [
            "replace (1 + / (2 * sqrt (x ^ 2 + 1)) * (2 * x)) with (((sqrt (x ^ 2 + 1) + x))/sqrt (x ^ 2 + 1)); [ | field; apply Rgt_not_eq, sqrt_lt_R0; assumption].",
            "VernacExtend",
            "b6f5d92f0969e8f2cd7a10c7d473fa48fd080874"
        ],
        [
            "apply Rmult_eq_reg_l with (x + sqrt (x ^ 2 + 1)); [ | apply Rgt_not_eq; assumption].",
            "VernacExtend",
            "5513150661b88ef08555d163bd1225f5ada1a5f5"
        ],
        [
            "rewrite <- Rmult_assoc, Rinv_r;[field | ]; apply Rgt_not_eq; auto; apply sqrt_lt_R0; assumption.",
            "VernacExtend",
            "e2ab31adc0cc8fe645687a5d9bb932e71948f301"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma arcsinh_lt : forall x y, x < y -> arcsinh x < arcsinh y.",
            "VernacStartTheoremProof",
            "aad575f304fc17fb379428775f1ab6322a10892c"
        ],
        [
            "intros x y xy.",
            "VernacExtend",
            "2fe609d86b1b775f790630ee19a088e53db616c5"
        ],
        [
            "case (Rle_dec (arcsinh y) (arcsinh x));[ | apply Rnot_le_lt ].",
            "VernacExtend",
            "51190c14827407393770a445ea3cdfcf33870500"
        ],
        [
            "intros abs; case (Rlt_not_le _ _ xy).",
            "VernacExtend",
            "e2379d2e8d407614e3ce89ed6c6f6a160722ec21"
        ],
        [
            "rewrite <- (sinh_arcsinh y), <- (sinh_arcsinh x).",
            "VernacExtend",
            "6b60ca4d9fb008b404555112f57fe0a8b9cdf495"
        ],
        [
            "destruct abs as [lt | q];[| rewrite q; lra].",
            "VernacExtend",
            "592d02a60bad243aa5a2bad5dfdbf8074735d1e0"
        ],
        [
            "apply Rlt_le, sinh_lt; assumption.",
            "VernacExtend",
            "91dfe4663042b0ddd098c699b02cc639901c80c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma arcsinh_le : forall x y, x <= y -> arcsinh x <= arcsinh y.",
            "VernacStartTheoremProof",
            "bf5fbfd03730f40a9af2ed51a3848efd6e5757f4"
        ],
        [
            "intros x y [xy | xqy].",
            "VernacExtend",
            "28658b5e28bdfa4ca6654cf6531634e693550c80"
        ],
        [
            "apply Rlt_le, arcsinh_lt; assumption.",
            "VernacExtend",
            "0fc8da3820ab8a5eace7f75a4fcbfb682e561567"
        ],
        [
            "rewrite xqy; apply Rle_refl.",
            "VernacExtend",
            "84644653ac858129517e481eee6236ee63ee7ef4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma arcsinh_0 : arcsinh 0 = 0.",
            "VernacStartTheoremProof",
            "89ef626e309f72af7542c46e9f04a17c8b391ee8"
        ],
        [
            "unfold arcsinh; rewrite pow_ne_zero, !Rplus_0_l, sqrt_1, ln_1; [reflexivity | discriminate].",
            "VernacExtend",
            "f9470362d430576178f29e2a29d440661accfce3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "P_Rmin",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "intros P x y H1 H2; unfold Rmin; case (Rle_dec x y); intro; assumption.",
                        "VernacExtend",
                        "7af52172f2a13e40c5e861d163ca4a4cfdab9ce5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_le_3",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "assert (exp_1 : exp 1 <> 0).",
                        "VernacExtend",
                        "8c091d15e59312b287d431a87d0e475be090c029"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := exp_pos 1); red; intro; rewrite H in H0; elim (Rlt_irrefl _ H0).",
                        "VernacExtend",
                        "8bf7bc5ad5daeae2bdd89e21240d07e024b1532b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (/ exp 1).",
                        "VernacExtend",
                        "56deef6539b3f7d09a79c7d98ac1a4f66d899e2e"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply exp_pos.",
                        "VernacExtend",
                        "280ba9bdb9359979ee3025bf636453df3add9203"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "6dcb59ca5b85038cc8fddd44b4afdcbe28fba0ba"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (/ 3).",
                        "VernacExtend",
                        "1ede6e26760917261771a58bbf65b07b1742214a"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup0.",
                        "VernacExtend",
                        "ee74bd033c1031a79ef440e1d41037d5c9648214"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; rewrite <- (Rmult_comm 3); rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "0afd839e5e7fc4e3bfcae9158996730c4ebef931"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; replace (/ exp 1) with (exp (-1)).",
                        "VernacExtend",
                        "b3f1bb05fc8add5003525ac34b3a1251a5052c2f"
                    ]
                },
                {
                    "command": [
                        "unfold exp; case (exist_exp (-1)) as (?,e); simpl in |- *; unfold exp_in in e; assert (H := alternated_series_ineq (fun i:nat => / INR (fact i)) x 1).",
                        "VernacExtend",
                        "3dd30b9eb670119dc3a2fbf2e13c326f058c7919"
                    ]
                },
                {
                    "command": [
                        "cut (sum_f_R0 (tg_alt (fun i:nat => / INR (fact i))) (S (2 * 1)) <= x <= sum_f_R0 (tg_alt (fun i:nat => / INR (fact i))) (2 * 1)).",
                        "VernacExtend",
                        "2c721d3c1c6aac0108006b38e8559a8b3a977477"
                    ]
                },
                {
                    "command": [
                        "intro; elim H0; clear H0; intros H0 _; simpl in H0; unfold tg_alt in H0; simpl in H0.",
                        "VernacExtend",
                        "0646d6d22e53d96a7605f76ebbed49fd90753edc"
                    ]
                },
                {
                    "command": [
                        "replace (/ 3) with (1 * / 1 + -1 * 1 * / 1 + -1 * (-1 * 1) * / 2 + -1 * (-1 * (-1 * 1)) * / (2 + 1 + 1 + 1 + 1)) by field.",
                        "VernacExtend",
                        "a4b64ec174951300140889bdb96ad663db6aa8dd"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "unfold Un_decreasing; intros; apply Rmult_le_reg_l with (INR (fact n)).",
                        "VernacExtend",
                        "ae896b9a80ee4784c39902e04c942bba9510ebac"
                    ]
                },
                {
                    "command": [
                        "apply INR_fact_lt_0.",
                        "VernacExtend",
                        "3f8251d5a5503bb665832e6a37692a2bc449430d"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (INR (fact (S n))).",
                        "VernacExtend",
                        "1bef0754fb29201583f19dc8196bec13cef8b0dc"
                    ]
                },
                {
                    "command": [
                        "apply INR_fact_lt_0.",
                        "VernacExtend",
                        "3f8251d5a5503bb665832e6a37692a2bc449430d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "2ca74255a63c294f9442d956f32a2e3784636efb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; rewrite Rmult_comm; rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "85fd96d3c33499db8957e5cd7a4219083c6e9bd9"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; apply le_INR; apply fact_le; apply le_n_Sn.",
                        "VernacExtend",
                        "a80d39a5f26a10417515e69be409c83758499723"
                    ]
                },
                {
                    "command": [
                        "apply INR_fact_neq_0.",
                        "VernacExtend",
                        "9f4443217b6f3c8f07648392448a37630452a203"
                    ]
                },
                {
                    "command": [
                        "apply INR_fact_neq_0.",
                        "VernacExtend",
                        "9f4443217b6f3c8f07648392448a37630452a203"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := cv_speed_pow_fact 1); unfold Un_cv; unfold Un_cv in H0; intros; elim (H0 _ H1); intros; exists x0; intros; unfold R_dist in H2; unfold R_dist; replace (/ INR (fact n)) with (1 ^ n / INR (fact n)).",
                        "VernacExtend",
                        "b441fed067634dc5c7577d5fb6b1274a2f3c1368"
                    ]
                },
                {
                    "command": [
                        "apply (H2 _ H3).",
                        "VernacExtend",
                        "778907207a575c5ee439f41d2bf802bcb2573452"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite pow1; rewrite Rmult_1_l; reflexivity.",
                        "VernacExtend",
                        "4463d349c19f82c3773c0d71146ab957544e8e8f"
                    ]
                },
                {
                    "command": [
                        "unfold infinite_sum in e; unfold Un_cv, tg_alt; intros; elim (e _ H0); intros; exists x0; intros; replace (sum_f_R0 (fun i:nat => (-1) ^ i * / INR (fact i)) n) with (sum_f_R0 (fun i:nat => / INR (fact i) * (-1) ^ i) n).",
                        "VernacExtend",
                        "63135d1dea8d1eaddeba4a664c8c73afc9604408"
                    ]
                },
                {
                    "command": [
                        "apply (H1 _ H2).",
                        "VernacExtend",
                        "b62ebed2b51d91f8e1b80571662113711aeb1ce2"
                    ]
                },
                {
                    "command": [
                        "apply sum_eq; intros; apply Rmult_comm.",
                        "VernacExtend",
                        "9a4c3da8cd66d70176d28c2d5fb1d1c1499a817e"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (exp 1).",
                        "VernacExtend",
                        "46dcb91f265e5647f1ea7f53d988195b90137604"
                    ]
                },
                {
                    "command": [
                        "rewrite <- exp_plus; rewrite Rplus_opp_r; rewrite exp_0; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "fc0e95a0b103ba3f1ebdef54a5a099347fa1a7e6"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_increasing",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "intros x y H.",
                        "VernacExtend",
                        "c7ef450aa0313460779fba50c0edf4486e0c7fe4"
                    ]
                },
                {
                    "command": [
                        "assert (H0 : derivable exp).",
                        "VernacExtend",
                        "2b1f814d04124b602ed35a2d31eed61379a618fc"
                    ]
                },
                {
                    "command": [
                        "apply derivable_exp.",
                        "VernacExtend",
                        "a547cefa11463a91ea5aba7e79870eb39c69a256"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := positive_derivative _ H0).",
                        "VernacExtend",
                        "0b796eeb6d53ec1bfd99c1fcff9102b2a6c2135a"
                    ]
                },
                {
                    "command": [
                        "unfold strict_increasing in H1.",
                        "VernacExtend",
                        "c0ca2b933133328f56e89c24777543c51eb957c0"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "replace (derive_pt exp x0 (H0 x0)) with (exp x0).",
                        "VernacExtend",
                        "b251f95cf68603e191c0d1bc415c2dea7d6934d2"
                    ]
                },
                {
                    "command": [
                        "apply exp_pos.",
                        "VernacExtend",
                        "e7aede1d8dff8d25c884324d0860ea3be851262c"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply derive_pt_eq_0.",
                        "VernacExtend",
                        "12b6a7d2208f57bf3677a9d970d83b022d4f93fd"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_lim_exp x0).",
                        "VernacExtend",
                        "16b0d885b9a284eae5f842f530af36c216407715"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_lt_inv",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "intros x y H; case (Rtotal_order x y); [ intros H1 | intros [H1| H1] ].",
                        "VernacExtend",
                        "8905535f19ff8eb31ccfca276f7e7ede1868d7c9"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "ce639789d65459f4cd7f751b803b78b31b4a7321"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := exp_increasing _ _ H1).",
                        "VernacExtend",
                        "49ebaa319e92fdb4e5afc5b9774356e46175f9bd"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rlt_trans _ _ _ H H2)).",
                        "VernacExtend",
                        "7c61cc9603e9942bb9d3a9800b1107a646eeb078"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_ineq1",
            "line_nb": 76,
            "steps": [
                {
                    "command": [
                        "intros; apply Rplus_lt_reg_l with (- exp 0); rewrite <- (Rplus_comm (exp x)); assert (H0 := MVT_cor1 exp 0 x derivable_exp H); elim H0; intros; elim H1; intros; unfold Rminus in H2; rewrite H2; rewrite Ropp_0; rewrite Rplus_0_r; replace (derive_pt exp x0 (derivable_exp x0)) with (exp x0).",
                        "VernacExtend",
                        "55333ad9ebf08ee1338baf29a0353819ec7b6d19"
                    ]
                },
                {
                    "command": [
                        "rewrite exp_0; rewrite <- Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_l; pattern x at 1; rewrite <- Rmult_1_r; rewrite (Rmult_comm (exp x0)); apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "758c32920edafae3a25400221268b2df4046faa5"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite <- exp_0; apply exp_increasing; elim H3; intros; assumption.",
                        "VernacExtend",
                        "f866770ffdc78049a757e60675c936c017e1fc49"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply derive_pt_eq_0; apply derivable_pt_lim_exp.",
                        "VernacExtend",
                        "e247639c39bde0dcdba22d7fdc717040f7e8d2b8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_exists1",
            "line_nb": 83,
            "steps": [
                {
                    "command": [
                        "intros; set (f := fun x:R => exp x - y).",
                        "VernacExtend",
                        "261259d8e26b27b9f88d16683060036600106890"
                    ]
                },
                {
                    "command": [
                        "assert (H0 : 0 < y) by (apply Rlt_le_trans with 1; auto with real).",
                        "VernacExtend",
                        "118fe75cd1a4f17060e1838c7cb326f209e43407"
                    ]
                },
                {
                    "command": [
                        "cut (f 0 <= 0); [intro H1|].",
                        "VernacExtend",
                        "9f66c8dc12fd5ddd3df82df0ca103b2ee027bdf9"
                    ]
                },
                {
                    "command": [
                        "cut (continuity f); [intro H2|].",
                        "VernacExtend",
                        "d69fada07b3dd39936081befa1df3c0dc9461ecf"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= f y); [intro H3|].",
                        "VernacExtend",
                        "35f7c71d2afc9603022fa82782141dd26ca88f59"
                    ]
                },
                {
                    "command": [
                        "cut (f 0 * f y <= 0); [intro H4|].",
                        "VernacExtend",
                        "5f9e04ca562d993a53e918e5750239b46fe716ed"
                    ]
                },
                {
                    "command": [
                        "pose proof (IVT_cor f 0 y H2 (Rlt_le _ _ H0) H4) as (t,(_,H7)); exists t; unfold f in H7; apply Rminus_diag_uniq_sym; exact H7.",
                        "VernacExtend",
                        "bfb7f664a49f55d34c3742c7b4fb121670676c30"
                    ]
                },
                {
                    "command": [
                        "pattern 0 at 2; rewrite <- (Rmult_0_r (f y)); rewrite (Rmult_comm (f 0)); apply Rmult_le_compat_l; assumption.",
                        "VernacExtend",
                        "56847fdc3892ce9fe3e7074c7e38f5daa754d16d"
                    ]
                },
                {
                    "command": [
                        "unfold f; apply Rplus_le_reg_l with y; left; apply Rlt_trans with (1 + y).",
                        "VernacExtend",
                        "8653ac335bd3215ab887a4f2176adf9544933473"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rplus_comm y); apply Rplus_lt_compat_l; apply Rlt_0_1.",
                        "VernacExtend",
                        "7d19f3454bf0e63bc4b626af6cd0031ce4deba60"
                    ]
                },
                {
                    "command": [
                        "replace (y + (exp y - y)) with (exp y); [ apply (exp_ineq1 y H0) | ring ].",
                        "VernacExtend",
                        "6350005e870e8989d8824a3630e011ed81c9cb84"
                    ]
                },
                {
                    "command": [
                        "unfold f; change (continuity (exp - fct_cte y)); apply continuity_minus; [ apply derivable_continuous; apply derivable_exp | apply derivable_continuous; apply derivable_const ].",
                        "VernacExtend",
                        "519706041ad3d6fd308aae9680396f220eaff4f9"
                    ]
                },
                {
                    "command": [
                        "unfold f; rewrite exp_0; apply Rplus_le_reg_l with y; rewrite Rplus_0_r; replace (y + (1 - y)) with 1; [ apply H | ring ].",
                        "VernacExtend",
                        "2424bde24e9ecadad3d98959e08145c612bb342f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_exists",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Rle_dec 1 y) as [Hle|Hnle].",
                        "VernacExtend",
                        "fd33ff4ac7c00d50711440c6285d19d3b0509c89"
                    ]
                },
                {
                    "command": [
                        "apply (ln_exists1 _ Hle).",
                        "VernacExtend",
                        "323288d02d564f47bfde08ba021483971b25b06a"
                    ]
                },
                {
                    "command": [
                        "assert (H0 : 1 <= / y).",
                        "VernacExtend",
                        "bcba876be9572053b176601123aaf364feda9a57"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with y.",
                        "VernacExtend",
                        "b8bf5ddf442969c27c7a879fc05194f5d88a294f"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "2ca74255a63c294f9442d956f32a2e3784636efb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; left; apply (Rnot_le_lt _ _ Hnle).",
                        "VernacExtend",
                        "d7e96308d551846b81ff11d6358ef68498aa1292"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H0 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "a3b8d79f0b022a5fb14cf5ffb39b90b81bade351"
                    ]
                },
                {
                    "command": [
                        "destruct (ln_exists1 _ H0) as (x,p); exists (- x); apply Rmult_eq_reg_l with (exp x / y).",
                        "VernacExtend",
                        "a3811ac3eff4b7aa692db9ba6c37d16cd39a5014"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "900fd0407b050267a745f708459d99196bbb8c6e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; rewrite <- (Rmult_comm (/ y)); rewrite Rmult_assoc; rewrite <- exp_plus; rewrite Rplus_opp_r; rewrite exp_0; rewrite Rmult_1_r; symmetry ; apply p.",
                        "VernacExtend",
                        "f9276cdec8b276bd3c231fa2a4ca8f0c6753c2d6"
                    ]
                },
                {
                    "command": [
                        "red; intro H3; rewrite H3 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "5efe63a0dd2e9a350830ed483f79b06591cda509"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply prod_neq_R0.",
                        "VernacExtend",
                        "bae86043f3acfd4aeb1f77f1138e1172ace3c7fa"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := exp_pos x); red; intro H4; rewrite H4 in H3; elim (Rlt_irrefl _ H3).",
                        "VernacExtend",
                        "f775ef2b5ad01c606267464b7663c0f88e7c27fb"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; red; intro H3; rewrite H3 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "3290aed3b0ec1d7653e07739ee09b5a72338f238"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_ln",
            "line_nb": 117,
            "steps": [
                {
                    "command": [
                        "intros; unfold ln; decide (Rlt_dec 0 x) with H.",
                        "VernacExtend",
                        "1c582e08c55a1eab9416c3c9219cbaf4cca26234"
                    ]
                },
                {
                    "command": [
                        "unfold Rln; case (ln_exists (mkposreal x H) (cond_pos (mkposreal x H))) as (?,Hex).",
                        "VernacExtend",
                        "42d6108843b85a45f4cb51f1637e9df81654b675"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply Hex.",
                        "VernacExtend",
                        "0ec67e4b9d1665055b3252fc8ffaaf11975cb237"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_inv",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "intros x y H; case (Rtotal_order x y); [ intros H1 | intros [H1| H1] ]; auto; assert (H2 := exp_increasing _ _ H1); rewrite H in H2; elim (Rlt_irrefl _ H2).",
                        "VernacExtend",
                        "07497f02078ba48ce256f17c7c88431ae13b774f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exp_Ropp",
            "line_nb": 125,
            "steps": [
                {
                    "command": [
                        "intros x; assert (H : exp x <> 0).",
                        "VernacExtend",
                        "02500f50b7be30709a0cd90a0259bab24df139ee"
                    ]
                },
                {
                    "command": [
                        "assert (H := exp_pos x); red; intro; rewrite H0 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "fb2e5a084219d47be68a8fe7db51a6b57aab7eee"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (r := exp x).",
                        "VernacExtend",
                        "a736df2e3bb3fd174b0751a3c2014dd2716512de"
                    ]
                },
                {
                    "command": [
                        "rewrite <- exp_plus; rewrite Rplus_opp_r; rewrite exp_0.",
                        "VernacExtend",
                        "879cc06507e6f17a90eb636f333d83ed933cb817"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_r_sym.",
                        "VernacExtend",
                        "1c8e4cc12ed17eb612dd91541aa8d37d81cbfbbd"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_increasing",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "intros x y H H0; apply exp_lt_inv.",
                        "VernacExtend",
                        "8f74239ac66bcbe5ebe5fe02c111c2b69f8d78b7"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite exp_ln.",
                        "VernacExtend",
                        "e7b2520b467063db95dd0195ee226c1649f4387c"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with x; assumption.",
                        "VernacExtend",
                        "b083e59fe6cabd1254edc4e61b928a804ddd5e37"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_exp",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "intros x; apply exp_inv.",
                        "VernacExtend",
                        "6ea937da0c3799fc7afd45cfb7b3f908b6f40186"
                    ]
                },
                {
                    "command": [
                        "apply exp_ln.",
                        "VernacExtend",
                        "99794e26d4b566c0ba5df86982a4975b6dde0647"
                    ]
                },
                {
                    "command": [
                        "apply exp_pos.",
                        "VernacExtend",
                        "e7aede1d8dff8d25c884324d0860ea3be851262c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_1",
            "line_nb": 146,
            "steps": [
                {
                    "command": [
                        "rewrite <- exp_0; rewrite ln_exp; reflexivity.",
                        "VernacExtend",
                        "492a46b525bb143d961572797b2fbc2af4cf3ba3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_lt_inv",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "intros x y H H0 H1; rewrite <- (exp_ln x); try rewrite <- (exp_ln y).",
                        "VernacExtend",
                        "1e09478c406c5011c71ecba977db0f0058307374"
                    ]
                },
                {
                    "command": [
                        "apply exp_increasing; apply H1.",
                        "VernacExtend",
                        "40a6274685006d3814df02ff592233cb6e0b06a3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_inv",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "intros x y H H0 H'0; case (Rtotal_order x y); [ intros H1 | intros [H1| H1] ]; auto.",
                        "VernacExtend",
                        "41ac8da12eb69610345911d8a36db46e3225d32a"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := ln_increasing _ _ H H1); rewrite H'0 in H2; elim (Rlt_irrefl _ H2).",
                        "VernacExtend",
                        "c19ad6063b6d18b791af4e99ab348b1472570925"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := ln_increasing _ _ H0 H1); rewrite H'0 in H2; elim (Rlt_irrefl _ H2).",
                        "VernacExtend",
                        "00292971b11bae522ac116d83f94877b9bab0b52"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_mult",
            "line_nb": 160,
            "steps": [
                {
                    "command": [
                        "intros x y H H0; apply exp_inv.",
                        "VernacExtend",
                        "c78aaea15989af1587c5e1d7efbddc2433d11a4c"
                    ]
                },
                {
                    "command": [
                        "rewrite exp_plus.",
                        "VernacExtend",
                        "6d6e784db73c5ec39c5b67ce974fcd38b73e5738"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite exp_ln.",
                        "VernacExtend",
                        "e7b2520b467063db95dd0195ee226c1649f4387c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; assumption.",
                        "VernacExtend",
                        "d1d629dd8069519c8644f4d7cf7d1ca7faab5a6a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_Rinv",
            "line_nb": 169,
            "steps": [
                {
                    "command": [
                        "intros x H; apply exp_inv; repeat rewrite exp_ln || rewrite exp_Ropp.",
                        "VernacExtend",
                        "9ebdb0cbd72f695bf0bd45adc254b7ececc3a260"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_continue",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "intros y H.",
                        "VernacExtend",
                        "b13857a6f2921c7c94ecf876feb0c6ba8a8482cf"
                    ]
                },
                {
                    "command": [
                        "unfold continue_in, limit1_in, limit_in; intros eps Heps.",
                        "VernacExtend",
                        "859148fc4f4472b0e6985b20be426452b8326902"
                    ]
                },
                {
                    "command": [
                        "cut (1 < exp eps); [ intros H1 | idtac ].",
                        "VernacExtend",
                        "79f68e387cb90bf17ad2dc778f61c31535b04900"
                    ]
                },
                {
                    "command": [
                        "cut (exp (- eps) < 1); [ intros H2 | idtac ].",
                        "VernacExtend",
                        "9771e337b6e452840182bba9fc470ce787aafceb"
                    ]
                },
                {
                    "command": [
                        "exists (Rmin (y * (exp eps - 1)) (y * (1 - exp (- eps)))); split.",
                        "VernacExtend",
                        "d294dccf2dc870ee7b14dd7c9cc83284bf3a1721"
                    ]
                },
                {
                    "command": [
                        "red; apply P_Rmin.",
                        "VernacExtend",
                        "1e701b74ef1ad754cc28513c85aac78523af486e"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with 1.",
                        "VernacExtend",
                        "6f34a15f131045fe27932d7dd416a942af5d7ff9"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (1 + (exp eps - 1)) with (exp eps); [ apply H1 | ring ].",
                        "VernacExtend",
                        "a202854483e335a1bafaf789cea9d05d8bf955f8"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (exp (- eps)).",
                        "VernacExtend",
                        "3262e60db565b8ec9e90b5a09f986e0bbb464006"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (exp (- eps) + (1 - exp (- eps))) with 1; [ apply H2 | ring ].",
                        "VernacExtend",
                        "e9d51fe692f10e6bef25a45a259558a87d328102"
                    ]
                },
                {
                    "command": [
                        "unfold dist, R_met, R_dist; simpl.",
                        "VernacExtend",
                        "5acd675bdef4701f312daaff9b57588434218cf3"
                    ]
                },
                {
                    "command": [
                        "intros x [[H3 H4] H5].",
                        "VernacExtend",
                        "8a50c7fb24a2a7bda7d74cb10e73027a0e06c143"
                    ]
                },
                {
                    "command": [
                        "cut (y * (x * / y) = x).",
                        "VernacExtend",
                        "b87d88ad98f92314be28c38d9fb6473599a47c19"
                    ]
                },
                {
                    "command": [
                        "intro Hxyy.",
                        "VernacExtend",
                        "953fc2b342a0339e855754e9f1547a9930929f43"
                    ]
                },
                {
                    "command": [
                        "replace (ln x - ln y) with (ln (x * / y)).",
                        "VernacExtend",
                        "8f6daa04224852a1468e30971db012bbbb0de3cb"
                    ]
                },
                {
                    "command": [
                        "case (Rtotal_order x y); [ intros Hxy | intros [Hxy| Hxy] ].",
                        "VernacExtend",
                        "77031512c9c1976ca829b7cd8ae6de97a33f07d3"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_left.",
                        "VernacExtend",
                        "e4f86365ea2cd6f894fbc670197f200cadc12a6c"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel; rewrite Ropp_involutive.",
                        "VernacExtend",
                        "e845ad992fede3b4aa9c0de4b65f3a9145f87f2b"
                    ]
                },
                {
                    "command": [
                        "apply exp_lt_inv.",
                        "VernacExtend",
                        "54122c56a90a857136a1f26dee93cad6533904d0"
                    ]
                },
                {
                    "command": [
                        "rewrite exp_ln.",
                        "VernacExtend",
                        "e0d05ba5e54e444d4ee2301090c30aee5255afc4"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (r := y).",
                        "VernacExtend",
                        "2c07685c7bf099b13ad263aa8091e0d264d82828"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite Hxyy.",
                        "VernacExtend",
                        "88d91bce35cc9e5fa1f90cc377641b6e7abad3b1"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel.",
                        "VernacExtend",
                        "9b0daa4a36df0c9a309eebcfa294d3bffe6b52b2"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (r := y).",
                        "VernacExtend",
                        "aa7eff4885d279544ffe0f3ab7bdb74e22afb7aa"
                    ]
                },
                {
                    "command": [
                        "replace (y + - (y * exp (- eps))) with (y * (1 - exp (- eps))); [ idtac | ring ].",
                        "VernacExtend",
                        "f80d8ed0a2f79d5bacbd1b7c2796bc8fea9cf0fb"
                    ]
                },
                {
                    "command": [
                        "replace (y + - x) with (Rabs (x - y)).",
                        "VernacExtend",
                        "09710ad0a1e3b63b1eaabd8d63a44fd9d8293c8e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := H5); apply Rmin_r.",
                        "VernacExtend",
                        "820164b9d7bdea45163a47a1ed55f30d61c7cad5"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_left; [ ring | idtac ].",
                        "VernacExtend",
                        "02b445c807df398c5dcc399873ff7add3328349f"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_minus _ _ Hxy).",
                        "VernacExtend",
                        "15509cec99a33595fdbf5c0e79eb93e72d1ad904"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; [ apply H3 | apply (Rinv_0_lt_compat _ H) ].",
                        "VernacExtend",
                        "de210cae11f74b909924e499c5703135ecfde340"
                    ]
                },
                {
                    "command": [
                        "rewrite <- ln_1.",
                        "VernacExtend",
                        "c577fcc736cc7376d4a8ac941e60651e452e3dad"
                    ]
                },
                {
                    "command": [
                        "apply ln_increasing.",
                        "VernacExtend",
                        "a0b0912d7f10a9c69ccaf4e66f4aa3c1ed788a8b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; [ apply H3 | apply (Rinv_0_lt_compat _ H) ].",
                        "VernacExtend",
                        "de210cae11f74b909924e499c5703135ecfde340"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (r := y).",
                        "VernacExtend",
                        "2c07685c7bf099b13ad263aa8091e0d264d82828"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite Hxyy; rewrite Rmult_1_r; apply Hxy.",
                        "VernacExtend",
                        "9f3547a15e44c91654b12a2c349be67649d9def9"
                    ]
                },
                {
                    "command": [
                        "rewrite Hxy; rewrite Rinv_r.",
                        "VernacExtend",
                        "7c385cff60198ef282cf7f2d5b886e9ac2aa83f2"
                    ]
                },
                {
                    "command": [
                        "rewrite ln_1; rewrite Rabs_R0; apply Heps.",
                        "VernacExtend",
                        "87310ae7caae78c348cb0dae156cecb8adcab159"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H0 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "a3b8d79f0b022a5fb14cf5ffb39b90b81bade351"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right.",
                        "VernacExtend",
                        "9b60731d6b608338747f09fec19f24d12baad022"
                    ]
                },
                {
                    "command": [
                        "apply exp_lt_inv.",
                        "VernacExtend",
                        "54122c56a90a857136a1f26dee93cad6533904d0"
                    ]
                },
                {
                    "command": [
                        "rewrite exp_ln.",
                        "VernacExtend",
                        "e0d05ba5e54e444d4ee2301090c30aee5255afc4"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (r := y).",
                        "VernacExtend",
                        "2c07685c7bf099b13ad263aa8091e0d264d82828"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite Hxyy.",
                        "VernacExtend",
                        "88d91bce35cc9e5fa1f90cc377641b6e7abad3b1"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (r := - y).",
                        "VernacExtend",
                        "93155e02d5ec030f7a342be55300c471a34aaafe"
                    ]
                },
                {
                    "command": [
                        "replace (- y + y * exp eps) with (y * (exp eps - 1)); [ idtac | ring ].",
                        "VernacExtend",
                        "f7e45b9ed1ccff8082c7142e126e7dc1240835ae"
                    ]
                },
                {
                    "command": [
                        "replace (- y + x) with (Rabs (x - y)).",
                        "VernacExtend",
                        "cadb0ab1e6db737ec39f5920539d4344582f80c6"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := H5); apply Rmin_l.",
                        "VernacExtend",
                        "73fded21da70ae1b29d0b2e850b2e4ea31c46844"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right; [ ring | idtac ].",
                        "VernacExtend",
                        "ab16abe7c3e046e7e14364897bd20f6387536898"
                    ]
                },
                {
                    "command": [
                        "left; apply (Rgt_minus _ _ Hxy).",
                        "VernacExtend",
                        "811710ac5652cdf6591f8ecb804cf8928d12f733"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; [ apply H3 | apply (Rinv_0_lt_compat _ H) ].",
                        "VernacExtend",
                        "de210cae11f74b909924e499c5703135ecfde340"
                    ]
                },
                {
                    "command": [
                        "rewrite <- ln_1.",
                        "VernacExtend",
                        "c577fcc736cc7376d4a8ac941e60651e452e3dad"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_ge; red; apply ln_increasing.",
                        "VernacExtend",
                        "b901c979337b848058fd3ba3f3ab2b4fa148b633"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_0_1.",
                        "VernacExtend",
                        "c3f675388bf844e0740197fd71afa66e5eef091d"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (r := y).",
                        "VernacExtend",
                        "2c07685c7bf099b13ad263aa8091e0d264d82828"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite Hxyy; rewrite Rmult_1_r; apply Hxy.",
                        "VernacExtend",
                        "9f3547a15e44c91654b12a2c349be67649d9def9"
                    ]
                },
                {
                    "command": [
                        "rewrite ln_mult.",
                        "VernacExtend",
                        "fba50873cbd53de3025929c9a6b21577222c2f2b"
                    ]
                },
                {
                    "command": [
                        "rewrite ln_Rinv.",
                        "VernacExtend",
                        "573fa76c34b0d9a77b2be5d4a2e74424bc18e033"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm x); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "65125e91164c30c19db2f73062694134c5571afc"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H0 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "a3b8d79f0b022a5fb14cf5ffb39b90b81bade351"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (exp eps).",
                        "VernacExtend",
                        "76bb12351eb96de112c5bbad6ed83fccd25d3cb2"
                    ]
                },
                {
                    "command": [
                        "apply exp_pos.",
                        "VernacExtend",
                        "e7aede1d8dff8d25c884324d0860ea3be851262c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- exp_plus; rewrite Rmult_1_r; rewrite Rplus_opp_r; rewrite exp_0; apply H1.",
                        "VernacExtend",
                        "d5adcb789aae28836a0adc7f1b8b066d7c163fb0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- exp_0.",
                        "VernacExtend",
                        "5ebe08af145ce436ca37dc2ffc7a33d24c9cbd67"
                    ]
                },
                {
                    "command": [
                        "apply exp_increasing; apply Heps.",
                        "VernacExtend",
                        "fcb4e11addc23d077f09f33b4ca1414f42244ff8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rpower_plus",
            "line_nb": 256,
            "steps": [
                {
                    "command": [
                        "intros x y z; unfold Rpower.",
                        "VernacExtend",
                        "40dfa6e457eee3d63bb4ff223e2fb8a6d55e4e26"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_plus_distr_r; rewrite exp_plus; auto.",
                        "VernacExtend",
                        "ea77e1b07db23eb3c96c22823ef430fc929d459a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rpower_mult",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "intros x y z; unfold Rpower.",
                        "VernacExtend",
                        "40dfa6e457eee3d63bb4ff223e2fb8a6d55e4e26"
                    ]
                },
                {
                    "command": [
                        "rewrite ln_exp.",
                        "VernacExtend",
                        "b94cc8096f2d78a8e6d9ebdc428927c745fbdb88"
                    ]
                },
                {
                    "command": [
                        "replace (z * (y * ln x)) with (y * z * ln x).",
                        "VernacExtend",
                        "1908503e1711f053f7570d69e4f717f3f72499a4"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rpower_O",
            "line_nb": 267,
            "steps": [
                {
                    "command": [
                        "intros x _; unfold Rpower.",
                        "VernacExtend",
                        "07285fb5638403948b50679326fdadf6c4151e2d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_0_l; apply exp_0.",
                        "VernacExtend",
                        "ecaab2a4bfe532b46d15effd279d20ec1dd56e34"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rpower_1",
            "line_nb": 271,
            "steps": [
                {
                    "command": [
                        "intros x H; unfold Rpower.",
                        "VernacExtend",
                        "77be335bda6562b965615d440304964b51d6b5ed"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; apply exp_ln; apply H.",
                        "VernacExtend",
                        "6c1b08f66d784e9a90ea58250f9d66f24b9f026e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rpower_pow",
            "line_nb": 275,
            "steps": [
                {
                    "command": [
                        "intros n; elim n; simpl; auto; fold INR.",
                        "VernacExtend",
                        "5d8b8a9827fd7adc82f5a459eb2c327b9a2f3e5f"
                    ]
                },
                {
                    "command": [
                        "intros x H; apply Rpower_O; auto.",
                        "VernacExtend",
                        "8ebe6e563e783d296e575a5e8c0578953a16dfda"
                    ]
                },
                {
                    "command": [
                        "intros n1; case n1.",
                        "VernacExtend",
                        "ab9ee37261222a76f2cc41735ea26481180b1b94"
                    ]
                },
                {
                    "command": [
                        "intros H x H0; simpl; rewrite Rmult_1_r; apply Rpower_1; auto.",
                        "VernacExtend",
                        "0ac825449cc3d55b62ba0929970407be0db0b41b"
                    ]
                },
                {
                    "command": [
                        "intros n0 H x H0; rewrite Rpower_plus; rewrite H; try rewrite Rpower_1; try apply Rmult_comm || assumption.",
                        "VernacExtend",
                        "00f8c7cc72e2299a6b78bdb866f39576b997a235"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rpower_lt",
            "line_nb": 282,
            "steps": [
                {
                    "command": [
                        "intros x y z H H1.",
                        "VernacExtend",
                        "039c07af68910b002da18eaeacb45feeb7f19b44"
                    ]
                },
                {
                    "command": [
                        "unfold Rpower.",
                        "VernacExtend",
                        "f90fa531424b6ea5ffc96470fb5b1fd75c4c210c"
                    ]
                },
                {
                    "command": [
                        "apply exp_increasing.",
                        "VernacExtend",
                        "4984f45a56637671bd2bd70226d7dc608d8a3bb4"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_r.",
                        "VernacExtend",
                        "e041593c57ec6470673cc705c01d215d230e0676"
                    ]
                },
                {
                    "command": [
                        "rewrite <- ln_1; apply ln_increasing.",
                        "VernacExtend",
                        "5a2746c84ebc6c7a84814c97f98621dc5cd43bbd"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_0_1.",
                        "VernacExtend",
                        "c3f675388bf844e0740197fd71afa66e5eef091d"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rpower_sqrt",
            "line_nb": 292,
            "steps": [
                {
                    "command": [
                        "intros x H.",
                        "VernacExtend",
                        "a0cd74b85812810ce5a78a540bad98f664bd4842"
                    ]
                },
                {
                    "command": [
                        "apply ln_inv.",
                        "VernacExtend",
                        "a1e3a494f13db5ec70b16ff899c6dad8b9174ffa"
                    ]
                },
                {
                    "command": [
                        "unfold Rpower; apply exp_pos.",
                        "VernacExtend",
                        "035b49037496967af73c037ecb1dc61a4738dca8"
                    ]
                },
                {
                    "command": [
                        "apply sqrt_lt_R0; apply H.",
                        "VernacExtend",
                        "951339c0fb5f3782efd2b31bb9bf3fbea133e101"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (INR 2).",
                        "VernacExtend",
                        "f238f00b2c0b6d2fa2c3251732ba31a7e2d08af5"
                    ]
                },
                {
                    "command": [
                        "apply exp_inv.",
                        "VernacExtend",
                        "a4a5ddfcf4ba529b800d1f74c30701f6097a2603"
                    ]
                },
                {
                    "command": [
                        "fold Rpower.",
                        "VernacExtend",
                        "5979b9474c9af78f2140ada75529a7026fba2f88"
                    ]
                },
                {
                    "command": [
                        "cut ((x ^R (/ INR 2)) ^R INR 2 = sqrt x ^R INR 2).",
                        "VernacExtend",
                        "7d3eef692ba42dc5b1d525ecb12faae24210dd60"
                    ]
                },
                {
                    "command": [
                        "unfold Rpower; auto.",
                        "VernacExtend",
                        "24e2ad7c7e1455784df29dc44bd7c2c9cc7942d6"
                    ]
                },
                {
                    "command": [
                        "rewrite Rpower_mult.",
                        "VernacExtend",
                        "23df7546cc90fc916b6fb12ac22c32be936b04a1"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_l.",
                        "VernacExtend",
                        "ecdf9c2abd7f5f8afdaa87d40c932567a11fd7b1"
                    ]
                },
                {
                    "command": [
                        "change 1 with (INR 1).",
                        "VernacExtend",
                        "0c13b2bd19d4e02d341ea7d7fe8a37e7b5dfc4fe"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rpower_pow; simpl.",
                        "VernacExtend",
                        "31144c60c8c11e4acba92b6ea5f7d0676491042e"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1; rewrite <- (sqrt_sqrt x (Rlt_le _ _ H)).",
                        "VernacExtend",
                        "e91628b30b06b75820eb9c7983cef52518a72236"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply sqrt_lt_R0; apply H.",
                        "VernacExtend",
                        "951339c0fb5f3782efd2b31bb9bf3fbea133e101"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply not_O_INR; discriminate.",
                        "VernacExtend",
                        "b0377726251b564451c17d0f089ec6fd746a82be"
                    ]
                },
                {
                    "command": [
                        "apply not_O_INR; discriminate.",
                        "VernacExtend",
                        "b0377726251b564451c17d0f089ec6fd746a82be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rpower_Ropp",
            "line_nb": 313,
            "steps": [
                {
                    "command": [
                        "unfold Rpower.",
                        "VernacExtend",
                        "f90fa531424b6ea5ffc96470fb5b1fd75c4c210c"
                    ]
                },
                {
                    "command": [
                        "intros x y; rewrite Ropp_mult_distr_l_reverse.",
                        "VernacExtend",
                        "6bb87c42f616ddb4de0fee5d73a6a31d9cf8e991"
                    ]
                },
                {
                    "command": [
                        "apply exp_Ropp.",
                        "VernacExtend",
                        "9661e640831a299ec2d3a86991a91dcd35f4b3a9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "powerRZ_Rpower",
            "line_nb": 318,
            "steps": [
                {
                    "command": [
                        "intros Hx.",
                        "VernacExtend",
                        "9276b72df3a882c9b4b954c90d9e870c80a906fc"
                    ]
                },
                {
                    "command": [
                        "assert (x <> 0)%R by now intros Habs; rewrite Habs in Hx; apply (Rlt_irrefl 0).",
                        "VernacExtend",
                        "a94671dab16baaf26ce76b6595b9ae762d135950"
                    ]
                },
                {
                    "command": [
                        "destruct (intP z).",
                        "VernacExtend",
                        "cbdcaead10f43cc3f7734bc9bb46e59ab12cea99"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "now rewrite Rpower_O.",
                        "VernacExtend",
                        "80fc856cf832169e8c144e1e6e381a28f0c9605a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- pow_powerRZ, <- Rpower_pow by assumption.",
                        "VernacExtend",
                        "ba5a52d39cad6f4953ba57c5fc2270fdaf49f1ed"
                    ]
                },
                {
                    "command": [
                        "now rewrite INR_IZR_INZ.",
                        "VernacExtend",
                        "76f7c2dec04858ef9b19fd47907f0be497c3ddd2"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "rewrite opp_IZR, Rpower_Ropp.",
                        "VernacExtend",
                        "f66c70605218fd574a2269d7ab8b15b7a9795483"
                    ]
                },
                {
                    "command": [
                        "rewrite powerRZ_neg, powerRZ_inv by assumption.",
                        "VernacExtend",
                        "1c42058345b6594acf48df35d1c566fa48b3b815"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- pow_powerRZ, <- INR_IZR_INZ, Rpower_pow.",
                        "VernacExtend",
                        "a73ed4f8c0870df50433e57bd362ad2ff7d186c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rle_Rpower",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "intros e n m [H | H]; intros H1.",
                        "VernacExtend",
                        "eb022b90547ffcefaa1dfc051d9410bc4c161aec"
                    ]
                },
                {
                    "command": [
                        "case H1.",
                        "VernacExtend",
                        "a1cc2c5b7545de9abe2fa54c801395a452f26f10"
                    ]
                },
                {
                    "command": [
                        "intros H2; left; apply Rpower_lt; assumption.",
                        "VernacExtend",
                        "9fe021e1097f2ced1248538bd07f7f3d6ec9a0a0"
                    ]
                },
                {
                    "command": [
                        "intros H2; rewrite H2; right; reflexivity.",
                        "VernacExtend",
                        "a04d574cbdd24ecef34783f4a15a7dc29fdc188c"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- H; unfold Rpower; rewrite ln_1, !Rmult_0_r; apply Rle_refl.",
                        "VernacExtend",
                        "de9fd568ad992ec169a7fbf7caf5bf315a5b74c4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ln_lt_2",
            "line_nb": 339,
            "steps": [
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (r := 2).",
                        "VernacExtend",
                        "beb8ee555d9ad8d12b42812645e47bc0dc98d6fd"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_r.",
                        "VernacExtend",
                        "901df6dbe8bfa5cb3145649e51a3e451e9ced1a3"
                    ]
                },
                {
                    "command": [
                        "apply exp_lt_inv.",
                        "VernacExtend",
                        "54122c56a90a857136a1f26dee93cad6533904d0"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := exp_le_3).",
                        "VernacExtend",
                        "cfc517f713e0d6bf54b4889c5c522c1cc5d1e60b"
                    ]
                },
                {
                    "command": [
                        "change (3 < 2 ^R (1 + 1)).",
                        "VernacExtend",
                        "57959629425f3e31de4aec580c6b503ca4e98040"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rpower_plus; repeat rewrite Rpower_1.",
                        "VernacExtend",
                        "d90f33893b9490a5be1a1fdd050f4de69e539070"
                    ]
                },
                {
                    "command": [
                        "now apply (IZR_lt 3 4).",
                        "VernacExtend",
                        "327d99e74ffb7e0fbf04f67eb10455822c99143d"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "limit1_ext",
            "line_nb": 351,
            "steps": [
                {
                    "command": [
                        "intros f g D l x H; unfold limit1_in, limit_in.",
                        "VernacExtend",
                        "981942644af792bc8374f84f804bfc9c0f700cb0"
                    ]
                },
                {
                    "command": [
                        "intros H0 eps H1; case (H0 eps); auto.",
                        "VernacExtend",
                        "fcc2ccdc1327b2b85c93bda25af28ae18070bdcd"
                    ]
                },
                {
                    "command": [
                        "intros x0 [H2 H3]; exists x0; split; auto.",
                        "VernacExtend",
                        "74cd76ac564d667b4628e1d1ea8fa1bb8d2c8b45"
                    ]
                },
                {
                    "command": [
                        "intros x1 [H4 H5]; rewrite <- H; auto.",
                        "VernacExtend",
                        "5f466b2b7a99281c7599a353a6f6f4082226933c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "limit1_imp",
            "line_nb": 357,
            "steps": [
                {
                    "command": [
                        "intros f D D1 l x H; unfold limit1_in, limit_in.",
                        "VernacExtend",
                        "da56759e8f0baa44ac72dd8d77e7f3a7043dbd27"
                    ]
                },
                {
                    "command": [
                        "intros H0 eps H1; case (H0 eps H1); auto.",
                        "VernacExtend",
                        "c89e9a93b48b2366895cc492434fdd9d2940f7d7"
                    ]
                },
                {
                    "command": [
                        "intros alpha [H2 H3]; exists alpha; split; auto.",
                        "VernacExtend",
                        "dd7b2316ebe08395d5bd70f9dcc5a3ebb5bb5cb2"
                    ]
                },
                {
                    "command": [
                        "intros d [H4 H5]; apply H3; split; auto.",
                        "VernacExtend",
                        "582187dfb1dfeb07eceb60c72d6ee238196255a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rinv_Rdiv",
            "line_nb": 363,
            "steps": [
                {
                    "command": [
                        "intros x y H1 H2; unfold Rdiv; rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "747a74dea8fc13d4041e8174d99440e475525269"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_involutive.",
                        "VernacExtend",
                        "422941d9f5ab1f835c6b4368750431aa4fff0509"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_comm.",
                        "VernacExtend",
                        "f6a795952024dfb6a8db9b1b3050b14eb7f075aa"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; assumption.",
                        "VernacExtend",
                        "34bdbdad7cea919f16144b67748495a3e0ceac05"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dln",
            "line_nb": 371,
            "steps": [
                {
                    "command": [
                        "intros y Hy; unfold D_in.",
                        "VernacExtend",
                        "40eebd60c6cbb78c52a456d3559380c5f6d212fc"
                    ]
                },
                {
                    "command": [
                        "apply limit1_ext with (f := fun x:R => / ((exp (ln x) - exp (ln y)) / (ln x - ln y))).",
                        "VernacExtend",
                        "7031d58e782db8bc9d1219f55d2876024724c3f3"
                    ]
                },
                {
                    "command": [
                        "intros x [HD1 HD2]; repeat rewrite exp_ln.",
                        "VernacExtend",
                        "cac922ada4b327124d99b5d5b8421a659a69c54d"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "3bf9830f7647c63577f406f658b9e756537f6464"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_involutive.",
                        "VernacExtend",
                        "422941d9f5ab1f835c6b4368750431aa4fff0509"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_comm.",
                        "VernacExtend",
                        "f6a795952024dfb6a8db9b1b3050b14eb7f075aa"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_eq_contra.",
                        "VernacExtend",
                        "36628d08ea6e2381fe85c05d842ae9dfbbca2407"
                    ]
                },
                {
                    "command": [
                        "red; intros H2; case HD2.",
                        "VernacExtend",
                        "b5369e68455acc6ea5d86355fbda2640048dc907"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply (ln_inv _ _ HD1 Hy H2).",
                        "VernacExtend",
                        "fac72d459b3d7d6e23d58e319e0542649c686129"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_eq_contra; apply (not_eq_sym HD2).",
                        "VernacExtend",
                        "227436cc3ae38c778c612ac21b76d926438c3816"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; apply Rminus_eq_contra; red; intros H2; case HD2; apply ln_inv; auto.",
                        "VernacExtend",
                        "8e2650c747542b3138e12b6223a9c578faba97a7"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply limit_inv with (f := fun x:R => (exp (ln x) - exp (ln y)) / (ln x - ln y)).",
                        "VernacExtend",
                        "7511f97c7a7be99a95b2d355d5b2b33b14ca2660"
                    ]
                },
                {
                    "command": [
                        "apply limit1_imp with (f := fun x:R => (fun x:R => (exp x - exp (ln y)) / (x - ln y)) (ln x)) (D := Dgf (D_x (fun x:R => 0 < x) y) (D_x (fun x:R => True) (ln y)) ln).",
                        "VernacExtend",
                        "74d00083b56925dd38fe89bf42a6bacc3457d09c"
                    ]
                },
                {
                    "command": [
                        "intros x [H1 H2]; split.",
                        "VernacExtend",
                        "8c77547fae5faa28f8926559c443e34c896bb6cb"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "split; auto.",
                        "VernacExtend",
                        "fcd44a714bd12fa54b1c7746996e44dbac16df06"
                    ]
                },
                {
                    "command": [
                        "red; intros H3; case H2; apply ln_inv; auto.",
                        "VernacExtend",
                        "8d6a8fc9bfca9f6d016dd03db94f0f34051d9eab"
                    ]
                },
                {
                    "command": [
                        "apply limit_comp with (l := ln y) (g := fun x:R => (exp x - exp (ln y)) / (x - ln y)) (f := ln).",
                        "VernacExtend",
                        "0b60f16282b488399520ad28e44e9cd902a33331"
                    ]
                },
                {
                    "command": [
                        "apply ln_continue; auto.",
                        "VernacExtend",
                        "f9fc66974b9d68a45cf8c54dd587bb9f43e33d38"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_pt_lim_exp (ln y)); unfold derivable_pt_lim in H0; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; elim (H0 _ H); intros; exists (pos x); split.",
                        "VernacExtend",
                        "ad897f1e5ffc141dd4cbd3f245d2d75711c9f252"
                    ]
                },
                {
                    "command": [
                        "apply (cond_pos x).",
                        "VernacExtend",
                        "13123edebc901eab9feb33dc3cf353ecb7f51a6a"
                    ]
                },
                {
                    "command": [
                        "intros; pattern y at 3; rewrite <- exp_ln.",
                        "VernacExtend",
                        "0c1ab6db36fbc85f765da5c03ae58647b901c732"
                    ]
                },
                {
                    "command": [
                        "pattern x0 at 1; replace x0 with (ln y + (x0 - ln y)); [ idtac | ring ].",
                        "VernacExtend",
                        "617c594812e6aea0ad204a4688efb9e94846a310"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros H3 _; unfold D_x in H3; elim H3; clear H3; intros _ H3; apply Rminus_eq_contra; apply (not_eq_sym (A:=R)); apply H3.",
                        "VernacExtend",
                        "ff2b21e6cd1ea70e333360531de1c55c6e7de1be"
                    ]
                },
                {
                    "command": [
                        "elim H2; clear H2; intros _ H2; apply H2.",
                        "VernacExtend",
                        "f59ddb371d9ba1ee68d6a85583f6e21cb9ff3f1a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H in Hy; elim (Rlt_irrefl _ Hy).",
                        "VernacExtend",
                        "42c1803e778e02adfdc1753f9a13acde8f966870"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_ln",
            "line_nb": 403,
            "steps": [
                {
                    "command": [
                        "intros; assert (H0 := Dln x H); unfold D_in in H0; unfold limit1_in in H0; unfold limit_in in H0; simpl in H0; unfold R_dist in H0; unfold derivable_pt_lim; intros; elim (H0 _ H1); intros; elim H2; clear H2; intros; set (alp := Rmin x0 (x / 2)); assert (H4 : 0 < alp).",
                        "VernacExtend",
                        "5acaacf9569c8d3c09c9e7612de03793a8a97a53"
                    ]
                },
                {
                    "command": [
                        "unfold alp; unfold Rmin; case (Rle_dec x0 (x / 2)); intro.",
                        "VernacExtend",
                        "46d331136e3256bf71d3519e48f0c6c851e36892"
                    ]
                },
                {
                    "command": [
                        "apply H2.",
                        "VernacExtend",
                        "17101978526a14fb5ad41816224a2fc35cc3d256"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ H4); intros; pattern h at 2; replace h with (x + h - x); [ idtac | ring ].",
                        "VernacExtend",
                        "e3cdf28ba570dde223afb2a53f39e1b8a3e312d9"
                    ]
                },
                {
                    "command": [
                        "apply H3; split.",
                        "VernacExtend",
                        "14ee8b762765c5a3d7361306b2caf70207874eea"
                    ]
                },
                {
                    "command": [
                        "unfold D_x; split.",
                        "VernacExtend",
                        "dc5d57a38d678104af9755be17a91e30c46fd5bc"
                    ]
                },
                {
                    "command": [
                        "destruct (Rcase_abs h) as [Hlt|Hgt].",
                        "VernacExtend",
                        "c1c1ddab33ee809f4b9fb3d761c7e872b2e3d040"
                    ]
                },
                {
                    "command": [
                        "assert (H7 : Rabs h < x / 2).",
                        "VernacExtend",
                        "8725e60a9f76884672aab0841ff20a77d06e93e8"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with alp.",
                        "VernacExtend",
                        "5c6b053e25325bd0ca7a59ad9cac5f57fc4f18a2"
                    ]
                },
                {
                    "command": [
                        "apply H6.",
                        "VernacExtend",
                        "b0314bbdc776869d305067ca471096a36fa958c1"
                    ]
                },
                {
                    "command": [
                        "unfold alp; apply Rmin_r.",
                        "VernacExtend",
                        "01efd8b4bf10bed7ffc6b2363819fefebfe56254"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (x / 2).",
                        "VernacExtend",
                        "dfc80adb5582ee5457be855f6a3108b704fb4683"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_left in H7.",
                        "VernacExtend",
                        "de8a8997a7b8549e5953e8e3a2ecc4ab54f2d6bb"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (- h - x / 2).",
                        "VernacExtend",
                        "c1f01e8a1175dd0ff6b8ed7a643000bd7ea5b88d"
                    ]
                },
                {
                    "command": [
                        "replace (- h - x / 2 + x / 2) with (- h); [ idtac | ring ].",
                        "VernacExtend",
                        "90033bec8ddee39ba45b9da25c3e5a296ece48b7"
                    ]
                },
                {
                    "command": [
                        "pattern x at 2; rewrite double_var.",
                        "VernacExtend",
                        "6b40b8307edc3fb8b4df29db07d55dbecfb9dc8d"
                    ]
                },
                {
                    "command": [
                        "replace (- h - x / 2 + (x / 2 + x / 2 + h)) with (x / 2); [ apply H7 | ring ].",
                        "VernacExtend",
                        "23e20a2244a7a95a40dbe61a40919d42f79bc07c"
                    ]
                },
                {
                    "command": [
                        "apply Hlt.",
                        "VernacExtend",
                        "b07ea4c51489bd1f1a3ab9521cadeda0ed645275"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_le_0_compat; [ assumption | apply Rge_le; apply Hgt ].",
                        "VernacExtend",
                        "3325bfb29777febcf781c3f1150fec75c20a3dc0"
                    ]
                },
                {
                    "command": [
                        "apply (sym_not_eq (A:=R)); apply Rminus_not_eq; replace (x + h - x) with h; [ apply H5 | ring ].",
                        "VernacExtend",
                        "be8a33cfc057f05838db97f93aebf9c3ddd2f02f"
                    ]
                },
                {
                    "command": [
                        "replace (x + h - x) with h; [ apply Rlt_le_trans with alp; [ apply H6 | unfold alp; apply Rmin_l ] | ring ].",
                        "VernacExtend",
                        "ccc0ba635de6a97fd74602ca0521e70c605b55e3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "D_in_imp",
            "line_nb": 428,
            "steps": [
                {
                    "command": [
                        "intros f g D D1 x H; unfold D_in.",
                        "VernacExtend",
                        "ac76fe818860239c9bde93ca019fd35be6128b85"
                    ]
                },
                {
                    "command": [
                        "intros H0; apply limit1_imp with (D := D_x D x); auto.",
                        "VernacExtend",
                        "61ffb71bc17195547a38c7864cdc5435d4ccc7cf"
                    ]
                },
                {
                    "command": [
                        "intros x1 [H1 H2]; split; auto.",
                        "VernacExtend",
                        "830e29029cd079a91c6e1cfa900ecb739a0c1b7a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "D_in_ext",
            "line_nb": 433,
            "steps": [
                {
                    "command": [
                        "intros f g h D x H; unfold D_in.",
                        "VernacExtend",
                        "61cfbc635d474255c9a1eb1e6460f36eef7c4242"
                    ]
                },
                {
                    "command": [
                        "rewrite H; auto.",
                        "VernacExtend",
                        "3e25713af8eaa76cddf9287af10d66733da2ee16"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dpower",
            "line_nb": 437,
            "steps": [
                {
                    "command": [
                        "intros y z H; apply D_in_imp with (D := Dgf (fun x:R => 0 < x) (fun x:R => True) ln).",
                        "VernacExtend",
                        "c423902983639725f35a4878b5c2d037f9dfa9b6"
                    ]
                },
                {
                    "command": [
                        "intros x H0; repeat split.",
                        "VernacExtend",
                        "26444570359877b6986c694198fd14b245f980f9"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply D_in_ext with (f := fun x:R => / x * (z * exp (z * ln x))).",
                        "VernacExtend",
                        "a7f1b9a7aa969f6515e6bd8ba00d5b63787a8d6c"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rpower_plus; rewrite Rpower_Ropp; rewrite (Rpower_1 _ H); unfold Rpower; ring.",
                        "VernacExtend",
                        "9dd7d1b4390c5e78eaa52e873c0ce0e01569fb72"
                    ]
                },
                {
                    "command": [
                        "apply Dcomp with (f := ln) (g := fun x:R => exp (z * x)) (df := Rinv) (dg := fun x:R => z * exp (z * x)).",
                        "VernacExtend",
                        "9467d6e9daf499ff0465fe7c41f1ffe0f924e699"
                    ]
                },
                {
                    "command": [
                        "apply (Dln _ H).",
                        "VernacExtend",
                        "339c7c24ce50310ad49c09686d2eeae043753dcc"
                    ]
                },
                {
                    "command": [
                        "apply D_in_imp with (D := Dgf (fun x:R => True) (fun x:R => True) (fun x:R => z * x)).",
                        "VernacExtend",
                        "64910d8ec5c18575320061f580c8032e307b8690"
                    ]
                },
                {
                    "command": [
                        "intros x H1; repeat split; auto.",
                        "VernacExtend",
                        "ad1d740e35ebd7f7a6b8ab167e5be1ea3bfa44e8"
                    ]
                },
                {
                    "command": [
                        "apply (Dcomp (fun _:R => True) (fun _:R => True) (fun x => z) exp (fun x:R => z * x) exp); simpl.",
                        "VernacExtend",
                        "5aee4c690c486ece58bed38195dea8a4cb9ef892"
                    ]
                },
                {
                    "command": [
                        "apply D_in_ext with (f := fun x:R => z * 1).",
                        "VernacExtend",
                        "fd4d13e1e446dbcdadd0c7bbc67ef5a2e1896892"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_1_r.",
                        "VernacExtend",
                        "7e290e72327ec53766aaa3b6504d3f54d3250d15"
                    ]
                },
                {
                    "command": [
                        "apply (Dmult_const (fun x => True) (fun x => x) (fun x => 1)); apply Dx.",
                        "VernacExtend",
                        "2a068236afe1053cf75b3641992277e06874204d"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_pt_lim_D_in exp exp (z * ln y)); elim H0; clear H0; intros _ H0; apply H0; apply derivable_pt_lim_exp.",
                        "VernacExtend",
                        "3fa890f1fbb23cc45700a26718528045656fe734"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_power",
            "line_nb": 453,
            "steps": [
                {
                    "command": [
                        "intros x y H.",
                        "VernacExtend",
                        "c7ef450aa0313460779fba50c0edf4486e0c7fe4"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rpower_plus.",
                        "VernacExtend",
                        "417b7bfae2a06c534d98e6ab4936283ff3890219"
                    ]
                },
                {
                    "command": [
                        "rewrite Rpower_Ropp.",
                        "VernacExtend",
                        "f2b9be8188ca0a20b42ce720d3a551b1b6e322ab"
                    ]
                },
                {
                    "command": [
                        "rewrite Rpower_1; auto.",
                        "VernacExtend",
                        "a680369972aa69169ba5803c2eb999ac04ce3177"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "34da3c50cde53c179a4908b1329a459071245c05"
                    ]
                },
                {
                    "command": [
                        "unfold Rpower.",
                        "VernacExtend",
                        "f90fa531424b6ea5ffc96470fb5b1fd75c4c210c"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_comp with (f1 := ln) (f2 := fun x => exp (y * x)).",
                        "VernacExtend",
                        "2d766a80bc7a0bf9648602bce5c8f8e558341698"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_ln; assumption.",
                        "VernacExtend",
                        "75056d8079ec5d27d05eabf518ce612cc7bb1b1b"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm y).",
                        "VernacExtend",
                        "f2cfe05ae8ca4a375875c5383a94b658ee7c9311"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_comp with (f1 := fun x => y * x) (f2 := exp).",
                        "VernacExtend",
                        "27483c60607c775f9c1911ed85b63980b9e43c0b"
                    ]
                },
                {
                    "command": [
                        "pattern y at 2; replace y with (0 * ln x + y * 1).",
                        "VernacExtend",
                        "cd1f08ccee5695703fe714bb47fbd0a3078e1db2"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_mult with (f1 := fun x:R => y) (f2 := fun x:R => x).",
                        "VernacExtend",
                        "48c12756aec915a4a5e6b813e23060b0694c8fde"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_const with (a := y).",
                        "VernacExtend",
                        "81f7b1c1406af2a7818d358bb5e762b1df47a1c6"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_id.",
                        "VernacExtend",
                        "eefa66208b1c7b1195a98db883611b02fd29636c"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_exp.",
                        "VernacExtend",
                        "82e5b81edbc184946c404c79bc9a52dc307dbae6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rpower_mult_distr",
            "line_nb": 471,
            "steps": [
                {
                    "command": [
                        "intros x y z x0 y0; unfold Rpower.",
                        "VernacExtend",
                        "67471bb7ec7f1d06932c99ae041c552e2fc69391"
                    ]
                },
                {
                    "command": [
                        "rewrite <- exp_plus, ln_mult, Rmult_plus_distr_l; auto.",
                        "VernacExtend",
                        "8769493da1e73646f672235f9e680400c6843dfa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rlt_Rpower_l",
            "line_nb": 475,
            "steps": [
                {
                    "command": [
                        "intros c0 [a0 ab]; apply exp_increasing.",
                        "VernacExtend",
                        "2e0c2af36d263dc90321397bfaa07eac4c0ab356"
                    ]
                },
                {
                    "command": [
                        "now apply Rmult_lt_compat_l; auto; apply ln_increasing; lra.",
                        "VernacExtend",
                        "849ec84c91240ecc2e04e97976a78fc1f7e88196"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rle_Rpower_l",
            "line_nb": 479,
            "steps": [
                {
                    "command": [
                        "intros [c0 | c0]; [ | intros; rewrite <- c0, !Rpower_O; [apply Rle_refl | |] ].",
                        "VernacExtend",
                        "5920e31b2545428566cbd73c723a9fe6552ceb62"
                    ]
                },
                {
                    "command": [
                        "intros [a0 [ab|ab]].",
                        "VernacExtend",
                        "88d7feaa53f4258943f678752bd33d80461a09c4"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le, Rlt_Rpower_l;[ | split]; lra.",
                        "VernacExtend",
                        "6f08a020822d5698a701e113343812063d6f95d4"
                    ]
                },
                {
                    "command": [
                        "rewrite ab; apply Rle_refl.",
                        "VernacExtend",
                        "9800517fbe5781d672c31ad34150072fb9aaaee4"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with a; tauto.",
                        "VernacExtend",
                        "560105a351651eb57985424d5bca9e71a46c9d4e"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arcsinh_sinh",
            "line_nb": 488,
            "steps": [
                {
                    "command": [
                        "intros x; unfold sinh, arcsinh.",
                        "VernacExtend",
                        "c2c80cc64ab4617090139285feb6069c5b5b4cfd"
                    ]
                },
                {
                    "command": [
                        "assert (Rminus_eq_0 : forall r, r - r = 0) by (intros; ring).",
                        "VernacExtend",
                        "0bd08d9caee00349d484f7d970afa67cc5f333f0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- exp_0, <- (Rminus_eq_0 x); unfold Rminus.",
                        "VernacExtend",
                        "539ef5c011384ac621cf485a8d5fab35fb0477c6"
                    ]
                },
                {
                    "command": [
                        "rewrite exp_plus.",
                        "VernacExtend",
                        "6d6e784db73c5ec39c5b67ce974fcd38b73e5738"
                    ]
                },
                {
                    "command": [
                        "match goal with |- context[sqrt ?a] => replace a with (((exp x + exp(-x))/2)^2) by field end.",
                        "VernacExtend",
                        "45909469ffe56545018458b5f1998a64f7a8dba0"
                    ]
                },
                {
                    "command": [
                        "rewrite sqrt_pow2; [|apply Rlt_le, Rmult_lt_0_compat;[apply Rplus_lt_0_compat; apply exp_pos | apply Rinv_0_lt_compat, Rlt_0_2]].",
                        "VernacExtend",
                        "b771179382b372abced9d6aab315e311d8ffeab5"
                    ]
                },
                {
                    "command": [
                        "match goal with |- context[ln ?a] => replace a with (exp x) by field end.",
                        "VernacExtend",
                        "aad31cabc4f919120631263f6f8c5160690845e5"
                    ]
                },
                {
                    "command": [
                        "rewrite ln_exp; reflexivity.",
                        "VernacExtend",
                        "8cfa97eeaa2051f46dac574a389019b864c4761e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sinh_arcsinh",
            "line_nb": 498,
            "steps": [
                {
                    "command": [
                        "unfold sinh, arcsinh.",
                        "VernacExtend",
                        "d94b72f22a02af268040e4d8c4811f1777e2b6c5"
                    ]
                },
                {
                    "command": [
                        "assert (cmp : 0 < x + sqrt (x ^ 2 + 1)).",
                        "VernacExtend",
                        "49ab5d542926e1d16c804a619261fc01d2175744"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec x 0).",
                        "VernacExtend",
                        "f38e751d5eca1e2050c998624b22ad757b7a78ad"
                    ]
                },
                {
                    "command": [
                        "replace (x ^ 2) with ((-x) ^ 2) by ring.",
                        "VernacExtend",
                        "c1121ec70290ff4e478ee5e06f21e980b2034e55"
                    ]
                },
                {
                    "command": [
                        "assert (sqrt ((- x) ^ 2) < sqrt ((-x)^2+1)).",
                        "VernacExtend",
                        "4b1d199485422d50d6634663de99e36ed56b04ac"
                    ]
                },
                {
                    "command": [
                        "apply sqrt_lt_1_alt.",
                        "VernacExtend",
                        "45b4cd2388d55c8102fb6e671b5e2b84734b7c99"
                    ]
                },
                {
                    "command": [
                        "split;[apply pow_le | ]; lra.",
                        "VernacExtend",
                        "0476b752ae5149c7edac9eae289195d5b5fe51a0"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1; replace x with (- (sqrt ((- x) ^ 2))).",
                        "VernacExtend",
                        "1959a2c7a59c02589e58c1f18d1411a635782e69"
                    ]
                },
                {
                    "command": [
                        "assert (t:= sqrt_pos ((-x)^2)); lra.",
                        "VernacExtend",
                        "05c20c78dfc1eb4908fd1cf35f95e457eef355ec"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite Rmult_1_r, sqrt_square, Ropp_involutive;[reflexivity | lra].",
                        "VernacExtend",
                        "2b772bf255d2dc9081f21580853663f79e613461"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_le_0_compat;[apply Rnot_le_gt; assumption | apply sqrt_pos].",
                        "VernacExtend",
                        "0c8dea2a65f827ef886e7144c0c96ea4c580e288"
                    ]
                },
                {
                    "command": [
                        "rewrite exp_ln;[ | assumption].",
                        "VernacExtend",
                        "e756df4966bbac02478e0a34b500d8d21f795058"
                    ]
                },
                {
                    "command": [
                        "rewrite exp_Ropp, exp_ln;[ | assumption].",
                        "VernacExtend",
                        "589c554c13b3119aab21e28e09f8bee15429768a"
                    ]
                },
                {
                    "command": [
                        "assert (Rmult_minus_distr_r : forall x y z, (x - y) * z = x * z - y * z) by (intros; ring).",
                        "VernacExtend",
                        "b0a15e252aeceba1f0338116e83b4d1bdb426c3a"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_diag_uniq; unfold Rdiv; rewrite Rmult_minus_distr_r.",
                        "VernacExtend",
                        "c17ba07d9fdaa58751e4ef47d598bb96ca2cf23b"
                    ]
                },
                {
                    "command": [
                        "assert (t: forall x y z, x - z = y -> x - y - z = 0);[ | apply t; clear t].",
                        "VernacExtend",
                        "2a8fff899f444d7aa4aab02fd076067bde69da6c"
                    ]
                },
                {
                    "command": [
                        "intros a b c H; rewrite <- H; ring.",
                        "VernacExtend",
                        "6e851adde0b5700a9bf5d4c379761a154e3b40a3"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (2 * (x + sqrt (x ^ 2 + 1)));[ | apply Rgt_not_eq, Rmult_lt_0_compat;[apply Rlt_0_2 | assumption]].",
                        "VernacExtend",
                        "77113853c09574eebfe47179e5a26873ec25fbe7"
                    ]
                },
                {
                    "command": [
                        "assert (pow2_sqrt : forall x, 0 <= x -> sqrt x ^ 2 = x) by (intros; simpl; rewrite Rmult_1_r, sqrt_sqrt; auto).",
                        "VernacExtend",
                        "291550623f6d405de1bc82c02939dec6d9ab66aa"
                    ]
                },
                {
                    "command": [
                        "field_simplify;[rewrite pow2_sqrt;[field | ] | apply Rgt_not_eq; lra].",
                        "VernacExtend",
                        "9d046f63b6c179f58f5b6b99b79343cb7d832f78"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_le_0_compat;[simpl; rewrite Rmult_1_r; apply (Rle_0_sqr x)|apply Rlt_le, Rlt_0_1].",
                        "VernacExtend",
                        "3c196bb973227974c3c9a1761601a662ec4bcb10"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_arcsinh",
            "line_nb": 521,
            "steps": [
                {
                    "command": [
                        "intros x; unfold arcsinh.",
                        "VernacExtend",
                        "395bc308a5ce33341fedd98ae1471e8a0777a2c9"
                    ]
                },
                {
                    "command": [
                        "assert (0 < x + sqrt (x ^ 2 + 1)).",
                        "VernacExtend",
                        "48b5081925b29714e688a9fc556a32ade4391467"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec x 0); [ | assert (0 < x) by (apply Rnot_le_gt; assumption); apply Rplus_lt_le_0_compat; auto; apply sqrt_pos].",
                        "VernacExtend",
                        "772fd933d5876b6e8832b13e09aae4c5ca4cb108"
                    ]
                },
                {
                    "command": [
                        "replace (x ^ 2) with ((-x) ^ 2) by ring.",
                        "VernacExtend",
                        "c1121ec70290ff4e478ee5e06f21e980b2034e55"
                    ]
                },
                {
                    "command": [
                        "assert (sqrt ((- x) ^ 2) < sqrt ((-x)^2+1)).",
                        "VernacExtend",
                        "4b1d199485422d50d6634663de99e36ed56b04ac"
                    ]
                },
                {
                    "command": [
                        "apply sqrt_lt_1_alt.",
                        "VernacExtend",
                        "45b4cd2388d55c8102fb6e671b5e2b84734b7c99"
                    ]
                },
                {
                    "command": [
                        "split;[apply pow_le|]; lra.",
                        "VernacExtend",
                        "0476b752ae5149c7edac9eae289195d5b5fe51a0"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1; replace x with (- (sqrt ((- x) ^ 2))).",
                        "VernacExtend",
                        "1959a2c7a59c02589e58c1f18d1411a635782e69"
                    ]
                },
                {
                    "command": [
                        "assert (t:= sqrt_pos ((-x)^2)); lra.",
                        "VernacExtend",
                        "05c20c78dfc1eb4908fd1cf35f95e457eef355ec"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite Rmult_1_r, sqrt_square, Ropp_involutive; auto; lra.",
                        "VernacExtend",
                        "79a5ff467ac700bdce20a0bfc6dc05f9d8bff7c6"
                    ]
                },
                {
                    "command": [
                        "assert (0 < x ^ 2 + 1).",
                        "VernacExtend",
                        "73643d0083989015958067bc2d5959efb7d8761d"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat;[simpl; rewrite Rmult_1_r; apply Rle_0_sqr|lra].",
                        "VernacExtend",
                        "e63f69ebbb1044628982a44836febaaf9a424ff8"
                    ]
                },
                {
                    "command": [
                        "replace (/sqrt (x ^ 2 + 1)) with (/(x + sqrt (x ^ 2 + 1)) * (1 + (/(2 * sqrt (x ^ 2 + 1)) * (INR 2 * x ^ 1 + 0)))).",
                        "VernacExtend",
                        "003ce467eaf4e641942986242ce7b4132080d627"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_lim_comp (fun x => x + sqrt (x ^ 2 + 1)) ln).",
                        "VernacExtend",
                        "9fdf20069eada786c5f6d64c8adebb01e0f99821"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_lim_plus).",
                        "VernacExtend",
                        "0ff92de56586834c2b5893a998ecf9b0d0c93d06"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_id.",
                        "VernacExtend",
                        "eefa66208b1c7b1195a98db883611b02fd29636c"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_lim_comp (fun x => x ^ 2 + 1) sqrt x).",
                        "VernacExtend",
                        "ff9af048164cedcc9c45d36fc705d1bfb87d160f"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_plus.",
                        "VernacExtend",
                        "0ff92de56586834c2b5893a998ecf9b0d0c93d06"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_pow.",
                        "VernacExtend",
                        "9bbe3c9d12dbbc63415b9b2003584896ab11f729"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_const.",
                        "VernacExtend",
                        "960938bb384eb6666a08df49ec2457c0f743a285"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_sqrt; assumption.",
                        "VernacExtend",
                        "28cc51b1645bc1ae7766c457c58fb276c9877379"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_ln; assumption.",
                        "VernacExtend",
                        "75056d8079ec5d27d05eabf518ce612cc7bb1b1b"
                    ]
                },
                {
                    "command": [
                        "replace (INR 2 * x ^ 1 + 0) with (2 * x) by (simpl; ring).",
                        "VernacExtend",
                        "2b31e9959cb37717b8a55ade662afd7764764945"
                    ]
                },
                {
                    "command": [
                        "replace (1 + / (2 * sqrt (x ^ 2 + 1)) * (2 * x)) with (((sqrt (x ^ 2 + 1) + x))/sqrt (x ^ 2 + 1)); [ | field; apply Rgt_not_eq, sqrt_lt_R0; assumption].",
                        "VernacExtend",
                        "b6f5d92f0969e8f2cd7a10c7d473fa48fd080874"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (x + sqrt (x ^ 2 + 1)); [ | apply Rgt_not_eq; assumption].",
                        "VernacExtend",
                        "5513150661b88ef08555d163bd1225f5ada1a5f5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc, Rinv_r;[field | ]; apply Rgt_not_eq; auto; apply sqrt_lt_R0; assumption.",
                        "VernacExtend",
                        "e2ab31adc0cc8fe645687a5d9bb932e71948f301"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arcsinh_lt",
            "line_nb": 549,
            "steps": [
                {
                    "command": [
                        "intros x y xy.",
                        "VernacExtend",
                        "2fe609d86b1b775f790630ee19a088e53db616c5"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec (arcsinh y) (arcsinh x));[ | apply Rnot_le_lt ].",
                        "VernacExtend",
                        "51190c14827407393770a445ea3cdfcf33870500"
                    ]
                },
                {
                    "command": [
                        "intros abs; case (Rlt_not_le _ _ xy).",
                        "VernacExtend",
                        "e2379d2e8d407614e3ce89ed6c6f6a160722ec21"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (sinh_arcsinh y), <- (sinh_arcsinh x).",
                        "VernacExtend",
                        "6b60ca4d9fb008b404555112f57fe0a8b9cdf495"
                    ]
                },
                {
                    "command": [
                        "destruct abs as [lt | q];[| rewrite q; lra].",
                        "VernacExtend",
                        "592d02a60bad243aa5a2bad5dfdbf8074735d1e0"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, sinh_lt; assumption.",
                        "VernacExtend",
                        "91dfe4663042b0ddd098c699b02cc639901c80c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arcsinh_le",
            "line_nb": 557,
            "steps": [
                {
                    "command": [
                        "intros x y [xy | xqy].",
                        "VernacExtend",
                        "28658b5e28bdfa4ca6654cf6531634e693550c80"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, arcsinh_lt; assumption.",
                        "VernacExtend",
                        "0fc8da3820ab8a5eace7f75a4fcbfb682e561567"
                    ]
                },
                {
                    "command": [
                        "rewrite xqy; apply Rle_refl.",
                        "VernacExtend",
                        "84644653ac858129517e481eee6236ee63ee7ef4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "arcsinh_0",
            "line_nb": 562,
            "steps": [
                {
                    "command": [
                        "unfold arcsinh; rewrite pow_ne_zero, !Rplus_0_l, sqrt_1, ln_1; [reflexivity | discriminate].",
                        "VernacExtend",
                        "f9470362d430576178f29e2a29d440661accfce3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}