{
    "filename": "theories/Reals/Rgeom.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import SeqSeries.",
            "VernacRequire",
            "379ec54d32465fe6d151cce8474fb7ff733028bb"
        ],
        [
            "Require Import Rtrigo1.",
            "VernacRequire",
            "598baa2d58df0ffe31096944ae833778167e93eb"
        ],
        [
            "Require Import R_sqrt.",
            "VernacRequire",
            "60858f242c91cc9f5b63e2d3ded98977489b805d"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Definition dist_euc (x0 y0 x1 y1:R) : R := sqrt (Rsqr (x0 - x1) + Rsqr (y0 - y1)).",
            "VernacDefinition",
            "beaa747a1e01f14e9c8f42cac3076cee60ee0485"
        ],
        [
            "Lemma distance_refl : forall x0 y0:R, dist_euc x0 y0 x0 y0 = 0.",
            "VernacStartTheoremProof",
            "94004d7026852fb4ceef5f06e69cd318f52d81af"
        ],
        [
            "intros x0 y0; unfold dist_euc; apply Rsqr_inj; [ apply sqrt_positivity; apply Rplus_le_le_0_compat; [ apply Rle_0_sqr | apply Rle_0_sqr ] | right; reflexivity | rewrite Rsqr_0; rewrite Rsqr_sqrt; [ unfold Rsqr; ring | apply Rplus_le_le_0_compat; [ apply Rle_0_sqr | apply Rle_0_sqr ] ] ].",
            "VernacExtend",
            "40fbb7b13195f0508a034861a03c518534d52fd8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma distance_symm : forall x0 y0 x1 y1:R, dist_euc x0 y0 x1 y1 = dist_euc x1 y1 x0 y0.",
            "VernacStartTheoremProof",
            "22136f6d297040a8f39ba69ef7e16837f87390c5"
        ],
        [
            "intros x0 y0 x1 y1; unfold dist_euc; apply Rsqr_inj; [ apply sqrt_positivity; apply Rplus_le_le_0_compat | apply sqrt_positivity; apply Rplus_le_le_0_compat | repeat rewrite Rsqr_sqrt; [ unfold Rsqr; ring | apply Rplus_le_le_0_compat | apply Rplus_le_le_0_compat ] ]; apply Rle_0_sqr.",
            "VernacExtend",
            "7c0e117634d6d5625f52d1a33426449a4c350dce"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma law_cosines : forall x0 y0 x1 y1 x2 y2 ac:R, let a := dist_euc x1 y1 x0 y0 in let b := dist_euc x2 y2 x0 y0 in let c := dist_euc x2 y2 x1 y1 in a * c * cos ac = (x0 - x1) * (x2 - x1) + (y0 - y1) * (y2 - y1) -> Rsqr b = Rsqr c + Rsqr a - 2 * (a * c * cos ac).",
            "VernacStartTheoremProof",
            "7269b7e2062e8ac75f40092102bb220f4505e521"
        ],
        [
            "unfold dist_euc; intros; repeat rewrite Rsqr_sqrt; [ rewrite H; unfold Rsqr; ring | apply Rplus_le_le_0_compat | apply Rplus_le_le_0_compat | apply Rplus_le_le_0_compat ]; apply Rle_0_sqr.",
            "VernacExtend",
            "e85763e8018aa9545878c7cfee3c0e69fdf4e485"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma triangle : forall x0 y0 x1 y1 x2 y2:R, dist_euc x0 y0 x1 y1 <= dist_euc x0 y0 x2 y2 + dist_euc x2 y2 x1 y1.",
            "VernacStartTheoremProof",
            "01d30248f8d098348e50a0972b6205dfc613c77f"
        ],
        [
            "intros; unfold dist_euc; apply Rsqr_incr_0; [ rewrite Rsqr_plus; repeat rewrite Rsqr_sqrt; [ replace (Rsqr (x0 - x1)) with (Rsqr (x0 - x2) + Rsqr (x2 - x1) + 2 * (x0 - x2) * (x2 - x1)); [ replace (Rsqr (y0 - y1)) with (Rsqr (y0 - y2) + Rsqr (y2 - y1) + 2 * (y0 - y2) * (y2 - y1)); [ apply Rplus_le_reg_l with (- Rsqr (x0 - x2) - Rsqr (x2 - x1) - Rsqr (y0 - y2) - Rsqr (y2 - y1)); replace (- Rsqr (x0 - x2) - Rsqr (x2 - x1) - Rsqr (y0 - y2) - Rsqr (y2 - y1) + (Rsqr (x0 - x2) + Rsqr (x2 - x1) + 2 * (x0 - x2) * (x2 - x1) + (Rsqr (y0 - y2) + Rsqr (y2 - y1) + 2 * (y0 - y2) * (y2 - y1)))) with (2 * ((x0 - x2) * (x2 - x1) + (y0 - y2) * (y2 - y1))); [ replace (- Rsqr (x0 - x2) - Rsqr (x2 - x1) - Rsqr (y0 - y2) - Rsqr (y2 - y1) + (Rsqr (x0 - x2) + Rsqr (y0 - y2) + (Rsqr (x2 - x1) + Rsqr (y2 - y1)) + 2 * sqrt (Rsqr (x0 - x2) + Rsqr (y0 - y2)) * sqrt (Rsqr (x2 - x1) + Rsqr (y2 - y1)))) with (2 * (sqrt (Rsqr (x0 - x2) + Rsqr (y0 - y2)) * sqrt (Rsqr (x2 - x1) + Rsqr (y2 - y1)))); [ apply Rmult_le_compat_l; [ left; cut (0%nat <> 2%nat); [ intros; generalize (lt_INR_0 2 (neq_O_lt 2 H)); intro H0; assumption | discriminate ] | apply sqrt_cauchy ] | ring ] | ring ] | ring_Rsqr ] | ring_Rsqr ] | apply Rplus_le_le_0_compat; apply Rle_0_sqr | apply Rplus_le_le_0_compat; apply Rle_0_sqr | apply Rplus_le_le_0_compat; apply Rle_0_sqr ] | apply sqrt_positivity; apply Rplus_le_le_0_compat; apply Rle_0_sqr | apply Rplus_le_le_0_compat; apply sqrt_positivity; apply Rplus_le_le_0_compat; apply Rle_0_sqr ].",
            "VernacExtend",
            "3d67a72310ff364341dcb06239761923b762cf95"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition xt (x tx:R) : R := x + tx.",
            "VernacDefinition",
            "4c6c1685298c3a65215ad5f485b5f0aaf5258929"
        ],
        [
            "Definition yt (y ty:R) : R := y + ty.",
            "VernacDefinition",
            "e4d71c0bbbaa0da5434b12ea5bdb783afc81a187"
        ],
        [
            "Lemma translation_0 : forall x y:R, xt x 0 = x /\\ yt y 0 = y.",
            "VernacStartTheoremProof",
            "cd5fa006af8bd7d15d75b43421f5932e696af837"
        ],
        [
            "intros x y; split; [ unfold xt | unfold yt ]; ring.",
            "VernacExtend",
            "29dd67229ee9993eb03a58cc5733f60a67c8f549"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isometric_translation : forall x1 x2 y1 y2 tx ty:R, Rsqr (x1 - x2) + Rsqr (y1 - y2) = Rsqr (xt x1 tx - xt x2 tx) + Rsqr (yt y1 ty - yt y2 ty).",
            "VernacStartTheoremProof",
            "b1e3bb2ccc063399af8d5c5ec664b51f3d35351d"
        ],
        [
            "intros; unfold Rsqr, xt, yt; ring.",
            "VernacExtend",
            "d67d7b036ed1439c3dd27043394a974ebee3f90f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition xr (x y theta:R) : R := x * cos theta + y * sin theta.",
            "VernacDefinition",
            "1d2311a7d62a7fdab521423cd8f4f2e2e14e2034"
        ],
        [
            "Definition yr (x y theta:R) : R := - x * sin theta + y * cos theta.",
            "VernacDefinition",
            "6c70ec35540b1a4751a2dc63a1d39b78d599ba12"
        ],
        [
            "Lemma rotation_0 : forall x y:R, xr x y 0 = x /\\ yr x y 0 = y.",
            "VernacStartTheoremProof",
            "68503b1b0fd4d2b471df66e4b7f6fb7be9f266a1"
        ],
        [
            "intros x y; unfold xr, yr; split; rewrite cos_0; rewrite sin_0; ring.",
            "VernacExtend",
            "858ab2da4536d5be78d8e2faeed6a9fd5f4e7bf9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma rotation_PI2 : forall x y:R, xr x y (PI / 2) = y /\\ yr x y (PI / 2) = - x.",
            "VernacStartTheoremProof",
            "20e0aee4106a0b590dfa4806c14a01e9db2c3998"
        ],
        [
            "intros x y; unfold xr, yr; split; rewrite cos_PI2; rewrite sin_PI2; ring.",
            "VernacExtend",
            "2b3d8e5d0350f72f9e847d77691daba4607dbadf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isometric_rotation_0 : forall x1 y1 x2 y2 theta:R, Rsqr (x1 - x2) + Rsqr (y1 - y2) = Rsqr (xr x1 y1 theta - xr x2 y2 theta) + Rsqr (yr x1 y1 theta - yr x2 y2 theta).",
            "VernacStartTheoremProof",
            "6b09522538201258bf692669eeb2483ad0cfc5db"
        ],
        [
            "intros; unfold xr, yr; replace (x1 * cos theta + y1 * sin theta - (x2 * cos theta + y2 * sin theta)) with (cos theta * (x1 - x2) + sin theta * (y1 - y2)); [ replace (- x1 * sin theta + y1 * cos theta - (- x2 * sin theta + y2 * cos theta)) with (cos theta * (y1 - y2) + sin theta * (x2 - x1)); [ repeat rewrite Rsqr_plus; repeat rewrite Rsqr_mult; repeat rewrite cos2; ring_simplify; replace (x2 - x1) with (- (x1 - x2)); [ rewrite <- Rsqr_neg; ring | ring ] | ring ] | ring ].",
            "VernacExtend",
            "512ac1b04c7bb17977570641608c5d841eb878bc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isometric_rotation : forall x1 y1 x2 y2 theta:R, dist_euc x1 y1 x2 y2 = dist_euc (xr x1 y1 theta) (yr x1 y1 theta) (xr x2 y2 theta) (yr x2 y2 theta).",
            "VernacStartTheoremProof",
            "5d9a11e957390bc861b952d0da5dbb207dd3be6e"
        ],
        [
            "unfold dist_euc; intros; apply Rsqr_inj; [ apply sqrt_positivity; apply Rplus_le_le_0_compat | apply sqrt_positivity; apply Rplus_le_le_0_compat | repeat rewrite Rsqr_sqrt; [ apply isometric_rotation_0 | apply Rplus_le_le_0_compat | apply Rplus_le_le_0_compat ] ]; apply Rle_0_sqr.",
            "VernacExtend",
            "648ca2cac32465574d24795dc43e9d754fe09fdf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isometric_rot_trans : forall x1 y1 x2 y2 tx ty theta:R, Rsqr (x1 - x2) + Rsqr (y1 - y2) = Rsqr (xr (xt x1 tx) (yt y1 ty) theta - xr (xt x2 tx) (yt y2 ty) theta) + Rsqr (yr (xt x1 tx) (yt y1 ty) theta - yr (xt x2 tx) (yt y2 ty) theta).",
            "VernacStartTheoremProof",
            "6c434d820add9b3c6b4b09b2118fe82be6bbc897"
        ],
        [
            "intros; rewrite <- isometric_rotation_0; apply isometric_translation.",
            "VernacExtend",
            "25c60c32c38cd02c2bd80fb5be23f6dddc5025d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma isometric_trans_rot : forall x1 y1 x2 y2 tx ty theta:R, Rsqr (x1 - x2) + Rsqr (y1 - y2) = Rsqr (xt (xr x1 y1 theta) tx - xt (xr x2 y2 theta) tx) + Rsqr (yt (yr x1 y1 theta) ty - yt (yr x2 y2 theta) ty).",
            "VernacStartTheoremProof",
            "878cff02622e74e551eb9ee89197bcf713ce7dc5"
        ],
        [
            "intros; rewrite <- isometric_translation; apply isometric_rotation_0.",
            "VernacExtend",
            "e9c076b95dfdd8c1f0b9dcf2fa744ed3179fb3a5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "distance_refl",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros x0 y0; unfold dist_euc; apply Rsqr_inj; [ apply sqrt_positivity; apply Rplus_le_le_0_compat; [ apply Rle_0_sqr | apply Rle_0_sqr ] | right; reflexivity | rewrite Rsqr_0; rewrite Rsqr_sqrt; [ unfold Rsqr; ring | apply Rplus_le_le_0_compat; [ apply Rle_0_sqr | apply Rle_0_sqr ] ] ].",
                        "VernacExtend",
                        "40fbb7b13195f0508a034861a03c518534d52fd8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "distance_symm",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros x0 y0 x1 y1; unfold dist_euc; apply Rsqr_inj; [ apply sqrt_positivity; apply Rplus_le_le_0_compat | apply sqrt_positivity; apply Rplus_le_le_0_compat | repeat rewrite Rsqr_sqrt; [ unfold Rsqr; ring | apply Rplus_le_le_0_compat | apply Rplus_le_le_0_compat ] ]; apply Rle_0_sqr.",
                        "VernacExtend",
                        "7c0e117634d6d5625f52d1a33426449a4c350dce"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "law_cosines",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "unfold dist_euc; intros; repeat rewrite Rsqr_sqrt; [ rewrite H; unfold Rsqr; ring | apply Rplus_le_le_0_compat | apply Rplus_le_le_0_compat | apply Rplus_le_le_0_compat ]; apply Rle_0_sqr.",
                        "VernacExtend",
                        "e85763e8018aa9545878c7cfee3c0e69fdf4e485"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "triangle",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros; unfold dist_euc; apply Rsqr_incr_0; [ rewrite Rsqr_plus; repeat rewrite Rsqr_sqrt; [ replace (Rsqr (x0 - x1)) with (Rsqr (x0 - x2) + Rsqr (x2 - x1) + 2 * (x0 - x2) * (x2 - x1)); [ replace (Rsqr (y0 - y1)) with (Rsqr (y0 - y2) + Rsqr (y2 - y1) + 2 * (y0 - y2) * (y2 - y1)); [ apply Rplus_le_reg_l with (- Rsqr (x0 - x2) - Rsqr (x2 - x1) - Rsqr (y0 - y2) - Rsqr (y2 - y1)); replace (- Rsqr (x0 - x2) - Rsqr (x2 - x1) - Rsqr (y0 - y2) - Rsqr (y2 - y1) + (Rsqr (x0 - x2) + Rsqr (x2 - x1) + 2 * (x0 - x2) * (x2 - x1) + (Rsqr (y0 - y2) + Rsqr (y2 - y1) + 2 * (y0 - y2) * (y2 - y1)))) with (2 * ((x0 - x2) * (x2 - x1) + (y0 - y2) * (y2 - y1))); [ replace (- Rsqr (x0 - x2) - Rsqr (x2 - x1) - Rsqr (y0 - y2) - Rsqr (y2 - y1) + (Rsqr (x0 - x2) + Rsqr (y0 - y2) + (Rsqr (x2 - x1) + Rsqr (y2 - y1)) + 2 * sqrt (Rsqr (x0 - x2) + Rsqr (y0 - y2)) * sqrt (Rsqr (x2 - x1) + Rsqr (y2 - y1)))) with (2 * (sqrt (Rsqr (x0 - x2) + Rsqr (y0 - y2)) * sqrt (Rsqr (x2 - x1) + Rsqr (y2 - y1)))); [ apply Rmult_le_compat_l; [ left; cut (0%nat <> 2%nat); [ intros; generalize (lt_INR_0 2 (neq_O_lt 2 H)); intro H0; assumption | discriminate ] | apply sqrt_cauchy ] | ring ] | ring ] | ring_Rsqr ] | ring_Rsqr ] | apply Rplus_le_le_0_compat; apply Rle_0_sqr | apply Rplus_le_le_0_compat; apply Rle_0_sqr | apply Rplus_le_le_0_compat; apply Rle_0_sqr ] | apply sqrt_positivity; apply Rplus_le_le_0_compat; apply Rle_0_sqr | apply Rplus_le_le_0_compat; apply sqrt_positivity; apply Rplus_le_le_0_compat; apply Rle_0_sqr ].",
                        "VernacExtend",
                        "3d67a72310ff364341dcb06239761923b762cf95"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "translation_0",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros x y; split; [ unfold xt | unfold yt ]; ring.",
                        "VernacExtend",
                        "29dd67229ee9993eb03a58cc5733f60a67c8f549"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isometric_translation",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "intros; unfold Rsqr, xt, yt; ring.",
                        "VernacExtend",
                        "d67d7b036ed1439c3dd27043394a974ebee3f90f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotation_0",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "intros x y; unfold xr, yr; split; rewrite cos_0; rewrite sin_0; ring.",
                        "VernacExtend",
                        "858ab2da4536d5be78d8e2faeed6a9fd5f4e7bf9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "rotation_PI2",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros x y; unfold xr, yr; split; rewrite cos_PI2; rewrite sin_PI2; ring.",
                        "VernacExtend",
                        "2b3d8e5d0350f72f9e847d77691daba4607dbadf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isometric_rotation_0",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "intros; unfold xr, yr; replace (x1 * cos theta + y1 * sin theta - (x2 * cos theta + y2 * sin theta)) with (cos theta * (x1 - x2) + sin theta * (y1 - y2)); [ replace (- x1 * sin theta + y1 * cos theta - (- x2 * sin theta + y2 * cos theta)) with (cos theta * (y1 - y2) + sin theta * (x2 - x1)); [ repeat rewrite Rsqr_plus; repeat rewrite Rsqr_mult; repeat rewrite cos2; ring_simplify; replace (x2 - x1) with (- (x1 - x2)); [ rewrite <- Rsqr_neg; ring | ring ] | ring ] | ring ].",
                        "VernacExtend",
                        "512ac1b04c7bb17977570641608c5d841eb878bc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isometric_rotation",
            "line_nb": 38,
            "steps": [
                {
                    "command": [
                        "unfold dist_euc; intros; apply Rsqr_inj; [ apply sqrt_positivity; apply Rplus_le_le_0_compat | apply sqrt_positivity; apply Rplus_le_le_0_compat | repeat rewrite Rsqr_sqrt; [ apply isometric_rotation_0 | apply Rplus_le_le_0_compat | apply Rplus_le_le_0_compat ] ]; apply Rle_0_sqr.",
                        "VernacExtend",
                        "648ca2cac32465574d24795dc43e9d754fe09fdf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isometric_rot_trans",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "intros; rewrite <- isometric_rotation_0; apply isometric_translation.",
                        "VernacExtend",
                        "25c60c32c38cd02c2bd80fb5be23f6dddc5025d4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "isometric_trans_rot",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "intros; rewrite <- isometric_translation; apply isometric_rotation_0.",
                        "VernacExtend",
                        "e9c076b95dfdd8c1f0b9dcf2fa744ed3179fb3a5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}