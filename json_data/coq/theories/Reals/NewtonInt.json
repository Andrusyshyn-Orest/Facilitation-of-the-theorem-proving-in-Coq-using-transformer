{
    "filename": "theories/Reals/NewtonInt.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import SeqSeries.",
            "VernacRequire",
            "379ec54d32465fe6d151cce8474fb7ff733028bb"
        ],
        [
            "Require Import Rtrigo1.",
            "VernacRequire",
            "598baa2d58df0ffe31096944ae833778167e93eb"
        ],
        [
            "Require Import Ranalysis.",
            "VernacRequire",
            "63fe9d087487ed97281f5bfd2a10824bbecfd420"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Definition Newton_integrable (f:R -> R) (a b:R) : Type := { g:R -> R | antiderivative f g a b \\/ antiderivative f g b a }.",
            "VernacDefinition",
            "b828e34a295e9ffdad5d637076228f7d9c5536f3"
        ],
        [
            "Definition NewtonInt (f:R -> R) (a b:R) (pr:Newton_integrable f a b) : R := let (g,_) := pr in g b - g a.",
            "VernacDefinition",
            "9e073a3bcffb31ec8829cbdb1ac5b1455c1164b9"
        ],
        [
            "Lemma FTCN_step1 : forall (f:Differential) (a b:R), Newton_integrable (fun x:R => derive_pt f x (cond_diff f x)) a b.",
            "VernacStartTheoremProof",
            "78be08024999e3c6c481301a0bab8f65df057959"
        ],
        [
            "intros f a b; unfold Newton_integrable; exists (d1 f); unfold antiderivative; intros; case (Rle_dec a b); intro; [ left; split; [ intros; exists (cond_diff f x); reflexivity | assumption ] | right; split; [ intros; exists (cond_diff f x); reflexivity | auto with real ] ].",
            "VernacExtend",
            "a2083ca005ff2144d6252ee05a2f38f7aff6ab78"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma FTC_Newton : forall (f:Differential) (a b:R), NewtonInt (fun x:R => derive_pt f x (cond_diff f x)) a b (FTCN_step1 f a b) = f b - f a.",
            "VernacStartTheoremProof",
            "4a719643b35db360f062911fd0347d389b274fc8"
        ],
        [
            "intros; unfold NewtonInt; reflexivity.",
            "VernacExtend",
            "197506975fb6f35692a996e987105a5ae2742769"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NewtonInt_P1 : forall (f:R -> R) (a:R), Newton_integrable f a a.",
            "VernacStartTheoremProof",
            "918cde1f416df23425c9b42cbc09b4da37f512e2"
        ],
        [
            "intros f a; unfold Newton_integrable; exists (fct_cte (f a) * id)%F; left; unfold antiderivative; split.",
            "VernacExtend",
            "fa093199fcf2a9b7fe1a5ab89e2b3a5c19e9e33c"
        ],
        [
            "intros; assert (H1 : derivable_pt (fct_cte (f a) * id) x).",
            "VernacExtend",
            "1b7de2b8cc42296477d879ab405942cccc242e41"
        ],
        [
            "apply derivable_pt_mult.",
            "VernacExtend",
            "09d703b47325e0422af42b4de53a3bdd7ab2fc1e"
        ],
        [
            "apply derivable_pt_const.",
            "VernacExtend",
            "5f79fec976d4bf9b10f4ae3f2bf89e7653fa9cab"
        ],
        [
            "apply derivable_pt_id.",
            "VernacExtend",
            "60f42eff9d8c206a69d6193c8701f3510640751b"
        ],
        [
            "exists H1; assert (H2 : x = a).",
            "VernacExtend",
            "160426bb13b64c0e94b8cd95a13fbb8891fd8b61"
        ],
        [
            "elim H; intros; apply Rle_antisym; assumption.",
            "VernacExtend",
            "83967d2be877fef1e60ba876b101ecc38598e5a3"
        ],
        [
            "symmetry ; apply derive_pt_eq_0; replace (f x) with (0 * id x + fct_cte (f a) x * 1); [ apply (derivable_pt_lim_mult (fct_cte (f a)) id x); [ apply derivable_pt_lim_const | apply derivable_pt_lim_id ] | unfold id, fct_cte; rewrite H2; ring ].",
            "VernacExtend",
            "4361757cf2d4b3d25d4dba5c7896527709bafdea"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NewtonInt_P2 : forall (f:R -> R) (a:R), NewtonInt f a a (NewtonInt_P1 f a) = 0.",
            "VernacStartTheoremProof",
            "6bdb809a2081399b98bde2a4a0aa4dfe0bfc1950"
        ],
        [
            "intros; unfold NewtonInt; simpl; unfold mult_fct, fct_cte, id.",
            "VernacExtend",
            "c626a5eff289d612a0f0d59a92feb38d3b22fb7b"
        ],
        [
            "destruct NewtonInt_P1 as [g _].",
            "VernacExtend",
            "3c52f34aaee54b9d5fb410c27decc805e20787c4"
        ],
        [
            "now apply Rminus_diag_eq.",
            "VernacExtend",
            "87bcad2b135d3ce00d500a6e6aacdeb15cc94e96"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NewtonInt_P3 : forall (f:R -> R) (a b:R) (X:Newton_integrable f a b), Newton_integrable f b a.",
            "VernacStartTheoremProof",
            "47c3fbbcd36620c5f824c0233da155e02e2eadf7"
        ],
        [
            "unfold Newton_integrable; intros; elim X; intros g H; exists g; tauto.",
            "VernacExtend",
            "8bc4cbe27223e831c7a075b14a60aa25f2907e26"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma NewtonInt_P4 : forall (f:R -> R) (a b:R) (pr:Newton_integrable f a b), NewtonInt f a b pr = - NewtonInt f b a (NewtonInt_P3 f a b pr).",
            "VernacStartTheoremProof",
            "f5edd9821d49ae38ac70e82a2d192c2074090d5b"
        ],
        [
            "intros f a b (x,H).",
            "VernacExtend",
            "e0b36448ffcb2ff22617e8141cd376afc5a63b76"
        ],
        [
            "unfold NewtonInt, NewtonInt_P3; simpl; ring.",
            "VernacExtend",
            "ad8ba1ca7040fbde3f1eb9605359205af4be0b85"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NewtonInt_P5 : forall (f g:R -> R) (l a b:R), Newton_integrable f a b -> Newton_integrable g a b -> Newton_integrable (fun x:R => l * f x + g x) a b.",
            "VernacStartTheoremProof",
            "7af7d7cfaea997144e00ab6da62fffffcf69bd5c"
        ],
        [
            "unfold Newton_integrable; intros f g l a b X X0; elim X; intros x p; elim X0; intros x0 p0; exists (fun y:R => l * x y + x0 y).",
            "VernacExtend",
            "8eb8806ddb5aa6e93450d0451f6f05a776e00fac"
        ],
        [
            "elim p; intro.",
            "VernacExtend",
            "71d5239fd5e60d57ea8617fc109dce16e7b86056"
        ],
        [
            "elim p0; intro.",
            "VernacExtend",
            "4e39db615a37fac5585ac07aea9caee3ddd15b63"
        ],
        [
            "left; unfold antiderivative; unfold antiderivative in H, H0; elim H; clear H; intros; elim H0; clear H0; intros H0 _.",
            "VernacExtend",
            "2c4416627b85dab0254183d021111a4773532cbd"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros; elim (H _ H2); elim (H0 _ H2); intros.",
            "VernacExtend",
            "aa4de5f456cde6fd9dd2724be713752037460a42"
        ],
        [
            "assert (H5 : derivable_pt (fun y:R => l * x y + x0 y) x1).",
            "VernacExtend",
            "24b9fa60f6d4c726596864f71aa7ffa276795186"
        ],
        [
            "reg.",
            "VernacExtend",
            "200773634894b8319f51d08aac98d6835b0db846"
        ],
        [
            "exists H5; symmetry ; reg; rewrite <- H3; rewrite <- H4; reflexivity.",
            "VernacExtend",
            "f0ee43f957edc9fe19d93fe90869ce9e85dca4a7"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold antiderivative in H, H0; elim H; elim H0; intros; elim H4; intro.",
            "VernacExtend",
            "36c941fdb4d902f79569d2bbf0030714504fb600"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H5 H2)).",
            "VernacExtend",
            "025168c0b927ca2a17b25f65054d970d938b616c"
        ],
        [
            "left; rewrite <- H5; unfold antiderivative; split.",
            "VernacExtend",
            "1b4e7fe37024808319eee32d912c628462a6f0c5"
        ],
        [
            "intros; elim H6; intros; assert (H9 : x1 = a).",
            "VernacExtend",
            "7ca29ce24f77b2208a5beb06105fc4c5c6ec5ecb"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "assert (H10 : a <= x1 <= b).",
            "VernacExtend",
            "eccfa48457548d307ab8e7a360eb74bbb0eb0232"
        ],
        [
            "split; right; [ symmetry ; assumption | rewrite <- H5; assumption ].",
            "VernacExtend",
            "12a9d569ac119e24184f4cc8ab125de15007a0ad"
        ],
        [
            "assert (H11 : b <= x1 <= a).",
            "VernacExtend",
            "a266aa0fb1a91552835e12747d73639d0c83ec7d"
        ],
        [
            "split; right; [ rewrite <- H5; symmetry ; assumption | assumption ].",
            "VernacExtend",
            "77a564485b2129824619ea8d1a9e1b35bc5add57"
        ],
        [
            "assert (H12 : derivable_pt x x1).",
            "VernacExtend",
            "c4018977ae79ea546b9aa8077ef1c5e6198e52ed"
        ],
        [
            "unfold derivable_pt; exists (f x1); elim (H3 _ H10); intros; eapply derive_pt_eq_1; symmetry ; apply H12.",
            "VernacExtend",
            "5df303a9b6bf5803854cb25b9f467fa661ff0cc8"
        ],
        [
            "assert (H13 : derivable_pt x0 x1).",
            "VernacExtend",
            "deea5af58f2d48ff9df7a6d2b18ec9f5d0b91fd0"
        ],
        [
            "unfold derivable_pt; exists (g x1); elim (H1 _ H11); intros; eapply derive_pt_eq_1; symmetry ; apply H13.",
            "VernacExtend",
            "7222c2ba61c1a01033e23a1faa5131fe8ea2e20f"
        ],
        [
            "assert (H14 : derivable_pt (fun y:R => l * x y + x0 y) x1).",
            "VernacExtend",
            "a328267de029efbd28a78e3b51a181e0cdc10327"
        ],
        [
            "reg.",
            "VernacExtend",
            "200773634894b8319f51d08aac98d6835b0db846"
        ],
        [
            "exists H14; symmetry ; reg.",
            "VernacExtend",
            "fefcb00aa2c6a69836bd112e8317648dab6447ea"
        ],
        [
            "assert (H15 : derive_pt x0 x1 H13 = g x1).",
            "VernacExtend",
            "116d197f90b564675be7ad9217af9afc04f1dda1"
        ],
        [
            "elim (H1 _ H11); intros; rewrite H15; apply pr_nu.",
            "VernacExtend",
            "bf9a83aab47d8465a6755b3d385cf0dca4c17427"
        ],
        [
            "assert (H16 : derive_pt x x1 H12 = f x1).",
            "VernacExtend",
            "17219a6041c9d54c63e8743eb9f1b374d7e3643f"
        ],
        [
            "elim (H3 _ H10); intros; rewrite H16; apply pr_nu.",
            "VernacExtend",
            "328313c05588bd6e14e03a3f52663de2272ddd19"
        ],
        [
            "rewrite H15; rewrite H16; ring.",
            "VernacExtend",
            "0d75e0b382b0da0fbf39ec464936a724b16a4a0c"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "elim p0; intro.",
            "VernacExtend",
            "4e39db615a37fac5585ac07aea9caee3ddd15b63"
        ],
        [
            "unfold antiderivative in H, H0; elim H; elim H0; intros; elim H4; intro.",
            "VernacExtend",
            "36c941fdb4d902f79569d2bbf0030714504fb600"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H5 H2)).",
            "VernacExtend",
            "025168c0b927ca2a17b25f65054d970d938b616c"
        ],
        [
            "left; rewrite H5; unfold antiderivative; split.",
            "VernacExtend",
            "d4cb148bb5a25d21309a277a5374e9a661ffc58e"
        ],
        [
            "intros; elim H6; intros; assert (H9 : x1 = a).",
            "VernacExtend",
            "7ca29ce24f77b2208a5beb06105fc4c5c6ec5ecb"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "assert (H10 : a <= x1 <= b).",
            "VernacExtend",
            "eccfa48457548d307ab8e7a360eb74bbb0eb0232"
        ],
        [
            "split; right; [ symmetry ; assumption | rewrite H5; assumption ].",
            "VernacExtend",
            "ffd4c3f34a26d9bb43e1ac9107de95de7918a660"
        ],
        [
            "assert (H11 : b <= x1 <= a).",
            "VernacExtend",
            "a266aa0fb1a91552835e12747d73639d0c83ec7d"
        ],
        [
            "split; right; [ rewrite H5; symmetry ; assumption | assumption ].",
            "VernacExtend",
            "a07a7dc69777cfb241dd5330d3e335cdbaa376ba"
        ],
        [
            "assert (H12 : derivable_pt x x1).",
            "VernacExtend",
            "c4018977ae79ea546b9aa8077ef1c5e6198e52ed"
        ],
        [
            "unfold derivable_pt; exists (f x1); elim (H3 _ H11); intros; eapply derive_pt_eq_1; symmetry ; apply H12.",
            "VernacExtend",
            "ad322202a77dd363ef12e5e121a299a7240b7f12"
        ],
        [
            "assert (H13 : derivable_pt x0 x1).",
            "VernacExtend",
            "deea5af58f2d48ff9df7a6d2b18ec9f5d0b91fd0"
        ],
        [
            "unfold derivable_pt; exists (g x1); elim (H1 _ H10); intros; eapply derive_pt_eq_1; symmetry ; apply H13.",
            "VernacExtend",
            "75526ef5691bb64bf006ceb2cdfb3444613ea337"
        ],
        [
            "assert (H14 : derivable_pt (fun y:R => l * x y + x0 y) x1).",
            "VernacExtend",
            "a328267de029efbd28a78e3b51a181e0cdc10327"
        ],
        [
            "reg.",
            "VernacExtend",
            "200773634894b8319f51d08aac98d6835b0db846"
        ],
        [
            "exists H14; symmetry ; reg.",
            "VernacExtend",
            "fefcb00aa2c6a69836bd112e8317648dab6447ea"
        ],
        [
            "assert (H15 : derive_pt x0 x1 H13 = g x1).",
            "VernacExtend",
            "116d197f90b564675be7ad9217af9afc04f1dda1"
        ],
        [
            "elim (H1 _ H10); intros; rewrite H15; apply pr_nu.",
            "VernacExtend",
            "f3fb9d0d3ced295e032da60bc10d6edbb280f314"
        ],
        [
            "assert (H16 : derive_pt x x1 H12 = f x1).",
            "VernacExtend",
            "17219a6041c9d54c63e8743eb9f1b374d7e3643f"
        ],
        [
            "elim (H3 _ H11); intros; rewrite H16; apply pr_nu.",
            "VernacExtend",
            "5d9ac355ba30073e52b52f23cea0f43384c5e7af"
        ],
        [
            "rewrite H15; rewrite H16; ring.",
            "VernacExtend",
            "0d75e0b382b0da0fbf39ec464936a724b16a4a0c"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "right; unfold antiderivative; unfold antiderivative in H, H0; elim H; clear H; intros; elim H0; clear H0; intros H0 _; split.",
            "VernacExtend",
            "4b728a8ec921ce58a21df28f77b5116b1ae2cad0"
        ],
        [
            "intros; elim (H _ H2); elim (H0 _ H2); intros.",
            "VernacExtend",
            "aa4de5f456cde6fd9dd2724be713752037460a42"
        ],
        [
            "assert (H5 : derivable_pt (fun y:R => l * x y + x0 y) x1).",
            "VernacExtend",
            "24b9fa60f6d4c726596864f71aa7ffa276795186"
        ],
        [
            "reg.",
            "VernacExtend",
            "200773634894b8319f51d08aac98d6835b0db846"
        ],
        [
            "exists H5; symmetry ; reg; rewrite <- H3; rewrite <- H4; reflexivity.",
            "VernacExtend",
            "f0ee43f957edc9fe19d93fe90869ce9e85dca4a7"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma antiderivative_P1 : forall (f g F G:R -> R) (l a b:R), antiderivative f F a b -> antiderivative g G a b -> antiderivative (fun x:R => l * f x + g x) (fun x:R => l * F x + G x) a b.",
            "VernacStartTheoremProof",
            "6d430c052eeda27460f6247d6b5319994babfd9d"
        ],
        [
            "unfold antiderivative; intros; elim H; elim H0; clear H H0; intros; split.",
            "VernacExtend",
            "5799f666aef88964311d62ba2ff3ea68e94e2e2c"
        ],
        [
            "intros; elim (H _ H3); elim (H1 _ H3); intros.",
            "VernacExtend",
            "1e4f9c969a717fef203d141e184f06013af63c77"
        ],
        [
            "assert (H6 : derivable_pt (fun x:R => l * F x + G x) x).",
            "VernacExtend",
            "b840472f69349f73b5ee72795cb88ca8dcab9d66"
        ],
        [
            "reg.",
            "VernacExtend",
            "200773634894b8319f51d08aac98d6835b0db846"
        ],
        [
            "exists H6; symmetry ; reg; rewrite <- H4; rewrite <- H5; ring.",
            "VernacExtend",
            "67ee903aeb0bc5705729ce77b383fa079fef5b61"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NewtonInt_P6 : forall (f g:R -> R) (l a b:R) (pr1:Newton_integrable f a b) (pr2:Newton_integrable g a b), NewtonInt (fun x:R => l * f x + g x) a b (NewtonInt_P5 f g l a b pr1 pr2) = l * NewtonInt f a b pr1 + NewtonInt g a b pr2.",
            "VernacStartTheoremProof",
            "32ef5c959d1872ce8f338b2b4c0d4eb57d3b9379"
        ],
        [
            "intros f g l a b pr1 pr2; unfold NewtonInt; destruct (NewtonInt_P5 f g l a b pr1 pr2) as (x,o); destruct pr1 as (x0,o0); destruct pr2 as (x1,o1); destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "a9324024b5158bfdd905a7c0892fc62e953621e9"
        ],
        [
            "elim o; intro.",
            "VernacExtend",
            "1b6e53fe32c4d375e5f91dfdd0d7140111ae6adc"
        ],
        [
            "elim o0; intro.",
            "VernacExtend",
            "3fa72803f6e989edc6e0e547e0c35bbec503ff3d"
        ],
        [
            "elim o1; intro.",
            "VernacExtend",
            "7c631e70a1aa9e990ab89dc8d73fe012fbfb04e7"
        ],
        [
            "assert (H2 := antiderivative_P1 f g x0 x1 l a b H0 H1); assert (H3 := antiderivative_Ucte _ _ _ _ _ H H2); elim H3; intros; assert (H5 : a <= a <= b).",
            "VernacExtend",
            "0364d76d61e5d5f415827e470850b734c6a85bdc"
        ],
        [
            "split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "6bab46c1adec52d812fd328f9f48728040031941"
        ],
        [
            "assert (H6 : a <= b <= b).",
            "VernacExtend",
            "9cf70acfbea958fc1c66d4e5f20233653fdfae41"
        ],
        [
            "split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "7f83d8514281eecf7d46d76f6ccefd321f22c757"
        ],
        [
            "assert (H7 := H4 _ H5); assert (H8 := H4 _ H6); rewrite H7; rewrite H8; ring.",
            "VernacExtend",
            "764c483a651212ce0e43241c198b497616c57c0b"
        ],
        [
            "unfold antiderivative in H1; elim H1; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H3 Hlt)).",
            "VernacExtend",
            "18cb31eeaa112a04fda03b5b092ff5e203993ee9"
        ],
        [
            "unfold antiderivative in H0; elim H0; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt)).",
            "VernacExtend",
            "682c2a3cc02d6a49e6d75c7a8cf6f7e4086f4777"
        ],
        [
            "unfold antiderivative in H; elim H; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 Hlt)).",
            "VernacExtend",
            "333f29ad043ba7d79b61ceabe2562cb77d372338"
        ],
        [
            "rewrite Heq; ring.",
            "VernacExtend",
            "5190250f1da30d7aa59fd776b9eff2527a01e172"
        ],
        [
            "elim o; intro.",
            "VernacExtend",
            "1b6e53fe32c4d375e5f91dfdd0d7140111ae6adc"
        ],
        [
            "unfold antiderivative in H; elim H; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 Hgt)).",
            "VernacExtend",
            "391778041b6cdbc454f2be68866352d23735e556"
        ],
        [
            "elim o0; intro.",
            "VernacExtend",
            "3fa72803f6e989edc6e0e547e0c35bbec503ff3d"
        ],
        [
            "unfold antiderivative in H0; elim H0; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hgt)).",
            "VernacExtend",
            "cc05576152a79b315a1bfe9c31c77871efbb71b9"
        ],
        [
            "elim o1; intro.",
            "VernacExtend",
            "7c631e70a1aa9e990ab89dc8d73fe012fbfb04e7"
        ],
        [
            "unfold antiderivative in H1; elim H1; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H3 Hgt)).",
            "VernacExtend",
            "6d867bd2a2fa5161c06232d5b56f8f15c9c0bd60"
        ],
        [
            "assert (H2 := antiderivative_P1 f g x0 x1 l b a H0 H1); assert (H3 := antiderivative_Ucte _ _ _ _ _ H H2); elim H3; intros; assert (H5 : b <= a <= a).",
            "VernacExtend",
            "9a7c3da81f396cd624f49823ada1eb9c47388994"
        ],
        [
            "split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "7f83d8514281eecf7d46d76f6ccefd321f22c757"
        ],
        [
            "assert (H6 : b <= b <= a).",
            "VernacExtend",
            "c508f56856061a0945a7c21979740bf613fe13d7"
        ],
        [
            "split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "6bab46c1adec52d812fd328f9f48728040031941"
        ],
        [
            "assert (H7 := H4 _ H5); assert (H8 := H4 _ H6); rewrite H7; rewrite H8; ring.",
            "VernacExtend",
            "764c483a651212ce0e43241c198b497616c57c0b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma antiderivative_P2 : forall (f F0 F1:R -> R) (a b c:R), antiderivative f F0 a b -> antiderivative f F1 b c -> antiderivative f (fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end) a c.",
            "VernacStartTheoremProof",
            "a99c207588e3fa297b02d0c1813c8f61a26c7b65"
        ],
        [
            "intros; destruct H as (H,H1), H0 as (H0,H2); split.",
            "VernacExtend",
            "bc0ba9c68cc318a95c8db28c63a76b4a84a91c9a"
        ],
        [
            "2: apply Rle_trans with b; assumption.",
            "VernacExtend",
            "9af008b73ff8b568abb03b3ba2501ea045d69d40"
        ],
        [
            "intros x (H3,H4); destruct (total_order_T x b) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "35a17c3a74d083d759c53b3a82fff44fe62824ac"
        ],
        [
            "assert (H5 : a <= x <= b).",
            "VernacExtend",
            "fbd2b237d2078dcbcf4b42ca58bdd3015cb72df9"
        ],
        [
            "split; [ assumption | left; assumption ].",
            "VernacExtend",
            "9a17617d9d5d9b4c92c139042cb174b4118c0580"
        ],
        [
            "destruct (H _ H5) as (x0,H6).",
            "VernacExtend",
            "7fe4ededb6f89644df56ea9adec88004b1180221"
        ],
        [
            "assert (H7 : derivable_pt_lim (fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end) x (f x)).",
            "VernacExtend",
            "c4a8fd7188a8f4e6301a87258718eb9459c58469"
        ],
        [
            "unfold derivable_pt_lim.",
            "VernacExtend",
            "66f7b70d68baaf84b30d333ccfa3519d0545510b"
        ],
        [
            "intros eps H9.",
            "VernacExtend",
            "8cdf6e45dd953aad73c7e6c51461b68f71bfa352"
        ],
        [
            "assert (H7 : derive_pt F0 x x0 = f x) by (symmetry; assumption).",
            "VernacExtend",
            "f2495502706e03a2712ce2276bced4e8ab5bc2f1"
        ],
        [
            "destruct (derive_pt_eq_1 F0 x (f x) x0 H7 _ H9) as (x1,H10); set (D := Rmin x1 (b - x)).",
            "VernacExtend",
            "6aeb3682ecfdb5ae220dd093065ffc5b3032f060"
        ],
        [
            "assert (H11 : 0 < D).",
            "VernacExtend",
            "17672f2752c78ab1f31eb0f6beec8740ef810824"
        ],
        [
            "unfold D, Rmin; case (Rle_dec x1 (b - x)); intro.",
            "VernacExtend",
            "e49158d16addf131657fcb2caec4f349e244878c"
        ],
        [
            "apply (cond_pos x1).",
            "VernacExtend",
            "be187368ffd92773f09d8ae14c7ed6a401a5f5d5"
        ],
        [
            "apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
        ],
        [
            "exists (mkposreal _ H11); intros h H12 H13.",
            "VernacExtend",
            "ea89c11391c40f8be8e2cd6b6f936d11d533c912"
        ],
        [
            "case (Rle_dec x b) as [|[]].",
            "VernacExtend",
            "bb01d6cde1202cc42e37d85e6b50f28d2296e4e0"
        ],
        [
            "case (Rle_dec (x + h) b) as [|[]].",
            "VernacExtend",
            "62d4b65c8dcc006993f02bd6ac956299d587264a"
        ],
        [
            "apply H10.",
            "VernacExtend",
            "169c3dd7a02593ce4f62696429eb3c1035f98388"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_le_trans with D; [ assumption | unfold D; apply Rmin_l ].",
            "VernacExtend",
            "b31896825746463281f94c5c5fbaa6dc96699822"
        ],
        [
            "left; apply Rlt_le_trans with (x + D).",
            "VernacExtend",
            "ca40ee73ad5d8d6dae54aaee8dcfbf71051f8c5e"
        ],
        [
            "apply Rplus_lt_compat_l; apply Rle_lt_trans with (Rabs h).",
            "VernacExtend",
            "33ac5c85dcd5a4d768c523e3ca7d1b55b6474d7b"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply H13.",
            "VernacExtend",
            "9696b87ee384fc17e17e6c753b792801086b845d"
        ],
        [
            "apply Rplus_le_reg_l with (- x); rewrite <- Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_l; rewrite Rplus_comm; unfold D; apply Rmin_r.",
            "VernacExtend",
            "a9da29243792b88273518d8d4b32b21c50dedf43"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "assert (H8 : derivable_pt (fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end) x).",
            "VernacExtend",
            "9fb9da103137bf86be5ac15a654e77e15b64a2f6"
        ],
        [
            "unfold derivable_pt; exists (f x); apply H7.",
            "VernacExtend",
            "1f8608aaaa81b805021b72a61735b152c0f4fb1a"
        ],
        [
            "exists H8; symmetry ; apply derive_pt_eq_0; apply H7.",
            "VernacExtend",
            "41793704cbc99147feaa3b710eb270444fc9d309"
        ],
        [
            "assert (H5 : a <= x <= b).",
            "VernacExtend",
            "fbd2b237d2078dcbcf4b42ca58bdd3015cb72df9"
        ],
        [
            "split; [ assumption | right; assumption ].",
            "VernacExtend",
            "08e823eb5880848f0ac71f1b1cb8470877f3ccf0"
        ],
        [
            "assert (H6 : b <= x <= c).",
            "VernacExtend",
            "a1a131f6c20f1a011cfe0ade66e80817c7a5ad6b"
        ],
        [
            "split; [ right; symmetry ; assumption | assumption ].",
            "VernacExtend",
            "79e793eef558dbabc32981781b46cf1bd2a14847"
        ],
        [
            "elim (H _ H5); elim (H0 _ H6); intros; assert (H9 : derive_pt F0 x x1 = f x).",
            "VernacExtend",
            "5b85bb8643152ff23da64cd54328d0d41a3bdb7d"
        ],
        [
            "symmetry ; assumption.",
            "VernacExtend",
            "936f544fa969baad9c600ccc844230fa4d067c8b"
        ],
        [
            "assert (H10 : derive_pt F1 x x0 = f x).",
            "VernacExtend",
            "aa635af8965c7f2f69a7b7498b02e6a477bd3159"
        ],
        [
            "symmetry ; assumption.",
            "VernacExtend",
            "936f544fa969baad9c600ccc844230fa4d067c8b"
        ],
        [
            "assert (H11 := derive_pt_eq_1 F0 x (f x) x1 H9); assert (H12 := derive_pt_eq_1 F1 x (f x) x0 H10); assert (H13 : derivable_pt_lim (fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end) x (f x)).",
            "VernacExtend",
            "388f1e0980d5f5a585f5d498a288400a0ef14b32"
        ],
        [
            "unfold derivable_pt_lim; unfold derivable_pt_lim in H11, H12; intros; elim (H11 _ H13); elim (H12 _ H13); intros; set (D := Rmin x2 x3); assert (H16 : 0 < D).",
            "VernacExtend",
            "8057a06986c2d3ca27d145a64c0bce9418a26e2e"
        ],
        [
            "unfold D; unfold Rmin; case (Rle_dec x2 x3); intro.",
            "VernacExtend",
            "d4302761b84268f1d92b7f38027188aa48b2e419"
        ],
        [
            "apply (cond_pos x2).",
            "VernacExtend",
            "f866c3a1346091db6964e20b06cf5f3c5df8a1b2"
        ],
        [
            "apply (cond_pos x3).",
            "VernacExtend",
            "eefde7395d86d7602b76e67da52a41068dd737f4"
        ],
        [
            "exists (mkposreal _ H16); intros; case (Rle_dec x b) as [|[]].",
            "VernacExtend",
            "fe66d5bc643a67d80b612e3244bf8745b7adabea"
        ],
        [
            "case (Rle_dec (x + h) b); intro.",
            "VernacExtend",
            "a340e81614d74a9d6cb5cbc384bc5bee9d5c843a"
        ],
        [
            "apply H15.",
            "VernacExtend",
            "b7865067db5259eafb12346a082417ff349ca746"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_le_trans with D; [ assumption | unfold D; apply Rmin_r ].",
            "VernacExtend",
            "976148a7f8d66a82b29549b04e524e55a737bbf8"
        ],
        [
            "replace (F1 (x + h) + (F0 b - F1 b) - F0 x) with (F1 (x + h) - F1 x).",
            "VernacExtend",
            "79bdf4ff0e426b61a3b682524a9e6693886fd621"
        ],
        [
            "apply H14.",
            "VernacExtend",
            "315c064431a47ec3c8cc41e58a75c8eb749330ef"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_le_trans with D; [ assumption | unfold D; apply Rmin_l ].",
            "VernacExtend",
            "b31896825746463281f94c5c5fbaa6dc96699822"
        ],
        [
            "rewrite Heq; ring.",
            "VernacExtend",
            "5190250f1da30d7aa59fd776b9eff2527a01e172"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "assert (H14 : derivable_pt (fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end) x).",
            "VernacExtend",
            "b612dda82fa5d830945de3771bac5378ffd98da3"
        ],
        [
            "unfold derivable_pt; exists (f x); apply H13.",
            "VernacExtend",
            "edcb3e6c06a5b4316a5f15332be855c0c97b7245"
        ],
        [
            "exists H14; symmetry ; apply derive_pt_eq_0; apply H13.",
            "VernacExtend",
            "3c677f1d0b6fdbe1af77ade685e645206492b0fb"
        ],
        [
            "assert (H5 : b <= x <= c).",
            "VernacExtend",
            "fdaa5e0832824430f4a64e8fda56e67e66bfd423"
        ],
        [
            "split; [ left; assumption | assumption ].",
            "VernacExtend",
            "f46e995379682cc34bee459e60b146982d5a5ae1"
        ],
        [
            "assert (H6 := H0 _ H5); elim H6; clear H6; intros; assert (H7 : derivable_pt_lim (fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end) x (f x)).",
            "VernacExtend",
            "2c40c2f9a92c8201206732ccfe7812cfe0efc2f8"
        ],
        [
            "unfold derivable_pt_lim; assert (H7 : derive_pt F1 x x0 = f x).",
            "VernacExtend",
            "f7da661ae7ca7916fe21e8fffc747cf8fd812e01"
        ],
        [
            "symmetry ; assumption.",
            "VernacExtend",
            "936f544fa969baad9c600ccc844230fa4d067c8b"
        ],
        [
            "assert (H8 := derive_pt_eq_1 F1 x (f x) x0 H7); unfold derivable_pt_lim in H8; intros; elim (H8 _ H9); intros; set (D := Rmin x1 (x - b)); assert (H11 : 0 < D).",
            "VernacExtend",
            "fb2f0384f10ba077de675ed4e821f324ce5a4805"
        ],
        [
            "unfold D; unfold Rmin; case (Rle_dec x1 (x - b)); intro.",
            "VernacExtend",
            "b734b58cd1127996b48737ebc88a6176c16fb2d5"
        ],
        [
            "apply (cond_pos x1).",
            "VernacExtend",
            "be187368ffd92773f09d8ae14c7ed6a401a5f5d5"
        ],
        [
            "apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
        ],
        [
            "exists (mkposreal _ H11); intros; destruct (Rle_dec x b) as [Hle|Hnle].",
            "VernacExtend",
            "f5a19cd3323e0e733caf1ab4f607bd1b6c074ce5"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle Hgt)).",
            "VernacExtend",
            "245bcf1e2571139238da8280f3f29cced908d723"
        ],
        [
            "destruct (Rle_dec (x + h) b) as [Hle'|Hnle'].",
            "VernacExtend",
            "64f78e70495af819682bd8355e3f1940d1e48b21"
        ],
        [
            "cut (b < x + h).",
            "VernacExtend",
            "dba1c2005427f8ea1383559854425fb2b2a1e0d8"
        ],
        [
            "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H14)).",
            "VernacExtend",
            "88bc059c7d78d0f5de2f505c98851141d4cdfce9"
        ],
        [
            "apply Rplus_lt_reg_l with (- h - b); replace (- h - b + b) with (- h); [ idtac | ring ]; replace (- h - b + (x + h)) with (x - b); [ idtac | ring ]; apply Rle_lt_trans with (Rabs h).",
            "VernacExtend",
            "bb73d7571b3a105e0bdd5bbe1ba0425c88651af3"
        ],
        [
            "rewrite <- Rabs_Ropp; apply RRle_abs.",
            "VernacExtend",
            "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
        ],
        [
            "apply Rlt_le_trans with D.",
            "VernacExtend",
            "422ea0d9a715a82089cbb09a4d10170d34feda4e"
        ],
        [
            "apply H13.",
            "VernacExtend",
            "9696b87ee384fc17e17e6c753b792801086b845d"
        ],
        [
            "unfold D; apply Rmin_r.",
            "VernacExtend",
            "69af33cbfd3aa1e1b5eb4e1870671b59b4d37d50"
        ],
        [
            "replace (F1 (x + h) + (F0 b - F1 b) - (F1 x + (F0 b - F1 b))) with (F1 (x + h) - F1 x); [ idtac | ring ]; apply H10.",
            "VernacExtend",
            "1da9d2305c6b00a1af9776cfe00c8cd1fd384001"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_le_trans with D.",
            "VernacExtend",
            "422ea0d9a715a82089cbb09a4d10170d34feda4e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold D; apply Rmin_l.",
            "VernacExtend",
            "fa73c0f5fd5fe9e94d2f9f9ab750bcff90a479a0"
        ],
        [
            "assert (H8 : derivable_pt (fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end) x).",
            "VernacExtend",
            "9fb9da103137bf86be5ac15a654e77e15b64a2f6"
        ],
        [
            "unfold derivable_pt; exists (f x); apply H7.",
            "VernacExtend",
            "1f8608aaaa81b805021b72a61735b152c0f4fb1a"
        ],
        [
            "exists H8; symmetry ; apply derive_pt_eq_0; apply H7.",
            "VernacExtend",
            "41793704cbc99147feaa3b710eb270444fc9d309"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma antiderivative_P3 : forall (f F0 F1:R -> R) (a b c:R), antiderivative f F0 a b -> antiderivative f F1 c b -> antiderivative f F1 c a \\/ antiderivative f F0 a c.",
            "VernacStartTheoremProof",
            "42f261b77bfc1cbc8d8123701aacc94083f03b0b"
        ],
        [
            "intros; unfold antiderivative in H, H0; elim H; clear H; elim H0; clear H0; intros; destruct (total_order_T a c) as [[Hle|Heq]|Hgt].",
            "VernacExtend",
            "a7a54d66a3c305cc14b382af2da1e95c4e299249"
        ],
        [
            "right; unfold antiderivative; split.",
            "VernacExtend",
            "1eb1807f555e56024fda7986c121013be249bf3c"
        ],
        [
            "intros; apply H1; elim H3; intros; split; [ assumption | apply Rle_trans with c; assumption ].",
            "VernacExtend",
            "365170b81c1d1af5b14cc8520f60e7cdcdf73e42"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; unfold antiderivative; split.",
            "VernacExtend",
            "1eb1807f555e56024fda7986c121013be249bf3c"
        ],
        [
            "intros; apply H1; elim H3; intros; split; [ assumption | apply Rle_trans with c; assumption ].",
            "VernacExtend",
            "365170b81c1d1af5b14cc8520f60e7cdcdf73e42"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "left; unfold antiderivative; split.",
            "VernacExtend",
            "b10a4d385cfb5014dc255d49616f12e509eb8fc3"
        ],
        [
            "intros; apply H; elim H3; intros; split; [ assumption | apply Rle_trans with a; assumption ].",
            "VernacExtend",
            "1249da7cc68d72df95f7b1ed8b235c74f874d224"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma antiderivative_P4 : forall (f F0 F1:R -> R) (a b c:R), antiderivative f F0 a b -> antiderivative f F1 a c -> antiderivative f F1 b c \\/ antiderivative f F0 c b.",
            "VernacStartTheoremProof",
            "f722efa58bde940c0fea14e6fe74bde2c8bceb41"
        ],
        [
            "intros; unfold antiderivative in H, H0; elim H; clear H; elim H0; clear H0; intros; destruct (total_order_T c b) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "3306c537af9d67ad30cc5a7fdde623037894529b"
        ],
        [
            "right; unfold antiderivative; split.",
            "VernacExtend",
            "1eb1807f555e56024fda7986c121013be249bf3c"
        ],
        [
            "intros; apply H1; elim H3; intros; split; [ apply Rle_trans with c; assumption | assumption ].",
            "VernacExtend",
            "d7e001dfd89e3cbeb7ac3fda6d49d5e466b6d38c"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; unfold antiderivative; split.",
            "VernacExtend",
            "1eb1807f555e56024fda7986c121013be249bf3c"
        ],
        [
            "intros; apply H1; elim H3; intros; split; [ apply Rle_trans with c; assumption | assumption ].",
            "VernacExtend",
            "d7e001dfd89e3cbeb7ac3fda6d49d5e466b6d38c"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "left; unfold antiderivative; split.",
            "VernacExtend",
            "b10a4d385cfb5014dc255d49616f12e509eb8fc3"
        ],
        [
            "intros; apply H; elim H3; intros; split; [ apply Rle_trans with b; assumption | assumption ].",
            "VernacExtend",
            "9ceab0fee1b4966aa4c4de528e2639b0c7ba2676"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NewtonInt_P7 : forall (f:R -> R) (a b c:R), a < b -> b < c -> Newton_integrable f a b -> Newton_integrable f b c -> Newton_integrable f a c.",
            "VernacStartTheoremProof",
            "fea6e32ff7f93a99777a7c64e2dfb766d0703a0e"
        ],
        [
            "unfold Newton_integrable; intros f a b c Hab Hbc X X0; elim X; clear X; intros F0 H0; elim X0; clear X0; intros F1 H1; set (g := fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end); exists g; left; unfold g; apply antiderivative_P2.",
            "VernacExtend",
            "43a34cf870ff33a1a498ef8d7b986533110ee53d"
        ],
        [
            "elim H0; intro.",
            "VernacExtend",
            "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hab)).",
            "VernacExtend",
            "f6dcf05e3e36a638e4efb142c169cff645330450"
        ],
        [
            "elim H1; intro.",
            "VernacExtend",
            "69e6dce0928c10bc8e91776963343c6dbf299832"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hbc)).",
            "VernacExtend",
            "daa0524ac2facc54fa69ea60a6e6e275036b5e45"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NewtonInt_P8 : forall (f:R -> R) (a b c:R), Newton_integrable f a b -> Newton_integrable f b c -> Newton_integrable f a c.",
            "VernacStartTheoremProof",
            "18e55164fbe13db2afa91f805f6b7f9800343e7f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim X; intros F0 H0.",
            "VernacExtend",
            "67198c881b352ad80ee840b57cfac0c92cfd804c"
        ],
        [
            "elim X0; intros F1 H1.",
            "VernacExtend",
            "ce46b473cb89c93626738df90adaba94ba1c61e9"
        ],
        [
            "destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "6e633ac525c31185442a4f38ba0fc5771d679c59"
        ],
        [
            "destruct (total_order_T b c) as [[Hlt'|Heq']|Hgt'].",
            "VernacExtend",
            "34da7a775fdbe39d0968ed01561aae563cd76b7f"
        ],
        [
            "unfold Newton_integrable; exists (fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end).",
            "VernacExtend",
            "7c34258119b39ec8482717e335ef2d7380a434d5"
        ],
        [
            "elim H0; intro.",
            "VernacExtend",
            "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
        ],
        [
            "elim H1; intro.",
            "VernacExtend",
            "69e6dce0928c10bc8e91776963343c6dbf299832"
        ],
        [
            "left; apply antiderivative_P2; assumption.",
            "VernacExtend",
            "5ad6bdf39e9cc93de4441dbebdf965850339f4f1"
        ],
        [
            "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
            "VernacExtend",
            "6f11dedd91b2934de691d51667de8cc926683012"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt')).",
            "VernacExtend",
            "d1bc7f2739cb1ed34240ccb2aecb89e2a53065ae"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hlt)).",
            "VernacExtend",
            "42cc6c1c3bdd46cdc9ed5dd640be204ae365d0e3"
        ],
        [
            "rewrite Heq' in X; apply X.",
            "VernacExtend",
            "a9c6092f7ab1b76cf81a2f1bfe9bdae0fb52e59e"
        ],
        [
            "destruct (total_order_T a c) as [[Hlt''|Heq'']|Hgt''].",
            "VernacExtend",
            "e04d4001e2e885f1e20a1ea26cadd619ed6b2db1"
        ],
        [
            "unfold Newton_integrable; exists F0.",
            "VernacExtend",
            "3b1d71ac43378200d3042495d27f5b7de3215b38"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "elim H1; intro.",
            "VernacExtend",
            "69e6dce0928c10bc8e91776963343c6dbf299832"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt')).",
            "VernacExtend",
            "53169d3a914371f23fcf2bd6638e1318da2c5da7"
        ],
        [
            "elim H0; intro.",
            "VernacExtend",
            "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
        ],
        [
            "assert (H3 := antiderivative_P3 f F0 F1 a b c H2 H).",
            "VernacExtend",
            "e6df38c851c20a476ea952b94f96fa59a3fba7f6"
        ],
        [
            "elim H3; intro.",
            "VernacExtend",
            "522e36e2853ff30db9e3e0abc7a128144a4e937c"
        ],
        [
            "unfold antiderivative in H4; elim H4; clear H4; intros _ H4.",
            "VernacExtend",
            "62b257d5a7513be5a8c3d135a76bbdc46e88a37b"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 Hlt'')).",
            "VernacExtend",
            "e6d9f9ca5dc3507c086467de27f243028d736d12"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
            "VernacExtend",
            "6f11dedd91b2934de691d51667de8cc926683012"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt)).",
            "VernacExtend",
            "48a15ae72eedd57686c41fc51038d5d562200b82"
        ],
        [
            "rewrite Heq''; apply NewtonInt_P1.",
            "VernacExtend",
            "9f212ac7c02984fa9dbfc84881560994ad4bed0b"
        ],
        [
            "unfold Newton_integrable; exists F1.",
            "VernacExtend",
            "4291f9c883814c0b429b940f355da4b65ff7494b"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "elim H1; intro.",
            "VernacExtend",
            "69e6dce0928c10bc8e91776963343c6dbf299832"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt')).",
            "VernacExtend",
            "53169d3a914371f23fcf2bd6638e1318da2c5da7"
        ],
        [
            "elim H0; intro.",
            "VernacExtend",
            "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
        ],
        [
            "assert (H3 := antiderivative_P3 f F0 F1 a b c H2 H).",
            "VernacExtend",
            "e6df38c851c20a476ea952b94f96fa59a3fba7f6"
        ],
        [
            "elim H3; intro.",
            "VernacExtend",
            "522e36e2853ff30db9e3e0abc7a128144a4e937c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold antiderivative in H4; elim H4; clear H4; intros _ H4.",
            "VernacExtend",
            "62b257d5a7513be5a8c3d135a76bbdc46e88a37b"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 Hgt'')).",
            "VernacExtend",
            "655477c918e4402c805dfc212c0fb5080d9da310"
        ],
        [
            "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
            "VernacExtend",
            "6f11dedd91b2934de691d51667de8cc926683012"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt)).",
            "VernacExtend",
            "48a15ae72eedd57686c41fc51038d5d562200b82"
        ],
        [
            "rewrite Heq; apply X0.",
            "VernacExtend",
            "215b923bf00043c9c980c282b60b266c1b151984"
        ],
        [
            "destruct (total_order_T b c) as [[Hlt'|Heq']|Hgt'].",
            "VernacExtend",
            "34da7a775fdbe39d0968ed01561aae563cd76b7f"
        ],
        [
            "destruct (total_order_T a c) as [[Hlt''|Heq'']|Hgt''].",
            "VernacExtend",
            "e04d4001e2e885f1e20a1ea26cadd619ed6b2db1"
        ],
        [
            "unfold Newton_integrable; exists F1.",
            "VernacExtend",
            "4291f9c883814c0b429b940f355da4b65ff7494b"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "elim H1; intro.",
            "VernacExtend",
            "69e6dce0928c10bc8e91776963343c6dbf299832"
        ],
        [
            "elim H0; intro.",
            "VernacExtend",
            "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
        ],
        [
            "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
            "VernacExtend",
            "6f11dedd91b2934de691d51667de8cc926683012"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hgt)).",
            "VernacExtend",
            "4b3fef2f3f94a3bf3b749e47a32b9a2f1e3627e3"
        ],
        [
            "assert (H3 := antiderivative_P4 f F0 F1 b a c H2 H).",
            "VernacExtend",
            "26a249b9da34046212241183664b4e14ab340630"
        ],
        [
            "elim H3; intro.",
            "VernacExtend",
            "522e36e2853ff30db9e3e0abc7a128144a4e937c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold antiderivative in H4; elim H4; clear H4; intros _ H4.",
            "VernacExtend",
            "62b257d5a7513be5a8c3d135a76bbdc46e88a37b"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 Hlt'')).",
            "VernacExtend",
            "e6d9f9ca5dc3507c086467de27f243028d736d12"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hlt')).",
            "VernacExtend",
            "a43644f4cc3a48fed082079e04d90ef4f482ee9e"
        ],
        [
            "rewrite Heq''; apply NewtonInt_P1.",
            "VernacExtend",
            "9f212ac7c02984fa9dbfc84881560994ad4bed0b"
        ],
        [
            "unfold Newton_integrable; exists F0.",
            "VernacExtend",
            "3b1d71ac43378200d3042495d27f5b7de3215b38"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "elim H0; intro.",
            "VernacExtend",
            "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
            "VernacExtend",
            "76db159a1634a6baa37b0f6d47b562c7c16945da"
        ],
        [
            "elim H1; intro.",
            "VernacExtend",
            "69e6dce0928c10bc8e91776963343c6dbf299832"
        ],
        [
            "assert (H3 := antiderivative_P4 f F0 F1 b a c H H2).",
            "VernacExtend",
            "9b706c8ac1c5ffcd23d4b000cdcb6359d9dec095"
        ],
        [
            "elim H3; intro.",
            "VernacExtend",
            "522e36e2853ff30db9e3e0abc7a128144a4e937c"
        ],
        [
            "unfold antiderivative in H4; elim H4; clear H4; intros _ H4.",
            "VernacExtend",
            "62b257d5a7513be5a8c3d135a76bbdc46e88a37b"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 Hgt'')).",
            "VernacExtend",
            "655477c918e4402c805dfc212c0fb5080d9da310"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
            "VernacExtend",
            "6f11dedd91b2934de691d51667de8cc926683012"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt')).",
            "VernacExtend",
            "d1bc7f2739cb1ed34240ccb2aecb89e2a53065ae"
        ],
        [
            "rewrite Heq' in X; apply X.",
            "VernacExtend",
            "a9c6092f7ab1b76cf81a2f1bfe9bdae0fb52e59e"
        ],
        [
            "assert (X1 := NewtonInt_P3 f a b X).",
            "VernacExtend",
            "e51584bc930b3d31b9d4373b310eb0c1421b4b78"
        ],
        [
            "assert (X2 := NewtonInt_P3 f b c X0).",
            "VernacExtend",
            "aef9921ae27f5e36e698b4fa20b29f2cf747842e"
        ],
        [
            "apply NewtonInt_P3.",
            "VernacExtend",
            "82d60c79cfe034e51eb2dbbc2f5779aff23481ff"
        ],
        [
            "apply NewtonInt_P7 with b; assumption.",
            "VernacExtend",
            "c30a5d24a900b370059191d3d9b9f0db40f07a6c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma NewtonInt_P9 : forall (f:R -> R) (a b c:R) (pr1:Newton_integrable f a b) (pr2:Newton_integrable f b c), NewtonInt f a c (NewtonInt_P8 f a b c pr1 pr2) = NewtonInt f a b pr1 + NewtonInt f b c pr2.",
            "VernacStartTheoremProof",
            "336039f9d7fa7c582912b6bcc024abca47a0df5b"
        ],
        [
            "intros; unfold NewtonInt.",
            "VernacExtend",
            "2314f3c447ec20c4c3e8ceea8adfe38aef61df7c"
        ],
        [
            "case (NewtonInt_P8 f a b c pr1 pr2) as (x,Hor).",
            "VernacExtend",
            "6a98151444fe60d6b8bd540b70302fb0afdf1ca8"
        ],
        [
            "case pr1 as (x0,Hor0).",
            "VernacExtend",
            "f233e5303befa160cb289b3a97745193402e2e2d"
        ],
        [
            "case pr2 as (x1,Hor1).",
            "VernacExtend",
            "4ff82922bcbd5c264e1db13b4a4c06b2e33f857e"
        ],
        [
            "destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "6e633ac525c31185442a4f38ba0fc5771d679c59"
        ],
        [
            "destruct (total_order_T b c) as [[Hlt'|Heq']|Hgt'].",
            "VernacExtend",
            "34da7a775fdbe39d0968ed01561aae563cd76b7f"
        ],
        [
            "case Hor0; intro.",
            "VernacExtend",
            "e4540483ec768dc1f69fa3fc31156b55f712c1d6"
        ],
        [
            "case Hor1; intro.",
            "VernacExtend",
            "beb436a4c8f29be2ee823e67d5d7f67ebea809fe"
        ],
        [
            "case Hor; intro.",
            "VernacExtend",
            "0d9a2a939ff8644fc828ed2e80bbdf4e35b5ce6a"
        ],
        [
            "assert (H2 := antiderivative_P2 f x0 x1 a b c H H0).",
            "VernacExtend",
            "c20cf484200848eb3222b2b6d1de7defbd447cbb"
        ],
        [
            "assert (H3 := antiderivative_Ucte f x (fun x:R => match Rle_dec x b with | left _ => x0 x | right _ => x1 x + (x0 b - x1 b) end) a c H1 H2).",
            "VernacExtend",
            "6d211f9c260225b8f202467722ed48ae75c9468e"
        ],
        [
            "elim H3; intros.",
            "VernacExtend",
            "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
        ],
        [
            "assert (H5 : a <= a <= c).",
            "VernacExtend",
            "def8ec15b834afee063a8e66ce3689cdc2192aa1"
        ],
        [
            "split; [ right; reflexivity | left; apply Rlt_trans with b; assumption ].",
            "VernacExtend",
            "bf358b76a2c73966c2876f4b73fc6ba8a06a04f7"
        ],
        [
            "assert (H6 : a <= c <= c).",
            "VernacExtend",
            "86b978889b4e36da7c4281235141f6d55b953684"
        ],
        [
            "split; [ left; apply Rlt_trans with b; assumption | right; reflexivity ].",
            "VernacExtend",
            "a721b78f3199cb4d7acac49a6c1e25649eb7d27c"
        ],
        [
            "rewrite (H4 _ H5); rewrite (H4 _ H6).",
            "VernacExtend",
            "88d3fe34288a901e4b41fe0178c4b121e845b41a"
        ],
        [
            "destruct (Rle_dec a b) as [Hlea|Hnlea].",
            "VernacExtend",
            "2adb82cb713af3a813de7826071d17630348e320"
        ],
        [
            "destruct (Rle_dec c b) as [Hlec|Hnlec].",
            "VernacExtend",
            "eacd052005aa45cf723198df8f5dd46b45854d6b"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hlec Hlt')).",
            "VernacExtend",
            "5cc3d0e64ac16a07c86f753ffc7e076aa95b899c"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "elim Hnlea; left; assumption.",
            "VernacExtend",
            "46d38d1b942355fc2b393495e4bf0264b62f83c3"
        ],
        [
            "unfold antiderivative in H1; elim H1; clear H1; intros _ H1.",
            "VernacExtend",
            "0914ce98ca98686ad2cc7b3fdc62bf8fd4adb553"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 (Rlt_trans _ _ _ Hlt Hlt'))).",
            "VernacExtend",
            "e709b171e4646c49c33d8501812c7ecba64920ff"
        ],
        [
            "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
            "VernacExtend",
            "40028f05c7ff91161bc9ec57607c24b91b25fac4"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hlt')).",
            "VernacExtend",
            "46ce945671df67c61b2e508454e17b767d07cd7d"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hlt)).",
            "VernacExtend",
            "42cc6c1c3bdd46cdc9ed5dd640be204ae365d0e3"
        ],
        [
            "rewrite <- Heq'.",
            "VernacExtend",
            "0c2901409f5bc9b450cb6e95f2d235a1f50f700d"
        ],
        [
            "unfold Rminus; rewrite Rplus_opp_r; rewrite Rplus_0_r.",
            "VernacExtend",
            "1c5d6812516b4b4d5584f120351011635de40225"
        ],
        [
            "rewrite <- Heq' in Hor.",
            "VernacExtend",
            "6f235c86e12930fffefc4be405a1fc16f3901764"
        ],
        [
            "elim Hor0; intro.",
            "VernacExtend",
            "2faa324b2143629ea3fdc8af9576ac71b837099c"
        ],
        [
            "elim Hor; intro.",
            "VernacExtend",
            "53267af92af23ef4972af13e0318519d03e7a22c"
        ],
        [
            "assert (H1 := antiderivative_Ucte f x x0 a b H0 H).",
            "VernacExtend",
            "93c095c2e30041e802dba0e18022a947d2c927ae"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "rewrite (H2 b).",
            "VernacExtend",
            "f98c346c79b8baf5f6d1f914f05e325384476d2d"
        ],
        [
            "rewrite (H2 a).",
            "VernacExtend",
            "f794ccfeb85f5ecab7e1fef68370440fc400026b"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "6bab46c1adec52d812fd328f9f48728040031941"
        ],
        [
            "split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "7f83d8514281eecf7d46d76f6ccefd321f22c757"
        ],
        [
            "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
            "VernacExtend",
            "40028f05c7ff91161bc9ec57607c24b91b25fac4"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hlt)).",
            "VernacExtend",
            "f3a32117b048e7825d2d843b1e2a0d5a6f94e118"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hlt)).",
            "VernacExtend",
            "42cc6c1c3bdd46cdc9ed5dd640be204ae365d0e3"
        ],
        [
            "elim Hor1; intro.",
            "VernacExtend",
            "31c6c5324da47f2e001570773dee7baca6a56e98"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt')).",
            "VernacExtend",
            "53169d3a914371f23fcf2bd6638e1318da2c5da7"
        ],
        [
            "elim Hor0; intro.",
            "VernacExtend",
            "2faa324b2143629ea3fdc8af9576ac71b837099c"
        ],
        [
            "elim Hor; intro.",
            "VernacExtend",
            "53267af92af23ef4972af13e0318519d03e7a22c"
        ],
        [
            "assert (H2 := antiderivative_P2 f x x1 a c b H1 H).",
            "VernacExtend",
            "b7a07c13dc2f02b33fe35fed4d3aff409f59e7a1"
        ],
        [
            "assert (H3 := antiderivative_Ucte _ _ _ a b H0 H2).",
            "VernacExtend",
            "d48fd4d80ce589ed6e3728fb4d9e490179a98b62"
        ],
        [
            "elim H3; intros.",
            "VernacExtend",
            "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
        ],
        [
            "rewrite (H4 a).",
            "VernacExtend",
            "8c571d81a281e29af14bf8b7bd541285e6da1e8b"
        ],
        [
            "rewrite (H4 b).",
            "VernacExtend",
            "dcc43931943490f3654b05d25bfbddeb61d55f61"
        ],
        [
            "destruct (Rle_dec b c) as [Hle|Hnle].",
            "VernacExtend",
            "741aa04b37c62a227b43f5b1be559fa016c9f909"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle Hgt')).",
            "VernacExtend",
            "239dd89c131598699ebbf2a39220b4851c2214bb"
        ],
        [
            "destruct (Rle_dec a c) as [Hle'|Hnle'].",
            "VernacExtend",
            "413bb1dc3f937416121a54817a1b915f6500e9ef"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "elim Hnle'; unfold antiderivative in H1; elim H1; intros; assumption.",
            "VernacExtend",
            "1b570952ae1be515da5d10eeb625bb21b9d566ff"
        ],
        [
            "split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "7f83d8514281eecf7d46d76f6ccefd321f22c757"
        ],
        [
            "split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "6bab46c1adec52d812fd328f9f48728040031941"
        ],
        [
            "assert (H2 := antiderivative_P2 _ _ _ _ _ _ H1 H0).",
            "VernacExtend",
            "a526e829e83161481c14b61ce42c701e72f81932"
        ],
        [
            "assert (H3 := antiderivative_Ucte _ _ _ c b H H2).",
            "VernacExtend",
            "c8ee01ae1dc6ddffb4e4875aae0efb8bc62ed49d"
        ],
        [
            "elim H3; intros.",
            "VernacExtend",
            "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
        ],
        [
            "rewrite (H4 c).",
            "VernacExtend",
            "eca739dbf8200ec6c3d19d2ef5a2d9072966b3f1"
        ],
        [
            "rewrite (H4 b).",
            "VernacExtend",
            "dcc43931943490f3654b05d25bfbddeb61d55f61"
        ],
        [
            "destruct (Rle_dec b a) as [Hle|Hnle].",
            "VernacExtend",
            "d586db7d323aa9da02a98c0fea4a886fe95f1afd"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle Hlt)).",
            "VernacExtend",
            "5811f0747c48ab6602d7ba824fef4084ebab76b5"
        ],
        [
            "destruct (Rle_dec c a) as [Hle'|[]].",
            "VernacExtend",
            "5300ec149aa049cce47b757b6cf6cd431e26b769"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold antiderivative in H1; elim H1; intros; assumption.",
            "VernacExtend",
            "c7d5552e3124b15198d2cb340e6786fbba5ec9d9"
        ],
        [
            "split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "7f83d8514281eecf7d46d76f6ccefd321f22c757"
        ],
        [
            "split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "6bab46c1adec52d812fd328f9f48728040031941"
        ],
        [
            "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
            "VernacExtend",
            "40028f05c7ff91161bc9ec57607c24b91b25fac4"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hlt)).",
            "VernacExtend",
            "f3a32117b048e7825d2d843b1e2a0d5a6f94e118"
        ],
        [
            "rewrite Heq in Hor |- *.",
            "VernacExtend",
            "97ae13ca136bb0bf0e5971f65af123b97064c30b"
        ],
        [
            "elim Hor; intro.",
            "VernacExtend",
            "53267af92af23ef4972af13e0318519d03e7a22c"
        ],
        [
            "elim Hor1; intro.",
            "VernacExtend",
            "31c6c5324da47f2e001570773dee7baca6a56e98"
        ],
        [
            "assert (H1 := antiderivative_Ucte _ _ _ b c H H0).",
            "VernacExtend",
            "faf2f617b7b26b1eecec3e31c19be5d8ea972445"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "assert (H3 : b <= c).",
            "VernacExtend",
            "0037afc78837aba594b95b790f539651ff44cb7f"
        ],
        [
            "unfold antiderivative in H; elim H; intros; assumption.",
            "VernacExtend",
            "d891622b60f2280dab40b1e2af4cb702cef8d407"
        ],
        [
            "rewrite (H2 b).",
            "VernacExtend",
            "f98c346c79b8baf5f6d1f914f05e325384476d2d"
        ],
        [
            "rewrite (H2 c).",
            "VernacExtend",
            "f9fefc843feac639a99ce377e93cdc197bfaec11"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "split; [ assumption | right; reflexivity ].",
            "VernacExtend",
            "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
        ],
        [
            "split; [ right; reflexivity | assumption ].",
            "VernacExtend",
            "3e8d5ea4153788a4b3b4f71e65238c3c1dabd9c8"
        ],
        [
            "assert (H1 : b = c).",
            "VernacExtend",
            "3ef505a80db197e2494aa073b442b3b32781d1bd"
        ],
        [
            "unfold antiderivative in H, H0; elim H; elim H0; intros; apply Rle_antisym; assumption.",
            "VernacExtend",
            "70474d07fce5b25c2fa2f19c3695c8c9927e23c3"
        ],
        [
            "rewrite H1; ring.",
            "VernacExtend",
            "698aeb70cdb5caeee61df00d3fb6a302387653ec"
        ],
        [
            "elim Hor1; intro.",
            "VernacExtend",
            "31c6c5324da47f2e001570773dee7baca6a56e98"
        ],
        [
            "assert (H1 : b = c).",
            "VernacExtend",
            "3ef505a80db197e2494aa073b442b3b32781d1bd"
        ],
        [
            "unfold antiderivative in H, H0; elim H; elim H0; intros; apply Rle_antisym; assumption.",
            "VernacExtend",
            "70474d07fce5b25c2fa2f19c3695c8c9927e23c3"
        ],
        [
            "rewrite H1; ring.",
            "VernacExtend",
            "698aeb70cdb5caeee61df00d3fb6a302387653ec"
        ],
        [
            "assert (H1 := antiderivative_Ucte _ _ _ c b H H0).",
            "VernacExtend",
            "aba99ccc072cb9f533b3e73bcdaca2113a48a705"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "assert (H3 : c <= b).",
            "VernacExtend",
            "5073466b9fed1c3c6ed96845a0ca5e2bde7ad5d3"
        ],
        [
            "unfold antiderivative in H; elim H; intros; assumption.",
            "VernacExtend",
            "d891622b60f2280dab40b1e2af4cb702cef8d407"
        ],
        [
            "rewrite (H2 c).",
            "VernacExtend",
            "f9fefc843feac639a99ce377e93cdc197bfaec11"
        ],
        [
            "rewrite (H2 b).",
            "VernacExtend",
            "f98c346c79b8baf5f6d1f914f05e325384476d2d"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "split; [ assumption | right; reflexivity ].",
            "VernacExtend",
            "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
        ],
        [
            "split; [ right; reflexivity | assumption ].",
            "VernacExtend",
            "3e8d5ea4153788a4b3b4f71e65238c3c1dabd9c8"
        ],
        [
            "destruct (total_order_T b c) as [[Hlt'|Heq']|Hgt'].",
            "VernacExtend",
            "34da7a775fdbe39d0968ed01561aae563cd76b7f"
        ],
        [
            "elim Hor0; intro.",
            "VernacExtend",
            "2faa324b2143629ea3fdc8af9576ac71b837099c"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
            "VernacExtend",
            "76db159a1634a6baa37b0f6d47b562c7c16945da"
        ],
        [
            "elim Hor1; intro.",
            "VernacExtend",
            "31c6c5324da47f2e001570773dee7baca6a56e98"
        ],
        [
            "elim Hor; intro.",
            "VernacExtend",
            "53267af92af23ef4972af13e0318519d03e7a22c"
        ],
        [
            "assert (H2 := antiderivative_P2 _ _ _ _ _ _ H H1).",
            "VernacExtend",
            "4e140863a15de8356988345122a12f302c7603bb"
        ],
        [
            "assert (H3 := antiderivative_Ucte _ _ _ b c H0 H2).",
            "VernacExtend",
            "fabe7c81ee04f7ed87789113ab0612603d919935"
        ],
        [
            "elim H3; intros.",
            "VernacExtend",
            "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
        ],
        [
            "rewrite (H4 b).",
            "VernacExtend",
            "dcc43931943490f3654b05d25bfbddeb61d55f61"
        ],
        [
            "rewrite (H4 c).",
            "VernacExtend",
            "eca739dbf8200ec6c3d19d2ef5a2d9072966b3f1"
        ],
        [
            "case (Rle_dec b a) as [|[]].",
            "VernacExtend",
            "145a5a1bcccecda9b0b69280c82128a31a0af0bf"
        ],
        [
            "case (Rle_dec c a) as [|].",
            "VernacExtend",
            "745b3810973764a2ffbde7951a563a9990718f9d"
        ],
        [
            "assert (H5 : a = c).",
            "VernacExtend",
            "30e08a33981db19cd045f8721d8c6b7e5a56f645"
        ],
        [
            "unfold antiderivative in H1; elim H1; intros; apply Rle_antisym; assumption.",
            "VernacExtend",
            "27accddacd7fabc97b4621d88245e7869fa4764b"
        ],
        [
            "rewrite H5; ring.",
            "VernacExtend",
            "bec2b94ba7908fad9c15dc5fa6e60aa87195925e"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "7f83d8514281eecf7d46d76f6ccefd321f22c757"
        ],
        [
            "split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "6bab46c1adec52d812fd328f9f48728040031941"
        ],
        [
            "assert (H2 := antiderivative_P2 _ _ _ _ _ _ H0 H1).",
            "VernacExtend",
            "220a771a17a5da14f192e3b05f374fb313486126"
        ],
        [
            "assert (H3 := antiderivative_Ucte _ _ _ b a H H2).",
            "VernacExtend",
            "3419d2e237921811bbb59ff3dee45452187c86bf"
        ],
        [
            "elim H3; intros.",
            "VernacExtend",
            "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
        ],
        [
            "rewrite (H4 a).",
            "VernacExtend",
            "8c571d81a281e29af14bf8b7bd541285e6da1e8b"
        ],
        [
            "rewrite (H4 b).",
            "VernacExtend",
            "dcc43931943490f3654b05d25bfbddeb61d55f61"
        ],
        [
            "case (Rle_dec b c) as [|[]].",
            "VernacExtend",
            "79a32e711010e6e96b58ce56cf586034a670a5a4"
        ],
        [
            "case (Rle_dec a c) as [|].",
            "VernacExtend",
            "8adec128e7743c0518c38772c8e28cc406147033"
        ],
        [
            "assert (H5 : a = c).",
            "VernacExtend",
            "30e08a33981db19cd045f8721d8c6b7e5a56f645"
        ],
        [
            "unfold antiderivative in H1; elim H1; intros; apply Rle_antisym; assumption.",
            "VernacExtend",
            "27accddacd7fabc97b4621d88245e7869fa4764b"
        ],
        [
            "rewrite H5; ring.",
            "VernacExtend",
            "bec2b94ba7908fad9c15dc5fa6e60aa87195925e"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "6bab46c1adec52d812fd328f9f48728040031941"
        ],
        [
            "split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "7f83d8514281eecf7d46d76f6ccefd321f22c757"
        ],
        [
            "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
            "VernacExtend",
            "40028f05c7ff91161bc9ec57607c24b91b25fac4"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hlt')).",
            "VernacExtend",
            "46ce945671df67c61b2e508454e17b767d07cd7d"
        ],
        [
            "rewrite <- Heq'.",
            "VernacExtend",
            "0c2901409f5bc9b450cb6e95f2d235a1f50f700d"
        ],
        [
            "unfold Rminus; rewrite Rplus_opp_r; rewrite Rplus_0_r.",
            "VernacExtend",
            "1c5d6812516b4b4d5584f120351011635de40225"
        ],
        [
            "rewrite <- Heq' in Hor.",
            "VernacExtend",
            "6f235c86e12930fffefc4be405a1fc16f3901764"
        ],
        [
            "elim Hor0; intro.",
            "VernacExtend",
            "2faa324b2143629ea3fdc8af9576ac71b837099c"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
            "VernacExtend",
            "76db159a1634a6baa37b0f6d47b562c7c16945da"
        ],
        [
            "elim Hor; intro.",
            "VernacExtend",
            "53267af92af23ef4972af13e0318519d03e7a22c"
        ],
        [
            "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
            "VernacExtend",
            "40028f05c7ff91161bc9ec57607c24b91b25fac4"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hgt)).",
            "VernacExtend",
            "99a9ddc0984217bafd792ac6b05d5547bbd1066b"
        ],
        [
            "assert (H1 := antiderivative_Ucte f x x0 b a H0 H).",
            "VernacExtend",
            "d43c06fa3ff16d95734bfb3178f4041b9e763f3e"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "rewrite (H2 b).",
            "VernacExtend",
            "f98c346c79b8baf5f6d1f914f05e325384476d2d"
        ],
        [
            "rewrite (H2 a).",
            "VernacExtend",
            "f794ccfeb85f5ecab7e1fef68370440fc400026b"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "7f83d8514281eecf7d46d76f6ccefd321f22c757"
        ],
        [
            "split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "6bab46c1adec52d812fd328f9f48728040031941"
        ],
        [
            "elim Hor0; intro.",
            "VernacExtend",
            "2faa324b2143629ea3fdc8af9576ac71b837099c"
        ],
        [
            "unfold antiderivative in H; elim H; clear H; intros _ H.",
            "VernacExtend",
            "5c29c5886a0f81443d00c1085480060c8f076148"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
            "VernacExtend",
            "76db159a1634a6baa37b0f6d47b562c7c16945da"
        ],
        [
            "elim Hor1; intro.",
            "VernacExtend",
            "31c6c5324da47f2e001570773dee7baca6a56e98"
        ],
        [
            "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
            "VernacExtend",
            "40028f05c7ff91161bc9ec57607c24b91b25fac4"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hgt')).",
            "VernacExtend",
            "ff1a4ce3376bf3c12742462a2a70cdc47f07bc8c"
        ],
        [
            "elim Hor; intro.",
            "VernacExtend",
            "53267af92af23ef4972af13e0318519d03e7a22c"
        ],
        [
            "unfold antiderivative in H1; elim H1; clear H1; intros _ H1.",
            "VernacExtend",
            "0914ce98ca98686ad2cc7b3fdc62bf8fd4adb553"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 (Rlt_trans _ _ _ Hgt' Hgt))).",
            "VernacExtend",
            "00d396a38380485fcb636fe1c8ca6f8ec9ce25d1"
        ],
        [
            "assert (H2 := antiderivative_P2 _ _ _ _ _ _ H0 H).",
            "VernacExtend",
            "69e18856444bd05b1b952a41e0caa0c2f5fd4bf6"
        ],
        [
            "assert (H3 := antiderivative_Ucte _ _ _ c a H1 H2).",
            "VernacExtend",
            "fe5d458f6b273c4f4615055d9447829ebd7aad1e"
        ],
        [
            "elim H3; intros.",
            "VernacExtend",
            "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
        ],
        [
            "assert (H5 : c <= a).",
            "VernacExtend",
            "925ac7fb1e4cfd98936f49258f507b930f8aaef6"
        ],
        [
            "unfold antiderivative in H1; elim H1; intros; assumption.",
            "VernacExtend",
            "c7d5552e3124b15198d2cb340e6786fbba5ec9d9"
        ],
        [
            "rewrite (H4 c).",
            "VernacExtend",
            "eca739dbf8200ec6c3d19d2ef5a2d9072966b3f1"
        ],
        [
            "rewrite (H4 a).",
            "VernacExtend",
            "8c571d81a281e29af14bf8b7bd541285e6da1e8b"
        ],
        [
            "destruct (Rle_dec a b) as [Hle|Hnle].",
            "VernacExtend",
            "f3416f93eef3cf68aee486729e511d50cd6262f3"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle Hgt)).",
            "VernacExtend",
            "245bcf1e2571139238da8280f3f29cced908d723"
        ],
        [
            "destruct (Rle_dec c b) as [|[]].",
            "VernacExtend",
            "b50b8800e02370c11ef83467263f9bcfbb3c62c2"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "split; [ assumption | right; reflexivity ].",
            "VernacExtend",
            "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
        ],
        [
            "split; [ right; reflexivity | assumption ].",
            "VernacExtend",
            "3e8d5ea4153788a4b3b4f71e65238c3c1dabd9c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "FTCN_step1",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros f a b; unfold Newton_integrable; exists (d1 f); unfold antiderivative; intros; case (Rle_dec a b); intro; [ left; split; [ intros; exists (cond_diff f x); reflexivity | assumption ] | right; split; [ intros; exists (cond_diff f x); reflexivity | auto with real ] ].",
                        "VernacExtend",
                        "a2083ca005ff2144d6252ee05a2f38f7aff6ab78"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "FTC_Newton",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros; unfold NewtonInt; reflexivity.",
                        "VernacExtend",
                        "197506975fb6f35692a996e987105a5ae2742769"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NewtonInt_P1",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros f a; unfold Newton_integrable; exists (fct_cte (f a) * id)%F; left; unfold antiderivative; split.",
                        "VernacExtend",
                        "fa093199fcf2a9b7fe1a5ab89e2b3a5c19e9e33c"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H1 : derivable_pt (fct_cte (f a) * id) x).",
                        "VernacExtend",
                        "1b7de2b8cc42296477d879ab405942cccc242e41"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_mult.",
                        "VernacExtend",
                        "09d703b47325e0422af42b4de53a3bdd7ab2fc1e"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_const.",
                        "VernacExtend",
                        "5f79fec976d4bf9b10f4ae3f2bf89e7653fa9cab"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_id.",
                        "VernacExtend",
                        "60f42eff9d8c206a69d6193c8701f3510640751b"
                    ]
                },
                {
                    "command": [
                        "exists H1; assert (H2 : x = a).",
                        "VernacExtend",
                        "160426bb13b64c0e94b8cd95a13fbb8891fd8b61"
                    ]
                },
                {
                    "command": [
                        "elim H; intros; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "83967d2be877fef1e60ba876b101ecc38598e5a3"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply derive_pt_eq_0; replace (f x) with (0 * id x + fct_cte (f a) x * 1); [ apply (derivable_pt_lim_mult (fct_cte (f a)) id x); [ apply derivable_pt_lim_const | apply derivable_pt_lim_id ] | unfold id, fct_cte; rewrite H2; ring ].",
                        "VernacExtend",
                        "4361757cf2d4b3d25d4dba5c7896527709bafdea"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NewtonInt_P2",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros; unfold NewtonInt; simpl; unfold mult_fct, fct_cte, id.",
                        "VernacExtend",
                        "c626a5eff289d612a0f0d59a92feb38d3b22fb7b"
                    ]
                },
                {
                    "command": [
                        "destruct NewtonInt_P1 as [g _].",
                        "VernacExtend",
                        "3c52f34aaee54b9d5fb410c27decc805e20787c4"
                    ]
                },
                {
                    "command": [
                        "now apply Rminus_diag_eq.",
                        "VernacExtend",
                        "87bcad2b135d3ce00d500a6e6aacdeb15cc94e96"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NewtonInt_P3",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "unfold Newton_integrable; intros; elim X; intros g H; exists g; tauto.",
                        "VernacExtend",
                        "8bc4cbe27223e831c7a075b14a60aa25f2907e26"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "NewtonInt_P4",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros f a b (x,H).",
                        "VernacExtend",
                        "e0b36448ffcb2ff22617e8141cd376afc5a63b76"
                    ]
                },
                {
                    "command": [
                        "unfold NewtonInt, NewtonInt_P3; simpl; ring.",
                        "VernacExtend",
                        "ad8ba1ca7040fbde3f1eb9605359205af4be0b85"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NewtonInt_P5",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "unfold Newton_integrable; intros f g l a b X X0; elim X; intros x p; elim X0; intros x0 p0; exists (fun y:R => l * x y + x0 y).",
                        "VernacExtend",
                        "8eb8806ddb5aa6e93450d0451f6f05a776e00fac"
                    ]
                },
                {
                    "command": [
                        "elim p; intro.",
                        "VernacExtend",
                        "71d5239fd5e60d57ea8617fc109dce16e7b86056"
                    ]
                },
                {
                    "command": [
                        "elim p0; intro.",
                        "VernacExtend",
                        "4e39db615a37fac5585ac07aea9caee3ddd15b63"
                    ]
                },
                {
                    "command": [
                        "left; unfold antiderivative; unfold antiderivative in H, H0; elim H; clear H; intros; elim H0; clear H0; intros H0 _.",
                        "VernacExtend",
                        "2c4416627b85dab0254183d021111a4773532cbd"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intros; elim (H _ H2); elim (H0 _ H2); intros.",
                        "VernacExtend",
                        "aa4de5f456cde6fd9dd2724be713752037460a42"
                    ]
                },
                {
                    "command": [
                        "assert (H5 : derivable_pt (fun y:R => l * x y + x0 y) x1).",
                        "VernacExtend",
                        "24b9fa60f6d4c726596864f71aa7ffa276795186"
                    ]
                },
                {
                    "command": [
                        "reg.",
                        "VernacExtend",
                        "200773634894b8319f51d08aac98d6835b0db846"
                    ]
                },
                {
                    "command": [
                        "exists H5; symmetry ; reg; rewrite <- H3; rewrite <- H4; reflexivity.",
                        "VernacExtend",
                        "f0ee43f957edc9fe19d93fe90869ce9e85dca4a7"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H, H0; elim H; elim H0; intros; elim H4; intro.",
                        "VernacExtend",
                        "36c941fdb4d902f79569d2bbf0030714504fb600"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H5 H2)).",
                        "VernacExtend",
                        "025168c0b927ca2a17b25f65054d970d938b616c"
                    ]
                },
                {
                    "command": [
                        "left; rewrite <- H5; unfold antiderivative; split.",
                        "VernacExtend",
                        "1b4e7fe37024808319eee32d912c628462a6f0c5"
                    ]
                },
                {
                    "command": [
                        "intros; elim H6; intros; assert (H9 : x1 = a).",
                        "VernacExtend",
                        "7ca29ce24f77b2208a5beb06105fc4c5c6ec5ecb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : a <= x1 <= b).",
                        "VernacExtend",
                        "eccfa48457548d307ab8e7a360eb74bbb0eb0232"
                    ]
                },
                {
                    "command": [
                        "split; right; [ symmetry ; assumption | rewrite <- H5; assumption ].",
                        "VernacExtend",
                        "12a9d569ac119e24184f4cc8ab125de15007a0ad"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : b <= x1 <= a).",
                        "VernacExtend",
                        "a266aa0fb1a91552835e12747d73639d0c83ec7d"
                    ]
                },
                {
                    "command": [
                        "split; right; [ rewrite <- H5; symmetry ; assumption | assumption ].",
                        "VernacExtend",
                        "77a564485b2129824619ea8d1a9e1b35bc5add57"
                    ]
                },
                {
                    "command": [
                        "assert (H12 : derivable_pt x x1).",
                        "VernacExtend",
                        "c4018977ae79ea546b9aa8077ef1c5e6198e52ed"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt; exists (f x1); elim (H3 _ H10); intros; eapply derive_pt_eq_1; symmetry ; apply H12.",
                        "VernacExtend",
                        "5df303a9b6bf5803854cb25b9f467fa661ff0cc8"
                    ]
                },
                {
                    "command": [
                        "assert (H13 : derivable_pt x0 x1).",
                        "VernacExtend",
                        "deea5af58f2d48ff9df7a6d2b18ec9f5d0b91fd0"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt; exists (g x1); elim (H1 _ H11); intros; eapply derive_pt_eq_1; symmetry ; apply H13.",
                        "VernacExtend",
                        "7222c2ba61c1a01033e23a1faa5131fe8ea2e20f"
                    ]
                },
                {
                    "command": [
                        "assert (H14 : derivable_pt (fun y:R => l * x y + x0 y) x1).",
                        "VernacExtend",
                        "a328267de029efbd28a78e3b51a181e0cdc10327"
                    ]
                },
                {
                    "command": [
                        "reg.",
                        "VernacExtend",
                        "200773634894b8319f51d08aac98d6835b0db846"
                    ]
                },
                {
                    "command": [
                        "exists H14; symmetry ; reg.",
                        "VernacExtend",
                        "fefcb00aa2c6a69836bd112e8317648dab6447ea"
                    ]
                },
                {
                    "command": [
                        "assert (H15 : derive_pt x0 x1 H13 = g x1).",
                        "VernacExtend",
                        "116d197f90b564675be7ad9217af9afc04f1dda1"
                    ]
                },
                {
                    "command": [
                        "elim (H1 _ H11); intros; rewrite H15; apply pr_nu.",
                        "VernacExtend",
                        "bf9a83aab47d8465a6755b3d385cf0dca4c17427"
                    ]
                },
                {
                    "command": [
                        "assert (H16 : derive_pt x x1 H12 = f x1).",
                        "VernacExtend",
                        "17219a6041c9d54c63e8743eb9f1b374d7e3643f"
                    ]
                },
                {
                    "command": [
                        "elim (H3 _ H10); intros; rewrite H16; apply pr_nu.",
                        "VernacExtend",
                        "328313c05588bd6e14e03a3f52663de2272ddd19"
                    ]
                },
                {
                    "command": [
                        "rewrite H15; rewrite H16; ring.",
                        "VernacExtend",
                        "0d75e0b382b0da0fbf39ec464936a724b16a4a0c"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "elim p0; intro.",
                        "VernacExtend",
                        "4e39db615a37fac5585ac07aea9caee3ddd15b63"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H, H0; elim H; elim H0; intros; elim H4; intro.",
                        "VernacExtend",
                        "36c941fdb4d902f79569d2bbf0030714504fb600"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H5 H2)).",
                        "VernacExtend",
                        "025168c0b927ca2a17b25f65054d970d938b616c"
                    ]
                },
                {
                    "command": [
                        "left; rewrite H5; unfold antiderivative; split.",
                        "VernacExtend",
                        "d4cb148bb5a25d21309a277a5374e9a661ffc58e"
                    ]
                },
                {
                    "command": [
                        "intros; elim H6; intros; assert (H9 : x1 = a).",
                        "VernacExtend",
                        "7ca29ce24f77b2208a5beb06105fc4c5c6ec5ecb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : a <= x1 <= b).",
                        "VernacExtend",
                        "eccfa48457548d307ab8e7a360eb74bbb0eb0232"
                    ]
                },
                {
                    "command": [
                        "split; right; [ symmetry ; assumption | rewrite H5; assumption ].",
                        "VernacExtend",
                        "ffd4c3f34a26d9bb43e1ac9107de95de7918a660"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : b <= x1 <= a).",
                        "VernacExtend",
                        "a266aa0fb1a91552835e12747d73639d0c83ec7d"
                    ]
                },
                {
                    "command": [
                        "split; right; [ rewrite H5; symmetry ; assumption | assumption ].",
                        "VernacExtend",
                        "a07a7dc69777cfb241dd5330d3e335cdbaa376ba"
                    ]
                },
                {
                    "command": [
                        "assert (H12 : derivable_pt x x1).",
                        "VernacExtend",
                        "c4018977ae79ea546b9aa8077ef1c5e6198e52ed"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt; exists (f x1); elim (H3 _ H11); intros; eapply derive_pt_eq_1; symmetry ; apply H12.",
                        "VernacExtend",
                        "ad322202a77dd363ef12e5e121a299a7240b7f12"
                    ]
                },
                {
                    "command": [
                        "assert (H13 : derivable_pt x0 x1).",
                        "VernacExtend",
                        "deea5af58f2d48ff9df7a6d2b18ec9f5d0b91fd0"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt; exists (g x1); elim (H1 _ H10); intros; eapply derive_pt_eq_1; symmetry ; apply H13.",
                        "VernacExtend",
                        "75526ef5691bb64bf006ceb2cdfb3444613ea337"
                    ]
                },
                {
                    "command": [
                        "assert (H14 : derivable_pt (fun y:R => l * x y + x0 y) x1).",
                        "VernacExtend",
                        "a328267de029efbd28a78e3b51a181e0cdc10327"
                    ]
                },
                {
                    "command": [
                        "reg.",
                        "VernacExtend",
                        "200773634894b8319f51d08aac98d6835b0db846"
                    ]
                },
                {
                    "command": [
                        "exists H14; symmetry ; reg.",
                        "VernacExtend",
                        "fefcb00aa2c6a69836bd112e8317648dab6447ea"
                    ]
                },
                {
                    "command": [
                        "assert (H15 : derive_pt x0 x1 H13 = g x1).",
                        "VernacExtend",
                        "116d197f90b564675be7ad9217af9afc04f1dda1"
                    ]
                },
                {
                    "command": [
                        "elim (H1 _ H10); intros; rewrite H15; apply pr_nu.",
                        "VernacExtend",
                        "f3fb9d0d3ced295e032da60bc10d6edbb280f314"
                    ]
                },
                {
                    "command": [
                        "assert (H16 : derive_pt x x1 H12 = f x1).",
                        "VernacExtend",
                        "17219a6041c9d54c63e8743eb9f1b374d7e3643f"
                    ]
                },
                {
                    "command": [
                        "elim (H3 _ H11); intros; rewrite H16; apply pr_nu.",
                        "VernacExtend",
                        "5d9ac355ba30073e52b52f23cea0f43384c5e7af"
                    ]
                },
                {
                    "command": [
                        "rewrite H15; rewrite H16; ring.",
                        "VernacExtend",
                        "0d75e0b382b0da0fbf39ec464936a724b16a4a0c"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "right; unfold antiderivative; unfold antiderivative in H, H0; elim H; clear H; intros; elim H0; clear H0; intros H0 _; split.",
                        "VernacExtend",
                        "4b728a8ec921ce58a21df28f77b5116b1ae2cad0"
                    ]
                },
                {
                    "command": [
                        "intros; elim (H _ H2); elim (H0 _ H2); intros.",
                        "VernacExtend",
                        "aa4de5f456cde6fd9dd2724be713752037460a42"
                    ]
                },
                {
                    "command": [
                        "assert (H5 : derivable_pt (fun y:R => l * x y + x0 y) x1).",
                        "VernacExtend",
                        "24b9fa60f6d4c726596864f71aa7ffa276795186"
                    ]
                },
                {
                    "command": [
                        "reg.",
                        "VernacExtend",
                        "200773634894b8319f51d08aac98d6835b0db846"
                    ]
                },
                {
                    "command": [
                        "exists H5; symmetry ; reg; rewrite <- H3; rewrite <- H4; reflexivity.",
                        "VernacExtend",
                        "f0ee43f957edc9fe19d93fe90869ce9e85dca4a7"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "antiderivative_P1",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "unfold antiderivative; intros; elim H; elim H0; clear H H0; intros; split.",
                        "VernacExtend",
                        "5799f666aef88964311d62ba2ff3ea68e94e2e2c"
                    ]
                },
                {
                    "command": [
                        "intros; elim (H _ H3); elim (H1 _ H3); intros.",
                        "VernacExtend",
                        "1e4f9c969a717fef203d141e184f06013af63c77"
                    ]
                },
                {
                    "command": [
                        "assert (H6 : derivable_pt (fun x:R => l * F x + G x) x).",
                        "VernacExtend",
                        "b840472f69349f73b5ee72795cb88ca8dcab9d66"
                    ]
                },
                {
                    "command": [
                        "reg.",
                        "VernacExtend",
                        "200773634894b8319f51d08aac98d6835b0db846"
                    ]
                },
                {
                    "command": [
                        "exists H6; symmetry ; reg; rewrite <- H4; rewrite <- H5; ring.",
                        "VernacExtend",
                        "67ee903aeb0bc5705729ce77b383fa079fef5b61"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NewtonInt_P6",
            "line_nb": 108,
            "steps": [
                {
                    "command": [
                        "intros f g l a b pr1 pr2; unfold NewtonInt; destruct (NewtonInt_P5 f g l a b pr1 pr2) as (x,o); destruct pr1 as (x0,o0); destruct pr2 as (x1,o1); destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "a9324024b5158bfdd905a7c0892fc62e953621e9"
                    ]
                },
                {
                    "command": [
                        "elim o; intro.",
                        "VernacExtend",
                        "1b6e53fe32c4d375e5f91dfdd0d7140111ae6adc"
                    ]
                },
                {
                    "command": [
                        "elim o0; intro.",
                        "VernacExtend",
                        "3fa72803f6e989edc6e0e547e0c35bbec503ff3d"
                    ]
                },
                {
                    "command": [
                        "elim o1; intro.",
                        "VernacExtend",
                        "7c631e70a1aa9e990ab89dc8d73fe012fbfb04e7"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := antiderivative_P1 f g x0 x1 l a b H0 H1); assert (H3 := antiderivative_Ucte _ _ _ _ _ H H2); elim H3; intros; assert (H5 : a <= a <= b).",
                        "VernacExtend",
                        "0364d76d61e5d5f415827e470850b734c6a85bdc"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "6bab46c1adec52d812fd328f9f48728040031941"
                    ]
                },
                {
                    "command": [
                        "assert (H6 : a <= b <= b).",
                        "VernacExtend",
                        "9cf70acfbea958fc1c66d4e5f20233653fdfae41"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "7f83d8514281eecf7d46d76f6ccefd321f22c757"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := H4 _ H5); assert (H8 := H4 _ H6); rewrite H7; rewrite H8; ring.",
                        "VernacExtend",
                        "764c483a651212ce0e43241c198b497616c57c0b"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H1; elim H1; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H3 Hlt)).",
                        "VernacExtend",
                        "18cb31eeaa112a04fda03b5b092ff5e203993ee9"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H0; elim H0; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt)).",
                        "VernacExtend",
                        "682c2a3cc02d6a49e6d75c7a8cf6f7e4086f4777"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 Hlt)).",
                        "VernacExtend",
                        "333f29ad043ba7d79b61ceabe2562cb77d372338"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq; ring.",
                        "VernacExtend",
                        "5190250f1da30d7aa59fd776b9eff2527a01e172"
                    ]
                },
                {
                    "command": [
                        "elim o; intro.",
                        "VernacExtend",
                        "1b6e53fe32c4d375e5f91dfdd0d7140111ae6adc"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 Hgt)).",
                        "VernacExtend",
                        "391778041b6cdbc454f2be68866352d23735e556"
                    ]
                },
                {
                    "command": [
                        "elim o0; intro.",
                        "VernacExtend",
                        "3fa72803f6e989edc6e0e547e0c35bbec503ff3d"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H0; elim H0; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hgt)).",
                        "VernacExtend",
                        "cc05576152a79b315a1bfe9c31c77871efbb71b9"
                    ]
                },
                {
                    "command": [
                        "elim o1; intro.",
                        "VernacExtend",
                        "7c631e70a1aa9e990ab89dc8d73fe012fbfb04e7"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H1; elim H1; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H3 Hgt)).",
                        "VernacExtend",
                        "6d867bd2a2fa5161c06232d5b56f8f15c9c0bd60"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := antiderivative_P1 f g x0 x1 l b a H0 H1); assert (H3 := antiderivative_Ucte _ _ _ _ _ H H2); elim H3; intros; assert (H5 : b <= a <= a).",
                        "VernacExtend",
                        "9a7c3da81f396cd624f49823ada1eb9c47388994"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "7f83d8514281eecf7d46d76f6ccefd321f22c757"
                    ]
                },
                {
                    "command": [
                        "assert (H6 : b <= b <= a).",
                        "VernacExtend",
                        "c508f56856061a0945a7c21979740bf613fe13d7"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "6bab46c1adec52d812fd328f9f48728040031941"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := H4 _ H5); assert (H8 := H4 _ H6); rewrite H7; rewrite H8; ring.",
                        "VernacExtend",
                        "764c483a651212ce0e43241c198b497616c57c0b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "antiderivative_P3",
            "line_nb": 220,
            "steps": [
                {
                    "command": [
                        "intros; unfold antiderivative in H, H0; elim H; clear H; elim H0; clear H0; intros; destruct (total_order_T a c) as [[Hle|Heq]|Hgt].",
                        "VernacExtend",
                        "a7a54d66a3c305cc14b382af2da1e95c4e299249"
                    ]
                },
                {
                    "command": [
                        "right; unfold antiderivative; split.",
                        "VernacExtend",
                        "1eb1807f555e56024fda7986c121013be249bf3c"
                    ]
                },
                {
                    "command": [
                        "intros; apply H1; elim H3; intros; split; [ assumption | apply Rle_trans with c; assumption ].",
                        "VernacExtend",
                        "365170b81c1d1af5b14cc8520f60e7cdcdf73e42"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right; unfold antiderivative; split.",
                        "VernacExtend",
                        "1eb1807f555e56024fda7986c121013be249bf3c"
                    ]
                },
                {
                    "command": [
                        "intros; apply H1; elim H3; intros; split; [ assumption | apply Rle_trans with c; assumption ].",
                        "VernacExtend",
                        "365170b81c1d1af5b14cc8520f60e7cdcdf73e42"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "left; unfold antiderivative; split.",
                        "VernacExtend",
                        "b10a4d385cfb5014dc255d49616f12e509eb8fc3"
                    ]
                },
                {
                    "command": [
                        "intros; apply H; elim H3; intros; split; [ assumption | apply Rle_trans with a; assumption ].",
                        "VernacExtend",
                        "1249da7cc68d72df95f7b1ed8b235c74f874d224"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "antiderivative_P4",
            "line_nb": 232,
            "steps": [
                {
                    "command": [
                        "intros; unfold antiderivative in H, H0; elim H; clear H; elim H0; clear H0; intros; destruct (total_order_T c b) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "3306c537af9d67ad30cc5a7fdde623037894529b"
                    ]
                },
                {
                    "command": [
                        "right; unfold antiderivative; split.",
                        "VernacExtend",
                        "1eb1807f555e56024fda7986c121013be249bf3c"
                    ]
                },
                {
                    "command": [
                        "intros; apply H1; elim H3; intros; split; [ apply Rle_trans with c; assumption | assumption ].",
                        "VernacExtend",
                        "d7e001dfd89e3cbeb7ac3fda6d49d5e466b6d38c"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right; unfold antiderivative; split.",
                        "VernacExtend",
                        "1eb1807f555e56024fda7986c121013be249bf3c"
                    ]
                },
                {
                    "command": [
                        "intros; apply H1; elim H3; intros; split; [ apply Rle_trans with c; assumption | assumption ].",
                        "VernacExtend",
                        "d7e001dfd89e3cbeb7ac3fda6d49d5e466b6d38c"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "left; unfold antiderivative; split.",
                        "VernacExtend",
                        "b10a4d385cfb5014dc255d49616f12e509eb8fc3"
                    ]
                },
                {
                    "command": [
                        "intros; apply H; elim H3; intros; split; [ apply Rle_trans with b; assumption | assumption ].",
                        "VernacExtend",
                        "9ceab0fee1b4966aa4c4de528e2639b0c7ba2676"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NewtonInt_P7",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "unfold Newton_integrable; intros f a b c Hab Hbc X X0; elim X; clear X; intros F0 H0; elim X0; clear X0; intros F1 H1; set (g := fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end); exists g; left; unfold g; apply antiderivative_P2.",
                        "VernacExtend",
                        "43a34cf870ff33a1a498ef8d7b986533110ee53d"
                    ]
                },
                {
                    "command": [
                        "elim H0; intro.",
                        "VernacExtend",
                        "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hab)).",
                        "VernacExtend",
                        "f6dcf05e3e36a638e4efb142c169cff645330450"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro.",
                        "VernacExtend",
                        "69e6dce0928c10bc8e91776963343c6dbf299832"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hbc)).",
                        "VernacExtend",
                        "daa0524ac2facc54fa69ea60a6e6e275036b5e45"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NewtonInt_P8",
            "line_nb": 253,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim X; intros F0 H0.",
                        "VernacExtend",
                        "67198c881b352ad80ee840b57cfac0c92cfd804c"
                    ]
                },
                {
                    "command": [
                        "elim X0; intros F1 H1.",
                        "VernacExtend",
                        "ce46b473cb89c93626738df90adaba94ba1c61e9"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "6e633ac525c31185442a4f38ba0fc5771d679c59"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T b c) as [[Hlt'|Heq']|Hgt'].",
                        "VernacExtend",
                        "34da7a775fdbe39d0968ed01561aae563cd76b7f"
                    ]
                },
                {
                    "command": [
                        "unfold Newton_integrable; exists (fun x:R => match Rle_dec x b with | left _ => F0 x | right _ => F1 x + (F0 b - F1 b) end).",
                        "VernacExtend",
                        "7c34258119b39ec8482717e335ef2d7380a434d5"
                    ]
                },
                {
                    "command": [
                        "elim H0; intro.",
                        "VernacExtend",
                        "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro.",
                        "VernacExtend",
                        "69e6dce0928c10bc8e91776963343c6dbf299832"
                    ]
                },
                {
                    "command": [
                        "left; apply antiderivative_P2; assumption.",
                        "VernacExtend",
                        "5ad6bdf39e9cc93de4441dbebdf965850339f4f1"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
                        "VernacExtend",
                        "6f11dedd91b2934de691d51667de8cc926683012"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt')).",
                        "VernacExtend",
                        "d1bc7f2739cb1ed34240ccb2aecb89e2a53065ae"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hlt)).",
                        "VernacExtend",
                        "42cc6c1c3bdd46cdc9ed5dd640be204ae365d0e3"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq' in X; apply X.",
                        "VernacExtend",
                        "a9c6092f7ab1b76cf81a2f1bfe9bdae0fb52e59e"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T a c) as [[Hlt''|Heq'']|Hgt''].",
                        "VernacExtend",
                        "e04d4001e2e885f1e20a1ea26cadd619ed6b2db1"
                    ]
                },
                {
                    "command": [
                        "unfold Newton_integrable; exists F0.",
                        "VernacExtend",
                        "3b1d71ac43378200d3042495d27f5b7de3215b38"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro.",
                        "VernacExtend",
                        "69e6dce0928c10bc8e91776963343c6dbf299832"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt')).",
                        "VernacExtend",
                        "53169d3a914371f23fcf2bd6638e1318da2c5da7"
                    ]
                },
                {
                    "command": [
                        "elim H0; intro.",
                        "VernacExtend",
                        "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_P3 f F0 F1 a b c H2 H).",
                        "VernacExtend",
                        "e6df38c851c20a476ea952b94f96fa59a3fba7f6"
                    ]
                },
                {
                    "command": [
                        "elim H3; intro.",
                        "VernacExtend",
                        "522e36e2853ff30db9e3e0abc7a128144a4e937c"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H4; elim H4; clear H4; intros _ H4.",
                        "VernacExtend",
                        "62b257d5a7513be5a8c3d135a76bbdc46e88a37b"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 Hlt'')).",
                        "VernacExtend",
                        "e6d9f9ca5dc3507c086467de27f243028d736d12"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
                        "VernacExtend",
                        "6f11dedd91b2934de691d51667de8cc926683012"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt)).",
                        "VernacExtend",
                        "48a15ae72eedd57686c41fc51038d5d562200b82"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq''; apply NewtonInt_P1.",
                        "VernacExtend",
                        "9f212ac7c02984fa9dbfc84881560994ad4bed0b"
                    ]
                },
                {
                    "command": [
                        "unfold Newton_integrable; exists F1.",
                        "VernacExtend",
                        "4291f9c883814c0b429b940f355da4b65ff7494b"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro.",
                        "VernacExtend",
                        "69e6dce0928c10bc8e91776963343c6dbf299832"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt')).",
                        "VernacExtend",
                        "53169d3a914371f23fcf2bd6638e1318da2c5da7"
                    ]
                },
                {
                    "command": [
                        "elim H0; intro.",
                        "VernacExtend",
                        "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_P3 f F0 F1 a b c H2 H).",
                        "VernacExtend",
                        "e6df38c851c20a476ea952b94f96fa59a3fba7f6"
                    ]
                },
                {
                    "command": [
                        "elim H3; intro.",
                        "VernacExtend",
                        "522e36e2853ff30db9e3e0abc7a128144a4e937c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H4; elim H4; clear H4; intros _ H4.",
                        "VernacExtend",
                        "62b257d5a7513be5a8c3d135a76bbdc46e88a37b"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 Hgt'')).",
                        "VernacExtend",
                        "655477c918e4402c805dfc212c0fb5080d9da310"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
                        "VernacExtend",
                        "6f11dedd91b2934de691d51667de8cc926683012"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt)).",
                        "VernacExtend",
                        "48a15ae72eedd57686c41fc51038d5d562200b82"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq; apply X0.",
                        "VernacExtend",
                        "215b923bf00043c9c980c282b60b266c1b151984"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T b c) as [[Hlt'|Heq']|Hgt'].",
                        "VernacExtend",
                        "34da7a775fdbe39d0968ed01561aae563cd76b7f"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T a c) as [[Hlt''|Heq'']|Hgt''].",
                        "VernacExtend",
                        "e04d4001e2e885f1e20a1ea26cadd619ed6b2db1"
                    ]
                },
                {
                    "command": [
                        "unfold Newton_integrable; exists F1.",
                        "VernacExtend",
                        "4291f9c883814c0b429b940f355da4b65ff7494b"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro.",
                        "VernacExtend",
                        "69e6dce0928c10bc8e91776963343c6dbf299832"
                    ]
                },
                {
                    "command": [
                        "elim H0; intro.",
                        "VernacExtend",
                        "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
                        "VernacExtend",
                        "6f11dedd91b2934de691d51667de8cc926683012"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hgt)).",
                        "VernacExtend",
                        "4b3fef2f3f94a3bf3b749e47a32b9a2f1e3627e3"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_P4 f F0 F1 b a c H2 H).",
                        "VernacExtend",
                        "26a249b9da34046212241183664b4e14ab340630"
                    ]
                },
                {
                    "command": [
                        "elim H3; intro.",
                        "VernacExtend",
                        "522e36e2853ff30db9e3e0abc7a128144a4e937c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H4; elim H4; clear H4; intros _ H4.",
                        "VernacExtend",
                        "62b257d5a7513be5a8c3d135a76bbdc46e88a37b"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 Hlt'')).",
                        "VernacExtend",
                        "e6d9f9ca5dc3507c086467de27f243028d736d12"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hlt')).",
                        "VernacExtend",
                        "a43644f4cc3a48fed082079e04d90ef4f482ee9e"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq''; apply NewtonInt_P1.",
                        "VernacExtend",
                        "9f212ac7c02984fa9dbfc84881560994ad4bed0b"
                    ]
                },
                {
                    "command": [
                        "unfold Newton_integrable; exists F0.",
                        "VernacExtend",
                        "3b1d71ac43378200d3042495d27f5b7de3215b38"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "elim H0; intro.",
                        "VernacExtend",
                        "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
                        "VernacExtend",
                        "76db159a1634a6baa37b0f6d47b562c7c16945da"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro.",
                        "VernacExtend",
                        "69e6dce0928c10bc8e91776963343c6dbf299832"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_P4 f F0 F1 b a c H H2).",
                        "VernacExtend",
                        "9b706c8ac1c5ffcd23d4b000cdcb6359d9dec095"
                    ]
                },
                {
                    "command": [
                        "elim H3; intro.",
                        "VernacExtend",
                        "522e36e2853ff30db9e3e0abc7a128144a4e937c"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H4; elim H4; clear H4; intros _ H4.",
                        "VernacExtend",
                        "62b257d5a7513be5a8c3d135a76bbdc46e88a37b"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 Hgt'')).",
                        "VernacExtend",
                        "655477c918e4402c805dfc212c0fb5080d9da310"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H2; elim H2; clear H2; intros _ H2.",
                        "VernacExtend",
                        "6f11dedd91b2934de691d51667de8cc926683012"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 Hlt')).",
                        "VernacExtend",
                        "d1bc7f2739cb1ed34240ccb2aecb89e2a53065ae"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq' in X; apply X.",
                        "VernacExtend",
                        "a9c6092f7ab1b76cf81a2f1bfe9bdae0fb52e59e"
                    ]
                },
                {
                    "command": [
                        "assert (X1 := NewtonInt_P3 f a b X).",
                        "VernacExtend",
                        "e51584bc930b3d31b9d4373b310eb0c1421b4b78"
                    ]
                },
                {
                    "command": [
                        "assert (X2 := NewtonInt_P3 f b c X0).",
                        "VernacExtend",
                        "aef9921ae27f5e36e698b4fa20b29f2cf747842e"
                    ]
                },
                {
                    "command": [
                        "apply NewtonInt_P3.",
                        "VernacExtend",
                        "82d60c79cfe034e51eb2dbbc2f5779aff23481ff"
                    ]
                },
                {
                    "command": [
                        "apply NewtonInt_P7 with b; assumption.",
                        "VernacExtend",
                        "c30a5d24a900b370059191d3d9b9f0db40f07a6c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "NewtonInt_P9",
            "line_nb": 332,
            "steps": [
                {
                    "command": [
                        "intros; unfold NewtonInt.",
                        "VernacExtend",
                        "2314f3c447ec20c4c3e8ceea8adfe38aef61df7c"
                    ]
                },
                {
                    "command": [
                        "case (NewtonInt_P8 f a b c pr1 pr2) as (x,Hor).",
                        "VernacExtend",
                        "6a98151444fe60d6b8bd540b70302fb0afdf1ca8"
                    ]
                },
                {
                    "command": [
                        "case pr1 as (x0,Hor0).",
                        "VernacExtend",
                        "f233e5303befa160cb289b3a97745193402e2e2d"
                    ]
                },
                {
                    "command": [
                        "case pr2 as (x1,Hor1).",
                        "VernacExtend",
                        "4ff82922bcbd5c264e1db13b4a4c06b2e33f857e"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "6e633ac525c31185442a4f38ba0fc5771d679c59"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T b c) as [[Hlt'|Heq']|Hgt'].",
                        "VernacExtend",
                        "34da7a775fdbe39d0968ed01561aae563cd76b7f"
                    ]
                },
                {
                    "command": [
                        "case Hor0; intro.",
                        "VernacExtend",
                        "e4540483ec768dc1f69fa3fc31156b55f712c1d6"
                    ]
                },
                {
                    "command": [
                        "case Hor1; intro.",
                        "VernacExtend",
                        "beb436a4c8f29be2ee823e67d5d7f67ebea809fe"
                    ]
                },
                {
                    "command": [
                        "case Hor; intro.",
                        "VernacExtend",
                        "0d9a2a939ff8644fc828ed2e80bbdf4e35b5ce6a"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := antiderivative_P2 f x0 x1 a b c H H0).",
                        "VernacExtend",
                        "c20cf484200848eb3222b2b6d1de7defbd447cbb"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_Ucte f x (fun x:R => match Rle_dec x b with | left _ => x0 x | right _ => x1 x + (x0 b - x1 b) end) a c H1 H2).",
                        "VernacExtend",
                        "6d211f9c260225b8f202467722ed48ae75c9468e"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros.",
                        "VernacExtend",
                        "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
                    ]
                },
                {
                    "command": [
                        "assert (H5 : a <= a <= c).",
                        "VernacExtend",
                        "def8ec15b834afee063a8e66ce3689cdc2192aa1"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; apply Rlt_trans with b; assumption ].",
                        "VernacExtend",
                        "bf358b76a2c73966c2876f4b73fc6ba8a06a04f7"
                    ]
                },
                {
                    "command": [
                        "assert (H6 : a <= c <= c).",
                        "VernacExtend",
                        "86b978889b4e36da7c4281235141f6d55b953684"
                    ]
                },
                {
                    "command": [
                        "split; [ left; apply Rlt_trans with b; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "a721b78f3199cb4d7acac49a6c1e25649eb7d27c"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 _ H5); rewrite (H4 _ H6).",
                        "VernacExtend",
                        "88d3fe34288a901e4b41fe0178c4b121e845b41a"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec a b) as [Hlea|Hnlea].",
                        "VernacExtend",
                        "2adb82cb713af3a813de7826071d17630348e320"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec c b) as [Hlec|Hnlec].",
                        "VernacExtend",
                        "eacd052005aa45cf723198df8f5dd46b45854d6b"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hlec Hlt')).",
                        "VernacExtend",
                        "5cc3d0e64ac16a07c86f753ffc7e076aa95b899c"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "elim Hnlea; left; assumption.",
                        "VernacExtend",
                        "46d38d1b942355fc2b393495e4bf0264b62f83c3"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H1; elim H1; clear H1; intros _ H1.",
                        "VernacExtend",
                        "0914ce98ca98686ad2cc7b3fdc62bf8fd4adb553"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 (Rlt_trans _ _ _ Hlt Hlt'))).",
                        "VernacExtend",
                        "e709b171e4646c49c33d8501812c7ecba64920ff"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
                        "VernacExtend",
                        "40028f05c7ff91161bc9ec57607c24b91b25fac4"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hlt')).",
                        "VernacExtend",
                        "46ce945671df67c61b2e508454e17b767d07cd7d"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hlt)).",
                        "VernacExtend",
                        "42cc6c1c3bdd46cdc9ed5dd640be204ae365d0e3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Heq'.",
                        "VernacExtend",
                        "0c2901409f5bc9b450cb6e95f2d235a1f50f700d"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_opp_r; rewrite Rplus_0_r.",
                        "VernacExtend",
                        "1c5d6812516b4b4d5584f120351011635de40225"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Heq' in Hor.",
                        "VernacExtend",
                        "6f235c86e12930fffefc4be405a1fc16f3901764"
                    ]
                },
                {
                    "command": [
                        "elim Hor0; intro.",
                        "VernacExtend",
                        "2faa324b2143629ea3fdc8af9576ac71b837099c"
                    ]
                },
                {
                    "command": [
                        "elim Hor; intro.",
                        "VernacExtend",
                        "53267af92af23ef4972af13e0318519d03e7a22c"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := antiderivative_Ucte f x x0 a b H0 H).",
                        "VernacExtend",
                        "93c095c2e30041e802dba0e18022a947d2c927ae"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "rewrite (H2 b).",
                        "VernacExtend",
                        "f98c346c79b8baf5f6d1f914f05e325384476d2d"
                    ]
                },
                {
                    "command": [
                        "rewrite (H2 a).",
                        "VernacExtend",
                        "f794ccfeb85f5ecab7e1fef68370440fc400026b"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "6bab46c1adec52d812fd328f9f48728040031941"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "7f83d8514281eecf7d46d76f6ccefd321f22c757"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
                        "VernacExtend",
                        "40028f05c7ff91161bc9ec57607c24b91b25fac4"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hlt)).",
                        "VernacExtend",
                        "f3a32117b048e7825d2d843b1e2a0d5a6f94e118"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hlt)).",
                        "VernacExtend",
                        "42cc6c1c3bdd46cdc9ed5dd640be204ae365d0e3"
                    ]
                },
                {
                    "command": [
                        "elim Hor1; intro.",
                        "VernacExtend",
                        "31c6c5324da47f2e001570773dee7baca6a56e98"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt')).",
                        "VernacExtend",
                        "53169d3a914371f23fcf2bd6638e1318da2c5da7"
                    ]
                },
                {
                    "command": [
                        "elim Hor0; intro.",
                        "VernacExtend",
                        "2faa324b2143629ea3fdc8af9576ac71b837099c"
                    ]
                },
                {
                    "command": [
                        "elim Hor; intro.",
                        "VernacExtend",
                        "53267af92af23ef4972af13e0318519d03e7a22c"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := antiderivative_P2 f x x1 a c b H1 H).",
                        "VernacExtend",
                        "b7a07c13dc2f02b33fe35fed4d3aff409f59e7a1"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_Ucte _ _ _ a b H0 H2).",
                        "VernacExtend",
                        "d48fd4d80ce589ed6e3728fb4d9e490179a98b62"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros.",
                        "VernacExtend",
                        "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 a).",
                        "VernacExtend",
                        "8c571d81a281e29af14bf8b7bd541285e6da1e8b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 b).",
                        "VernacExtend",
                        "dcc43931943490f3654b05d25bfbddeb61d55f61"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec b c) as [Hle|Hnle].",
                        "VernacExtend",
                        "741aa04b37c62a227b43f5b1be559fa016c9f909"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle Hgt')).",
                        "VernacExtend",
                        "239dd89c131598699ebbf2a39220b4851c2214bb"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec a c) as [Hle'|Hnle'].",
                        "VernacExtend",
                        "413bb1dc3f937416121a54817a1b915f6500e9ef"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "elim Hnle'; unfold antiderivative in H1; elim H1; intros; assumption.",
                        "VernacExtend",
                        "1b570952ae1be515da5d10eeb625bb21b9d566ff"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "7f83d8514281eecf7d46d76f6ccefd321f22c757"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "6bab46c1adec52d812fd328f9f48728040031941"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := antiderivative_P2 _ _ _ _ _ _ H1 H0).",
                        "VernacExtend",
                        "a526e829e83161481c14b61ce42c701e72f81932"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_Ucte _ _ _ c b H H2).",
                        "VernacExtend",
                        "c8ee01ae1dc6ddffb4e4875aae0efb8bc62ed49d"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros.",
                        "VernacExtend",
                        "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 c).",
                        "VernacExtend",
                        "eca739dbf8200ec6c3d19d2ef5a2d9072966b3f1"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 b).",
                        "VernacExtend",
                        "dcc43931943490f3654b05d25bfbddeb61d55f61"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec b a) as [Hle|Hnle].",
                        "VernacExtend",
                        "d586db7d323aa9da02a98c0fea4a886fe95f1afd"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle Hlt)).",
                        "VernacExtend",
                        "5811f0747c48ab6602d7ba824fef4084ebab76b5"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec c a) as [Hle'|[]].",
                        "VernacExtend",
                        "5300ec149aa049cce47b757b6cf6cd431e26b769"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H1; elim H1; intros; assumption.",
                        "VernacExtend",
                        "c7d5552e3124b15198d2cb340e6786fbba5ec9d9"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "7f83d8514281eecf7d46d76f6ccefd321f22c757"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "6bab46c1adec52d812fd328f9f48728040031941"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
                        "VernacExtend",
                        "40028f05c7ff91161bc9ec57607c24b91b25fac4"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hlt)).",
                        "VernacExtend",
                        "f3a32117b048e7825d2d843b1e2a0d5a6f94e118"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq in Hor |- *.",
                        "VernacExtend",
                        "97ae13ca136bb0bf0e5971f65af123b97064c30b"
                    ]
                },
                {
                    "command": [
                        "elim Hor; intro.",
                        "VernacExtend",
                        "53267af92af23ef4972af13e0318519d03e7a22c"
                    ]
                },
                {
                    "command": [
                        "elim Hor1; intro.",
                        "VernacExtend",
                        "31c6c5324da47f2e001570773dee7baca6a56e98"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := antiderivative_Ucte _ _ _ b c H H0).",
                        "VernacExtend",
                        "faf2f617b7b26b1eecec3e31c19be5d8ea972445"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : b <= c).",
                        "VernacExtend",
                        "0037afc78837aba594b95b790f539651ff44cb7f"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; intros; assumption.",
                        "VernacExtend",
                        "d891622b60f2280dab40b1e2af4cb702cef8d407"
                    ]
                },
                {
                    "command": [
                        "rewrite (H2 b).",
                        "VernacExtend",
                        "f98c346c79b8baf5f6d1f914f05e325384476d2d"
                    ]
                },
                {
                    "command": [
                        "rewrite (H2 c).",
                        "VernacExtend",
                        "f9fefc843feac639a99ce377e93cdc197bfaec11"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | right; reflexivity ].",
                        "VernacExtend",
                        "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | assumption ].",
                        "VernacExtend",
                        "3e8d5ea4153788a4b3b4f71e65238c3c1dabd9c8"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : b = c).",
                        "VernacExtend",
                        "3ef505a80db197e2494aa073b442b3b32781d1bd"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H, H0; elim H; elim H0; intros; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "70474d07fce5b25c2fa2f19c3695c8c9927e23c3"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; ring.",
                        "VernacExtend",
                        "698aeb70cdb5caeee61df00d3fb6a302387653ec"
                    ]
                },
                {
                    "command": [
                        "elim Hor1; intro.",
                        "VernacExtend",
                        "31c6c5324da47f2e001570773dee7baca6a56e98"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : b = c).",
                        "VernacExtend",
                        "3ef505a80db197e2494aa073b442b3b32781d1bd"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H, H0; elim H; elim H0; intros; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "70474d07fce5b25c2fa2f19c3695c8c9927e23c3"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; ring.",
                        "VernacExtend",
                        "698aeb70cdb5caeee61df00d3fb6a302387653ec"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := antiderivative_Ucte _ _ _ c b H H0).",
                        "VernacExtend",
                        "aba99ccc072cb9f533b3e73bcdaca2113a48a705"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : c <= b).",
                        "VernacExtend",
                        "5073466b9fed1c3c6ed96845a0ca5e2bde7ad5d3"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; intros; assumption.",
                        "VernacExtend",
                        "d891622b60f2280dab40b1e2af4cb702cef8d407"
                    ]
                },
                {
                    "command": [
                        "rewrite (H2 c).",
                        "VernacExtend",
                        "f9fefc843feac639a99ce377e93cdc197bfaec11"
                    ]
                },
                {
                    "command": [
                        "rewrite (H2 b).",
                        "VernacExtend",
                        "f98c346c79b8baf5f6d1f914f05e325384476d2d"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | right; reflexivity ].",
                        "VernacExtend",
                        "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | assumption ].",
                        "VernacExtend",
                        "3e8d5ea4153788a4b3b4f71e65238c3c1dabd9c8"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T b c) as [[Hlt'|Heq']|Hgt'].",
                        "VernacExtend",
                        "34da7a775fdbe39d0968ed01561aae563cd76b7f"
                    ]
                },
                {
                    "command": [
                        "elim Hor0; intro.",
                        "VernacExtend",
                        "2faa324b2143629ea3fdc8af9576ac71b837099c"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
                        "VernacExtend",
                        "76db159a1634a6baa37b0f6d47b562c7c16945da"
                    ]
                },
                {
                    "command": [
                        "elim Hor1; intro.",
                        "VernacExtend",
                        "31c6c5324da47f2e001570773dee7baca6a56e98"
                    ]
                },
                {
                    "command": [
                        "elim Hor; intro.",
                        "VernacExtend",
                        "53267af92af23ef4972af13e0318519d03e7a22c"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := antiderivative_P2 _ _ _ _ _ _ H H1).",
                        "VernacExtend",
                        "4e140863a15de8356988345122a12f302c7603bb"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_Ucte _ _ _ b c H0 H2).",
                        "VernacExtend",
                        "fabe7c81ee04f7ed87789113ab0612603d919935"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros.",
                        "VernacExtend",
                        "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 b).",
                        "VernacExtend",
                        "dcc43931943490f3654b05d25bfbddeb61d55f61"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 c).",
                        "VernacExtend",
                        "eca739dbf8200ec6c3d19d2ef5a2d9072966b3f1"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec b a) as [|[]].",
                        "VernacExtend",
                        "145a5a1bcccecda9b0b69280c82128a31a0af0bf"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec c a) as [|].",
                        "VernacExtend",
                        "745b3810973764a2ffbde7951a563a9990718f9d"
                    ]
                },
                {
                    "command": [
                        "assert (H5 : a = c).",
                        "VernacExtend",
                        "30e08a33981db19cd045f8721d8c6b7e5a56f645"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H1; elim H1; intros; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "27accddacd7fabc97b4621d88245e7869fa4764b"
                    ]
                },
                {
                    "command": [
                        "rewrite H5; ring.",
                        "VernacExtend",
                        "bec2b94ba7908fad9c15dc5fa6e60aa87195925e"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "7f83d8514281eecf7d46d76f6ccefd321f22c757"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "6bab46c1adec52d812fd328f9f48728040031941"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := antiderivative_P2 _ _ _ _ _ _ H0 H1).",
                        "VernacExtend",
                        "220a771a17a5da14f192e3b05f374fb313486126"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_Ucte _ _ _ b a H H2).",
                        "VernacExtend",
                        "3419d2e237921811bbb59ff3dee45452187c86bf"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros.",
                        "VernacExtend",
                        "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 a).",
                        "VernacExtend",
                        "8c571d81a281e29af14bf8b7bd541285e6da1e8b"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 b).",
                        "VernacExtend",
                        "dcc43931943490f3654b05d25bfbddeb61d55f61"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec b c) as [|[]].",
                        "VernacExtend",
                        "79a32e711010e6e96b58ce56cf586034a670a5a4"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec a c) as [|].",
                        "VernacExtend",
                        "8adec128e7743c0518c38772c8e28cc406147033"
                    ]
                },
                {
                    "command": [
                        "assert (H5 : a = c).",
                        "VernacExtend",
                        "30e08a33981db19cd045f8721d8c6b7e5a56f645"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H1; elim H1; intros; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "27accddacd7fabc97b4621d88245e7869fa4764b"
                    ]
                },
                {
                    "command": [
                        "rewrite H5; ring.",
                        "VernacExtend",
                        "bec2b94ba7908fad9c15dc5fa6e60aa87195925e"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "6bab46c1adec52d812fd328f9f48728040031941"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "7f83d8514281eecf7d46d76f6ccefd321f22c757"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
                        "VernacExtend",
                        "40028f05c7ff91161bc9ec57607c24b91b25fac4"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hlt')).",
                        "VernacExtend",
                        "46ce945671df67c61b2e508454e17b767d07cd7d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Heq'.",
                        "VernacExtend",
                        "0c2901409f5bc9b450cb6e95f2d235a1f50f700d"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_opp_r; rewrite Rplus_0_r.",
                        "VernacExtend",
                        "1c5d6812516b4b4d5584f120351011635de40225"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Heq' in Hor.",
                        "VernacExtend",
                        "6f235c86e12930fffefc4be405a1fc16f3901764"
                    ]
                },
                {
                    "command": [
                        "elim Hor0; intro.",
                        "VernacExtend",
                        "2faa324b2143629ea3fdc8af9576ac71b837099c"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
                        "VernacExtend",
                        "76db159a1634a6baa37b0f6d47b562c7c16945da"
                    ]
                },
                {
                    "command": [
                        "elim Hor; intro.",
                        "VernacExtend",
                        "53267af92af23ef4972af13e0318519d03e7a22c"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
                        "VernacExtend",
                        "40028f05c7ff91161bc9ec57607c24b91b25fac4"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hgt)).",
                        "VernacExtend",
                        "99a9ddc0984217bafd792ac6b05d5547bbd1066b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := antiderivative_Ucte f x x0 b a H0 H).",
                        "VernacExtend",
                        "d43c06fa3ff16d95734bfb3178f4041b9e763f3e"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "rewrite (H2 b).",
                        "VernacExtend",
                        "f98c346c79b8baf5f6d1f914f05e325384476d2d"
                    ]
                },
                {
                    "command": [
                        "rewrite (H2 a).",
                        "VernacExtend",
                        "f794ccfeb85f5ecab7e1fef68370440fc400026b"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "7f83d8514281eecf7d46d76f6ccefd321f22c757"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "6bab46c1adec52d812fd328f9f48728040031941"
                    ]
                },
                {
                    "command": [
                        "elim Hor0; intro.",
                        "VernacExtend",
                        "2faa324b2143629ea3fdc8af9576ac71b837099c"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H; elim H; clear H; intros _ H.",
                        "VernacExtend",
                        "5c29c5886a0f81443d00c1085480060c8f076148"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
                        "VernacExtend",
                        "76db159a1634a6baa37b0f6d47b562c7c16945da"
                    ]
                },
                {
                    "command": [
                        "elim Hor1; intro.",
                        "VernacExtend",
                        "31c6c5324da47f2e001570773dee7baca6a56e98"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H0; elim H0; clear H0; intros _ H0.",
                        "VernacExtend",
                        "40028f05c7ff91161bc9ec57607c24b91b25fac4"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hgt')).",
                        "VernacExtend",
                        "ff1a4ce3376bf3c12742462a2a70cdc47f07bc8c"
                    ]
                },
                {
                    "command": [
                        "elim Hor; intro.",
                        "VernacExtend",
                        "53267af92af23ef4972af13e0318519d03e7a22c"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H1; elim H1; clear H1; intros _ H1.",
                        "VernacExtend",
                        "0914ce98ca98686ad2cc7b3fdc62bf8fd4adb553"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 (Rlt_trans _ _ _ Hgt' Hgt))).",
                        "VernacExtend",
                        "00d396a38380485fcb636fe1c8ca6f8ec9ce25d1"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := antiderivative_P2 _ _ _ _ _ _ H0 H).",
                        "VernacExtend",
                        "69e18856444bd05b1b952a41e0caa0c2f5fd4bf6"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := antiderivative_Ucte _ _ _ c a H1 H2).",
                        "VernacExtend",
                        "fe5d458f6b273c4f4615055d9447829ebd7aad1e"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros.",
                        "VernacExtend",
                        "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
                    ]
                },
                {
                    "command": [
                        "assert (H5 : c <= a).",
                        "VernacExtend",
                        "925ac7fb1e4cfd98936f49258f507b930f8aaef6"
                    ]
                },
                {
                    "command": [
                        "unfold antiderivative in H1; elim H1; intros; assumption.",
                        "VernacExtend",
                        "c7d5552e3124b15198d2cb340e6786fbba5ec9d9"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 c).",
                        "VernacExtend",
                        "eca739dbf8200ec6c3d19d2ef5a2d9072966b3f1"
                    ]
                },
                {
                    "command": [
                        "rewrite (H4 a).",
                        "VernacExtend",
                        "8c571d81a281e29af14bf8b7bd541285e6da1e8b"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec a b) as [Hle|Hnle].",
                        "VernacExtend",
                        "f3416f93eef3cf68aee486729e511d50cd6262f3"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle Hgt)).",
                        "VernacExtend",
                        "245bcf1e2571139238da8280f3f29cced908d723"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec c b) as [|[]].",
                        "VernacExtend",
                        "b50b8800e02370c11ef83467263f9bcfbb3c62c2"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | right; reflexivity ].",
                        "VernacExtend",
                        "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | assumption ].",
                        "VernacExtend",
                        "3e8d5ea4153788a4b3b4f71e65238c3c1dabd9c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}