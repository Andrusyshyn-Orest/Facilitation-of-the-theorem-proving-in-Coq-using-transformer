{
    "filename": "theories/Reals/Ranalysis5.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Ranalysis_reg.",
            "VernacRequire",
            "4618d6bc6e973fd059d7ae3ba7a9096fc3aa83f2"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Rseries.",
            "VernacRequire",
            "7a432dd14e4529f426efb08dc0832c62a8dcc16b"
        ],
        [
            "Require Import Lra.",
            "VernacRequire",
            "6dd90563c90485cd5a8a8b957af14c96d3b4cbc1"
        ],
        [
            "Require Import RiemannInt.",
            "VernacRequire",
            "b34b8d6f366e94628d49ebcaa970f0b31c4339d0"
        ],
        [
            "Require Import SeqProp.",
            "VernacRequire",
            "a37c3bf41f1f017811a12d99565cebd0c11a7976"
        ],
        [
            "Require Import Max.",
            "VernacRequire",
            "163f8b04f9c5ff0ff8fe9ce4c762873ab613a3fa"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Require Import Lra.",
            "VernacRequire",
            "6dd90563c90485cd5a8a8b957af14c96d3b4cbc1"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Lemma f_incr_implies_g_incr_interv : forall f g:R->R, forall lb ub, lb < ub -> (forall x y, lb <= x -> x < y -> y <= ub -> f x < f y) -> (forall x, f lb <= x -> x <= f ub -> (comp f g) x = id x) -> (forall x , f lb <= x -> x <= f ub -> lb <= g x <= ub) -> (forall x y, f lb <= x -> x < y -> y <= f ub -> g x < g y).",
            "VernacStartTheoremProof",
            "ebe97e48851cb65f7bb2094e5abc60029affb3d2"
        ],
        [
            "intros f g lb ub lb_lt_ub f_incr f_eq_g g_ok x y lb_le_x x_lt_y y_le_ub.",
            "VernacExtend",
            "cb9d2413433a102a54794af6666f7a653bbe05c8"
        ],
        [
            "assert (x_encad : f lb <= x <= f ub) by lra.",
            "VernacExtend",
            "5de0120920ad798bc13cf030f59237b482171cb1"
        ],
        [
            "assert (y_encad : f lb <= y <= f ub) by lra.",
            "VernacExtend",
            "b649454bd04ada00decb5766f3a519c81dcd4a8c"
        ],
        [
            "assert (gx_encad := g_ok _ (proj1 x_encad) (proj2 x_encad)).",
            "VernacExtend",
            "debba1ad78957fd4cc6a9aee9ebfece5c234b4f1"
        ],
        [
            "assert (gy_encad := g_ok _ (proj1 y_encad) (proj2 y_encad)).",
            "VernacExtend",
            "0847a05ef37fd9487b7876a8da9bca3ccbf3b955"
        ],
        [
            "case (Rlt_dec (g x) (g y)); [ easy |].",
            "VernacExtend",
            "090d9d04b523cea7b8a017b94ba07194c59269c8"
        ],
        [
            "intros Hfalse.",
            "VernacExtend",
            "c1baa182445f3eb2ba37cae15eba1ad05d736915"
        ],
        [
            "assert (Temp := Rnot_lt_le _ _ Hfalse).",
            "VernacExtend",
            "ebcaf4ebb33e89ff2a1d701efd17be535dd75c82"
        ],
        [
            "enough (y <= x) by lra.",
            "VernacExtend",
            "1649d2b181fd2ac56d0c05a1b584b94506453ca3"
        ],
        [
            "replace y with (id y) by easy.",
            "VernacExtend",
            "4ba440f3ca423b8edbc6d22c149ca0e5feb9996e"
        ],
        [
            "replace x with (id x) by easy.",
            "VernacExtend",
            "a3fbdfcba884c1f039bb4f1a996bec21441efe9a"
        ],
        [
            "rewrite <- f_eq_g by easy.",
            "VernacExtend",
            "946651d12f9df95620c7dce7c5a4d6fb275c7f87"
        ],
        [
            "rewrite <- f_eq_g by easy.",
            "VernacExtend",
            "946651d12f9df95620c7dce7c5a4d6fb275c7f87"
        ],
        [
            "assert (f_incr2 : forall x y, lb <= x -> x <= y -> y < ub -> f x <= f y).",
            "VernacExtend",
            "0685a73f90977a326cfea6118018e7e0a87ead64"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "intros m n lb_le_m m_le_n n_lt_ub.",
            "VernacExtend",
            "2b2e77fe25231270f6a3b7ffa64dfe8d1a71f312"
        ],
        [
            "case (m_le_n).",
            "VernacExtend",
            "4adc3489997a30711ceeb8921b4f743474059fec"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "intros; apply Rlt_le, f_incr, Rlt_le; assumption.",
            "VernacExtend",
            "cd45e934a2c9f264a01ef9e4c0d49b0a02ba78c7"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "intros Hyp; rewrite Hyp; apply Req_le; reflexivity.",
            "VernacExtend",
            "82d11d18b0efd460acf8a4d0b915cab057130da0"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "apply f_incr2; intuition.",
            "VernacExtend",
            "b70d559ea96d0d45a266f28977c6f19fd69a0d24"
        ],
        [
            "enough (g x <> ub) by lra.",
            "VernacExtend",
            "16ad4021c8d8ad60a65e769a07415eeedf6f65db"
        ],
        [
            "intro Hf.",
            "VernacExtend",
            "6f8097812b59a70e6a2905483ee62407e17f44b0"
        ],
        [
            "assert (Htemp : (comp f g) x = f ub).",
            "VernacExtend",
            "fa7b372c20ae884e23ff8fc4ab0380019524e2f8"
        ],
        [
            "{",
            "VernacSubproof",
            "184cabd02aa0a33f23f10474ea95789b1f149361"
        ],
        [
            "unfold comp; rewrite Hf; reflexivity.",
            "VernacExtend",
            "20097932b065969ed0145ead4b6618639b893e6d"
        ],
        [
            "}",
            "VernacEndSubproof",
            "85f27874ef16421341373f4b062b6d1605043af9"
        ],
        [
            "rewrite f_eq_g in Htemp by easy.",
            "VernacExtend",
            "99e0a38ef30f26d9106fc7b4e303056ed5f293de"
        ],
        [
            "unfold id in Htemp.",
            "VernacExtend",
            "3ea3b827d50eedb3b48ad579f04ca8856c5184a0"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_id_interv : forall (lb ub x:R), lb <= x <= ub -> derivable_pt id x.",
            "VernacStartTheoremProof",
            "243c48d66dee203ec68acc7a26e12d1811a497bc"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reg.",
            "VernacExtend",
            "200773634894b8319f51d08aac98d6835b0db846"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pr_nu_var2_interv : forall (f g : R -> R) (lb ub x : R) (pr1 : derivable_pt f x) (pr2 : derivable_pt g x), lb < ub -> lb < x < ub -> (forall h : R, lb < h < ub -> f h = g h) -> derive_pt f x pr1 = derive_pt g x pr2.",
            "VernacStartTheoremProof",
            "aee48d24839b6b62aca12c9ca6dfcc9b42584917"
        ],
        [
            "intros f g lb ub x Prf Prg lb_lt_ub x_encad local_eq.",
            "VernacExtend",
            "38c86f6822df925606d0c1610b76376ee630f2e2"
        ],
        [
            "assert (forall x l, lb < x < ub -> (derivable_pt_abs f x l <-> derivable_pt_abs g x l)).",
            "VernacExtend",
            "7601df94bb946f8dff1bd6a3aae12ec9d73b5d53"
        ],
        [
            "intros a l a_encad.",
            "VernacExtend",
            "c99e91f0bb6dec6a7aa23e6112dd6f29638f021e"
        ],
        [
            "unfold derivable_pt_abs, derivable_pt_lim.",
            "VernacExtend",
            "d532f929fb6615c9a567b9cdc371ff5fed83cb44"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros Hyp eps eps_pos.",
            "VernacExtend",
            "a2d9654ab64edcc9b52bdecfc5a8020b7a259bf0"
        ],
        [
            "elim (Hyp eps eps_pos) ; intros delta Hyp2.",
            "VernacExtend",
            "6aa8bc6529586667b10cc2d443f723f5411d4ea6"
        ],
        [
            "assert (Pos_cond : Rmin delta (Rmin (ub - a) (a - lb)) > 0).",
            "VernacExtend",
            "7f994a36737f5e0c4e206bec450b90f72e1c4eb7"
        ],
        [
            "clear-a lb ub a_encad delta.",
            "VernacExtend",
            "cb41d0b72d8f15cc6abb4a44ae64f7399a8e3609"
        ],
        [
            "apply Rmin_pos ; [exact (delta.(cond_pos)) | apply Rmin_pos ] ; apply Rlt_Rminus ; intuition.",
            "VernacExtend",
            "7de00d1066aa33afbbaee4cd6bfc5487c916ec0c"
        ],
        [
            "exists (mkposreal (Rmin delta (Rmin (ub - a) (a - lb))) Pos_cond).",
            "VernacExtend",
            "00e31d79809a6c54e7eac3fcc3a244b972824127"
        ],
        [
            "intros h h_neq h_encad.",
            "VernacExtend",
            "a2ab3ef3dbca5b9e55061efc172d031a3735d735"
        ],
        [
            "replace (g (a + h) - g a) with (f (a + h) - f a).",
            "VernacExtend",
            "1e4b6e9940f7c6918dbaeed69899497de6327a2d"
        ],
        [
            "apply Hyp2 ; intuition.",
            "VernacExtend",
            "3ee89b689c0fc1f08743a486b7884a86e4b55a47"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))).",
            "VernacExtend",
            "24ec7995d1834c64b1e77851a9c7aad8d6a77ab9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "assert (local_eq2 : forall h : R, lb < h < ub -> - f h = - g h).",
            "VernacExtend",
            "6b2df8fecef985c790450620f8e436d8ec46342a"
        ],
        [
            "intros ; apply Ropp_eq_compat ; intuition.",
            "VernacExtend",
            "5c22c9e90130d1e4370d57349ecc94d400f9affd"
        ],
        [
            "rewrite local_eq ; unfold Rminus.",
            "VernacExtend",
            "4090d6967c4e1cedfa04d13687502833f40eab9b"
        ],
        [
            "rewrite local_eq2.",
            "VernacExtend",
            "bb95b607f0ab6810412dee6f69fc2bcb0675e2c1"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (Sublemma2 : forall x y, Rabs x < Rabs y -> y > 0 -> x < y).",
            "VernacExtend",
            "7e87c5e566c4012e7ae4f6707d5bf1d3d88f759f"
        ],
        [
            "intros m n Hyp_abs y_pos.",
            "VernacExtend",
            "44d08cae3a41f6c822af519f6fb46ec35917320e"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rabs n).",
            "VernacExtend",
            "6d62616498dc0e589e4b7ecb573c24e1349a999b"
        ],
        [
            "apply Rle_lt_trans with (r2:=Rabs m) ; [ | assumption] ; apply RRle_abs.",
            "VernacExtend",
            "fc801347c47a481078c94b35aa6f679773cf62b1"
        ],
        [
            "apply Req_le ; apply Rabs_right ; apply Rgt_ge ; assumption.",
            "VernacExtend",
            "ed0330eff8cde76bf07edb13722e5230eb2090d8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assert (Sublemma : forall x y z, -z < y - x -> x < y + z).",
            "VernacExtend",
            "a32fb85e009b3002a13c0b067bcb4a775632b2ee"
        ],
        [
            "intros ; lra.",
            "VernacExtend",
            "449a153f406381cfb8ab107f551a2c789b996417"
        ],
        [
            "apply Sublemma.",
            "VernacExtend",
            "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
        ],
        [
            "apply Sublemma2.",
            "VernacExtend",
            "da259ec67006ef0aa723fb9de8e046869f52541d"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "4585414329a0ef757c809f4a4dee3b3a09307b5c"
        ],
        [
            "apply Rlt_le_trans with (r2:=a-lb) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "34b1447bcffb3e1c878bd3e3f6657182d672ee98"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "9221a7f8875dabad887808eee1989918d349e497"
        ],
        [
            "assert (Sublemma : forall x y z, y < z - x -> x + y < z).",
            "VernacExtend",
            "6235082af7202ef775472ed3199e07c3ddd2b1b4"
        ],
        [
            "intros ; lra.",
            "VernacExtend",
            "449a153f406381cfb8ab107f551a2c789b996417"
        ],
        [
            "apply Sublemma.",
            "VernacExtend",
            "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
        ],
        [
            "apply Sublemma2.",
            "VernacExtend",
            "da259ec67006ef0aa723fb9de8e046869f52541d"
        ],
        [
            "apply Rlt_le_trans with (r2:=ub-a) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "c093ace23faa9ada7e1b8870445c00fc479cf4e3"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "2d0abfe3efc52b0e5bc9df789caada4f85cc935d"
        ],
        [
            "intros Hyp eps eps_pos.",
            "VernacExtend",
            "a2d9654ab64edcc9b52bdecfc5a8020b7a259bf0"
        ],
        [
            "elim (Hyp eps eps_pos) ; intros delta Hyp2.",
            "VernacExtend",
            "6aa8bc6529586667b10cc2d443f723f5411d4ea6"
        ],
        [
            "assert (Pos_cond : Rmin delta (Rmin (ub - a) (a - lb)) > 0).",
            "VernacExtend",
            "7f994a36737f5e0c4e206bec450b90f72e1c4eb7"
        ],
        [
            "clear-a lb ub a_encad delta.",
            "VernacExtend",
            "cb41d0b72d8f15cc6abb4a44ae64f7399a8e3609"
        ],
        [
            "apply Rmin_pos ; [exact (delta.(cond_pos)) | apply Rmin_pos ] ; apply Rlt_Rminus ; intuition.",
            "VernacExtend",
            "7de00d1066aa33afbbaee4cd6bfc5487c916ec0c"
        ],
        [
            "exists (mkposreal (Rmin delta (Rmin (ub - a) (a - lb))) Pos_cond).",
            "VernacExtend",
            "00e31d79809a6c54e7eac3fcc3a244b972824127"
        ],
        [
            "intros h h_neq h_encad.",
            "VernacExtend",
            "a2ab3ef3dbca5b9e55061efc172d031a3735d735"
        ],
        [
            "replace (f (a + h) - f a) with (g (a + h) - g a).",
            "VernacExtend",
            "5847952d25e0f7947989806a6cf66f361bf79a3f"
        ],
        [
            "apply Hyp2 ; intuition.",
            "VernacExtend",
            "3ee89b689c0fc1f08743a486b7884a86e4b55a47"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))).",
            "VernacExtend",
            "24ec7995d1834c64b1e77851a9c7aad8d6a77ab9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "assert (local_eq2 : forall h : R, lb < h < ub -> - f h = - g h).",
            "VernacExtend",
            "6b2df8fecef985c790450620f8e436d8ec46342a"
        ],
        [
            "intros ; apply Ropp_eq_compat ; intuition.",
            "VernacExtend",
            "5c22c9e90130d1e4370d57349ecc94d400f9affd"
        ],
        [
            "rewrite local_eq ; unfold Rminus.",
            "VernacExtend",
            "4090d6967c4e1cedfa04d13687502833f40eab9b"
        ],
        [
            "rewrite local_eq2.",
            "VernacExtend",
            "bb95b607f0ab6810412dee6f69fc2bcb0675e2c1"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (Sublemma2 : forall x y, Rabs x < Rabs y -> y > 0 -> x < y).",
            "VernacExtend",
            "7e87c5e566c4012e7ae4f6707d5bf1d3d88f759f"
        ],
        [
            "intros m n Hyp_abs y_pos.",
            "VernacExtend",
            "44d08cae3a41f6c822af519f6fb46ec35917320e"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rabs n).",
            "VernacExtend",
            "6d62616498dc0e589e4b7ecb573c24e1349a999b"
        ],
        [
            "apply Rle_lt_trans with (r2:=Rabs m) ; [ | assumption] ; apply RRle_abs.",
            "VernacExtend",
            "fc801347c47a481078c94b35aa6f679773cf62b1"
        ],
        [
            "apply Req_le ; apply Rabs_right ; apply Rgt_ge ; assumption.",
            "VernacExtend",
            "ed0330eff8cde76bf07edb13722e5230eb2090d8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assert (Sublemma : forall x y z, -z < y - x -> x < y + z).",
            "VernacExtend",
            "a32fb85e009b3002a13c0b067bcb4a775632b2ee"
        ],
        [
            "intros ; lra.",
            "VernacExtend",
            "449a153f406381cfb8ab107f551a2c789b996417"
        ],
        [
            "apply Sublemma.",
            "VernacExtend",
            "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
        ],
        [
            "apply Sublemma2.",
            "VernacExtend",
            "da259ec67006ef0aa723fb9de8e046869f52541d"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "4585414329a0ef757c809f4a4dee3b3a09307b5c"
        ],
        [
            "apply Rlt_le_trans with (r2:=a-lb) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "34b1447bcffb3e1c878bd3e3f6657182d672ee98"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "9221a7f8875dabad887808eee1989918d349e497"
        ],
        [
            "assert (Sublemma : forall x y z, y < z - x -> x + y < z).",
            "VernacExtend",
            "6235082af7202ef775472ed3199e07c3ddd2b1b4"
        ],
        [
            "intros ; lra.",
            "VernacExtend",
            "449a153f406381cfb8ab107f551a2c789b996417"
        ],
        [
            "apply Sublemma.",
            "VernacExtend",
            "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
        ],
        [
            "apply Sublemma2.",
            "VernacExtend",
            "da259ec67006ef0aa723fb9de8e046869f52541d"
        ],
        [
            "apply Rlt_le_trans with (r2:=ub-a) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "c093ace23faa9ada7e1b8870445c00fc479cf4e3"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "2d0abfe3efc52b0e5bc9df789caada4f85cc935d"
        ],
        [
            "unfold derivable_pt in Prf.",
            "VernacExtend",
            "3c7781e7dee39caaeb21b4abc55c2f9e3c5a9656"
        ],
        [
            "unfold derivable_pt in Prg.",
            "VernacExtend",
            "36ca45775a401b0da9cfcdc706a8232a5f9c581c"
        ],
        [
            "elim Prf; intros x0 p.",
            "VernacExtend",
            "5dba826794a68931cc07c2dc21d8838b401db5c6"
        ],
        [
            "elim Prg; intros x1 p0.",
            "VernacExtend",
            "f1329b97572724712fafb607552cedcea75b16b8"
        ],
        [
            "assert (Temp := p); rewrite H in Temp.",
            "VernacExtend",
            "db8689c64fff893c53f65ad0011dab4b8a71a259"
        ],
        [
            "unfold derivable_pt_abs in p.",
            "VernacExtend",
            "c2e7683b0d4d4210b5b33c7c81df59f6c50c45fe"
        ],
        [
            "unfold derivable_pt_abs in p0.",
            "VernacExtend",
            "211a1b9d3eb7dcbf45feebd52c84fee2f4ee22c3"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply (uniqueness_limite g x x0 x1 Temp p0).",
            "VernacExtend",
            "87c682068514c88338482d86f2ce491a7cb054fb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leftinv_is_rightinv : forall (f g:R->R), (forall x y, x < y -> f x < f y) -> (forall x, (comp f g) x = id x) -> (forall x, (comp g f) x = id x).",
            "VernacStartTheoremProof",
            "3a12814e3f46a329972ca22bc424b48fbea2a63d"
        ],
        [
            "intros f g f_incr Hyp x.",
            "VernacExtend",
            "666138bddf91770cee5adb5f38317d7fb99871f4"
        ],
        [
            "assert (forall x, f (g (f x)) = f x).",
            "VernacExtend",
            "d4ab188adab2f8f0e3df9cd72d41c3644064a896"
        ],
        [
            "intros ; apply Hyp.",
            "VernacExtend",
            "049605076c40103ae07bc4b149a44818be302ae7"
        ],
        [
            "assert(f_inj : forall x y, f x = f y -> x = y).",
            "VernacExtend",
            "cfc0656fef94139fd7c57e5c04a0688fd088f2b8"
        ],
        [
            "intros a b fa_eq_fb.",
            "VernacExtend",
            "f453c76eb1acf74d56be78ec75896e97aaf128cd"
        ],
        [
            "case(total_order_T a b).",
            "VernacExtend",
            "6b7b4f3e0502fb1d5f46c2ca288fc31ca1a7f6a2"
        ],
        [
            "intro s ; case s ; clear s.",
            "VernacExtend",
            "57f4e29443d335dbff605a26b23fd61cb70077fa"
        ],
        [
            "intro Hf.",
            "VernacExtend",
            "6f8097812b59a70e6a2905483ee62407e17f44b0"
        ],
        [
            "assert (Hfalse := f_incr a b Hf).",
            "VernacExtend",
            "342ebe877663664be467369b33c6e52dae74d133"
        ],
        [
            "apply False_ind.",
            "VernacExtend",
            "953e151f97c8c6479faad3bcd88fb0b89b03443a"
        ],
        [
            "apply (Rlt_not_eq (f a) (f b)) ; assumption.",
            "VernacExtend",
            "4f29df99f149d65d05e300efd7c7b9b57dc18ff3"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intro Hf.",
            "VernacExtend",
            "6f8097812b59a70e6a2905483ee62407e17f44b0"
        ],
        [
            "assert (Hfalse := f_incr b a Hf).",
            "VernacExtend",
            "a75255b5baeb000bc491f6bdfd83622859f44ef1"
        ],
        [
            "apply False_ind.",
            "VernacExtend",
            "953e151f97c8c6479faad3bcd88fb0b89b03443a"
        ],
        [
            "apply (Rlt_not_eq (f b) (f a)) ; [|symmetry] ; assumption.",
            "VernacExtend",
            "62046d0b544ef8f3213ac8fe23efa22142ccde11"
        ],
        [
            "apply f_inj.",
            "VernacExtend",
            "3c3b55e3a494307f9d9df281ea2c0fedf17ac0d6"
        ],
        [
            "unfold comp.",
            "VernacExtend",
            "b8c595984ddc3a4857a83b585333ec689de2b811"
        ],
        [
            "unfold comp in Hyp.",
            "VernacExtend",
            "bef66f5e310076f734233b586d2841fba640713f"
        ],
        [
            "rewrite Hyp.",
            "VernacExtend",
            "b1b52cea6e06e36bca9e4f5b6f2ecb596df39766"
        ],
        [
            "unfold id.",
            "VernacExtend",
            "74f2cf047820ccd7f0d1848c69c9fbf8399a251a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma leftinv_is_rightinv_interv : forall (f g:R->R) (lb ub:R), (forall x y, lb <= x -> x < y -> y <= ub -> f x < f y) -> (forall y, f lb <= y -> y <= f ub -> (comp f g) y = id y) -> (forall x, f lb <= x -> x <= f ub -> lb <= g x <= ub) -> forall x, lb <= x <= ub -> (comp g f) x = id x.",
            "VernacStartTheoremProof",
            "84b3d6cb0fcf333aadf3510416aa0399eb1961c3"
        ],
        [
            "intros f g lb ub f_incr_interv Hyp g_wf x x_encad.",
            "VernacExtend",
            "966a59c970dd614bf2635c76d4fd72b2133bea72"
        ],
        [
            "assert(f_inj : forall x y, lb <= x <= ub -> lb <= y <= ub -> f x = f y -> x = y).",
            "VernacExtend",
            "73c3bc4f8743dafb60788cc02a6f5aa7c9cf3641"
        ],
        [
            "intros a b a_encad b_encad fa_eq_fb.",
            "VernacExtend",
            "0ec8984222591addec56c7cb10c561768dbafc8c"
        ],
        [
            "case(total_order_T a b).",
            "VernacExtend",
            "6b7b4f3e0502fb1d5f46c2ca288fc31ca1a7f6a2"
        ],
        [
            "intro s ; case s ; clear s.",
            "VernacExtend",
            "57f4e29443d335dbff605a26b23fd61cb70077fa"
        ],
        [
            "intro Hf.",
            "VernacExtend",
            "6f8097812b59a70e6a2905483ee62407e17f44b0"
        ],
        [
            "assert (Hfalse := f_incr_interv a b (proj1 a_encad) Hf (proj2 b_encad)).",
            "VernacExtend",
            "b00cb04af7306f9fb865f5babc466d183c011cc3"
        ],
        [
            "apply False_ind.",
            "VernacExtend",
            "953e151f97c8c6479faad3bcd88fb0b89b03443a"
        ],
        [
            "apply (Rlt_not_eq (f a) (f b)) ; assumption.",
            "VernacExtend",
            "4f29df99f149d65d05e300efd7c7b9b57dc18ff3"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intro Hf.",
            "VernacExtend",
            "6f8097812b59a70e6a2905483ee62407e17f44b0"
        ],
        [
            "assert (Hfalse := f_incr_interv b a (proj1 b_encad) Hf (proj2 a_encad)).",
            "VernacExtend",
            "d468370dc0b2766d9dc70db055d771755003c7ab"
        ],
        [
            "apply False_ind.",
            "VernacExtend",
            "953e151f97c8c6479faad3bcd88fb0b89b03443a"
        ],
        [
            "apply (Rlt_not_eq (f b) (f a)) ; [|symmetry] ; assumption.",
            "VernacExtend",
            "62046d0b544ef8f3213ac8fe23efa22142ccde11"
        ],
        [
            "assert (f_incr_interv2 : forall x y, lb <= x -> x <= y -> y <= ub -> f x <= f y).",
            "VernacExtend",
            "70697556fd92469b1cf5f193e1cfa2a70cedaa2b"
        ],
        [
            "intros m n cond1 cond2 cond3.",
            "VernacExtend",
            "e091a125c67f06b2925b48e7ec165e121cfccc4d"
        ],
        [
            "case cond2.",
            "VernacExtend",
            "a46e704be8619c26ab1727bde0fa41ffae92fe46"
        ],
        [
            "intro cond.",
            "VernacExtend",
            "03e96f05b3257e2ad02e5c145a55735f1e6335f3"
        ],
        [
            "apply Rlt_le ; apply f_incr_interv ; assumption.",
            "VernacExtend",
            "b785848d91fbbd63c0e5f627e6baec9d7928ce2e"
        ],
        [
            "intro cond ; right ; rewrite cond ; reflexivity.",
            "VernacExtend",
            "e3aaab183baf828ae4945d7533469f70cc7bcc50"
        ],
        [
            "assert (Hyp2:forall x, lb <= x <= ub -> f (g (f x)) = f x).",
            "VernacExtend",
            "cd79a3fb813a0c20d0e11ea864e0247c0786c8e4"
        ],
        [
            "intros ; apply Hyp.",
            "VernacExtend",
            "049605076c40103ae07bc4b149a44818be302ae7"
        ],
        [
            "apply f_incr_interv2 ; intuition.",
            "VernacExtend",
            "f2bcad705dd8a98e466e2f417f54de9f7f2650d3"
        ],
        [
            "apply f_incr_interv2 ; intuition.",
            "VernacExtend",
            "f2bcad705dd8a98e466e2f417f54de9f7f2650d3"
        ],
        [
            "unfold comp ; unfold comp in Hyp.",
            "VernacExtend",
            "c3bfede0cdf7fe53c65e07532063fdfeb4ba6837"
        ],
        [
            "apply f_inj.",
            "VernacExtend",
            "3c3b55e3a494307f9d9df281ea2c0fedf17ac0d6"
        ],
        [
            "apply g_wf ; apply f_incr_interv2 ; intuition.",
            "VernacExtend",
            "cb40b8009733e8c17cabdd0d044252cfb6becd11"
        ],
        [
            "unfold id ; assumption.",
            "VernacExtend",
            "a856304a18249b4fa2a99f8072582529a97c8889"
        ],
        [
            "apply Hyp2 ; unfold id ; assumption.",
            "VernacExtend",
            "d9639b89018dfd338de70514bdc8eebe1d8f3720"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma IVT_interv_prelim0 : forall (x y:R) (P:R->bool) (N:nat), x < y -> x <= Dichotomy_ub x y P N <= y /\\ x <= Dichotomy_lb x y P N <= y.",
            "VernacStartTheoremProof",
            "41876650dab8ebe63c4968ae3e4346884df9973c"
        ],
        [
            "assert (Sublemma : forall x y lb ub, lb <= x <= ub /\\ lb <= y <= ub -> lb <= (x+y) / 2 <= ub).",
            "VernacExtend",
            "428a8620169606594cf71e0f4a47b51af55a2c34"
        ],
        [
            "intros x y lb ub Hyp.",
            "VernacExtend",
            "65dd340cc7fe81a53446b12c761e55672f521a69"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "intros x y P N x_lt_y.",
            "VernacExtend",
            "c4a39833951ac2e024ed0aada1d2da7bdb7c35bd"
        ],
        [
            "induction N.",
            "VernacExtend",
            "014c91061e9f52f369bba44af3bfd9be499036f5"
        ],
        [
            "simpl ; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case (P ((Dichotomy_lb x y P N + Dichotomy_ub x y P N) / 2)).",
            "VernacExtend",
            "45cc2913c2af18e7780fe5fc3d6ccc0d8074ce5f"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Sublemma ; intuition.",
            "VernacExtend",
            "5b3da5cc37d974f79fc660061803d879a5d91868"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Sublemma ; intuition.",
            "VernacExtend",
            "5b3da5cc37d974f79fc660061803d879a5d91868"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma IVT_interv_prelim1 : forall (x y x0:R) (D : R -> bool), x < y -> Un_cv (dicho_up x y D) x0 -> x <= x0 <= y.",
            "VernacStartTheoremProof",
            "07e693790ff53972aad3ec60191ea45106cf1a65"
        ],
        [
            "intros x y x0 D x_lt_y bnd.",
            "VernacExtend",
            "08be723b50861298601199b8049320f81c75a4d7"
        ],
        [
            "assert (Main : forall n, x <= dicho_up x y D n <= y).",
            "VernacExtend",
            "af4001ad354d40969fa147a73944c83305d6eb59"
        ],
        [
            "intro n.",
            "VernacExtend",
            "7b184e6f13215b0f6a04b4277e277a724a645d52"
        ],
        [
            "unfold dicho_up.",
            "VernacExtend",
            "ec4cb16335dd45062b611437ad1ed3c8e0651cc9"
        ],
        [
            "apply (proj1 (IVT_interv_prelim0 x y D n x_lt_y)).",
            "VernacExtend",
            "b5245d33f6e54bd3fa9daafc70aa46df2b3e1fc0"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_cv_lim with (Vn:=dicho_up x y D) (Un:=fun n => x).",
            "VernacExtend",
            "f0d0408ecc6543266de0e6a027a29e144b0c075a"
        ],
        [
            "intro n ; exact (proj1 (Main n)).",
            "VernacExtend",
            "bb0e86e895dcd5385cca627a099d524ecc2ec44c"
        ],
        [
            "unfold Un_cv ; intros ; exists 0%nat ; intros ; unfold R_dist ; replace (x -x) with 0 by field ; rewrite Rabs_R0 ; assumption.",
            "VernacExtend",
            "01e03550acf4db45cc81991871ddafa849113aff"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_cv_lim with (Un:=dicho_up x y D) (Vn:=fun n => y).",
            "VernacExtend",
            "45da9cf281793a7bca1fca9eb2eea1c6343c346e"
        ],
        [
            "intro n ; exact (proj2 (Main n)).",
            "VernacExtend",
            "6ed5e73339900b1ca16c3b15b0165021eb15b7bd"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Un_cv ; intros ; exists 0%nat ; intros ; unfold R_dist ; replace (y -y) with 0 by field ; rewrite Rabs_R0 ; assumption.",
            "VernacExtend",
            "b084aeb90757cd24f4cdc426fa9b9ff5aea49bb2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma IVT_interv : forall (f : R -> R) (x y : R), (forall a, x <= a <= y -> continuity_pt f a) -> x < y -> f x < 0 -> 0 < f y -> {z : R | x <= z <= y /\\ f z = 0}.",
            "VernacStartTheoremProof",
            "ece43941f71f59d5db7f7d8562e79b2a1930199d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (x <= y).",
            "VernacExtend",
            "e12cf4151d495165cfeb7d3de978ce8a0def43c7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "generalize (dicho_lb_cv x y (fun z:R => cond_positivity (f z)) H3).",
            "VernacExtend",
            "0b5e70ea329b0ba1c7f428ce329c90c67a43cb8f"
        ],
        [
            "generalize (dicho_up_cv x y (fun z:R => cond_positivity (f z)) H3).",
            "VernacExtend",
            "435b74a9ae10b8f4486d5d8223851e2821feb6d4"
        ],
        [
            "intros X X0.",
            "VernacExtend",
            "85e38ea6ce1a5df7a076253656d58da4db231b15"
        ],
        [
            "elim X; intros x0 p.",
            "VernacExtend",
            "5fc6c00cc2de4d4eb7014c52e09d014dd77ed3ad"
        ],
        [
            "elim X0; intros x1 p0.",
            "VernacExtend",
            "ee293f7678051509cc58eab8302c7c931186c027"
        ],
        [
            "assert (H4 := cv_dicho _ _ _ _ _ H3 p0 p).",
            "VernacExtend",
            "80b7d6771d87bca16d694c429d7bd242400ecdf2"
        ],
        [
            "rewrite H4 in p0.",
            "VernacExtend",
            "819e611699223dbbd2216aa26c348eae8efaa65b"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with (dicho_lb x y (fun z:R => cond_positivity (f z)) 0).",
            "VernacExtend",
            "be5c1aca34b6efd32abf1108ece1d191e15aac7e"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "apply growing_ineq.",
            "VernacExtend",
            "714b677d9b8de67abdaec4b69605474cf818896d"
        ],
        [
            "apply dicho_lb_growing; assumption.",
            "VernacExtend",
            "85fbbd87557610cb77a9c86f3ce5a52886c11c7a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_trans with (dicho_up x y (fun z:R => cond_positivity (f z)) 0).",
            "VernacExtend",
            "8e2d5462e31c19ca1eb2ed1fe0f8d717cffa09bd"
        ],
        [
            "apply decreasing_ineq.",
            "VernacExtend",
            "f70e88e40d0ff07d62a94e461b1dd4e8f9e856e0"
        ],
        [
            "apply dicho_up_decreasing; assumption.",
            "VernacExtend",
            "1edb1b795bef16ab8a05ef3898ec5f4f86665e45"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "2: left; assumption.",
            "VernacExtend",
            "74f1d0bf8e172d52dcfb6d36e7bf2497df1e42af"
        ],
        [
            "set (Vn := fun n:nat => dicho_lb x y (fun z:R => cond_positivity (f z)) n).",
            "VernacExtend",
            "53b99749f3fbbbe2784304f914fbfd0eaccebc16"
        ],
        [
            "set (Wn := fun n:nat => dicho_up x y (fun z:R => cond_positivity (f z)) n).",
            "VernacExtend",
            "81b111054f8f1024f30fe18187cb95dcb4798687"
        ],
        [
            "cut ((forall n:nat, f (Vn n) <= 0) -> f x0 <= 0).",
            "VernacExtend",
            "a1dea0df618ace53eaa6344993b910c8cf4b22cc"
        ],
        [
            "cut ((forall n:nat, 0 <= f (Wn n)) -> 0 <= f x0).",
            "VernacExtend",
            "7359d0d78330f3f07341eaddb03729d7bc956058"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (forall n:nat, f (Vn n) <= 0).",
            "VernacExtend",
            "f6fb3ec043b6dd1b3832b1a2244d0b32a593198e"
        ],
        [
            "cut (forall n:nat, 0 <= f (Wn n)).",
            "VernacExtend",
            "a34166762d19a67759939874482b28c923f31b8a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H9 := H6 H8).",
            "VernacExtend",
            "751caa1b1949beddf48c2c9e65f078511e3aa7ce"
        ],
        [
            "assert (H10 := H5 H7).",
            "VernacExtend",
            "9cff55f32581ea1c696531f0f9a06340a82d886d"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold Wn in |- *.",
            "VernacExtend",
            "5484c9f9f163d4152f79a42c70a9497175dbed5b"
        ],
        [
            "cut (forall z:R, cond_positivity z = true <-> 0 <= z).",
            "VernacExtend",
            "2915a5f89143bd3d627c40846ee75cfb0c7931fa"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H8 := dicho_up_car x y (fun z:R => cond_positivity (f z)) n).",
            "VernacExtend",
            "5e080d7dcb6d8afa9d3cd193bab5f49848d7d507"
        ],
        [
            "elim (H7 (f (dicho_up x y (fun z:R => cond_positivity (f z)) n))); intros.",
            "VernacExtend",
            "aa53a29edd1515ad2a3932db50461e65bc57fa9e"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "apply H8.",
            "VernacExtend",
            "2014720df0411c2963f20792fe424080d05f44aa"
        ],
        [
            "elim (H7 (f y)); intros.",
            "VernacExtend",
            "1228404ea7aa2f8919e59445ce6030a39c4f86fb"
        ],
        [
            "apply H12.",
            "VernacExtend",
            "5a745b26a30edb1cd58baf290f56d389ba5cf959"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold cond_positivity in |- *.",
            "VernacExtend",
            "f5b411afc0a5e4fcab47ee21bc146b77ba14a760"
        ],
        [
            "destruct (Rle_dec 0 z) as [|Hnotle].",
            "VernacExtend",
            "cf2816e4fd39f9d5f08373b304af6f742f88b0e3"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro; assumption.",
            "VernacExtend",
            "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
        ],
        [
            "intro; reflexivity.",
            "VernacExtend",
            "dc2d3bdaf5fe0de88334762a176f5b2d84487862"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro feqt;discriminate feqt.",
            "VernacExtend",
            "d93ce505ef755eb96a49389e26333d4d512fe332"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim Hnotle; assumption.",
            "VernacExtend",
            "3ad1442fd7222b403fae2196da7e68b3df4bdb45"
        ],
        [
            "unfold Vn in |- *.",
            "VernacExtend",
            "1dd0030463a130debb17b61468523e237c4d4b31"
        ],
        [
            "cut (forall z:R, cond_positivity z = false <-> z < 0).",
            "VernacExtend",
            "f975cf4b92ec51fda1a92cad1eb4e3584cd9598f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H8 := dicho_lb_car x y (fun z:R => cond_positivity (f z)) n).",
            "VernacExtend",
            "b03916d948d173d7a8230d8d2ae11fcc2fe6a523"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "elim (H7 (f (dicho_lb x y (fun z:R => cond_positivity (f z)) n))); intros.",
            "VernacExtend",
            "37855fa0c47aa0a1e0cafdc8d002ce0cd553d90d"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "apply H8.",
            "VernacExtend",
            "2014720df0411c2963f20792fe424080d05f44aa"
        ],
        [
            "elim (H7 (f x)); intros.",
            "VernacExtend",
            "9618fae7d42a5e4ede0f4dc68411cb039ec6427e"
        ],
        [
            "apply H12.",
            "VernacExtend",
            "5a745b26a30edb1cd58baf290f56d389ba5cf959"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold cond_positivity in |- *.",
            "VernacExtend",
            "f5b411afc0a5e4fcab47ee21bc146b77ba14a760"
        ],
        [
            "destruct (Rle_dec 0 z) as [Hle|].",
            "VernacExtend",
            "d778ef909035577ada2e1abadf0a09a9779e71bb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro feqt; discriminate feqt.",
            "VernacExtend",
            "d93ce505ef755eb96a49389e26333d4d512fe332"
        ],
        [
            "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle H7)).",
            "VernacExtend",
            "591eb022aa00abf7dc0dbb5384300d780a66412e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro; auto with real.",
            "VernacExtend",
            "b2ed16b62664ad0304e1f5d05697ba9f02acad03"
        ],
        [
            "intro; reflexivity.",
            "VernacExtend",
            "dc2d3bdaf5fe0de88334762a176f5b2d84487862"
        ],
        [
            "cut (Un_cv Wn x0).",
            "VernacExtend",
            "098e61430148344cf3de56dd80d43dfa97ccdafd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Temp : x <= x0 <= y).",
            "VernacExtend",
            "bdb4b05a912f50ae63472bf537f0736296555d41"
        ],
        [
            "apply IVT_interv_prelim1 with (D:=(fun z : R => cond_positivity (f z))) ; assumption.",
            "VernacExtend",
            "392415c3f11b31a71b000b2ea757a651438d71ad"
        ],
        [
            "assert (H7 := continuity_seq f Wn x0 (H x0 Temp) H5).",
            "VernacExtend",
            "be1722975d8d5727ddb4571f801bb156d748d3eb"
        ],
        [
            "destruct (total_order_T 0 (f x0)) as [[Hlt|<-]|Hgt].",
            "VernacExtend",
            "50cf822fbe440251d5d72db815975fbfc96b8248"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "unfold Un_cv in H7; unfold R_dist in H7.",
            "VernacExtend",
            "9776e854057e49ed840a26fd8cfcb77537d3c542"
        ],
        [
            "cut (0 < - f x0).",
            "VernacExtend",
            "3eb292ea41c2801d2cfbe3e8906f1f51815d11d4"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (H7 (- f x0) H8); intros.",
            "VernacExtend",
            "0b08d99f7ef5a48e907cd4c01f9e0cd00c7beca2"
        ],
        [
            "cut (x2 >= x2)%nat; [ intro | unfold ge in |- *; apply le_n ].",
            "VernacExtend",
            "9d5d47d11098e4e39b4a851b138a3472df417387"
        ],
        [
            "assert (H11 := H9 x2 H10).",
            "VernacExtend",
            "3689ebce046e1ce95f44d091185a16b5a3888bef"
        ],
        [
            "rewrite Rabs_right in H11.",
            "VernacExtend",
            "144e693152c8c0a16c30b04ac66155c2831223fd"
        ],
        [
            "pattern (- f x0) at 1 in H11; rewrite <- Rplus_0_r in H11.",
            "VernacExtend",
            "ed849f46fd10776f9808b4fd379edf7039bf4c65"
        ],
        [
            "unfold Rminus in H11; rewrite (Rplus_comm (f (Wn x2))) in H11.",
            "VernacExtend",
            "a9e73d5df964427c5fce04bf494e12ac13531f8c"
        ],
        [
            "assert (H12 := Rplus_lt_reg_l _ _ _ H11).",
            "VernacExtend",
            "365df9ca6409683824912eceaaa9abfff8aa9c19"
        ],
        [
            "assert (H13 := H6 x2).",
            "VernacExtend",
            "f304ea6ea59ab9edebd8b5b9b93fa8e0c1aafd01"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H13 H12)).",
            "VernacExtend",
            "c7a8e625b6517edad594eef9785aa45d5e63640a"
        ],
        [
            "apply Rle_ge; left; unfold Rminus in |- *; apply Rplus_le_lt_0_compat.",
            "VernacExtend",
            "fc320cd48c45288d24386e640e6c9dbb071e75e6"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "exact H8.",
            "VernacExtend",
            "125096764f05c2e6b59a11140e6c3ad0b07b1f9e"
        ],
        [
            "apply Ropp_0_gt_lt_contravar; assumption.",
            "VernacExtend",
            "44c1529c7f8ab9cf2edf01ae1727eaf3cc83d329"
        ],
        [
            "unfold Wn in |- *; assumption.",
            "VernacExtend",
            "f39383ef8f877fe307b6dc4a2ec08eacfdbc5d3a"
        ],
        [
            "cut (Un_cv Vn x0).",
            "VernacExtend",
            "e7cb789ec521f1c3fc632cf263e825b2f9731212"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (Temp : x <= x0 <= y).",
            "VernacExtend",
            "bdb4b05a912f50ae63472bf537f0736296555d41"
        ],
        [
            "apply IVT_interv_prelim1 with (D:=(fun z : R => cond_positivity (f z))) ; assumption.",
            "VernacExtend",
            "392415c3f11b31a71b000b2ea757a651438d71ad"
        ],
        [
            "assert (H7 := continuity_seq f Vn x0 (H x0 Temp) H5).",
            "VernacExtend",
            "c60423d987cb80a636bee63b08d647edad78e7af"
        ],
        [
            "destruct (total_order_T 0 (f x0)) as [[Hlt|Heq]|].",
            "VernacExtend",
            "605b3614786ce8b46d80d6e3bbbdd8a427d37a68"
        ],
        [
            "unfold Un_cv in H7; unfold R_dist in H7.",
            "VernacExtend",
            "9776e854057e49ed840a26fd8cfcb77537d3c542"
        ],
        [
            "elim (H7 (f x0) Hlt); intros.",
            "VernacExtend",
            "780778e990a1baba29ff50ce129aaeba3576a528"
        ],
        [
            "cut (x2 >= x2)%nat; [ intro | unfold ge; apply le_n ].",
            "VernacExtend",
            "9d5d47d11098e4e39b4a851b138a3472df417387"
        ],
        [
            "assert (H10 := H8 x2 H9).",
            "VernacExtend",
            "d5500d58f3d647a6ba8a2cd57d954add11bb0a0c"
        ],
        [
            "rewrite Rabs_left in H10.",
            "VernacExtend",
            "14240077d5d0707ff1832e8e7663c78fc55bc673"
        ],
        [
            "pattern (f x0) at 2 in H10; rewrite <- Rplus_0_r in H10.",
            "VernacExtend",
            "d2423523019853efef8b697eaf583c1db9c9175a"
        ],
        [
            "rewrite Ropp_minus_distr' in H10.",
            "VernacExtend",
            "4e1b9bc4e3a3f1a1969bfa40086e2bfda02081bc"
        ],
        [
            "unfold Rminus in H10.",
            "VernacExtend",
            "77311f9fa35fb02c5b6ec220e504567453252063"
        ],
        [
            "assert (H11 := Rplus_lt_reg_l _ _ _ H10).",
            "VernacExtend",
            "80861435817a891c0537fa9eda348a991ef75e72"
        ],
        [
            "assert (H12 := H6 x2).",
            "VernacExtend",
            "d06ebb336971dc23196f3c973a47ed6391571067"
        ],
        [
            "cut (0 < f (Vn x2)).",
            "VernacExtend",
            "48786e720162926cc888da836a3da01ca2d3937a"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H13 H12)).",
            "VernacExtend",
            "abef24b80847029d3dcda2f5362d7d67e8b85af9"
        ],
        [
            "rewrite <- (Ropp_involutive (f (Vn x2))).",
            "VernacExtend",
            "3521ec98856061d4b6093f13d499984823eddaf9"
        ],
        [
            "apply Ropp_0_gt_lt_contravar; assumption.",
            "VernacExtend",
            "44c1529c7f8ab9cf2edf01ae1727eaf3cc83d329"
        ],
        [
            "apply Rplus_lt_reg_l with (f x0 - f (Vn x2)).",
            "VernacExtend",
            "605c5f184f936589733cc93384edfab06824e444"
        ],
        [
            "rewrite Rplus_0_r; replace (f x0 - f (Vn x2) + (f (Vn x2) - f x0)) with 0; [ unfold Rminus in |- *; apply Rplus_lt_le_0_compat | ring ].",
            "VernacExtend",
            "7985f4d41da9c7aa64199a4394f48fab964da766"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Ropp_0_ge_le_contravar; apply Rle_ge; apply H6.",
            "VernacExtend",
            "4bc3a81b9e77ee90d7c1ecc7ff04aa967662684f"
        ],
        [
            "right; rewrite <- Heq; reflexivity.",
            "VernacExtend",
            "5aecc2db2820489ee038a8a2570c605fd760dd6c"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "unfold Vn in |- *; assumption.",
            "VernacExtend",
            "e2dc6aa16e8bac10fa3f23df119129d60b493bd0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac case_le H := let t := type of H in let h' := fresh in match t with ?x <= ?y => case (total_order_T x y); [intros h'; case h'; clear h' | intros h'; clear -H h'; elimtype False; lra ] end.",
            "VernacExtend",
            "2ea3e10a2ce50765b79fd0a14c9356ceab9c4307"
        ],
        [
            "Lemma f_interv_is_interv : forall (f:R->R) (lb ub y:R), lb < ub -> f lb <= y <= f ub -> (forall x, lb <= x <= ub -> continuity_pt f x) -> {x | lb <= x <= ub /\\ f x = y}.",
            "VernacStartTheoremProof",
            "7b5508a7701daa03ff927a731daa2ed6065641f2"
        ],
        [
            "intros f lb ub y lb_lt_ub y_encad f_cont_interv.",
            "VernacExtend",
            "b88122370fcf051763f0f3424771df91c9d66601"
        ],
        [
            "case y_encad ; intro y_encad1.",
            "VernacExtend",
            "8f2c7b23d1d6e22714e806cb93a3d6fe0e49c90a"
        ],
        [
            "case_le y_encad1 ; intros y_encad2 y_encad3 ; case_le y_encad3.",
            "VernacExtend",
            "14d7c744b5980dd1e2312cffcf103e0f4c81a78f"
        ],
        [
            "intro y_encad4.",
            "VernacExtend",
            "c16c79af7e7f688e0acc17c6bb23ee544b95a0aa"
        ],
        [
            "clear y_encad y_encad1 y_encad3.",
            "VernacExtend",
            "6ef785b7cec0c41f70ecec8edea0cfa19f05f325"
        ],
        [
            "assert (Cont : forall a : R, lb <= a <= ub -> continuity_pt (fun x => f x - y) a).",
            "VernacExtend",
            "627efa7087bcb28e15735a703ca748853ddde7e2"
        ],
        [
            "intros a a_encad.",
            "VernacExtend",
            "1a4733bc609ab5a6dcdcac39c9488d201525ee30"
        ],
        [
            "unfold continuity_pt, continue_in, limit1_in, limit_in ; simpl ; unfold R_dist.",
            "VernacExtend",
            "1bad2f7c5aa020d921ac684b7ba8df3226fba8e4"
        ],
        [
            "intros eps eps_pos.",
            "VernacExtend",
            "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
        ],
        [
            "elim (f_cont_interv a a_encad eps eps_pos).",
            "VernacExtend",
            "f4b3a17b5d91cb314f67fb60207dfa4fff66618d"
        ],
        [
            "intros alpha alpha_pos.",
            "VernacExtend",
            "41e934a2c998d11b748d265eac97cc19e5cd181f"
        ],
        [
            "destruct alpha_pos as (alpha_pos,Temp).",
            "VernacExtend",
            "5cbb94478ab2cb9a442c0a5b8732c52da58d447d"
        ],
        [
            "exists alpha.",
            "VernacExtend",
            "4db99336d59a6e68b1148a330e52b395313d97e7"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros x x_cond.",
            "VernacExtend",
            "518049a0b44b5ba2a994e8186cc0b4a54b01b2ff"
        ],
        [
            "replace (f x - y - (f a - y)) with (f x - f a) by field.",
            "VernacExtend",
            "5d2b578c7cbabcbfb16312e4ebdbabf2c692fd38"
        ],
        [
            "exact (Temp x x_cond).",
            "VernacExtend",
            "c1a21b20423b8259ad76db04437151e1fe579706"
        ],
        [
            "assert (H1 : (fun x : R => f x - y) lb < 0).",
            "VernacExtend",
            "32108719556e16884d0d0b9a451f1842be02921b"
        ],
        [
            "apply Rlt_minus.",
            "VernacExtend",
            "9fee20f16a41f319061ad24c67e73ac9f8090990"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H2 : 0 < (fun x : R => f x - y) ub).",
            "VernacExtend",
            "bf10bbf75d54483740cb6c883520a2ae540df212"
        ],
        [
            "apply Rgt_minus ; assumption.",
            "VernacExtend",
            "3812192e62acc9941a76d58a727122b68e6f5f0a"
        ],
        [
            "destruct (IVT_interv (fun x => f x - y) lb ub Cont lb_lt_ub H1 H2) as (x,Hx).",
            "VernacExtend",
            "bfa4045aee6cf2d7e7def2f419c11c04ef807369"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "destruct Hx as (Hyp,Result).",
            "VernacExtend",
            "d41e3d8e3d42cf44ef9bdb9ba8cfc0a7c67f1ac5"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intro H ; exists ub ; intuition.",
            "VernacExtend",
            "a389ec29d67ccefa03cc80ffd9773e6131888121"
        ],
        [
            "intro H ; exists lb ; intuition.",
            "VernacExtend",
            "e12df610a454c13581ac1abb3767c608accaa4e2"
        ],
        [
            "intro H ; exists ub ; intuition.",
            "VernacExtend",
            "a389ec29d67ccefa03cc80ffd9773e6131888121"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_recip_prelim : forall (f g:R->R) (lb ub : R) (Pr1:lb < ub), (forall x y, lb <= x -> x < y -> y <= ub -> f x < f y) -> (forall x, lb <= x <= ub -> (comp g f) x = id x) -> (forall a, lb <= a <= ub -> continuity_pt f a) -> forall b, f lb < b < f ub -> continuity_pt g b.",
            "VernacStartTheoremProof",
            "6531b4a7bca51b0af7b96d1303d7142c8abb3809"
        ],
        [
            "assert (Sublemma : forall x y z, Rmax x y < z <-> x < z /\\ y < z).",
            "VernacExtend",
            "75527c5d5b1a0e593a4422e5edef7bb313110584"
        ],
        [
            "intros x y z.",
            "VernacExtend",
            "8357c7ce661033f932c65582aab008de3b5d8530"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold Rmax.",
            "VernacExtend",
            "b367cb66c5064d8e38d17f567a1ed22797080b57"
        ],
        [
            "case (Rle_dec x y) ; intros Hyp Hyp2.",
            "VernacExtend",
            "a05b64e9900efc8edb45b5839b688e3e93cfdd03"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_lt_trans with (r2:=y) ; assumption.",
            "VernacExtend",
            "3e64f88dc60a0e644e18dbe3fc983f71e95f3765"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_trans with (r2:=x).",
            "VernacExtend",
            "843079e9cd7d49dbf7fae1dc382766abcfdc9961"
        ],
        [
            "assert (Temp : forall x y, ~ x <= y -> x > y).",
            "VernacExtend",
            "63e214e8ddb4776ef0d75cf635231fee7afc4398"
        ],
        [
            "intros m n Hypmn.",
            "VernacExtend",
            "5989a74ec09657d267d2dbd404a25fb254d7fc6b"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Temp ; clear Temp ; assumption.",
            "VernacExtend",
            "2f05613882a29567de4d2fc7a409fc4271b34e09"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros Hyp.",
            "VernacExtend",
            "ac762b9d35035d7195245ae636fbd3fc965fdfd6"
        ],
        [
            "unfold Rmax.",
            "VernacExtend",
            "b367cb66c5064d8e38d17f567a1ed22797080b57"
        ],
        [
            "case (Rle_dec x y).",
            "VernacExtend",
            "fc434b0b2d2dddaed55d15cb946df282361429cc"
        ],
        [
            "intro ; exact (proj2 Hyp).",
            "VernacExtend",
            "a55fd0180e13c4aec33c58e8c94dfc6b893fe07b"
        ],
        [
            "intro ; exact (proj1 Hyp).",
            "VernacExtend",
            "52dd4e6c4175e55cbb97b4146fae533149029285"
        ],
        [
            "assert (Sublemma2 : forall x y z, Rmin x y > z <-> x > z /\\ y > z).",
            "VernacExtend",
            "9a96b76ba126fb9abca06dfe2760363c299551ac"
        ],
        [
            "intros x y z.",
            "VernacExtend",
            "8357c7ce661033f932c65582aab008de3b5d8530"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold Rmin.",
            "VernacExtend",
            "ec4de2dbd1c783154b87decb3c93990283dcef6b"
        ],
        [
            "case (Rle_dec x y) ; intros Hyp Hyp2.",
            "VernacExtend",
            "a05b64e9900efc8edb45b5839b688e3e93cfdd03"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_le_trans with (r2:=x) ; intuition.",
            "VernacExtend",
            "3805dcf16f095ec35767df8ebf53583be1630033"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_trans with (r2:=y).",
            "VernacExtend",
            "015bae500e1ea9a6a57c582596174896a7acefa7"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (Temp : forall x y, ~ x <= y -> x > y).",
            "VernacExtend",
            "63e214e8ddb4776ef0d75cf635231fee7afc4398"
        ],
        [
            "intros m n Hypmn.",
            "VernacExtend",
            "5989a74ec09657d267d2dbd404a25fb254d7fc6b"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Temp ; clear Temp ; assumption.",
            "VernacExtend",
            "2f05613882a29567de4d2fc7a409fc4271b34e09"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros Hyp.",
            "VernacExtend",
            "ac762b9d35035d7195245ae636fbd3fc965fdfd6"
        ],
        [
            "unfold Rmin.",
            "VernacExtend",
            "ec4de2dbd1c783154b87decb3c93990283dcef6b"
        ],
        [
            "case (Rle_dec x y).",
            "VernacExtend",
            "fc434b0b2d2dddaed55d15cb946df282361429cc"
        ],
        [
            "intro ; exact (proj1 Hyp).",
            "VernacExtend",
            "52dd4e6c4175e55cbb97b4146fae533149029285"
        ],
        [
            "intro ; exact (proj2 Hyp).",
            "VernacExtend",
            "a55fd0180e13c4aec33c58e8c94dfc6b893fe07b"
        ],
        [
            "assert (Sublemma3 : forall x y, x <= y /\\ x <> y -> x < y).",
            "VernacExtend",
            "6b8b76c49a11463445d70504f2488d4f2a5e90ef"
        ],
        [
            "intros m n Hyp.",
            "VernacExtend",
            "a974d9132fc6f305c844ab1c5935d3bc84e91ab7"
        ],
        [
            "unfold Rle in Hyp.",
            "VernacExtend",
            "9a3f070344de95b54459179ecd5f2f94ce484705"
        ],
        [
            "destruct Hyp as (Hyp1,Hyp2).",
            "VernacExtend",
            "586489f4fbcfdca2dc86bb1a3b7e5103bdb25436"
        ],
        [
            "case Hyp1.",
            "VernacExtend",
            "6e5715b05c211599f5dcb3a3a5726e26df9a0c6a"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intro Hfalse ; apply False_ind ; apply Hyp2 ; exact Hfalse.",
            "VernacExtend",
            "971674109edbdb0dc6f35d80f99b8be86deeb2c5"
        ],
        [
            "intros f g lb ub lb_lt_ub f_incr_interv f_eq_g f_cont_interv b b_encad.",
            "VernacExtend",
            "31e99bcce6f889d74f762b1fb3ccae49f275a921"
        ],
        [
            "assert (f_incr_interv2 : forall x y, lb <= x -> x <= y -> y <= ub -> f x <= f y).",
            "VernacExtend",
            "70697556fd92469b1cf5f193e1cfa2a70cedaa2b"
        ],
        [
            "intros m n cond1 cond2 cond3.",
            "VernacExtend",
            "e091a125c67f06b2925b48e7ec165e121cfccc4d"
        ],
        [
            "case cond2.",
            "VernacExtend",
            "a46e704be8619c26ab1727bde0fa41ffae92fe46"
        ],
        [
            "intro cond.",
            "VernacExtend",
            "03e96f05b3257e2ad02e5c145a55735f1e6335f3"
        ],
        [
            "apply Rlt_le ; apply f_incr_interv ; assumption.",
            "VernacExtend",
            "b785848d91fbbd63c0e5f627e6baec9d7928ce2e"
        ],
        [
            "intro cond ; right ; rewrite cond ; reflexivity.",
            "VernacExtend",
            "e3aaab183baf828ae4945d7533469f70cc7bcc50"
        ],
        [
            "unfold continuity_pt, continue_in, limit1_in, limit_in ; intros eps eps_pos.",
            "VernacExtend",
            "d052562346316a7a5fd7393cb632a22d1a6236d9"
        ],
        [
            "unfold dist ; simpl ; unfold R_dist.",
            "VernacExtend",
            "a277ac1c1c88c16a120e4fa61a63c7962fc0d7d6"
        ],
        [
            "assert (b_encad_e : f lb <= b <= f ub) by intuition.",
            "VernacExtend",
            "962ac61b1e14e05996cc93c74a6c0e7738fde713"
        ],
        [
            "elim (f_interv_is_interv f lb ub b lb_lt_ub b_encad_e f_cont_interv) ; intros x Temp.",
            "VernacExtend",
            "718c7733f3f6972b6dff70a5303f45a8937caa56"
        ],
        [
            "destruct Temp as (x_encad,f_x_b).",
            "VernacExtend",
            "e89a90182c4f3a3050bfba19484e2a7f9b6c0fea"
        ],
        [
            "assert (lb_lt_x : lb < x).",
            "VernacExtend",
            "9f120dd900e49437379ce14a35601cf56abb2179"
        ],
        [
            "assert (Temp : x <> lb).",
            "VernacExtend",
            "b79911152b6cece9acdfa3033f1c16f797279057"
        ],
        [
            "intro Hfalse.",
            "VernacExtend",
            "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
        ],
        [
            "assert (Temp' : b = f lb).",
            "VernacExtend",
            "49eccb2384cc1633ee4b369402f1a74bc1db0065"
        ],
        [
            "rewrite <- f_x_b ; rewrite Hfalse ; reflexivity.",
            "VernacExtend",
            "3036888a010faea6384247bba42841b621af718f"
        ],
        [
            "assert (Temp'' : b <> f lb).",
            "VernacExtend",
            "6dd99364fa784093ff76f338ebff5bde8f90a106"
        ],
        [
            "apply Rgt_not_eq ; exact (proj1 b_encad).",
            "VernacExtend",
            "f5db10255b190c59c68098e635f3a33cf13821af"
        ],
        [
            "apply Temp'' ; exact Temp'.",
            "VernacExtend",
            "67ea1714a91eaaea3a899dd6127719c36c43035f"
        ],
        [
            "apply Sublemma3.",
            "VernacExtend",
            "858e7dab989966321e7be26669ba436b920b7a16"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact (proj1 x_encad).",
            "VernacExtend",
            "820b80143dc9105ffd67234df6d4df0f04280e37"
        ],
        [
            "assert (Temp2 : forall x y:R, x <> y <-> y <> x).",
            "VernacExtend",
            "822c71c70970be24d410e073f4a4dd04b7a81962"
        ],
        [
            "intros m n.",
            "VernacExtend",
            "18665e11771a439415aeac3f0ced42360e32c961"
        ],
        [
            "split ; intuition.",
            "VernacExtend",
            "ad92f41c7c6120efbfc528c4c895eac1600e6297"
        ],
        [
            "rewrite Temp2 ; assumption.",
            "VernacExtend",
            "094ed3c023ca0e01824059bf8a9bc3574b66df8c"
        ],
        [
            "assert (x_lt_ub : x < ub).",
            "VernacExtend",
            "1b524eed6ca57de9978c3bcf3f9911b3192bc399"
        ],
        [
            "assert (Temp : x <> ub).",
            "VernacExtend",
            "2e2a72726f9ea767a0227ba47f2dedd9bbd9c8d0"
        ],
        [
            "intro Hfalse.",
            "VernacExtend",
            "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
        ],
        [
            "assert (Temp' : b = f ub).",
            "VernacExtend",
            "3adb790eeff7c3734315eb09948449014363feea"
        ],
        [
            "rewrite <- f_x_b ; rewrite Hfalse ; reflexivity.",
            "VernacExtend",
            "3036888a010faea6384247bba42841b621af718f"
        ],
        [
            "assert (Temp'' : b <> f ub).",
            "VernacExtend",
            "36ba5da606a64f748f26045e67a1eb4646ae468b"
        ],
        [
            "apply Rlt_not_eq ; exact (proj2 b_encad).",
            "VernacExtend",
            "0b5e592ba0160c29531e631835e44fd6214b2f86"
        ],
        [
            "apply Temp'' ; exact Temp'.",
            "VernacExtend",
            "67ea1714a91eaaea3a899dd6127719c36c43035f"
        ],
        [
            "apply Sublemma3.",
            "VernacExtend",
            "858e7dab989966321e7be26669ba436b920b7a16"
        ],
        [
            "split ; [exact (proj2 x_encad) | assumption].",
            "VernacExtend",
            "606560c464a22f3ae8f43d98edf91c3b702fc3c6"
        ],
        [
            "pose (x1 := Rmax (x - eps) lb).",
            "VernacExtend",
            "20b9fdb865c96e8d42b20498b0e2b920bb9e31ef"
        ],
        [
            "pose (x2 := Rmin (x + eps) ub).",
            "VernacExtend",
            "46b6e1371b94dcdef93f8b94326b306690e5ccb7"
        ],
        [
            "assert (Hx1 : x1 = Rmax (x - eps) lb) by intuition.",
            "VernacExtend",
            "9c4e2a9304cd123dd403f74927ac396610ff15fa"
        ],
        [
            "assert (Hx2 : x2 = Rmin (x + eps) ub) by intuition.",
            "VernacExtend",
            "ce8cbb15d93ff632ecde1305c8a63406b9e612f7"
        ],
        [
            "assert (x1_encad : lb <= x1 <= ub).",
            "VernacExtend",
            "72a393f4dc38422d1bbe21eb8b55dfafb7d5e15b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply RmaxLess2.",
            "VernacExtend",
            "4331c5f9632a7c11206a6e1280e188795cebf73b"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "rewrite Hx1.",
            "VernacExtend",
            "135544c89bce8a91175751ef44480f0b7783d9a2"
        ],
        [
            "rewrite Sublemma.",
            "VernacExtend",
            "e21f21c0e112c405d877998d2d6497567f2132b4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_trans with (r2:=x) ; lra.",
            "VernacExtend",
            "6c7f18c76f99c749a63c71ccd2aab67bcf28f051"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (x2_encad : lb <= x2 <= ub).",
            "VernacExtend",
            "8da7f254b2e96880a567abb08b37e97e83594e37"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le ; rewrite Hx2 ; apply Rgt_lt ; rewrite Sublemma2.",
            "VernacExtend",
            "a2b3b3d3a462387353b78dfa067d1f63415c00a5"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rgt_trans with (r2:=x) ; lra.",
            "VernacExtend",
            "7f43bbd9e870b5642a049093f636319b5ab9d78b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "assert (x_lt_x2 : x < x2).",
            "VernacExtend",
            "259b4bd7c43aa20d781b04025cc17b6e986c2d6f"
        ],
        [
            "rewrite Hx2.",
            "VernacExtend",
            "762fa2d49508177b00d0e4ad5a9c143b424050e0"
        ],
        [
            "apply Rgt_lt.",
            "VernacExtend",
            "9a26c3ea98ad1397e4a20df0b0490f9aec8914bc"
        ],
        [
            "rewrite Sublemma2.",
            "VernacExtend",
            "8a7acbe3d396b40fcecb77cff95e3f1c76d92dc9"
        ],
        [
            "split ; lra.",
            "VernacExtend",
            "8629afba61b2f69849eaa203df0224924aa1aa1d"
        ],
        [
            "assert (x1_lt_x : x1 < x).",
            "VernacExtend",
            "fc356bf8ca201ec6c3a19da0fdea41cf1f754de2"
        ],
        [
            "rewrite Hx1.",
            "VernacExtend",
            "135544c89bce8a91175751ef44480f0b7783d9a2"
        ],
        [
            "rewrite Sublemma.",
            "VernacExtend",
            "e21f21c0e112c405d877998d2d6497567f2132b4"
        ],
        [
            "split ; lra.",
            "VernacExtend",
            "8629afba61b2f69849eaa203df0224924aa1aa1d"
        ],
        [
            "exists (Rmin (f x - f x1) (f x2 - f x)).",
            "VernacExtend",
            "faf9616a300b713c86d39432594b081e69f1a904"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmin_pos ; apply Rgt_minus.",
            "VernacExtend",
            "c2ed7f6ddd8677c386663c45b06c431b24ebb692"
        ],
        [
            "apply f_incr_interv ; [apply RmaxLess2 | | ] ; lra.",
            "VernacExtend",
            "e1d09aa95b683bd35d8e5173707512e8cef1e460"
        ],
        [
            "apply f_incr_interv ; intuition.",
            "VernacExtend",
            "1dba5cba347cc0317c8b8408429551bf62401151"
        ],
        [
            "intros y Temp.",
            "VernacExtend",
            "9eba6f2f698407b792de56c4ae683452fbb1c32a"
        ],
        [
            "destruct Temp as (_,y_cond).",
            "VernacExtend",
            "531fb7456fc9517a2f700969291c7e27734241c9"
        ],
        [
            "rewrite <- f_x_b in y_cond.",
            "VernacExtend",
            "7e100e3f2700b1fe0ef4e64a681777f89282d5c2"
        ],
        [
            "assert (Temp : forall x y d1 d2, d1 > 0 -> d2 > 0 -> Rabs (y - x) < Rmin d1 d2 -> x - d1 <= y <= x + d2).",
            "VernacExtend",
            "0e6a4b49a19174c2ebc41517bb29d580a0648fd9"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assert (H10 : forall x y z, x - y <= z -> x - z <= y).",
            "VernacExtend",
            "562b45e933882ff6795fb1193b458af487a1f345"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "apply H10.",
            "VernacExtend",
            "169c3dd7a02593ce4f62696429eb3c1035f98388"
        ],
        [
            "apply Rle_trans with (r2:=Rabs (y0 - x0)).",
            "VernacExtend",
            "3a462041ca97e98aac5f1f876a74703d6046b481"
        ],
        [
            "replace (Rabs (y0 - x0)) with (Rabs (x0 - y0)).",
            "VernacExtend",
            "9da2127fdfadc811e36ba7f9a3e2995508f31f77"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "rewrite <- Rabs_Ropp.",
            "VernacExtend",
            "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
        ],
        [
            "unfold Rminus ; rewrite Ropp_plus_distr.",
            "VernacExtend",
            "eabd1758a4abf3fc40fdd8bfc458e17ee79fd8f7"
        ],
        [
            "rewrite Ropp_involutive.",
            "VernacExtend",
            "ba0ab440a50f656f08837503f0228b68c9acdf87"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Rle_trans with (r2:= Rmin d1 d2).",
            "VernacExtend",
            "c5b71f622575afb498df71abdbdeb18a1f92432d"
        ],
        [
            "apply Rlt_le ; assumption.",
            "VernacExtend",
            "6ea46b5e4ad6d15cd718025b7aa100abf346a511"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "assert (H10 : forall x y z, x - y <= z -> x <= y + z).",
            "VernacExtend",
            "1fa1a41bbc20e7abae488cb1cb41e3d880baeae4"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "apply H10.",
            "VernacExtend",
            "169c3dd7a02593ce4f62696429eb3c1035f98388"
        ],
        [
            "apply Rle_trans with (r2:=Rabs (y0 - x0)).",
            "VernacExtend",
            "3a462041ca97e98aac5f1f876a74703d6046b481"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply Rle_trans with (r2:= Rmin d1 d2).",
            "VernacExtend",
            "c5b71f622575afb498df71abdbdeb18a1f92432d"
        ],
        [
            "apply Rlt_le ; assumption.",
            "VernacExtend",
            "6ea46b5e4ad6d15cd718025b7aa100abf346a511"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "assert (Temp' := Temp (f x) y (f x - f x1) (f x2 - f x)).",
            "VernacExtend",
            "f72e758b54b176d6bb00ff7a896545149870d3b3"
        ],
        [
            "replace (f x - (f x - f x1)) with (f x1) in Temp' by field.",
            "VernacExtend",
            "86b34afad5fa15cb0a58cf95573c94c48d1a0d60"
        ],
        [
            "replace (f x + (f x2 - f x)) with (f x2) in Temp' by field.",
            "VernacExtend",
            "56651836fa25e9f283e558ee7bb4f64cd12b1213"
        ],
        [
            "assert (T : f x - f x1 > 0).",
            "VernacExtend",
            "7a887b60897f5b61d3cffad9203133f7c5b4cc19"
        ],
        [
            "apply Rgt_minus.",
            "VernacExtend",
            "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
        ],
        [
            "apply f_incr_interv ; intuition.",
            "VernacExtend",
            "1dba5cba347cc0317c8b8408429551bf62401151"
        ],
        [
            "assert (T' : f x2 - f x > 0).",
            "VernacExtend",
            "dc02f6f460b6e3a12852419889ec6d4046595342"
        ],
        [
            "apply Rgt_minus.",
            "VernacExtend",
            "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
        ],
        [
            "apply f_incr_interv ; intuition.",
            "VernacExtend",
            "1dba5cba347cc0317c8b8408429551bf62401151"
        ],
        [
            "assert (Main := Temp' T T' y_cond).",
            "VernacExtend",
            "781a37c940e8f91d9d35f7aec20c7f798f2d8edd"
        ],
        [
            "clear Temp Temp' T T'.",
            "VernacExtend",
            "ba82b986536af885bccf7f378abeb2cda8ed13a5"
        ],
        [
            "assert (x1_lt_x2 : x1 < x2).",
            "VernacExtend",
            "7dadbe2f8136406beb38ea217e42a44f76504968"
        ],
        [
            "apply Rlt_trans with (r2:=x) ; assumption.",
            "VernacExtend",
            "894687abde5c544123b339f2d52c76fb4d6e196a"
        ],
        [
            "assert (f_cont_myinterv : forall a : R, x1 <= a <= x2 -> continuity_pt f a).",
            "VernacExtend",
            "d22006c642fd9d905ba70a91d6dca0356595e14c"
        ],
        [
            "intros ; apply f_cont_interv ; split.",
            "VernacExtend",
            "dc8c4854d43e2b7bae99028e4e44804977270f58"
        ],
        [
            "apply Rle_trans with (r2 := x1) ; intuition.",
            "VernacExtend",
            "8508efe327c2b46fb069e94d10be3b757ab78459"
        ],
        [
            "apply Rle_trans with (r2 := x2) ; intuition.",
            "VernacExtend",
            "9346aa70d6269d4821a3896b203f20460ef2d741"
        ],
        [
            "elim (f_interv_is_interv f x1 x2 y x1_lt_x2 Main f_cont_myinterv) ; intros x' Temp.",
            "VernacExtend",
            "12f7d9fd95a8f28aa1ce9a507187523386b877e5"
        ],
        [
            "destruct Temp as (x'_encad,f_x'_y).",
            "VernacExtend",
            "f5a9fec502bb5c1cbf5f44d2dbb39b2d15df373d"
        ],
        [
            "rewrite <- f_x_b ; rewrite <- f_x'_y.",
            "VernacExtend",
            "7160ec4b191c0576f8ac54d356b47d0753a53f62"
        ],
        [
            "unfold comp in f_eq_g.",
            "VernacExtend",
            "13cbab829d8b61a984818bf4d32c40368f7b68c0"
        ],
        [
            "rewrite f_eq_g.",
            "VernacExtend",
            "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
        ],
        [
            "rewrite f_eq_g.",
            "VernacExtend",
            "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
        ],
        [
            "unfold id.",
            "VernacExtend",
            "74f2cf047820ccd7f0d1848c69c9fbf8399a251a"
        ],
        [
            "assert (x'_encad2 : x - eps <= x' <= x + eps).",
            "VernacExtend",
            "06ba6843226156eff695dab20c44f27528f8accc"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with (r2:=x1) ; [ apply RmaxLess1|] ; intuition.",
            "VernacExtend",
            "c09192a0fea8eed4c8e181e9aa0507d355e095b9"
        ],
        [
            "apply Rle_trans with (r2:=x2) ; [ | apply Rmin_l] ; intuition.",
            "VernacExtend",
            "98b71ee16efcda8749193e983bfa3266835b98c6"
        ],
        [
            "assert (x1_lt_x' : x1 < x').",
            "VernacExtend",
            "daca5723a506f1ae79bf9be5856e1c72f1c41bae"
        ],
        [
            "apply Sublemma3.",
            "VernacExtend",
            "858e7dab989966321e7be26669ba436b920b7a16"
        ],
        [
            "assert (x1_neq_x' : x1 <> x').",
            "VernacExtend",
            "5d6a00ad5ac251eb0477862fc9d4c3f443c5c9ec"
        ],
        [
            "intro Hfalse.",
            "VernacExtend",
            "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
        ],
        [
            "rewrite Hfalse, f_x'_y in y_cond.",
            "VernacExtend",
            "ce08a0f424c61df194f040a96be9adae035b3f8e"
        ],
        [
            "assert (Hf : Rabs (y - f x) < f x - y).",
            "VernacExtend",
            "288ab70145441e4adaf77175a5966575ca2b9e86"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rmin (f x - y) (f x2 - f x)).",
            "VernacExtend",
            "176ed501964c4285367ed62e0e25025c8a8583d7"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "assert(Hfin : f x - y < f x - y).",
            "VernacExtend",
            "6bcf0127842e0133cdf206f8e908fc6d2a70c0e0"
        ],
        [
            "apply Rle_lt_trans with (r2:=Rabs (y - f x)).",
            "VernacExtend",
            "cdc5ff694857e2aa75aa82650ad3a959aa37d6e0"
        ],
        [
            "replace (Rabs (y - f x)) with (Rabs (f x - y)).",
            "VernacExtend",
            "d945f71f289e9dc7b84de3a7bc4a8c7f2ee0bf5e"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "rewrite <- Rabs_Ropp.",
            "VernacExtend",
            "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
        ],
        [
            "replace (- (f x - y)) with (y - f x) by field ; reflexivity.",
            "VernacExtend",
            "31f7b0deedcd49a6d9bbcbd0ea89c4d9db107094"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "apply (Rlt_irrefl (f x - y)) ; assumption.",
            "VernacExtend",
            "cae2122bdf2e83910bf463d421a317922d0d57fe"
        ],
        [
            "split ; intuition.",
            "VernacExtend",
            "ad92f41c7c6120efbfc528c4c895eac1600e6297"
        ],
        [
            "assert (x'_lb : x - eps < x').",
            "VernacExtend",
            "a77beca84e57b968af0be54cc0417337be569413"
        ],
        [
            "apply Sublemma3.",
            "VernacExtend",
            "858e7dab989966321e7be26669ba436b920b7a16"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Rlt_not_eq.",
            "VernacExtend",
            "4d888fdf05ab3816c2e650b03b478096db638cf5"
        ],
        [
            "apply Rle_lt_trans with (r2:=x1) ; [ apply RmaxLess1|] ; intuition.",
            "VernacExtend",
            "cfb9a4ffe53ef9675e26b83c0945e5e7c73486fc"
        ],
        [
            "assert (x'_lt_x2 : x' < x2).",
            "VernacExtend",
            "b09ac04cc511b76070c4f21e938bbd3a41d6f4c3"
        ],
        [
            "apply Sublemma3.",
            "VernacExtend",
            "858e7dab989966321e7be26669ba436b920b7a16"
        ],
        [
            "assert (x1_neq_x' : x' <> x2).",
            "VernacExtend",
            "4309ee3af9ad03505953fb1a5a4714b864a2559f"
        ],
        [
            "intro Hfalse.",
            "VernacExtend",
            "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
        ],
        [
            "rewrite <- Hfalse, f_x'_y in y_cond.",
            "VernacExtend",
            "907058293ae8a59b766a10e2de6a3288fc7d78e6"
        ],
        [
            "assert (Hf : Rabs (y - f x) < y - f x).",
            "VernacExtend",
            "5d018f569532e646be33da11a68dab2d0d6d4019"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rmin (f x - f x1) (y - f x)).",
            "VernacExtend",
            "3e0d7222c5bb2b549f54fd55d1dbb4b9e82e6569"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "assert(Hfin : y - f x < y - f x).",
            "VernacExtend",
            "88b23f93c700955a2308c776fbf49b50e183d65b"
        ],
        [
            "apply Rle_lt_trans with (r2:=Rabs (y - f x)).",
            "VernacExtend",
            "cdc5ff694857e2aa75aa82650ad3a959aa37d6e0"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "apply (Rlt_irrefl (y - f x)) ; assumption.",
            "VernacExtend",
            "99f5435ebac2632efa269ab7a3978cfdcbf03c34"
        ],
        [
            "split ; intuition.",
            "VernacExtend",
            "ad92f41c7c6120efbfc528c4c895eac1600e6297"
        ],
        [
            "assert (x'_ub : x' < x + eps).",
            "VernacExtend",
            "cf6d76922b5c3658a9e34be1cafb93745e768396"
        ],
        [
            "apply Sublemma3.",
            "VernacExtend",
            "858e7dab989966321e7be26669ba436b920b7a16"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Rlt_not_eq.",
            "VernacExtend",
            "4d888fdf05ab3816c2e650b03b478096db638cf5"
        ],
        [
            "apply Rlt_le_trans with (r2:=x2) ; [ |rewrite Hx2 ; apply Rmin_l] ; intuition.",
            "VernacExtend",
            "0a1c2984cd7616d986ba4afcc83fa50122ec1c4f"
        ],
        [
            "apply Rabs_def1 ; lra.",
            "VernacExtend",
            "415c00cfec596ac33644e669789b2c36acfafbda"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with (r2:=x1) ; intuition.",
            "VernacExtend",
            "8508efe327c2b46fb069e94d10be3b757ab78459"
        ],
        [
            "apply Rle_trans with (r2:=x2) ; intuition.",
            "VernacExtend",
            "9346aa70d6269d4821a3896b203f20460ef2d741"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_recip_interv : forall (f g:R->R) (lb ub : R) (Pr1:lb < ub), (forall x y, lb <= x -> x < y -> y <= ub -> f x < f y) -> (forall x, f lb <= x -> x <= f ub -> (comp f g) x = id x) -> (forall x, f lb <= x -> x <= f ub -> lb <= g x <= ub) -> (forall a, lb <= a <= ub -> continuity_pt f a) -> forall b, f lb < b < f ub -> continuity_pt g b.",
            "VernacStartTheoremProof",
            "247b797a3a4b7a7ddb84acafc8efa4d9d7d01083"
        ],
        [
            "intros f g lb ub lb_lt_ub f_incr_interv f_eq_g g_wf.",
            "VernacExtend",
            "be70b5abd8ab2d0093d062ff058c3636de075d57"
        ],
        [
            "assert (g_eq_f_prelim := leftinv_is_rightinv_interv f g lb ub f_incr_interv f_eq_g).",
            "VernacExtend",
            "289f40971c87470e51b25eed446da1ea43d1255f"
        ],
        [
            "assert (g_eq_f : forall x, lb <= x <= ub -> (comp g f) x = id x).",
            "VernacExtend",
            "a46ccb3b0ea95d88c49c5537706f3d7daab125a7"
        ],
        [
            "intro x ; apply g_eq_f_prelim ; assumption.",
            "VernacExtend",
            "47359247e82c8bc05e8a2ac7fb893324ef41c918"
        ],
        [
            "apply (continuity_pt_recip_prelim f g lb ub lb_lt_ub f_incr_interv g_eq_f).",
            "VernacExtend",
            "3a967f00ffd47910fb04dc7803e6dc298067c088"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_recip_interv : forall (f g:R->R) (lb ub x:R) (Prf:forall a : R, g lb <= a <= g ub -> derivable_pt f a) (Prg : continuity_pt g x), lb < ub -> lb < x < ub -> forall (Prg_incr:g lb <= g x <= g ub), (forall x, lb <= x <= ub -> (comp f g) x = id x) -> derive_pt f (g x) (Prf (g x) Prg_incr) <> 0 -> derivable_pt_lim g x (1 / derive_pt f (g x) (Prf (g x) Prg_incr)).",
            "VernacStartTheoremProof",
            "86a822f599c745a2b876445a251af5b0a6d79763"
        ],
        [
            "intros f g lb ub x Prf g_cont_pur lb_lt_ub x_encad Prg_incr f_eq_g df_neq.",
            "VernacExtend",
            "539de2fb739d76408191555e09a1505fd10a3bb1"
        ],
        [
            "assert (x_encad2 : lb <= x <= ub).",
            "VernacExtend",
            "4dd328c0618434ed448ca7466e1f6363468757f3"
        ],
        [
            "split ; apply Rlt_le ; intuition.",
            "VernacExtend",
            "a040c3e1ac6128768917a064d0c36385cbbffcdc"
        ],
        [
            "elim (Prf (g x)); simpl; intros l Hl.",
            "VernacExtend",
            "aa29bc3df3663bcf3cc63f0f91d52c4971ee6d18"
        ],
        [
            "unfold derivable_pt_lim.",
            "VernacExtend",
            "66f7b70d68baaf84b30d333ccfa3519d0545510b"
        ],
        [
            "intros eps eps_pos.",
            "VernacExtend",
            "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
        ],
        [
            "pose (y := g x).",
            "VernacExtend",
            "1a3a5df98f74b25a7c55742d2d9c665331dfd08a"
        ],
        [
            "assert (Hlinv := limit_inv).",
            "VernacExtend",
            "fda423f817a862a6ecc8c5b43d9d9b9f717306f6"
        ],
        [
            "assert (Hf_deriv : forall eps:R, 0 < eps -> exists delta : posreal, (forall h:R, h <> 0 -> Rabs h < delta -> Rabs ((f (g x + h) - f (g x)) / h - l) < eps)).",
            "VernacExtend",
            "cc12f6c38d9b61d5c8c68d352f26374b7ca32b69"
        ],
        [
            "intros eps0 eps0_pos.",
            "VernacExtend",
            "e0710496cb6d822c053a2843a6b8bd5278442ff7"
        ],
        [
            "red in Hl ; red in Hl.",
            "VernacExtend",
            "7048261d433c7ebecd9d9422680ec630ef4d9475"
        ],
        [
            "elim (Hl eps0 eps0_pos).",
            "VernacExtend",
            "6ca1cc2893e420c3ce60f688eb0af4df7aaf84f0"
        ],
        [
            "intros deltatemp Htemp.",
            "VernacExtend",
            "f6b19ebf9e7ffc32ccaab035b1831e58a5bc734f"
        ],
        [
            "exists deltatemp ; exact Htemp.",
            "VernacExtend",
            "a5e47c79ac19bc7f2a02ca6ee8a638743a553fcf"
        ],
        [
            "elim (Hf_deriv eps eps_pos).",
            "VernacExtend",
            "fe7717012cd005b2f88a2d52dc0cd48583a7329b"
        ],
        [
            "intros deltatemp Htemp.",
            "VernacExtend",
            "f6b19ebf9e7ffc32ccaab035b1831e58a5bc734f"
        ],
        [
            "red in Hlinv ; red in Hlinv ; unfold dist in Hlinv ; unfold R_dist in Hlinv.",
            "VernacExtend",
            "dfaadb5a9ebc82e20bfc539c00ce17fc06e2f9b2"
        ],
        [
            "assert (Hlinv' := Hlinv (fun h => (f (y+h) - f y)/h) (fun h => h <>0) l 0).",
            "VernacExtend",
            "0de8e83eae70856e8aeaa34cc77bb302dc0e1f38"
        ],
        [
            "unfold limit1_in, limit_in, dist in Hlinv' ; simpl in Hlinv'.",
            "VernacExtend",
            "b4d1d660d22d722c79e33f4806e2ff3838bfcc76"
        ],
        [
            "unfold R_dist in Hlinv'.",
            "VernacExtend",
            "daea9c53bbef5a0f24cc88f9ee602a78ba399b25"
        ],
        [
            "assert (Premisse : (forall eps : R, eps > 0 -> exists alp : R, alp > 0 /\\ (forall x : R, (fun h => h <>0) x /\\ Rabs (x - 0) < alp -> Rabs ((f (y + x) - f y) / x - l) < eps))).",
            "VernacExtend",
            "cfaf32ce611146547e23cc4971f977f424c29dca"
        ],
        [
            "intros eps0 eps0_pos.",
            "VernacExtend",
            "e0710496cb6d822c053a2843a6b8bd5278442ff7"
        ],
        [
            "elim (Hf_deriv eps0 eps0_pos).",
            "VernacExtend",
            "472bb81bb6d953f5f932ae13145cc824c1a2230b"
        ],
        [
            "intros deltatemp' Htemp'.",
            "VernacExtend",
            "5ae2be90749729c957d9158c498fc358d2dddd62"
        ],
        [
            "exists deltatemp'.",
            "VernacExtend",
            "32f6bf7d4a17fa189749a96d7653f2bd27de24b5"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact deltatemp'.(cond_pos).",
            "VernacExtend",
            "bde04988da7fbdafe05aebaffcc450dee60f1716"
        ],
        [
            "intros htemp cond.",
            "VernacExtend",
            "19acfd5296a0559f6a7ae863bbb898db7870c540"
        ],
        [
            "apply (Htemp' htemp).",
            "VernacExtend",
            "146915b9376a1af7c9f45683d8dfc110dda77908"
        ],
        [
            "exact (proj1 cond).",
            "VernacExtend",
            "797c3ff561dc19750c36cdabba2c58697ff05cfc"
        ],
        [
            "replace (htemp) with (htemp - 0).",
            "VernacExtend",
            "c57ef7441f60731f3a0b4237112c99fd9e393a0f"
        ],
        [
            "exact (proj2 cond).",
            "VernacExtend",
            "66b5eb1968734f8305db6f6321f00fac0bd58754"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (Premisse2 : l <> 0).",
            "VernacExtend",
            "2d87a404daccc22ecdc6a03778b8207f581f42cb"
        ],
        [
            "intro l_null.",
            "VernacExtend",
            "e4d37100cd78c267d265189fe679723ab69d249d"
        ],
        [
            "rewrite l_null in Hl.",
            "VernacExtend",
            "96aa21bb5dbc16df0bd0be68a7ccf8242e11fc5d"
        ],
        [
            "apply df_neq.",
            "VernacExtend",
            "2dbcf09b8a4c443576d38d3aa31c8f53b54e1ca8"
        ],
        [
            "rewrite derive_pt_eq.",
            "VernacExtend",
            "14e10c78ae737af79ce80d632a141224a386cdc4"
        ],
        [
            "exact Hl.",
            "VernacExtend",
            "726a6911ca781f5fae08f27dbd5c9838368eca79"
        ],
        [
            "elim (Hlinv' Premisse Premisse2 eps eps_pos).",
            "VernacExtend",
            "81d1619ff8721150b1c079f2104d4d27f947e04b"
        ],
        [
            "intros alpha cond.",
            "VernacExtend",
            "b4d9e8cc30665a4563fb166da238bfdaa1bf8a37"
        ],
        [
            "assert (alpha_pos := proj1 cond) ; assert (inv_cont := proj2 cond) ; clear cond.",
            "VernacExtend",
            "451e15621a7978acda147e0f71e463c056fd7b2b"
        ],
        [
            "unfold derivable, derivable_pt, derivable_pt_abs, derivable_pt_lim in Prf.",
            "VernacExtend",
            "11617c3e4e505da8364c18860736f70cf646b00a"
        ],
        [
            "elim (Hl eps eps_pos).",
            "VernacExtend",
            "232e3d1fce9afaffdb11d2edd297313c620d2c5a"
        ],
        [
            "intros delta f_deriv.",
            "VernacExtend",
            "b424b4e93fad74dcb247d6bc8d25017a4b37f08c"
        ],
        [
            "assert (g_cont := g_cont_pur).",
            "VernacExtend",
            "c627344f4b41768b078a2fcf1eae3d0f65b91bcb"
        ],
        [
            "unfold continuity_pt, continue_in, limit1_in, limit_in in g_cont.",
            "VernacExtend",
            "ac7f7cefb55adb44fc84d9146d6568475a9e8458"
        ],
        [
            "pose (mydelta := Rmin delta alpha).",
            "VernacExtend",
            "7c28a861e4ac5c98d7963f99033cd471c03637b5"
        ],
        [
            "assert (mydelta_pos : mydelta > 0).",
            "VernacExtend",
            "02ac4901e79c72c65c328efd1c4b2380a680afba"
        ],
        [
            "unfold mydelta, Rmin.",
            "VernacExtend",
            "b1ff1acbf33d220d51ad9bab32494ac7ccc974ca"
        ],
        [
            "case (Rle_dec delta alpha).",
            "VernacExtend",
            "c89161d472c90ab28acb925d60ef4589e7c7eb30"
        ],
        [
            "intro ; exact (delta.(cond_pos)).",
            "VernacExtend",
            "c098ee664d949ab4453b07077a745296632eabf4"
        ],
        [
            "intro ; exact alpha_pos.",
            "VernacExtend",
            "35d92438116795c71b5b992f5311af836dbcb352"
        ],
        [
            "elim (g_cont mydelta mydelta_pos).",
            "VernacExtend",
            "38a376fcaa4045e842a26bdc98feff2b346969c2"
        ],
        [
            "intros delta' new_g_cont.",
            "VernacExtend",
            "03dbf2c8ce4566e1fe1106d6ff37b1f17865800e"
        ],
        [
            "assert(delta'_pos := proj1 (new_g_cont)).",
            "VernacExtend",
            "7c19caf5797a3a594051f0fbcb23d1e96dab596c"
        ],
        [
            "clear g_cont ; assert (g_cont := proj2 (new_g_cont)) ; clear new_g_cont.",
            "VernacExtend",
            "cf6fed4e5e44a9514fc250efdb7211cfad4ebc45"
        ],
        [
            "pose (mydelta'' := Rmin delta' (Rmin (x - lb) (ub - x))).",
            "VernacExtend",
            "55a5ad370b8e876ce8d0197f7080a730f5ec9a4a"
        ],
        [
            "assert(mydelta''_pos : mydelta'' > 0).",
            "VernacExtend",
            "a12ce933ddb099e16015b812a1ebfc5572f223a7"
        ],
        [
            "unfold mydelta''.",
            "VernacExtend",
            "f79cb924b75efb28ea44e33563764a5cd1b24546"
        ],
        [
            "apply Rmin_pos ; [intuition | apply Rmin_pos] ; apply Rgt_minus ; intuition.",
            "VernacExtend",
            "b0b02630cee603106783223fc1919e1fa04ebc32"
        ],
        [
            "pose (delta'' := mkposreal mydelta'' mydelta''_pos: posreal).",
            "VernacExtend",
            "e204cd5a5da14090b38b845d9887e8087f301881"
        ],
        [
            "exists delta''.",
            "VernacExtend",
            "35acd61c7c2beccfc8c8ee248b8caaa880d61961"
        ],
        [
            "intros h h_neq h_le_delta'.",
            "VernacExtend",
            "2d82f673c6aea58df9ea818f64b2f46500e38468"
        ],
        [
            "assert (lb <= x +h <= ub).",
            "VernacExtend",
            "954782e6e449de3260834efa5949db6e239d10e6"
        ],
        [
            "assert (Sublemma2 : forall x y, Rabs x < Rabs y -> y > 0 -> x < y).",
            "VernacExtend",
            "7e87c5e566c4012e7ae4f6707d5bf1d3d88f759f"
        ],
        [
            "intros m n Hyp_abs y_pos.",
            "VernacExtend",
            "44d08cae3a41f6c822af519f6fb46ec35917320e"
        ],
        [
            "apply Rlt_le_trans with (r2:=Rabs n).",
            "VernacExtend",
            "6d62616498dc0e589e4b7ecb573c24e1349a999b"
        ],
        [
            "apply Rle_lt_trans with (r2:=Rabs m) ; [ | assumption] ; apply RRle_abs.",
            "VernacExtend",
            "fc801347c47a481078c94b35aa6f679773cf62b1"
        ],
        [
            "apply Req_le ; apply Rabs_right ; apply Rgt_ge ; assumption.",
            "VernacExtend",
            "ed0330eff8cde76bf07edb13722e5230eb2090d8"
        ],
        [
            "assert (lb <= x + h <= ub).",
            "VernacExtend",
            "954782e6e449de3260834efa5949db6e239d10e6"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assert (Sublemma : forall x y z, -z <= y - x -> x <= y + z).",
            "VernacExtend",
            "3f4501aa2d0b65c4f2700fd3c13175e177e9ea5b"
        ],
        [
            "intros ; lra.",
            "VernacExtend",
            "449a153f406381cfb8ab107f551a2c789b996417"
        ],
        [
            "apply Sublemma.",
            "VernacExtend",
            "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
        ],
        [
            "apply Rlt_le ; apply Sublemma2.",
            "VernacExtend",
            "ab7ccd717ac2877afd34b9091afb25dbbfa148b4"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "4585414329a0ef757c809f4a4dee3b3a09307b5c"
        ],
        [
            "apply Rlt_le_trans with (r2:=x-lb) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (x - lb) (ub - x)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta' (Rmin (x - lb) (ub - x))).",
            "VernacExtend",
            "be53242c0ba21f247486fceb60e7b46fb004b127"
        ],
        [
            "apply Rlt_le_trans with (r2:=delta'').",
            "VernacExtend",
            "8da27a8a8ce6c310e85fef2ba8c5119d31963e88"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "apply Rgt_minus.",
            "VernacExtend",
            "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (Sublemma : forall x y z, y <= z - x -> x + y <= z).",
            "VernacExtend",
            "4c48ba659b47562f5fa3ff6551689cc6daac25fe"
        ],
        [
            "intros ; lra.",
            "VernacExtend",
            "449a153f406381cfb8ab107f551a2c789b996417"
        ],
        [
            "apply Sublemma.",
            "VernacExtend",
            "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
        ],
        [
            "apply Rlt_le ; apply Sublemma2.",
            "VernacExtend",
            "ab7ccd717ac2877afd34b9091afb25dbbfa148b4"
        ],
        [
            "apply Rlt_le_trans with (r2:=ub-x) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (x - lb) (ub - x)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta' (Rmin (x - lb) (ub - x))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "e33bf12a4bc857fa57ae8f7a6f0fcdb733210c2b"
        ],
        [
            "apply Rlt_le_trans with (r2:=delta'').",
            "VernacExtend",
            "8da27a8a8ce6c310e85fef2ba8c5119d31963e88"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_trans with (r2:=Rmin delta' (Rmin (x - lb) (ub - x))).",
            "VernacExtend",
            "390869bb7a9c59d5d01d2424377b431bafa742c6"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Rle_trans with (r2:=Rmin (x - lb) (ub - x)).",
            "VernacExtend",
            "1626a7bf67f81dfb8d0cb5f5f4f43cf4d0296dda"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "replace ((g (x + h) - g x) / h) with (1/ (h / (g (x + h) - g x))).",
            "VernacExtend",
            "9dc2d52836893671ff0fcc8117c38870570e59ab"
        ],
        [
            "assert (Hrewr : h = (comp f g ) (x+h) - (comp f g) x).",
            "VernacExtend",
            "a3a8013fd598a86eb8797c4e028ffcd946c2381a"
        ],
        [
            "rewrite f_eq_g.",
            "VernacExtend",
            "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
        ],
        [
            "rewrite f_eq_g ; unfold id.",
            "VernacExtend",
            "6592b4a09a1f7a74826bec38886ee8eb77619a89"
        ],
        [
            "rewrite Rplus_comm ; unfold Rminus ; rewrite Rplus_assoc ; rewrite Rplus_opp_r.",
            "VernacExtend",
            "4f578a81b3cd46ccaad943883e97829c93e6dcb3"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "split ; [|intuition].",
            "VernacExtend",
            "fbf33aa8b4a9ec27458829141bc4648208997c34"
        ],
        [
            "assert (Sublemma : forall x y z, - z <= y - x -> x <= y + z).",
            "VernacExtend",
            "3f4501aa2d0b65c4f2700fd3c13175e177e9ea5b"
        ],
        [
            "intros ; lra.",
            "VernacExtend",
            "449a153f406381cfb8ab107f551a2c789b996417"
        ],
        [
            "apply Sublemma ; apply Rlt_le ; apply Sublemma2.",
            "VernacExtend",
            "1616376d34eb833160aab93fd69287e6740a4655"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "4585414329a0ef757c809f4a4dee3b3a09307b5c"
        ],
        [
            "apply Rlt_le_trans with (r2:=x-lb) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (x - lb) (ub - x)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta' (Rmin (x - lb) (ub - x))) ; [| apply Rmin_r] ; assumption.",
            "VernacExtend",
            "2aeab382305305e48cae3c273176c9821ca48a5a"
        ],
        [
            "apply Rgt_minus.",
            "VernacExtend",
            "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro Hfalse.",
            "VernacExtend",
            "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
        ],
        [
            "assert (Hf : g (x+h) = g x) by intuition.",
            "VernacExtend",
            "3835803b737362aac1643ba2954e5cadb51c74b6"
        ],
        [
            "assert ((comp f g) (x+h) = (comp f g) x).",
            "VernacExtend",
            "6ef64a11bc31ba977347346b868e13b7a34f089b"
        ],
        [
            "unfold comp ; rewrite Hf ; intuition.",
            "VernacExtend",
            "ddff8a67f3f7fae1152f8f587c5e7347c58cb25e"
        ],
        [
            "assert (Main : x+h = x).",
            "VernacExtend",
            "71a24bce2af871f6f6d1dfd8fa2fc16bd7c0e84d"
        ],
        [
            "replace (x +h) with (id (x+h)) by intuition.",
            "VernacExtend",
            "ea6579a6988b10f8a937e364925940f1bb48fb82"
        ],
        [
            "assert (Temp : x = id x) by intuition ; rewrite Temp at 2 ; clear Temp.",
            "VernacExtend",
            "0f4a57823ada63eedd3ef1ae7950be889df932be"
        ],
        [
            "rewrite <- f_eq_g.",
            "VernacExtend",
            "c7f9b5fdc0d27275419000b1e25c4e2b6b89aa2a"
        ],
        [
            "rewrite <- f_eq_g.",
            "VernacExtend",
            "c7f9b5fdc0d27275419000b1e25c4e2b6b89aa2a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (h = 0).",
            "VernacExtend",
            "2ae7349a7e0c90cada7beb4ae7b9ab2e92f8f4b1"
        ],
        [
            "apply Rplus_0_r_uniq with (r:=x) ; assumption.",
            "VernacExtend",
            "450a53df9ed53c9663cb80cec85e530827eff08a"
        ],
        [
            "apply h_neq ; assumption.",
            "VernacExtend",
            "f67fc120188fa4e845a7e8585f19065a3fb94e3c"
        ],
        [
            "replace ((g (x + h) - g x) / h) with (1/ (h / (g (x + h) - g x))).",
            "VernacExtend",
            "9dc2d52836893671ff0fcc8117c38870570e59ab"
        ],
        [
            "assert (Hrewr : h = (comp f g ) (x+h) - (comp f g) x).",
            "VernacExtend",
            "a3a8013fd598a86eb8797c4e028ffcd946c2381a"
        ],
        [
            "rewrite f_eq_g.",
            "VernacExtend",
            "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
        ],
        [
            "rewrite f_eq_g.",
            "VernacExtend",
            "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
        ],
        [
            "unfold id ; rewrite Rplus_comm ; unfold Rminus ; rewrite Rplus_assoc ; rewrite Rplus_opp_r ; intuition.",
            "VernacExtend",
            "081b0133666c95aca2d9040ba586de66693f19c0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite Hrewr at 1.",
            "VernacExtend",
            "8106ecf2d8d00a8b3f42e1e1bdb1b00d98d9f769"
        ],
        [
            "unfold comp.",
            "VernacExtend",
            "b8c595984ddc3a4857a83b585333ec689de2b811"
        ],
        [
            "replace (g(x+h)) with (g x + (g (x+h) - g(x))) by field.",
            "VernacExtend",
            "3706f5af6c4e9da99d1b5a03d17613b817d4c5a6"
        ],
        [
            "pose (h':=g (x+h) - g x).",
            "VernacExtend",
            "597080af9b25905a7607f280883e124b94b7c041"
        ],
        [
            "replace (g (x+h) - g x) with h' by intuition.",
            "VernacExtend",
            "fce6ba35264f8873b572e2653d803a09645fb3fc"
        ],
        [
            "replace (g x + h' - g x) with h' by field.",
            "VernacExtend",
            "50c2d62d974a905d4638c47a21948a4245e94c81"
        ],
        [
            "assert (h'_neq : h' <> 0).",
            "VernacExtend",
            "bd809e4bdf7bdc5800d77162f0d92b62e4e3d059"
        ],
        [
            "unfold h'.",
            "VernacExtend",
            "a7002d3b39723cc4c7317415b9634ef0d33f515f"
        ],
        [
            "intro Hfalse.",
            "VernacExtend",
            "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
        ],
        [
            "unfold Rminus in Hfalse ; apply Rminus_diag_uniq in Hfalse.",
            "VernacExtend",
            "58f85a1f15a291496a11b829c19af615bd4b1c5a"
        ],
        [
            "assert (Hfalse' : (comp f g) (x+h) = (comp f g) x).",
            "VernacExtend",
            "a3489fac64ceb0f44407cb6c4dfbf45e30f2e5de"
        ],
        [
            "intros ; unfold comp ; rewrite Hfalse ; trivial.",
            "VernacExtend",
            "a964dab52382d7906f5dc25391819a41e4f802d9"
        ],
        [
            "rewrite f_eq_g in Hfalse' ; rewrite f_eq_g in Hfalse'.",
            "VernacExtend",
            "37327fb7fff022c94bfdbb8cd961aa066a3812ee"
        ],
        [
            "unfold id in Hfalse'.",
            "VernacExtend",
            "d9c42d3b395c114fe5f1bfb480b41d179a57f7b2"
        ],
        [
            "apply Rplus_0_r_uniq in Hfalse'.",
            "VernacExtend",
            "677b0517a2c1e8c5af54c553b4b9486115d2301a"
        ],
        [
            "apply h_neq ; exact Hfalse'.",
            "VernacExtend",
            "df6a64ea88834f6c0937f163a02b914ec3dccbbd"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv at 1 3; rewrite Rmult_1_l ; rewrite Rmult_1_l.",
            "VernacExtend",
            "45d8b5c04173dfdfddfa94c980e0a6785f883c3c"
        ],
        [
            "apply inv_cont.",
            "VernacExtend",
            "1e947a525235a0b741899c0d4c61b24181f762a6"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exact h'_neq.",
            "VernacExtend",
            "74bbe0446309efee6558259fb1a023c49bdad9a5"
        ],
        [
            "rewrite Rminus_0_r.",
            "VernacExtend",
            "f41d2c9a1ab0030a599c576fc397975a2d0d5b33"
        ],
        [
            "unfold continuity_pt, continue_in, limit1_in, limit_in in g_cont_pur.",
            "VernacExtend",
            "7382ef6a183f72ab256858b8f0f546592a7a6f61"
        ],
        [
            "elim (g_cont_pur mydelta mydelta_pos).",
            "VernacExtend",
            "ecaf49d314938008877cb084a845b9e7a12bdcef"
        ],
        [
            "intros delta3 cond3.",
            "VernacExtend",
            "36c2e8530c20fe312232fedab3160508c8bc5214"
        ],
        [
            "unfold dist in cond3 ; simpl in cond3 ; unfold R_dist in cond3.",
            "VernacExtend",
            "7340646f7200b11ca5c6e8417820f71ebe0e877c"
        ],
        [
            "unfold h'.",
            "VernacExtend",
            "a7002d3b39723cc4c7317415b9634ef0d33f515f"
        ],
        [
            "assert (mydelta_le_alpha : mydelta <= alpha).",
            "VernacExtend",
            "71f91483a1be451e5553f91db3911622249f9b57"
        ],
        [
            "unfold mydelta, Rmin ; case (Rle_dec delta alpha).",
            "VernacExtend",
            "3089a03bf457274b50104df4d3b2a7a811e93f41"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "intro ; intuition.",
            "VernacExtend",
            "769b1db961c2f04837fb6b20d4c465c73f699098"
        ],
        [
            "apply Rlt_le_trans with (r2:=mydelta).",
            "VernacExtend",
            "c739f13b7c67aa7a5da2bda1ce42f3d57cb9e7ff"
        ],
        [
            "unfold dist in g_cont ; simpl in g_cont ; unfold R_dist in g_cont ; apply g_cont.",
            "VernacExtend",
            "1416d5c531b6664a8e3be52cdbea0c6c89fdb8a8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold D_x ; simpl.",
            "VernacExtend",
            "cf97532f2f836a730eaee88c71104b30b515cad2"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold no_cond ; trivial.",
            "VernacExtend",
            "0cebc033adf50dadf224876f549f820ac5b59adb"
        ],
        [
            "intro Hfalse ; apply h_neq.",
            "VernacExtend",
            "6fc9f3a8c1dfdf8336fbfdf1edf563563485d632"
        ],
        [
            "apply (Rplus_0_r_uniq x).",
            "VernacExtend",
            "f5664fa65a4a7233ac826ce77fb0ed07a493abd4"
        ],
        [
            "symmetry ; assumption.",
            "VernacExtend",
            "936f544fa969baad9c600ccc844230fa4d067c8b"
        ],
        [
            "replace (x + h - x) with h by field.",
            "VernacExtend",
            "2c4530150d0741a9cd24402c2721564fc615f064"
        ],
        [
            "apply Rlt_le_trans with (r2:=delta'').",
            "VernacExtend",
            "8da27a8a8ce6c310e85fef2ba8c5119d31963e88"
        ],
        [
            "assumption ; unfold delta''.",
            "VernacExtend",
            "618456c72a86456b8f7ef12349bca355f9f806c5"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Rle_trans with (r2:=mydelta'').",
            "VernacExtend",
            "408ff8ce2c8687724b6230752de41f0490a0f09e"
        ],
        [
            "apply Req_le.",
            "VernacExtend",
            "b69ffc9461f465218c69f379ac293728d3f8e7bd"
        ],
        [
            "unfold delta''.",
            "VernacExtend",
            "12ec0921d2fc4d3a2c1819091c4980ea1710ae38"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "field ; split.",
            "VernacExtend",
            "324ff30f42c1de2f646ff50f526abfebe8f956e1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro Hfalse ; apply h_neq.",
            "VernacExtend",
            "6fc9f3a8c1dfdf8336fbfdf1edf563563485d632"
        ],
        [
            "apply (Rplus_0_r_uniq x).",
            "VernacExtend",
            "f5664fa65a4a7233ac826ce77fb0ed07a493abd4"
        ],
        [
            "assert (Hfin : (comp f g) (x+h) = (comp f g) x).",
            "VernacExtend",
            "f638df3ef6afb735cb24a26585aa8b36ea340466"
        ],
        [
            "apply Rminus_diag_uniq in Hfalse.",
            "VernacExtend",
            "f3dbed3a471ed1625bad0b06c34d96fbf9f4d1eb"
        ],
        [
            "unfold comp.",
            "VernacExtend",
            "b8c595984ddc3a4857a83b585333ec689de2b811"
        ],
        [
            "rewrite Hfalse ; reflexivity.",
            "VernacExtend",
            "8b8c7c1d9f192cca00397c683f0b2fbf715971f9"
        ],
        [
            "rewrite f_eq_g in Hfin.",
            "VernacExtend",
            "799cd850ef832829e7fc5e08b1a99f4676ffe283"
        ],
        [
            "rewrite f_eq_g in Hfin.",
            "VernacExtend",
            "799cd850ef832829e7fc5e08b1a99f4676ffe283"
        ],
        [
            "unfold id in Hfin.",
            "VernacExtend",
            "732e5ba1c4b1c4ab66e9c9807c1f2cffeb345abb"
        ],
        [
            "exact Hfin.",
            "VernacExtend",
            "e120a44220ca9e3d5d17d0efae1764aae68b737c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_recip_interv_prelim0 : forall (f g : R -> R) (lb ub x : R) (Prf : forall a : R, g lb <= a <= g ub -> derivable_pt f a), continuity_pt g x -> lb < ub -> lb < x < ub -> forall Prg_incr : g lb <= g x <= g ub, (forall x0 : R, lb <= x0 <= ub -> comp f g x0 = id x0) -> derive_pt f (g x) (Prf (g x) Prg_incr) <> 0 -> derivable_pt g x.",
            "VernacStartTheoremProof",
            "8ecd68fc2ce8dae3447726c1a3dbcee18828aa8e"
        ],
        [
            "intros f g lb ub x Prf g_cont_pt lb_lt_ub x_encad Prg_incr f_eq_g Df_neq.",
            "VernacExtend",
            "ed26b7f5b5b64fcb8823d5b41317faf8a916e052"
        ],
        [
            "unfold derivable_pt, derivable_pt_abs.",
            "VernacExtend",
            "2de82740ebbd0859a58ff3ff7ffea726de84f5fe"
        ],
        [
            "exists (1 / derive_pt f (g x) (Prf (g x) Prg_incr)).",
            "VernacExtend",
            "abcdb7901a83eb6b59e6e73fd608b630c83b897a"
        ],
        [
            "apply derivable_pt_lim_recip_interv ; assumption.",
            "VernacExtend",
            "efc07f10e212240de21a18e11b277fc99da40331"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_recip_interv_prelim1 :forall (f g:R->R) (lb ub x : R), lb < ub -> f lb < x < f ub -> (forall x : R, f lb <= x -> x <= f ub -> comp f g x = id x) -> (forall x : R, f lb <= x -> x <= f ub -> lb <= g x <= ub) -> (forall x y : R, lb <= x -> x < y -> y <= ub -> f x < f y) -> (forall a : R, lb <= a <= ub -> derivable_pt f a) -> derivable_pt f (g x).",
            "VernacStartTheoremProof",
            "99306b45dafe3d8538bec7c80a7af47116454026"
        ],
        [
            "intros f g lb ub x lb_lt_ub x_encad f_eq_g g_ok f_incr f_derivable.",
            "VernacExtend",
            "5fa69ff80b172c5dbcb9cceac93ad81e9b10031f"
        ],
        [
            "apply f_derivable.",
            "VernacExtend",
            "41fdefee63d23467b7f32a581007addf3c894941"
        ],
        [
            "assert (Left_inv := leftinv_is_rightinv_interv f g lb ub f_incr f_eq_g g_ok).",
            "VernacExtend",
            "08cba74df0d660fd3a9c3a7bc43f69a9b8d8bac0"
        ],
        [
            "replace lb with ((comp g f) lb).",
            "VernacExtend",
            "4b85ce94112859e38ca22f2b17300b24589a9019"
        ],
        [
            "replace ub with ((comp g f) ub).",
            "VernacExtend",
            "6e166fd9960c426fbc28b78085bfec4546ae937c"
        ],
        [
            "unfold comp.",
            "VernacExtend",
            "b8c595984ddc3a4857a83b585333ec689de2b811"
        ],
        [
            "assert (Temp:= f_incr_implies_g_incr_interv f g lb ub lb_lt_ub f_incr f_eq_g g_ok).",
            "VernacExtend",
            "8cddbe4ce53d0303b9eeeef9eebc2fcc961f2d56"
        ],
        [
            "split ; apply Rlt_le ; apply Temp ; intuition.",
            "VernacExtend",
            "b22c29d38581ebd7b8c9be2482b37074ccbb63da"
        ],
        [
            "apply Left_inv ; intuition.",
            "VernacExtend",
            "873f27c061609913877169210d84091bca5a0dd4"
        ],
        [
            "apply Left_inv ; intuition.",
            "VernacExtend",
            "873f27c061609913877169210d84091bca5a0dd4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_recip_interv : forall (f g:R->R) (lb ub x : R) (lb_lt_ub:lb < ub) (x_encad:f lb < x < f ub) (f_eq_g:forall x : R, f lb <= x -> x <= f ub -> comp f g x = id x) (g_wf:forall x : R, f lb <= x -> x <= f ub -> lb <= g x <= ub) (f_incr:forall x y : R, lb <= x -> x < y -> y <= ub -> f x < f y) (f_derivable:forall a : R, lb <= a <= ub -> derivable_pt f a), derive_pt f (g x) (derivable_pt_recip_interv_prelim1 f g lb ub x lb_lt_ub x_encad f_eq_g g_wf f_incr f_derivable) <> 0 -> derivable_pt g x.",
            "VernacStartTheoremProof",
            "f87bc942260f9c35fed523bc109d07445ed1e682"
        ],
        [
            "intros f g lb ub x lb_lt_ub x_encad f_eq_g g_wf f_incr f_derivable Df_neq.",
            "VernacExtend",
            "fc83cde2601334b1ca51a7b8fc1229c1589f026f"
        ],
        [
            "assert(g_incr : g (f lb) < g x < g (f ub)).",
            "VernacExtend",
            "5996cd35065ce15979eebbfea49bac4dfd94cfd8"
        ],
        [
            "assert (Temp:= f_incr_implies_g_incr_interv f g lb ub lb_lt_ub f_incr f_eq_g g_wf).",
            "VernacExtend",
            "9f8b83f3b6466b663de026129cb9e7229a4eefdc"
        ],
        [
            "split ; apply Temp ; intuition.",
            "VernacExtend",
            "e2ceecceaaf0b5898bb46c33258d37ffda45b810"
        ],
        [
            "exact (proj1 x_encad).",
            "VernacExtend",
            "820b80143dc9105ffd67234df6d4df0f04280e37"
        ],
        [
            "apply Rlt_le ; exact (proj2 x_encad).",
            "VernacExtend",
            "c01dd9bef3c44ce20d18205e67e96b40c4c5c2d1"
        ],
        [
            "apply Rlt_le ; exact (proj1 x_encad).",
            "VernacExtend",
            "4634abb25e33bc6af97f5133898a97d8927f81b0"
        ],
        [
            "exact (proj2 x_encad).",
            "VernacExtend",
            "7f53120a84240bc2ff52451497fc17d7d34580c0"
        ],
        [
            "assert(g_incr2 : g (f lb) <= g x <= g (f ub)).",
            "VernacExtend",
            "9a9131fbcb2d8c560d5ede405d8f7cdec4cba951"
        ],
        [
            "split ; apply Rlt_le ; intuition.",
            "VernacExtend",
            "a040c3e1ac6128768917a064d0c36385cbbffcdc"
        ],
        [
            "assert (g_eq_f := leftinv_is_rightinv_interv f g lb ub f_incr f_eq_g g_wf).",
            "VernacExtend",
            "1ab36c02d12ac690d33731891dfa88ecbb1e88c2"
        ],
        [
            "unfold comp, id in g_eq_f.",
            "VernacExtend",
            "58b85b560aeeb67a1e4228153e2ea2e523e22353"
        ],
        [
            "assert (f_derivable2 : forall a : R, g (f lb) <= a <= g (f ub) -> derivable_pt f a).",
            "VernacExtend",
            "ee179f53ad20da4dfde9c68774153adbce7c9693"
        ],
        [
            "intros a a_encad ; apply f_derivable.",
            "VernacExtend",
            "b59c457d54d44d62475253d49b2c0bf53fc3a82f"
        ],
        [
            "rewrite g_eq_f in a_encad ; rewrite g_eq_f in a_encad ; intuition.",
            "VernacExtend",
            "acf5bffcbd60fb02d6f04135415f6e88c3046cd4"
        ],
        [
            "apply derivable_pt_recip_interv_prelim0 with (f:=f) (lb:=f lb) (ub:=f ub) (Prf:=f_derivable2) (Prg_incr:=g_incr2).",
            "VernacExtend",
            "99999210614d44a64624c42f8f6da501076baa97"
        ],
        [
            "apply continuity_pt_recip_interv with (f:=f) (lb:=lb) (ub:=ub) ; intuition.",
            "VernacExtend",
            "13b649c84be3afa6ffcd766df198b696de49453f"
        ],
        [
            "apply derivable_continuous_pt ; apply f_derivable ; intuition.",
            "VernacExtend",
            "f5c6b68d32fd05a294c11d4740cbc1c107153f1f"
        ],
        [
            "exact (proj1 x_encad).",
            "VernacExtend",
            "820b80143dc9105ffd67234df6d4df0f04280e37"
        ],
        [
            "exact (proj2 x_encad).",
            "VernacExtend",
            "7f53120a84240bc2ff52451497fc17d7d34580c0"
        ],
        [
            "apply f_incr ; intuition.",
            "VernacExtend",
            "078b90e938d81121751baa2b4d7bd55a9cba4100"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros x0 x0_encad ; apply f_eq_g ; intuition.",
            "VernacExtend",
            "f3cc0b5cc036e14ea8fdc13fc127e9af97a29627"
        ],
        [
            "rewrite pr_nu_var2_interv with (g:=f) (lb:=lb) (ub:=ub) (pr2:=derivable_pt_recip_interv_prelim1 f g lb ub x lb_lt_ub x_encad f_eq_g g_wf f_incr f_derivable) ; [| |rewrite g_eq_f in g_incr ; rewrite g_eq_f in g_incr| ] ; intuition.",
            "VernacExtend",
            "3037201c4ed4f12292c8f7518bc80a5e7afd7d3c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_recip_interv_prelim0 : forall (f g:R->R) (lb ub x:R) (Prf:derivable_pt f (g x)) (Prg:derivable_pt g x), lb < ub -> lb < x < ub -> (forall x, lb < x < ub -> (comp f g) x = id x) -> derive_pt f (g x) Prf <> 0 -> derive_pt g x Prg = 1 / (derive_pt f (g x) Prf).",
            "VernacStartTheoremProof",
            "0c652168b2cac513662f867234a52344a4f684eb"
        ],
        [
            "intros f g lb ub x Prf Prg lb_lt_ub x_encad local_recip Df_neq.",
            "VernacExtend",
            "ef378484a2c21305dfd78fedb061ad6c1382548d"
        ],
        [
            "replace (derive_pt g x Prg) with ((derive_pt g x Prg) * (derive_pt f (g x) Prf) * / (derive_pt f (g x) Prf)).",
            "VernacExtend",
            "3487e3cf39818f41b501c4a09651c52a2211c211"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite (Rmult_comm _ (/ derive_pt f (g x) Prf)).",
            "VernacExtend",
            "1569340ceb4f4deeee2a949a429513038fad8342"
        ],
        [
            "rewrite (Rmult_comm _ (/ derive_pt f (g x) Prf)).",
            "VernacExtend",
            "1569340ceb4f4deeee2a949a429513038fad8342"
        ],
        [
            "apply Rmult_eq_compat_l.",
            "VernacExtend",
            "bd73500ca5d8c6a128502627eccd82ae7c925a31"
        ],
        [
            "rewrite Rmult_comm.",
            "VernacExtend",
            "fd520335d31c715c2f686e2bdc0b380c493b04c0"
        ],
        [
            "rewrite <- derive_pt_comp.",
            "VernacExtend",
            "c2da22fb63cd462c47301cd59164bfc945b81709"
        ],
        [
            "assert (x_encad2 : lb <= x <= ub) by intuition.",
            "VernacExtend",
            "90ce9ab954d62c4962fdf58ecdcb0feb61d75f65"
        ],
        [
            "rewrite pr_nu_var2_interv with (g:=id) (pr2:= derivable_pt_id_interv lb ub x x_encad2) (lb:=lb) (ub:=ub) ; [reg| | |] ; assumption.",
            "VernacExtend",
            "4289d1271a53b07058432a02a51e848e0bfbe8dd"
        ],
        [
            "rewrite Rmult_assoc, Rinv_r.",
            "VernacExtend",
            "a3d236d97f359e1934780760be93e7b7d1a0aba9"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_recip_interv_prelim1_0 : forall (f g:R->R) (lb ub x:R), lb < ub -> f lb < x < f ub -> (forall x y : R, lb <= x -> x < y -> y <= ub -> f x < f y) -> (forall x : R, f lb <= x -> x <= f ub -> lb <= g x <= ub) -> (forall x, f lb <= x -> x <= f ub -> (comp f g) x = id x) -> lb < g x < ub.",
            "VernacStartTheoremProof",
            "4eec1dbb9eb4b7939139cf2f4dd9fccd8b5fc0ed"
        ],
        [
            "intros f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g.",
            "VernacExtend",
            "c521a125c1d9a20c71e335b1a50aecb758b446cc"
        ],
        [
            "assert (Temp:= f_incr_implies_g_incr_interv f g lb ub lb_lt_ub f_incr f_eq_g g_wf).",
            "VernacExtend",
            "9f8b83f3b6466b663de026129cb9e7229a4eefdc"
        ],
        [
            "assert (Left_inv := leftinv_is_rightinv_interv f g lb ub f_incr f_eq_g g_wf).",
            "VernacExtend",
            "898df920683d9739c7040c17ce389aec40138400"
        ],
        [
            "unfold comp, id in Left_inv.",
            "VernacExtend",
            "4b36552b0f24560c9e1a2fa88c9888dfc93e1fc2"
        ],
        [
            "split ; [rewrite <- Left_inv with (x:=lb) | rewrite <- Left_inv ].",
            "VernacExtend",
            "aad59a7cae2f285cfbeb7b6855e67d4f69432c12"
        ],
        [
            "apply Temp ; intuition.",
            "VernacExtend",
            "93343700b3d6fd90d729cfe2861e506d6ca39ffb"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply Temp ; intuition.",
            "VernacExtend",
            "93343700b3d6fd90d729cfe2861e506d6ca39ffb"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_recip_interv_prelim1_1 : forall (f g:R->R) (lb ub x:R), lb < ub -> f lb < x < f ub -> (forall x y : R, lb <= x -> x < y -> y <= ub -> f x < f y) -> (forall x : R, f lb <= x -> x <= f ub -> lb <= g x <= ub) -> (forall x, f lb <= x -> x <= f ub -> (comp f g) x = id x) -> lb <= g x <= ub.",
            "VernacStartTheoremProof",
            "4fc73b3a9fa5c690182163b9c4c21cbc75bf1a76"
        ],
        [
            "intros f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g.",
            "VernacExtend",
            "c521a125c1d9a20c71e335b1a50aecb758b446cc"
        ],
        [
            "assert (Temp := derive_pt_recip_interv_prelim1_0 f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g).",
            "VernacExtend",
            "a7638e5a4d055047feff686242c321a614a9190f"
        ],
        [
            "split ; apply Rlt_le ; intuition.",
            "VernacExtend",
            "a040c3e1ac6128768917a064d0c36385cbbffcdc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_recip_interv : forall (f g:R->R) (lb ub x:R) (lb_lt_ub:lb < ub) (x_encad:f lb < x < f ub) (f_incr:forall x y : R, lb <= x -> x < y -> y <= ub -> f x < f y) (g_wf:forall x : R, f lb <= x -> x <= f ub -> lb <= g x <= ub) (Prf:forall a : R, lb <= a <= ub -> derivable_pt f a) (f_eq_g:forall x, f lb <= x -> x <= f ub -> (comp f g) x = id x) (Df_neq:derive_pt f (g x) (derivable_pt_recip_interv_prelim1 f g lb ub x lb_lt_ub x_encad f_eq_g g_wf f_incr Prf) <> 0), derive_pt g x (derivable_pt_recip_interv f g lb ub x lb_lt_ub x_encad f_eq_g g_wf f_incr Prf Df_neq) = 1 / (derive_pt f (g x) (Prf (g x) (derive_pt_recip_interv_prelim1_1 f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g))).",
            "VernacStartTheoremProof",
            "dfeff9db799ab5fe34f440ce5491716894ef3737"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert(g_incr := (derive_pt_recip_interv_prelim1_1 f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g)).",
            "VernacExtend",
            "462cdad5895dc8f91a01e86c1eec198a13631d8f"
        ],
        [
            "apply derive_pt_recip_interv_prelim0 with (lb:=f lb) (ub:=f ub) ; [intuition |assumption | intuition |].",
            "VernacExtend",
            "e0cc3dc055e9a6d1ea35d9b2e5f69f4b4e51fe14"
        ],
        [
            "intro Hfalse ; apply Df_neq.",
            "VernacExtend",
            "f65af684ac3eaf5b6ebbfe25784318b948704777"
        ],
        [
            "rewrite pr_nu_var2_interv with (g:=f) (lb:=lb) (ub:=ub) (pr2:= (Prf (g x) (derive_pt_recip_interv_prelim1_1 f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g))) ; [intuition | intuition | | intuition].",
            "VernacExtend",
            "15dc0f7032beae927cb215e633849af6ced9ad29"
        ],
        [
            "exact (derive_pt_recip_interv_prelim1_0 f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g).",
            "VernacExtend",
            "dd1e6fad0cb93bc1e5ba244fc8df605802b502d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ub_lt_2_pos : forall x ub lb, lb < x -> x < ub -> 0 < (ub-lb)/2.",
            "VernacStartTheoremProof",
            "b59b69d88f76223a5e79e84b00949f84e38e086b"
        ],
        [
            "intros x ub lb lb_lt_x x_lt_ub.",
            "VernacExtend",
            "7df4c0afec685f3c4e8abed0bacf52a2d6c758f9"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition mkposreal_lb_ub (x lb ub:R) (lb_lt_x:lb<x) (x_lt_ub:x<ub) : posreal.",
            "VernacDefinition",
            "7613b0f0a973f179638a9985d46e95be14e15088"
        ],
        [
            "apply (mkposreal ((ub-lb)/2) (ub_lt_2_pos x ub lb lb_lt_x x_lt_ub)).",
            "VernacExtend",
            "a088cadb298287cc8f79f11acab573e8f2410045"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma derivable_pt_lim_CVU : forall (fn fn':nat -> R -> R) (f g:R->R) (x:R) c r, Boule c r x -> (forall y n, Boule c r y -> derivable_pt_lim (fn n) y (fn' n y)) -> (forall y, Boule c r y -> Un_cv (fun n => fn n y) (f y)) -> (CVU fn' g c r) -> (forall y, Boule c r y -> continuity_pt g y) -> derivable_pt_lim f x (g x).",
            "VernacStartTheoremProof",
            "8795fe4598e8615c720ac08db7639b371172267b"
        ],
        [
            "intros fn fn' f g x c' r xinb Dfn_eq_fn' fn_CV_f fn'_CVU_g g_cont eps eps_pos.",
            "VernacExtend",
            "7a6cb69eaed59147463d5d4af6e41432cf37db7d"
        ],
        [
            "assert (eps_8_pos : 0 < eps / 8) by lra.",
            "VernacExtend",
            "36bcbedfb6c6e372b817b81ff419cdddb3934818"
        ],
        [
            "elim (g_cont x xinb _ eps_8_pos) ; clear g_cont ; intros delta1 (delta1_pos, g_cont).",
            "VernacExtend",
            "1ce9c865803bdc7cee0de2991b8cbb33056724b9"
        ],
        [
            "destruct (Ball_in_inter _ _ _ _ _ xinb (Boule_center x (mkposreal _ delta1_pos))) as [delta Pdelta].",
            "VernacExtend",
            "3948af2cc8741df56e5f6de0fd038e50802b48b7"
        ],
        [
            "exists delta; intros h hpos hinbdelta.",
            "VernacExtend",
            "4f549783ef101fc9e88a32da3ff354dc6c449fa4"
        ],
        [
            "assert (eps'_pos : 0 < (Rabs h) * eps / 4).",
            "VernacExtend",
            "109d8b0aeb5d358f54c17be45a2a876ad18d089c"
        ],
        [
            "unfold Rdiv ; rewrite Rmult_assoc ; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "06b7436db014809dd5ec4e92d7779e72a621fef6"
        ],
        [
            "apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "destruct (fn_CV_f x xinb ((Rabs h) * eps / 4) eps'_pos) as [N2 fnx_CV_fx].",
            "VernacExtend",
            "3d4b550f01f8d337bbdc2e27bf41035ee31e4a87"
        ],
        [
            "assert (xhinbxdelta : Boule x delta (x + h)).",
            "VernacExtend",
            "c5bfd705390ae867b1fc7b7ab86cb448cf4365ed"
        ],
        [
            "clear -hinbdelta; apply Rabs_def2 in hinbdelta; unfold Boule; simpl.",
            "VernacExtend",
            "d631c0f6ae162ad03aba01d1e8aa05c754e496e8"
        ],
        [
            "destruct hinbdelta; apply Rabs_def1; lra.",
            "VernacExtend",
            "ca57b90020cfe20d65163d1232fab1da071e6c52"
        ],
        [
            "assert (t : Boule c' r (x + h)).",
            "VernacExtend",
            "5782de6e3d34d0d89f9802a05811e55e2825a5c6"
        ],
        [
            "apply Pdelta in xhinbxdelta; tauto.",
            "VernacExtend",
            "f9d3704a56434c275bacc29d9edbd047f5c82f96"
        ],
        [
            "destruct (fn_CV_f (x+h) t ((Rabs h) * eps / 4) eps'_pos) as [N1 fnxh_CV_fxh].",
            "VernacExtend",
            "0a0ea0bbf472a9493cb7d789f0d1832cf9838eeb"
        ],
        [
            "clear fn_CV_f t.",
            "VernacExtend",
            "28483457f70a491b5428107301f27401cb1180f3"
        ],
        [
            "destruct (fn'_CVU_g (eps/8) eps_8_pos) as [N3 fn'c_CVU_gc].",
            "VernacExtend",
            "75ebb5b155f937e107d502ab6d1e1b8ac9b928ca"
        ],
        [
            "pose (N := ((N1 + N2) + N3)%nat).",
            "VernacExtend",
            "b1e279b9620ae90bc828b8265cfcc640c3f5f8e2"
        ],
        [
            "assert (Main : Rabs ((f (x+h) - fn N (x+h)) - (f x - fn N x) + (fn N (x+h) - fn N x - h * (g x))) < (Rabs h)*eps).",
            "VernacExtend",
            "e3098c59405bf645b916a785c8466ac7d76213a7"
        ],
        [
            "apply Rle_lt_trans with (Rabs (f (x + h) - fn N (x + h) - (f x - fn N x)) + Rabs ((fn N (x + h) - fn N x - h * g x))).",
            "VernacExtend",
            "eb6efe054123dedbe9b612fd3ed4fbb2ebb50cb9"
        ],
        [
            "solve[apply Rabs_triang].",
            "VernacExtend",
            "0c5942a4cf46bc966482d3044b73b1a01b5ee007"
        ],
        [
            "apply Rle_lt_trans with (Rabs (f (x + h) - fn N (x + h)) + Rabs (- (f x - fn N x)) + Rabs (fn N (x + h) - fn N x - h * g x)).",
            "VernacExtend",
            "edef35e9f5e3e5560dde9373365bcf97112d3f61"
        ],
        [
            "solve[apply Rplus_le_compat_r ; apply Rabs_triang].",
            "VernacExtend",
            "1cc60865af268f064d9492bf65490a6b765aec69"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "4585414329a0ef757c809f4a4dee3b3a09307b5c"
        ],
        [
            "case (Rlt_le_dec h 0) ; intro sgn_h.",
            "VernacExtend",
            "5729c34e97e46f5cec5f781c771b2db634d06c65"
        ],
        [
            "assert (pr1 : forall c : R, x + h < c < x -> derivable_pt (fn N) c).",
            "VernacExtend",
            "e93a559fedfa6f384d68ee26fdd801d4d997d3f1"
        ],
        [
            "intros c c_encad ; unfold derivable_pt.",
            "VernacExtend",
            "28c619d4641f3761c6d2932ed68e34f3e3a69aec"
        ],
        [
            "exists (fn' N c) ; apply Dfn_eq_fn'.",
            "VernacExtend",
            "c1e0a939bcafb3740e659c5d1761c6c06a19f1d3"
        ],
        [
            "assert (t : Boule x delta c).",
            "VernacExtend",
            "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
        ],
        [
            "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta; destruct c_encad.",
            "VernacExtend",
            "6f400f2cdebe9ea2359818d67035a11795bdf3ca"
        ],
        [
            "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
            "VernacExtend",
            "2cee183758740296a82c8af1ccd10b7cf82c6627"
        ],
        [
            "apply Pdelta in t; tauto.",
            "VernacExtend",
            "a373942203c2f6817110f524c04fa8c8cefb5d48"
        ],
        [
            "assert (pr2 : forall c : R, x + h < c < x -> derivable_pt id c).",
            "VernacExtend",
            "a7e5d4cf710a954b17661786025cab6585fefe7b"
        ],
        [
            "solve[intros; apply derivable_id].",
            "VernacExtend",
            "9e839bc61976a2793360dfac4da91e3a498d4906"
        ],
        [
            "assert (xh_x : x+h < x) by lra.",
            "VernacExtend",
            "04a4f110780f7b6f479f2d6e3103ee63bda40773"
        ],
        [
            "assert (pr3 : forall c : R, x + h <= c <= x -> continuity_pt (fn N) c).",
            "VernacExtend",
            "eb5cfe19d6ae5fea3bb234469bb453e49c37ebd2"
        ],
        [
            "intros c c_encad ; apply derivable_continuous_pt.",
            "VernacExtend",
            "c0b3e8a1a895018b4c9ed7cca1aee4ba3b8c9264"
        ],
        [
            "exists (fn' N c) ; apply Dfn_eq_fn' ; intuition.",
            "VernacExtend",
            "dba3679e290ba628bd0577c36a9b3887614ed4b0"
        ],
        [
            "assert (t : Boule x delta c).",
            "VernacExtend",
            "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
        ],
        [
            "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
            "VernacExtend",
            "ad7f8a520629399f69644454b2cae54e89b6b0d4"
        ],
        [
            "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
            "VernacExtend",
            "2cee183758740296a82c8af1ccd10b7cf82c6627"
        ],
        [
            "apply Pdelta in t; tauto.",
            "VernacExtend",
            "a373942203c2f6817110f524c04fa8c8cefb5d48"
        ],
        [
            "assert (pr4 : forall c : R, x + h <= c <= x -> continuity_pt id c).",
            "VernacExtend",
            "5fa62966ab0e186a147398935cebda9c2aea017e"
        ],
        [
            "solve[intros; apply derivable_continuous ; apply derivable_id].",
            "VernacExtend",
            "d69ac947ebc98c9ddac87db264301eb891bee4c5"
        ],
        [
            "destruct (MVT (fn N) id (x+h) x pr1 pr2 xh_x pr3 pr4) as [c [P Hc]].",
            "VernacExtend",
            "6e16de070152c95cc9074125afb5a4d734932f65"
        ],
        [
            "assert (Hc' : h * derive_pt (fn N) c (pr1 c P) = (fn N (x+h) - fn N x)).",
            "VernacExtend",
            "af00cbcca0b7bc935574da8a9a507a4182a1e53a"
        ],
        [
            "apply Rmult_eq_reg_l with (-1).",
            "VernacExtend",
            "df4c511b2f29a38aa63f7940c8f5a5613739dbfc"
        ],
        [
            "replace (-1 * (h * derive_pt (fn N) c (pr1 c P))) with (-h * derive_pt (fn N) c (pr1 c P)) by field.",
            "VernacExtend",
            "2b7d5283e3427fc0b39c9e6de76425e1fa5ad5a9"
        ],
        [
            "replace (-1 * (fn N (x + h) - fn N x)) with (- (fn N (x + h) - fn N x)) by field.",
            "VernacExtend",
            "465d23861e366d19e95f48c4eed5194bb33c6afe"
        ],
        [
            "replace (-h) with (id x - id (x + h)) by (unfold id; field).",
            "VernacExtend",
            "cb608a484c5aa20ef96ff08317274371223c7b87"
        ],
        [
            "rewrite <- Rmult_1_r ; replace 1 with (derive_pt id c (pr2 c P)) by reg.",
            "VernacExtend",
            "a86a43de0487f2666824809904a0e1a3e6777430"
        ],
        [
            "replace (- (fn N (x + h) - fn N x)) with (fn N x - fn N (x + h)) by field.",
            "VernacExtend",
            "d0a80b64d68eafd64408019cfb58d6d1cf288734"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "now apply Rlt_not_eq, IZR_lt.",
            "VernacExtend",
            "36404908082201c683208ca7ac6d23ab50df89e0"
        ],
        [
            "rewrite <- Hc'; clear Hc Hc'.",
            "VernacExtend",
            "42e5e6d2f344ad1a7c40ba21fb231f9901e93fc4"
        ],
        [
            "replace (derive_pt (fn N) c (pr1 c P)) with (fn' N c).",
            "VernacExtend",
            "094842574051e491da472e146e7eea2aa51e7d65"
        ],
        [
            "replace (h * fn' N c - h * g x) with (h * (fn' N c - g x)) by field.",
            "VernacExtend",
            "c78aedde0422e280bbadfdd7c4a1f495f3146fcb"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "apply Rlt_trans with (Rabs h * eps / 4 + Rabs (f x - fn N x) + Rabs h * Rabs (fn' N c - g x)).",
            "VernacExtend",
            "128417a8d8b74ee3b4e5c25211b384a46da9f0c2"
        ],
        [
            "apply Rplus_lt_compat_r ; apply Rplus_lt_compat_r ; unfold R_dist in fnxh_CV_fxh ; rewrite Rabs_minus_sym ; apply fnxh_CV_fxh.",
            "VernacExtend",
            "e5c00875699ca6fd9ec41aff0bb9c5d1b909b70d"
        ],
        [
            "unfold N; omega.",
            "VernacExtend",
            "ec642d6e70b005beb4bad57dec005858ee95c560"
        ],
        [
            "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * Rabs (fn' N c - g x)).",
            "VernacExtend",
            "e9a40e5983ea4a4e6ba73e0cc20ae391d0e2d4a4"
        ],
        [
            "apply Rplus_lt_compat_r ; apply Rplus_lt_compat_l.",
            "VernacExtend",
            "fae37d6da6469fd9e059ebd5852cbbe2e995653c"
        ],
        [
            "unfold R_dist in fnx_CV_fx ; rewrite Rabs_minus_sym ; apply fnx_CV_fx.",
            "VernacExtend",
            "eba76479c9d6ba9e09fb63ebc97e294fa1ac2d39"
        ],
        [
            "unfold N ; omega.",
            "VernacExtend",
            "ec642d6e70b005beb4bad57dec005858ee95c560"
        ],
        [
            "replace (fn' N c - g x) with ((fn' N c - g c) + (g c - g x)) by field.",
            "VernacExtend",
            "abe352ba705c5b29f10de5d6c32b90432a5857df"
        ],
        [
            "apply Rle_lt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * Rabs (fn' N c - g c) + Rabs h * Rabs (g c - g x)).",
            "VernacExtend",
            "49597cfe7018a3d5889c8e6b009802b399a6257c"
        ],
        [
            "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; apply Rplus_le_compat_l ; apply Rplus_le_compat_l ; rewrite <- Rmult_plus_distr_l ; apply Rmult_le_compat_l.",
            "VernacExtend",
            "a602b6f1c5a1201e4c8290c336f54e5eb9f4bec0"
        ],
        [
            "solve[apply Rabs_pos].",
            "VernacExtend",
            "379c43f595c71981debb46f5c356fc75a6ec1727"
        ],
        [
            "solve[apply Rabs_triang].",
            "VernacExtend",
            "0c5942a4cf46bc966482d3044b73b1a01b5ee007"
        ],
        [
            "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * (eps / 8) + Rabs h * Rabs (g c - g x)).",
            "VernacExtend",
            "30470e9b01e3629966426b8ec53a14ebde5ebcc6"
        ],
        [
            "apply Rplus_lt_compat_r; apply Rplus_lt_compat_l; apply Rmult_lt_compat_l.",
            "VernacExtend",
            "cbe704c28af5699b3209446a8e777353ded49b48"
        ],
        [
            "apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "rewrite Rabs_minus_sym ; apply fn'c_CVU_gc.",
            "VernacExtend",
            "877c3043db653b240c865c94e7a8f3e11cbf61e3"
        ],
        [
            "unfold N ; omega.",
            "VernacExtend",
            "ec642d6e70b005beb4bad57dec005858ee95c560"
        ],
        [
            "assert (t : Boule x delta c).",
            "VernacExtend",
            "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
        ],
        [
            "destruct P.",
            "VernacExtend",
            "5b49412def545f38f2c7c88619b02391bea0772f"
        ],
        [
            "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
            "VernacExtend",
            "ad7f8a520629399f69644454b2cae54e89b6b0d4"
        ],
        [
            "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
            "VernacExtend",
            "2cee183758740296a82c8af1ccd10b7cf82c6627"
        ],
        [
            "apply Pdelta in t; tauto.",
            "VernacExtend",
            "a373942203c2f6817110f524c04fa8c8cefb5d48"
        ],
        [
            "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * (eps / 8) + Rabs h * (eps / 8)).",
            "VernacExtend",
            "07e86e90bb52687eb01fd83db1d96d07b4eae8f6"
        ],
        [
            "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; apply Rplus_lt_compat_l ; apply Rplus_lt_compat_l ; rewrite <- Rmult_plus_distr_l ; rewrite <- Rmult_plus_distr_l ; apply Rmult_lt_compat_l.",
            "VernacExtend",
            "9f6e66d64a86e5c2b6a9aef844a3577df31b05bd"
        ],
        [
            "apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "apply Rplus_lt_compat_l ; simpl in g_cont ; apply g_cont ; split ; [unfold D_x ; split |].",
            "VernacExtend",
            "8cb2b49aafde29d155a73f70f178efc9f88a5a04"
        ],
        [
            "solve[unfold no_cond ; intuition].",
            "VernacExtend",
            "b7d0848df383fafcb72e2386bda5464485d4abee"
        ],
        [
            "apply Rgt_not_eq ; exact (proj2 P).",
            "VernacExtend",
            "82fdeaa306c14a791287baf63a0fcdec0d10af05"
        ],
        [
            "apply Rlt_trans with (Rabs h).",
            "VernacExtend",
            "38fbf29f754f976293160f9ba97e5dd26ae697df"
        ],
        [
            "apply Rabs_def1.",
            "VernacExtend",
            "1ac2b969bbf5e41161bd7a3c24a781c485dfb615"
        ],
        [
            "apply Rlt_trans with 0.",
            "VernacExtend",
            "e7bc3d716eb3bc1bf5114b110153540e6a861842"
        ],
        [
            "destruct P; lra.",
            "VernacExtend",
            "74af3533ed5d266651eca297e2479f837fb69c02"
        ],
        [
            "apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "rewrite <- Rabs_Ropp, Rabs_pos_eq, Ropp_involutive;[ | lra].",
            "VernacExtend",
            "faaf7dc5a36c30660f7a60d9c4cb91eeb84c5071"
        ],
        [
            "destruct P; lra.",
            "VernacExtend",
            "74af3533ed5d266651eca297e2479f837fb69c02"
        ],
        [
            "clear -Pdelta xhinbxdelta.",
            "VernacExtend",
            "6367dbf73b51c5b83fdb38798ae73e4cb8960a52"
        ],
        [
            "apply Pdelta in xhinbxdelta; destruct xhinbxdelta as [_ P'].",
            "VernacExtend",
            "bd34c6d9db849a26407b2b68ebc8faea7004524d"
        ],
        [
            "apply Rabs_def2 in P'; simpl in P'; destruct P'; apply Rabs_def1; lra.",
            "VernacExtend",
            "2a663adb1648f169bc6d257a6778ff00aa42cfb6"
        ],
        [
            "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite <- Rmult_plus_distr_l.",
            "VernacExtend",
            "b1be71d8cf8d3c5282624fca9baff68e4eeec347"
        ],
        [
            "replace (Rabs h * eps / 4 + (Rabs h * eps / 4 + Rabs h * (eps / 8 + eps / 8))) with (Rabs h * (eps / 4 + eps / 4 + eps / 8 + eps / 8)) by field.",
            "VernacExtend",
            "dc5026098cb7fc9642905aa58aa678f23a51287a"
        ],
        [
            "apply Rmult_lt_compat_l.",
            "VernacExtend",
            "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
        ],
        [
            "apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assert (H := pr1 c P) ; elim H ; clear H ; intros l Hl.",
            "VernacExtend",
            "4f34c4931e562d27ed5e487e83a1b8a933aaa541"
        ],
        [
            "assert (Temp : l = fn' N c).",
            "VernacExtend",
            "e40ce9a031b1d2ed09a123203f2a7d0fff5ae855"
        ],
        [
            "assert (bc'rc : Boule c' r c).",
            "VernacExtend",
            "d643018c1a5b88e12f27757ffe7b99673f60f679"
        ],
        [
            "assert (t : Boule x delta c).",
            "VernacExtend",
            "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
        ],
        [
            "clear - xhinbxdelta P.",
            "VernacExtend",
            "cef47095678e7b28fbfda2f8c98fd61f2363a3b8"
        ],
        [
            "destruct P; apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
            "VernacExtend",
            "1f33e4c1a6a23a7b7d5bcf0c68a5326c4dfbb284"
        ],
        [
            "apply Rabs_def1; lra.",
            "VernacExtend",
            "415c00cfec596ac33644e669789b2c36acfafbda"
        ],
        [
            "apply Pdelta in t; tauto.",
            "VernacExtend",
            "a373942203c2f6817110f524c04fa8c8cefb5d48"
        ],
        [
            "assert (Hl' := Dfn_eq_fn' c N bc'rc).",
            "VernacExtend",
            "c06375e52a2a6dce80c191ae132e5e1326e6b633"
        ],
        [
            "unfold derivable_pt_abs in Hl; clear -Hl Hl'.",
            "VernacExtend",
            "6fcf7a687c1898161de06de7c17b482dfb91e40e"
        ],
        [
            "apply uniqueness_limite with (f:= fn N) (x:=c) ; assumption.",
            "VernacExtend",
            "cafbe3572e4d38706fb1e5a2bbe4483e97bd65a8"
        ],
        [
            "rewrite <- Temp.",
            "VernacExtend",
            "8e057f2722a3ef4aca0c8e39b5d170864ff34af9"
        ],
        [
            "assert (Hl' : derivable_pt (fn N) c).",
            "VernacExtend",
            "aa59d4e7fbbbad154c1b674c108de967650ca258"
        ],
        [
            "exists l ; apply Hl.",
            "VernacExtend",
            "dae99b9a99269bc0d990913eabcca47f9d329161"
        ],
        [
            "rewrite pr_nu_var with (g:= fn N) (pr2:=Hl').",
            "VernacExtend",
            "09c59cf5aeea1559b24ca35d3645b6c0496a7d05"
        ],
        [
            "elim Hl' ; clear Hl' ; intros l' Hl'.",
            "VernacExtend",
            "4ad0bc50b055791d22a583a0a57c992619d1d26c"
        ],
        [
            "assert (Main : l = l').",
            "VernacExtend",
            "ab5f8817f7592d0241e54d65d8943248f19ec474"
        ],
        [
            "apply uniqueness_limite with (f:= fn N) (x:=c) ; assumption.",
            "VernacExtend",
            "cafbe3572e4d38706fb1e5a2bbe4483e97bd65a8"
        ],
        [
            "rewrite Main ; reflexivity.",
            "VernacExtend",
            "ad2610cd4e63bd51986681f6749f1464d63a9f89"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assert (h_pos : h > 0).",
            "VernacExtend",
            "0013908c7c7eb266a064d2d981822d1c36927d34"
        ],
        [
            "case sgn_h ; intro Hyp.",
            "VernacExtend",
            "a1e0610ab86dc50a1b682b5eb5927160664d1ee0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply False_ind ; apply hpos ; symmetry ; assumption.",
            "VernacExtend",
            "654f4bf89bfcd3033bc6c01acfc1eb14f5fbcb96"
        ],
        [
            "clear sgn_h.",
            "VernacExtend",
            "df9ec5e87fa93d05dabc9fbaa2b2ea08e1f81c12"
        ],
        [
            "assert (pr1 : forall c : R, x < c < x + h -> derivable_pt (fn N) c).",
            "VernacExtend",
            "7511d692e787d230d5644f8e0e1487ce40672ebb"
        ],
        [
            "intros c c_encad ; unfold derivable_pt.",
            "VernacExtend",
            "28c619d4641f3761c6d2932ed68e34f3e3a69aec"
        ],
        [
            "exists (fn' N c) ; apply Dfn_eq_fn'.",
            "VernacExtend",
            "c1e0a939bcafb3740e659c5d1761c6c06a19f1d3"
        ],
        [
            "assert (t : Boule x delta c).",
            "VernacExtend",
            "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
        ],
        [
            "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta; destruct c_encad.",
            "VernacExtend",
            "6f400f2cdebe9ea2359818d67035a11795bdf3ca"
        ],
        [
            "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
            "VernacExtend",
            "2cee183758740296a82c8af1ccd10b7cf82c6627"
        ],
        [
            "apply Pdelta in t; tauto.",
            "VernacExtend",
            "a373942203c2f6817110f524c04fa8c8cefb5d48"
        ],
        [
            "assert (pr2 : forall c : R, x < c < x + h -> derivable_pt id c).",
            "VernacExtend",
            "6ae0ef929e2215e5c402affde465534cfa4f4b4d"
        ],
        [
            "solve[intros; apply derivable_id].",
            "VernacExtend",
            "9e839bc61976a2793360dfac4da91e3a498d4906"
        ],
        [
            "assert (xh_x : x < x + h) by lra.",
            "VernacExtend",
            "e428f046bc801eba42d0cc900bf41ce166113545"
        ],
        [
            "assert (pr3 : forall c : R, x <= c <= x + h -> continuity_pt (fn N) c).",
            "VernacExtend",
            "2f24021f8ef7d7200e33f2927bbabcfbc05059f4"
        ],
        [
            "intros c c_encad ; apply derivable_continuous_pt.",
            "VernacExtend",
            "c0b3e8a1a895018b4c9ed7cca1aee4ba3b8c9264"
        ],
        [
            "exists (fn' N c) ; apply Dfn_eq_fn' ; intuition.",
            "VernacExtend",
            "dba3679e290ba628bd0577c36a9b3887614ed4b0"
        ],
        [
            "assert (t : Boule x delta c).",
            "VernacExtend",
            "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
        ],
        [
            "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
            "VernacExtend",
            "ad7f8a520629399f69644454b2cae54e89b6b0d4"
        ],
        [
            "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
            "VernacExtend",
            "2cee183758740296a82c8af1ccd10b7cf82c6627"
        ],
        [
            "apply Pdelta in t; tauto.",
            "VernacExtend",
            "a373942203c2f6817110f524c04fa8c8cefb5d48"
        ],
        [
            "assert (pr4 : forall c : R, x <= c <= x + h -> continuity_pt id c).",
            "VernacExtend",
            "5f1201935fa88d3a4c28a3201eeacc75fc255b9f"
        ],
        [
            "solve[intros; apply derivable_continuous ; apply derivable_id].",
            "VernacExtend",
            "d69ac947ebc98c9ddac87db264301eb891bee4c5"
        ],
        [
            "destruct (MVT (fn N) id x (x+h) pr1 pr2 xh_x pr3 pr4) as [c [P Hc]].",
            "VernacExtend",
            "3397c7323cf163bf3f7342c1964411efeac2e73b"
        ],
        [
            "assert (Hc' : h * derive_pt (fn N) c (pr1 c P) = fn N (x+h) - fn N x).",
            "VernacExtend",
            "af00cbcca0b7bc935574da8a9a507a4182a1e53a"
        ],
        [
            "pattern h at 1; replace h with (id (x + h) - id x) by (unfold id; field).",
            "VernacExtend",
            "e3a0a68348987bce2b463dae74d8a1f1c1184c23"
        ],
        [
            "rewrite <- Rmult_1_r ; replace 1 with (derive_pt id c (pr2 c P)) by reg.",
            "VernacExtend",
            "a86a43de0487f2666824809904a0e1a3e6777430"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite <- Hc'; clear Hc Hc'.",
            "VernacExtend",
            "42e5e6d2f344ad1a7c40ba21fb231f9901e93fc4"
        ],
        [
            "replace (derive_pt (fn N) c (pr1 c P)) with (fn' N c).",
            "VernacExtend",
            "094842574051e491da472e146e7eea2aa51e7d65"
        ],
        [
            "replace (h * fn' N c - h * g x) with (h * (fn' N c - g x)) by field.",
            "VernacExtend",
            "c78aedde0422e280bbadfdd7c4a1f495f3146fcb"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "apply Rlt_trans with (Rabs h * eps / 4 + Rabs (f x - fn N x) + Rabs h * Rabs (fn' N c - g x)).",
            "VernacExtend",
            "128417a8d8b74ee3b4e5c25211b384a46da9f0c2"
        ],
        [
            "apply Rplus_lt_compat_r ; apply Rplus_lt_compat_r ; unfold R_dist in fnxh_CV_fxh ; rewrite Rabs_minus_sym ; apply fnxh_CV_fxh.",
            "VernacExtend",
            "e5c00875699ca6fd9ec41aff0bb9c5d1b909b70d"
        ],
        [
            "unfold N; omega.",
            "VernacExtend",
            "ec642d6e70b005beb4bad57dec005858ee95c560"
        ],
        [
            "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * Rabs (fn' N c - g x)).",
            "VernacExtend",
            "e9a40e5983ea4a4e6ba73e0cc20ae391d0e2d4a4"
        ],
        [
            "apply Rplus_lt_compat_r ; apply Rplus_lt_compat_l.",
            "VernacExtend",
            "fae37d6da6469fd9e059ebd5852cbbe2e995653c"
        ],
        [
            "unfold R_dist in fnx_CV_fx ; rewrite Rabs_minus_sym ; apply fnx_CV_fx.",
            "VernacExtend",
            "eba76479c9d6ba9e09fb63ebc97e294fa1ac2d39"
        ],
        [
            "unfold N ; omega.",
            "VernacExtend",
            "ec642d6e70b005beb4bad57dec005858ee95c560"
        ],
        [
            "replace (fn' N c - g x) with ((fn' N c - g c) + (g c - g x)) by field.",
            "VernacExtend",
            "abe352ba705c5b29f10de5d6c32b90432a5857df"
        ],
        [
            "apply Rle_lt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * Rabs (fn' N c - g c) + Rabs h * Rabs (g c - g x)).",
            "VernacExtend",
            "49597cfe7018a3d5889c8e6b009802b399a6257c"
        ],
        [
            "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; apply Rplus_le_compat_l ; apply Rplus_le_compat_l ; rewrite <- Rmult_plus_distr_l ; apply Rmult_le_compat_l.",
            "VernacExtend",
            "a602b6f1c5a1201e4c8290c336f54e5eb9f4bec0"
        ],
        [
            "solve[apply Rabs_pos].",
            "VernacExtend",
            "379c43f595c71981debb46f5c356fc75a6ec1727"
        ],
        [
            "solve[apply Rabs_triang].",
            "VernacExtend",
            "0c5942a4cf46bc966482d3044b73b1a01b5ee007"
        ],
        [
            "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * (eps / 8) + Rabs h * Rabs (g c - g x)).",
            "VernacExtend",
            "30470e9b01e3629966426b8ec53a14ebde5ebcc6"
        ],
        [
            "apply Rplus_lt_compat_r; apply Rplus_lt_compat_l; apply Rmult_lt_compat_l.",
            "VernacExtend",
            "cbe704c28af5699b3209446a8e777353ded49b48"
        ],
        [
            "apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "rewrite Rabs_minus_sym ; apply fn'c_CVU_gc.",
            "VernacExtend",
            "877c3043db653b240c865c94e7a8f3e11cbf61e3"
        ],
        [
            "unfold N ; omega.",
            "VernacExtend",
            "ec642d6e70b005beb4bad57dec005858ee95c560"
        ],
        [
            "assert (t : Boule x delta c).",
            "VernacExtend",
            "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
        ],
        [
            "destruct P.",
            "VernacExtend",
            "5b49412def545f38f2c7c88619b02391bea0772f"
        ],
        [
            "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
            "VernacExtend",
            "ad7f8a520629399f69644454b2cae54e89b6b0d4"
        ],
        [
            "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
            "VernacExtend",
            "2cee183758740296a82c8af1ccd10b7cf82c6627"
        ],
        [
            "apply Pdelta in t; tauto.",
            "VernacExtend",
            "a373942203c2f6817110f524c04fa8c8cefb5d48"
        ],
        [
            "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * (eps / 8) + Rabs h * (eps / 8)).",
            "VernacExtend",
            "07e86e90bb52687eb01fd83db1d96d07b4eae8f6"
        ],
        [
            "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; apply Rplus_lt_compat_l ; apply Rplus_lt_compat_l ; rewrite <- Rmult_plus_distr_l ; rewrite <- Rmult_plus_distr_l ; apply Rmult_lt_compat_l.",
            "VernacExtend",
            "9f6e66d64a86e5c2b6a9aef844a3577df31b05bd"
        ],
        [
            "apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "apply Rplus_lt_compat_l ; simpl in g_cont ; apply g_cont ; split ; [unfold D_x ; split |].",
            "VernacExtend",
            "8cb2b49aafde29d155a73f70f178efc9f88a5a04"
        ],
        [
            "solve[unfold no_cond ; intuition].",
            "VernacExtend",
            "b7d0848df383fafcb72e2386bda5464485d4abee"
        ],
        [
            "apply Rlt_not_eq ; exact (proj1 P).",
            "VernacExtend",
            "c45644f4e44cfa3f0bf3e5af708d4ebfbdcdb597"
        ],
        [
            "apply Rlt_trans with (Rabs h).",
            "VernacExtend",
            "38fbf29f754f976293160f9ba97e5dd26ae697df"
        ],
        [
            "apply Rabs_def1.",
            "VernacExtend",
            "1ac2b969bbf5e41161bd7a3c24a781c485dfb615"
        ],
        [
            "destruct P; rewrite Rabs_pos_eq;lra.",
            "VernacExtend",
            "2516d2c9e3111a906cf82ac01ae7c7bc68ae8100"
        ],
        [
            "apply Rle_lt_trans with 0.",
            "VernacExtend",
            "abf7edca77c836989e0ea56bb1eefcbd0a9800fc"
        ],
        [
            "assert (t := Rabs_pos h); clear -t; lra.",
            "VernacExtend",
            "544d4317e65b324976f7bbc9e9fdfc20abb8ad05"
        ],
        [
            "clear -P; destruct P; lra.",
            "VernacExtend",
            "35fd6645fa0550c9a42f6b8a466c25558a8b0775"
        ],
        [
            "clear -Pdelta xhinbxdelta.",
            "VernacExtend",
            "6367dbf73b51c5b83fdb38798ae73e4cb8960a52"
        ],
        [
            "apply Pdelta in xhinbxdelta; destruct xhinbxdelta as [_ P'].",
            "VernacExtend",
            "bd34c6d9db849a26407b2b68ebc8faea7004524d"
        ],
        [
            "apply Rabs_def2 in P'; simpl in P'; destruct P'; apply Rabs_def1; lra.",
            "VernacExtend",
            "2a663adb1648f169bc6d257a6778ff00aa42cfb6"
        ],
        [
            "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite <- Rmult_plus_distr_l.",
            "VernacExtend",
            "b1be71d8cf8d3c5282624fca9baff68e4eeec347"
        ],
        [
            "replace (Rabs h * eps / 4 + (Rabs h * eps / 4 + Rabs h * (eps / 8 + eps / 8))) with (Rabs h * (eps / 4 + eps / 4 + eps / 8 + eps / 8)) by field.",
            "VernacExtend",
            "dc5026098cb7fc9642905aa58aa678f23a51287a"
        ],
        [
            "apply Rmult_lt_compat_l.",
            "VernacExtend",
            "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
        ],
        [
            "apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assert (H := pr1 c P) ; elim H ; clear H ; intros l Hl.",
            "VernacExtend",
            "4f34c4931e562d27ed5e487e83a1b8a933aaa541"
        ],
        [
            "assert (Temp : l = fn' N c).",
            "VernacExtend",
            "e40ce9a031b1d2ed09a123203f2a7d0fff5ae855"
        ],
        [
            "assert (bc'rc : Boule c' r c).",
            "VernacExtend",
            "d643018c1a5b88e12f27757ffe7b99673f60f679"
        ],
        [
            "assert (t : Boule x delta c).",
            "VernacExtend",
            "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
        ],
        [
            "clear - xhinbxdelta P.",
            "VernacExtend",
            "cef47095678e7b28fbfda2f8c98fd61f2363a3b8"
        ],
        [
            "destruct P; apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
            "VernacExtend",
            "1f33e4c1a6a23a7b7d5bcf0c68a5326c4dfbb284"
        ],
        [
            "apply Rabs_def1; lra.",
            "VernacExtend",
            "415c00cfec596ac33644e669789b2c36acfafbda"
        ],
        [
            "apply Pdelta in t; tauto.",
            "VernacExtend",
            "a373942203c2f6817110f524c04fa8c8cefb5d48"
        ],
        [
            "assert (Hl' := Dfn_eq_fn' c N bc'rc).",
            "VernacExtend",
            "c06375e52a2a6dce80c191ae132e5e1326e6b633"
        ],
        [
            "unfold derivable_pt_abs in Hl; clear -Hl Hl'.",
            "VernacExtend",
            "6fcf7a687c1898161de06de7c17b482dfb91e40e"
        ],
        [
            "apply uniqueness_limite with (f:= fn N) (x:=c) ; assumption.",
            "VernacExtend",
            "cafbe3572e4d38706fb1e5a2bbe4483e97bd65a8"
        ],
        [
            "rewrite <- Temp.",
            "VernacExtend",
            "8e057f2722a3ef4aca0c8e39b5d170864ff34af9"
        ],
        [
            "assert (Hl' : derivable_pt (fn N) c).",
            "VernacExtend",
            "aa59d4e7fbbbad154c1b674c108de967650ca258"
        ],
        [
            "exists l ; apply Hl.",
            "VernacExtend",
            "dae99b9a99269bc0d990913eabcca47f9d329161"
        ],
        [
            "rewrite pr_nu_var with (g:= fn N) (pr2:=Hl').",
            "VernacExtend",
            "09c59cf5aeea1559b24ca35d3645b6c0496a7d05"
        ],
        [
            "elim Hl' ; clear Hl' ; intros l' Hl'.",
            "VernacExtend",
            "4ad0bc50b055791d22a583a0a57c992619d1d26c"
        ],
        [
            "assert (Main : l = l').",
            "VernacExtend",
            "ab5f8817f7592d0241e54d65d8943248f19ec474"
        ],
        [
            "apply uniqueness_limite with (f:= fn N) (x:=c) ; assumption.",
            "VernacExtend",
            "cafbe3572e4d38706fb1e5a2bbe4483e97bd65a8"
        ],
        [
            "rewrite Main ; reflexivity.",
            "VernacExtend",
            "ad2610cd4e63bd51986681f6749f1464d63a9f89"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "replace ((f (x + h) - f x) / h - g x) with ((/h) * ((f (x + h) - f x) - h * g x)).",
            "VernacExtend",
            "2a7c6005834a7f70d7f7e0477f5a94f83b76c20f"
        ],
        [
            "rewrite Rabs_mult ; rewrite Rabs_Rinv.",
            "VernacExtend",
            "d835e004c37b1f8150c99978a324ec95eb699f47"
        ],
        [
            "replace eps with (/ Rabs h * (Rabs h * eps)).",
            "VernacExtend",
            "ee5dadeb275d2dbd30cb155c77b76e6bb17a5ec8"
        ],
        [
            "apply Rmult_lt_compat_l.",
            "VernacExtend",
            "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
        ],
        [
            "apply Rinv_0_lt_compat ; apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "e4c91a40f2fa1c87312f044d164ffed2c6475792"
        ],
        [
            "replace (f (x + h) - f x - h * g x) with (f (x + h) - fn N (x + h) - (f x - fn N x) + (fn N (x + h) - fn N x - h * g x)) by field.",
            "VernacExtend",
            "29c7128fbfacfe970c1e5a7289c872a611fdc683"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "field ; apply Rgt_not_eq ; apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "f4468c57d88a4b7d02ff1f9df73193ce53d08255"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "f_incr_implies_g_incr_interv",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub lb_lt_ub f_incr f_eq_g g_ok x y lb_le_x x_lt_y y_le_ub.",
                        "VernacExtend",
                        "cb9d2413433a102a54794af6666f7a653bbe05c8"
                    ]
                },
                {
                    "command": [
                        "assert (x_encad : f lb <= x <= f ub) by lra.",
                        "VernacExtend",
                        "5de0120920ad798bc13cf030f59237b482171cb1"
                    ]
                },
                {
                    "command": [
                        "assert (y_encad : f lb <= y <= f ub) by lra.",
                        "VernacExtend",
                        "b649454bd04ada00decb5766f3a519c81dcd4a8c"
                    ]
                },
                {
                    "command": [
                        "assert (gx_encad := g_ok _ (proj1 x_encad) (proj2 x_encad)).",
                        "VernacExtend",
                        "debba1ad78957fd4cc6a9aee9ebfece5c234b4f1"
                    ]
                },
                {
                    "command": [
                        "assert (gy_encad := g_ok _ (proj1 y_encad) (proj2 y_encad)).",
                        "VernacExtend",
                        "0847a05ef37fd9487b7876a8da9bca3ccbf3b955"
                    ]
                },
                {
                    "command": [
                        "case (Rlt_dec (g x) (g y)); [ easy |].",
                        "VernacExtend",
                        "090d9d04b523cea7b8a017b94ba07194c59269c8"
                    ]
                },
                {
                    "command": [
                        "intros Hfalse.",
                        "VernacExtend",
                        "c1baa182445f3eb2ba37cae15eba1ad05d736915"
                    ]
                },
                {
                    "command": [
                        "assert (Temp := Rnot_lt_le _ _ Hfalse).",
                        "VernacExtend",
                        "ebcaf4ebb33e89ff2a1d701efd17be535dd75c82"
                    ]
                },
                {
                    "command": [
                        "enough (y <= x) by lra.",
                        "VernacExtend",
                        "1649d2b181fd2ac56d0c05a1b584b94506453ca3"
                    ]
                },
                {
                    "command": [
                        "replace y with (id y) by easy.",
                        "VernacExtend",
                        "4ba440f3ca423b8edbc6d22c149ca0e5feb9996e"
                    ]
                },
                {
                    "command": [
                        "replace x with (id x) by easy.",
                        "VernacExtend",
                        "a3fbdfcba884c1f039bb4f1a996bec21441efe9a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- f_eq_g by easy.",
                        "VernacExtend",
                        "946651d12f9df95620c7dce7c5a4d6fb275c7f87"
                    ]
                },
                {
                    "command": [
                        "rewrite <- f_eq_g by easy.",
                        "VernacExtend",
                        "946651d12f9df95620c7dce7c5a4d6fb275c7f87"
                    ]
                },
                {
                    "command": [
                        "assert (f_incr2 : forall x y, lb <= x -> x <= y -> y < ub -> f x <= f y).",
                        "VernacExtend",
                        "0685a73f90977a326cfea6118018e7e0a87ead64"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "intros m n lb_le_m m_le_n n_lt_ub.",
                        "VernacExtend",
                        "2b2e77fe25231270f6a3b7ffa64dfe8d1a71f312"
                    ]
                },
                {
                    "command": [
                        "case (m_le_n).",
                        "VernacExtend",
                        "4adc3489997a30711ceeb8921b4f743474059fec"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "intros; apply Rlt_le, f_incr, Rlt_le; assumption.",
                        "VernacExtend",
                        "cd45e934a2c9f264a01ef9e4c0d49b0a02ba78c7"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "intros Hyp; rewrite Hyp; apply Req_le; reflexivity.",
                        "VernacExtend",
                        "82d11d18b0efd460acf8a4d0b915cab057130da0"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "apply f_incr2; intuition.",
                        "VernacExtend",
                        "b70d559ea96d0d45a266f28977c6f19fd69a0d24"
                    ]
                },
                {
                    "command": [
                        "enough (g x <> ub) by lra.",
                        "VernacExtend",
                        "16ad4021c8d8ad60a65e769a07415eeedf6f65db"
                    ]
                },
                {
                    "command": [
                        "intro Hf.",
                        "VernacExtend",
                        "6f8097812b59a70e6a2905483ee62407e17f44b0"
                    ]
                },
                {
                    "command": [
                        "assert (Htemp : (comp f g) x = f ub).",
                        "VernacExtend",
                        "fa7b372c20ae884e23ff8fc4ab0380019524e2f8"
                    ]
                },
                {
                    "command": [
                        "{",
                        "VernacSubproof",
                        "184cabd02aa0a33f23f10474ea95789b1f149361"
                    ]
                },
                {
                    "command": [
                        "unfold comp; rewrite Hf; reflexivity.",
                        "VernacExtend",
                        "20097932b065969ed0145ead4b6618639b893e6d"
                    ]
                },
                {
                    "command": [
                        "}",
                        "VernacEndSubproof",
                        "85f27874ef16421341373f4b062b6d1605043af9"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g in Htemp by easy.",
                        "VernacExtend",
                        "99e0a38ef30f26d9106fc7b4e303056ed5f293de"
                    ]
                },
                {
                    "command": [
                        "unfold id in Htemp.",
                        "VernacExtend",
                        "3ea3b827d50eedb3b48ad579f04ca8856c5184a0"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_id_interv",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reg.",
                        "VernacExtend",
                        "200773634894b8319f51d08aac98d6835b0db846"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pr_nu_var2_interv",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub x Prf Prg lb_lt_ub x_encad local_eq.",
                        "VernacExtend",
                        "38c86f6822df925606d0c1610b76376ee630f2e2"
                    ]
                },
                {
                    "command": [
                        "assert (forall x l, lb < x < ub -> (derivable_pt_abs f x l <-> derivable_pt_abs g x l)).",
                        "VernacExtend",
                        "7601df94bb946f8dff1bd6a3aae12ec9d73b5d53"
                    ]
                },
                {
                    "command": [
                        "intros a l a_encad.",
                        "VernacExtend",
                        "c99e91f0bb6dec6a7aa23e6112dd6f29638f021e"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_abs, derivable_pt_lim.",
                        "VernacExtend",
                        "d532f929fb6615c9a567b9cdc371ff5fed83cb44"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intros Hyp eps eps_pos.",
                        "VernacExtend",
                        "a2d9654ab64edcc9b52bdecfc5a8020b7a259bf0"
                    ]
                },
                {
                    "command": [
                        "elim (Hyp eps eps_pos) ; intros delta Hyp2.",
                        "VernacExtend",
                        "6aa8bc6529586667b10cc2d443f723f5411d4ea6"
                    ]
                },
                {
                    "command": [
                        "assert (Pos_cond : Rmin delta (Rmin (ub - a) (a - lb)) > 0).",
                        "VernacExtend",
                        "7f994a36737f5e0c4e206bec450b90f72e1c4eb7"
                    ]
                },
                {
                    "command": [
                        "clear-a lb ub a_encad delta.",
                        "VernacExtend",
                        "cb41d0b72d8f15cc6abb4a44ae64f7399a8e3609"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_pos ; [exact (delta.(cond_pos)) | apply Rmin_pos ] ; apply Rlt_Rminus ; intuition.",
                        "VernacExtend",
                        "7de00d1066aa33afbbaee4cd6bfc5487c916ec0c"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal (Rmin delta (Rmin (ub - a) (a - lb))) Pos_cond).",
                        "VernacExtend",
                        "00e31d79809a6c54e7eac3fcc3a244b972824127"
                    ]
                },
                {
                    "command": [
                        "intros h h_neq h_encad.",
                        "VernacExtend",
                        "a2ab3ef3dbca5b9e55061efc172d031a3735d735"
                    ]
                },
                {
                    "command": [
                        "replace (g (a + h) - g a) with (f (a + h) - f a).",
                        "VernacExtend",
                        "1e4b6e9940f7c6918dbaeed69899497de6327a2d"
                    ]
                },
                {
                    "command": [
                        "apply Hyp2 ; intuition.",
                        "VernacExtend",
                        "3ee89b689c0fc1f08743a486b7884a86e4b55a47"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))).",
                        "VernacExtend",
                        "24ec7995d1834c64b1e77851a9c7aad8d6a77ab9"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "assert (local_eq2 : forall h : R, lb < h < ub -> - f h = - g h).",
                        "VernacExtend",
                        "6b2df8fecef985c790450620f8e436d8ec46342a"
                    ]
                },
                {
                    "command": [
                        "intros ; apply Ropp_eq_compat ; intuition.",
                        "VernacExtend",
                        "5c22c9e90130d1e4370d57349ecc94d400f9affd"
                    ]
                },
                {
                    "command": [
                        "rewrite local_eq ; unfold Rminus.",
                        "VernacExtend",
                        "4090d6967c4e1cedfa04d13687502833f40eab9b"
                    ]
                },
                {
                    "command": [
                        "rewrite local_eq2.",
                        "VernacExtend",
                        "bb95b607f0ab6810412dee6f69fc2bcb0675e2c1"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma2 : forall x y, Rabs x < Rabs y -> y > 0 -> x < y).",
                        "VernacExtend",
                        "7e87c5e566c4012e7ae4f6707d5bf1d3d88f759f"
                    ]
                },
                {
                    "command": [
                        "intros m n Hyp_abs y_pos.",
                        "VernacExtend",
                        "44d08cae3a41f6c822af519f6fb46ec35917320e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rabs n).",
                        "VernacExtend",
                        "6d62616498dc0e589e4b7ecb573c24e1349a999b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=Rabs m) ; [ | assumption] ; apply RRle_abs.",
                        "VernacExtend",
                        "fc801347c47a481078c94b35aa6f679773cf62b1"
                    ]
                },
                {
                    "command": [
                        "apply Req_le ; apply Rabs_right ; apply Rgt_ge ; assumption.",
                        "VernacExtend",
                        "ed0330eff8cde76bf07edb13722e5230eb2090d8"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma : forall x y z, -z < y - x -> x < y + z).",
                        "VernacExtend",
                        "a32fb85e009b3002a13c0b067bcb4a775632b2ee"
                    ]
                },
                {
                    "command": [
                        "intros ; lra.",
                        "VernacExtend",
                        "449a153f406381cfb8ab107f551a2c789b996417"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma.",
                        "VernacExtend",
                        "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma2.",
                        "VernacExtend",
                        "da259ec67006ef0aa723fb9de8e046869f52541d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "4585414329a0ef757c809f4a4dee3b3a09307b5c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=a-lb) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "34b1447bcffb3e1c878bd3e3f6657182d672ee98"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "9221a7f8875dabad887808eee1989918d349e497"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma : forall x y z, y < z - x -> x + y < z).",
                        "VernacExtend",
                        "6235082af7202ef775472ed3199e07c3ddd2b1b4"
                    ]
                },
                {
                    "command": [
                        "intros ; lra.",
                        "VernacExtend",
                        "449a153f406381cfb8ab107f551a2c789b996417"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma.",
                        "VernacExtend",
                        "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma2.",
                        "VernacExtend",
                        "da259ec67006ef0aa723fb9de8e046869f52541d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=ub-a) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "c093ace23faa9ada7e1b8870445c00fc479cf4e3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "2d0abfe3efc52b0e5bc9df789caada4f85cc935d"
                    ]
                },
                {
                    "command": [
                        "intros Hyp eps eps_pos.",
                        "VernacExtend",
                        "a2d9654ab64edcc9b52bdecfc5a8020b7a259bf0"
                    ]
                },
                {
                    "command": [
                        "elim (Hyp eps eps_pos) ; intros delta Hyp2.",
                        "VernacExtend",
                        "6aa8bc6529586667b10cc2d443f723f5411d4ea6"
                    ]
                },
                {
                    "command": [
                        "assert (Pos_cond : Rmin delta (Rmin (ub - a) (a - lb)) > 0).",
                        "VernacExtend",
                        "7f994a36737f5e0c4e206bec450b90f72e1c4eb7"
                    ]
                },
                {
                    "command": [
                        "clear-a lb ub a_encad delta.",
                        "VernacExtend",
                        "cb41d0b72d8f15cc6abb4a44ae64f7399a8e3609"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_pos ; [exact (delta.(cond_pos)) | apply Rmin_pos ] ; apply Rlt_Rminus ; intuition.",
                        "VernacExtend",
                        "7de00d1066aa33afbbaee4cd6bfc5487c916ec0c"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal (Rmin delta (Rmin (ub - a) (a - lb))) Pos_cond).",
                        "VernacExtend",
                        "00e31d79809a6c54e7eac3fcc3a244b972824127"
                    ]
                },
                {
                    "command": [
                        "intros h h_neq h_encad.",
                        "VernacExtend",
                        "a2ab3ef3dbca5b9e55061efc172d031a3735d735"
                    ]
                },
                {
                    "command": [
                        "replace (f (a + h) - f a) with (g (a + h) - g a).",
                        "VernacExtend",
                        "5847952d25e0f7947989806a6cf66f361bf79a3f"
                    ]
                },
                {
                    "command": [
                        "apply Hyp2 ; intuition.",
                        "VernacExtend",
                        "3ee89b689c0fc1f08743a486b7884a86e4b55a47"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))).",
                        "VernacExtend",
                        "24ec7995d1834c64b1e77851a9c7aad8d6a77ab9"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "assert (local_eq2 : forall h : R, lb < h < ub -> - f h = - g h).",
                        "VernacExtend",
                        "6b2df8fecef985c790450620f8e436d8ec46342a"
                    ]
                },
                {
                    "command": [
                        "intros ; apply Ropp_eq_compat ; intuition.",
                        "VernacExtend",
                        "5c22c9e90130d1e4370d57349ecc94d400f9affd"
                    ]
                },
                {
                    "command": [
                        "rewrite local_eq ; unfold Rminus.",
                        "VernacExtend",
                        "4090d6967c4e1cedfa04d13687502833f40eab9b"
                    ]
                },
                {
                    "command": [
                        "rewrite local_eq2.",
                        "VernacExtend",
                        "bb95b607f0ab6810412dee6f69fc2bcb0675e2c1"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma2 : forall x y, Rabs x < Rabs y -> y > 0 -> x < y).",
                        "VernacExtend",
                        "7e87c5e566c4012e7ae4f6707d5bf1d3d88f759f"
                    ]
                },
                {
                    "command": [
                        "intros m n Hyp_abs y_pos.",
                        "VernacExtend",
                        "44d08cae3a41f6c822af519f6fb46ec35917320e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rabs n).",
                        "VernacExtend",
                        "6d62616498dc0e589e4b7ecb573c24e1349a999b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=Rabs m) ; [ | assumption] ; apply RRle_abs.",
                        "VernacExtend",
                        "fc801347c47a481078c94b35aa6f679773cf62b1"
                    ]
                },
                {
                    "command": [
                        "apply Req_le ; apply Rabs_right ; apply Rgt_ge ; assumption.",
                        "VernacExtend",
                        "ed0330eff8cde76bf07edb13722e5230eb2090d8"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma : forall x y z, -z < y - x -> x < y + z).",
                        "VernacExtend",
                        "a32fb85e009b3002a13c0b067bcb4a775632b2ee"
                    ]
                },
                {
                    "command": [
                        "intros ; lra.",
                        "VernacExtend",
                        "449a153f406381cfb8ab107f551a2c789b996417"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma.",
                        "VernacExtend",
                        "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma2.",
                        "VernacExtend",
                        "da259ec67006ef0aa723fb9de8e046869f52541d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "4585414329a0ef757c809f4a4dee3b3a09307b5c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=a-lb) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "34b1447bcffb3e1c878bd3e3f6657182d672ee98"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "9221a7f8875dabad887808eee1989918d349e497"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma : forall x y z, y < z - x -> x + y < z).",
                        "VernacExtend",
                        "6235082af7202ef775472ed3199e07c3ddd2b1b4"
                    ]
                },
                {
                    "command": [
                        "intros ; lra.",
                        "VernacExtend",
                        "449a153f406381cfb8ab107f551a2c789b996417"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma.",
                        "VernacExtend",
                        "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma2.",
                        "VernacExtend",
                        "da259ec67006ef0aa723fb9de8e046869f52541d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=ub-a) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "c093ace23faa9ada7e1b8870445c00fc479cf4e3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rmin (ub - a) (a - lb)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta (Rmin (ub - a) (a - lb))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "2d0abfe3efc52b0e5bc9df789caada4f85cc935d"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt in Prf.",
                        "VernacExtend",
                        "3c7781e7dee39caaeb21b4abc55c2f9e3c5a9656"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt in Prg.",
                        "VernacExtend",
                        "36ca45775a401b0da9cfcdc706a8232a5f9c581c"
                    ]
                },
                {
                    "command": [
                        "elim Prf; intros x0 p.",
                        "VernacExtend",
                        "5dba826794a68931cc07c2dc21d8838b401db5c6"
                    ]
                },
                {
                    "command": [
                        "elim Prg; intros x1 p0.",
                        "VernacExtend",
                        "f1329b97572724712fafb607552cedcea75b16b8"
                    ]
                },
                {
                    "command": [
                        "assert (Temp := p); rewrite H in Temp.",
                        "VernacExtend",
                        "db8689c64fff893c53f65ad0011dab4b8a71a259"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_abs in p.",
                        "VernacExtend",
                        "c2e7683b0d4d4210b5b33c7c81df59f6c50c45fe"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_abs in p0.",
                        "VernacExtend",
                        "211a1b9d3eb7dcbf45feebd52c84fee2f4ee22c3"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply (uniqueness_limite g x x0 x1 Temp p0).",
                        "VernacExtend",
                        "87c682068514c88338482d86f2ce491a7cb054fb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leftinv_is_rightinv",
            "line_nb": 140,
            "steps": [
                {
                    "command": [
                        "intros f g f_incr Hyp x.",
                        "VernacExtend",
                        "666138bddf91770cee5adb5f38317d7fb99871f4"
                    ]
                },
                {
                    "command": [
                        "assert (forall x, f (g (f x)) = f x).",
                        "VernacExtend",
                        "d4ab188adab2f8f0e3df9cd72d41c3644064a896"
                    ]
                },
                {
                    "command": [
                        "intros ; apply Hyp.",
                        "VernacExtend",
                        "049605076c40103ae07bc4b149a44818be302ae7"
                    ]
                },
                {
                    "command": [
                        "assert(f_inj : forall x y, f x = f y -> x = y).",
                        "VernacExtend",
                        "cfc0656fef94139fd7c57e5c04a0688fd088f2b8"
                    ]
                },
                {
                    "command": [
                        "intros a b fa_eq_fb.",
                        "VernacExtend",
                        "f453c76eb1acf74d56be78ec75896e97aaf128cd"
                    ]
                },
                {
                    "command": [
                        "case(total_order_T a b).",
                        "VernacExtend",
                        "6b7b4f3e0502fb1d5f46c2ca288fc31ca1a7f6a2"
                    ]
                },
                {
                    "command": [
                        "intro s ; case s ; clear s.",
                        "VernacExtend",
                        "57f4e29443d335dbff605a26b23fd61cb70077fa"
                    ]
                },
                {
                    "command": [
                        "intro Hf.",
                        "VernacExtend",
                        "6f8097812b59a70e6a2905483ee62407e17f44b0"
                    ]
                },
                {
                    "command": [
                        "assert (Hfalse := f_incr a b Hf).",
                        "VernacExtend",
                        "342ebe877663664be467369b33c6e52dae74d133"
                    ]
                },
                {
                    "command": [
                        "apply False_ind.",
                        "VernacExtend",
                        "953e151f97c8c6479faad3bcd88fb0b89b03443a"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_not_eq (f a) (f b)) ; assumption.",
                        "VernacExtend",
                        "4f29df99f149d65d05e300efd7c7b9b57dc18ff3"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intro Hf.",
                        "VernacExtend",
                        "6f8097812b59a70e6a2905483ee62407e17f44b0"
                    ]
                },
                {
                    "command": [
                        "assert (Hfalse := f_incr b a Hf).",
                        "VernacExtend",
                        "a75255b5baeb000bc491f6bdfd83622859f44ef1"
                    ]
                },
                {
                    "command": [
                        "apply False_ind.",
                        "VernacExtend",
                        "953e151f97c8c6479faad3bcd88fb0b89b03443a"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_not_eq (f b) (f a)) ; [|symmetry] ; assumption.",
                        "VernacExtend",
                        "62046d0b544ef8f3213ac8fe23efa22142ccde11"
                    ]
                },
                {
                    "command": [
                        "apply f_inj.",
                        "VernacExtend",
                        "3c3b55e3a494307f9d9df281ea2c0fedf17ac0d6"
                    ]
                },
                {
                    "command": [
                        "unfold comp.",
                        "VernacExtend",
                        "b8c595984ddc3a4857a83b585333ec689de2b811"
                    ]
                },
                {
                    "command": [
                        "unfold comp in Hyp.",
                        "VernacExtend",
                        "bef66f5e310076f734233b586d2841fba640713f"
                    ]
                },
                {
                    "command": [
                        "rewrite Hyp.",
                        "VernacExtend",
                        "b1b52cea6e06e36bca9e4f5b6f2ecb596df39766"
                    ]
                },
                {
                    "command": [
                        "unfold id.",
                        "VernacExtend",
                        "74f2cf047820ccd7f0d1848c69c9fbf8399a251a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "leftinv_is_rightinv_interv",
            "line_nb": 164,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub f_incr_interv Hyp g_wf x x_encad.",
                        "VernacExtend",
                        "966a59c970dd614bf2635c76d4fd72b2133bea72"
                    ]
                },
                {
                    "command": [
                        "assert(f_inj : forall x y, lb <= x <= ub -> lb <= y <= ub -> f x = f y -> x = y).",
                        "VernacExtend",
                        "73c3bc4f8743dafb60788cc02a6f5aa7c9cf3641"
                    ]
                },
                {
                    "command": [
                        "intros a b a_encad b_encad fa_eq_fb.",
                        "VernacExtend",
                        "0ec8984222591addec56c7cb10c561768dbafc8c"
                    ]
                },
                {
                    "command": [
                        "case(total_order_T a b).",
                        "VernacExtend",
                        "6b7b4f3e0502fb1d5f46c2ca288fc31ca1a7f6a2"
                    ]
                },
                {
                    "command": [
                        "intro s ; case s ; clear s.",
                        "VernacExtend",
                        "57f4e29443d335dbff605a26b23fd61cb70077fa"
                    ]
                },
                {
                    "command": [
                        "intro Hf.",
                        "VernacExtend",
                        "6f8097812b59a70e6a2905483ee62407e17f44b0"
                    ]
                },
                {
                    "command": [
                        "assert (Hfalse := f_incr_interv a b (proj1 a_encad) Hf (proj2 b_encad)).",
                        "VernacExtend",
                        "b00cb04af7306f9fb865f5babc466d183c011cc3"
                    ]
                },
                {
                    "command": [
                        "apply False_ind.",
                        "VernacExtend",
                        "953e151f97c8c6479faad3bcd88fb0b89b03443a"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_not_eq (f a) (f b)) ; assumption.",
                        "VernacExtend",
                        "4f29df99f149d65d05e300efd7c7b9b57dc18ff3"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intro Hf.",
                        "VernacExtend",
                        "6f8097812b59a70e6a2905483ee62407e17f44b0"
                    ]
                },
                {
                    "command": [
                        "assert (Hfalse := f_incr_interv b a (proj1 b_encad) Hf (proj2 a_encad)).",
                        "VernacExtend",
                        "d468370dc0b2766d9dc70db055d771755003c7ab"
                    ]
                },
                {
                    "command": [
                        "apply False_ind.",
                        "VernacExtend",
                        "953e151f97c8c6479faad3bcd88fb0b89b03443a"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_not_eq (f b) (f a)) ; [|symmetry] ; assumption.",
                        "VernacExtend",
                        "62046d0b544ef8f3213ac8fe23efa22142ccde11"
                    ]
                },
                {
                    "command": [
                        "assert (f_incr_interv2 : forall x y, lb <= x -> x <= y -> y <= ub -> f x <= f y).",
                        "VernacExtend",
                        "70697556fd92469b1cf5f193e1cfa2a70cedaa2b"
                    ]
                },
                {
                    "command": [
                        "intros m n cond1 cond2 cond3.",
                        "VernacExtend",
                        "e091a125c67f06b2925b48e7ec165e121cfccc4d"
                    ]
                },
                {
                    "command": [
                        "case cond2.",
                        "VernacExtend",
                        "a46e704be8619c26ab1727bde0fa41ffae92fe46"
                    ]
                },
                {
                    "command": [
                        "intro cond.",
                        "VernacExtend",
                        "03e96f05b3257e2ad02e5c145a55735f1e6335f3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; apply f_incr_interv ; assumption.",
                        "VernacExtend",
                        "b785848d91fbbd63c0e5f627e6baec9d7928ce2e"
                    ]
                },
                {
                    "command": [
                        "intro cond ; right ; rewrite cond ; reflexivity.",
                        "VernacExtend",
                        "e3aaab183baf828ae4945d7533469f70cc7bcc50"
                    ]
                },
                {
                    "command": [
                        "assert (Hyp2:forall x, lb <= x <= ub -> f (g (f x)) = f x).",
                        "VernacExtend",
                        "cd79a3fb813a0c20d0e11ea864e0247c0786c8e4"
                    ]
                },
                {
                    "command": [
                        "intros ; apply Hyp.",
                        "VernacExtend",
                        "049605076c40103ae07bc4b149a44818be302ae7"
                    ]
                },
                {
                    "command": [
                        "apply f_incr_interv2 ; intuition.",
                        "VernacExtend",
                        "f2bcad705dd8a98e466e2f417f54de9f7f2650d3"
                    ]
                },
                {
                    "command": [
                        "apply f_incr_interv2 ; intuition.",
                        "VernacExtend",
                        "f2bcad705dd8a98e466e2f417f54de9f7f2650d3"
                    ]
                },
                {
                    "command": [
                        "unfold comp ; unfold comp in Hyp.",
                        "VernacExtend",
                        "c3bfede0cdf7fe53c65e07532063fdfeb4ba6837"
                    ]
                },
                {
                    "command": [
                        "apply f_inj.",
                        "VernacExtend",
                        "3c3b55e3a494307f9d9df281ea2c0fedf17ac0d6"
                    ]
                },
                {
                    "command": [
                        "apply g_wf ; apply f_incr_interv2 ; intuition.",
                        "VernacExtend",
                        "cb40b8009733e8c17cabdd0d044252cfb6becd11"
                    ]
                },
                {
                    "command": [
                        "unfold id ; assumption.",
                        "VernacExtend",
                        "a856304a18249b4fa2a99f8072582529a97c8889"
                    ]
                },
                {
                    "command": [
                        "apply Hyp2 ; unfold id ; assumption.",
                        "VernacExtend",
                        "d9639b89018dfd338de70514bdc8eebe1d8f3720"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "IVT_interv_prelim0",
            "line_nb": 195,
            "steps": [
                {
                    "command": [
                        "assert (Sublemma : forall x y lb ub, lb <= x <= ub /\\ lb <= y <= ub -> lb <= (x+y) / 2 <= ub).",
                        "VernacExtend",
                        "428a8620169606594cf71e0f4a47b51af55a2c34"
                    ]
                },
                {
                    "command": [
                        "intros x y lb ub Hyp.",
                        "VernacExtend",
                        "65dd340cc7fe81a53446b12c761e55672f521a69"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "intros x y P N x_lt_y.",
                        "VernacExtend",
                        "c4a39833951ac2e024ed0aada1d2da7bdb7c35bd"
                    ]
                },
                {
                    "command": [
                        "induction N.",
                        "VernacExtend",
                        "014c91061e9f52f369bba44af3bfd9be499036f5"
                    ]
                },
                {
                    "command": [
                        "simpl ; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case (P ((Dichotomy_lb x y P N + Dichotomy_ub x y P N) / 2)).",
                        "VernacExtend",
                        "45cc2913c2af18e7780fe5fc3d6ccc0d8074ce5f"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma ; intuition.",
                        "VernacExtend",
                        "5b3da5cc37d974f79fc660061803d879a5d91868"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma ; intuition.",
                        "VernacExtend",
                        "5b3da5cc37d974f79fc660061803d879a5d91868"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "IVT_interv_prelim1",
            "line_nb": 211,
            "steps": [
                {
                    "command": [
                        "intros x y x0 D x_lt_y bnd.",
                        "VernacExtend",
                        "08be723b50861298601199b8049320f81c75a4d7"
                    ]
                },
                {
                    "command": [
                        "assert (Main : forall n, x <= dicho_up x y D n <= y).",
                        "VernacExtend",
                        "af4001ad354d40969fa147a73944c83305d6eb59"
                    ]
                },
                {
                    "command": [
                        "intro n.",
                        "VernacExtend",
                        "7b184e6f13215b0f6a04b4277e277a724a645d52"
                    ]
                },
                {
                    "command": [
                        "unfold dicho_up.",
                        "VernacExtend",
                        "ec4cb16335dd45062b611437ad1ed3c8e0651cc9"
                    ]
                },
                {
                    "command": [
                        "apply (proj1 (IVT_interv_prelim0 x y D n x_lt_y)).",
                        "VernacExtend",
                        "b5245d33f6e54bd3fa9daafc70aa46df2b3e1fc0"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_cv_lim with (Vn:=dicho_up x y D) (Un:=fun n => x).",
                        "VernacExtend",
                        "f0d0408ecc6543266de0e6a027a29e144b0c075a"
                    ]
                },
                {
                    "command": [
                        "intro n ; exact (proj1 (Main n)).",
                        "VernacExtend",
                        "bb0e86e895dcd5385cca627a099d524ecc2ec44c"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv ; intros ; exists 0%nat ; intros ; unfold R_dist ; replace (x -x) with 0 by field ; rewrite Rabs_R0 ; assumption.",
                        "VernacExtend",
                        "01e03550acf4db45cc81991871ddafa849113aff"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_cv_lim with (Un:=dicho_up x y D) (Vn:=fun n => y).",
                        "VernacExtend",
                        "45da9cf281793a7bca1fca9eb2eea1c6343c346e"
                    ]
                },
                {
                    "command": [
                        "intro n ; exact (proj2 (Main n)).",
                        "VernacExtend",
                        "6ed5e73339900b1ca16c3b15b0165021eb15b7bd"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv ; intros ; exists 0%nat ; intros ; unfold R_dist ; replace (y -y) with 0 by field ; rewrite Rabs_R0 ; assumption.",
                        "VernacExtend",
                        "b084aeb90757cd24f4cdc426fa9b9ff5aea49bb2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "f_interv_is_interv",
            "line_nb": 360,
            "steps": [
                {
                    "command": [
                        "intros f lb ub y lb_lt_ub y_encad f_cont_interv.",
                        "VernacExtend",
                        "b88122370fcf051763f0f3424771df91c9d66601"
                    ]
                },
                {
                    "command": [
                        "case y_encad ; intro y_encad1.",
                        "VernacExtend",
                        "8f2c7b23d1d6e22714e806cb93a3d6fe0e49c90a"
                    ]
                },
                {
                    "command": [
                        "case_le y_encad1 ; intros y_encad2 y_encad3 ; case_le y_encad3.",
                        "VernacExtend",
                        "14d7c744b5980dd1e2312cffcf103e0f4c81a78f"
                    ]
                },
                {
                    "command": [
                        "intro y_encad4.",
                        "VernacExtend",
                        "c16c79af7e7f688e0acc17c6bb23ee544b95a0aa"
                    ]
                },
                {
                    "command": [
                        "clear y_encad y_encad1 y_encad3.",
                        "VernacExtend",
                        "6ef785b7cec0c41f70ecec8edea0cfa19f05f325"
                    ]
                },
                {
                    "command": [
                        "assert (Cont : forall a : R, lb <= a <= ub -> continuity_pt (fun x => f x - y) a).",
                        "VernacExtend",
                        "627efa7087bcb28e15735a703ca748853ddde7e2"
                    ]
                },
                {
                    "command": [
                        "intros a a_encad.",
                        "VernacExtend",
                        "1a4733bc609ab5a6dcdcac39c9488d201525ee30"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt, continue_in, limit1_in, limit_in ; simpl ; unfold R_dist.",
                        "VernacExtend",
                        "1bad2f7c5aa020d921ac684b7ba8df3226fba8e4"
                    ]
                },
                {
                    "command": [
                        "intros eps eps_pos.",
                        "VernacExtend",
                        "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
                    ]
                },
                {
                    "command": [
                        "elim (f_cont_interv a a_encad eps eps_pos).",
                        "VernacExtend",
                        "f4b3a17b5d91cb314f67fb60207dfa4fff66618d"
                    ]
                },
                {
                    "command": [
                        "intros alpha alpha_pos.",
                        "VernacExtend",
                        "41e934a2c998d11b748d265eac97cc19e5cd181f"
                    ]
                },
                {
                    "command": [
                        "destruct alpha_pos as (alpha_pos,Temp).",
                        "VernacExtend",
                        "5cbb94478ab2cb9a442c0a5b8732c52da58d447d"
                    ]
                },
                {
                    "command": [
                        "exists alpha.",
                        "VernacExtend",
                        "4db99336d59a6e68b1148a330e52b395313d97e7"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros x x_cond.",
                        "VernacExtend",
                        "518049a0b44b5ba2a994e8186cc0b4a54b01b2ff"
                    ]
                },
                {
                    "command": [
                        "replace (f x - y - (f a - y)) with (f x - f a) by field.",
                        "VernacExtend",
                        "5d2b578c7cbabcbfb16312e4ebdbabf2c692fd38"
                    ]
                },
                {
                    "command": [
                        "exact (Temp x x_cond).",
                        "VernacExtend",
                        "c1a21b20423b8259ad76db04437151e1fe579706"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : (fun x : R => f x - y) lb < 0).",
                        "VernacExtend",
                        "32108719556e16884d0d0b9a451f1842be02921b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_minus.",
                        "VernacExtend",
                        "9fee20f16a41f319061ad24c67e73ac9f8090990"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : 0 < (fun x : R => f x - y) ub).",
                        "VernacExtend",
                        "bf10bbf75d54483740cb6c883520a2ae540df212"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_minus ; assumption.",
                        "VernacExtend",
                        "3812192e62acc9941a76d58a727122b68e6f5f0a"
                    ]
                },
                {
                    "command": [
                        "destruct (IVT_interv (fun x => f x - y) lb ub Cont lb_lt_ub H1 H2) as (x,Hx).",
                        "VernacExtend",
                        "bfa4045aee6cf2d7e7def2f419c11c04ef807369"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "destruct Hx as (Hyp,Result).",
                        "VernacExtend",
                        "d41e3d8e3d42cf44ef9bdb9ba8cfc0a7c67f1ac5"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intro H ; exists ub ; intuition.",
                        "VernacExtend",
                        "a389ec29d67ccefa03cc80ffd9773e6131888121"
                    ]
                },
                {
                    "command": [
                        "intro H ; exists lb ; intuition.",
                        "VernacExtend",
                        "e12df610a454c13581ac1abb3767c608accaa4e2"
                    ]
                },
                {
                    "command": [
                        "intro H ; exists ub ; intuition.",
                        "VernacExtend",
                        "a389ec29d67ccefa03cc80ffd9773e6131888121"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_recip_prelim",
            "line_nb": 392,
            "steps": [
                {
                    "command": [
                        "assert (Sublemma : forall x y z, Rmax x y < z <-> x < z /\\ y < z).",
                        "VernacExtend",
                        "75527c5d5b1a0e593a4422e5edef7bb313110584"
                    ]
                },
                {
                    "command": [
                        "intros x y z.",
                        "VernacExtend",
                        "8357c7ce661033f932c65582aab008de3b5d8530"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax.",
                        "VernacExtend",
                        "b367cb66c5064d8e38d17f567a1ed22797080b57"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x y) ; intros Hyp Hyp2.",
                        "VernacExtend",
                        "a05b64e9900efc8edb45b5839b688e3e93cfdd03"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=y) ; assumption.",
                        "VernacExtend",
                        "3e64f88dc60a0e644e18dbe3fc983f71e95f3765"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (r2:=x).",
                        "VernacExtend",
                        "843079e9cd7d49dbf7fae1dc382766abcfdc9961"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : forall x y, ~ x <= y -> x > y).",
                        "VernacExtend",
                        "63e214e8ddb4776ef0d75cf635231fee7afc4398"
                    ]
                },
                {
                    "command": [
                        "intros m n Hypmn.",
                        "VernacExtend",
                        "5989a74ec09657d267d2dbd404a25fb254d7fc6b"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Temp ; clear Temp ; assumption.",
                        "VernacExtend",
                        "2f05613882a29567de4d2fc7a409fc4271b34e09"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros Hyp.",
                        "VernacExtend",
                        "ac762b9d35035d7195245ae636fbd3fc965fdfd6"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax.",
                        "VernacExtend",
                        "b367cb66c5064d8e38d17f567a1ed22797080b57"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x y).",
                        "VernacExtend",
                        "fc434b0b2d2dddaed55d15cb946df282361429cc"
                    ]
                },
                {
                    "command": [
                        "intro ; exact (proj2 Hyp).",
                        "VernacExtend",
                        "a55fd0180e13c4aec33c58e8c94dfc6b893fe07b"
                    ]
                },
                {
                    "command": [
                        "intro ; exact (proj1 Hyp).",
                        "VernacExtend",
                        "52dd4e6c4175e55cbb97b4146fae533149029285"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma2 : forall x y z, Rmin x y > z <-> x > z /\\ y > z).",
                        "VernacExtend",
                        "9a96b76ba126fb9abca06dfe2760363c299551ac"
                    ]
                },
                {
                    "command": [
                        "intros x y z.",
                        "VernacExtend",
                        "8357c7ce661033f932c65582aab008de3b5d8530"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin.",
                        "VernacExtend",
                        "ec4de2dbd1c783154b87decb3c93990283dcef6b"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x y) ; intros Hyp Hyp2.",
                        "VernacExtend",
                        "a05b64e9900efc8edb45b5839b688e3e93cfdd03"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=x) ; intuition.",
                        "VernacExtend",
                        "3805dcf16f095ec35767df8ebf53583be1630033"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (r2:=y).",
                        "VernacExtend",
                        "015bae500e1ea9a6a57c582596174896a7acefa7"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : forall x y, ~ x <= y -> x > y).",
                        "VernacExtend",
                        "63e214e8ddb4776ef0d75cf635231fee7afc4398"
                    ]
                },
                {
                    "command": [
                        "intros m n Hypmn.",
                        "VernacExtend",
                        "5989a74ec09657d267d2dbd404a25fb254d7fc6b"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Temp ; clear Temp ; assumption.",
                        "VernacExtend",
                        "2f05613882a29567de4d2fc7a409fc4271b34e09"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros Hyp.",
                        "VernacExtend",
                        "ac762b9d35035d7195245ae636fbd3fc965fdfd6"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin.",
                        "VernacExtend",
                        "ec4de2dbd1c783154b87decb3c93990283dcef6b"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x y).",
                        "VernacExtend",
                        "fc434b0b2d2dddaed55d15cb946df282361429cc"
                    ]
                },
                {
                    "command": [
                        "intro ; exact (proj1 Hyp).",
                        "VernacExtend",
                        "52dd4e6c4175e55cbb97b4146fae533149029285"
                    ]
                },
                {
                    "command": [
                        "intro ; exact (proj2 Hyp).",
                        "VernacExtend",
                        "a55fd0180e13c4aec33c58e8c94dfc6b893fe07b"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma3 : forall x y, x <= y /\\ x <> y -> x < y).",
                        "VernacExtend",
                        "6b8b76c49a11463445d70504f2488d4f2a5e90ef"
                    ]
                },
                {
                    "command": [
                        "intros m n Hyp.",
                        "VernacExtend",
                        "a974d9132fc6f305c844ab1c5935d3bc84e91ab7"
                    ]
                },
                {
                    "command": [
                        "unfold Rle in Hyp.",
                        "VernacExtend",
                        "9a3f070344de95b54459179ecd5f2f94ce484705"
                    ]
                },
                {
                    "command": [
                        "destruct Hyp as (Hyp1,Hyp2).",
                        "VernacExtend",
                        "586489f4fbcfdca2dc86bb1a3b7e5103bdb25436"
                    ]
                },
                {
                    "command": [
                        "case Hyp1.",
                        "VernacExtend",
                        "6e5715b05c211599f5dcb3a3a5726e26df9a0c6a"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse ; apply False_ind ; apply Hyp2 ; exact Hfalse.",
                        "VernacExtend",
                        "971674109edbdb0dc6f35d80f99b8be86deeb2c5"
                    ]
                },
                {
                    "command": [
                        "intros f g lb ub lb_lt_ub f_incr_interv f_eq_g f_cont_interv b b_encad.",
                        "VernacExtend",
                        "31e99bcce6f889d74f762b1fb3ccae49f275a921"
                    ]
                },
                {
                    "command": [
                        "assert (f_incr_interv2 : forall x y, lb <= x -> x <= y -> y <= ub -> f x <= f y).",
                        "VernacExtend",
                        "70697556fd92469b1cf5f193e1cfa2a70cedaa2b"
                    ]
                },
                {
                    "command": [
                        "intros m n cond1 cond2 cond3.",
                        "VernacExtend",
                        "e091a125c67f06b2925b48e7ec165e121cfccc4d"
                    ]
                },
                {
                    "command": [
                        "case cond2.",
                        "VernacExtend",
                        "a46e704be8619c26ab1727bde0fa41ffae92fe46"
                    ]
                },
                {
                    "command": [
                        "intro cond.",
                        "VernacExtend",
                        "03e96f05b3257e2ad02e5c145a55735f1e6335f3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; apply f_incr_interv ; assumption.",
                        "VernacExtend",
                        "b785848d91fbbd63c0e5f627e6baec9d7928ce2e"
                    ]
                },
                {
                    "command": [
                        "intro cond ; right ; rewrite cond ; reflexivity.",
                        "VernacExtend",
                        "e3aaab183baf828ae4945d7533469f70cc7bcc50"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt, continue_in, limit1_in, limit_in ; intros eps eps_pos.",
                        "VernacExtend",
                        "d052562346316a7a5fd7393cb632a22d1a6236d9"
                    ]
                },
                {
                    "command": [
                        "unfold dist ; simpl ; unfold R_dist.",
                        "VernacExtend",
                        "a277ac1c1c88c16a120e4fa61a63c7962fc0d7d6"
                    ]
                },
                {
                    "command": [
                        "assert (b_encad_e : f lb <= b <= f ub) by intuition.",
                        "VernacExtend",
                        "962ac61b1e14e05996cc93c74a6c0e7738fde713"
                    ]
                },
                {
                    "command": [
                        "elim (f_interv_is_interv f lb ub b lb_lt_ub b_encad_e f_cont_interv) ; intros x Temp.",
                        "VernacExtend",
                        "718c7733f3f6972b6dff70a5303f45a8937caa56"
                    ]
                },
                {
                    "command": [
                        "destruct Temp as (x_encad,f_x_b).",
                        "VernacExtend",
                        "e89a90182c4f3a3050bfba19484e2a7f9b6c0fea"
                    ]
                },
                {
                    "command": [
                        "assert (lb_lt_x : lb < x).",
                        "VernacExtend",
                        "9f120dd900e49437379ce14a35601cf56abb2179"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : x <> lb).",
                        "VernacExtend",
                        "b79911152b6cece9acdfa3033f1c16f797279057"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse.",
                        "VernacExtend",
                        "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
                    ]
                },
                {
                    "command": [
                        "assert (Temp' : b = f lb).",
                        "VernacExtend",
                        "49eccb2384cc1633ee4b369402f1a74bc1db0065"
                    ]
                },
                {
                    "command": [
                        "rewrite <- f_x_b ; rewrite Hfalse ; reflexivity.",
                        "VernacExtend",
                        "3036888a010faea6384247bba42841b621af718f"
                    ]
                },
                {
                    "command": [
                        "assert (Temp'' : b <> f lb).",
                        "VernacExtend",
                        "6dd99364fa784093ff76f338ebff5bde8f90a106"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq ; exact (proj1 b_encad).",
                        "VernacExtend",
                        "f5db10255b190c59c68098e635f3a33cf13821af"
                    ]
                },
                {
                    "command": [
                        "apply Temp'' ; exact Temp'.",
                        "VernacExtend",
                        "67ea1714a91eaaea3a899dd6127719c36c43035f"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma3.",
                        "VernacExtend",
                        "858e7dab989966321e7be26669ba436b920b7a16"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact (proj1 x_encad).",
                        "VernacExtend",
                        "820b80143dc9105ffd67234df6d4df0f04280e37"
                    ]
                },
                {
                    "command": [
                        "assert (Temp2 : forall x y:R, x <> y <-> y <> x).",
                        "VernacExtend",
                        "822c71c70970be24d410e073f4a4dd04b7a81962"
                    ]
                },
                {
                    "command": [
                        "intros m n.",
                        "VernacExtend",
                        "18665e11771a439415aeac3f0ced42360e32c961"
                    ]
                },
                {
                    "command": [
                        "split ; intuition.",
                        "VernacExtend",
                        "ad92f41c7c6120efbfc528c4c895eac1600e6297"
                    ]
                },
                {
                    "command": [
                        "rewrite Temp2 ; assumption.",
                        "VernacExtend",
                        "094ed3c023ca0e01824059bf8a9bc3574b66df8c"
                    ]
                },
                {
                    "command": [
                        "assert (x_lt_ub : x < ub).",
                        "VernacExtend",
                        "1b524eed6ca57de9978c3bcf3f9911b3192bc399"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : x <> ub).",
                        "VernacExtend",
                        "2e2a72726f9ea767a0227ba47f2dedd9bbd9c8d0"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse.",
                        "VernacExtend",
                        "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
                    ]
                },
                {
                    "command": [
                        "assert (Temp' : b = f ub).",
                        "VernacExtend",
                        "3adb790eeff7c3734315eb09948449014363feea"
                    ]
                },
                {
                    "command": [
                        "rewrite <- f_x_b ; rewrite Hfalse ; reflexivity.",
                        "VernacExtend",
                        "3036888a010faea6384247bba42841b621af718f"
                    ]
                },
                {
                    "command": [
                        "assert (Temp'' : b <> f ub).",
                        "VernacExtend",
                        "36ba5da606a64f748f26045e67a1eb4646ae468b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_eq ; exact (proj2 b_encad).",
                        "VernacExtend",
                        "0b5e592ba0160c29531e631835e44fd6214b2f86"
                    ]
                },
                {
                    "command": [
                        "apply Temp'' ; exact Temp'.",
                        "VernacExtend",
                        "67ea1714a91eaaea3a899dd6127719c36c43035f"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma3.",
                        "VernacExtend",
                        "858e7dab989966321e7be26669ba436b920b7a16"
                    ]
                },
                {
                    "command": [
                        "split ; [exact (proj2 x_encad) | assumption].",
                        "VernacExtend",
                        "606560c464a22f3ae8f43d98edf91c3b702fc3c6"
                    ]
                },
                {
                    "command": [
                        "pose (x1 := Rmax (x - eps) lb).",
                        "VernacExtend",
                        "20b9fdb865c96e8d42b20498b0e2b920bb9e31ef"
                    ]
                },
                {
                    "command": [
                        "pose (x2 := Rmin (x + eps) ub).",
                        "VernacExtend",
                        "46b6e1371b94dcdef93f8b94326b306690e5ccb7"
                    ]
                },
                {
                    "command": [
                        "assert (Hx1 : x1 = Rmax (x - eps) lb) by intuition.",
                        "VernacExtend",
                        "9c4e2a9304cd123dd403f74927ac396610ff15fa"
                    ]
                },
                {
                    "command": [
                        "assert (Hx2 : x2 = Rmin (x + eps) ub) by intuition.",
                        "VernacExtend",
                        "ce8cbb15d93ff632ecde1305c8a63406b9e612f7"
                    ]
                },
                {
                    "command": [
                        "assert (x1_encad : lb <= x1 <= ub).",
                        "VernacExtend",
                        "72a393f4dc38422d1bbe21eb8b55dfafb7d5e15b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply RmaxLess2.",
                        "VernacExtend",
                        "4331c5f9632a7c11206a6e1280e188795cebf73b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "rewrite Hx1.",
                        "VernacExtend",
                        "135544c89bce8a91175751ef44480f0b7783d9a2"
                    ]
                },
                {
                    "command": [
                        "rewrite Sublemma.",
                        "VernacExtend",
                        "e21f21c0e112c405d877998d2d6497567f2132b4"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (r2:=x) ; lra.",
                        "VernacExtend",
                        "6c7f18c76f99c749a63c71ccd2aab67bcf28f051"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (x2_encad : lb <= x2 <= ub).",
                        "VernacExtend",
                        "8da7f254b2e96880a567abb08b37e97e83594e37"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; rewrite Hx2 ; apply Rgt_lt ; rewrite Sublemma2.",
                        "VernacExtend",
                        "a2b3b3d3a462387353b78dfa067d1f63415c00a5"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_trans with (r2:=x) ; lra.",
                        "VernacExtend",
                        "7f43bbd9e870b5642a049093f636319b5ab9d78b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "assert (x_lt_x2 : x < x2).",
                        "VernacExtend",
                        "259b4bd7c43aa20d781b04025cc17b6e986c2d6f"
                    ]
                },
                {
                    "command": [
                        "rewrite Hx2.",
                        "VernacExtend",
                        "762fa2d49508177b00d0e4ad5a9c143b424050e0"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_lt.",
                        "VernacExtend",
                        "9a26c3ea98ad1397e4a20df0b0490f9aec8914bc"
                    ]
                },
                {
                    "command": [
                        "rewrite Sublemma2.",
                        "VernacExtend",
                        "8a7acbe3d396b40fcecb77cff95e3f1c76d92dc9"
                    ]
                },
                {
                    "command": [
                        "split ; lra.",
                        "VernacExtend",
                        "8629afba61b2f69849eaa203df0224924aa1aa1d"
                    ]
                },
                {
                    "command": [
                        "assert (x1_lt_x : x1 < x).",
                        "VernacExtend",
                        "fc356bf8ca201ec6c3a19da0fdea41cf1f754de2"
                    ]
                },
                {
                    "command": [
                        "rewrite Hx1.",
                        "VernacExtend",
                        "135544c89bce8a91175751ef44480f0b7783d9a2"
                    ]
                },
                {
                    "command": [
                        "rewrite Sublemma.",
                        "VernacExtend",
                        "e21f21c0e112c405d877998d2d6497567f2132b4"
                    ]
                },
                {
                    "command": [
                        "split ; lra.",
                        "VernacExtend",
                        "8629afba61b2f69849eaa203df0224924aa1aa1d"
                    ]
                },
                {
                    "command": [
                        "exists (Rmin (f x - f x1) (f x2 - f x)).",
                        "VernacExtend",
                        "faf9616a300b713c86d39432594b081e69f1a904"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_pos ; apply Rgt_minus.",
                        "VernacExtend",
                        "c2ed7f6ddd8677c386663c45b06c431b24ebb692"
                    ]
                },
                {
                    "command": [
                        "apply f_incr_interv ; [apply RmaxLess2 | | ] ; lra.",
                        "VernacExtend",
                        "e1d09aa95b683bd35d8e5173707512e8cef1e460"
                    ]
                },
                {
                    "command": [
                        "apply f_incr_interv ; intuition.",
                        "VernacExtend",
                        "1dba5cba347cc0317c8b8408429551bf62401151"
                    ]
                },
                {
                    "command": [
                        "intros y Temp.",
                        "VernacExtend",
                        "9eba6f2f698407b792de56c4ae683452fbb1c32a"
                    ]
                },
                {
                    "command": [
                        "destruct Temp as (_,y_cond).",
                        "VernacExtend",
                        "531fb7456fc9517a2f700969291c7e27734241c9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- f_x_b in y_cond.",
                        "VernacExtend",
                        "7e100e3f2700b1fe0ef4e64a681777f89282d5c2"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : forall x y d1 d2, d1 > 0 -> d2 > 0 -> Rabs (y - x) < Rmin d1 d2 -> x - d1 <= y <= x + d2).",
                        "VernacExtend",
                        "0e6a4b49a19174c2ebc41517bb29d580a0648fd9"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : forall x y z, x - y <= z -> x - z <= y).",
                        "VernacExtend",
                        "562b45e933882ff6795fb1193b458af487a1f345"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "apply H10.",
                        "VernacExtend",
                        "169c3dd7a02593ce4f62696429eb3c1035f98388"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:=Rabs (y0 - x0)).",
                        "VernacExtend",
                        "3a462041ca97e98aac5f1f876a74703d6046b481"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (y0 - x0)) with (Rabs (x0 - y0)).",
                        "VernacExtend",
                        "9da2127fdfadc811e36ba7f9a3e2995508f31f77"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp.",
                        "VernacExtend",
                        "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus ; rewrite Ropp_plus_distr.",
                        "VernacExtend",
                        "eabd1758a4abf3fc40fdd8bfc458e17ee79fd8f7"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_involutive.",
                        "VernacExtend",
                        "ba0ab440a50f656f08837503f0228b68c9acdf87"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:= Rmin d1 d2).",
                        "VernacExtend",
                        "c5b71f622575afb498df71abdbdeb18a1f92432d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; assumption.",
                        "VernacExtend",
                        "6ea46b5e4ad6d15cd718025b7aa100abf346a511"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : forall x y z, x - y <= z -> x <= y + z).",
                        "VernacExtend",
                        "1fa1a41bbc20e7abae488cb1cb41e3d880baeae4"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "apply H10.",
                        "VernacExtend",
                        "169c3dd7a02593ce4f62696429eb3c1035f98388"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:=Rabs (y0 - x0)).",
                        "VernacExtend",
                        "3a462041ca97e98aac5f1f876a74703d6046b481"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:= Rmin d1 d2).",
                        "VernacExtend",
                        "c5b71f622575afb498df71abdbdeb18a1f92432d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; assumption.",
                        "VernacExtend",
                        "6ea46b5e4ad6d15cd718025b7aa100abf346a511"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "assert (Temp' := Temp (f x) y (f x - f x1) (f x2 - f x)).",
                        "VernacExtend",
                        "f72e758b54b176d6bb00ff7a896545149870d3b3"
                    ]
                },
                {
                    "command": [
                        "replace (f x - (f x - f x1)) with (f x1) in Temp' by field.",
                        "VernacExtend",
                        "86b34afad5fa15cb0a58cf95573c94c48d1a0d60"
                    ]
                },
                {
                    "command": [
                        "replace (f x + (f x2 - f x)) with (f x2) in Temp' by field.",
                        "VernacExtend",
                        "56651836fa25e9f283e558ee7bb4f64cd12b1213"
                    ]
                },
                {
                    "command": [
                        "assert (T : f x - f x1 > 0).",
                        "VernacExtend",
                        "7a887b60897f5b61d3cffad9203133f7c5b4cc19"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_minus.",
                        "VernacExtend",
                        "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
                    ]
                },
                {
                    "command": [
                        "apply f_incr_interv ; intuition.",
                        "VernacExtend",
                        "1dba5cba347cc0317c8b8408429551bf62401151"
                    ]
                },
                {
                    "command": [
                        "assert (T' : f x2 - f x > 0).",
                        "VernacExtend",
                        "dc02f6f460b6e3a12852419889ec6d4046595342"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_minus.",
                        "VernacExtend",
                        "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
                    ]
                },
                {
                    "command": [
                        "apply f_incr_interv ; intuition.",
                        "VernacExtend",
                        "1dba5cba347cc0317c8b8408429551bf62401151"
                    ]
                },
                {
                    "command": [
                        "assert (Main := Temp' T T' y_cond).",
                        "VernacExtend",
                        "781a37c940e8f91d9d35f7aec20c7f798f2d8edd"
                    ]
                },
                {
                    "command": [
                        "clear Temp Temp' T T'.",
                        "VernacExtend",
                        "ba82b986536af885bccf7f378abeb2cda8ed13a5"
                    ]
                },
                {
                    "command": [
                        "assert (x1_lt_x2 : x1 < x2).",
                        "VernacExtend",
                        "7dadbe2f8136406beb38ea217e42a44f76504968"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (r2:=x) ; assumption.",
                        "VernacExtend",
                        "894687abde5c544123b339f2d52c76fb4d6e196a"
                    ]
                },
                {
                    "command": [
                        "assert (f_cont_myinterv : forall a : R, x1 <= a <= x2 -> continuity_pt f a).",
                        "VernacExtend",
                        "d22006c642fd9d905ba70a91d6dca0356595e14c"
                    ]
                },
                {
                    "command": [
                        "intros ; apply f_cont_interv ; split.",
                        "VernacExtend",
                        "dc8c4854d43e2b7bae99028e4e44804977270f58"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := x1) ; intuition.",
                        "VernacExtend",
                        "8508efe327c2b46fb069e94d10be3b757ab78459"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2 := x2) ; intuition.",
                        "VernacExtend",
                        "9346aa70d6269d4821a3896b203f20460ef2d741"
                    ]
                },
                {
                    "command": [
                        "elim (f_interv_is_interv f x1 x2 y x1_lt_x2 Main f_cont_myinterv) ; intros x' Temp.",
                        "VernacExtend",
                        "12f7d9fd95a8f28aa1ce9a507187523386b877e5"
                    ]
                },
                {
                    "command": [
                        "destruct Temp as (x'_encad,f_x'_y).",
                        "VernacExtend",
                        "f5a9fec502bb5c1cbf5f44d2dbb39b2d15df373d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- f_x_b ; rewrite <- f_x'_y.",
                        "VernacExtend",
                        "7160ec4b191c0576f8ac54d356b47d0753a53f62"
                    ]
                },
                {
                    "command": [
                        "unfold comp in f_eq_g.",
                        "VernacExtend",
                        "13cbab829d8b61a984818bf4d32c40368f7b68c0"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g.",
                        "VernacExtend",
                        "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g.",
                        "VernacExtend",
                        "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
                    ]
                },
                {
                    "command": [
                        "unfold id.",
                        "VernacExtend",
                        "74f2cf047820ccd7f0d1848c69c9fbf8399a251a"
                    ]
                },
                {
                    "command": [
                        "assert (x'_encad2 : x - eps <= x' <= x + eps).",
                        "VernacExtend",
                        "06ba6843226156eff695dab20c44f27528f8accc"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:=x1) ; [ apply RmaxLess1|] ; intuition.",
                        "VernacExtend",
                        "c09192a0fea8eed4c8e181e9aa0507d355e095b9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:=x2) ; [ | apply Rmin_l] ; intuition.",
                        "VernacExtend",
                        "98b71ee16efcda8749193e983bfa3266835b98c6"
                    ]
                },
                {
                    "command": [
                        "assert (x1_lt_x' : x1 < x').",
                        "VernacExtend",
                        "daca5723a506f1ae79bf9be5856e1c72f1c41bae"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma3.",
                        "VernacExtend",
                        "858e7dab989966321e7be26669ba436b920b7a16"
                    ]
                },
                {
                    "command": [
                        "assert (x1_neq_x' : x1 <> x').",
                        "VernacExtend",
                        "5d6a00ad5ac251eb0477862fc9d4c3f443c5c9ec"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse.",
                        "VernacExtend",
                        "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
                    ]
                },
                {
                    "command": [
                        "rewrite Hfalse, f_x'_y in y_cond.",
                        "VernacExtend",
                        "ce08a0f424c61df194f040a96be9adae035b3f8e"
                    ]
                },
                {
                    "command": [
                        "assert (Hf : Rabs (y - f x) < f x - y).",
                        "VernacExtend",
                        "288ab70145441e4adaf77175a5966575ca2b9e86"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rmin (f x - y) (f x2 - f x)).",
                        "VernacExtend",
                        "176ed501964c4285367ed62e0e25025c8a8583d7"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "assert(Hfin : f x - y < f x - y).",
                        "VernacExtend",
                        "6bcf0127842e0133cdf206f8e908fc6d2a70c0e0"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=Rabs (y - f x)).",
                        "VernacExtend",
                        "cdc5ff694857e2aa75aa82650ad3a959aa37d6e0"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (y - f x)) with (Rabs (f x - y)).",
                        "VernacExtend",
                        "d945f71f289e9dc7b84de3a7bc4a8c7f2ee0bf5e"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp.",
                        "VernacExtend",
                        "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
                    ]
                },
                {
                    "command": [
                        "replace (- (f x - y)) with (y - f x) by field ; reflexivity.",
                        "VernacExtend",
                        "31f7b0deedcd49a6d9bbcbd0ea89c4d9db107094"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_irrefl (f x - y)) ; assumption.",
                        "VernacExtend",
                        "cae2122bdf2e83910bf463d421a317922d0d57fe"
                    ]
                },
                {
                    "command": [
                        "split ; intuition.",
                        "VernacExtend",
                        "ad92f41c7c6120efbfc528c4c895eac1600e6297"
                    ]
                },
                {
                    "command": [
                        "assert (x'_lb : x - eps < x').",
                        "VernacExtend",
                        "a77beca84e57b968af0be54cc0417337be569413"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma3.",
                        "VernacExtend",
                        "858e7dab989966321e7be26669ba436b920b7a16"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_eq.",
                        "VernacExtend",
                        "4d888fdf05ab3816c2e650b03b478096db638cf5"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=x1) ; [ apply RmaxLess1|] ; intuition.",
                        "VernacExtend",
                        "cfb9a4ffe53ef9675e26b83c0945e5e7c73486fc"
                    ]
                },
                {
                    "command": [
                        "assert (x'_lt_x2 : x' < x2).",
                        "VernacExtend",
                        "b09ac04cc511b76070c4f21e938bbd3a41d6f4c3"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma3.",
                        "VernacExtend",
                        "858e7dab989966321e7be26669ba436b920b7a16"
                    ]
                },
                {
                    "command": [
                        "assert (x1_neq_x' : x' <> x2).",
                        "VernacExtend",
                        "4309ee3af9ad03505953fb1a5a4714b864a2559f"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse.",
                        "VernacExtend",
                        "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hfalse, f_x'_y in y_cond.",
                        "VernacExtend",
                        "907058293ae8a59b766a10e2de6a3288fc7d78e6"
                    ]
                },
                {
                    "command": [
                        "assert (Hf : Rabs (y - f x) < y - f x).",
                        "VernacExtend",
                        "5d018f569532e646be33da11a68dab2d0d6d4019"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rmin (f x - f x1) (y - f x)).",
                        "VernacExtend",
                        "3e0d7222c5bb2b549f54fd55d1dbb4b9e82e6569"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "assert(Hfin : y - f x < y - f x).",
                        "VernacExtend",
                        "88b23f93c700955a2308c776fbf49b50e183d65b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=Rabs (y - f x)).",
                        "VernacExtend",
                        "cdc5ff694857e2aa75aa82650ad3a959aa37d6e0"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "apply (Rlt_irrefl (y - f x)) ; assumption.",
                        "VernacExtend",
                        "99f5435ebac2632efa269ab7a3978cfdcbf03c34"
                    ]
                },
                {
                    "command": [
                        "split ; intuition.",
                        "VernacExtend",
                        "ad92f41c7c6120efbfc528c4c895eac1600e6297"
                    ]
                },
                {
                    "command": [
                        "assert (x'_ub : x' < x + eps).",
                        "VernacExtend",
                        "cf6d76922b5c3658a9e34be1cafb93745e768396"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma3.",
                        "VernacExtend",
                        "858e7dab989966321e7be26669ba436b920b7a16"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_eq.",
                        "VernacExtend",
                        "4d888fdf05ab3816c2e650b03b478096db638cf5"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=x2) ; [ |rewrite Hx2 ; apply Rmin_l] ; intuition.",
                        "VernacExtend",
                        "0a1c2984cd7616d986ba4afcc83fa50122ec1c4f"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def1 ; lra.",
                        "VernacExtend",
                        "415c00cfec596ac33644e669789b2c36acfafbda"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:=x1) ; intuition.",
                        "VernacExtend",
                        "8508efe327c2b46fb069e94d10be3b757ab78459"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:=x2) ; intuition.",
                        "VernacExtend",
                        "9346aa70d6269d4821a3896b203f20460ef2d741"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_recip_interv",
            "line_nb": 621,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub lb_lt_ub f_incr_interv f_eq_g g_wf.",
                        "VernacExtend",
                        "be70b5abd8ab2d0093d062ff058c3636de075d57"
                    ]
                },
                {
                    "command": [
                        "assert (g_eq_f_prelim := leftinv_is_rightinv_interv f g lb ub f_incr_interv f_eq_g).",
                        "VernacExtend",
                        "289f40971c87470e51b25eed446da1ea43d1255f"
                    ]
                },
                {
                    "command": [
                        "assert (g_eq_f : forall x, lb <= x <= ub -> (comp g f) x = id x).",
                        "VernacExtend",
                        "a46ccb3b0ea95d88c49c5537706f3d7daab125a7"
                    ]
                },
                {
                    "command": [
                        "intro x ; apply g_eq_f_prelim ; assumption.",
                        "VernacExtend",
                        "47359247e82c8bc05e8a2ac7fb893324ef41c918"
                    ]
                },
                {
                    "command": [
                        "apply (continuity_pt_recip_prelim f g lb ub lb_lt_ub f_incr_interv g_eq_f).",
                        "VernacExtend",
                        "3a967f00ffd47910fb04dc7803e6dc298067c088"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_recip_interv",
            "line_nb": 628,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub x Prf g_cont_pur lb_lt_ub x_encad Prg_incr f_eq_g df_neq.",
                        "VernacExtend",
                        "539de2fb739d76408191555e09a1505fd10a3bb1"
                    ]
                },
                {
                    "command": [
                        "assert (x_encad2 : lb <= x <= ub).",
                        "VernacExtend",
                        "4dd328c0618434ed448ca7466e1f6363468757f3"
                    ]
                },
                {
                    "command": [
                        "split ; apply Rlt_le ; intuition.",
                        "VernacExtend",
                        "a040c3e1ac6128768917a064d0c36385cbbffcdc"
                    ]
                },
                {
                    "command": [
                        "elim (Prf (g x)); simpl; intros l Hl.",
                        "VernacExtend",
                        "aa29bc3df3663bcf3cc63f0f91d52c4971ee6d18"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_lim.",
                        "VernacExtend",
                        "66f7b70d68baaf84b30d333ccfa3519d0545510b"
                    ]
                },
                {
                    "command": [
                        "intros eps eps_pos.",
                        "VernacExtend",
                        "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
                    ]
                },
                {
                    "command": [
                        "pose (y := g x).",
                        "VernacExtend",
                        "1a3a5df98f74b25a7c55742d2d9c665331dfd08a"
                    ]
                },
                {
                    "command": [
                        "assert (Hlinv := limit_inv).",
                        "VernacExtend",
                        "fda423f817a862a6ecc8c5b43d9d9b9f717306f6"
                    ]
                },
                {
                    "command": [
                        "assert (Hf_deriv : forall eps:R, 0 < eps -> exists delta : posreal, (forall h:R, h <> 0 -> Rabs h < delta -> Rabs ((f (g x + h) - f (g x)) / h - l) < eps)).",
                        "VernacExtend",
                        "cc12f6c38d9b61d5c8c68d352f26374b7ca32b69"
                    ]
                },
                {
                    "command": [
                        "intros eps0 eps0_pos.",
                        "VernacExtend",
                        "e0710496cb6d822c053a2843a6b8bd5278442ff7"
                    ]
                },
                {
                    "command": [
                        "red in Hl ; red in Hl.",
                        "VernacExtend",
                        "7048261d433c7ebecd9d9422680ec630ef4d9475"
                    ]
                },
                {
                    "command": [
                        "elim (Hl eps0 eps0_pos).",
                        "VernacExtend",
                        "6ca1cc2893e420c3ce60f688eb0af4df7aaf84f0"
                    ]
                },
                {
                    "command": [
                        "intros deltatemp Htemp.",
                        "VernacExtend",
                        "f6b19ebf9e7ffc32ccaab035b1831e58a5bc734f"
                    ]
                },
                {
                    "command": [
                        "exists deltatemp ; exact Htemp.",
                        "VernacExtend",
                        "a5e47c79ac19bc7f2a02ca6ee8a638743a553fcf"
                    ]
                },
                {
                    "command": [
                        "elim (Hf_deriv eps eps_pos).",
                        "VernacExtend",
                        "fe7717012cd005b2f88a2d52dc0cd48583a7329b"
                    ]
                },
                {
                    "command": [
                        "intros deltatemp Htemp.",
                        "VernacExtend",
                        "f6b19ebf9e7ffc32ccaab035b1831e58a5bc734f"
                    ]
                },
                {
                    "command": [
                        "red in Hlinv ; red in Hlinv ; unfold dist in Hlinv ; unfold R_dist in Hlinv.",
                        "VernacExtend",
                        "dfaadb5a9ebc82e20bfc539c00ce17fc06e2f9b2"
                    ]
                },
                {
                    "command": [
                        "assert (Hlinv' := Hlinv (fun h => (f (y+h) - f y)/h) (fun h => h <>0) l 0).",
                        "VernacExtend",
                        "0de8e83eae70856e8aeaa34cc77bb302dc0e1f38"
                    ]
                },
                {
                    "command": [
                        "unfold limit1_in, limit_in, dist in Hlinv' ; simpl in Hlinv'.",
                        "VernacExtend",
                        "b4d1d660d22d722c79e33f4806e2ff3838bfcc76"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist in Hlinv'.",
                        "VernacExtend",
                        "daea9c53bbef5a0f24cc88f9ee602a78ba399b25"
                    ]
                },
                {
                    "command": [
                        "assert (Premisse : (forall eps : R, eps > 0 -> exists alp : R, alp > 0 /\\ (forall x : R, (fun h => h <>0) x /\\ Rabs (x - 0) < alp -> Rabs ((f (y + x) - f y) / x - l) < eps))).",
                        "VernacExtend",
                        "cfaf32ce611146547e23cc4971f977f424c29dca"
                    ]
                },
                {
                    "command": [
                        "intros eps0 eps0_pos.",
                        "VernacExtend",
                        "e0710496cb6d822c053a2843a6b8bd5278442ff7"
                    ]
                },
                {
                    "command": [
                        "elim (Hf_deriv eps0 eps0_pos).",
                        "VernacExtend",
                        "472bb81bb6d953f5f932ae13145cc824c1a2230b"
                    ]
                },
                {
                    "command": [
                        "intros deltatemp' Htemp'.",
                        "VernacExtend",
                        "5ae2be90749729c957d9158c498fc358d2dddd62"
                    ]
                },
                {
                    "command": [
                        "exists deltatemp'.",
                        "VernacExtend",
                        "32f6bf7d4a17fa189749a96d7653f2bd27de24b5"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact deltatemp'.(cond_pos).",
                        "VernacExtend",
                        "bde04988da7fbdafe05aebaffcc450dee60f1716"
                    ]
                },
                {
                    "command": [
                        "intros htemp cond.",
                        "VernacExtend",
                        "19acfd5296a0559f6a7ae863bbb898db7870c540"
                    ]
                },
                {
                    "command": [
                        "apply (Htemp' htemp).",
                        "VernacExtend",
                        "146915b9376a1af7c9f45683d8dfc110dda77908"
                    ]
                },
                {
                    "command": [
                        "exact (proj1 cond).",
                        "VernacExtend",
                        "797c3ff561dc19750c36cdabba2c58697ff05cfc"
                    ]
                },
                {
                    "command": [
                        "replace (htemp) with (htemp - 0).",
                        "VernacExtend",
                        "c57ef7441f60731f3a0b4237112c99fd9e393a0f"
                    ]
                },
                {
                    "command": [
                        "exact (proj2 cond).",
                        "VernacExtend",
                        "66b5eb1968734f8305db6f6321f00fac0bd58754"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (Premisse2 : l <> 0).",
                        "VernacExtend",
                        "2d87a404daccc22ecdc6a03778b8207f581f42cb"
                    ]
                },
                {
                    "command": [
                        "intro l_null.",
                        "VernacExtend",
                        "e4d37100cd78c267d265189fe679723ab69d249d"
                    ]
                },
                {
                    "command": [
                        "rewrite l_null in Hl.",
                        "VernacExtend",
                        "96aa21bb5dbc16df0bd0be68a7ccf8242e11fc5d"
                    ]
                },
                {
                    "command": [
                        "apply df_neq.",
                        "VernacExtend",
                        "2dbcf09b8a4c443576d38d3aa31c8f53b54e1ca8"
                    ]
                },
                {
                    "command": [
                        "rewrite derive_pt_eq.",
                        "VernacExtend",
                        "14e10c78ae737af79ce80d632a141224a386cdc4"
                    ]
                },
                {
                    "command": [
                        "exact Hl.",
                        "VernacExtend",
                        "726a6911ca781f5fae08f27dbd5c9838368eca79"
                    ]
                },
                {
                    "command": [
                        "elim (Hlinv' Premisse Premisse2 eps eps_pos).",
                        "VernacExtend",
                        "81d1619ff8721150b1c079f2104d4d27f947e04b"
                    ]
                },
                {
                    "command": [
                        "intros alpha cond.",
                        "VernacExtend",
                        "b4d9e8cc30665a4563fb166da238bfdaa1bf8a37"
                    ]
                },
                {
                    "command": [
                        "assert (alpha_pos := proj1 cond) ; assert (inv_cont := proj2 cond) ; clear cond.",
                        "VernacExtend",
                        "451e15621a7978acda147e0f71e463c056fd7b2b"
                    ]
                },
                {
                    "command": [
                        "unfold derivable, derivable_pt, derivable_pt_abs, derivable_pt_lim in Prf.",
                        "VernacExtend",
                        "11617c3e4e505da8364c18860736f70cf646b00a"
                    ]
                },
                {
                    "command": [
                        "elim (Hl eps eps_pos).",
                        "VernacExtend",
                        "232e3d1fce9afaffdb11d2edd297313c620d2c5a"
                    ]
                },
                {
                    "command": [
                        "intros delta f_deriv.",
                        "VernacExtend",
                        "b424b4e93fad74dcb247d6bc8d25017a4b37f08c"
                    ]
                },
                {
                    "command": [
                        "assert (g_cont := g_cont_pur).",
                        "VernacExtend",
                        "c627344f4b41768b078a2fcf1eae3d0f65b91bcb"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt, continue_in, limit1_in, limit_in in g_cont.",
                        "VernacExtend",
                        "ac7f7cefb55adb44fc84d9146d6568475a9e8458"
                    ]
                },
                {
                    "command": [
                        "pose (mydelta := Rmin delta alpha).",
                        "VernacExtend",
                        "7c28a861e4ac5c98d7963f99033cd471c03637b5"
                    ]
                },
                {
                    "command": [
                        "assert (mydelta_pos : mydelta > 0).",
                        "VernacExtend",
                        "02ac4901e79c72c65c328efd1c4b2380a680afba"
                    ]
                },
                {
                    "command": [
                        "unfold mydelta, Rmin.",
                        "VernacExtend",
                        "b1ff1acbf33d220d51ad9bab32494ac7ccc974ca"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec delta alpha).",
                        "VernacExtend",
                        "c89161d472c90ab28acb925d60ef4589e7c7eb30"
                    ]
                },
                {
                    "command": [
                        "intro ; exact (delta.(cond_pos)).",
                        "VernacExtend",
                        "c098ee664d949ab4453b07077a745296632eabf4"
                    ]
                },
                {
                    "command": [
                        "intro ; exact alpha_pos.",
                        "VernacExtend",
                        "35d92438116795c71b5b992f5311af836dbcb352"
                    ]
                },
                {
                    "command": [
                        "elim (g_cont mydelta mydelta_pos).",
                        "VernacExtend",
                        "38a376fcaa4045e842a26bdc98feff2b346969c2"
                    ]
                },
                {
                    "command": [
                        "intros delta' new_g_cont.",
                        "VernacExtend",
                        "03dbf2c8ce4566e1fe1106d6ff37b1f17865800e"
                    ]
                },
                {
                    "command": [
                        "assert(delta'_pos := proj1 (new_g_cont)).",
                        "VernacExtend",
                        "7c19caf5797a3a594051f0fbcb23d1e96dab596c"
                    ]
                },
                {
                    "command": [
                        "clear g_cont ; assert (g_cont := proj2 (new_g_cont)) ; clear new_g_cont.",
                        "VernacExtend",
                        "cf6fed4e5e44a9514fc250efdb7211cfad4ebc45"
                    ]
                },
                {
                    "command": [
                        "pose (mydelta'' := Rmin delta' (Rmin (x - lb) (ub - x))).",
                        "VernacExtend",
                        "55a5ad370b8e876ce8d0197f7080a730f5ec9a4a"
                    ]
                },
                {
                    "command": [
                        "assert(mydelta''_pos : mydelta'' > 0).",
                        "VernacExtend",
                        "a12ce933ddb099e16015b812a1ebfc5572f223a7"
                    ]
                },
                {
                    "command": [
                        "unfold mydelta''.",
                        "VernacExtend",
                        "f79cb924b75efb28ea44e33563764a5cd1b24546"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_pos ; [intuition | apply Rmin_pos] ; apply Rgt_minus ; intuition.",
                        "VernacExtend",
                        "b0b02630cee603106783223fc1919e1fa04ebc32"
                    ]
                },
                {
                    "command": [
                        "pose (delta'' := mkposreal mydelta'' mydelta''_pos: posreal).",
                        "VernacExtend",
                        "e204cd5a5da14090b38b845d9887e8087f301881"
                    ]
                },
                {
                    "command": [
                        "exists delta''.",
                        "VernacExtend",
                        "35acd61c7c2beccfc8c8ee248b8caaa880d61961"
                    ]
                },
                {
                    "command": [
                        "intros h h_neq h_le_delta'.",
                        "VernacExtend",
                        "2d82f673c6aea58df9ea818f64b2f46500e38468"
                    ]
                },
                {
                    "command": [
                        "assert (lb <= x +h <= ub).",
                        "VernacExtend",
                        "954782e6e449de3260834efa5949db6e239d10e6"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma2 : forall x y, Rabs x < Rabs y -> y > 0 -> x < y).",
                        "VernacExtend",
                        "7e87c5e566c4012e7ae4f6707d5bf1d3d88f759f"
                    ]
                },
                {
                    "command": [
                        "intros m n Hyp_abs y_pos.",
                        "VernacExtend",
                        "44d08cae3a41f6c822af519f6fb46ec35917320e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=Rabs n).",
                        "VernacExtend",
                        "6d62616498dc0e589e4b7ecb573c24e1349a999b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=Rabs m) ; [ | assumption] ; apply RRle_abs.",
                        "VernacExtend",
                        "fc801347c47a481078c94b35aa6f679773cf62b1"
                    ]
                },
                {
                    "command": [
                        "apply Req_le ; apply Rabs_right ; apply Rgt_ge ; assumption.",
                        "VernacExtend",
                        "ed0330eff8cde76bf07edb13722e5230eb2090d8"
                    ]
                },
                {
                    "command": [
                        "assert (lb <= x + h <= ub).",
                        "VernacExtend",
                        "954782e6e449de3260834efa5949db6e239d10e6"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma : forall x y z, -z <= y - x -> x <= y + z).",
                        "VernacExtend",
                        "3f4501aa2d0b65c4f2700fd3c13175e177e9ea5b"
                    ]
                },
                {
                    "command": [
                        "intros ; lra.",
                        "VernacExtend",
                        "449a153f406381cfb8ab107f551a2c789b996417"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma.",
                        "VernacExtend",
                        "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; apply Sublemma2.",
                        "VernacExtend",
                        "ab7ccd717ac2877afd34b9091afb25dbbfa148b4"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "4585414329a0ef757c809f4a4dee3b3a09307b5c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=x-lb) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (x - lb) (ub - x)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta' (Rmin (x - lb) (ub - x))).",
                        "VernacExtend",
                        "be53242c0ba21f247486fceb60e7b46fb004b127"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=delta'').",
                        "VernacExtend",
                        "8da27a8a8ce6c310e85fef2ba8c5119d31963e88"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_minus.",
                        "VernacExtend",
                        "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma : forall x y z, y <= z - x -> x + y <= z).",
                        "VernacExtend",
                        "4c48ba659b47562f5fa3ff6551689cc6daac25fe"
                    ]
                },
                {
                    "command": [
                        "intros ; lra.",
                        "VernacExtend",
                        "449a153f406381cfb8ab107f551a2c789b996417"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma.",
                        "VernacExtend",
                        "56a84a2b8428a54c0c99e38cc299f2cdfdba8cd8"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; apply Sublemma2.",
                        "VernacExtend",
                        "ab7ccd717ac2877afd34b9091afb25dbbfa148b4"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=ub-x) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (x - lb) (ub - x)) ; [| apply Rmin_r] ; apply Rlt_le_trans with (r2:=Rmin delta' (Rmin (x - lb) (ub - x))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "e33bf12a4bc857fa57ae8f7a6f0fcdb733210c2b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=delta'').",
                        "VernacExtend",
                        "8da27a8a8ce6c310e85fef2ba8c5119d31963e88"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:=Rmin delta' (Rmin (x - lb) (ub - x))).",
                        "VernacExtend",
                        "390869bb7a9c59d5d01d2424377b431bafa742c6"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:=Rmin (x - lb) (ub - x)).",
                        "VernacExtend",
                        "1626a7bf67f81dfb8d0cb5f5f4f43cf4d0296dda"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "replace ((g (x + h) - g x) / h) with (1/ (h / (g (x + h) - g x))).",
                        "VernacExtend",
                        "9dc2d52836893671ff0fcc8117c38870570e59ab"
                    ]
                },
                {
                    "command": [
                        "assert (Hrewr : h = (comp f g ) (x+h) - (comp f g) x).",
                        "VernacExtend",
                        "a3a8013fd598a86eb8797c4e028ffcd946c2381a"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g.",
                        "VernacExtend",
                        "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g ; unfold id.",
                        "VernacExtend",
                        "6592b4a09a1f7a74826bec38886ee8eb77619a89"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm ; unfold Rminus ; rewrite Rplus_assoc ; rewrite Rplus_opp_r.",
                        "VernacExtend",
                        "4f578a81b3cd46ccaad943883e97829c93e6dcb3"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "split ; [|intuition].",
                        "VernacExtend",
                        "fbf33aa8b4a9ec27458829141bc4648208997c34"
                    ]
                },
                {
                    "command": [
                        "assert (Sublemma : forall x y z, - z <= y - x -> x <= y + z).",
                        "VernacExtend",
                        "3f4501aa2d0b65c4f2700fd3c13175e177e9ea5b"
                    ]
                },
                {
                    "command": [
                        "intros ; lra.",
                        "VernacExtend",
                        "449a153f406381cfb8ab107f551a2c789b996417"
                    ]
                },
                {
                    "command": [
                        "apply Sublemma ; apply Rlt_le ; apply Sublemma2.",
                        "VernacExtend",
                        "1616376d34eb833160aab93fd69287e6740a4655"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "4585414329a0ef757c809f4a4dee3b3a09307b5c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=x-lb) ; [| apply RRle_abs] ; apply Rlt_le_trans with (r2:=Rmin (x - lb) (ub - x)) ; [| apply Rmin_l] ; apply Rlt_le_trans with (r2:=Rmin delta' (Rmin (x - lb) (ub - x))) ; [| apply Rmin_r] ; assumption.",
                        "VernacExtend",
                        "2aeab382305305e48cae3c273176c9821ca48a5a"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_minus.",
                        "VernacExtend",
                        "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse.",
                        "VernacExtend",
                        "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
                    ]
                },
                {
                    "command": [
                        "assert (Hf : g (x+h) = g x) by intuition.",
                        "VernacExtend",
                        "3835803b737362aac1643ba2954e5cadb51c74b6"
                    ]
                },
                {
                    "command": [
                        "assert ((comp f g) (x+h) = (comp f g) x).",
                        "VernacExtend",
                        "6ef64a11bc31ba977347346b868e13b7a34f089b"
                    ]
                },
                {
                    "command": [
                        "unfold comp ; rewrite Hf ; intuition.",
                        "VernacExtend",
                        "ddff8a67f3f7fae1152f8f587c5e7347c58cb25e"
                    ]
                },
                {
                    "command": [
                        "assert (Main : x+h = x).",
                        "VernacExtend",
                        "71a24bce2af871f6f6d1dfd8fa2fc16bd7c0e84d"
                    ]
                },
                {
                    "command": [
                        "replace (x +h) with (id (x+h)) by intuition.",
                        "VernacExtend",
                        "ea6579a6988b10f8a937e364925940f1bb48fb82"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : x = id x) by intuition ; rewrite Temp at 2 ; clear Temp.",
                        "VernacExtend",
                        "0f4a57823ada63eedd3ef1ae7950be889df932be"
                    ]
                },
                {
                    "command": [
                        "rewrite <- f_eq_g.",
                        "VernacExtend",
                        "c7f9b5fdc0d27275419000b1e25c4e2b6b89aa2a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- f_eq_g.",
                        "VernacExtend",
                        "c7f9b5fdc0d27275419000b1e25c4e2b6b89aa2a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (h = 0).",
                        "VernacExtend",
                        "2ae7349a7e0c90cada7beb4ae7b9ab2e92f8f4b1"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_0_r_uniq with (r:=x) ; assumption.",
                        "VernacExtend",
                        "450a53df9ed53c9663cb80cec85e530827eff08a"
                    ]
                },
                {
                    "command": [
                        "apply h_neq ; assumption.",
                        "VernacExtend",
                        "f67fc120188fa4e845a7e8585f19065a3fb94e3c"
                    ]
                },
                {
                    "command": [
                        "replace ((g (x + h) - g x) / h) with (1/ (h / (g (x + h) - g x))).",
                        "VernacExtend",
                        "9dc2d52836893671ff0fcc8117c38870570e59ab"
                    ]
                },
                {
                    "command": [
                        "assert (Hrewr : h = (comp f g ) (x+h) - (comp f g) x).",
                        "VernacExtend",
                        "a3a8013fd598a86eb8797c4e028ffcd946c2381a"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g.",
                        "VernacExtend",
                        "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g.",
                        "VernacExtend",
                        "f3db4ac73bc34821cab33da92ddd748f8ebfca39"
                    ]
                },
                {
                    "command": [
                        "unfold id ; rewrite Rplus_comm ; unfold Rminus ; rewrite Rplus_assoc ; rewrite Rplus_opp_r ; intuition.",
                        "VernacExtend",
                        "081b0133666c95aca2d9040ba586de66693f19c0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrewr at 1.",
                        "VernacExtend",
                        "8106ecf2d8d00a8b3f42e1e1bdb1b00d98d9f769"
                    ]
                },
                {
                    "command": [
                        "unfold comp.",
                        "VernacExtend",
                        "b8c595984ddc3a4857a83b585333ec689de2b811"
                    ]
                },
                {
                    "command": [
                        "replace (g(x+h)) with (g x + (g (x+h) - g(x))) by field.",
                        "VernacExtend",
                        "3706f5af6c4e9da99d1b5a03d17613b817d4c5a6"
                    ]
                },
                {
                    "command": [
                        "pose (h':=g (x+h) - g x).",
                        "VernacExtend",
                        "597080af9b25905a7607f280883e124b94b7c041"
                    ]
                },
                {
                    "command": [
                        "replace (g (x+h) - g x) with h' by intuition.",
                        "VernacExtend",
                        "fce6ba35264f8873b572e2653d803a09645fb3fc"
                    ]
                },
                {
                    "command": [
                        "replace (g x + h' - g x) with h' by field.",
                        "VernacExtend",
                        "50c2d62d974a905d4638c47a21948a4245e94c81"
                    ]
                },
                {
                    "command": [
                        "assert (h'_neq : h' <> 0).",
                        "VernacExtend",
                        "bd809e4bdf7bdc5800d77162f0d92b62e4e3d059"
                    ]
                },
                {
                    "command": [
                        "unfold h'.",
                        "VernacExtend",
                        "a7002d3b39723cc4c7317415b9634ef0d33f515f"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse.",
                        "VernacExtend",
                        "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in Hfalse ; apply Rminus_diag_uniq in Hfalse.",
                        "VernacExtend",
                        "58f85a1f15a291496a11b829c19af615bd4b1c5a"
                    ]
                },
                {
                    "command": [
                        "assert (Hfalse' : (comp f g) (x+h) = (comp f g) x).",
                        "VernacExtend",
                        "a3489fac64ceb0f44407cb6c4dfbf45e30f2e5de"
                    ]
                },
                {
                    "command": [
                        "intros ; unfold comp ; rewrite Hfalse ; trivial.",
                        "VernacExtend",
                        "a964dab52382d7906f5dc25391819a41e4f802d9"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g in Hfalse' ; rewrite f_eq_g in Hfalse'.",
                        "VernacExtend",
                        "37327fb7fff022c94bfdbb8cd961aa066a3812ee"
                    ]
                },
                {
                    "command": [
                        "unfold id in Hfalse'.",
                        "VernacExtend",
                        "d9c42d3b395c114fe5f1bfb480b41d179a57f7b2"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_0_r_uniq in Hfalse'.",
                        "VernacExtend",
                        "677b0517a2c1e8c5af54c553b4b9486115d2301a"
                    ]
                },
                {
                    "command": [
                        "apply h_neq ; exact Hfalse'.",
                        "VernacExtend",
                        "df6a64ea88834f6c0937f163a02b914ec3dccbbd"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv at 1 3; rewrite Rmult_1_l ; rewrite Rmult_1_l.",
                        "VernacExtend",
                        "45d8b5c04173dfdfddfa94c980e0a6785f883c3c"
                    ]
                },
                {
                    "command": [
                        "apply inv_cont.",
                        "VernacExtend",
                        "1e947a525235a0b741899c0d4c61b24181f762a6"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exact h'_neq.",
                        "VernacExtend",
                        "74bbe0446309efee6558259fb1a023c49bdad9a5"
                    ]
                },
                {
                    "command": [
                        "rewrite Rminus_0_r.",
                        "VernacExtend",
                        "f41d2c9a1ab0030a599c576fc397975a2d0d5b33"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt, continue_in, limit1_in, limit_in in g_cont_pur.",
                        "VernacExtend",
                        "7382ef6a183f72ab256858b8f0f546592a7a6f61"
                    ]
                },
                {
                    "command": [
                        "elim (g_cont_pur mydelta mydelta_pos).",
                        "VernacExtend",
                        "ecaf49d314938008877cb084a845b9e7a12bdcef"
                    ]
                },
                {
                    "command": [
                        "intros delta3 cond3.",
                        "VernacExtend",
                        "36c2e8530c20fe312232fedab3160508c8bc5214"
                    ]
                },
                {
                    "command": [
                        "unfold dist in cond3 ; simpl in cond3 ; unfold R_dist in cond3.",
                        "VernacExtend",
                        "7340646f7200b11ca5c6e8417820f71ebe0e877c"
                    ]
                },
                {
                    "command": [
                        "unfold h'.",
                        "VernacExtend",
                        "a7002d3b39723cc4c7317415b9634ef0d33f515f"
                    ]
                },
                {
                    "command": [
                        "assert (mydelta_le_alpha : mydelta <= alpha).",
                        "VernacExtend",
                        "71f91483a1be451e5553f91db3911622249f9b57"
                    ]
                },
                {
                    "command": [
                        "unfold mydelta, Rmin ; case (Rle_dec delta alpha).",
                        "VernacExtend",
                        "3089a03bf457274b50104df4d3b2a7a811e93f41"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "intro ; intuition.",
                        "VernacExtend",
                        "769b1db961c2f04837fb6b20d4c465c73f699098"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=mydelta).",
                        "VernacExtend",
                        "c739f13b7c67aa7a5da2bda1ce42f3d57cb9e7ff"
                    ]
                },
                {
                    "command": [
                        "unfold dist in g_cont ; simpl in g_cont ; unfold R_dist in g_cont ; apply g_cont.",
                        "VernacExtend",
                        "1416d5c531b6664a8e3be52cdbea0c6c89fdb8a8"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold D_x ; simpl.",
                        "VernacExtend",
                        "cf97532f2f836a730eaee88c71104b30b515cad2"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold no_cond ; trivial.",
                        "VernacExtend",
                        "0cebc033adf50dadf224876f549f820ac5b59adb"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse ; apply h_neq.",
                        "VernacExtend",
                        "6fc9f3a8c1dfdf8336fbfdf1edf563563485d632"
                    ]
                },
                {
                    "command": [
                        "apply (Rplus_0_r_uniq x).",
                        "VernacExtend",
                        "f5664fa65a4a7233ac826ce77fb0ed07a493abd4"
                    ]
                },
                {
                    "command": [
                        "symmetry ; assumption.",
                        "VernacExtend",
                        "936f544fa969baad9c600ccc844230fa4d067c8b"
                    ]
                },
                {
                    "command": [
                        "replace (x + h - x) with h by field.",
                        "VernacExtend",
                        "2c4530150d0741a9cd24402c2721564fc615f064"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=delta'').",
                        "VernacExtend",
                        "8da27a8a8ce6c310e85fef2ba8c5119d31963e88"
                    ]
                },
                {
                    "command": [
                        "assumption ; unfold delta''.",
                        "VernacExtend",
                        "618456c72a86456b8f7ef12349bca355f9f806c5"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:=mydelta'').",
                        "VernacExtend",
                        "408ff8ce2c8687724b6230752de41f0490a0f09e"
                    ]
                },
                {
                    "command": [
                        "apply Req_le.",
                        "VernacExtend",
                        "b69ffc9461f465218c69f379ac293728d3f8e7bd"
                    ]
                },
                {
                    "command": [
                        "unfold delta''.",
                        "VernacExtend",
                        "12ec0921d2fc4d3a2c1819091c4980ea1710ae38"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "field ; split.",
                        "VernacExtend",
                        "324ff30f42c1de2f646ff50f526abfebe8f956e1"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse ; apply h_neq.",
                        "VernacExtend",
                        "6fc9f3a8c1dfdf8336fbfdf1edf563563485d632"
                    ]
                },
                {
                    "command": [
                        "apply (Rplus_0_r_uniq x).",
                        "VernacExtend",
                        "f5664fa65a4a7233ac826ce77fb0ed07a493abd4"
                    ]
                },
                {
                    "command": [
                        "assert (Hfin : (comp f g) (x+h) = (comp f g) x).",
                        "VernacExtend",
                        "f638df3ef6afb735cb24a26585aa8b36ea340466"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_diag_uniq in Hfalse.",
                        "VernacExtend",
                        "f3dbed3a471ed1625bad0b06c34d96fbf9f4d1eb"
                    ]
                },
                {
                    "command": [
                        "unfold comp.",
                        "VernacExtend",
                        "b8c595984ddc3a4857a83b585333ec689de2b811"
                    ]
                },
                {
                    "command": [
                        "rewrite Hfalse ; reflexivity.",
                        "VernacExtend",
                        "8b8c7c1d9f192cca00397c683f0b2fbf715971f9"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g in Hfin.",
                        "VernacExtend",
                        "799cd850ef832829e7fc5e08b1a99f4676ffe283"
                    ]
                },
                {
                    "command": [
                        "rewrite f_eq_g in Hfin.",
                        "VernacExtend",
                        "799cd850ef832829e7fc5e08b1a99f4676ffe283"
                    ]
                },
                {
                    "command": [
                        "unfold id in Hfin.",
                        "VernacExtend",
                        "732e5ba1c4b1c4ab66e9c9807c1f2cffeb345abb"
                    ]
                },
                {
                    "command": [
                        "exact Hfin.",
                        "VernacExtend",
                        "e120a44220ca9e3d5d17d0efae1764aae68b737c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_recip_interv_prelim0",
            "line_nb": 833,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub x Prf g_cont_pt lb_lt_ub x_encad Prg_incr f_eq_g Df_neq.",
                        "VernacExtend",
                        "ed26b7f5b5b64fcb8823d5b41317faf8a916e052"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt, derivable_pt_abs.",
                        "VernacExtend",
                        "2de82740ebbd0859a58ff3ff7ffea726de84f5fe"
                    ]
                },
                {
                    "command": [
                        "exists (1 / derive_pt f (g x) (Prf (g x) Prg_incr)).",
                        "VernacExtend",
                        "abcdb7901a83eb6b59e6e73fd608b630c83b897a"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_recip_interv ; assumption.",
                        "VernacExtend",
                        "efc07f10e212240de21a18e11b277fc99da40331"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_recip_interv_prelim1",
            "line_nb": 839,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub x lb_lt_ub x_encad f_eq_g g_ok f_incr f_derivable.",
                        "VernacExtend",
                        "5fa69ff80b172c5dbcb9cceac93ad81e9b10031f"
                    ]
                },
                {
                    "command": [
                        "apply f_derivable.",
                        "VernacExtend",
                        "41fdefee63d23467b7f32a581007addf3c894941"
                    ]
                },
                {
                    "command": [
                        "assert (Left_inv := leftinv_is_rightinv_interv f g lb ub f_incr f_eq_g g_ok).",
                        "VernacExtend",
                        "08cba74df0d660fd3a9c3a7bc43f69a9b8d8bac0"
                    ]
                },
                {
                    "command": [
                        "replace lb with ((comp g f) lb).",
                        "VernacExtend",
                        "4b85ce94112859e38ca22f2b17300b24589a9019"
                    ]
                },
                {
                    "command": [
                        "replace ub with ((comp g f) ub).",
                        "VernacExtend",
                        "6e166fd9960c426fbc28b78085bfec4546ae937c"
                    ]
                },
                {
                    "command": [
                        "unfold comp.",
                        "VernacExtend",
                        "b8c595984ddc3a4857a83b585333ec689de2b811"
                    ]
                },
                {
                    "command": [
                        "assert (Temp:= f_incr_implies_g_incr_interv f g lb ub lb_lt_ub f_incr f_eq_g g_ok).",
                        "VernacExtend",
                        "8cddbe4ce53d0303b9eeeef9eebc2fcc961f2d56"
                    ]
                },
                {
                    "command": [
                        "split ; apply Rlt_le ; apply Temp ; intuition.",
                        "VernacExtend",
                        "b22c29d38581ebd7b8c9be2482b37074ccbb63da"
                    ]
                },
                {
                    "command": [
                        "apply Left_inv ; intuition.",
                        "VernacExtend",
                        "873f27c061609913877169210d84091bca5a0dd4"
                    ]
                },
                {
                    "command": [
                        "apply Left_inv ; intuition.",
                        "VernacExtend",
                        "873f27c061609913877169210d84091bca5a0dd4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_recip_interv",
            "line_nb": 851,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub x lb_lt_ub x_encad f_eq_g g_wf f_incr f_derivable Df_neq.",
                        "VernacExtend",
                        "fc83cde2601334b1ca51a7b8fc1229c1589f026f"
                    ]
                },
                {
                    "command": [
                        "assert(g_incr : g (f lb) < g x < g (f ub)).",
                        "VernacExtend",
                        "5996cd35065ce15979eebbfea49bac4dfd94cfd8"
                    ]
                },
                {
                    "command": [
                        "assert (Temp:= f_incr_implies_g_incr_interv f g lb ub lb_lt_ub f_incr f_eq_g g_wf).",
                        "VernacExtend",
                        "9f8b83f3b6466b663de026129cb9e7229a4eefdc"
                    ]
                },
                {
                    "command": [
                        "split ; apply Temp ; intuition.",
                        "VernacExtend",
                        "e2ceecceaaf0b5898bb46c33258d37ffda45b810"
                    ]
                },
                {
                    "command": [
                        "exact (proj1 x_encad).",
                        "VernacExtend",
                        "820b80143dc9105ffd67234df6d4df0f04280e37"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; exact (proj2 x_encad).",
                        "VernacExtend",
                        "c01dd9bef3c44ce20d18205e67e96b40c4c5c2d1"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; exact (proj1 x_encad).",
                        "VernacExtend",
                        "4634abb25e33bc6af97f5133898a97d8927f81b0"
                    ]
                },
                {
                    "command": [
                        "exact (proj2 x_encad).",
                        "VernacExtend",
                        "7f53120a84240bc2ff52451497fc17d7d34580c0"
                    ]
                },
                {
                    "command": [
                        "assert(g_incr2 : g (f lb) <= g x <= g (f ub)).",
                        "VernacExtend",
                        "9a9131fbcb2d8c560d5ede405d8f7cdec4cba951"
                    ]
                },
                {
                    "command": [
                        "split ; apply Rlt_le ; intuition.",
                        "VernacExtend",
                        "a040c3e1ac6128768917a064d0c36385cbbffcdc"
                    ]
                },
                {
                    "command": [
                        "assert (g_eq_f := leftinv_is_rightinv_interv f g lb ub f_incr f_eq_g g_wf).",
                        "VernacExtend",
                        "1ab36c02d12ac690d33731891dfa88ecbb1e88c2"
                    ]
                },
                {
                    "command": [
                        "unfold comp, id in g_eq_f.",
                        "VernacExtend",
                        "58b85b560aeeb67a1e4228153e2ea2e523e22353"
                    ]
                },
                {
                    "command": [
                        "assert (f_derivable2 : forall a : R, g (f lb) <= a <= g (f ub) -> derivable_pt f a).",
                        "VernacExtend",
                        "ee179f53ad20da4dfde9c68774153adbce7c9693"
                    ]
                },
                {
                    "command": [
                        "intros a a_encad ; apply f_derivable.",
                        "VernacExtend",
                        "b59c457d54d44d62475253d49b2c0bf53fc3a82f"
                    ]
                },
                {
                    "command": [
                        "rewrite g_eq_f in a_encad ; rewrite g_eq_f in a_encad ; intuition.",
                        "VernacExtend",
                        "acf5bffcbd60fb02d6f04135415f6e88c3046cd4"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_recip_interv_prelim0 with (f:=f) (lb:=f lb) (ub:=f ub) (Prf:=f_derivable2) (Prg_incr:=g_incr2).",
                        "VernacExtend",
                        "99999210614d44a64624c42f8f6da501076baa97"
                    ]
                },
                {
                    "command": [
                        "apply continuity_pt_recip_interv with (f:=f) (lb:=lb) (ub:=ub) ; intuition.",
                        "VernacExtend",
                        "13b649c84be3afa6ffcd766df198b696de49453f"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt ; apply f_derivable ; intuition.",
                        "VernacExtend",
                        "f5c6b68d32fd05a294c11d4740cbc1c107153f1f"
                    ]
                },
                {
                    "command": [
                        "exact (proj1 x_encad).",
                        "VernacExtend",
                        "820b80143dc9105ffd67234df6d4df0f04280e37"
                    ]
                },
                {
                    "command": [
                        "exact (proj2 x_encad).",
                        "VernacExtend",
                        "7f53120a84240bc2ff52451497fc17d7d34580c0"
                    ]
                },
                {
                    "command": [
                        "apply f_incr ; intuition.",
                        "VernacExtend",
                        "078b90e938d81121751baa2b4d7bd55a9cba4100"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros x0 x0_encad ; apply f_eq_g ; intuition.",
                        "VernacExtend",
                        "f3cc0b5cc036e14ea8fdc13fc127e9af97a29627"
                    ]
                },
                {
                    "command": [
                        "rewrite pr_nu_var2_interv with (g:=f) (lb:=lb) (ub:=ub) (pr2:=derivable_pt_recip_interv_prelim1 f g lb ub x lb_lt_ub x_encad f_eq_g g_wf f_incr f_derivable) ; [| |rewrite g_eq_f in g_incr ; rewrite g_eq_f in g_incr| ] ; intuition.",
                        "VernacExtend",
                        "3037201c4ed4f12292c8f7518bc80a5e7afd7d3c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_recip_interv_prelim0",
            "line_nb": 877,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub x Prf Prg lb_lt_ub x_encad local_recip Df_neq.",
                        "VernacExtend",
                        "ef378484a2c21305dfd78fedb061ad6c1382548d"
                    ]
                },
                {
                    "command": [
                        "replace (derive_pt g x Prg) with ((derive_pt g x Prg) * (derive_pt f (g x) Prf) * / (derive_pt f (g x) Prf)).",
                        "VernacExtend",
                        "3487e3cf39818f41b501c4a09651c52a2211c211"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm _ (/ derive_pt f (g x) Prf)).",
                        "VernacExtend",
                        "1569340ceb4f4deeee2a949a429513038fad8342"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm _ (/ derive_pt f (g x) Prf)).",
                        "VernacExtend",
                        "1569340ceb4f4deeee2a949a429513038fad8342"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_compat_l.",
                        "VernacExtend",
                        "bd73500ca5d8c6a128502627eccd82ae7c925a31"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm.",
                        "VernacExtend",
                        "fd520335d31c715c2f686e2bdc0b380c493b04c0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- derive_pt_comp.",
                        "VernacExtend",
                        "c2da22fb63cd462c47301cd59164bfc945b81709"
                    ]
                },
                {
                    "command": [
                        "assert (x_encad2 : lb <= x <= ub) by intuition.",
                        "VernacExtend",
                        "90ce9ab954d62c4962fdf58ecdcb0feb61d75f65"
                    ]
                },
                {
                    "command": [
                        "rewrite pr_nu_var2_interv with (g:=id) (pr2:= derivable_pt_id_interv lb ub x x_encad2) (lb:=lb) (ub:=ub) ; [reg| | |] ; assumption.",
                        "VernacExtend",
                        "4289d1271a53b07058432a02a51e848e0bfbe8dd"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc, Rinv_r.",
                        "VernacExtend",
                        "a3d236d97f359e1934780760be93e7b7d1a0aba9"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_recip_interv_prelim1_0",
            "line_nb": 892,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g.",
                        "VernacExtend",
                        "c521a125c1d9a20c71e335b1a50aecb758b446cc"
                    ]
                },
                {
                    "command": [
                        "assert (Temp:= f_incr_implies_g_incr_interv f g lb ub lb_lt_ub f_incr f_eq_g g_wf).",
                        "VernacExtend",
                        "9f8b83f3b6466b663de026129cb9e7229a4eefdc"
                    ]
                },
                {
                    "command": [
                        "assert (Left_inv := leftinv_is_rightinv_interv f g lb ub f_incr f_eq_g g_wf).",
                        "VernacExtend",
                        "898df920683d9739c7040c17ce389aec40138400"
                    ]
                },
                {
                    "command": [
                        "unfold comp, id in Left_inv.",
                        "VernacExtend",
                        "4b36552b0f24560c9e1a2fa88c9888dfc93e1fc2"
                    ]
                },
                {
                    "command": [
                        "split ; [rewrite <- Left_inv with (x:=lb) | rewrite <- Left_inv ].",
                        "VernacExtend",
                        "aad59a7cae2f285cfbeb7b6855e67d4f69432c12"
                    ]
                },
                {
                    "command": [
                        "apply Temp ; intuition.",
                        "VernacExtend",
                        "93343700b3d6fd90d729cfe2861e506d6ca39ffb"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply Temp ; intuition.",
                        "VernacExtend",
                        "93343700b3d6fd90d729cfe2861e506d6ca39ffb"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_recip_interv_prelim1_1",
            "line_nb": 903,
            "steps": [
                {
                    "command": [
                        "intros f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g.",
                        "VernacExtend",
                        "c521a125c1d9a20c71e335b1a50aecb758b446cc"
                    ]
                },
                {
                    "command": [
                        "assert (Temp := derive_pt_recip_interv_prelim1_0 f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g).",
                        "VernacExtend",
                        "a7638e5a4d055047feff686242c321a614a9190f"
                    ]
                },
                {
                    "command": [
                        "split ; apply Rlt_le ; intuition.",
                        "VernacExtend",
                        "a040c3e1ac6128768917a064d0c36385cbbffcdc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_recip_interv",
            "line_nb": 908,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert(g_incr := (derive_pt_recip_interv_prelim1_1 f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g)).",
                        "VernacExtend",
                        "462cdad5895dc8f91a01e86c1eec198a13631d8f"
                    ]
                },
                {
                    "command": [
                        "apply derive_pt_recip_interv_prelim0 with (lb:=f lb) (ub:=f ub) ; [intuition |assumption | intuition |].",
                        "VernacExtend",
                        "e0cc3dc055e9a6d1ea35d9b2e5f69f4b4e51fe14"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse ; apply Df_neq.",
                        "VernacExtend",
                        "f65af684ac3eaf5b6ebbfe25784318b948704777"
                    ]
                },
                {
                    "command": [
                        "rewrite pr_nu_var2_interv with (g:=f) (lb:=lb) (ub:=ub) (pr2:= (Prf (g x) (derive_pt_recip_interv_prelim1_1 f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g))) ; [intuition | intuition | | intuition].",
                        "VernacExtend",
                        "15dc0f7032beae927cb215e633849af6ced9ad29"
                    ]
                },
                {
                    "command": [
                        "exact (derive_pt_recip_interv_prelim1_0 f g lb ub x lb_lt_ub x_encad f_incr g_wf f_eq_g).",
                        "VernacExtend",
                        "dd1e6fad0cb93bc1e5ba244fc8df605802b502d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ub_lt_2_pos",
            "line_nb": 916,
            "steps": [
                {
                    "command": [
                        "intros x ub lb lb_lt_x x_lt_ub.",
                        "VernacExtend",
                        "7df4c0afec685f3c4e8abed0bacf52a2d6c758f9"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "mkposreal_lb_ub",
            "line_nb": 920,
            "steps": [
                {
                    "command": [
                        "apply (mkposreal ((ub-lb)/2) (ub_lt_2_pos x ub lb lb_lt_x x_lt_ub)).",
                        "VernacExtend",
                        "a088cadb298287cc8f79f11acab573e8f2410045"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_CVU",
            "line_nb": 923,
            "steps": [
                {
                    "command": [
                        "intros fn fn' f g x c' r xinb Dfn_eq_fn' fn_CV_f fn'_CVU_g g_cont eps eps_pos.",
                        "VernacExtend",
                        "7a6cb69eaed59147463d5d4af6e41432cf37db7d"
                    ]
                },
                {
                    "command": [
                        "assert (eps_8_pos : 0 < eps / 8) by lra.",
                        "VernacExtend",
                        "36bcbedfb6c6e372b817b81ff419cdddb3934818"
                    ]
                },
                {
                    "command": [
                        "elim (g_cont x xinb _ eps_8_pos) ; clear g_cont ; intros delta1 (delta1_pos, g_cont).",
                        "VernacExtend",
                        "1ce9c865803bdc7cee0de2991b8cbb33056724b9"
                    ]
                },
                {
                    "command": [
                        "destruct (Ball_in_inter _ _ _ _ _ xinb (Boule_center x (mkposreal _ delta1_pos))) as [delta Pdelta].",
                        "VernacExtend",
                        "3948af2cc8741df56e5f6de0fd038e50802b48b7"
                    ]
                },
                {
                    "command": [
                        "exists delta; intros h hpos hinbdelta.",
                        "VernacExtend",
                        "4f549783ef101fc9e88a32da3ff354dc6c449fa4"
                    ]
                },
                {
                    "command": [
                        "assert (eps'_pos : 0 < (Rabs h) * eps / 4).",
                        "VernacExtend",
                        "109d8b0aeb5d358f54c17be45a2a876ad18d089c"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv ; rewrite Rmult_assoc ; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "06b7436db014809dd5ec4e92d7779e72a621fef6"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "destruct (fn_CV_f x xinb ((Rabs h) * eps / 4) eps'_pos) as [N2 fnx_CV_fx].",
                        "VernacExtend",
                        "3d4b550f01f8d337bbdc2e27bf41035ee31e4a87"
                    ]
                },
                {
                    "command": [
                        "assert (xhinbxdelta : Boule x delta (x + h)).",
                        "VernacExtend",
                        "c5bfd705390ae867b1fc7b7ab86cb448cf4365ed"
                    ]
                },
                {
                    "command": [
                        "clear -hinbdelta; apply Rabs_def2 in hinbdelta; unfold Boule; simpl.",
                        "VernacExtend",
                        "d631c0f6ae162ad03aba01d1e8aa05c754e496e8"
                    ]
                },
                {
                    "command": [
                        "destruct hinbdelta; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "ca57b90020cfe20d65163d1232fab1da071e6c52"
                    ]
                },
                {
                    "command": [
                        "assert (t : Boule c' r (x + h)).",
                        "VernacExtend",
                        "5782de6e3d34d0d89f9802a05811e55e2825a5c6"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in xhinbxdelta; tauto.",
                        "VernacExtend",
                        "f9d3704a56434c275bacc29d9edbd047f5c82f96"
                    ]
                },
                {
                    "command": [
                        "destruct (fn_CV_f (x+h) t ((Rabs h) * eps / 4) eps'_pos) as [N1 fnxh_CV_fxh].",
                        "VernacExtend",
                        "0a0ea0bbf472a9493cb7d789f0d1832cf9838eeb"
                    ]
                },
                {
                    "command": [
                        "clear fn_CV_f t.",
                        "VernacExtend",
                        "28483457f70a491b5428107301f27401cb1180f3"
                    ]
                },
                {
                    "command": [
                        "destruct (fn'_CVU_g (eps/8) eps_8_pos) as [N3 fn'c_CVU_gc].",
                        "VernacExtend",
                        "75ebb5b155f937e107d502ab6d1e1b8ac9b928ca"
                    ]
                },
                {
                    "command": [
                        "pose (N := ((N1 + N2) + N3)%nat).",
                        "VernacExtend",
                        "b1e279b9620ae90bc828b8265cfcc640c3f5f8e2"
                    ]
                },
                {
                    "command": [
                        "assert (Main : Rabs ((f (x+h) - fn N (x+h)) - (f x - fn N x) + (fn N (x+h) - fn N x - h * (g x))) < (Rabs h)*eps).",
                        "VernacExtend",
                        "e3098c59405bf645b916a785c8466ac7d76213a7"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (f (x + h) - fn N (x + h) - (f x - fn N x)) + Rabs ((fn N (x + h) - fn N x - h * g x))).",
                        "VernacExtend",
                        "eb6efe054123dedbe9b612fd3ed4fbb2ebb50cb9"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rabs_triang].",
                        "VernacExtend",
                        "0c5942a4cf46bc966482d3044b73b1a01b5ee007"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (f (x + h) - fn N (x + h)) + Rabs (- (f x - fn N x)) + Rabs (fn N (x + h) - fn N x - h * g x)).",
                        "VernacExtend",
                        "edef35e9f5e3e5560dde9373365bcf97112d3f61"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rplus_le_compat_r ; apply Rabs_triang].",
                        "VernacExtend",
                        "1cc60865af268f064d9492bf65490a6b765aec69"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "4585414329a0ef757c809f4a4dee3b3a09307b5c"
                    ]
                },
                {
                    "command": [
                        "case (Rlt_le_dec h 0) ; intro sgn_h.",
                        "VernacExtend",
                        "5729c34e97e46f5cec5f781c771b2db634d06c65"
                    ]
                },
                {
                    "command": [
                        "assert (pr1 : forall c : R, x + h < c < x -> derivable_pt (fn N) c).",
                        "VernacExtend",
                        "e93a559fedfa6f384d68ee26fdd801d4d997d3f1"
                    ]
                },
                {
                    "command": [
                        "intros c c_encad ; unfold derivable_pt.",
                        "VernacExtend",
                        "28c619d4641f3761c6d2932ed68e34f3e3a69aec"
                    ]
                },
                {
                    "command": [
                        "exists (fn' N c) ; apply Dfn_eq_fn'.",
                        "VernacExtend",
                        "c1e0a939bcafb3740e659c5d1761c6c06a19f1d3"
                    ]
                },
                {
                    "command": [
                        "assert (t : Boule x delta c).",
                        "VernacExtend",
                        "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta; destruct c_encad.",
                        "VernacExtend",
                        "6f400f2cdebe9ea2359818d67035a11795bdf3ca"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "2cee183758740296a82c8af1ccd10b7cf82c6627"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in t; tauto.",
                        "VernacExtend",
                        "a373942203c2f6817110f524c04fa8c8cefb5d48"
                    ]
                },
                {
                    "command": [
                        "assert (pr2 : forall c : R, x + h < c < x -> derivable_pt id c).",
                        "VernacExtend",
                        "a7e5d4cf710a954b17661786025cab6585fefe7b"
                    ]
                },
                {
                    "command": [
                        "solve[intros; apply derivable_id].",
                        "VernacExtend",
                        "9e839bc61976a2793360dfac4da91e3a498d4906"
                    ]
                },
                {
                    "command": [
                        "assert (xh_x : x+h < x) by lra.",
                        "VernacExtend",
                        "04a4f110780f7b6f479f2d6e3103ee63bda40773"
                    ]
                },
                {
                    "command": [
                        "assert (pr3 : forall c : R, x + h <= c <= x -> continuity_pt (fn N) c).",
                        "VernacExtend",
                        "eb5cfe19d6ae5fea3bb234469bb453e49c37ebd2"
                    ]
                },
                {
                    "command": [
                        "intros c c_encad ; apply derivable_continuous_pt.",
                        "VernacExtend",
                        "c0b3e8a1a895018b4c9ed7cca1aee4ba3b8c9264"
                    ]
                },
                {
                    "command": [
                        "exists (fn' N c) ; apply Dfn_eq_fn' ; intuition.",
                        "VernacExtend",
                        "dba3679e290ba628bd0577c36a9b3887614ed4b0"
                    ]
                },
                {
                    "command": [
                        "assert (t : Boule x delta c).",
                        "VernacExtend",
                        "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
                        "VernacExtend",
                        "ad7f8a520629399f69644454b2cae54e89b6b0d4"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "2cee183758740296a82c8af1ccd10b7cf82c6627"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in t; tauto.",
                        "VernacExtend",
                        "a373942203c2f6817110f524c04fa8c8cefb5d48"
                    ]
                },
                {
                    "command": [
                        "assert (pr4 : forall c : R, x + h <= c <= x -> continuity_pt id c).",
                        "VernacExtend",
                        "5fa62966ab0e186a147398935cebda9c2aea017e"
                    ]
                },
                {
                    "command": [
                        "solve[intros; apply derivable_continuous ; apply derivable_id].",
                        "VernacExtend",
                        "d69ac947ebc98c9ddac87db264301eb891bee4c5"
                    ]
                },
                {
                    "command": [
                        "destruct (MVT (fn N) id (x+h) x pr1 pr2 xh_x pr3 pr4) as [c [P Hc]].",
                        "VernacExtend",
                        "6e16de070152c95cc9074125afb5a4d734932f65"
                    ]
                },
                {
                    "command": [
                        "assert (Hc' : h * derive_pt (fn N) c (pr1 c P) = (fn N (x+h) - fn N x)).",
                        "VernacExtend",
                        "af00cbcca0b7bc935574da8a9a507a4182a1e53a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (-1).",
                        "VernacExtend",
                        "df4c511b2f29a38aa63f7940c8f5a5613739dbfc"
                    ]
                },
                {
                    "command": [
                        "replace (-1 * (h * derive_pt (fn N) c (pr1 c P))) with (-h * derive_pt (fn N) c (pr1 c P)) by field.",
                        "VernacExtend",
                        "2b7d5283e3427fc0b39c9e6de76425e1fa5ad5a9"
                    ]
                },
                {
                    "command": [
                        "replace (-1 * (fn N (x + h) - fn N x)) with (- (fn N (x + h) - fn N x)) by field.",
                        "VernacExtend",
                        "465d23861e366d19e95f48c4eed5194bb33c6afe"
                    ]
                },
                {
                    "command": [
                        "replace (-h) with (id x - id (x + h)) by (unfold id; field).",
                        "VernacExtend",
                        "cb608a484c5aa20ef96ff08317274371223c7b87"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_1_r ; replace 1 with (derive_pt id c (pr2 c P)) by reg.",
                        "VernacExtend",
                        "a86a43de0487f2666824809904a0e1a3e6777430"
                    ]
                },
                {
                    "command": [
                        "replace (- (fn N (x + h) - fn N x)) with (fn N x - fn N (x + h)) by field.",
                        "VernacExtend",
                        "d0a80b64d68eafd64408019cfb58d6d1cf288734"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_not_eq, IZR_lt.",
                        "VernacExtend",
                        "36404908082201c683208ca7ac6d23ab50df89e0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hc'; clear Hc Hc'.",
                        "VernacExtend",
                        "42e5e6d2f344ad1a7c40ba21fb231f9901e93fc4"
                    ]
                },
                {
                    "command": [
                        "replace (derive_pt (fn N) c (pr1 c P)) with (fn' N c).",
                        "VernacExtend",
                        "094842574051e491da472e146e7eea2aa51e7d65"
                    ]
                },
                {
                    "command": [
                        "replace (h * fn' N c - h * g x) with (h * (fn' N c - g x)) by field.",
                        "VernacExtend",
                        "c78aedde0422e280bbadfdd7c4a1f495f3146fcb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult.",
                        "VernacExtend",
                        "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h * eps / 4 + Rabs (f x - fn N x) + Rabs h * Rabs (fn' N c - g x)).",
                        "VernacExtend",
                        "128417a8d8b74ee3b4e5c25211b384a46da9f0c2"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r ; apply Rplus_lt_compat_r ; unfold R_dist in fnxh_CV_fxh ; rewrite Rabs_minus_sym ; apply fnxh_CV_fxh.",
                        "VernacExtend",
                        "e5c00875699ca6fd9ec41aff0bb9c5d1b909b70d"
                    ]
                },
                {
                    "command": [
                        "unfold N; omega.",
                        "VernacExtend",
                        "ec642d6e70b005beb4bad57dec005858ee95c560"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * Rabs (fn' N c - g x)).",
                        "VernacExtend",
                        "e9a40e5983ea4a4e6ba73e0cc20ae391d0e2d4a4"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r ; apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "fae37d6da6469fd9e059ebd5852cbbe2e995653c"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist in fnx_CV_fx ; rewrite Rabs_minus_sym ; apply fnx_CV_fx.",
                        "VernacExtend",
                        "eba76479c9d6ba9e09fb63ebc97e294fa1ac2d39"
                    ]
                },
                {
                    "command": [
                        "unfold N ; omega.",
                        "VernacExtend",
                        "ec642d6e70b005beb4bad57dec005858ee95c560"
                    ]
                },
                {
                    "command": [
                        "replace (fn' N c - g x) with ((fn' N c - g c) + (g c - g x)) by field.",
                        "VernacExtend",
                        "abe352ba705c5b29f10de5d6c32b90432a5857df"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * Rabs (fn' N c - g c) + Rabs h * Rabs (g c - g x)).",
                        "VernacExtend",
                        "49597cfe7018a3d5889c8e6b009802b399a6257c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; apply Rplus_le_compat_l ; apply Rplus_le_compat_l ; rewrite <- Rmult_plus_distr_l ; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "a602b6f1c5a1201e4c8290c336f54e5eb9f4bec0"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rabs_pos].",
                        "VernacExtend",
                        "379c43f595c71981debb46f5c356fc75a6ec1727"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rabs_triang].",
                        "VernacExtend",
                        "0c5942a4cf46bc966482d3044b73b1a01b5ee007"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * (eps / 8) + Rabs h * Rabs (g c - g x)).",
                        "VernacExtend",
                        "30470e9b01e3629966426b8ec53a14ebde5ebcc6"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r; apply Rplus_lt_compat_l; apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "cbe704c28af5699b3209446a8e777353ded49b48"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_minus_sym ; apply fn'c_CVU_gc.",
                        "VernacExtend",
                        "877c3043db653b240c865c94e7a8f3e11cbf61e3"
                    ]
                },
                {
                    "command": [
                        "unfold N ; omega.",
                        "VernacExtend",
                        "ec642d6e70b005beb4bad57dec005858ee95c560"
                    ]
                },
                {
                    "command": [
                        "assert (t : Boule x delta c).",
                        "VernacExtend",
                        "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
                    ]
                },
                {
                    "command": [
                        "destruct P.",
                        "VernacExtend",
                        "5b49412def545f38f2c7c88619b02391bea0772f"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
                        "VernacExtend",
                        "ad7f8a520629399f69644454b2cae54e89b6b0d4"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "2cee183758740296a82c8af1ccd10b7cf82c6627"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in t; tauto.",
                        "VernacExtend",
                        "a373942203c2f6817110f524c04fa8c8cefb5d48"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * (eps / 8) + Rabs h * (eps / 8)).",
                        "VernacExtend",
                        "07e86e90bb52687eb01fd83db1d96d07b4eae8f6"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; apply Rplus_lt_compat_l ; apply Rplus_lt_compat_l ; rewrite <- Rmult_plus_distr_l ; rewrite <- Rmult_plus_distr_l ; apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "9f6e66d64a86e5c2b6a9aef844a3577df31b05bd"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l ; simpl in g_cont ; apply g_cont ; split ; [unfold D_x ; split |].",
                        "VernacExtend",
                        "8cb2b49aafde29d155a73f70f178efc9f88a5a04"
                    ]
                },
                {
                    "command": [
                        "solve[unfold no_cond ; intuition].",
                        "VernacExtend",
                        "b7d0848df383fafcb72e2386bda5464485d4abee"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq ; exact (proj2 P).",
                        "VernacExtend",
                        "82fdeaa306c14a791287baf63a0fcdec0d10af05"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h).",
                        "VernacExtend",
                        "38fbf29f754f976293160f9ba97e5dd26ae697df"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def1.",
                        "VernacExtend",
                        "1ac2b969bbf5e41161bd7a3c24a781c485dfb615"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with 0.",
                        "VernacExtend",
                        "e7bc3d716eb3bc1bf5114b110153540e6a861842"
                    ]
                },
                {
                    "command": [
                        "destruct P; lra.",
                        "VernacExtend",
                        "74af3533ed5d266651eca297e2479f837fb69c02"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp, Rabs_pos_eq, Ropp_involutive;[ | lra].",
                        "VernacExtend",
                        "faaf7dc5a36c30660f7a60d9c4cb91eeb84c5071"
                    ]
                },
                {
                    "command": [
                        "destruct P; lra.",
                        "VernacExtend",
                        "74af3533ed5d266651eca297e2479f837fb69c02"
                    ]
                },
                {
                    "command": [
                        "clear -Pdelta xhinbxdelta.",
                        "VernacExtend",
                        "6367dbf73b51c5b83fdb38798ae73e4cb8960a52"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in xhinbxdelta; destruct xhinbxdelta as [_ P'].",
                        "VernacExtend",
                        "bd34c6d9db849a26407b2b68ebc8faea7004524d"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in P'; simpl in P'; destruct P'; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "2a663adb1648f169bc6d257a6778ff00aa42cfb6"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite <- Rmult_plus_distr_l.",
                        "VernacExtend",
                        "b1be71d8cf8d3c5282624fca9baff68e4eeec347"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs h * eps / 4 + (Rabs h * eps / 4 + Rabs h * (eps / 8 + eps / 8))) with (Rabs h * (eps / 4 + eps / 4 + eps / 8 + eps / 8)) by field.",
                        "VernacExtend",
                        "dc5026098cb7fc9642905aa58aa678f23a51287a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assert (H := pr1 c P) ; elim H ; clear H ; intros l Hl.",
                        "VernacExtend",
                        "4f34c4931e562d27ed5e487e83a1b8a933aaa541"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : l = fn' N c).",
                        "VernacExtend",
                        "e40ce9a031b1d2ed09a123203f2a7d0fff5ae855"
                    ]
                },
                {
                    "command": [
                        "assert (bc'rc : Boule c' r c).",
                        "VernacExtend",
                        "d643018c1a5b88e12f27757ffe7b99673f60f679"
                    ]
                },
                {
                    "command": [
                        "assert (t : Boule x delta c).",
                        "VernacExtend",
                        "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
                    ]
                },
                {
                    "command": [
                        "clear - xhinbxdelta P.",
                        "VernacExtend",
                        "cef47095678e7b28fbfda2f8c98fd61f2363a3b8"
                    ]
                },
                {
                    "command": [
                        "destruct P; apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
                        "VernacExtend",
                        "1f33e4c1a6a23a7b7d5bcf0c68a5326c4dfbb284"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def1; lra.",
                        "VernacExtend",
                        "415c00cfec596ac33644e669789b2c36acfafbda"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in t; tauto.",
                        "VernacExtend",
                        "a373942203c2f6817110f524c04fa8c8cefb5d48"
                    ]
                },
                {
                    "command": [
                        "assert (Hl' := Dfn_eq_fn' c N bc'rc).",
                        "VernacExtend",
                        "c06375e52a2a6dce80c191ae132e5e1326e6b633"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_abs in Hl; clear -Hl Hl'.",
                        "VernacExtend",
                        "6fcf7a687c1898161de06de7c17b482dfb91e40e"
                    ]
                },
                {
                    "command": [
                        "apply uniqueness_limite with (f:= fn N) (x:=c) ; assumption.",
                        "VernacExtend",
                        "cafbe3572e4d38706fb1e5a2bbe4483e97bd65a8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Temp.",
                        "VernacExtend",
                        "8e057f2722a3ef4aca0c8e39b5d170864ff34af9"
                    ]
                },
                {
                    "command": [
                        "assert (Hl' : derivable_pt (fn N) c).",
                        "VernacExtend",
                        "aa59d4e7fbbbad154c1b674c108de967650ca258"
                    ]
                },
                {
                    "command": [
                        "exists l ; apply Hl.",
                        "VernacExtend",
                        "dae99b9a99269bc0d990913eabcca47f9d329161"
                    ]
                },
                {
                    "command": [
                        "rewrite pr_nu_var with (g:= fn N) (pr2:=Hl').",
                        "VernacExtend",
                        "09c59cf5aeea1559b24ca35d3645b6c0496a7d05"
                    ]
                },
                {
                    "command": [
                        "elim Hl' ; clear Hl' ; intros l' Hl'.",
                        "VernacExtend",
                        "4ad0bc50b055791d22a583a0a57c992619d1d26c"
                    ]
                },
                {
                    "command": [
                        "assert (Main : l = l').",
                        "VernacExtend",
                        "ab5f8817f7592d0241e54d65d8943248f19ec474"
                    ]
                },
                {
                    "command": [
                        "apply uniqueness_limite with (f:= fn N) (x:=c) ; assumption.",
                        "VernacExtend",
                        "cafbe3572e4d38706fb1e5a2bbe4483e97bd65a8"
                    ]
                },
                {
                    "command": [
                        "rewrite Main ; reflexivity.",
                        "VernacExtend",
                        "ad2610cd4e63bd51986681f6749f1464d63a9f89"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assert (h_pos : h > 0).",
                        "VernacExtend",
                        "0013908c7c7eb266a064d2d981822d1c36927d34"
                    ]
                },
                {
                    "command": [
                        "case sgn_h ; intro Hyp.",
                        "VernacExtend",
                        "a1e0610ab86dc50a1b682b5eb5927160664d1ee0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply False_ind ; apply hpos ; symmetry ; assumption.",
                        "VernacExtend",
                        "654f4bf89bfcd3033bc6c01acfc1eb14f5fbcb96"
                    ]
                },
                {
                    "command": [
                        "clear sgn_h.",
                        "VernacExtend",
                        "df9ec5e87fa93d05dabc9fbaa2b2ea08e1f81c12"
                    ]
                },
                {
                    "command": [
                        "assert (pr1 : forall c : R, x < c < x + h -> derivable_pt (fn N) c).",
                        "VernacExtend",
                        "7511d692e787d230d5644f8e0e1487ce40672ebb"
                    ]
                },
                {
                    "command": [
                        "intros c c_encad ; unfold derivable_pt.",
                        "VernacExtend",
                        "28c619d4641f3761c6d2932ed68e34f3e3a69aec"
                    ]
                },
                {
                    "command": [
                        "exists (fn' N c) ; apply Dfn_eq_fn'.",
                        "VernacExtend",
                        "c1e0a939bcafb3740e659c5d1761c6c06a19f1d3"
                    ]
                },
                {
                    "command": [
                        "assert (t : Boule x delta c).",
                        "VernacExtend",
                        "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta; destruct c_encad.",
                        "VernacExtend",
                        "6f400f2cdebe9ea2359818d67035a11795bdf3ca"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "2cee183758740296a82c8af1ccd10b7cf82c6627"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in t; tauto.",
                        "VernacExtend",
                        "a373942203c2f6817110f524c04fa8c8cefb5d48"
                    ]
                },
                {
                    "command": [
                        "assert (pr2 : forall c : R, x < c < x + h -> derivable_pt id c).",
                        "VernacExtend",
                        "6ae0ef929e2215e5c402affde465534cfa4f4b4d"
                    ]
                },
                {
                    "command": [
                        "solve[intros; apply derivable_id].",
                        "VernacExtend",
                        "9e839bc61976a2793360dfac4da91e3a498d4906"
                    ]
                },
                {
                    "command": [
                        "assert (xh_x : x < x + h) by lra.",
                        "VernacExtend",
                        "e428f046bc801eba42d0cc900bf41ce166113545"
                    ]
                },
                {
                    "command": [
                        "assert (pr3 : forall c : R, x <= c <= x + h -> continuity_pt (fn N) c).",
                        "VernacExtend",
                        "2f24021f8ef7d7200e33f2927bbabcfbc05059f4"
                    ]
                },
                {
                    "command": [
                        "intros c c_encad ; apply derivable_continuous_pt.",
                        "VernacExtend",
                        "c0b3e8a1a895018b4c9ed7cca1aee4ba3b8c9264"
                    ]
                },
                {
                    "command": [
                        "exists (fn' N c) ; apply Dfn_eq_fn' ; intuition.",
                        "VernacExtend",
                        "dba3679e290ba628bd0577c36a9b3887614ed4b0"
                    ]
                },
                {
                    "command": [
                        "assert (t : Boule x delta c).",
                        "VernacExtend",
                        "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
                        "VernacExtend",
                        "ad7f8a520629399f69644454b2cae54e89b6b0d4"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "2cee183758740296a82c8af1ccd10b7cf82c6627"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in t; tauto.",
                        "VernacExtend",
                        "a373942203c2f6817110f524c04fa8c8cefb5d48"
                    ]
                },
                {
                    "command": [
                        "assert (pr4 : forall c : R, x <= c <= x + h -> continuity_pt id c).",
                        "VernacExtend",
                        "5f1201935fa88d3a4c28a3201eeacc75fc255b9f"
                    ]
                },
                {
                    "command": [
                        "solve[intros; apply derivable_continuous ; apply derivable_id].",
                        "VernacExtend",
                        "d69ac947ebc98c9ddac87db264301eb891bee4c5"
                    ]
                },
                {
                    "command": [
                        "destruct (MVT (fn N) id x (x+h) pr1 pr2 xh_x pr3 pr4) as [c [P Hc]].",
                        "VernacExtend",
                        "3397c7323cf163bf3f7342c1964411efeac2e73b"
                    ]
                },
                {
                    "command": [
                        "assert (Hc' : h * derive_pt (fn N) c (pr1 c P) = fn N (x+h) - fn N x).",
                        "VernacExtend",
                        "af00cbcca0b7bc935574da8a9a507a4182a1e53a"
                    ]
                },
                {
                    "command": [
                        "pattern h at 1; replace h with (id (x + h) - id x) by (unfold id; field).",
                        "VernacExtend",
                        "e3a0a68348987bce2b463dae74d8a1f1c1184c23"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_1_r ; replace 1 with (derive_pt id c (pr2 c P)) by reg.",
                        "VernacExtend",
                        "a86a43de0487f2666824809904a0e1a3e6777430"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hc'; clear Hc Hc'.",
                        "VernacExtend",
                        "42e5e6d2f344ad1a7c40ba21fb231f9901e93fc4"
                    ]
                },
                {
                    "command": [
                        "replace (derive_pt (fn N) c (pr1 c P)) with (fn' N c).",
                        "VernacExtend",
                        "094842574051e491da472e146e7eea2aa51e7d65"
                    ]
                },
                {
                    "command": [
                        "replace (h * fn' N c - h * g x) with (h * (fn' N c - g x)) by field.",
                        "VernacExtend",
                        "c78aedde0422e280bbadfdd7c4a1f495f3146fcb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult.",
                        "VernacExtend",
                        "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h * eps / 4 + Rabs (f x - fn N x) + Rabs h * Rabs (fn' N c - g x)).",
                        "VernacExtend",
                        "128417a8d8b74ee3b4e5c25211b384a46da9f0c2"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r ; apply Rplus_lt_compat_r ; unfold R_dist in fnxh_CV_fxh ; rewrite Rabs_minus_sym ; apply fnxh_CV_fxh.",
                        "VernacExtend",
                        "e5c00875699ca6fd9ec41aff0bb9c5d1b909b70d"
                    ]
                },
                {
                    "command": [
                        "unfold N; omega.",
                        "VernacExtend",
                        "ec642d6e70b005beb4bad57dec005858ee95c560"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * Rabs (fn' N c - g x)).",
                        "VernacExtend",
                        "e9a40e5983ea4a4e6ba73e0cc20ae391d0e2d4a4"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r ; apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "fae37d6da6469fd9e059ebd5852cbbe2e995653c"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist in fnx_CV_fx ; rewrite Rabs_minus_sym ; apply fnx_CV_fx.",
                        "VernacExtend",
                        "eba76479c9d6ba9e09fb63ebc97e294fa1ac2d39"
                    ]
                },
                {
                    "command": [
                        "unfold N ; omega.",
                        "VernacExtend",
                        "ec642d6e70b005beb4bad57dec005858ee95c560"
                    ]
                },
                {
                    "command": [
                        "replace (fn' N c - g x) with ((fn' N c - g c) + (g c - g x)) by field.",
                        "VernacExtend",
                        "abe352ba705c5b29f10de5d6c32b90432a5857df"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * Rabs (fn' N c - g c) + Rabs h * Rabs (g c - g x)).",
                        "VernacExtend",
                        "49597cfe7018a3d5889c8e6b009802b399a6257c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; apply Rplus_le_compat_l ; apply Rplus_le_compat_l ; rewrite <- Rmult_plus_distr_l ; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "a602b6f1c5a1201e4c8290c336f54e5eb9f4bec0"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rabs_pos].",
                        "VernacExtend",
                        "379c43f595c71981debb46f5c356fc75a6ec1727"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rabs_triang].",
                        "VernacExtend",
                        "0c5942a4cf46bc966482d3044b73b1a01b5ee007"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * (eps / 8) + Rabs h * Rabs (g c - g x)).",
                        "VernacExtend",
                        "30470e9b01e3629966426b8ec53a14ebde5ebcc6"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r; apply Rplus_lt_compat_l; apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "cbe704c28af5699b3209446a8e777353ded49b48"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_minus_sym ; apply fn'c_CVU_gc.",
                        "VernacExtend",
                        "877c3043db653b240c865c94e7a8f3e11cbf61e3"
                    ]
                },
                {
                    "command": [
                        "unfold N ; omega.",
                        "VernacExtend",
                        "ec642d6e70b005beb4bad57dec005858ee95c560"
                    ]
                },
                {
                    "command": [
                        "assert (t : Boule x delta c).",
                        "VernacExtend",
                        "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
                    ]
                },
                {
                    "command": [
                        "destruct P.",
                        "VernacExtend",
                        "5b49412def545f38f2c7c88619b02391bea0772f"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
                        "VernacExtend",
                        "ad7f8a520629399f69644454b2cae54e89b6b0d4"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in xinb; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "2cee183758740296a82c8af1ccd10b7cf82c6627"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in t; tauto.",
                        "VernacExtend",
                        "a373942203c2f6817110f524c04fa8c8cefb5d48"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h * eps / 4 + Rabs h * eps / 4 + Rabs h * (eps / 8) + Rabs h * (eps / 8)).",
                        "VernacExtend",
                        "07e86e90bb52687eb01fd83db1d96d07b4eae8f6"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite Rplus_assoc ; apply Rplus_lt_compat_l ; apply Rplus_lt_compat_l ; rewrite <- Rmult_plus_distr_l ; rewrite <- Rmult_plus_distr_l ; apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "9f6e66d64a86e5c2b6a9aef844a3577df31b05bd"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l ; simpl in g_cont ; apply g_cont ; split ; [unfold D_x ; split |].",
                        "VernacExtend",
                        "8cb2b49aafde29d155a73f70f178efc9f88a5a04"
                    ]
                },
                {
                    "command": [
                        "solve[unfold no_cond ; intuition].",
                        "VernacExtend",
                        "b7d0848df383fafcb72e2386bda5464485d4abee"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_eq ; exact (proj1 P).",
                        "VernacExtend",
                        "c45644f4e44cfa3f0bf3e5af708d4ebfbdcdb597"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs h).",
                        "VernacExtend",
                        "38fbf29f754f976293160f9ba97e5dd26ae697df"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def1.",
                        "VernacExtend",
                        "1ac2b969bbf5e41161bd7a3c24a781c485dfb615"
                    ]
                },
                {
                    "command": [
                        "destruct P; rewrite Rabs_pos_eq;lra.",
                        "VernacExtend",
                        "2516d2c9e3111a906cf82ac01ae7c7bc68ae8100"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with 0.",
                        "VernacExtend",
                        "abf7edca77c836989e0ea56bb1eefcbd0a9800fc"
                    ]
                },
                {
                    "command": [
                        "assert (t := Rabs_pos h); clear -t; lra.",
                        "VernacExtend",
                        "544d4317e65b324976f7bbc9e9fdfc20abb8ad05"
                    ]
                },
                {
                    "command": [
                        "clear -P; destruct P; lra.",
                        "VernacExtend",
                        "35fd6645fa0550c9a42f6b8a466c25558a8b0775"
                    ]
                },
                {
                    "command": [
                        "clear -Pdelta xhinbxdelta.",
                        "VernacExtend",
                        "6367dbf73b51c5b83fdb38798ae73e4cb8960a52"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in xhinbxdelta; destruct xhinbxdelta as [_ P'].",
                        "VernacExtend",
                        "bd34c6d9db849a26407b2b68ebc8faea7004524d"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in P'; simpl in P'; destruct P'; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "2a663adb1648f169bc6d257a6778ff00aa42cfb6"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc ; rewrite Rplus_assoc ; rewrite <- Rmult_plus_distr_l.",
                        "VernacExtend",
                        "b1be71d8cf8d3c5282624fca9baff68e4eeec347"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs h * eps / 4 + (Rabs h * eps / 4 + Rabs h * (eps / 8 + eps / 8))) with (Rabs h * (eps / 4 + eps / 4 + eps / 8 + eps / 8)) by field.",
                        "VernacExtend",
                        "dc5026098cb7fc9642905aa58aa678f23a51287a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assert (H := pr1 c P) ; elim H ; clear H ; intros l Hl.",
                        "VernacExtend",
                        "4f34c4931e562d27ed5e487e83a1b8a933aaa541"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : l = fn' N c).",
                        "VernacExtend",
                        "e40ce9a031b1d2ed09a123203f2a7d0fff5ae855"
                    ]
                },
                {
                    "command": [
                        "assert (bc'rc : Boule c' r c).",
                        "VernacExtend",
                        "d643018c1a5b88e12f27757ffe7b99673f60f679"
                    ]
                },
                {
                    "command": [
                        "assert (t : Boule x delta c).",
                        "VernacExtend",
                        "d7389a87bad797e322d5e0a6ab57576d923ab8e8"
                    ]
                },
                {
                    "command": [
                        "clear - xhinbxdelta P.",
                        "VernacExtend",
                        "cef47095678e7b28fbfda2f8c98fd61f2363a3b8"
                    ]
                },
                {
                    "command": [
                        "destruct P; apply Rabs_def2 in xhinbxdelta; destruct xhinbxdelta.",
                        "VernacExtend",
                        "1f33e4c1a6a23a7b7d5bcf0c68a5326c4dfbb284"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def1; lra.",
                        "VernacExtend",
                        "415c00cfec596ac33644e669789b2c36acfafbda"
                    ]
                },
                {
                    "command": [
                        "apply Pdelta in t; tauto.",
                        "VernacExtend",
                        "a373942203c2f6817110f524c04fa8c8cefb5d48"
                    ]
                },
                {
                    "command": [
                        "assert (Hl' := Dfn_eq_fn' c N bc'rc).",
                        "VernacExtend",
                        "c06375e52a2a6dce80c191ae132e5e1326e6b633"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_abs in Hl; clear -Hl Hl'.",
                        "VernacExtend",
                        "6fcf7a687c1898161de06de7c17b482dfb91e40e"
                    ]
                },
                {
                    "command": [
                        "apply uniqueness_limite with (f:= fn N) (x:=c) ; assumption.",
                        "VernacExtend",
                        "cafbe3572e4d38706fb1e5a2bbe4483e97bd65a8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Temp.",
                        "VernacExtend",
                        "8e057f2722a3ef4aca0c8e39b5d170864ff34af9"
                    ]
                },
                {
                    "command": [
                        "assert (Hl' : derivable_pt (fn N) c).",
                        "VernacExtend",
                        "aa59d4e7fbbbad154c1b674c108de967650ca258"
                    ]
                },
                {
                    "command": [
                        "exists l ; apply Hl.",
                        "VernacExtend",
                        "dae99b9a99269bc0d990913eabcca47f9d329161"
                    ]
                },
                {
                    "command": [
                        "rewrite pr_nu_var with (g:= fn N) (pr2:=Hl').",
                        "VernacExtend",
                        "09c59cf5aeea1559b24ca35d3645b6c0496a7d05"
                    ]
                },
                {
                    "command": [
                        "elim Hl' ; clear Hl' ; intros l' Hl'.",
                        "VernacExtend",
                        "4ad0bc50b055791d22a583a0a57c992619d1d26c"
                    ]
                },
                {
                    "command": [
                        "assert (Main : l = l').",
                        "VernacExtend",
                        "ab5f8817f7592d0241e54d65d8943248f19ec474"
                    ]
                },
                {
                    "command": [
                        "apply uniqueness_limite with (f:= fn N) (x:=c) ; assumption.",
                        "VernacExtend",
                        "cafbe3572e4d38706fb1e5a2bbe4483e97bd65a8"
                    ]
                },
                {
                    "command": [
                        "rewrite Main ; reflexivity.",
                        "VernacExtend",
                        "ad2610cd4e63bd51986681f6749f1464d63a9f89"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "replace ((f (x + h) - f x) / h - g x) with ((/h) * ((f (x + h) - f x) - h * g x)).",
                        "VernacExtend",
                        "2a7c6005834a7f70d7f7e0477f5a94f83b76c20f"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult ; rewrite Rabs_Rinv.",
                        "VernacExtend",
                        "d835e004c37b1f8150c99978a324ec95eb699f47"
                    ]
                },
                {
                    "command": [
                        "replace eps with (/ Rabs h * (Rabs h * eps)).",
                        "VernacExtend",
                        "ee5dadeb275d2dbd30cb155c77b76e6bb17a5ec8"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat ; apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "e4c91a40f2fa1c87312f044d164ffed2c6475792"
                    ]
                },
                {
                    "command": [
                        "replace (f (x + h) - f x - h * g x) with (f (x + h) - fn N (x + h) - (f x - fn N x) + (fn N (x + h) - fn N x - h * g x)) by field.",
                        "VernacExtend",
                        "29c7128fbfacfe970c1e5a7289c872a611fdc683"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "field ; apply Rgt_not_eq ; apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "f4468c57d88a4b7d02ff1f9df73193ce53d08255"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}