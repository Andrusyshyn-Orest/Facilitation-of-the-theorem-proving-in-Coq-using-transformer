{
    "filename": "theories/Reals/ArithProp.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rbasic_fun.",
            "VernacRequire",
            "3c58801de6049d20b7e7c10af13d523524f3b227"
        ],
        [
            "Require Import Even.",
            "VernacRequire",
            "69da947c62598dadd17a168638c6bce04a4d0bdf"
        ],
        [
            "Require Import Div2.",
            "VernacRequire",
            "b85d4c50c97b3f286ca435eeaa679d97ebbe5cfa"
        ],
        [
            "Require Import ArithRing.",
            "VernacRequire",
            "4bc385370568ddd53384be919634bc0439bf028f"
        ],
        [
            "Local Open Scope Z_scope.",
            "VernacOpenCloseScope",
            "5313930c0cd5fa63810c1c79463485ebf0638bad"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Lemma minus_neq_O : forall n i:nat, (i < n)%nat -> (n - i)%nat <> 0%nat.",
            "VernacStartTheoremProof",
            "6a0ad991b6324eaaab1e825be919fb9989bcfa7e"
        ],
        [
            "intros; red; intro.",
            "VernacExtend",
            "8efb0e8eb13e9c212c108e6c3da452eb08ee81d1"
        ],
        [
            "cut (forall n m:nat, (m <= n)%nat -> (n - m)%nat = 0%nat -> n = m).",
            "VernacExtend",
            "0d4b4c09723018906b12d8c762df21c3977f8002"
        ],
        [
            "intro; assert (H2 := H1 _ _ (lt_le_weak _ _ H) H0); rewrite H2 in H; elim (lt_irrefl _ H).",
            "VernacExtend",
            "e934507982d735da90842e9ae35dd718b8b34352"
        ],
        [
            "set (R := fun n m:nat => (m <= n)%nat -> (n - m)%nat = 0%nat -> n = m).",
            "VernacExtend",
            "98b485bef48202692617de719eb8208ac5dff5fa"
        ],
        [
            "cut ((forall n m:nat, R n m) -> forall n0 m:nat, (m <= n0)%nat -> (n0 - m)%nat = 0%nat -> n0 = m).",
            "VernacExtend",
            "e17dc6790eae63dd3cd04f25645efee80861305a"
        ],
        [
            "intro; apply H1.",
            "VernacExtend",
            "868e99754cb1ff2431f4fb10ad32d6ab65a5563a"
        ],
        [
            "apply nat_double_ind.",
            "VernacExtend",
            "d9b76524920967069951072ce7c9bfae710f4a1c"
        ],
        [
            "unfold R; intros; inversion H2; reflexivity.",
            "VernacExtend",
            "a10e7b30e913bd7636dacd495315c80f1f7dc281"
        ],
        [
            "unfold R; intros; simpl in H3; assumption.",
            "VernacExtend",
            "f81b2f9a2bdb62621e910342cf49ddda33e7e9c6"
        ],
        [
            "unfold R; intros; simpl in H4; assert (H5 := le_S_n _ _ H3); assert (H6 := H2 H5 H4); rewrite H6; reflexivity.",
            "VernacExtend",
            "ba102664a45784a4167b1b70f68f861352d958af"
        ],
        [
            "unfold R; intros; apply H1; assumption.",
            "VernacExtend",
            "afff95c38240394a1668e7873e8f0d64434c8a22"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma le_minusni_n : forall n i:nat, (i <= n)%nat -> (n - i <= n)%nat.",
            "VernacStartTheoremProof",
            "618a556f12537f723848eb1de8bdacf276503bde"
        ],
        [
            "set (R := fun m n:nat => (n <= m)%nat -> (m - n <= m)%nat).",
            "VernacExtend",
            "f8e2f821adf2aed5c715934d7492772cf2ef3758"
        ],
        [
            "cut ((forall m n:nat, R m n) -> forall n i:nat, (i <= n)%nat -> (n - i <= n)%nat).",
            "VernacExtend",
            "b30207527c87c8c71d001118fe6edc98c55aa092"
        ],
        [
            "intro; apply H.",
            "VernacExtend",
            "2155aadd67abfad07bb52771af5eefbf7e2e6097"
        ],
        [
            "apply nat_double_ind.",
            "VernacExtend",
            "d9b76524920967069951072ce7c9bfae710f4a1c"
        ],
        [
            "unfold R; intros; simpl; apply le_n.",
            "VernacExtend",
            "c43b98ecd7b6d00865546d4f2ee1eef349b93649"
        ],
        [
            "unfold R; intros; simpl; apply le_n.",
            "VernacExtend",
            "c43b98ecd7b6d00865546d4f2ee1eef349b93649"
        ],
        [
            "unfold R; intros; simpl; apply le_trans with n.",
            "VernacExtend",
            "2a964413a1f118344fa1e1b867443d4df402e59c"
        ],
        [
            "apply H0; apply le_S_n; assumption.",
            "VernacExtend",
            "80f2d0b5e7781d19f8d56c0044110265f5e9aedd"
        ],
        [
            "apply le_n_Sn.",
            "VernacExtend",
            "7889648199cacb866ef42ba6b4c4192f713b44f4"
        ],
        [
            "unfold R; intros; apply H; assumption.",
            "VernacExtend",
            "6cec568a3dc0395f6a7997809b89aab8f479822b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lt_minus_O_lt : forall m n:nat, (m < n)%nat -> (0 < n - m)%nat.",
            "VernacStartTheoremProof",
            "369214b39278444d26c30b6070c88979684c102a"
        ],
        [
            "intros n m; pattern n, m; apply nat_double_ind; [ intros; rewrite <- minus_n_O; assumption | intros; elim (lt_n_O _ H) | intros; simpl; apply H; apply lt_S_n; assumption ].",
            "VernacExtend",
            "50a2087187516d5b11218e607dbc79c6d5123f45"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma even_odd_cor : forall n:nat, exists p : nat, n = (2 * p)%nat \\/ n = S (2 * p).",
            "VernacStartTheoremProof",
            "38ca37398ebee6b77b2cb9b26d5a11f8aac2e8fa"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H := even_or_odd n).",
            "VernacExtend",
            "ad4b8e297c334a39a73eb0d68dec8bdb4810a413"
        ],
        [
            "exists (div2 n).",
            "VernacExtend",
            "b5cfec5307a526f6887fdf23863d29bbd444e16e"
        ],
        [
            "assert (H0 := even_odd_double n).",
            "VernacExtend",
            "119004a29f77e7ac7c031c8479b7f1b5d2cdedf5"
        ],
        [
            "elim H0; intros.",
            "VernacExtend",
            "6b83f392a470a8cdaa118e532bc445a009dec854"
        ],
        [
            "elim H1; intros H3 _.",
            "VernacExtend",
            "b445d88261e4c275f54ba10ad454c54aad494aaf"
        ],
        [
            "elim H2; intros H4 _.",
            "VernacExtend",
            "5aadee38380b91d5e465afe7841db62e400d1f10"
        ],
        [
            "replace (2 * div2 n)%nat with (double (div2 n)).",
            "VernacExtend",
            "9ecd982b68f206494da2e52f5320f2927c0c3cb0"
        ],
        [
            "elim H; intro.",
            "VernacExtend",
            "f72f8bb994653bc377ef4f37626cba5f2cab4c8b"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "apply H3; assumption.",
            "VernacExtend",
            "5797d1cfc3adb7c1e34d2f0d332d89f950d72fea"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "apply H4; assumption.",
            "VernacExtend",
            "ed2481e3b356eac580ff85aa054528aba71fc300"
        ],
        [
            "unfold double;ring.",
            "VernacExtend",
            "547630c44d44ab0513e1f0ce00dc91d722385e40"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma le_double : forall m n:nat, (2 * m <= 2 * n)%nat -> (m <= n)%nat.",
            "VernacStartTheoremProof",
            "7e58377a61e598a627c6bd1692bab43c65966410"
        ],
        [
            "intros; apply INR_le.",
            "VernacExtend",
            "214a75a673b0a958230194b7c90967e209210551"
        ],
        [
            "assert (H1 := le_INR _ _ H).",
            "VernacExtend",
            "3b2a0ba260070e5e418841cc858415e2c7fe86a1"
        ],
        [
            "do 2 rewrite mult_INR in H1.",
            "VernacExtend",
            "d2ecf3d4bf52739571f0aa41dc5488e2a7e559bb"
        ],
        [
            "apply Rmult_le_reg_l with (INR 2).",
            "VernacExtend",
            "582db43033e4fef578cc50dae6f151c71f55401e"
        ],
        [
            "replace (INR 2) with 2; [ prove_sup0 | reflexivity ].",
            "VernacExtend",
            "d00fb8b4a07af2eb219afbb938a2564a6370acef"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma euclidian_division : forall x y:R, y <> 0 -> exists k : Z, (exists r : R, x = IZR k * y + r /\\ 0 <= r < Rabs y).",
            "VernacStartTheoremProof",
            "256e802b0a1dd76a376dbe0f247eb256bc14c673"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "set (k0 := match Rcase_abs y with | left _ => (1 - up (x / - y))%Z | right _ => (up (x / y) - 1)%Z end).",
            "VernacExtend",
            "8da19d8f3f8c163c93f283592bd01d4de91935fd"
        ],
        [
            "exists k0.",
            "VernacExtend",
            "4e007650466afa037b19f143e6228d22e04d3957"
        ],
        [
            "exists (x - IZR k0 * y).",
            "VernacExtend",
            "e15c47ddd53a0c153ff5655a145c4a84738bbd88"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold k0; case (Rcase_abs y) as [Hlt|Hge].",
            "VernacExtend",
            "6922b736a0998f70960edc1855c9c372514bc382"
        ],
        [
            "assert (H0 := archimed (x / - y)); rewrite <- Z_R_minus; simpl; unfold Rminus.",
            "VernacExtend",
            "49517cc947f8431415f393c6f90e0fccd9679765"
        ],
        [
            "replace (- ((1 + - IZR (up (x / - y))) * y)) with ((IZR (up (x / - y)) - 1) * y); [ idtac | ring ].",
            "VernacExtend",
            "7de1be9fa25f9a8e347d0daec5c63d7cd1fa3fa4"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmult_le_reg_l with (/ - y).",
            "VernacExtend",
            "86acc924ea154cdf614edbc6539af560b5ff6846"
        ],
        [
            "apply Rinv_0_lt_compat; apply Ropp_0_gt_lt_contravar; exact Hlt.",
            "VernacExtend",
            "2a21da1247eba00ec1c24473e9c1c0a2bb49055b"
        ],
        [
            "rewrite Rmult_0_r; rewrite (Rmult_comm (/ - y)); rewrite Rmult_plus_distr_r; rewrite <- Ropp_inv_permute; [ idtac | assumption ].",
            "VernacExtend",
            "65693cf34a2b827c1e6bb4257eb4eedc82da3212"
        ],
        [
            "rewrite Rmult_assoc; repeat rewrite Ropp_mult_distr_r_reverse; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r | assumption ].",
            "VernacExtend",
            "1654482976d6149e0ac27ad71daa6a5a78fc892c"
        ],
        [
            "apply Rplus_le_reg_l with (IZR (up (x / - y)) - x / - y).",
            "VernacExtend",
            "1818a58e80e7cdb54f86b5bedc13eda259601a0e"
        ],
        [
            "rewrite Rplus_0_r; unfold Rdiv; pattern (/ - y) at 4; rewrite <- Ropp_inv_permute; [ idtac | assumption ].",
            "VernacExtend",
            "3418697e1efdb8369e4d64db999566434d0fa9c2"
        ],
        [
            "replace (IZR (up (x * / - y)) - x * - / y + (- (x * / y) + - (IZR (up (x * / - y)) - 1))) with 1; [ idtac | ring ].",
            "VernacExtend",
            "3bcdc7c642454cfd7bf4bf5c7319fb7bfd70b655"
        ],
        [
            "elim H0; intros _ H1; unfold Rdiv in H1; exact H1.",
            "VernacExtend",
            "4474f0c05c87861fb85f87ba842700c2e16ef8ba"
        ],
        [
            "rewrite (Rabs_left _ Hlt); apply Rmult_lt_reg_l with (/ - y).",
            "VernacExtend",
            "141c0157ff68f59baf7d870267bd5db60a5f64f3"
        ],
        [
            "apply Rinv_0_lt_compat; apply Ropp_0_gt_lt_contravar; exact Hlt.",
            "VernacExtend",
            "2a21da1247eba00ec1c24473e9c1c0a2bb49055b"
        ],
        [
            "rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "6dcb59ca5b85038cc8fddd44b4afdcbe28fba0ba"
        ],
        [
            "rewrite (Rmult_comm (/ - y)); rewrite Rmult_plus_distr_r; rewrite <- Ropp_inv_permute; [ idtac | assumption ].",
            "VernacExtend",
            "f5be19dcc25e2002158133d83b66b2234b53502d"
        ],
        [
            "rewrite Rmult_assoc; repeat rewrite Ropp_mult_distr_r_reverse; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r | assumption ]; apply Rplus_lt_reg_l with (IZR (up (x / - y)) - 1).",
            "VernacExtend",
            "9fd2baf1e68ba59503cdb053872f0cef32a77922"
        ],
        [
            "replace (IZR (up (x / - y)) - 1 + 1) with (IZR (up (x / - y))); [ idtac | ring ].",
            "VernacExtend",
            "298eb410d415f3106272d775ab45f4661d840c97"
        ],
        [
            "replace (IZR (up (x / - y)) - 1 + (- (x * / y) + - (IZR (up (x / - y)) - 1))) with (- (x * / y)); [ idtac | ring ].",
            "VernacExtend",
            "f8bb1fde3397d21972a04de993de8a321d0dd156"
        ],
        [
            "rewrite <- Ropp_mult_distr_r_reverse; rewrite (Ropp_inv_permute _ H); elim H0; unfold Rdiv; intros H1 _; exact H1.",
            "VernacExtend",
            "d2d1fe96fcb78b880e088af091d3f77ef3d5aad0"
        ],
        [
            "apply Ropp_neq_0_compat; assumption.",
            "VernacExtend",
            "a539604805abaeda5e27c6d280fe7b2b24f15b11"
        ],
        [
            "assert (H0 := archimed (x / y)); rewrite <- Z_R_minus; simpl; cut (0 < y).",
            "VernacExtend",
            "639e62e396531a458f073f30898b0a931bdf3554"
        ],
        [
            "intro; unfold Rminus; replace (- ((IZR (up (x / y)) + -(1)) * y)) with ((1 - IZR (up (x / y))) * y); [ idtac | ring ].",
            "VernacExtend",
            "0b7b697799a4ec2023ded20337e353edd544b2de"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmult_le_reg_l with (/ y).",
            "VernacExtend",
            "8493a0345faedc41aa43b082de48aa52420c3944"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "rewrite Rmult_0_r; rewrite (Rmult_comm (/ y)); rewrite Rmult_plus_distr_r; rewrite Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r | assumption ]; apply Rplus_le_reg_l with (IZR (up (x / y)) - x / y); rewrite Rplus_0_r; unfold Rdiv; replace (IZR (up (x * / y)) - x * / y + (x * / y + (1 - IZR (up (x * / y))))) with 1; [ idtac | ring ]; elim H0; intros _ H2; unfold Rdiv in H2; exact H2.",
            "VernacExtend",
            "0c6ac7bf498667f0588263447cfc826eac092b3d"
        ],
        [
            "rewrite (Rabs_right _ Hge); apply Rmult_lt_reg_l with (/ y).",
            "VernacExtend",
            "4a75e30b5133efcfb61ef02a4279ae739784444f"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "rewrite <- (Rinv_l_sym _ H); rewrite (Rmult_comm (/ y)); rewrite Rmult_plus_distr_r; rewrite Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r | assumption ]; apply Rplus_lt_reg_l with (IZR (up (x / y)) - 1); replace (IZR (up (x / y)) - 1 + 1) with (IZR (up (x / y))); [ idtac | ring ]; replace (IZR (up (x / y)) - 1 + (x * / y + (1 - IZR (up (x / y))))) with (x * / y); [ idtac | ring ]; elim H0; unfold Rdiv; intros H2 _; exact H2.",
            "VernacExtend",
            "dd5a8b7c525c25876e2383ff7cb9a85af4ffaacc"
        ],
        [
            "destruct (total_order_T 0 y) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "e8f910f66de4629b3a2402c88e5b90fc10d0779d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H; symmetry ; exact Heq.",
            "VernacExtend",
            "6f6f7a8fa2eec376729039eed3a5d2c3908c7e1e"
        ],
        [
            "apply Rge_le in Hge; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hge Hgt)).",
            "VernacExtend",
            "f7f0bdd3dace0a908b985b9f1b7ea5a90698dd71"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech8 : forall n i:nat, (n <= S n + i)%nat.",
            "VernacStartTheoremProof",
            "8879b421abda3ad9d9229523f444bc1d6166ad30"
        ],
        [
            "intros; induction i as [| i Hreci].",
            "VernacExtend",
            "c9adc63016258b96a0e1d467a9bcaf9fe9e89584"
        ],
        [
            "replace (S n + 0)%nat with (S n); [ apply le_n_Sn | ring ].",
            "VernacExtend",
            "fd92406b3be1e3cef5a2737597a5f45c8e858b90"
        ],
        [
            "replace (S n + S i)%nat with (S (S n + i)).",
            "VernacExtend",
            "1c696f51553da378351faea2e02d0692ecc3d4ee"
        ],
        [
            "apply le_S; assumption.",
            "VernacExtend",
            "514388ff04a50a09884dd6094e16476c79a0a2e6"
        ],
        [
            "apply INR_eq; rewrite S_INR; do 2 rewrite plus_INR; do 2 rewrite S_INR; ring.",
            "VernacExtend",
            "9296a64c1b2631405524d4d54ae7d5be87a6a7e4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "minus_neq_O",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros; red; intro.",
                        "VernacExtend",
                        "8efb0e8eb13e9c212c108e6c3da452eb08ee81d1"
                    ]
                },
                {
                    "command": [
                        "cut (forall n m:nat, (m <= n)%nat -> (n - m)%nat = 0%nat -> n = m).",
                        "VernacExtend",
                        "0d4b4c09723018906b12d8c762df21c3977f8002"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H2 := H1 _ _ (lt_le_weak _ _ H) H0); rewrite H2 in H; elim (lt_irrefl _ H).",
                        "VernacExtend",
                        "e934507982d735da90842e9ae35dd718b8b34352"
                    ]
                },
                {
                    "command": [
                        "set (R := fun n m:nat => (m <= n)%nat -> (n - m)%nat = 0%nat -> n = m).",
                        "VernacExtend",
                        "98b485bef48202692617de719eb8208ac5dff5fa"
                    ]
                },
                {
                    "command": [
                        "cut ((forall n m:nat, R n m) -> forall n0 m:nat, (m <= n0)%nat -> (n0 - m)%nat = 0%nat -> n0 = m).",
                        "VernacExtend",
                        "e17dc6790eae63dd3cd04f25645efee80861305a"
                    ]
                },
                {
                    "command": [
                        "intro; apply H1.",
                        "VernacExtend",
                        "868e99754cb1ff2431f4fb10ad32d6ab65a5563a"
                    ]
                },
                {
                    "command": [
                        "apply nat_double_ind.",
                        "VernacExtend",
                        "d9b76524920967069951072ce7c9bfae710f4a1c"
                    ]
                },
                {
                    "command": [
                        "unfold R; intros; inversion H2; reflexivity.",
                        "VernacExtend",
                        "a10e7b30e913bd7636dacd495315c80f1f7dc281"
                    ]
                },
                {
                    "command": [
                        "unfold R; intros; simpl in H3; assumption.",
                        "VernacExtend",
                        "f81b2f9a2bdb62621e910342cf49ddda33e7e9c6"
                    ]
                },
                {
                    "command": [
                        "unfold R; intros; simpl in H4; assert (H5 := le_S_n _ _ H3); assert (H6 := H2 H5 H4); rewrite H6; reflexivity.",
                        "VernacExtend",
                        "ba102664a45784a4167b1b70f68f861352d958af"
                    ]
                },
                {
                    "command": [
                        "unfold R; intros; apply H1; assumption.",
                        "VernacExtend",
                        "afff95c38240394a1668e7873e8f0d64434c8a22"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "le_minusni_n",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "set (R := fun m n:nat => (n <= m)%nat -> (m - n <= m)%nat).",
                        "VernacExtend",
                        "f8e2f821adf2aed5c715934d7492772cf2ef3758"
                    ]
                },
                {
                    "command": [
                        "cut ((forall m n:nat, R m n) -> forall n i:nat, (i <= n)%nat -> (n - i <= n)%nat).",
                        "VernacExtend",
                        "b30207527c87c8c71d001118fe6edc98c55aa092"
                    ]
                },
                {
                    "command": [
                        "intro; apply H.",
                        "VernacExtend",
                        "2155aadd67abfad07bb52771af5eefbf7e2e6097"
                    ]
                },
                {
                    "command": [
                        "apply nat_double_ind.",
                        "VernacExtend",
                        "d9b76524920967069951072ce7c9bfae710f4a1c"
                    ]
                },
                {
                    "command": [
                        "unfold R; intros; simpl; apply le_n.",
                        "VernacExtend",
                        "c43b98ecd7b6d00865546d4f2ee1eef349b93649"
                    ]
                },
                {
                    "command": [
                        "unfold R; intros; simpl; apply le_n.",
                        "VernacExtend",
                        "c43b98ecd7b6d00865546d4f2ee1eef349b93649"
                    ]
                },
                {
                    "command": [
                        "unfold R; intros; simpl; apply le_trans with n.",
                        "VernacExtend",
                        "2a964413a1f118344fa1e1b867443d4df402e59c"
                    ]
                },
                {
                    "command": [
                        "apply H0; apply le_S_n; assumption.",
                        "VernacExtend",
                        "80f2d0b5e7781d19f8d56c0044110265f5e9aedd"
                    ]
                },
                {
                    "command": [
                        "apply le_n_Sn.",
                        "VernacExtend",
                        "7889648199cacb866ef42ba6b4c4192f713b44f4"
                    ]
                },
                {
                    "command": [
                        "unfold R; intros; apply H; assumption.",
                        "VernacExtend",
                        "6cec568a3dc0395f6a7997809b89aab8f479822b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lt_minus_O_lt",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intros n m; pattern n, m; apply nat_double_ind; [ intros; rewrite <- minus_n_O; assumption | intros; elim (lt_n_O _ H) | intros; simpl; apply H; apply lt_S_n; assumption ].",
                        "VernacExtend",
                        "50a2087187516d5b11218e607dbc79c6d5123f45"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "even_odd_cor",
            "line_nb": 35,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (H := even_or_odd n).",
                        "VernacExtend",
                        "ad4b8e297c334a39a73eb0d68dec8bdb4810a413"
                    ]
                },
                {
                    "command": [
                        "exists (div2 n).",
                        "VernacExtend",
                        "b5cfec5307a526f6887fdf23863d29bbd444e16e"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := even_odd_double n).",
                        "VernacExtend",
                        "119004a29f77e7ac7c031c8479b7f1b5d2cdedf5"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros.",
                        "VernacExtend",
                        "6b83f392a470a8cdaa118e532bc445a009dec854"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros H3 _.",
                        "VernacExtend",
                        "b445d88261e4c275f54ba10ad454c54aad494aaf"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros H4 _.",
                        "VernacExtend",
                        "5aadee38380b91d5e465afe7841db62e400d1f10"
                    ]
                },
                {
                    "command": [
                        "replace (2 * div2 n)%nat with (double (div2 n)).",
                        "VernacExtend",
                        "9ecd982b68f206494da2e52f5320f2927c0c3cb0"
                    ]
                },
                {
                    "command": [
                        "elim H; intro.",
                        "VernacExtend",
                        "f72f8bb994653bc377ef4f37626cba5f2cab4c8b"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "apply H3; assumption.",
                        "VernacExtend",
                        "5797d1cfc3adb7c1e34d2f0d332d89f950d72fea"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "apply H4; assumption.",
                        "VernacExtend",
                        "ed2481e3b356eac580ff85aa054528aba71fc300"
                    ]
                },
                {
                    "command": [
                        "unfold double;ring.",
                        "VernacExtend",
                        "547630c44d44ab0513e1f0ce00dc91d722385e40"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "le_double",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "intros; apply INR_le.",
                        "VernacExtend",
                        "214a75a673b0a958230194b7c90967e209210551"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := le_INR _ _ H).",
                        "VernacExtend",
                        "3b2a0ba260070e5e418841cc858415e2c7fe86a1"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite mult_INR in H1.",
                        "VernacExtend",
                        "d2ecf3d4bf52739571f0aa41dc5488e2a7e559bb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (INR 2).",
                        "VernacExtend",
                        "582db43033e4fef578cc50dae6f151c71f55401e"
                    ]
                },
                {
                    "command": [
                        "replace (INR 2) with 2; [ prove_sup0 | reflexivity ].",
                        "VernacExtend",
                        "d00fb8b4a07af2eb219afbb938a2564a6370acef"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "euclidian_division",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "set (k0 := match Rcase_abs y with | left _ => (1 - up (x / - y))%Z | right _ => (up (x / y) - 1)%Z end).",
                        "VernacExtend",
                        "8da19d8f3f8c163c93f283592bd01d4de91935fd"
                    ]
                },
                {
                    "command": [
                        "exists k0.",
                        "VernacExtend",
                        "4e007650466afa037b19f143e6228d22e04d3957"
                    ]
                },
                {
                    "command": [
                        "exists (x - IZR k0 * y).",
                        "VernacExtend",
                        "e15c47ddd53a0c153ff5655a145c4a84738bbd88"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold k0; case (Rcase_abs y) as [Hlt|Hge].",
                        "VernacExtend",
                        "6922b736a0998f70960edc1855c9c372514bc382"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := archimed (x / - y)); rewrite <- Z_R_minus; simpl; unfold Rminus.",
                        "VernacExtend",
                        "49517cc947f8431415f393c6f90e0fccd9679765"
                    ]
                },
                {
                    "command": [
                        "replace (- ((1 + - IZR (up (x / - y))) * y)) with ((IZR (up (x / - y)) - 1) * y); [ idtac | ring ].",
                        "VernacExtend",
                        "7de1be9fa25f9a8e347d0daec5c63d7cd1fa3fa4"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (/ - y).",
                        "VernacExtend",
                        "86acc924ea154cdf614edbc6539af560b5ff6846"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply Ropp_0_gt_lt_contravar; exact Hlt.",
                        "VernacExtend",
                        "2a21da1247eba00ec1c24473e9c1c0a2bb49055b"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_0_r; rewrite (Rmult_comm (/ - y)); rewrite Rmult_plus_distr_r; rewrite <- Ropp_inv_permute; [ idtac | assumption ].",
                        "VernacExtend",
                        "65693cf34a2b827c1e6bb4257eb4eedc82da3212"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; repeat rewrite Ropp_mult_distr_r_reverse; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r | assumption ].",
                        "VernacExtend",
                        "1654482976d6149e0ac27ad71daa6a5a78fc892c"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (IZR (up (x / - y)) - x / - y).",
                        "VernacExtend",
                        "1818a58e80e7cdb54f86b5bedc13eda259601a0e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; unfold Rdiv; pattern (/ - y) at 4; rewrite <- Ropp_inv_permute; [ idtac | assumption ].",
                        "VernacExtend",
                        "3418697e1efdb8369e4d64db999566434d0fa9c2"
                    ]
                },
                {
                    "command": [
                        "replace (IZR (up (x * / - y)) - x * - / y + (- (x * / y) + - (IZR (up (x * / - y)) - 1))) with 1; [ idtac | ring ].",
                        "VernacExtend",
                        "3bcdc7c642454cfd7bf4bf5c7319fb7bfd70b655"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros _ H1; unfold Rdiv in H1; exact H1.",
                        "VernacExtend",
                        "4474f0c05c87861fb85f87ba842700c2e16ef8ba"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rabs_left _ Hlt); apply Rmult_lt_reg_l with (/ - y).",
                        "VernacExtend",
                        "141c0157ff68f59baf7d870267bd5db60a5f64f3"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply Ropp_0_gt_lt_contravar; exact Hlt.",
                        "VernacExtend",
                        "2a21da1247eba00ec1c24473e9c1c0a2bb49055b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "6dcb59ca5b85038cc8fddd44b4afdcbe28fba0ba"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (/ - y)); rewrite Rmult_plus_distr_r; rewrite <- Ropp_inv_permute; [ idtac | assumption ].",
                        "VernacExtend",
                        "f5be19dcc25e2002158133d83b66b2234b53502d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; repeat rewrite Ropp_mult_distr_r_reverse; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r | assumption ]; apply Rplus_lt_reg_l with (IZR (up (x / - y)) - 1).",
                        "VernacExtend",
                        "9fd2baf1e68ba59503cdb053872f0cef32a77922"
                    ]
                },
                {
                    "command": [
                        "replace (IZR (up (x / - y)) - 1 + 1) with (IZR (up (x / - y))); [ idtac | ring ].",
                        "VernacExtend",
                        "298eb410d415f3106272d775ab45f4661d840c97"
                    ]
                },
                {
                    "command": [
                        "replace (IZR (up (x / - y)) - 1 + (- (x * / y) + - (IZR (up (x / - y)) - 1))) with (- (x * / y)); [ idtac | ring ].",
                        "VernacExtend",
                        "f8bb1fde3397d21972a04de993de8a321d0dd156"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_mult_distr_r_reverse; rewrite (Ropp_inv_permute _ H); elim H0; unfold Rdiv; intros H1 _; exact H1.",
                        "VernacExtend",
                        "d2d1fe96fcb78b880e088af091d3f77ef3d5aad0"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_neq_0_compat; assumption.",
                        "VernacExtend",
                        "a539604805abaeda5e27c6d280fe7b2b24f15b11"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := archimed (x / y)); rewrite <- Z_R_minus; simpl; cut (0 < y).",
                        "VernacExtend",
                        "639e62e396531a458f073f30898b0a931bdf3554"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Rminus; replace (- ((IZR (up (x / y)) + -(1)) * y)) with ((1 - IZR (up (x / y))) * y); [ idtac | ring ].",
                        "VernacExtend",
                        "0b7b697799a4ec2023ded20337e353edd544b2de"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (/ y).",
                        "VernacExtend",
                        "8493a0345faedc41aa43b082de48aa52420c3944"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_0_r; rewrite (Rmult_comm (/ y)); rewrite Rmult_plus_distr_r; rewrite Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r | assumption ]; apply Rplus_le_reg_l with (IZR (up (x / y)) - x / y); rewrite Rplus_0_r; unfold Rdiv; replace (IZR (up (x * / y)) - x * / y + (x * / y + (1 - IZR (up (x * / y))))) with 1; [ idtac | ring ]; elim H0; intros _ H2; unfold Rdiv in H2; exact H2.",
                        "VernacExtend",
                        "0c6ac7bf498667f0588263447cfc826eac092b3d"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rabs_right _ Hge); apply Rmult_lt_reg_l with (/ y).",
                        "VernacExtend",
                        "4a75e30b5133efcfb61ef02a4279ae739784444f"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rinv_l_sym _ H); rewrite (Rmult_comm (/ y)); rewrite Rmult_plus_distr_r; rewrite Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r | assumption ]; apply Rplus_lt_reg_l with (IZR (up (x / y)) - 1); replace (IZR (up (x / y)) - 1 + 1) with (IZR (up (x / y))); [ idtac | ring ]; replace (IZR (up (x / y)) - 1 + (x * / y + (1 - IZR (up (x / y))))) with (x * / y); [ idtac | ring ]; elim H0; unfold Rdiv; intros H2 _; exact H2.",
                        "VernacExtend",
                        "dd5a8b7c525c25876e2383ff7cb9a85af4ffaacc"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T 0 y) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "e8f910f66de4629b3a2402c88e5b90fc10d0779d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim H; symmetry ; exact Heq.",
                        "VernacExtend",
                        "6f6f7a8fa2eec376729039eed3a5d2c3908c7e1e"
                    ]
                },
                {
                    "command": [
                        "apply Rge_le in Hge; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hge Hgt)).",
                        "VernacExtend",
                        "f7f0bdd3dace0a908b985b9f1b7ea5a90698dd71"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech8",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "intros; induction i as [| i Hreci].",
                        "VernacExtend",
                        "c9adc63016258b96a0e1d467a9bcaf9fe9e89584"
                    ]
                },
                {
                    "command": [
                        "replace (S n + 0)%nat with (S n); [ apply le_n_Sn | ring ].",
                        "VernacExtend",
                        "fd92406b3be1e3cef5a2737597a5f45c8e858b90"
                    ]
                },
                {
                    "command": [
                        "replace (S n + S i)%nat with (S (S n + i)).",
                        "VernacExtend",
                        "1c696f51553da378351faea2e02d0692ecc3d4ee"
                    ]
                },
                {
                    "command": [
                        "apply le_S; assumption.",
                        "VernacExtend",
                        "514388ff04a50a09884dd6094e16476c79a0a2e6"
                    ]
                },
                {
                    "command": [
                        "apply INR_eq; rewrite S_INR; do 2 rewrite plus_INR; do 2 rewrite S_INR; ring.",
                        "VernacExtend",
                        "9296a64c1b2631405524d4d54ae7d5be87a6a7e4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}