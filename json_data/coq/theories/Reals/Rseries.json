{
    "filename": "theories/Reals/Rseries.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Compare.",
            "VernacRequire",
            "ed10e123546ab163fca5027b6544d1560fdf964f"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Implicit Type r : R.",
            "VernacReserve",
            "8735558f556e62eb49eeadfa3082792221cf37f3"
        ],
        [
            "Section sequence.",
            "VernacBeginSection",
            "116ec657e1b9e15208708895832947b3beaec6d4"
        ],
        [
            "Variable Un : nat -> R.",
            "VernacAssumption",
            "1588f8993f7f4cd2ee7a695bf43875515bec6c28"
        ],
        [
            "Fixpoint Rmax_N (N:nat) : R := match N with | O => Un 0 | S n => Rmax (Un (S n)) (Rmax_N n) end.",
            "VernacFixpoint",
            "3e007518f2aec5102cdc1332a3f8ae6a754365d0"
        ],
        [
            "Definition EUn r : Prop := exists i : nat, r = Un i.",
            "VernacDefinition",
            "8877014a84c324331d470d8cf07f3c69e1e5e8ee"
        ],
        [
            "Definition Un_cv (l:R) : Prop := forall eps:R, eps > 0 -> exists N : nat, (forall n:nat, (n >= N)%nat -> R_dist (Un n) l < eps).",
            "VernacDefinition",
            "e68e4739ede6d414eec33774ea07a3c8eb5f9738"
        ],
        [
            "Definition Cauchy_crit : Prop := forall eps:R, eps > 0 -> exists N : nat, (forall n m:nat, (n >= N)%nat -> (m >= N)%nat -> R_dist (Un n) (Un m) < eps).",
            "VernacDefinition",
            "4ec8f51d98d65aca8af651fb174de4223a90b0a4"
        ],
        [
            "Definition Un_growing : Prop := forall n:nat, Un n <= Un (S n).",
            "VernacDefinition",
            "bd50573c6e91e2ca829059d2722618cd8f2b5495"
        ],
        [
            "Lemma EUn_noempty : exists r : R, EUn r.",
            "VernacStartTheoremProof",
            "db1d11b99b5ea6a0d336773c791824676c05441b"
        ],
        [
            "unfold EUn; split with (Un 0); split with 0%nat; trivial.",
            "VernacExtend",
            "4953b94825de73d11ca8880c66940811a8b235ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Un_in_EUn : forall n:nat, EUn (Un n).",
            "VernacStartTheoremProof",
            "8132607fe51a7aa3c046a7f7d69d89f982386bfc"
        ],
        [
            "intro; unfold EUn; split with n; trivial.",
            "VernacExtend",
            "b343408d60fa0c62d0b543562801d0a14108a2d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Un_bound_imp : forall x:R, (forall n:nat, Un n <= x) -> is_upper_bound EUn x.",
            "VernacStartTheoremProof",
            "8f55d29ac0e9f55e21a2505c9b58d0f1d3a627d4"
        ],
        [
            "intros; unfold is_upper_bound; intros; unfold EUn in H0; elim H0; clear H0; intros; generalize (H x1); intro; rewrite <- H0 in H1; trivial.",
            "VernacExtend",
            "87cd13b45f13af4ccfb0143f2033580cf7e9d6e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma growing_prop : forall n m:nat, Un_growing -> (n >= m)%nat -> Un n >= Un m.",
            "VernacStartTheoremProof",
            "732ea6c1af2816cedc8272247daad05fa16a2bb9"
        ],
        [
            "double induction n m; intros.",
            "VernacExtend",
            "853c260ed5a95eb8fde2c61ad0ba5c115d882f78"
        ],
        [
            "unfold Rge; right; trivial.",
            "VernacExtend",
            "107befaf0834832d450a1bdd3ca3e451f3a57c15"
        ],
        [
            "exfalso; unfold ge in H1; generalize (le_Sn_O n0); intro; auto.",
            "VernacExtend",
            "71e8b88a961758852c758ee33c2aab195e1d8b0c"
        ],
        [
            "cut (n0 >= 0)%nat.",
            "VernacExtend",
            "4970da5f07ec1d3e19a1ad84d7be99aea4bcacde"
        ],
        [
            "generalize H0; intros; unfold Un_growing in H0; apply (Rge_trans (Un (S n0)) (Un n0) (Un 0) (Rle_ge (Un n0) (Un (S n0)) (H0 n0)) (H 0%nat H2 H3)).",
            "VernacExtend",
            "bb5011485d1901e5deb927c03549ef155f3fb06d"
        ],
        [
            "elim n0; auto.",
            "VernacExtend",
            "50f0b26ed6b37ffb4a92b51ccee093e13841cd08"
        ],
        [
            "elim (lt_eq_lt_dec n1 n0); intro y.",
            "VernacExtend",
            "8572d141ca0e8baa96434127a8a904d0c0bc50dd"
        ],
        [
            "elim y; clear y; intro y.",
            "VernacExtend",
            "aafbc31a10b69e1fcc8d0baec1d0548a7774efc1"
        ],
        [
            "unfold ge in H2; generalize (le_not_lt n0 n1 (le_S_n n0 n1 H2)); intro; exfalso; auto.",
            "VernacExtend",
            "41806ec9de5151bd11638a240fe6d9d56aa10298"
        ],
        [
            "rewrite y; unfold Rge; right; trivial.",
            "VernacExtend",
            "0bc875c62c4141d3f7b68d5855bee4e041013def"
        ],
        [
            "unfold ge in H0; generalize (H0 (S n0) H1 (lt_le_S n0 n1 y)); intro; unfold Un_growing in H1; apply (Rge_trans (Un (S n1)) (Un n1) (Un (S n0)) (Rle_ge (Un n1) (Un (S n1)) (H1 n1)) H3).",
            "VernacExtend",
            "dc74f0c1b160a14243f37907715da45c4f70215c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Un_cv_crit_lub : Un_growing -> forall l, is_lub EUn l -> Un_cv l.",
            "VernacStartTheoremProof",
            "e88dd61211e8e289954f7727a935923765d7ce42"
        ],
        [
            "intros Hug l H eps Heps.",
            "VernacExtend",
            "83b0154e8fef0119625bad9afc104a48b43f7d91"
        ],
        [
            "cut (exists N, Un N > l - eps).",
            "VernacExtend",
            "f8b6ccdc878e541d4b5a9f01b32657095679f049"
        ],
        [
            "intros (N, H3).",
            "VernacExtend",
            "4717ca0147380c5b921ce72992d39182861285dd"
        ],
        [
            "exists N.",
            "VernacExtend",
            "3a77aef7937b4644ae655ca246f76b7aa0d197df"
        ],
        [
            "intros n H4.",
            "VernacExtend",
            "6072735aed11c10b0a4bd0a02eaf173ea6993ce8"
        ],
        [
            "unfold R_dist.",
            "VernacExtend",
            "9d14879a55d02ad54565968e31b64da7aeb66d97"
        ],
        [
            "rewrite Rabs_left1, Ropp_minus_distr.",
            "VernacExtend",
            "b85ddce73428877a77a429ecdd6c6debf13ae441"
        ],
        [
            "apply Rplus_lt_reg_l with (Un n - eps).",
            "VernacExtend",
            "89e69fb43f264a80fb1d19be611000fc2fdbcc84"
        ],
        [
            "apply Rlt_le_trans with (Un N).",
            "VernacExtend",
            "1b20a02ddba35590fa7e87a1388981d1414c03b5"
        ],
        [
            "now replace (Un n - eps + (l - Un n)) with (l - eps) by ring.",
            "VernacExtend",
            "f3132b4c56abfafbb6c3b0999f6e741056e510a3"
        ],
        [
            "replace (Un n - eps + eps) with (Un n) by ring.",
            "VernacExtend",
            "c667cbbef006997021d724493d9db6827fd66645"
        ],
        [
            "apply Rge_le.",
            "VernacExtend",
            "eae8ed3f063c0c64fc52ba03563e73be950936a6"
        ],
        [
            "now apply growing_prop.",
            "VernacExtend",
            "86df2ddea7403c6181132d647adefea29f898024"
        ],
        [
            "apply Rle_minus.",
            "VernacExtend",
            "7e46e8a6683420ce8b2242ac68da7361c6b86840"
        ],
        [
            "apply (proj1 H).",
            "VernacExtend",
            "f5ed348937e6fe2efedf7c111dce79cafd8aa1bb"
        ],
        [
            "now exists n.",
            "VernacExtend",
            "42d718ad51c566098409e9121294b6d4b019afc1"
        ],
        [
            "assert (Hi2pn: forall n, 0 < (/ 2)^n).",
            "VernacExtend",
            "be285ed906e3fc010871b7a20d7980d696a6fb69"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "intros n.",
            "VernacExtend",
            "9410cc86153539309ee696ae5785ea70534ece11"
        ],
        [
            "apply pow_lt.",
            "VernacExtend",
            "8644a99ddc9716c887b11bda1d50a5dad84886a2"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply (IZR_lt 0 2).",
            "VernacExtend",
            "811230e32c24be12422519458e58d655d96649aa"
        ],
        [
            "pose (test := fun n => match Rle_lt_dec (Un n) (l - eps) with left _ => false | right _ => true end).",
            "VernacExtend",
            "2ff6eddc955573115d999cb323abb50b73d3ff3e"
        ],
        [
            "pose (sum := let fix aux n := match n with S n' => aux n' + if test n' then (/ 2)^n else 0 | O => 0 end in aux).",
            "VernacExtend",
            "6d7cab73a4dc35a24d75ddb87ab2ca4ebe878bfa"
        ],
        [
            "assert (Hsum': forall m n, sum m <= sum (m + n)%nat <= sum m + (/2)^m - (/2)^(m + n)).",
            "VernacExtend",
            "09d97c5ebe5b4af101245534055fdad28703f34f"
        ],
        [
            "clearbody test.",
            "VernacExtend",
            "ba96da2203f2c1c92638a84a4a47661b638b1140"
        ],
        [
            "clear -Hi2pn.",
            "VernacExtend",
            "177e73c5a178ca747cf4b329e331ed46eeb0654b"
        ],
        [
            "intros m.",
            "VernacExtend",
            "c09fb64a4c58d7cc03a731f8399ff847939fe4f0"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "rewrite<- plus_n_O.",
            "VernacExtend",
            "82e76fe4a7447040940c37f8f7935de7fb153db6"
        ],
        [
            "ring_simplify (sum m + (/ 2) ^ m - (/ 2) ^ m).",
            "VernacExtend",
            "cabafd1ffb40749f6f6ecf30a6794dd0389e0a5d"
        ],
        [
            "split ; apply Rle_refl.",
            "VernacExtend",
            "2680661340e95211f9a1bd92c42272224068d8f4"
        ],
        [
            "rewrite <- plus_n_Sm.",
            "VernacExtend",
            "10308ef961b07f08e71cba91e06650cc774994fe"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with (sum (m + n)%nat + 0).",
            "VernacExtend",
            "7b2975f754284da5cda99792baecbf8cea503cf8"
        ],
        [
            "rewrite Rplus_0_r.",
            "VernacExtend",
            "d5c1fdd9d1c31f6ede268b5fbee697b051ea4fe2"
        ],
        [
            "apply IHn.",
            "VernacExtend",
            "1c9414f4f052b2727ca012553a4a3a2a0fc85649"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "case (test (m + n)%nat).",
            "VernacExtend",
            "8719dba141ccc300947cc68dc25972b5451ef04b"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "exact (Hi2pn (S (m + n))).",
            "VernacExtend",
            "aee747daccc0cf7959602e652f44e7718f3f76c4"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rle_trans with (sum (m + n)%nat + / 2 * (/ 2) ^ (m + n)).",
            "VernacExtend",
            "c8d4e51fda0147caf362e326810735991e21e814"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "case (test (m + n)%nat).",
            "VernacExtend",
            "8719dba141ccc300947cc68dc25972b5451ef04b"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "exact (Hi2pn (S (m + n))).",
            "VernacExtend",
            "aee747daccc0cf7959602e652f44e7718f3f76c4"
        ],
        [
            "apply Rplus_le_reg_r with (-(/ 2 * (/ 2) ^ (m + n))).",
            "VernacExtend",
            "b1b1964b978e17a624f2a96fc9664ca2cdfabe27"
        ],
        [
            "rewrite Rplus_assoc, Rplus_opp_r, Rplus_0_r.",
            "VernacExtend",
            "a38dc4719414c34cac131c26e1c5434656a1c90a"
        ],
        [
            "apply Rle_trans with (1 := proj2 IHn).",
            "VernacExtend",
            "2c03155405e55cae3de54e37a77c5eda0e6d0398"
        ],
        [
            "apply Req_le.",
            "VernacExtend",
            "b69ffc9461f465218c69f379ac293728d3f8e7bd"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "assert (Hsum: forall n, 0 <= sum n <= 1 - (/2)^n).",
            "VernacExtend",
            "2006d728ddfc6d11fc0d5b7767ce8f5d17125761"
        ],
        [
            "intros N.",
            "VernacExtend",
            "118d8cc76afed992d416336eb00759d8eee4e0b4"
        ],
        [
            "generalize (Hsum' O N).",
            "VernacExtend",
            "5718ee1ce03416a39b60a9d1db8918b9ab72c528"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "now rewrite Rplus_0_l.",
            "VernacExtend",
            "464cce2f9eb67bb41762a6c14f77d7754f07c61b"
        ],
        [
            "destruct (completeness (fun x : R => exists n : nat, x = sum n)) as (m, (Hm1, Hm2)).",
            "VernacExtend",
            "bd947294e71525562612483c63c29c77409fe3d4"
        ],
        [
            "exists 1.",
            "VernacExtend",
            "18eb310858be5acae7304d0d9ed33063568db310"
        ],
        [
            "intros x (n, H1).",
            "VernacExtend",
            "2638880976c599549392579f7e7c8613e930ce0a"
        ],
        [
            "rewrite H1.",
            "VernacExtend",
            "91099f93f9346d13e3fc00550ba094ceac5333db"
        ],
        [
            "apply Rle_trans with (1 := proj2 (Hsum n)).",
            "VernacExtend",
            "1607b62dd84b1526aa81e8179d94580930e8cc12"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rplus_lt_reg_l with ((/2)^n - 1).",
            "VernacExtend",
            "bfde148e4cf228bb1fd1a0cecfd983e8d5a3e14a"
        ],
        [
            "now ring_simplify.",
            "VernacExtend",
            "2d108f365e3e8acc156a34cc381bc8087ba632ff"
        ],
        [
            "exists 0.",
            "VernacExtend",
            "b12b8acd7a1526ef0683513a127984e4864502d9"
        ],
        [
            "now exists O.",
            "VernacExtend",
            "db5c47bc738d583321df89818ad275fd8e358a68"
        ],
        [
            "destruct (Rle_or_lt m 0) as [[Hm|Hm]|Hm].",
            "VernacExtend",
            "874ffb6c517829906609528c8cce04d73bd2a257"
        ],
        [
            "elim Rlt_not_le with (1 := Hm).",
            "VernacExtend",
            "a0899766e8fdf88d7b72b86f70e700523fff32db"
        ],
        [
            "apply Hm1.",
            "VernacExtend",
            "ca8ac590579529767a4d25fe4b2b52e30658b0f2"
        ],
        [
            "now exists O.",
            "VernacExtend",
            "db5c47bc738d583321df89818ad275fd8e358a68"
        ],
        [
            "assert (Hs0: forall n, sum n = 0).",
            "VernacExtend",
            "38316b89d9fc758ba06360412976ae23373a1d76"
        ],
        [
            "intros n.",
            "VernacExtend",
            "9410cc86153539309ee696ae5785ea70534ece11"
        ],
        [
            "specialize (Hm1 (sum n) (ex_intro _ _ (eq_refl _))).",
            "VernacExtend",
            "a97b364bc2f48f46274c7f542dc6696a96330871"
        ],
        [
            "apply Rle_antisym with (2 := proj1 (Hsum n)).",
            "VernacExtend",
            "01ef34875f8874d3841870b7b66e5945c0fb31e1"
        ],
        [
            "now rewrite <- Hm.",
            "VernacExtend",
            "b6913257669e9e906d61cd001e26f7c50b9ba2f1"
        ],
        [
            "assert (Hub: forall n, Un n <= l - eps).",
            "VernacExtend",
            "f270678ed5ff15a45d259247c67ffb98c5faa9a6"
        ],
        [
            "intros n.",
            "VernacExtend",
            "9410cc86153539309ee696ae5785ea70534ece11"
        ],
        [
            "generalize (eq_refl (sum (S n))).",
            "VernacExtend",
            "cbddacba1b66fd6cf28d337362bd093e1f400849"
        ],
        [
            "simpl sum at 1.",
            "VernacExtend",
            "70424039a10de478463d9378fcd8987f53bb5361"
        ],
        [
            "rewrite 2!Hs0, Rplus_0_l.",
            "VernacExtend",
            "a1466c5d3200d585c1658a00dbbe37f9c9e2fa2f"
        ],
        [
            "unfold test.",
            "VernacExtend",
            "4f96d561a62bd761fd88e88c961dc3865af592b4"
        ],
        [
            "destruct Rle_lt_dec.",
            "VernacExtend",
            "395ab269d9932a3d0cda4a649fc047c07f385481"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "intros H'.",
            "VernacExtend",
            "d7903418c9c01fda86d2cc847b39424719d50154"
        ],
        [
            "elim Rgt_not_eq with (2 := H').",
            "VernacExtend",
            "c495c37450979bc7bf75ec7ca73b64f716591b07"
        ],
        [
            "exact (Hi2pn (S n)).",
            "VernacExtend",
            "ac139fd13c040a625f097348e3195c7efc2b6c47"
        ],
        [
            "clear -Heps H Hub.",
            "VernacExtend",
            "3a764a54094115b0367fb56c9bf59d9d26d7aba3"
        ],
        [
            "destruct H as (_, H).",
            "VernacExtend",
            "01fc932262dcfce3f14eafe3b9c956eca9e097d9"
        ],
        [
            "refine (False_ind _ (Rle_not_lt _ _ (H (l - eps) _) _)).",
            "VernacExtend",
            "50ffb280023d624eb7b4da560f9fb78618cd9df6"
        ],
        [
            "intros x (n, H1).",
            "VernacExtend",
            "2638880976c599549392579f7e7c8613e930ce0a"
        ],
        [
            "now rewrite H1.",
            "VernacExtend",
            "1172ac45f58471854abbfe26373581bfebca221c"
        ],
        [
            "apply Rplus_lt_reg_l with (eps - l).",
            "VernacExtend",
            "eea7fc362649df03bcc1bf5a9b14a4246bf8e659"
        ],
        [
            "now ring_simplify.",
            "VernacExtend",
            "2d108f365e3e8acc156a34cc381bc8087ba632ff"
        ],
        [
            "assert (Rabs (/2) < 1).",
            "VernacExtend",
            "a12778b978c392451e2ec5d5156995bb6b02b4d5"
        ],
        [
            "rewrite Rabs_pos_eq.",
            "VernacExtend",
            "489e84e15a0f0c3833f18764e3ff39e15bc66da3"
        ],
        [
            "rewrite <- Rinv_1.",
            "VernacExtend",
            "25f4271863b63e7960d69c1c8df426f168da59be"
        ],
        [
            "apply Rinv_lt_contravar.",
            "VernacExtend",
            "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "now apply (IZR_lt 0 2).",
            "VernacExtend",
            "811230e32c24be12422519458e58d655d96649aa"
        ],
        [
            "now apply (IZR_lt 1 2).",
            "VernacExtend",
            "d40a3b69ffcfcaa7931ecec6959957d4352e9df8"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "now apply (IZR_lt 0 2).",
            "VernacExtend",
            "811230e32c24be12422519458e58d655d96649aa"
        ],
        [
            "destruct (pow_lt_1_zero (/2) H0 m Hm) as [N H4].",
            "VernacExtend",
            "5c90b57075c354a62ee322b65ff55de28240ccd0"
        ],
        [
            "exists N.",
            "VernacExtend",
            "3a77aef7937b4644ae655ca246f76b7aa0d197df"
        ],
        [
            "apply Rnot_le_lt.",
            "VernacExtend",
            "b6f8b57a60bfd6845f42e4c68c9a5305f4b60dd7"
        ],
        [
            "intros H5.",
            "VernacExtend",
            "a10a5ca5b174033fb0b79ea7323f72b7594fe7dc"
        ],
        [
            "apply Rlt_not_le with (1 := H4 _ (le_refl _)).",
            "VernacExtend",
            "fe07b5c0d008a5836ba05e8cc23da051a0dd4568"
        ],
        [
            "rewrite Rabs_pos_eq.",
            "VernacExtend",
            "489e84e15a0f0c3833f18764e3ff39e15bc66da3"
        ],
        [
            "2: now apply Rlt_le.",
            "VernacExtend",
            "9f23ebd721c661ddcc58b37b3d2937dd87b4451e"
        ],
        [
            "apply Hm2.",
            "VernacExtend",
            "f5357eebd04278fdacc44c57acb4542e8156d999"
        ],
        [
            "intros x (n, H6).",
            "VernacExtend",
            "36a01779d48ac686c7219bb6cabb6bf31362499d"
        ],
        [
            "rewrite H6.",
            "VernacExtend",
            "ff6a429844c59cba51300abb872460dbdbab812d"
        ],
        [
            "clear x H6.",
            "VernacExtend",
            "4d9bd9227c6fcda4741cc603b250ea7f67ac0eb8"
        ],
        [
            "assert (Hs: sum N = 0).",
            "VernacExtend",
            "a297363cb9f236a16043e54411f22758576506f9"
        ],
        [
            "clear H4.",
            "VernacExtend",
            "b63698fbba7b38f68086944744e776a2fb5bc886"
        ],
        [
            "induction N.",
            "VernacExtend",
            "014c91061e9f52f369bba44af3bfd9be499036f5"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (H6: Un N <= l - eps).",
            "VernacExtend",
            "5d1966d8cec8c51145077da17a544149a2bd3fb3"
        ],
        [
            "apply Rle_trans with (2 := H5).",
            "VernacExtend",
            "38aa7c87a58f3e9d5a1a8020cf805cfb4d681bf2"
        ],
        [
            "apply Rge_le.",
            "VernacExtend",
            "eae8ed3f063c0c64fc52ba03563e73be950936a6"
        ],
        [
            "apply growing_prop ; try easy.",
            "VernacExtend",
            "2e4098b37e869d5b732e41553c56a3ca53d29c8f"
        ],
        [
            "apply le_n_Sn.",
            "VernacExtend",
            "7889648199cacb866ef42ba6b4c4192f713b44f4"
        ],
        [
            "rewrite (IHN H6), Rplus_0_l.",
            "VernacExtend",
            "19132dd88641ed3320154d4146b4c089f2626467"
        ],
        [
            "unfold test.",
            "VernacExtend",
            "4f96d561a62bd761fd88e88c961dc3865af592b4"
        ],
        [
            "destruct Rle_lt_dec as [Hle|Hlt].",
            "VernacExtend",
            "4bec5d6bffa69b8632eba2226df852f3e4975002"
        ],
        [
            "apply eq_refl.",
            "VernacExtend",
            "7c24386880b38fe6934d624f41ac1fd4ba47d797"
        ],
        [
            "now elim Rlt_not_le with (1 := Hlt).",
            "VernacExtend",
            "ba4dd8517cd71f75639858ba25350a8869fae92a"
        ],
        [
            "destruct (le_or_lt N n) as [Hn|Hn].",
            "VernacExtend",
            "d9c668f09d1201a0a66d6b796074dabcaf75f756"
        ],
        [
            "rewrite le_plus_minus with (1 := Hn).",
            "VernacExtend",
            "298c5ec5af29f7c91bd47fb2fc07d4ebe01ae5b5"
        ],
        [
            "apply Rle_trans with (1 := proj2 (Hsum' N (n - N)%nat)).",
            "VernacExtend",
            "999c962c994c1f30381aba431a43791efccefd6b"
        ],
        [
            "rewrite Hs, Rplus_0_l.",
            "VernacExtend",
            "28508ca53bc8cba1a222917b8b1f99b8932f7c84"
        ],
        [
            "set (k := (N + (n - N))%nat).",
            "VernacExtend",
            "c0b6a89d414aeb9bb2486d392120b07b1c4735d6"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rplus_lt_reg_l with ((/2)^k - (/2)^N).",
            "VernacExtend",
            "7c6f452049ccca21f3e38647aed87b0e39e5ae17"
        ],
        [
            "now ring_simplify.",
            "VernacExtend",
            "2d108f365e3e8acc156a34cc381bc8087ba632ff"
        ],
        [
            "apply Rle_trans with (sum N).",
            "VernacExtend",
            "e45c7eaffab7942a1ad98dd4f1c5609ac7937da1"
        ],
        [
            "rewrite le_plus_minus with (1 := Hn).",
            "VernacExtend",
            "298c5ec5af29f7c91bd47fb2fc07d4ebe01ae5b5"
        ],
        [
            "rewrite plus_Snm_nSm.",
            "VernacExtend",
            "7028b6ce59102104e63e54749f753c7f4e50300a"
        ],
        [
            "exact (proj1 (Hsum' _ _)).",
            "VernacExtend",
            "2a92168d1cf8a2787150112f3e7f6c0411de15dc"
        ],
        [
            "rewrite Hs.",
            "VernacExtend",
            "ddea6993e3e1146e762703b9c4c45fb5767a9a44"
        ],
        [
            "now apply Rlt_le.",
            "VernacExtend",
            "3fa67bbd472123a7abc1f777aecc643fb3862e46"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Un_cv_crit : Un_growing -> bound EUn -> exists l : R, Un_cv l.",
            "VernacStartTheoremProof",
            "9e1f02fcb890aa43259dc224dee18ef66b2a5d3e"
        ],
        [
            "intros Hug Heub.",
            "VernacExtend",
            "7a71aed4c8b72d68da15aebd79e2e459583e5e50"
        ],
        [
            "exists (proj1_sig (completeness EUn Heub EUn_noempty)).",
            "VernacExtend",
            "37529bb3b42cd16365f5695f7b22eac2b6d72931"
        ],
        [
            "destruct (completeness EUn Heub EUn_noempty) as (l, H).",
            "VernacExtend",
            "d1eb8df19bb8b0dac670818481b87f9f301208c9"
        ],
        [
            "now apply Un_cv_crit_lub.",
            "VernacExtend",
            "0d547fc2b02364cc6e1352ff6e7be089c0020d1d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma finite_greater : forall N:nat, exists M : R, (forall n:nat, (n <= N)%nat -> Un n <= M).",
            "VernacStartTheoremProof",
            "5dc30fcdcc5eb05b8e16651c510cfa1c217f2ad5"
        ],
        [
            "intro; induction N as [| N HrecN].",
            "VernacExtend",
            "6d38c437f2c86eef6aa81407f6f746cb454c2246"
        ],
        [
            "split with (Un 0); intros; rewrite (le_n_O_eq n H); apply (Req_le (Un n) (Un n) (eq_refl (Un n))).",
            "VernacExtend",
            "07eac5a6cef36259382789a33babdc95d67d6e51"
        ],
        [
            "elim HrecN; clear HrecN; intros; split with (Rmax (Un (S N)) x); intros; elim (Rmax_Rle (Un (S N)) x (Un n)); intros; clear H1; inversion H0.",
            "VernacExtend",
            "69ce6c6bfbc97ee5d656ccfa8753e133d5696f6e"
        ],
        [
            "rewrite <- H1; rewrite <- H1 in H2; apply (H2 (or_introl (Un n <= x) (Req_le (Un n) (Un n) (eq_refl (Un n))))).",
            "VernacExtend",
            "0d475a62d9387884b296a46018974c20185a8c66"
        ],
        [
            "apply (H2 (or_intror (Un n <= Un (S N)) (H n H3))).",
            "VernacExtend",
            "241f82e92391c438ad26b11726965ec56838d287"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cauchy_bound : Cauchy_crit -> bound EUn.",
            "VernacStartTheoremProof",
            "8313f0337c92a0d1cf2c07a7a9a80b8aefc861a4"
        ],
        [
            "unfold Cauchy_crit, bound; intros; unfold is_upper_bound; unfold Rgt in H; elim (H 1 Rlt_0_1); clear H; intros; generalize (H x); intro; generalize (le_dec x); intro; elim (finite_greater x); intros; split with (Rmax x0 (Un x + 1)); clear H; intros; unfold EUn in H; elim H; clear H; intros; elim (H1 x2); clear H1; intro y.",
            "VernacExtend",
            "d954806277b52786059e967b85efcd5db2acea64"
        ],
        [
            "unfold ge in H0; generalize (H0 x2 (le_n x) y); clear H0; intro; rewrite <- H in H0; unfold R_dist in H0; elim (Rabs_def2 (Un x - x1) 1 H0); clear H0; intros; elim (Rmax_Rle x0 (Un x + 1) x1); intros; apply H4; clear H3 H4; right; clear H H0 y; apply (Rlt_le x1 (Un x + 1)); generalize (Rlt_minus (-1) (Un x - x1) H1); clear H1; intro; apply (Rminus_lt x1 (Un x + 1)); cut (-1 - (Un x - x1) = x1 - (Un x + 1)); [ intro; rewrite H0 in H; assumption | ring ].",
            "VernacExtend",
            "d1c44aef5645c98657bfada7b99ef5a70cbbe1a6"
        ],
        [
            "generalize (H2 x2 y); clear H2 H0; intro; rewrite <- H in H0; elim (Rmax_Rle x0 (Un x + 1) x1); intros; clear H1; apply H2; left; assumption.",
            "VernacExtend",
            "9b4c034ee78e853667859df331752eb916a49a26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End sequence.",
            "VernacEndSegment",
            "65bfd1a3169218a0bebe34e3b71f7582571c7adc"
        ],
        [
            "Section Isequence.",
            "VernacBeginSection",
            "a16f10e54f2f338ac4afae183e61e9bbf861cdfa"
        ],
        [
            "Variable An : nat -> R.",
            "VernacAssumption",
            "6603c029b95fcc2d813dbce118f87ffbbfdfb44a"
        ],
        [
            "Definition Pser (x l:R) : Prop := infinite_sum (fun n:nat => An n * x ^ n) l.",
            "VernacDefinition",
            "29f45d9b958f1cf13c769c93e3755c7cb8e3136d"
        ],
        [
            "End Isequence.",
            "VernacEndSegment",
            "58622fb1842b62142ddc0e7fe731c2d0d19e9222"
        ],
        [
            "Lemma GP_infinite : forall x:R, Rabs x < 1 -> Pser (fun n:nat => 1) x (/ (1 - x)).",
            "VernacStartTheoremProof",
            "9a8a6d261c9906a75ddefd6882baab9ce1ce9f9a"
        ],
        [
            "intros; unfold Pser; unfold infinite_sum; intros; elim (Req_dec x 0).",
            "VernacExtend",
            "900a94bd3d2903b97a62341726ac5966960e3acd"
        ],
        [
            "intros; exists 0%nat; intros; rewrite H1; rewrite Rminus_0_r; rewrite Rinv_1; cut (sum_f_R0 (fun n0:nat => 1 * 0 ^ n0) n = 1).",
            "VernacExtend",
            "d037841e7ebf6cd1072d973874ee9d15fcfb424b"
        ],
        [
            "intros; rewrite H3; rewrite R_dist_eq; auto.",
            "VernacExtend",
            "058ba5aff290f490d856d63afdc96a86fcc6e273"
        ],
        [
            "elim n; simpl.",
            "VernacExtend",
            "34ca2c3a24e7db3a4201c3ddad183a7e6e49e202"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "intros; rewrite H3; ring.",
            "VernacExtend",
            "825b851e06a729b3729a134b192423ee19e6d0ad"
        ],
        [
            "intro; cut (0 < eps * (Rabs (1 - x) * Rabs (/ x))).",
            "VernacExtend",
            "c64ffd69ad619117a7771138f321597595341957"
        ],
        [
            "intro; elim (pow_lt_1_zero x H (eps * (Rabs (1 - x) * Rabs (/ x))) H2); intro N; intros; exists N; intros; cut (sum_f_R0 (fun n0:nat => 1 * x ^ n0) n = sum_f_R0 (fun n0:nat => x ^ n0) n).",
            "VernacExtend",
            "17a3adb0e3cc2b784efda6a9869c720c6871fa93"
        ],
        [
            "intros; rewrite H5; apply (Rmult_lt_reg_l (Rabs (1 - x)) (R_dist (sum_f_R0 (fun n0:nat => x ^ n0) n) (/ (1 - x))) eps).",
            "VernacExtend",
            "a26bb32df6453eeb5c4a56dffb6812f1b4e6b5bf"
        ],
        [
            "apply Rabs_pos_lt.",
            "VernacExtend",
            "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
        ],
        [
            "apply Rminus_eq_contra.",
            "VernacExtend",
            "36628d08ea6e2381fe85c05d842ae9dfbbca2407"
        ],
        [
            "apply Rlt_dichotomy_converse.",
            "VernacExtend",
            "e2390c6672b4ba01a7c287eaa7d370afb109d97e"
        ],
        [
            "right; unfold Rgt.",
            "VernacExtend",
            "f058577b0b2369505b096d07b54f7f490622b1a9"
        ],
        [
            "apply (Rle_lt_trans x (Rabs x) 1).",
            "VernacExtend",
            "b2152221a63c8dbdabaaed80fb05e1c481c4fece"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold R_dist; rewrite <- Rabs_mult.",
            "VernacExtend",
            "59d713800480d1807113fc4bd894d4195d2506d9"
        ],
        [
            "rewrite Rmult_minus_distr_l.",
            "VernacExtend",
            "7222a49d2309983cf6476a1131eec66c4836f9f6"
        ],
        [
            "cut ((1 - x) * sum_f_R0 (fun n0:nat => x ^ n0) n = - (sum_f_R0 (fun n0:nat => x ^ n0) n * (x - 1))).",
            "VernacExtend",
            "4ea2857164405f34f645265958358974fb8f1433"
        ],
        [
            "intro; rewrite H6.",
            "VernacExtend",
            "8200663e217075b0e34129067adc2221934c6b38"
        ],
        [
            "rewrite GP_finite.",
            "VernacExtend",
            "e160fb9d9d7a127f873209b3dc5c7efb1486420f"
        ],
        [
            "rewrite Rinv_r.",
            "VernacExtend",
            "901df6dbe8bfa5cb3145649e51a3e451e9ced1a3"
        ],
        [
            "cut (- (x ^ (n + 1) - 1) - 1 = - x ^ (n + 1)).",
            "VernacExtend",
            "7bf0719b2a255f92e172d2c29b1d8679a95f97d1"
        ],
        [
            "intro; rewrite H7.",
            "VernacExtend",
            "49c105e079b9233eb5a1b778d9bc09fa1272932d"
        ],
        [
            "rewrite Rabs_Ropp; cut ((n + 1)%nat = S n); auto.",
            "VernacExtend",
            "cb355e49d9fa13aee69bc1fb592255121308cdfe"
        ],
        [
            "intro H8; rewrite H8; simpl; rewrite Rabs_mult; apply (Rlt_le_trans (Rabs x * Rabs (x ^ n)) (Rabs x * (eps * (Rabs (1 - x) * Rabs (/ x)))) ( Rabs (1 - x) * eps)).",
            "VernacExtend",
            "bef1fe1a8dcf8b86179fd8369aa290540e2c22a8"
        ],
        [
            "apply Rmult_lt_compat_l.",
            "VernacExtend",
            "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
        ],
        [
            "apply Rabs_pos_lt.",
            "VernacExtend",
            "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "cut (Rabs x * (eps * (Rabs (1 - x) * Rabs (/ x))) = Rabs x * Rabs (/ x) * (eps * Rabs (1 - x))).",
            "VernacExtend",
            "3ba8cf20263b21ce34eb1ae74c47346441d8a763"
        ],
        [
            "clear H8; intros; rewrite H8; rewrite <- Rabs_mult; rewrite Rinv_r.",
            "VernacExtend",
            "1e5c69cb6f02da7fc07c2308a8195bf23c378867"
        ],
        [
            "rewrite Rabs_R1; cut (1 * (eps * Rabs (1 - x)) = Rabs (1 - x) * eps).",
            "VernacExtend",
            "5a88ce44c92fa778f02b1bb10743cc31c291acde"
        ],
        [
            "intros; rewrite H9; unfold Rle; right; reflexivity.",
            "VernacExtend",
            "8ef509655d22d9caafec5cbecfdde367e0ecc516"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply Rminus_eq_contra.",
            "VernacExtend",
            "36628d08ea6e2381fe85c05d842ae9dfbbca2407"
        ],
        [
            "apply Rlt_dichotomy_converse.",
            "VernacExtend",
            "e2390c6672b4ba01a7c287eaa7d370afb109d97e"
        ],
        [
            "right; unfold Rgt.",
            "VernacExtend",
            "f058577b0b2369505b096d07b54f7f490622b1a9"
        ],
        [
            "apply (Rle_lt_trans x (Rabs x) 1).",
            "VernacExtend",
            "b2152221a63c8dbdabaaed80fb05e1c481c4fece"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "ring; ring.",
            "VernacExtend",
            "3d990deb2ab26ec698b95ef8091f8ffcced6959e"
        ],
        [
            "elim n; simpl.",
            "VernacExtend",
            "34ca2c3a24e7db3a4201c3ddad183a7e6e49e202"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "intros; rewrite H5.",
            "VernacExtend",
            "1ef9741f203b9aa5810a39f825015f6af3786de4"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "apply Rabs_pos_lt.",
            "VernacExtend",
            "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
        ],
        [
            "apply Rminus_eq_contra.",
            "VernacExtend",
            "36628d08ea6e2381fe85c05d842ae9dfbbca2407"
        ],
        [
            "apply Rlt_dichotomy_converse.",
            "VernacExtend",
            "e2390c6672b4ba01a7c287eaa7d370afb109d97e"
        ],
        [
            "right; unfold Rgt.",
            "VernacExtend",
            "f058577b0b2369505b096d07b54f7f490622b1a9"
        ],
        [
            "apply (Rle_lt_trans x (Rabs x) 1).",
            "VernacExtend",
            "b2152221a63c8dbdabaaed80fb05e1c481c4fece"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rabs_pos_lt.",
            "VernacExtend",
            "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
        ],
        [
            "apply Rinv_neq_0_compat.",
            "VernacExtend",
            "f2f8681c7dbf9047cfba9a279da441217a933f75"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_shift : forall f k l, Un_cv (fun n => f (n + k)%nat) l -> Un_cv f l.",
            "VernacStartTheoremProof",
            "c504e21c0da4f4cd3c14ec3a389135dbb9b3534d"
        ],
        [
            "intros f' k l cvfk eps ep; destruct (cvfk eps ep) as [N Pn].",
            "VernacExtend",
            "e9447698157a60d5d12e84d99097e17c9f9e6d9a"
        ],
        [
            "exists (N + k)%nat; intros n nN; assert (tmp: (n = (n - k) + k)%nat).",
            "VernacExtend",
            "5fed46795a91c8d42a4d28b7b39afe5fa5ea5602"
        ],
        [
            "rewrite Nat.sub_add;[ | apply le_trans with (N + k)%nat]; auto with arith.",
            "VernacExtend",
            "86ed37a536cd2e1dca3e235466d81cc2654a5e39"
        ],
        [
            "rewrite tmp; apply Pn; apply Nat.le_add_le_sub_r; assumption.",
            "VernacExtend",
            "e45665923f5fb43c893bb315a1e5b417b13bdbc3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_shift' : forall f k l, Un_cv f l -> Un_cv (fun n => f (n + k)%nat) l.",
            "VernacStartTheoremProof",
            "d2450cc7aa1046d8dd58b4bde5f9e90f4bdaee83"
        ],
        [
            "intros f' k l cvf eps ep; destruct (cvf eps ep) as [N Pn].",
            "VernacExtend",
            "13eb33bfefec8a6cdc8aa9cf26722eda5869b635"
        ],
        [
            "exists N; intros n nN; apply Pn; auto with arith.",
            "VernacExtend",
            "f4a485578d400586fbf6de73ca6afed8df49678e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Un_growing_shift : forall k un, Un_growing un -> Un_growing (fun n => un (n + k)%nat).",
            "VernacStartTheoremProof",
            "dbcdd4d7ad2386033664b896783628b6cdd4bb2e"
        ],
        [
            "intros k un P n; apply P.",
            "VernacExtend",
            "1fc42c6337d3654f7747ee9f8b9b616c45a86e36"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "EUn_noempty",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "unfold EUn; split with (Un 0); split with 0%nat; trivial.",
                        "VernacExtend",
                        "4953b94825de73d11ca8880c66940811a8b235ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Un_in_EUn",
            "line_nb": 15,
            "steps": [
                {
                    "command": [
                        "intro; unfold EUn; split with n; trivial.",
                        "VernacExtend",
                        "b343408d60fa0c62d0b543562801d0a14108a2d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Un_bound_imp",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "intros; unfold is_upper_bound; intros; unfold EUn in H0; elim H0; clear H0; intros; generalize (H x1); intro; rewrite <- H0 in H1; trivial.",
                        "VernacExtend",
                        "87cd13b45f13af4ccfb0143f2033580cf7e9d6e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "growing_prop",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "double induction n m; intros.",
                        "VernacExtend",
                        "853c260ed5a95eb8fde2c61ad0ba5c115d882f78"
                    ]
                },
                {
                    "command": [
                        "unfold Rge; right; trivial.",
                        "VernacExtend",
                        "107befaf0834832d450a1bdd3ca3e451f3a57c15"
                    ]
                },
                {
                    "command": [
                        "exfalso; unfold ge in H1; generalize (le_Sn_O n0); intro; auto.",
                        "VernacExtend",
                        "71e8b88a961758852c758ee33c2aab195e1d8b0c"
                    ]
                },
                {
                    "command": [
                        "cut (n0 >= 0)%nat.",
                        "VernacExtend",
                        "4970da5f07ec1d3e19a1ad84d7be99aea4bcacde"
                    ]
                },
                {
                    "command": [
                        "generalize H0; intros; unfold Un_growing in H0; apply (Rge_trans (Un (S n0)) (Un n0) (Un 0) (Rle_ge (Un n0) (Un (S n0)) (H0 n0)) (H 0%nat H2 H3)).",
                        "VernacExtend",
                        "bb5011485d1901e5deb927c03549ef155f3fb06d"
                    ]
                },
                {
                    "command": [
                        "elim n0; auto.",
                        "VernacExtend",
                        "50f0b26ed6b37ffb4a92b51ccee093e13841cd08"
                    ]
                },
                {
                    "command": [
                        "elim (lt_eq_lt_dec n1 n0); intro y.",
                        "VernacExtend",
                        "8572d141ca0e8baa96434127a8a904d0c0bc50dd"
                    ]
                },
                {
                    "command": [
                        "elim y; clear y; intro y.",
                        "VernacExtend",
                        "aafbc31a10b69e1fcc8d0baec1d0548a7774efc1"
                    ]
                },
                {
                    "command": [
                        "unfold ge in H2; generalize (le_not_lt n0 n1 (le_S_n n0 n1 H2)); intro; exfalso; auto.",
                        "VernacExtend",
                        "41806ec9de5151bd11638a240fe6d9d56aa10298"
                    ]
                },
                {
                    "command": [
                        "rewrite y; unfold Rge; right; trivial.",
                        "VernacExtend",
                        "0bc875c62c4141d3f7b68d5855bee4e041013def"
                    ]
                },
                {
                    "command": [
                        "unfold ge in H0; generalize (H0 (S n0) H1 (lt_le_S n0 n1 y)); intro; unfold Un_growing in H1; apply (Rge_trans (Un (S n1)) (Un n1) (Un (S n0)) (Rle_ge (Un n1) (Un (S n1)) (H1 n1)) H3).",
                        "VernacExtend",
                        "dc74f0c1b160a14243f37907715da45c4f70215c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Un_cv_crit",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "intros Hug Heub.",
                        "VernacExtend",
                        "7a71aed4c8b72d68da15aebd79e2e459583e5e50"
                    ]
                },
                {
                    "command": [
                        "exists (proj1_sig (completeness EUn Heub EUn_noempty)).",
                        "VernacExtend",
                        "37529bb3b42cd16365f5695f7b22eac2b6d72931"
                    ]
                },
                {
                    "command": [
                        "destruct (completeness EUn Heub EUn_noempty) as (l, H).",
                        "VernacExtend",
                        "d1eb8df19bb8b0dac670818481b87f9f301208c9"
                    ]
                },
                {
                    "command": [
                        "now apply Un_cv_crit_lub.",
                        "VernacExtend",
                        "0d547fc2b02364cc6e1352ff6e7be089c0020d1d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "finite_greater",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "intro; induction N as [| N HrecN].",
                        "VernacExtend",
                        "6d38c437f2c86eef6aa81407f6f746cb454c2246"
                    ]
                },
                {
                    "command": [
                        "split with (Un 0); intros; rewrite (le_n_O_eq n H); apply (Req_le (Un n) (Un n) (eq_refl (Un n))).",
                        "VernacExtend",
                        "07eac5a6cef36259382789a33babdc95d67d6e51"
                    ]
                },
                {
                    "command": [
                        "elim HrecN; clear HrecN; intros; split with (Rmax (Un (S N)) x); intros; elim (Rmax_Rle (Un (S N)) x (Un n)); intros; clear H1; inversion H0.",
                        "VernacExtend",
                        "69ce6c6bfbc97ee5d656ccfa8753e133d5696f6e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1; rewrite <- H1 in H2; apply (H2 (or_introl (Un n <= x) (Req_le (Un n) (Un n) (eq_refl (Un n))))).",
                        "VernacExtend",
                        "0d475a62d9387884b296a46018974c20185a8c66"
                    ]
                },
                {
                    "command": [
                        "apply (H2 (or_intror (Un n <= Un (S N)) (H n H3))).",
                        "VernacExtend",
                        "241f82e92391c438ad26b11726965ec56838d287"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cauchy_bound",
            "line_nb": 195,
            "steps": [
                {
                    "command": [
                        "unfold Cauchy_crit, bound; intros; unfold is_upper_bound; unfold Rgt in H; elim (H 1 Rlt_0_1); clear H; intros; generalize (H x); intro; generalize (le_dec x); intro; elim (finite_greater x); intros; split with (Rmax x0 (Un x + 1)); clear H; intros; unfold EUn in H; elim H; clear H; intros; elim (H1 x2); clear H1; intro y.",
                        "VernacExtend",
                        "d954806277b52786059e967b85efcd5db2acea64"
                    ]
                },
                {
                    "command": [
                        "unfold ge in H0; generalize (H0 x2 (le_n x) y); clear H0; intro; rewrite <- H in H0; unfold R_dist in H0; elim (Rabs_def2 (Un x - x1) 1 H0); clear H0; intros; elim (Rmax_Rle x0 (Un x + 1) x1); intros; apply H4; clear H3 H4; right; clear H H0 y; apply (Rlt_le x1 (Un x + 1)); generalize (Rlt_minus (-1) (Un x - x1) H1); clear H1; intro; apply (Rminus_lt x1 (Un x + 1)); cut (-1 - (Un x - x1) = x1 - (Un x + 1)); [ intro; rewrite H0 in H; assumption | ring ].",
                        "VernacExtend",
                        "d1c44aef5645c98657bfada7b99ef5a70cbbe1a6"
                    ]
                },
                {
                    "command": [
                        "generalize (H2 x2 y); clear H2 H0; intro; rewrite <- H in H0; elim (Rmax_Rle x0 (Un x + 1) x1); intros; clear H1; apply H2; left; assumption.",
                        "VernacExtend",
                        "9b4c034ee78e853667859df331752eb916a49a26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "GP_infinite",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "intros; unfold Pser; unfold infinite_sum; intros; elim (Req_dec x 0).",
                        "VernacExtend",
                        "900a94bd3d2903b97a62341726ac5966960e3acd"
                    ]
                },
                {
                    "command": [
                        "intros; exists 0%nat; intros; rewrite H1; rewrite Rminus_0_r; rewrite Rinv_1; cut (sum_f_R0 (fun n0:nat => 1 * 0 ^ n0) n = 1).",
                        "VernacExtend",
                        "d037841e7ebf6cd1072d973874ee9d15fcfb424b"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H3; rewrite R_dist_eq; auto.",
                        "VernacExtend",
                        "058ba5aff290f490d856d63afdc96a86fcc6e273"
                    ]
                },
                {
                    "command": [
                        "elim n; simpl.",
                        "VernacExtend",
                        "34ca2c3a24e7db3a4201c3ddad183a7e6e49e202"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H3; ring.",
                        "VernacExtend",
                        "825b851e06a729b3729a134b192423ee19e6d0ad"
                    ]
                },
                {
                    "command": [
                        "intro; cut (0 < eps * (Rabs (1 - x) * Rabs (/ x))).",
                        "VernacExtend",
                        "c64ffd69ad619117a7771138f321597595341957"
                    ]
                },
                {
                    "command": [
                        "intro; elim (pow_lt_1_zero x H (eps * (Rabs (1 - x) * Rabs (/ x))) H2); intro N; intros; exists N; intros; cut (sum_f_R0 (fun n0:nat => 1 * x ^ n0) n = sum_f_R0 (fun n0:nat => x ^ n0) n).",
                        "VernacExtend",
                        "17a3adb0e3cc2b784efda6a9869c720c6871fa93"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H5; apply (Rmult_lt_reg_l (Rabs (1 - x)) (R_dist (sum_f_R0 (fun n0:nat => x ^ n0) n) (/ (1 - x))) eps).",
                        "VernacExtend",
                        "a26bb32df6453eeb5c4a56dffb6812f1b4e6b5bf"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt.",
                        "VernacExtend",
                        "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_eq_contra.",
                        "VernacExtend",
                        "36628d08ea6e2381fe85c05d842ae9dfbbca2407"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_dichotomy_converse.",
                        "VernacExtend",
                        "e2390c6672b4ba01a7c287eaa7d370afb109d97e"
                    ]
                },
                {
                    "command": [
                        "right; unfold Rgt.",
                        "VernacExtend",
                        "f058577b0b2369505b096d07b54f7f490622b1a9"
                    ]
                },
                {
                    "command": [
                        "apply (Rle_lt_trans x (Rabs x) 1).",
                        "VernacExtend",
                        "b2152221a63c8dbdabaaed80fb05e1c481c4fece"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; rewrite <- Rabs_mult.",
                        "VernacExtend",
                        "59d713800480d1807113fc4bd894d4195d2506d9"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_minus_distr_l.",
                        "VernacExtend",
                        "7222a49d2309983cf6476a1131eec66c4836f9f6"
                    ]
                },
                {
                    "command": [
                        "cut ((1 - x) * sum_f_R0 (fun n0:nat => x ^ n0) n = - (sum_f_R0 (fun n0:nat => x ^ n0) n * (x - 1))).",
                        "VernacExtend",
                        "4ea2857164405f34f645265958358974fb8f1433"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H6.",
                        "VernacExtend",
                        "8200663e217075b0e34129067adc2221934c6b38"
                    ]
                },
                {
                    "command": [
                        "rewrite GP_finite.",
                        "VernacExtend",
                        "e160fb9d9d7a127f873209b3dc5c7efb1486420f"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_r.",
                        "VernacExtend",
                        "901df6dbe8bfa5cb3145649e51a3e451e9ced1a3"
                    ]
                },
                {
                    "command": [
                        "cut (- (x ^ (n + 1) - 1) - 1 = - x ^ (n + 1)).",
                        "VernacExtend",
                        "7bf0719b2a255f92e172d2c29b1d8679a95f97d1"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H7.",
                        "VernacExtend",
                        "49c105e079b9233eb5a1b778d9bc09fa1272932d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp; cut ((n + 1)%nat = S n); auto.",
                        "VernacExtend",
                        "cb355e49d9fa13aee69bc1fb592255121308cdfe"
                    ]
                },
                {
                    "command": [
                        "intro H8; rewrite H8; simpl; rewrite Rabs_mult; apply (Rlt_le_trans (Rabs x * Rabs (x ^ n)) (Rabs x * (eps * (Rabs (1 - x) * Rabs (/ x)))) ( Rabs (1 - x) * eps)).",
                        "VernacExtend",
                        "bef1fe1a8dcf8b86179fd8369aa290540e2c22a8"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt.",
                        "VernacExtend",
                        "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "cut (Rabs x * (eps * (Rabs (1 - x) * Rabs (/ x))) = Rabs x * Rabs (/ x) * (eps * Rabs (1 - x))).",
                        "VernacExtend",
                        "3ba8cf20263b21ce34eb1ae74c47346441d8a763"
                    ]
                },
                {
                    "command": [
                        "clear H8; intros; rewrite H8; rewrite <- Rabs_mult; rewrite Rinv_r.",
                        "VernacExtend",
                        "1e5c69cb6f02da7fc07c2308a8195bf23c378867"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_R1; cut (1 * (eps * Rabs (1 - x)) = Rabs (1 - x) * eps).",
                        "VernacExtend",
                        "5a88ce44c92fa778f02b1bb10743cc31c291acde"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H9; unfold Rle; right; reflexivity.",
                        "VernacExtend",
                        "8ef509655d22d9caafec5cbecfdde367e0ecc516"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_eq_contra.",
                        "VernacExtend",
                        "36628d08ea6e2381fe85c05d842ae9dfbbca2407"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_dichotomy_converse.",
                        "VernacExtend",
                        "e2390c6672b4ba01a7c287eaa7d370afb109d97e"
                    ]
                },
                {
                    "command": [
                        "right; unfold Rgt.",
                        "VernacExtend",
                        "f058577b0b2369505b096d07b54f7f490622b1a9"
                    ]
                },
                {
                    "command": [
                        "apply (Rle_lt_trans x (Rabs x) 1).",
                        "VernacExtend",
                        "b2152221a63c8dbdabaaed80fb05e1c481c4fece"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "ring; ring.",
                        "VernacExtend",
                        "3d990deb2ab26ec698b95ef8091f8ffcced6959e"
                    ]
                },
                {
                    "command": [
                        "elim n; simpl.",
                        "VernacExtend",
                        "34ca2c3a24e7db3a4201c3ddad183a7e6e49e202"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H5.",
                        "VernacExtend",
                        "1ef9741f203b9aa5810a39f825015f6af3786de4"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt.",
                        "VernacExtend",
                        "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_eq_contra.",
                        "VernacExtend",
                        "36628d08ea6e2381fe85c05d842ae9dfbbca2407"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_dichotomy_converse.",
                        "VernacExtend",
                        "e2390c6672b4ba01a7c287eaa7d370afb109d97e"
                    ]
                },
                {
                    "command": [
                        "right; unfold Rgt.",
                        "VernacExtend",
                        "f058577b0b2369505b096d07b54f7f490622b1a9"
                    ]
                },
                {
                    "command": [
                        "apply (Rle_lt_trans x (Rabs x) 1).",
                        "VernacExtend",
                        "b2152221a63c8dbdabaaed80fb05e1c481c4fece"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt.",
                        "VernacExtend",
                        "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat.",
                        "VernacExtend",
                        "f2f8681c7dbf9047cfba9a279da441217a933f75"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_shift",
            "line_nb": 270,
            "steps": [
                {
                    "command": [
                        "intros f' k l cvfk eps ep; destruct (cvfk eps ep) as [N Pn].",
                        "VernacExtend",
                        "e9447698157a60d5d12e84d99097e17c9f9e6d9a"
                    ]
                },
                {
                    "command": [
                        "exists (N + k)%nat; intros n nN; assert (tmp: (n = (n - k) + k)%nat).",
                        "VernacExtend",
                        "5fed46795a91c8d42a4d28b7b39afe5fa5ea5602"
                    ]
                },
                {
                    "command": [
                        "rewrite Nat.sub_add;[ | apply le_trans with (N + k)%nat]; auto with arith.",
                        "VernacExtend",
                        "86ed37a536cd2e1dca3e235466d81cc2654a5e39"
                    ]
                },
                {
                    "command": [
                        "rewrite tmp; apply Pn; apply Nat.le_add_le_sub_r; assumption.",
                        "VernacExtend",
                        "e45665923f5fb43c893bb315a1e5b417b13bdbc3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_shift'",
            "line_nb": 276,
            "steps": [
                {
                    "command": [
                        "intros f' k l cvf eps ep; destruct (cvf eps ep) as [N Pn].",
                        "VernacExtend",
                        "13eb33bfefec8a6cdc8aa9cf26722eda5869b635"
                    ]
                },
                {
                    "command": [
                        "exists N; intros n nN; apply Pn; auto with arith.",
                        "VernacExtend",
                        "f4a485578d400586fbf6de73ca6afed8df49678e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Un_growing_shift",
            "line_nb": 280,
            "steps": [
                {
                    "command": [
                        "intros k un P n; apply P.",
                        "VernacExtend",
                        "1fc42c6337d3654f7747ee9f8b9b616c45a86e36"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}