{
    "filename": "theories/Reals/RList.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Inductive Rlist : Type := | nil : Rlist | cons : R -> Rlist -> Rlist.",
            "VernacInductive",
            "69b365d0cddc6c0515943875e25c5921765d3227"
        ],
        [
            "Fixpoint In (x:R) (l:Rlist) : Prop := match l with | nil => False | cons a l' => x = a \\/ In x l' end.",
            "VernacFixpoint",
            "4bd5792548d720de3013ce2b2cd30daac747fac9"
        ],
        [
            "Fixpoint Rlength (l:Rlist) : nat := match l with | nil => 0%nat | cons a l' => S (Rlength l') end.",
            "VernacFixpoint",
            "64728a44f5250e8f7e74ae36bf954f9c3957c890"
        ],
        [
            "Fixpoint MaxRlist (l:Rlist) : R := match l with | nil => 0 | cons a l1 => match l1 with | nil => a | cons a' l2 => Rmax a (MaxRlist l1) end end.",
            "VernacFixpoint",
            "cae642b3bf04aaec0203ef8e8f05066df44aa922"
        ],
        [
            "Fixpoint MinRlist (l:Rlist) : R := match l with | nil => 1 | cons a l1 => match l1 with | nil => a | cons a' l2 => Rmin a (MinRlist l1) end end.",
            "VernacFixpoint",
            "f6dac4655305bac1de8505d6313883133dfc13e0"
        ],
        [
            "Lemma MaxRlist_P1 : forall (l:Rlist) (x:R), In x l -> x <= MaxRlist l.",
            "VernacStartTheoremProof",
            "e0faf2b535093ff4f0618de522fb556ebda46487"
        ],
        [
            "intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "65266dba08759172a3062fa061a39cbafef9e7e1"
        ],
        [
            "simpl in H; elim H.",
            "VernacExtend",
            "a0d0d654b59b4661e1eb1b50bab12a129f6ce576"
        ],
        [
            "induction l as [| r0 l Hrecl0].",
            "VernacExtend",
            "095e5e27fe3596ce8ad6fd33d3d6e9c65e067450"
        ],
        [
            "simpl in H; elim H; intro.",
            "VernacExtend",
            "bb60eb1c1b60d8b79a6ebc9ea5703851b3c9a6d8"
        ],
        [
            "simpl; right; assumption.",
            "VernacExtend",
            "a8031ec86609226b9fbbdcd11c756beb70b5e141"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "replace (MaxRlist (cons r (cons r0 l))) with (Rmax r (MaxRlist (cons r0 l))).",
            "VernacExtend",
            "1fb4f00d48f3e516df673a160e8be72c2e3e4ed4"
        ],
        [
            "simpl in H; decompose [or] H.",
            "VernacExtend",
            "6450606dbdda4fbf0624201c2bf1e9f1b53209d0"
        ],
        [
            "rewrite H0; apply RmaxLess1.",
            "VernacExtend",
            "d122f83403755d827b61f20a35bf6ba66da2347f"
        ],
        [
            "unfold Rmax; case (Rle_dec r (MaxRlist (cons r0 l))); intro.",
            "VernacExtend",
            "df83801e3ed7400270001d20cf0169c7692d3aff"
        ],
        [
            "apply Hrecl; simpl; tauto.",
            "VernacExtend",
            "27235c0922d21253ce44eb4bebd7044efbde875a"
        ],
        [
            "apply Rle_trans with (MaxRlist (cons r0 l)); [ apply Hrecl; simpl; tauto | left; auto with real ].",
            "VernacExtend",
            "e681a6c1e87ea67cfbbf600ea9757e733a4322cb"
        ],
        [
            "unfold Rmax; case (Rle_dec r (MaxRlist (cons r0 l))); intro.",
            "VernacExtend",
            "df83801e3ed7400270001d20cf0169c7692d3aff"
        ],
        [
            "apply Hrecl; simpl; tauto.",
            "VernacExtend",
            "27235c0922d21253ce44eb4bebd7044efbde875a"
        ],
        [
            "apply Rle_trans with (MaxRlist (cons r0 l)); [ apply Hrecl; simpl; tauto | left; auto with real ].",
            "VernacExtend",
            "e681a6c1e87ea67cfbbf600ea9757e733a4322cb"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint AbsList (l:Rlist) (x:R) : Rlist := match l with | nil => nil | cons a l' => cons (Rabs (a - x) / 2) (AbsList l' x) end.",
            "VernacFixpoint",
            "15fd804c157a216ced2c9911921d9ff7f01eaf20"
        ],
        [
            "Lemma MinRlist_P1 : forall (l:Rlist) (x:R), In x l -> MinRlist l <= x.",
            "VernacStartTheoremProof",
            "8027140db89a921efce3e38669c7a7e7e507f82e"
        ],
        [
            "intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "65266dba08759172a3062fa061a39cbafef9e7e1"
        ],
        [
            "simpl in H; elim H.",
            "VernacExtend",
            "a0d0d654b59b4661e1eb1b50bab12a129f6ce576"
        ],
        [
            "induction l as [| r0 l Hrecl0].",
            "VernacExtend",
            "095e5e27fe3596ce8ad6fd33d3d6e9c65e067450"
        ],
        [
            "simpl in H; elim H; intro.",
            "VernacExtend",
            "bb60eb1c1b60d8b79a6ebc9ea5703851b3c9a6d8"
        ],
        [
            "simpl; right; symmetry ; assumption.",
            "VernacExtend",
            "bbe2937faf1394d0a97a5ccfad72e6e0b821f9b9"
        ],
        [
            "elim H0.",
            "VernacExtend",
            "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
        ],
        [
            "replace (MinRlist (cons r (cons r0 l))) with (Rmin r (MinRlist (cons r0 l))).",
            "VernacExtend",
            "803a38c57be1ff465aedc7f5578c7aa47ecba607"
        ],
        [
            "simpl in H; decompose [or] H.",
            "VernacExtend",
            "6450606dbdda4fbf0624201c2bf1e9f1b53209d0"
        ],
        [
            "rewrite H0; apply Rmin_l.",
            "VernacExtend",
            "024f03b121b5dfe194a2e690d7cf8cf621b62600"
        ],
        [
            "unfold Rmin; case (Rle_dec r (MinRlist (cons r0 l))); intro.",
            "VernacExtend",
            "95c69138d26b423356561ef9e8068c75a465ab30"
        ],
        [
            "apply Rle_trans with (MinRlist (cons r0 l)).",
            "VernacExtend",
            "48bfde75e1b1cb3481c2b523b264565dc3aa8345"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Hrecl; simpl; tauto.",
            "VernacExtend",
            "27235c0922d21253ce44eb4bebd7044efbde875a"
        ],
        [
            "apply Hrecl; simpl; tauto.",
            "VernacExtend",
            "27235c0922d21253ce44eb4bebd7044efbde875a"
        ],
        [
            "apply Rle_trans with (MinRlist (cons r0 l)).",
            "VernacExtend",
            "48bfde75e1b1cb3481c2b523b264565dc3aa8345"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "apply Hrecl; simpl; tauto.",
            "VernacExtend",
            "27235c0922d21253ce44eb4bebd7044efbde875a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma AbsList_P1 : forall (l:Rlist) (x y:R), In y l -> In (Rabs (y - x) / 2) (AbsList l x).",
            "VernacStartTheoremProof",
            "8ea6cd29a4b85cc2e63534ac4832a60c9341f7b5"
        ],
        [
            "intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "65266dba08759172a3062fa061a39cbafef9e7e1"
        ],
        [
            "elim H.",
            "VernacExtend",
            "853aa440c3a3810be05f0f87d0e688c05b92253d"
        ],
        [
            "simpl; simpl in H; elim H; intro.",
            "VernacExtend",
            "b98ae5bb7c334c78588eae509d2b12ef129a889b"
        ],
        [
            "left; rewrite H0; reflexivity.",
            "VernacExtend",
            "72102394b443713e1fe193803b04718200a93d91"
        ],
        [
            "right; apply Hrecl; assumption.",
            "VernacExtend",
            "cbde55acbd63a4e36a2716b1d553351624b4e78e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma MinRlist_P2 : forall l:Rlist, (forall y:R, In y l -> 0 < y) -> 0 < MinRlist l.",
            "VernacStartTheoremProof",
            "dab34af2f106214750d81e5769a09b7cd079685b"
        ],
        [
            "intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "65266dba08759172a3062fa061a39cbafef9e7e1"
        ],
        [
            "apply Rlt_0_1.",
            "VernacExtend",
            "c3f675388bf844e0740197fd71afa66e5eef091d"
        ],
        [
            "induction l as [| r0 l Hrecl0].",
            "VernacExtend",
            "095e5e27fe3596ce8ad6fd33d3d6e9c65e067450"
        ],
        [
            "simpl; apply H; simpl; tauto.",
            "VernacExtend",
            "9f25b93eaaabdc6591f6c7014ed6f551773a0b98"
        ],
        [
            "replace (MinRlist (cons r (cons r0 l))) with (Rmin r (MinRlist (cons r0 l))).",
            "VernacExtend",
            "803a38c57be1ff465aedc7f5578c7aa47ecba607"
        ],
        [
            "unfold Rmin; case (Rle_dec r (MinRlist (cons r0 l))); intro.",
            "VernacExtend",
            "95c69138d26b423356561ef9e8068c75a465ab30"
        ],
        [
            "apply H; simpl; tauto.",
            "VernacExtend",
            "7b8ae882379b618835b693a235bc5160594ee030"
        ],
        [
            "apply Hrecl; intros; apply H; simpl; simpl in H0; tauto.",
            "VernacExtend",
            "7bd8eb795d6add02f7d2fd6478915c67c1602728"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma AbsList_P2 : forall (l:Rlist) (x y:R), In y (AbsList l x) -> exists z : R, In z l /\\ y = Rabs (z - x) / 2.",
            "VernacStartTheoremProof",
            "3dcdc17a31c39da2777a867f0bb8f4f6c7a601d5"
        ],
        [
            "intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "65266dba08759172a3062fa061a39cbafef9e7e1"
        ],
        [
            "elim H.",
            "VernacExtend",
            "853aa440c3a3810be05f0f87d0e688c05b92253d"
        ],
        [
            "elim H; intro.",
            "VernacExtend",
            "f72f8bb994653bc377ef4f37626cba5f2cab4c8b"
        ],
        [
            "exists r; split.",
            "VernacExtend",
            "3d33c1ab822330cf06e0f814bb3f5202df25f0ff"
        ],
        [
            "simpl; tauto.",
            "VernacExtend",
            "2c27d7b56602355c3ed4605e551cd6a88509ac37"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H1 := Hrecl H0); elim H1; intros; elim H2; clear H2; intros; exists x0; simpl; simpl in H2; tauto.",
            "VernacExtend",
            "ae260240087ebe04bc51b7206b86dca69c5b07fa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma MaxRlist_P2 : forall l:Rlist, (exists y : R, In y l) -> In (MaxRlist l) l.",
            "VernacStartTheoremProof",
            "ace69051a0aeaf8caac0038f2c0b4ff47e661e5a"
        ],
        [
            "intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "65266dba08759172a3062fa061a39cbafef9e7e1"
        ],
        [
            "simpl in H; elim H; trivial.",
            "VernacExtend",
            "4d2e0b1742460ced8276110a0cb2d03e83d27ba9"
        ],
        [
            "induction l as [| r0 l Hrecl0].",
            "VernacExtend",
            "095e5e27fe3596ce8ad6fd33d3d6e9c65e067450"
        ],
        [
            "simpl; left; reflexivity.",
            "VernacExtend",
            "e6e540e176cde6c1b34b5931d38541ed30811ac1"
        ],
        [
            "change (In (Rmax r (MaxRlist (cons r0 l))) (cons r (cons r0 l))); unfold Rmax; case (Rle_dec r (MaxRlist (cons r0 l))); intro.",
            "VernacExtend",
            "5e0bcea2db6bc0dca566bc099c04a8d8913989dc"
        ],
        [
            "right; apply Hrecl; exists r0; left; reflexivity.",
            "VernacExtend",
            "0cdb5e7d9f39369fa6155be90d671b54b801fa45"
        ],
        [
            "left; reflexivity.",
            "VernacExtend",
            "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint pos_Rl (l:Rlist) (i:nat) : R := match l with | nil => 0 | cons a l' => match i with | O => a | S i' => pos_Rl l' i' end end.",
            "VernacFixpoint",
            "a4b85abb00eafd02ec1679f7946a51019a12cbd5"
        ],
        [
            "Lemma pos_Rl_P1 : forall (l:Rlist) (a:R), (0 < Rlength l)%nat -> pos_Rl (cons a l) (Rlength l) = pos_Rl l (pred (Rlength l)).",
            "VernacStartTheoremProof",
            "93b52dd2ab95e2ebb5f56e4a428eea12af812b52"
        ],
        [
            "intros; induction l as [| r l Hrecl]; [ elim (lt_n_O _ H) | simpl; case (Rlength l); [ reflexivity | intro; reflexivity ] ].",
            "VernacExtend",
            "bfa1db8ccf56d8f090fff1fe0e72b63d820897d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pos_Rl_P2 : forall (l:Rlist) (x:R), In x l <-> (exists i : nat, (i < Rlength l)%nat /\\ x = pos_Rl l i).",
            "VernacStartTheoremProof",
            "cb687cd63d6863c66f3e0da8c59bb24dc0e8d498"
        ],
        [
            "intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "65266dba08759172a3062fa061a39cbafef9e7e1"
        ],
        [
            "split; intro; [ elim H | elim H; intros; elim H0; intros; elim (lt_n_O _ H1) ].",
            "VernacExtend",
            "f99149115bc08716360f52881e2932fd47a52a62"
        ],
        [
            "split; intro.",
            "VernacExtend",
            "966a6edea9c2088caf0e546be884ea531f6207b3"
        ],
        [
            "elim H; intro.",
            "VernacExtend",
            "f72f8bb994653bc377ef4f37626cba5f2cab4c8b"
        ],
        [
            "exists 0%nat; split; [ simpl; apply lt_O_Sn | simpl; apply H0 ].",
            "VernacExtend",
            "21b5e8193599dd3d926acdd8b223f2f187e6f311"
        ],
        [
            "elim Hrecl; intros; assert (H3 := H1 H0); elim H3; intros; elim H4; intros; exists (S x0); split; [ simpl; apply lt_n_S; assumption | simpl; assumption ].",
            "VernacExtend",
            "466336bec4af78d546e9c01254421cfc24c0615b"
        ],
        [
            "elim H; intros; elim H0; intros; destruct (zerop x0) as [->|].",
            "VernacExtend",
            "6225b5f08119b867b267dea7eba008f5d8238379"
        ],
        [
            "simpl in H2; left; assumption.",
            "VernacExtend",
            "0c77108723525f396c389230d03502a86987da4f"
        ],
        [
            "right; elim Hrecl; intros H4 H5; apply H5; assert (H6 : S (pred x0) = x0).",
            "VernacExtend",
            "542bf65db337e11d576612cab9fc1c9871251b78"
        ],
        [
            "symmetry ; apply S_pred with 0%nat; assumption.",
            "VernacExtend",
            "07c00048f97977d2afec3560fb2e41ccdd392a6f"
        ],
        [
            "exists (pred x0); split; [ simpl in H1; apply lt_S_n; rewrite H6; assumption | rewrite <- H6 in H2; simpl in H2; assumption ].",
            "VernacExtend",
            "875bb2e867c11a2e796eeaa34bb3a483d2c48e50"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rlist_P1 : forall (l:Rlist) (P:R -> R -> Prop), (forall x:R, In x l -> exists y : R, P x y) -> exists l' : Rlist, Rlength l = Rlength l' /\\ (forall i:nat, (i < Rlength l)%nat -> P (pos_Rl l i) (pos_Rl l' i)).",
            "VernacStartTheoremProof",
            "694d09f94b902c957de8c4d9d4c089bcf9bd0c37"
        ],
        [
            "intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "65266dba08759172a3062fa061a39cbafef9e7e1"
        ],
        [
            "exists nil; intros; split; [ reflexivity | intros; simpl in H0; elim (lt_n_O _ H0) ].",
            "VernacExtend",
            "3cf07eff99d68d2a96753ceb4af4059531faf185"
        ],
        [
            "assert (H0 : In r (cons r l)).",
            "VernacExtend",
            "df8597d74d4e89a93a7074d0bbaabbde145e7aad"
        ],
        [
            "simpl; left; reflexivity.",
            "VernacExtend",
            "e6e540e176cde6c1b34b5931d38541ed30811ac1"
        ],
        [
            "assert (H1 := H _ H0); assert (H2 : forall x:R, In x l -> exists y : R, P x y).",
            "VernacExtend",
            "78658cf3a5971d5dbb30fa784d70a78a688396c7"
        ],
        [
            "intros; apply H; simpl; right; assumption.",
            "VernacExtend",
            "bef4d644e5df59cf8a652d8afc3762c63d136c79"
        ],
        [
            "assert (H3 := Hrecl H2); elim H1; intros; elim H3; intros; exists (cons x x0); intros; elim H5; clear H5; intros; split.",
            "VernacExtend",
            "4937470299ffc2c8165cb00e02d99f6c2b460c97"
        ],
        [
            "simpl; rewrite H5; reflexivity.",
            "VernacExtend",
            "a8e953ab1d475608d1ed68b49c16b0983fa2d5fc"
        ],
        [
            "intros; destruct (zerop i) as [->|].",
            "VernacExtend",
            "fccf480a30d83a85f09182170e74c17638c3f2f1"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "assert (H9 : i = S (pred i)).",
            "VernacExtend",
            "4bcd962b978f98d3b743e2c916aaf6300850b9e8"
        ],
        [
            "apply S_pred with 0%nat; assumption.",
            "VernacExtend",
            "b39660ec3a92df9aac441f5d4480a21443485407"
        ],
        [
            "rewrite H9; simpl; apply H6; simpl in H7; apply lt_S_n; rewrite <- H9; assumption.",
            "VernacExtend",
            "1b53565e62b91373865599034c17ff6b66d96f5c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ordered_Rlist (l:Rlist) : Prop := forall i:nat, (i < pred (Rlength l))%nat -> pos_Rl l i <= pos_Rl l (S i).",
            "VernacDefinition",
            "ccdcc0beb9888ef98dd0836c7b784b0c0571dbad"
        ],
        [
            "Fixpoint insert (l:Rlist) (x:R) : Rlist := match l with | nil => cons x nil | cons a l' => match Rle_dec a x with | left _ => cons a (insert l' x) | right _ => cons x l end end.",
            "VernacFixpoint",
            "020b2f39f7793bb2f83ee330b764c5fc4c3f9320"
        ],
        [
            "Fixpoint cons_Rlist (l k:Rlist) : Rlist := match l with | nil => k | cons a l' => cons a (cons_Rlist l' k) end.",
            "VernacFixpoint",
            "72f6c877193b1921cf6747473c9a6fa49ea3ee07"
        ],
        [
            "Fixpoint cons_ORlist (k l:Rlist) : Rlist := match k with | nil => l | cons a k' => cons_ORlist k' (insert l a) end.",
            "VernacFixpoint",
            "6eb1ce863018c7f7461a4e60cb135b9df5a312c4"
        ],
        [
            "Fixpoint app_Rlist (l:Rlist) (f:R -> R) : Rlist := match l with | nil => nil | cons a l' => cons (f a) (app_Rlist l' f) end.",
            "VernacFixpoint",
            "e9acd4dd9fd49dde76d7b854380297c47fb7bd57"
        ],
        [
            "Fixpoint mid_Rlist (l:Rlist) (x:R) : Rlist := match l with | nil => nil | cons a l' => cons ((x + a) / 2) (mid_Rlist l' a) end.",
            "VernacFixpoint",
            "9ddaf2e5cdd845f2e173bdc35923bbf6c9dbfa40"
        ],
        [
            "Definition Rtail (l:Rlist) : Rlist := match l with | nil => nil | cons a l' => l' end.",
            "VernacDefinition",
            "e3a58b09db543d576fa9cc74fa1ae56f7e5087f2"
        ],
        [
            "Definition FF (l:Rlist) (f:R -> R) : Rlist := match l with | nil => nil | cons a l' => app_Rlist (mid_Rlist l' a) f end.",
            "VernacDefinition",
            "eebcd607007569d5f64e6ccc66790e4e5ac9a91b"
        ],
        [
            "Lemma RList_P0 : forall (l:Rlist) (a:R), pos_Rl (insert l a) 0 = a \\/ pos_Rl (insert l a) 0 = pos_Rl l 0.",
            "VernacStartTheoremProof",
            "3f1f7d000e27436830cc50b00c06205dceebdba3"
        ],
        [
            "intros; induction l as [| r l Hrecl]; [ left; reflexivity | simpl; case (Rle_dec r a); intro; [ right; reflexivity | left; reflexivity ] ].",
            "VernacExtend",
            "a0238848745f8ea3a7789211bde43c9024a7e086"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P1 : forall (l:Rlist) (a:R), ordered_Rlist l -> ordered_Rlist (insert l a).",
            "VernacStartTheoremProof",
            "0c2eda2029df73df287d7328c0f790681d923c45"
        ],
        [
            "intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "65266dba08759172a3062fa061a39cbafef9e7e1"
        ],
        [
            "simpl; unfold ordered_Rlist; intros; simpl in H0; elim (lt_n_O _ H0).",
            "VernacExtend",
            "f56e0fdc7e32b6792b7a9611f69735421efa25df"
        ],
        [
            "simpl; case (Rle_dec r a); intro.",
            "VernacExtend",
            "d91f9a05d5eabffafa91813657e82e8182bbfacf"
        ],
        [
            "assert (H1 : ordered_Rlist l).",
            "VernacExtend",
            "c9da08d70f4048ea5557fcea5826e7b27e6f9f69"
        ],
        [
            "unfold ordered_Rlist; unfold ordered_Rlist in H; intros; assert (H1 : (S i < pred (Rlength (cons r l)))%nat); [ simpl; replace (Rlength l) with (S (pred (Rlength l))); [ apply lt_n_S; assumption | symmetry ; apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H1 in H0; simpl in H0; elim (lt_n_O _ H0) ] | apply (H _ H1) ].",
            "VernacExtend",
            "548a0056039b8461232af326bfc7af14e22f69a5"
        ],
        [
            "assert (H2 := Hrecl H1); unfold ordered_Rlist; intros; induction i as [| i Hreci].",
            "VernacExtend",
            "43d0eb375c5434e24f3e23d0ab71025e38e17efc"
        ],
        [
            "simpl; assert (H3 := RList_P0 l a); elim H3; intro.",
            "VernacExtend",
            "0a3cf856a822b9c92a3d6edc526b4132f2aa0600"
        ],
        [
            "rewrite H4; assumption.",
            "VernacExtend",
            "32a734a7bb8ef689c92b39d49433a0bc325fd27e"
        ],
        [
            "induction l as [| r1 l Hrecl0]; [ simpl; assumption | rewrite H4; apply (H 0%nat); simpl; apply lt_O_Sn ].",
            "VernacExtend",
            "d681f59a43f9077e28938d6a59ed6e5e46f6d24b"
        ],
        [
            "simpl; apply H2; simpl in H0; apply lt_S_n; replace (S (pred (Rlength (insert l a)))) with (Rlength (insert l a)); [ assumption | apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H3 in H0; elim (lt_n_O _ H0) ].",
            "VernacExtend",
            "3bd4dd98a5a94935ee55fc888ce9ffbe3d4fef41"
        ],
        [
            "unfold ordered_Rlist; intros; induction i as [| i Hreci]; [ simpl; auto with real | change (pos_Rl (cons r l) i <= pos_Rl (cons r l) (S i)); apply H; simpl in H0; simpl; apply (lt_S_n _ _ H0) ].",
            "VernacExtend",
            "ef18652fe83a3da10a5a28128541accbea0c5ae1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P2 : forall l1 l2:Rlist, ordered_Rlist l2 -> ordered_Rlist (cons_ORlist l1 l2).",
            "VernacStartTheoremProof",
            "49c99bfb7076b04ee0ca960b5d50a7769822d293"
        ],
        [
            "simple induction l1; [ intros; simpl; apply H | intros; simpl; apply H; apply RList_P1; assumption ].",
            "VernacExtend",
            "6ce43bb74bed85266e0933fb38ee8483fd1744be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P3 : forall (l:Rlist) (x:R), In x l <-> (exists i : nat, x = pos_Rl l i /\\ (i < Rlength l)%nat).",
            "VernacStartTheoremProof",
            "464092698460dd4143c2c401629dc34e7174380c"
        ],
        [
            "intros; split; intro; [ induction l as [| r l Hrecl] | induction l as [| r l Hrecl] ].",
            "VernacExtend",
            "ee260bb040f3c4219fef41185b9cba39db02b61a"
        ],
        [
            "elim H.",
            "VernacExtend",
            "853aa440c3a3810be05f0f87d0e688c05b92253d"
        ],
        [
            "elim H; intro; [ exists 0%nat; split; [ apply H0 | simpl; apply lt_O_Sn ] | elim (Hrecl H0); intros; elim H1; clear H1; intros; exists (S x0); split; [ apply H1 | simpl; apply lt_n_S; assumption ] ].",
            "VernacExtend",
            "a9ccecc6687df5b2293539d5c180789e11453de8"
        ],
        [
            "elim H; intros; elim H0; intros; elim (lt_n_O _ H2).",
            "VernacExtend",
            "26a0ccf84f14235be2849fb8e1531f25e199b634"
        ],
        [
            "simpl; elim H; intros; elim H0; clear H0; intros; induction x0 as [| x0 Hrecx0]; [ left; apply H0 | right; apply Hrecl; exists x0; split; [ apply H0 | simpl in H1; apply lt_S_n; assumption ] ].",
            "VernacExtend",
            "862570b5f22d6ace3c04a5dd33bb338339fe49ee"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P4 : forall (l1:Rlist) (a:R), ordered_Rlist (cons a l1) -> ordered_Rlist l1.",
            "VernacStartTheoremProof",
            "5dc10785985bc749b8b0da2abce79fbcc258c6e2"
        ],
        [
            "intros; unfold ordered_Rlist; intros; apply (H (S i)); simpl; replace (Rlength l1) with (S (pred (Rlength l1))); [ apply lt_n_S; assumption | symmetry ; apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H1 in H0; elim (lt_n_O _ H0) ].",
            "VernacExtend",
            "e1d1a59f9a8403f815135ae7cf25996baecf9f68"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P5 : forall (l:Rlist) (x:R), ordered_Rlist l -> In x l -> pos_Rl l 0 <= x.",
            "VernacStartTheoremProof",
            "208c185e8f2f37edb4a3c5bbb7d7c37fa364bd32"
        ],
        [
            "intros; induction l as [| r l Hrecl]; [ elim H0 | simpl; elim H0; intro; [ rewrite H1; right; reflexivity | apply Rle_trans with (pos_Rl l 0); [ apply (H 0%nat); simpl; induction l as [| r0 l Hrecl0]; [ elim H1 | simpl; apply lt_O_Sn ] | apply Hrecl; [ eapply RList_P4; apply H | assumption ] ] ] ].",
            "VernacExtend",
            "f666e01f02963038c940d66071dd4fdd47d3795d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P6 : forall l:Rlist, ordered_Rlist l <-> (forall i j:nat, (i <= j)%nat -> (j < Rlength l)%nat -> pos_Rl l i <= pos_Rl l j).",
            "VernacStartTheoremProof",
            "9b6b6c8de52d4190df519a15c781af069085fa4b"
        ],
        [
            "simple induction l; split; intro.",
            "VernacExtend",
            "9e5535434c75bb461678f330f67cbaf6125a7418"
        ],
        [
            "intros; right; reflexivity.",
            "VernacExtend",
            "0eed672e17ad0282323cc225850369f6ee61b524"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H0; elim (lt_n_O _ H0).",
            "VernacExtend",
            "162045a07e9ae3547b61f4b24bf893c31dce6fc7"
        ],
        [
            "intros; induction i as [| i Hreci]; [ induction j as [| j Hrecj]; [ right; reflexivity | simpl; apply Rle_trans with (pos_Rl r0 0); [ apply (H0 0%nat); simpl; simpl in H2; apply neq_O_lt; red; intro; rewrite <- H3 in H2; assert (H4 := lt_S_n _ _ H2); elim (lt_n_O _ H4) | elim H; intros; apply H3; [ apply RList_P4 with r; assumption | apply le_O_n | simpl in H2; apply lt_S_n; assumption ] ] ] | induction j as [| j Hrecj]; [ elim (le_Sn_O _ H1) | simpl; elim H; intros; apply H3; [ apply RList_P4 with r; assumption | apply le_S_n; assumption | simpl in H2; apply lt_S_n; assumption ] ] ].",
            "VernacExtend",
            "7b4ff3de55849d59f973518e568f5ceaac013e0a"
        ],
        [
            "unfold ordered_Rlist; intros; apply H0; [ apply le_n_Sn | simpl; simpl in H1; apply lt_n_S; assumption ].",
            "VernacExtend",
            "2108e267ad8de6e70bb08e5a7cbcbc2b9be29488"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P7 : forall (l:Rlist) (x:R), ordered_Rlist l -> In x l -> x <= pos_Rl l (pred (Rlength l)).",
            "VernacStartTheoremProof",
            "c7e9790647841dfbf26815f42ffa6b90034a75e1"
        ],
        [
            "intros; assert (H1 := RList_P6 l); elim H1; intros H2 _; assert (H3 := H2 H); clear H1 H2; assert (H1 := RList_P3 l x); elim H1; clear H1; intros; assert (H4 := H1 H0); elim H4; clear H4; intros; elim H4; clear H4; intros; rewrite H4; assert (H6 : Rlength l = S (pred (Rlength l))).",
            "VernacExtend",
            "637b31d96d9ef4d266706524f286cdf1df27c4a4"
        ],
        [
            "apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H6 in H5; elim (lt_n_O _ H5).",
            "VernacExtend",
            "d72b38746d6ee989f0cc9436944b955833adc0af"
        ],
        [
            "apply H3; [ rewrite H6 in H5; apply lt_n_Sm_le; assumption | apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H7 in H5; elim (lt_n_O _ H5) ].",
            "VernacExtend",
            "25cf677220815a5f3e7754440d085942adaa25f4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P8 : forall (l:Rlist) (a x:R), In x (insert l a) <-> x = a \\/ In x l.",
            "VernacStartTheoremProof",
            "b6042054b4e04b5e4326fce61346e953785ff5e2"
        ],
        [
            "simple induction l.",
            "VernacExtend",
            "baf54048118103088e518cfa16c3b5327b3c1c28"
        ],
        [
            "intros; split; intro; simpl in H; apply H.",
            "VernacExtend",
            "fa4e31ebf11c9537b2b1951bde48b12827aac870"
        ],
        [
            "intros; split; intro; [ simpl in H0; generalize H0; case (Rle_dec r a); intros; [ simpl in H1; elim H1; intro; [ right; left; assumption | elim (H a x); intros; elim (H3 H2); intro; [ left; assumption | right; right; assumption ] ] | simpl in H1; decompose [or] H1; [ left; assumption | right; left; assumption | right; right; assumption ] ] | simpl; case (Rle_dec r a); intro; [ simpl in H0; decompose [or] H0; [ right; elim (H a x); intros; apply H3; left | left | right; elim (H a x); intros; apply H3; right ] | simpl in H0; decompose [or] H0; [ left | right; left | right; right ] ]; assumption ].",
            "VernacExtend",
            "99d2b68210c677a05928cf47b0766a2b922853d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P9 : forall (l1 l2:Rlist) (x:R), In x (cons_ORlist l1 l2) <-> In x l1 \\/ In x l2.",
            "VernacStartTheoremProof",
            "b1fa822f818183a75b31cb7144e36bdd844b5a06"
        ],
        [
            "simple induction l1.",
            "VernacExtend",
            "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
        ],
        [
            "intros; split; intro; [ simpl in H; right; assumption | simpl; elim H; intro; [ elim H0 | assumption ] ].",
            "VernacExtend",
            "9507df5683cff8a5524f8ff2286386c566e66c60"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "simpl; intros; elim (H (insert l2 r) x); intros; assert (H3 := H1 H0); elim H3; intro; [ left; right; assumption | elim (RList_P8 l2 r x); intros H5 _; assert (H6 := H5 H4); elim H6; intro; [ left; left; assumption | right; assumption ] ].",
            "VernacExtend",
            "cccf58653726a42b18a8f2cbebf8847e7983ee56"
        ],
        [
            "intro; simpl; elim (H (insert l2 r) x); intros _ H1; apply H1; elim H0; intro; [ elim H2; intro; [ right; elim (RList_P8 l2 r x); intros _ H4; apply H4; left; assumption | left; assumption ] | right; elim (RList_P8 l2 r x); intros _ H3; apply H3; right; assumption ].",
            "VernacExtend",
            "f58be2bfb320e350dba7c66f5044e812c256d9d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P10 : forall (l:Rlist) (a:R), Rlength (insert l a) = S (Rlength l).",
            "VernacStartTheoremProof",
            "af502aaaaf1610f808b7c5d46e6d8bfc2a48ce88"
        ],
        [
            "intros; induction l as [| r l Hrecl]; [ reflexivity | simpl; case (Rle_dec r a); intro; [ simpl; rewrite Hrecl; reflexivity | reflexivity ] ].",
            "VernacExtend",
            "edcf3004d4c4c14d2ff8c08f18e919553c09d4d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P11 : forall l1 l2:Rlist, Rlength (cons_ORlist l1 l2) = (Rlength l1 + Rlength l2)%nat.",
            "VernacStartTheoremProof",
            "c1e5f0adca901df9864a6110d26fa98a595dfc59"
        ],
        [
            "simple induction l1; [ intro; reflexivity | intros; simpl; rewrite (H (insert l2 r)); rewrite RList_P10; apply INR_eq; rewrite S_INR; do 2 rewrite plus_INR; rewrite S_INR; ring ].",
            "VernacExtend",
            "9e63f3ce7257fd183c3ca56f4661b76217cfdcdd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P12 : forall (l:Rlist) (i:nat) (f:R -> R), (i < Rlength l)%nat -> pos_Rl (app_Rlist l f) i = f (pos_Rl l i).",
            "VernacStartTheoremProof",
            "cd9a80f311ff11ac6aaf27c42cfcb7dc42e7fa27"
        ],
        [
            "simple induction l; [ intros; elim (lt_n_O _ H) | intros; induction i as [| i Hreci]; [ reflexivity | simpl; apply H; apply lt_S_n; apply H0 ] ].",
            "VernacExtend",
            "4b5eea241683397efdbc7ca129ac697884ea91c2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P13 : forall (l:Rlist) (i:nat) (a:R), (i < pred (Rlength l))%nat -> pos_Rl (mid_Rlist l a) (S i) = (pos_Rl l i + pos_Rl l (S i)) / 2.",
            "VernacStartTheoremProof",
            "4eaa26f3384d92132e63abcadb79e5db633ef461"
        ],
        [
            "simple induction l.",
            "VernacExtend",
            "baf54048118103088e518cfa16c3b5327b3c1c28"
        ],
        [
            "intros; simpl in H; elim (lt_n_O _ H).",
            "VernacExtend",
            "ccfbabeb0fe8466e422254a4da2f931828b8a562"
        ],
        [
            "simple induction r0.",
            "VernacExtend",
            "3cd54584b7d76a051ea25914c5484966487340a3"
        ],
        [
            "intros; simpl in H0; elim (lt_n_O _ H0).",
            "VernacExtend",
            "1ca9d9fb3daac312b7f7d1875596d7fb15cb590e"
        ],
        [
            "intros; simpl in H1; induction i as [| i Hreci].",
            "VernacExtend",
            "bd8c707a583d697fca6b0348f432c426513334b6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "change (pos_Rl (mid_Rlist (cons r1 r2) r) (S i) = (pos_Rl (cons r1 r2) i + pos_Rl (cons r1 r2) (S i)) / 2) ; apply H0; simpl; apply lt_S_n; assumption.",
            "VernacExtend",
            "e912092f6bfed5e5255304bb1c38ea17cbb0c7bf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P14 : forall (l:Rlist) (a:R), Rlength (mid_Rlist l a) = Rlength l.",
            "VernacStartTheoremProof",
            "9b3fa86f35bb052b146e26bf7f5f7a3f8f3eab73"
        ],
        [
            "simple induction l; intros; [ reflexivity | simpl; rewrite (H r); reflexivity ].",
            "VernacExtend",
            "42641cdeaa70d84b7d05649eea9d21e6c429fab5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P15 : forall l1 l2:Rlist, ordered_Rlist l1 -> ordered_Rlist l2 -> pos_Rl l1 0 = pos_Rl l2 0 -> pos_Rl (cons_ORlist l1 l2) 0 = pos_Rl l1 0.",
            "VernacStartTheoremProof",
            "ed3a637f1d993ae882564b4c5a952848b4bceed7"
        ],
        [
            "intros; apply Rle_antisym.",
            "VernacExtend",
            "46271b34b83a7bf9c7cc11653ffe7ef46049ae9a"
        ],
        [
            "induction l1 as [| r l1 Hrecl1]; [ simpl; simpl in H1; right; symmetry ; assumption | elim (RList_P9 (cons r l1) l2 (pos_Rl (cons r l1) 0)); intros; assert (H4 : In (pos_Rl (cons r l1) 0) (cons r l1) \\/ In (pos_Rl (cons r l1) 0) l2); [ left; left; reflexivity | assert (H5 := H3 H4); apply RList_P5; [ apply RList_P2; assumption | assumption ] ] ].",
            "VernacExtend",
            "44fef25bf297e60e06fd3768dcf947446105755d"
        ],
        [
            "induction l1 as [| r l1 Hrecl1]; [ simpl; simpl in H1; right; assumption | assert (H2 : In (pos_Rl (cons_ORlist (cons r l1) l2) 0) (cons_ORlist (cons r l1) l2)); [ elim (RList_P3 (cons_ORlist (cons r l1) l2) (pos_Rl (cons_ORlist (cons r l1) l2) 0)); intros; apply H3; exists 0%nat; split; [ reflexivity | rewrite RList_P11; simpl; apply lt_O_Sn ] | elim (RList_P9 (cons r l1) l2 (pos_Rl (cons_ORlist (cons r l1) l2) 0)); intros; assert (H5 := H3 H2); elim H5; intro; [ apply RList_P5; assumption | rewrite H1; apply RList_P5; assumption ] ] ].",
            "VernacExtend",
            "09d21389c54b9baf13dea6ae4e9a141b91d26b2a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P16 : forall l1 l2:Rlist, ordered_Rlist l1 -> ordered_Rlist l2 -> pos_Rl l1 (pred (Rlength l1)) = pos_Rl l2 (pred (Rlength l2)) -> pos_Rl (cons_ORlist l1 l2) (pred (Rlength (cons_ORlist l1 l2))) = pos_Rl l1 (pred (Rlength l1)).",
            "VernacStartTheoremProof",
            "b84ecbc12b2a1a3684f68b4699ba69b403ba0f22"
        ],
        [
            "intros; apply Rle_antisym.",
            "VernacExtend",
            "46271b34b83a7bf9c7cc11653ffe7ef46049ae9a"
        ],
        [
            "induction l1 as [| r l1 Hrecl1].",
            "VernacExtend",
            "f320953d90c1684fb218151b30f04e4f3994d4b3"
        ],
        [
            "simpl; simpl in H1; right; symmetry ; assumption.",
            "VernacExtend",
            "b9877db6655a94b09276e64e00bece99568f73af"
        ],
        [
            "assert (H2 : In (pos_Rl (cons_ORlist (cons r l1) l2) (pred (Rlength (cons_ORlist (cons r l1) l2)))) (cons_ORlist (cons r l1) l2)); [ elim (RList_P3 (cons_ORlist (cons r l1) l2) (pos_Rl (cons_ORlist (cons r l1) l2) (pred (Rlength (cons_ORlist (cons r l1) l2))))); intros; apply H3; exists (pred (Rlength (cons_ORlist (cons r l1) l2))); split; [ reflexivity | rewrite RList_P11; simpl; apply lt_n_Sn ] | elim (RList_P9 (cons r l1) l2 (pos_Rl (cons_ORlist (cons r l1) l2) (pred (Rlength (cons_ORlist (cons r l1) l2))))); intros; assert (H5 := H3 H2); elim H5; intro; [ apply RList_P7; assumption | rewrite H1; apply RList_P7; assumption ] ].",
            "VernacExtend",
            "6d68b645b6288f931e4c9a95cd860819e74b0517"
        ],
        [
            "induction l1 as [| r l1 Hrecl1].",
            "VernacExtend",
            "f320953d90c1684fb218151b30f04e4f3994d4b3"
        ],
        [
            "simpl; simpl in H1; right; assumption.",
            "VernacExtend",
            "1962bff2cc4b0bf2e5668c5a1313a77bb4715bcd"
        ],
        [
            "elim (RList_P9 (cons r l1) l2 (pos_Rl (cons r l1) (pred (Rlength (cons r l1))))); intros; assert (H4 : In (pos_Rl (cons r l1) (pred (Rlength (cons r l1)))) (cons r l1) \\/ In (pos_Rl (cons r l1) (pred (Rlength (cons r l1)))) l2); [ left; change (In (pos_Rl (cons r l1) (Rlength l1)) (cons r l1)); elim (RList_P3 (cons r l1) (pos_Rl (cons r l1) (Rlength l1))); intros; apply H5; exists (Rlength l1); split; [ reflexivity | simpl; apply lt_n_Sn ] | assert (H5 := H3 H4); apply RList_P7; [ apply RList_P2; assumption | elim (RList_P9 (cons r l1) l2 (pos_Rl (cons r l1) (pred (Rlength (cons r l1))))); intros; apply H7; left; elim (RList_P3 (cons r l1) (pos_Rl (cons r l1) (pred (Rlength (cons r l1))))); intros; apply H9; exists (pred (Rlength (cons r l1))); split; [ reflexivity | simpl; apply lt_n_Sn ] ] ].",
            "VernacExtend",
            "1bf2add976230916e4eb4a6f54ee6c6e19288576"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P17 : forall (l1:Rlist) (x:R) (i:nat), ordered_Rlist l1 -> In x l1 -> pos_Rl l1 i < x -> (i < pred (Rlength l1))%nat -> pos_Rl l1 (S i) <= x.",
            "VernacStartTheoremProof",
            "4ae6e61c372385e9aadf252b0c06eeb0b72521c9"
        ],
        [
            "simple induction l1.",
            "VernacExtend",
            "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
        ],
        [
            "intros; elim H0.",
            "VernacExtend",
            "e4509005dcbe5e064a3f7a1ee905fd72e722f5a1"
        ],
        [
            "intros; induction i as [| i Hreci].",
            "VernacExtend",
            "c9adc63016258b96a0e1d467a9bcaf9fe9e89584"
        ],
        [
            "simpl; elim H1; intro; [ simpl in H2; rewrite H4 in H2; elim (Rlt_irrefl _ H2) | apply RList_P5; [ apply RList_P4 with r; assumption | assumption ] ].",
            "VernacExtend",
            "00eb31ba37c0055e596c730113989a2e7f8a98ba"
        ],
        [
            "simpl; simpl in H2; elim H1; intro.",
            "VernacExtend",
            "a0b6559ede598fcf3435e8ad9791a92da88ee1b7"
        ],
        [
            "rewrite H4 in H2; assert (H5 : r <= pos_Rl r0 i); [ apply Rle_trans with (pos_Rl r0 0); [ apply (H0 0%nat); simpl; simpl in H3; apply neq_O_lt; red; intro; rewrite <- H5 in H3; elim (lt_n_O _ H3) | elim (RList_P6 r0); intros; apply H5; [ apply RList_P4 with r; assumption | apply le_O_n | simpl in H3; apply lt_S_n; apply lt_trans with (Rlength r0); [ apply H3 | apply lt_n_Sn ] ] ] | elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H5 H2)) ].",
            "VernacExtend",
            "bbb674ac2991f9cef9de9fe919f5822a2f79fa35"
        ],
        [
            "apply H; try assumption; [ apply RList_P4 with r; assumption | simpl in H3; apply lt_S_n; replace (S (pred (Rlength r0))) with (Rlength r0); [ apply H3 | apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H5 in H3; elim (lt_n_O _ H3) ] ].",
            "VernacExtend",
            "e5864f932d5ad8f6aea3f1996b4b642330775026"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P18 : forall (l:Rlist) (f:R -> R), Rlength (app_Rlist l f) = Rlength l.",
            "VernacStartTheoremProof",
            "6ba921396a0623f996bee0f34f9d6a7d371b102e"
        ],
        [
            "simple induction l; intros; [ reflexivity | simpl; rewrite H; reflexivity ].",
            "VernacExtend",
            "a5734714c9f2d4b804e3276aad7a05071fa3a17e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P19 : forall l:Rlist, l <> nil -> exists r : R, (exists r0 : Rlist, l = cons r r0).",
            "VernacStartTheoremProof",
            "53c8cefe5a0cfa6d05317c01c1b659b4349731cc"
        ],
        [
            "intros; induction l as [| r l Hrecl]; [ elim H; reflexivity | exists r; exists l; reflexivity ].",
            "VernacExtend",
            "3021a9dbf0ffc63feedeaf06b89321a62811072b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P20 : forall l:Rlist, (2 <= Rlength l)%nat -> exists r : R, (exists r1 : R, (exists l' : Rlist, l = cons r (cons r1 l'))).",
            "VernacStartTheoremProof",
            "692315b046fcb12899fb10a898436856b6140aa8"
        ],
        [
            "intros; induction l as [| r l Hrecl]; [ simpl in H; elim (le_Sn_O _ H) | induction l as [| r0 l Hrecl0]; [ simpl in H; elim (le_Sn_O _ (le_S_n _ _ H)) | exists r; exists r0; exists l; reflexivity ] ].",
            "VernacExtend",
            "68aef456aa8291a41832d8bb277a19c555067947"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P21 : forall l l':Rlist, l = l' -> Rtail l = Rtail l'.",
            "VernacStartTheoremProof",
            "f7e565b75f81c2fa27b07fd889adf439bb4fcd73"
        ],
        [
            "intros; rewrite H; reflexivity.",
            "VernacExtend",
            "56d8ebe070934265219de9b6580d0d60c2fadceb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P22 : forall l1 l2:Rlist, l1 <> nil -> pos_Rl (cons_Rlist l1 l2) 0 = pos_Rl l1 0.",
            "VernacStartTheoremProof",
            "18324d2e579bf22a0576acd3c7167bf799186ab2"
        ],
        [
            "simple induction l1; [ intros; elim H; reflexivity | intros; reflexivity ].",
            "VernacExtend",
            "7e44ff8839703c6ea9f716f59263d56537ccedff"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P23 : forall l1 l2:Rlist, Rlength (cons_Rlist l1 l2) = (Rlength l1 + Rlength l2)%nat.",
            "VernacStartTheoremProof",
            "c3e043f94fd7c1a19a203ddd01c5426eb6cd23f1"
        ],
        [
            "simple induction l1; [ intro; reflexivity | intros; simpl; rewrite H; reflexivity ].",
            "VernacExtend",
            "2a3003e58c38dd19248976fa87ccfc35541240dc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P24 : forall l1 l2:Rlist, l2 <> nil -> pos_Rl (cons_Rlist l1 l2) (pred (Rlength (cons_Rlist l1 l2))) = pos_Rl l2 (pred (Rlength l2)).",
            "VernacStartTheoremProof",
            "3f72c10619dec4927aceb92ce3acf5c4a80a11ba"
        ],
        [
            "simple induction l1.",
            "VernacExtend",
            "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
        ],
        [
            "intros; reflexivity.",
            "VernacExtend",
            "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
        ],
        [
            "intros; rewrite <- (H l2 H0); induction l2 as [| r1 l2 Hrecl2].",
            "VernacExtend",
            "9fcceaa4b534d2fbd3d90f583907a517df7faff7"
        ],
        [
            "elim H0; reflexivity.",
            "VernacExtend",
            "4320c35310a38800a625b1a7c3e58940d517df16"
        ],
        [
            "do 2 rewrite RList_P23; replace (Rlength (cons r r0) + Rlength (cons r1 l2))%nat with (S (S (Rlength r0 + Rlength l2))); [ replace (Rlength r0 + Rlength (cons r1 l2))%nat with (S (Rlength r0 + Rlength l2)); [ reflexivity | simpl; apply INR_eq; rewrite S_INR; do 2 rewrite plus_INR; rewrite S_INR; ring ] | simpl; apply INR_eq; do 3 rewrite S_INR; do 2 rewrite plus_INR; rewrite S_INR; ring ].",
            "VernacExtend",
            "a1bfd6291a54e29bff7fe1b46451c02bbca3b96b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P25 : forall l1 l2:Rlist, ordered_Rlist l1 -> ordered_Rlist l2 -> pos_Rl l1 (pred (Rlength l1)) <= pos_Rl l2 0 -> ordered_Rlist (cons_Rlist l1 l2).",
            "VernacStartTheoremProof",
            "58464e931830839a9fa4d4c682b79c624d1de272"
        ],
        [
            "simple induction l1.",
            "VernacExtend",
            "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
        ],
        [
            "intros; simpl; assumption.",
            "VernacExtend",
            "19c1b2168c6ec8c9b29fae509efc0d03bbb9b78b"
        ],
        [
            "simple induction r0.",
            "VernacExtend",
            "3cd54584b7d76a051ea25914c5484966487340a3"
        ],
        [
            "intros; simpl; simpl in H2; unfold ordered_Rlist; intros; simpl in H3.",
            "VernacExtend",
            "825e288dd47c6ef4a58487041e202dc5d41fb361"
        ],
        [
            "induction i as [| i Hreci].",
            "VernacExtend",
            "359a77e440c9883a74d09392e658fa188fb9d6cd"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "change (pos_Rl l2 i <= pos_Rl l2 (S i)); apply (H1 i); apply lt_S_n; replace (S (pred (Rlength l2))) with (Rlength l2); [ assumption | apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H4 in H3; elim (lt_n_O _ H3) ].",
            "VernacExtend",
            "680c728618f3aaec70390b5188fbe4197d71fe12"
        ],
        [
            "intros; clear H; assert (H : ordered_Rlist (cons_Rlist (cons r1 r2) l2)).",
            "VernacExtend",
            "825abc8ad33b4c5da746d4993cd48c7e4125332d"
        ],
        [
            "apply H0; try assumption.",
            "VernacExtend",
            "4c171ecf9d763efd249ae534f812c9fa4c80471d"
        ],
        [
            "apply RList_P4 with r; assumption.",
            "VernacExtend",
            "ca77f3aeb32c827a13d2dfeb653f84e922693df3"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H4; induction i as [| i Hreci].",
            "VernacExtend",
            "9ef65361e2d586881235656ac9e13440b90ce6e9"
        ],
        [
            "simpl; apply (H1 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "8d192d833e23f6d511867feebd5777fb063f88b7"
        ],
        [
            "change (pos_Rl (cons_Rlist (cons r1 r2) l2) i <= pos_Rl (cons_Rlist (cons r1 r2) l2) (S i)); apply (H i); simpl; apply lt_S_n; assumption.",
            "VernacExtend",
            "10b7c30c6c96807c659e91ebca2e9302bae0d3de"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P26 : forall (l1 l2:Rlist) (i:nat), (i < Rlength l1)%nat -> pos_Rl (cons_Rlist l1 l2) i = pos_Rl l1 i.",
            "VernacStartTheoremProof",
            "ddfa5b9698e583da3f3539ce01c1ba27608b1373"
        ],
        [
            "simple induction l1.",
            "VernacExtend",
            "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
        ],
        [
            "intros; elim (lt_n_O _ H).",
            "VernacExtend",
            "ca3331c7467565b31e18009883bc46058b26bd27"
        ],
        [
            "intros; induction i as [| i Hreci].",
            "VernacExtend",
            "c9adc63016258b96a0e1d467a9bcaf9fe9e89584"
        ],
        [
            "apply RList_P22; discriminate.",
            "VernacExtend",
            "f082044c264d0f27058ee45c3a0e62b70fb86904"
        ],
        [
            "apply (H l2 i); simpl in H0; apply lt_S_n; assumption.",
            "VernacExtend",
            "85b49809fb1a2984d8af64249bb4871712a4c78e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P27 : forall l1 l2 l3:Rlist, cons_Rlist l1 (cons_Rlist l2 l3) = cons_Rlist (cons_Rlist l1 l2) l3.",
            "VernacStartTheoremProof",
            "591109d531c3226351bb613d3fa1f35b662add8c"
        ],
        [
            "simple induction l1; intros; [ reflexivity | simpl; rewrite (H l2 l3); reflexivity ].",
            "VernacExtend",
            "757119819fc0a4b7db0021273ebaf2ffed086b68"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P28 : forall l:Rlist, cons_Rlist l nil = l.",
            "VernacStartTheoremProof",
            "8e8183c9a307f068803ef66d8e16427a3a45a505"
        ],
        [
            "simple induction l; [ reflexivity | intros; simpl; rewrite H; reflexivity ].",
            "VernacExtend",
            "de6f587c19b92291bda791568222a05f97881e52"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RList_P29 : forall (l2 l1:Rlist) (i:nat), (Rlength l1 <= i)%nat -> (i < Rlength (cons_Rlist l1 l2))%nat -> pos_Rl (cons_Rlist l1 l2) i = pos_Rl l2 (i - Rlength l1).",
            "VernacStartTheoremProof",
            "31aba8ea425447767070aa3bfc865651b51f2452"
        ],
        [
            "simple induction l2.",
            "VernacExtend",
            "918d3871e87d72cc43639ff2ff12e6969e3db8a6"
        ],
        [
            "intros; rewrite RList_P28 in H0; elim (lt_irrefl _ (le_lt_trans _ _ _ H H0)).",
            "VernacExtend",
            "3ad22590b1bf6a8fd4bffad0562179f8ce8052d9"
        ],
        [
            "intros; replace (cons_Rlist l1 (cons r r0)) with (cons_Rlist (cons_Rlist l1 (cons r nil)) r0).",
            "VernacExtend",
            "155ab47e264fb736e35de8f38f052ddabc66ef22"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "rewrite <- minus_n_n; simpl; rewrite RList_P26.",
            "VernacExtend",
            "0597114e28134707927748ccb35521fffd0856c4"
        ],
        [
            "clear l2 r0 H i H0 H1 H2; induction l1 as [| r0 l1 Hrecl1].",
            "VernacExtend",
            "60a151c37a4c6bf8ac15c455ff8cdb05896cc308"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "rewrite RList_P23; rewrite plus_comm; simpl; apply lt_n_Sn.",
            "VernacExtend",
            "d290bda1e54b3d17cc1a3e6b8c38ba2c920c2ddf"
        ],
        [
            "replace (S m - Rlength l1)%nat with (S (S m - S (Rlength l1))).",
            "VernacExtend",
            "f53c02f3c16c02c4c1767e25071c2e9072055742"
        ],
        [
            "rewrite H3; simpl; replace (S (Rlength l1)) with (Rlength (cons_Rlist l1 (cons r nil))).",
            "VernacExtend",
            "cdb34c541643a373ba5ea07041e8a7ab2ffeecf0"
        ],
        [
            "apply (H (cons_Rlist l1 (cons r nil)) i).",
            "VernacExtend",
            "bac82d351a6f9e2ac8af225ffd945c7af4dbb11a"
        ],
        [
            "rewrite RList_P23; rewrite plus_comm; simpl; rewrite <- H3; apply le_n_S; assumption.",
            "VernacExtend",
            "813f29dd4465ec54e9af4ce60cff6a247414db46"
        ],
        [
            "repeat rewrite RList_P23; simpl; rewrite RList_P23 in H1; rewrite plus_comm in H1; simpl in H1; rewrite (plus_comm (Rlength l1)); simpl; rewrite plus_comm; apply H1.",
            "VernacExtend",
            "30d78b2d31d9d32ac8e75207f82cf4e01fb822c7"
        ],
        [
            "rewrite RList_P23; rewrite plus_comm; reflexivity.",
            "VernacExtend",
            "28bcad7900b7bcaec8de80d4c89c87cd17a595f1"
        ],
        [
            "change (S (m - Rlength l1) = (S m - Rlength l1)%nat); apply minus_Sn_m; assumption.",
            "VernacExtend",
            "24cde2fb581a726a97970801c3bc66569c6b6119"
        ],
        [
            "replace (cons r r0) with (cons_Rlist (cons r nil) r0); [ symmetry ; apply RList_P27 | reflexivity ].",
            "VernacExtend",
            "5a43fecaa9375ea819ebd7d47adc90909eb1b2cc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "MaxRlist_P1",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "65266dba08759172a3062fa061a39cbafef9e7e1"
                    ]
                },
                {
                    "command": [
                        "simpl in H; elim H.",
                        "VernacExtend",
                        "a0d0d654b59b4661e1eb1b50bab12a129f6ce576"
                    ]
                },
                {
                    "command": [
                        "induction l as [| r0 l Hrecl0].",
                        "VernacExtend",
                        "095e5e27fe3596ce8ad6fd33d3d6e9c65e067450"
                    ]
                },
                {
                    "command": [
                        "simpl in H; elim H; intro.",
                        "VernacExtend",
                        "bb60eb1c1b60d8b79a6ebc9ea5703851b3c9a6d8"
                    ]
                },
                {
                    "command": [
                        "simpl; right; assumption.",
                        "VernacExtend",
                        "a8031ec86609226b9fbbdcd11c756beb70b5e141"
                    ]
                },
                {
                    "command": [
                        "elim H0.",
                        "VernacExtend",
                        "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
                    ]
                },
                {
                    "command": [
                        "replace (MaxRlist (cons r (cons r0 l))) with (Rmax r (MaxRlist (cons r0 l))).",
                        "VernacExtend",
                        "1fb4f00d48f3e516df673a160e8be72c2e3e4ed4"
                    ]
                },
                {
                    "command": [
                        "simpl in H; decompose [or] H.",
                        "VernacExtend",
                        "6450606dbdda4fbf0624201c2bf1e9f1b53209d0"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; apply RmaxLess1.",
                        "VernacExtend",
                        "d122f83403755d827b61f20a35bf6ba66da2347f"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; case (Rle_dec r (MaxRlist (cons r0 l))); intro.",
                        "VernacExtend",
                        "df83801e3ed7400270001d20cf0169c7692d3aff"
                    ]
                },
                {
                    "command": [
                        "apply Hrecl; simpl; tauto.",
                        "VernacExtend",
                        "27235c0922d21253ce44eb4bebd7044efbde875a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (MaxRlist (cons r0 l)); [ apply Hrecl; simpl; tauto | left; auto with real ].",
                        "VernacExtend",
                        "e681a6c1e87ea67cfbbf600ea9757e733a4322cb"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; case (Rle_dec r (MaxRlist (cons r0 l))); intro.",
                        "VernacExtend",
                        "df83801e3ed7400270001d20cf0169c7692d3aff"
                    ]
                },
                {
                    "command": [
                        "apply Hrecl; simpl; tauto.",
                        "VernacExtend",
                        "27235c0922d21253ce44eb4bebd7044efbde875a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (MaxRlist (cons r0 l)); [ apply Hrecl; simpl; tauto | left; auto with real ].",
                        "VernacExtend",
                        "e681a6c1e87ea67cfbbf600ea9757e733a4322cb"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinRlist_P1",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "65266dba08759172a3062fa061a39cbafef9e7e1"
                    ]
                },
                {
                    "command": [
                        "simpl in H; elim H.",
                        "VernacExtend",
                        "a0d0d654b59b4661e1eb1b50bab12a129f6ce576"
                    ]
                },
                {
                    "command": [
                        "induction l as [| r0 l Hrecl0].",
                        "VernacExtend",
                        "095e5e27fe3596ce8ad6fd33d3d6e9c65e067450"
                    ]
                },
                {
                    "command": [
                        "simpl in H; elim H; intro.",
                        "VernacExtend",
                        "bb60eb1c1b60d8b79a6ebc9ea5703851b3c9a6d8"
                    ]
                },
                {
                    "command": [
                        "simpl; right; symmetry ; assumption.",
                        "VernacExtend",
                        "bbe2937faf1394d0a97a5ccfad72e6e0b821f9b9"
                    ]
                },
                {
                    "command": [
                        "elim H0.",
                        "VernacExtend",
                        "2d71de27573d5f7f982cd3c14a3bba29df8752cb"
                    ]
                },
                {
                    "command": [
                        "replace (MinRlist (cons r (cons r0 l))) with (Rmin r (MinRlist (cons r0 l))).",
                        "VernacExtend",
                        "803a38c57be1ff465aedc7f5578c7aa47ecba607"
                    ]
                },
                {
                    "command": [
                        "simpl in H; decompose [or] H.",
                        "VernacExtend",
                        "6450606dbdda4fbf0624201c2bf1e9f1b53209d0"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; apply Rmin_l.",
                        "VernacExtend",
                        "024f03b121b5dfe194a2e690d7cf8cf621b62600"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec r (MinRlist (cons r0 l))); intro.",
                        "VernacExtend",
                        "95c69138d26b423356561ef9e8068c75a465ab30"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (MinRlist (cons r0 l)).",
                        "VernacExtend",
                        "48bfde75e1b1cb3481c2b523b264565dc3aa8345"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Hrecl; simpl; tauto.",
                        "VernacExtend",
                        "27235c0922d21253ce44eb4bebd7044efbde875a"
                    ]
                },
                {
                    "command": [
                        "apply Hrecl; simpl; tauto.",
                        "VernacExtend",
                        "27235c0922d21253ce44eb4bebd7044efbde875a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (MinRlist (cons r0 l)).",
                        "VernacExtend",
                        "48bfde75e1b1cb3481c2b523b264565dc3aa8345"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "apply Hrecl; simpl; tauto.",
                        "VernacExtend",
                        "27235c0922d21253ce44eb4bebd7044efbde875a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "AbsList_P1",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "65266dba08759172a3062fa061a39cbafef9e7e1"
                    ]
                },
                {
                    "command": [
                        "elim H.",
                        "VernacExtend",
                        "853aa440c3a3810be05f0f87d0e688c05b92253d"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H; elim H; intro.",
                        "VernacExtend",
                        "b98ae5bb7c334c78588eae509d2b12ef129a889b"
                    ]
                },
                {
                    "command": [
                        "left; rewrite H0; reflexivity.",
                        "VernacExtend",
                        "72102394b443713e1fe193803b04718200a93d91"
                    ]
                },
                {
                    "command": [
                        "right; apply Hrecl; assumption.",
                        "VernacExtend",
                        "cbde55acbd63a4e36a2716b1d553351624b4e78e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MinRlist_P2",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "65266dba08759172a3062fa061a39cbafef9e7e1"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_0_1.",
                        "VernacExtend",
                        "c3f675388bf844e0740197fd71afa66e5eef091d"
                    ]
                },
                {
                    "command": [
                        "induction l as [| r0 l Hrecl0].",
                        "VernacExtend",
                        "095e5e27fe3596ce8ad6fd33d3d6e9c65e067450"
                    ]
                },
                {
                    "command": [
                        "simpl; apply H; simpl; tauto.",
                        "VernacExtend",
                        "9f25b93eaaabdc6591f6c7014ed6f551773a0b98"
                    ]
                },
                {
                    "command": [
                        "replace (MinRlist (cons r (cons r0 l))) with (Rmin r (MinRlist (cons r0 l))).",
                        "VernacExtend",
                        "803a38c57be1ff465aedc7f5578c7aa47ecba607"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec r (MinRlist (cons r0 l))); intro.",
                        "VernacExtend",
                        "95c69138d26b423356561ef9e8068c75a465ab30"
                    ]
                },
                {
                    "command": [
                        "apply H; simpl; tauto.",
                        "VernacExtend",
                        "7b8ae882379b618835b693a235bc5160594ee030"
                    ]
                },
                {
                    "command": [
                        "apply Hrecl; intros; apply H; simpl; simpl in H0; tauto.",
                        "VernacExtend",
                        "7bd8eb795d6add02f7d2fd6478915c67c1602728"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "AbsList_P2",
            "line_nb": 65,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "65266dba08759172a3062fa061a39cbafef9e7e1"
                    ]
                },
                {
                    "command": [
                        "elim H.",
                        "VernacExtend",
                        "853aa440c3a3810be05f0f87d0e688c05b92253d"
                    ]
                },
                {
                    "command": [
                        "elim H; intro.",
                        "VernacExtend",
                        "f72f8bb994653bc377ef4f37626cba5f2cab4c8b"
                    ]
                },
                {
                    "command": [
                        "exists r; split.",
                        "VernacExtend",
                        "3d33c1ab822330cf06e0f814bb3f5202df25f0ff"
                    ]
                },
                {
                    "command": [
                        "simpl; tauto.",
                        "VernacExtend",
                        "2c27d7b56602355c3ed4605e551cd6a88509ac37"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := Hrecl H0); elim H1; intros; elim H2; clear H2; intros; exists x0; simpl; simpl in H2; tauto.",
                        "VernacExtend",
                        "ae260240087ebe04bc51b7206b86dca69c5b07fa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MaxRlist_P2",
            "line_nb": 74,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "65266dba08759172a3062fa061a39cbafef9e7e1"
                    ]
                },
                {
                    "command": [
                        "simpl in H; elim H; trivial.",
                        "VernacExtend",
                        "4d2e0b1742460ced8276110a0cb2d03e83d27ba9"
                    ]
                },
                {
                    "command": [
                        "induction l as [| r0 l Hrecl0].",
                        "VernacExtend",
                        "095e5e27fe3596ce8ad6fd33d3d6e9c65e067450"
                    ]
                },
                {
                    "command": [
                        "simpl; left; reflexivity.",
                        "VernacExtend",
                        "e6e540e176cde6c1b34b5931d38541ed30811ac1"
                    ]
                },
                {
                    "command": [
                        "change (In (Rmax r (MaxRlist (cons r0 l))) (cons r (cons r0 l))); unfold Rmax; case (Rle_dec r (MaxRlist (cons r0 l))); intro.",
                        "VernacExtend",
                        "5e0bcea2db6bc0dca566bc099c04a8d8913989dc"
                    ]
                },
                {
                    "command": [
                        "right; apply Hrecl; exists r0; left; reflexivity.",
                        "VernacExtend",
                        "0cdb5e7d9f39369fa6155be90d671b54b801fa45"
                    ]
                },
                {
                    "command": [
                        "left; reflexivity.",
                        "VernacExtend",
                        "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pos_Rl_P1",
            "line_nb": 84,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl]; [ elim (lt_n_O _ H) | simpl; case (Rlength l); [ reflexivity | intro; reflexivity ] ].",
                        "VernacExtend",
                        "bfa1db8ccf56d8f090fff1fe0e72b63d820897d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pos_Rl_P2",
            "line_nb": 87,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "65266dba08759172a3062fa061a39cbafef9e7e1"
                    ]
                },
                {
                    "command": [
                        "split; intro; [ elim H | elim H; intros; elim H0; intros; elim (lt_n_O _ H1) ].",
                        "VernacExtend",
                        "f99149115bc08716360f52881e2932fd47a52a62"
                    ]
                },
                {
                    "command": [
                        "split; intro.",
                        "VernacExtend",
                        "966a6edea9c2088caf0e546be884ea531f6207b3"
                    ]
                },
                {
                    "command": [
                        "elim H; intro.",
                        "VernacExtend",
                        "f72f8bb994653bc377ef4f37626cba5f2cab4c8b"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat; split; [ simpl; apply lt_O_Sn | simpl; apply H0 ].",
                        "VernacExtend",
                        "21b5e8193599dd3d926acdd8b223f2f187e6f311"
                    ]
                },
                {
                    "command": [
                        "elim Hrecl; intros; assert (H3 := H1 H0); elim H3; intros; elim H4; intros; exists (S x0); split; [ simpl; apply lt_n_S; assumption | simpl; assumption ].",
                        "VernacExtend",
                        "466336bec4af78d546e9c01254421cfc24c0615b"
                    ]
                },
                {
                    "command": [
                        "elim H; intros; elim H0; intros; destruct (zerop x0) as [->|].",
                        "VernacExtend",
                        "6225b5f08119b867b267dea7eba008f5d8238379"
                    ]
                },
                {
                    "command": [
                        "simpl in H2; left; assumption.",
                        "VernacExtend",
                        "0c77108723525f396c389230d03502a86987da4f"
                    ]
                },
                {
                    "command": [
                        "right; elim Hrecl; intros H4 H5; apply H5; assert (H6 : S (pred x0) = x0).",
                        "VernacExtend",
                        "542bf65db337e11d576612cab9fc1c9871251b78"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply S_pred with 0%nat; assumption.",
                        "VernacExtend",
                        "07c00048f97977d2afec3560fb2e41ccdd392a6f"
                    ]
                },
                {
                    "command": [
                        "exists (pred x0); split; [ simpl in H1; apply lt_S_n; rewrite H6; assumption | rewrite <- H6 in H2; simpl in H2; assumption ].",
                        "VernacExtend",
                        "875bb2e867c11a2e796eeaa34bb3a483d2c48e50"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rlist_P1",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "65266dba08759172a3062fa061a39cbafef9e7e1"
                    ]
                },
                {
                    "command": [
                        "exists nil; intros; split; [ reflexivity | intros; simpl in H0; elim (lt_n_O _ H0) ].",
                        "VernacExtend",
                        "3cf07eff99d68d2a96753ceb4af4059531faf185"
                    ]
                },
                {
                    "command": [
                        "assert (H0 : In r (cons r l)).",
                        "VernacExtend",
                        "df8597d74d4e89a93a7074d0bbaabbde145e7aad"
                    ]
                },
                {
                    "command": [
                        "simpl; left; reflexivity.",
                        "VernacExtend",
                        "e6e540e176cde6c1b34b5931d38541ed30811ac1"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := H _ H0); assert (H2 : forall x:R, In x l -> exists y : R, P x y).",
                        "VernacExtend",
                        "78658cf3a5971d5dbb30fa784d70a78a688396c7"
                    ]
                },
                {
                    "command": [
                        "intros; apply H; simpl; right; assumption.",
                        "VernacExtend",
                        "bef4d644e5df59cf8a652d8afc3762c63d136c79"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := Hrecl H2); elim H1; intros; elim H3; intros; exists (cons x x0); intros; elim H5; clear H5; intros; split.",
                        "VernacExtend",
                        "4937470299ffc2c8165cb00e02d99f6c2b460c97"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H5; reflexivity.",
                        "VernacExtend",
                        "a8e953ab1d475608d1ed68b49c16b0983fa2d5fc"
                    ]
                },
                {
                    "command": [
                        "intros; destruct (zerop i) as [->|].",
                        "VernacExtend",
                        "fccf480a30d83a85f09182170e74c17638c3f2f1"
                    ]
                },
                {
                    "command": [
                        "simpl; assumption.",
                        "VernacExtend",
                        "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
                    ]
                },
                {
                    "command": [
                        "assert (H9 : i = S (pred i)).",
                        "VernacExtend",
                        "4bcd962b978f98d3b743e2c916aaf6300850b9e8"
                    ]
                },
                {
                    "command": [
                        "apply S_pred with 0%nat; assumption.",
                        "VernacExtend",
                        "b39660ec3a92df9aac441f5d4480a21443485407"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; simpl; apply H6; simpl in H7; apply lt_S_n; rewrite <- H9; assumption.",
                        "VernacExtend",
                        "1b53565e62b91373865599034c17ff6b66d96f5c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P0",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl]; [ left; reflexivity | simpl; case (Rle_dec r a); intro; [ right; reflexivity | left; reflexivity ] ].",
                        "VernacExtend",
                        "a0238848745f8ea3a7789211bde43c9024a7e086"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P1",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "65266dba08759172a3062fa061a39cbafef9e7e1"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold ordered_Rlist; intros; simpl in H0; elim (lt_n_O _ H0).",
                        "VernacExtend",
                        "f56e0fdc7e32b6792b7a9611f69735421efa25df"
                    ]
                },
                {
                    "command": [
                        "simpl; case (Rle_dec r a); intro.",
                        "VernacExtend",
                        "d91f9a05d5eabffafa91813657e82e8182bbfacf"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : ordered_Rlist l).",
                        "VernacExtend",
                        "c9da08d70f4048ea5557fcea5826e7b27e6f9f69"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; unfold ordered_Rlist in H; intros; assert (H1 : (S i < pred (Rlength (cons r l)))%nat); [ simpl; replace (Rlength l) with (S (pred (Rlength l))); [ apply lt_n_S; assumption | symmetry ; apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H1 in H0; simpl in H0; elim (lt_n_O _ H0) ] | apply (H _ H1) ].",
                        "VernacExtend",
                        "548a0056039b8461232af326bfc7af14e22f69a5"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := Hrecl H1); unfold ordered_Rlist; intros; induction i as [| i Hreci].",
                        "VernacExtend",
                        "43d0eb375c5434e24f3e23d0ab71025e38e17efc"
                    ]
                },
                {
                    "command": [
                        "simpl; assert (H3 := RList_P0 l a); elim H3; intro.",
                        "VernacExtend",
                        "0a3cf856a822b9c92a3d6edc526b4132f2aa0600"
                    ]
                },
                {
                    "command": [
                        "rewrite H4; assumption.",
                        "VernacExtend",
                        "32a734a7bb8ef689c92b39d49433a0bc325fd27e"
                    ]
                },
                {
                    "command": [
                        "induction l as [| r1 l Hrecl0]; [ simpl; assumption | rewrite H4; apply (H 0%nat); simpl; apply lt_O_Sn ].",
                        "VernacExtend",
                        "d681f59a43f9077e28938d6a59ed6e5e46f6d24b"
                    ]
                },
                {
                    "command": [
                        "simpl; apply H2; simpl in H0; apply lt_S_n; replace (S (pred (Rlength (insert l a)))) with (Rlength (insert l a)); [ assumption | apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H3 in H0; elim (lt_n_O _ H0) ].",
                        "VernacExtend",
                        "3bd4dd98a5a94935ee55fc888ce9ffbe3d4fef41"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; intros; induction i as [| i Hreci]; [ simpl; auto with real | change (pos_Rl (cons r l) i <= pos_Rl (cons r l) (S i)); apply H; simpl in H0; simpl; apply (lt_S_n _ _ H0) ].",
                        "VernacExtend",
                        "ef18652fe83a3da10a5a28128541accbea0c5ae1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P2",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "simple induction l1; [ intros; simpl; apply H | intros; simpl; apply H; apply RList_P1; assumption ].",
                        "VernacExtend",
                        "6ce43bb74bed85266e0933fb38ee8483fd1744be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P3",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "intros; split; intro; [ induction l as [| r l Hrecl] | induction l as [| r l Hrecl] ].",
                        "VernacExtend",
                        "ee260bb040f3c4219fef41185b9cba39db02b61a"
                    ]
                },
                {
                    "command": [
                        "elim H.",
                        "VernacExtend",
                        "853aa440c3a3810be05f0f87d0e688c05b92253d"
                    ]
                },
                {
                    "command": [
                        "elim H; intro; [ exists 0%nat; split; [ apply H0 | simpl; apply lt_O_Sn ] | elim (Hrecl H0); intros; elim H1; clear H1; intros; exists (S x0); split; [ apply H1 | simpl; apply lt_n_S; assumption ] ].",
                        "VernacExtend",
                        "a9ccecc6687df5b2293539d5c180789e11453de8"
                    ]
                },
                {
                    "command": [
                        "elim H; intros; elim H0; intros; elim (lt_n_O _ H2).",
                        "VernacExtend",
                        "26a0ccf84f14235be2849fb8e1531f25e199b634"
                    ]
                },
                {
                    "command": [
                        "simpl; elim H; intros; elim H0; clear H0; intros; induction x0 as [| x0 Hrecx0]; [ left; apply H0 | right; apply Hrecl; exists x0; split; [ apply H0 | simpl in H1; apply lt_S_n; assumption ] ].",
                        "VernacExtend",
                        "862570b5f22d6ace3c04a5dd33bb338339fe49ee"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P4",
            "line_nb": 149,
            "steps": [
                {
                    "command": [
                        "intros; unfold ordered_Rlist; intros; apply (H (S i)); simpl; replace (Rlength l1) with (S (pred (Rlength l1))); [ apply lt_n_S; assumption | symmetry ; apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H1 in H0; elim (lt_n_O _ H0) ].",
                        "VernacExtend",
                        "e1d1a59f9a8403f815135ae7cf25996baecf9f68"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P5",
            "line_nb": 152,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl]; [ elim H0 | simpl; elim H0; intro; [ rewrite H1; right; reflexivity | apply Rle_trans with (pos_Rl l 0); [ apply (H 0%nat); simpl; induction l as [| r0 l Hrecl0]; [ elim H1 | simpl; apply lt_O_Sn ] | apply Hrecl; [ eapply RList_P4; apply H | assumption ] ] ] ].",
                        "VernacExtend",
                        "f666e01f02963038c940d66071dd4fdd47d3795d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P6",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "simple induction l; split; intro.",
                        "VernacExtend",
                        "9e5535434c75bb461678f330f67cbaf6125a7418"
                    ]
                },
                {
                    "command": [
                        "intros; right; reflexivity.",
                        "VernacExtend",
                        "0eed672e17ad0282323cc225850369f6ee61b524"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; intros; simpl in H0; elim (lt_n_O _ H0).",
                        "VernacExtend",
                        "162045a07e9ae3547b61f4b24bf893c31dce6fc7"
                    ]
                },
                {
                    "command": [
                        "intros; induction i as [| i Hreci]; [ induction j as [| j Hrecj]; [ right; reflexivity | simpl; apply Rle_trans with (pos_Rl r0 0); [ apply (H0 0%nat); simpl; simpl in H2; apply neq_O_lt; red; intro; rewrite <- H3 in H2; assert (H4 := lt_S_n _ _ H2); elim (lt_n_O _ H4) | elim H; intros; apply H3; [ apply RList_P4 with r; assumption | apply le_O_n | simpl in H2; apply lt_S_n; assumption ] ] ] | induction j as [| j Hrecj]; [ elim (le_Sn_O _ H1) | simpl; elim H; intros; apply H3; [ apply RList_P4 with r; assumption | apply le_S_n; assumption | simpl in H2; apply lt_S_n; assumption ] ] ].",
                        "VernacExtend",
                        "7b4ff3de55849d59f973518e568f5ceaac013e0a"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; intros; apply H0; [ apply le_n_Sn | simpl; simpl in H1; apply lt_n_S; assumption ].",
                        "VernacExtend",
                        "2108e267ad8de6e70bb08e5a7cbcbc2b9be29488"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P7",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "intros; assert (H1 := RList_P6 l); elim H1; intros H2 _; assert (H3 := H2 H); clear H1 H2; assert (H1 := RList_P3 l x); elim H1; clear H1; intros; assert (H4 := H1 H0); elim H4; clear H4; intros; elim H4; clear H4; intros; rewrite H4; assert (H6 : Rlength l = S (pred (Rlength l))).",
                        "VernacExtend",
                        "637b31d96d9ef4d266706524f286cdf1df27c4a4"
                    ]
                },
                {
                    "command": [
                        "apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H6 in H5; elim (lt_n_O _ H5).",
                        "VernacExtend",
                        "d72b38746d6ee989f0cc9436944b955833adc0af"
                    ]
                },
                {
                    "command": [
                        "apply H3; [ rewrite H6 in H5; apply lt_n_Sm_le; assumption | apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H7 in H5; elim (lt_n_O _ H5) ].",
                        "VernacExtend",
                        "25cf677220815a5f3e7754440d085942adaa25f4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P8",
            "line_nb": 167,
            "steps": [
                {
                    "command": [
                        "simple induction l.",
                        "VernacExtend",
                        "baf54048118103088e518cfa16c3b5327b3c1c28"
                    ]
                },
                {
                    "command": [
                        "intros; split; intro; simpl in H; apply H.",
                        "VernacExtend",
                        "fa4e31ebf11c9537b2b1951bde48b12827aac870"
                    ]
                },
                {
                    "command": [
                        "intros; split; intro; [ simpl in H0; generalize H0; case (Rle_dec r a); intros; [ simpl in H1; elim H1; intro; [ right; left; assumption | elim (H a x); intros; elim (H3 H2); intro; [ left; assumption | right; right; assumption ] ] | simpl in H1; decompose [or] H1; [ left; assumption | right; left; assumption | right; right; assumption ] ] | simpl; case (Rle_dec r a); intro; [ simpl in H0; decompose [or] H0; [ right; elim (H a x); intros; apply H3; left | left | right; elim (H a x); intros; apply H3; right ] | simpl in H0; decompose [or] H0; [ left | right; left | right; right ] ]; assumption ].",
                        "VernacExtend",
                        "99d2b68210c677a05928cf47b0766a2b922853d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P9",
            "line_nb": 172,
            "steps": [
                {
                    "command": [
                        "simple induction l1.",
                        "VernacExtend",
                        "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
                    ]
                },
                {
                    "command": [
                        "intros; split; intro; [ simpl in H; right; assumption | simpl; elim H; intro; [ elim H0 | assumption ] ].",
                        "VernacExtend",
                        "9507df5683cff8a5524f8ff2286386c566e66c60"
                    ]
                },
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "simpl; intros; elim (H (insert l2 r) x); intros; assert (H3 := H1 H0); elim H3; intro; [ left; right; assumption | elim (RList_P8 l2 r x); intros H5 _; assert (H6 := H5 H4); elim H6; intro; [ left; left; assumption | right; assumption ] ].",
                        "VernacExtend",
                        "cccf58653726a42b18a8f2cbebf8847e7983ee56"
                    ]
                },
                {
                    "command": [
                        "intro; simpl; elim (H (insert l2 r) x); intros _ H1; apply H1; elim H0; intro; [ elim H2; intro; [ right; elim (RList_P8 l2 r x); intros _ H4; apply H4; left; assumption | left; assumption ] | right; elim (RList_P8 l2 r x); intros _ H3; apply H3; right; assumption ].",
                        "VernacExtend",
                        "f58be2bfb320e350dba7c66f5044e812c256d9d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P10",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl]; [ reflexivity | simpl; case (Rle_dec r a); intro; [ simpl; rewrite Hrecl; reflexivity | reflexivity ] ].",
                        "VernacExtend",
                        "edcf3004d4c4c14d2ff8c08f18e919553c09d4d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P11",
            "line_nb": 182,
            "steps": [
                {
                    "command": [
                        "simple induction l1; [ intro; reflexivity | intros; simpl; rewrite (H (insert l2 r)); rewrite RList_P10; apply INR_eq; rewrite S_INR; do 2 rewrite plus_INR; rewrite S_INR; ring ].",
                        "VernacExtend",
                        "9e63f3ce7257fd183c3ca56f4661b76217cfdcdd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P12",
            "line_nb": 185,
            "steps": [
                {
                    "command": [
                        "simple induction l; [ intros; elim (lt_n_O _ H) | intros; induction i as [| i Hreci]; [ reflexivity | simpl; apply H; apply lt_S_n; apply H0 ] ].",
                        "VernacExtend",
                        "4b5eea241683397efdbc7ca129ac697884ea91c2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P13",
            "line_nb": 188,
            "steps": [
                {
                    "command": [
                        "simple induction l.",
                        "VernacExtend",
                        "baf54048118103088e518cfa16c3b5327b3c1c28"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H; elim (lt_n_O _ H).",
                        "VernacExtend",
                        "ccfbabeb0fe8466e422254a4da2f931828b8a562"
                    ]
                },
                {
                    "command": [
                        "simple induction r0.",
                        "VernacExtend",
                        "3cd54584b7d76a051ea25914c5484966487340a3"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H0; elim (lt_n_O _ H0).",
                        "VernacExtend",
                        "1ca9d9fb3daac312b7f7d1875596d7fb15cb590e"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H1; induction i as [| i Hreci].",
                        "VernacExtend",
                        "bd8c707a583d697fca6b0348f432c426513334b6"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "change (pos_Rl (mid_Rlist (cons r1 r2) r) (S i) = (pos_Rl (cons r1 r2) i + pos_Rl (cons r1 r2) (S i)) / 2) ; apply H0; simpl; apply lt_S_n; assumption.",
                        "VernacExtend",
                        "e912092f6bfed5e5255304bb1c38ea17cbb0c7bf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P14",
            "line_nb": 197,
            "steps": [
                {
                    "command": [
                        "simple induction l; intros; [ reflexivity | simpl; rewrite (H r); reflexivity ].",
                        "VernacExtend",
                        "42641cdeaa70d84b7d05649eea9d21e6c429fab5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P15",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "intros; apply Rle_antisym.",
                        "VernacExtend",
                        "46271b34b83a7bf9c7cc11653ffe7ef46049ae9a"
                    ]
                },
                {
                    "command": [
                        "induction l1 as [| r l1 Hrecl1]; [ simpl; simpl in H1; right; symmetry ; assumption | elim (RList_P9 (cons r l1) l2 (pos_Rl (cons r l1) 0)); intros; assert (H4 : In (pos_Rl (cons r l1) 0) (cons r l1) \\/ In (pos_Rl (cons r l1) 0) l2); [ left; left; reflexivity | assert (H5 := H3 H4); apply RList_P5; [ apply RList_P2; assumption | assumption ] ] ].",
                        "VernacExtend",
                        "44fef25bf297e60e06fd3768dcf947446105755d"
                    ]
                },
                {
                    "command": [
                        "induction l1 as [| r l1 Hrecl1]; [ simpl; simpl in H1; right; assumption | assert (H2 : In (pos_Rl (cons_ORlist (cons r l1) l2) 0) (cons_ORlist (cons r l1) l2)); [ elim (RList_P3 (cons_ORlist (cons r l1) l2) (pos_Rl (cons_ORlist (cons r l1) l2) 0)); intros; apply H3; exists 0%nat; split; [ reflexivity | rewrite RList_P11; simpl; apply lt_O_Sn ] | elim (RList_P9 (cons r l1) l2 (pos_Rl (cons_ORlist (cons r l1) l2) 0)); intros; assert (H5 := H3 H2); elim H5; intro; [ apply RList_P5; assumption | rewrite H1; apply RList_P5; assumption ] ] ].",
                        "VernacExtend",
                        "09d21389c54b9baf13dea6ae4e9a141b91d26b2a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P16",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "intros; apply Rle_antisym.",
                        "VernacExtend",
                        "46271b34b83a7bf9c7cc11653ffe7ef46049ae9a"
                    ]
                },
                {
                    "command": [
                        "induction l1 as [| r l1 Hrecl1].",
                        "VernacExtend",
                        "f320953d90c1684fb218151b30f04e4f3994d4b3"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H1; right; symmetry ; assumption.",
                        "VernacExtend",
                        "b9877db6655a94b09276e64e00bece99568f73af"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : In (pos_Rl (cons_ORlist (cons r l1) l2) (pred (Rlength (cons_ORlist (cons r l1) l2)))) (cons_ORlist (cons r l1) l2)); [ elim (RList_P3 (cons_ORlist (cons r l1) l2) (pos_Rl (cons_ORlist (cons r l1) l2) (pred (Rlength (cons_ORlist (cons r l1) l2))))); intros; apply H3; exists (pred (Rlength (cons_ORlist (cons r l1) l2))); split; [ reflexivity | rewrite RList_P11; simpl; apply lt_n_Sn ] | elim (RList_P9 (cons r l1) l2 (pos_Rl (cons_ORlist (cons r l1) l2) (pred (Rlength (cons_ORlist (cons r l1) l2))))); intros; assert (H5 := H3 H2); elim H5; intro; [ apply RList_P7; assumption | rewrite H1; apply RList_P7; assumption ] ].",
                        "VernacExtend",
                        "6d68b645b6288f931e4c9a95cd860819e74b0517"
                    ]
                },
                {
                    "command": [
                        "induction l1 as [| r l1 Hrecl1].",
                        "VernacExtend",
                        "f320953d90c1684fb218151b30f04e4f3994d4b3"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H1; right; assumption.",
                        "VernacExtend",
                        "1962bff2cc4b0bf2e5668c5a1313a77bb4715bcd"
                    ]
                },
                {
                    "command": [
                        "elim (RList_P9 (cons r l1) l2 (pos_Rl (cons r l1) (pred (Rlength (cons r l1))))); intros; assert (H4 : In (pos_Rl (cons r l1) (pred (Rlength (cons r l1)))) (cons r l1) \\/ In (pos_Rl (cons r l1) (pred (Rlength (cons r l1)))) l2); [ left; change (In (pos_Rl (cons r l1) (Rlength l1)) (cons r l1)); elim (RList_P3 (cons r l1) (pos_Rl (cons r l1) (Rlength l1))); intros; apply H5; exists (Rlength l1); split; [ reflexivity | simpl; apply lt_n_Sn ] | assert (H5 := H3 H4); apply RList_P7; [ apply RList_P2; assumption | elim (RList_P9 (cons r l1) l2 (pos_Rl (cons r l1) (pred (Rlength (cons r l1))))); intros; apply H7; left; elim (RList_P3 (cons r l1) (pos_Rl (cons r l1) (pred (Rlength (cons r l1))))); intros; apply H9; exists (pred (Rlength (cons r l1))); split; [ reflexivity | simpl; apply lt_n_Sn ] ] ].",
                        "VernacExtend",
                        "1bf2add976230916e4eb4a6f54ee6c6e19288576"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P17",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "simple induction l1.",
                        "VernacExtend",
                        "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
                    ]
                },
                {
                    "command": [
                        "intros; elim H0.",
                        "VernacExtend",
                        "e4509005dcbe5e064a3f7a1ee905fd72e722f5a1"
                    ]
                },
                {
                    "command": [
                        "intros; induction i as [| i Hreci].",
                        "VernacExtend",
                        "c9adc63016258b96a0e1d467a9bcaf9fe9e89584"
                    ]
                },
                {
                    "command": [
                        "simpl; elim H1; intro; [ simpl in H2; rewrite H4 in H2; elim (Rlt_irrefl _ H2) | apply RList_P5; [ apply RList_P4 with r; assumption | assumption ] ].",
                        "VernacExtend",
                        "00eb31ba37c0055e596c730113989a2e7f8a98ba"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H2; elim H1; intro.",
                        "VernacExtend",
                        "a0b6559ede598fcf3435e8ad9791a92da88ee1b7"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H2; assert (H5 : r <= pos_Rl r0 i); [ apply Rle_trans with (pos_Rl r0 0); [ apply (H0 0%nat); simpl; simpl in H3; apply neq_O_lt; red; intro; rewrite <- H5 in H3; elim (lt_n_O _ H3) | elim (RList_P6 r0); intros; apply H5; [ apply RList_P4 with r; assumption | apply le_O_n | simpl in H3; apply lt_S_n; apply lt_trans with (Rlength r0); [ apply H3 | apply lt_n_Sn ] ] ] | elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H5 H2)) ].",
                        "VernacExtend",
                        "bbb674ac2991f9cef9de9fe919f5822a2f79fa35"
                    ]
                },
                {
                    "command": [
                        "apply H; try assumption; [ apply RList_P4 with r; assumption | simpl in H3; apply lt_S_n; replace (S (pred (Rlength r0))) with (Rlength r0); [ apply H3 | apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H5 in H3; elim (lt_n_O _ H3) ] ].",
                        "VernacExtend",
                        "e5864f932d5ad8f6aea3f1996b4b642330775026"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P18",
            "line_nb": 223,
            "steps": [
                {
                    "command": [
                        "simple induction l; intros; [ reflexivity | simpl; rewrite H; reflexivity ].",
                        "VernacExtend",
                        "a5734714c9f2d4b804e3276aad7a05071fa3a17e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P19",
            "line_nb": 226,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl]; [ elim H; reflexivity | exists r; exists l; reflexivity ].",
                        "VernacExtend",
                        "3021a9dbf0ffc63feedeaf06b89321a62811072b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P20",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "intros; induction l as [| r l Hrecl]; [ simpl in H; elim (le_Sn_O _ H) | induction l as [| r0 l Hrecl0]; [ simpl in H; elim (le_Sn_O _ (le_S_n _ _ H)) | exists r; exists r0; exists l; reflexivity ] ].",
                        "VernacExtend",
                        "68aef456aa8291a41832d8bb277a19c555067947"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P21",
            "line_nb": 232,
            "steps": [
                {
                    "command": [
                        "intros; rewrite H; reflexivity.",
                        "VernacExtend",
                        "56d8ebe070934265219de9b6580d0d60c2fadceb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P22",
            "line_nb": 235,
            "steps": [
                {
                    "command": [
                        "simple induction l1; [ intros; elim H; reflexivity | intros; reflexivity ].",
                        "VernacExtend",
                        "7e44ff8839703c6ea9f716f59263d56537ccedff"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P23",
            "line_nb": 238,
            "steps": [
                {
                    "command": [
                        "simple induction l1; [ intro; reflexivity | intros; simpl; rewrite H; reflexivity ].",
                        "VernacExtend",
                        "2a3003e58c38dd19248976fa87ccfc35541240dc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P24",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "simple induction l1.",
                        "VernacExtend",
                        "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
                    ]
                },
                {
                    "command": [
                        "intros; reflexivity.",
                        "VernacExtend",
                        "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite <- (H l2 H0); induction l2 as [| r1 l2 Hrecl2].",
                        "VernacExtend",
                        "9fcceaa4b534d2fbd3d90f583907a517df7faff7"
                    ]
                },
                {
                    "command": [
                        "elim H0; reflexivity.",
                        "VernacExtend",
                        "4320c35310a38800a625b1a7c3e58940d517df16"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite RList_P23; replace (Rlength (cons r r0) + Rlength (cons r1 l2))%nat with (S (S (Rlength r0 + Rlength l2))); [ replace (Rlength r0 + Rlength (cons r1 l2))%nat with (S (Rlength r0 + Rlength l2)); [ reflexivity | simpl; apply INR_eq; rewrite S_INR; do 2 rewrite plus_INR; rewrite S_INR; ring ] | simpl; apply INR_eq; do 3 rewrite S_INR; do 2 rewrite plus_INR; rewrite S_INR; ring ].",
                        "VernacExtend",
                        "a1bfd6291a54e29bff7fe1b46451c02bbca3b96b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P25",
            "line_nb": 248,
            "steps": [
                {
                    "command": [
                        "simple induction l1.",
                        "VernacExtend",
                        "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
                    ]
                },
                {
                    "command": [
                        "intros; simpl; assumption.",
                        "VernacExtend",
                        "19c1b2168c6ec8c9b29fae509efc0d03bbb9b78b"
                    ]
                },
                {
                    "command": [
                        "simple induction r0.",
                        "VernacExtend",
                        "3cd54584b7d76a051ea25914c5484966487340a3"
                    ]
                },
                {
                    "command": [
                        "intros; simpl; simpl in H2; unfold ordered_Rlist; intros; simpl in H3.",
                        "VernacExtend",
                        "825e288dd47c6ef4a58487041e202dc5d41fb361"
                    ]
                },
                {
                    "command": [
                        "induction i as [| i Hreci].",
                        "VernacExtend",
                        "359a77e440c9883a74d09392e658fa188fb9d6cd"
                    ]
                },
                {
                    "command": [
                        "simpl; assumption.",
                        "VernacExtend",
                        "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
                    ]
                },
                {
                    "command": [
                        "change (pos_Rl l2 i <= pos_Rl l2 (S i)); apply (H1 i); apply lt_S_n; replace (S (pred (Rlength l2))) with (Rlength l2); [ assumption | apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H4 in H3; elim (lt_n_O _ H3) ].",
                        "VernacExtend",
                        "680c728618f3aaec70390b5188fbe4197d71fe12"
                    ]
                },
                {
                    "command": [
                        "intros; clear H; assert (H : ordered_Rlist (cons_Rlist (cons r1 r2) l2)).",
                        "VernacExtend",
                        "825abc8ad33b4c5da746d4993cd48c7e4125332d"
                    ]
                },
                {
                    "command": [
                        "apply H0; try assumption.",
                        "VernacExtend",
                        "4c171ecf9d763efd249ae534f812c9fa4c80471d"
                    ]
                },
                {
                    "command": [
                        "apply RList_P4 with r; assumption.",
                        "VernacExtend",
                        "ca77f3aeb32c827a13d2dfeb653f84e922693df3"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; intros; simpl in H4; induction i as [| i Hreci].",
                        "VernacExtend",
                        "9ef65361e2d586881235656ac9e13440b90ce6e9"
                    ]
                },
                {
                    "command": [
                        "simpl; apply (H1 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "8d192d833e23f6d511867feebd5777fb063f88b7"
                    ]
                },
                {
                    "command": [
                        "change (pos_Rl (cons_Rlist (cons r1 r2) l2) i <= pos_Rl (cons_Rlist (cons r1 r2) l2) (S i)); apply (H i); simpl; apply lt_S_n; assumption.",
                        "VernacExtend",
                        "10b7c30c6c96807c659e91ebca2e9302bae0d3de"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P26",
            "line_nb": 263,
            "steps": [
                {
                    "command": [
                        "simple induction l1.",
                        "VernacExtend",
                        "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
                    ]
                },
                {
                    "command": [
                        "intros; elim (lt_n_O _ H).",
                        "VernacExtend",
                        "ca3331c7467565b31e18009883bc46058b26bd27"
                    ]
                },
                {
                    "command": [
                        "intros; induction i as [| i Hreci].",
                        "VernacExtend",
                        "c9adc63016258b96a0e1d467a9bcaf9fe9e89584"
                    ]
                },
                {
                    "command": [
                        "apply RList_P22; discriminate.",
                        "VernacExtend",
                        "f082044c264d0f27058ee45c3a0e62b70fb86904"
                    ]
                },
                {
                    "command": [
                        "apply (H l2 i); simpl in H0; apply lt_S_n; assumption.",
                        "VernacExtend",
                        "85b49809fb1a2984d8af64249bb4871712a4c78e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P27",
            "line_nb": 270,
            "steps": [
                {
                    "command": [
                        "simple induction l1; intros; [ reflexivity | simpl; rewrite (H l2 l3); reflexivity ].",
                        "VernacExtend",
                        "757119819fc0a4b7db0021273ebaf2ffed086b68"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P28",
            "line_nb": 273,
            "steps": [
                {
                    "command": [
                        "simple induction l; [ reflexivity | intros; simpl; rewrite H; reflexivity ].",
                        "VernacExtend",
                        "de6f587c19b92291bda791568222a05f97881e52"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RList_P29",
            "line_nb": 276,
            "steps": [
                {
                    "command": [
                        "simple induction l2.",
                        "VernacExtend",
                        "918d3871e87d72cc43639ff2ff12e6969e3db8a6"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite RList_P28 in H0; elim (lt_irrefl _ (le_lt_trans _ _ _ H H0)).",
                        "VernacExtend",
                        "3ad22590b1bf6a8fd4bffad0562179f8ce8052d9"
                    ]
                },
                {
                    "command": [
                        "intros; replace (cons_Rlist l1 (cons r r0)) with (cons_Rlist (cons_Rlist l1 (cons r nil)) r0).",
                        "VernacExtend",
                        "155ab47e264fb736e35de8f38f052ddabc66ef22"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- minus_n_n; simpl; rewrite RList_P26.",
                        "VernacExtend",
                        "0597114e28134707927748ccb35521fffd0856c4"
                    ]
                },
                {
                    "command": [
                        "clear l2 r0 H i H0 H1 H2; induction l1 as [| r0 l1 Hrecl1].",
                        "VernacExtend",
                        "60a151c37a4c6bf8ac15c455ff8cdb05896cc308"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl; assumption.",
                        "VernacExtend",
                        "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P23; rewrite plus_comm; simpl; apply lt_n_Sn.",
                        "VernacExtend",
                        "d290bda1e54b3d17cc1a3e6b8c38ba2c920c2ddf"
                    ]
                },
                {
                    "command": [
                        "replace (S m - Rlength l1)%nat with (S (S m - S (Rlength l1))).",
                        "VernacExtend",
                        "f53c02f3c16c02c4c1767e25071c2e9072055742"
                    ]
                },
                {
                    "command": [
                        "rewrite H3; simpl; replace (S (Rlength l1)) with (Rlength (cons_Rlist l1 (cons r nil))).",
                        "VernacExtend",
                        "cdb34c541643a373ba5ea07041e8a7ab2ffeecf0"
                    ]
                },
                {
                    "command": [
                        "apply (H (cons_Rlist l1 (cons r nil)) i).",
                        "VernacExtend",
                        "bac82d351a6f9e2ac8af225ffd945c7af4dbb11a"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P23; rewrite plus_comm; simpl; rewrite <- H3; apply le_n_S; assumption.",
                        "VernacExtend",
                        "813f29dd4465ec54e9af4ce60cff6a247414db46"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite RList_P23; simpl; rewrite RList_P23 in H1; rewrite plus_comm in H1; simpl in H1; rewrite (plus_comm (Rlength l1)); simpl; rewrite plus_comm; apply H1.",
                        "VernacExtend",
                        "30d78b2d31d9d32ac8e75207f82cf4e01fb822c7"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P23; rewrite plus_comm; reflexivity.",
                        "VernacExtend",
                        "28bcad7900b7bcaec8de80d4c89c87cd17a595f1"
                    ]
                },
                {
                    "command": [
                        "change (S (m - Rlength l1) = (S m - Rlength l1)%nat); apply minus_Sn_m; assumption.",
                        "VernacExtend",
                        "24cde2fb581a726a97970801c3bc66569c6b6119"
                    ]
                },
                {
                    "command": [
                        "replace (cons r r0) with (cons_Rlist (cons r nil) r0); [ symmetry ; apply RList_P27 | reflexivity ].",
                        "VernacExtend",
                        "5a43fecaa9375ea819ebd7d47adc90909eb1b2cc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}