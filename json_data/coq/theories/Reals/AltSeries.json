{
    "filename": "theories/Reals/AltSeries.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Rseries.",
            "VernacRequire",
            "7a432dd14e4529f426efb08dc0832c62a8dcc16b"
        ],
        [
            "Require Import SeqProp.",
            "VernacRequire",
            "a37c3bf41f1f017811a12d99565cebd0c11a7976"
        ],
        [
            "Require Import PartSum.",
            "VernacRequire",
            "615de8ef0ed75bdb68bd5486514f11be1837ffd8"
        ],
        [
            "Require Import Max.",
            "VernacRequire",
            "163f8b04f9c5ff0ff8fe9ce4c762873ab613a3fa"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Definition tg_alt (Un:nat -> R) (i:nat) : R := (-1) ^ i * Un i.",
            "VernacDefinition",
            "1a744a555f2ed4c1f7e52749115741fd5573e783"
        ],
        [
            "Definition positivity_seq (Un:nat -> R) : Prop := forall n:nat, 0 <= Un n.",
            "VernacDefinition",
            "5b23b70dc21c828c1bec462e133237b15823cf7e"
        ],
        [
            "Lemma CV_ALT_step0 : forall Un:nat -> R, Un_decreasing Un -> Un_growing (fun N:nat => sum_f_R0 (tg_alt Un) (S (2 * N))).",
            "VernacStartTheoremProof",
            "8e93bb74e578f19effe4478afc76de3d4a513282"
        ],
        [
            "intros; unfold Un_growing; intro.",
            "VernacExtend",
            "1c653d0e544963e344f664d48593493fa4470fdf"
        ],
        [
            "cut ((2 * S n)%nat = S (S (2 * n))).",
            "VernacExtend",
            "69ba98aa9737cd969ec1c2ba2afa730f54f7e59f"
        ],
        [
            "intro; rewrite H0.",
            "VernacExtend",
            "a6296e9dcb50e482c09b272dff674125bf504295"
        ],
        [
            "do 4 rewrite tech5; repeat rewrite Rplus_assoc; apply Rplus_le_compat_l.",
            "VernacExtend",
            "dbc0aaf843ddd92d7df33cd99ef2b64eb9992f34"
        ],
        [
            "pattern (tg_alt Un (S (2 * n))) at 1; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "601d6bfd35834171631576cf53fa0786eb3b632f"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "unfold tg_alt; rewrite <- H0; rewrite pow_1_odd; rewrite pow_1_even; rewrite Rmult_1_l.",
            "VernacExtend",
            "1c45db82ac9d9063cd9453e32718996057b4358f"
        ],
        [
            "apply Rplus_le_reg_l with (Un (S (2 * S n))).",
            "VernacExtend",
            "c9c1e8fe96b7061e4a8f930366510cd3b0ca085c"
        ],
        [
            "rewrite Rplus_0_r; replace (Un (S (2 * S n)) + (Un (2 * S n)%nat + -1 * Un (S (2 * S n)))) with (Un (2 * S n)%nat); [ idtac | ring ].",
            "VernacExtend",
            "8f44ef919817cc6686162d1c0ef045f996c9d1ca"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "cut (forall n:nat, S n = (n + 1)%nat); [ intro | intro; ring ].",
            "VernacExtend",
            "97b16c8aaa23d0492428e048b48e6fa8aa848c01"
        ],
        [
            "rewrite (H0 n); rewrite (H0 (S (2 * n))); rewrite (H0 (2 * n)%nat); ring.",
            "VernacExtend",
            "e8fc0b52c8254a99de032ffd8a69a0336235411d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_ALT_step1 : forall Un:nat -> R, Un_decreasing Un -> Un_decreasing (fun N:nat => sum_f_R0 (tg_alt Un) (2 * N)).",
            "VernacStartTheoremProof",
            "b23d8064e792f0c2712478b8cef69926bb4285b1"
        ],
        [
            "intros; unfold Un_decreasing; intro.",
            "VernacExtend",
            "4a3002a3ba640f32bd331e27c273f69b0159d680"
        ],
        [
            "cut ((2 * S n)%nat = S (S (2 * n))).",
            "VernacExtend",
            "69ba98aa9737cd969ec1c2ba2afa730f54f7e59f"
        ],
        [
            "intro; rewrite H0; do 2 rewrite tech5; repeat rewrite Rplus_assoc.",
            "VernacExtend",
            "b41a9202a9a5e7154990d1b80a2cdc227e1ab301"
        ],
        [
            "pattern (sum_f_R0 (tg_alt Un) (2 * n)) at 2; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "bf67c217168cf401a3cb7757fa680c95bacbc253"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "unfold tg_alt; rewrite <- H0; rewrite pow_1_odd; rewrite pow_1_even; rewrite Rmult_1_l.",
            "VernacExtend",
            "1c45db82ac9d9063cd9453e32718996057b4358f"
        ],
        [
            "apply Rplus_le_reg_l with (Un (S (2 * n))).",
            "VernacExtend",
            "093da2450d4b88e7fa74db38c9d388d8b93372fb"
        ],
        [
            "rewrite Rplus_0_r; replace (Un (S (2 * n)) + (-1 * Un (S (2 * n)) + Un (2 * S n)%nat)) with (Un (2 * S n)%nat); [ idtac | ring ].",
            "VernacExtend",
            "e4d5ba81bcc7ddc2ca1a9f4564e035c94201884b"
        ],
        [
            "rewrite H0; apply H.",
            "VernacExtend",
            "3ca9f81601d672f1a9f7097b9cd73c52632da972"
        ],
        [
            "cut (forall n:nat, S n = (n + 1)%nat); [ intro | intro; ring ].",
            "VernacExtend",
            "97b16c8aaa23d0492428e048b48e6fa8aa848c01"
        ],
        [
            "rewrite (H0 n); rewrite (H0 (S (2 * n))); rewrite (H0 (2 * n)%nat); ring.",
            "VernacExtend",
            "e8fc0b52c8254a99de032ffd8a69a0336235411d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_ALT_step2 : forall (Un:nat -> R) (N:nat), Un_decreasing Un -> positivity_seq Un -> sum_f_R0 (fun i:nat => tg_alt Un (S i)) (S (2 * N)) <= 0.",
            "VernacStartTheoremProof",
            "59deb42acd23ef2b6c010ae1b63dff1ea706e0f3"
        ],
        [
            "intros; induction N as [| N HrecN].",
            "VernacExtend",
            "176c4a7e299087f2a01baed2bde05aa27663e10d"
        ],
        [
            "simpl; unfold tg_alt; simpl; rewrite Rmult_1_r.",
            "VernacExtend",
            "c0f47c8a4d9430e1d6df77431270e07d37f71e04"
        ],
        [
            "replace (-1 * -1 * Un 2%nat) with (Un 2%nat); [ idtac | ring ].",
            "VernacExtend",
            "ef6110df1af4bc0e4fea00d2afa1f7d92dc20a48"
        ],
        [
            "apply Rplus_le_reg_l with (Un 1%nat); rewrite Rplus_0_r.",
            "VernacExtend",
            "17f385d2ea0c6e665e82837b74c6c748417be752"
        ],
        [
            "replace (Un 1%nat + (-1 * Un 1%nat + Un 2%nat)) with (Un 2%nat); [ apply H | ring ].",
            "VernacExtend",
            "eb8d7851e26a52e68deda2d98d389184289354bb"
        ],
        [
            "cut (S (2 * S N) = S (S (S (2 * N)))).",
            "VernacExtend",
            "c438ca07d83941943b2e1738cdf4fc7c062ad61f"
        ],
        [
            "intro; rewrite H1; do 2 rewrite tech5.",
            "VernacExtend",
            "204fbcd61b62b4ea1f7f133d38b9a09168a584ee"
        ],
        [
            "apply Rle_trans with (sum_f_R0 (fun i:nat => tg_alt Un (S i)) (S (2 * N))).",
            "VernacExtend",
            "13d9ac6e251f5dc6b8f922523096689ba21d1df5"
        ],
        [
            "pattern (sum_f_R0 (fun i:nat => tg_alt Un (S i)) (S (2 * N))) at 2; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "09007cf29c46bf19616735eab391f35a49502b9e"
        ],
        [
            "rewrite Rplus_assoc; apply Rplus_le_compat_l.",
            "VernacExtend",
            "acf8e5b51c9d2f8867cbf11b3788dea7e7c86e41"
        ],
        [
            "unfold tg_alt; rewrite <- H1.",
            "VernacExtend",
            "f19d89606485a706d30fd02d7e1d68eb69de4a59"
        ],
        [
            "rewrite pow_1_odd.",
            "VernacExtend",
            "791610523f2432cad06f99dc17a759f51a65c17e"
        ],
        [
            "cut (S (S (2 * S N)) = (2 * S (S N))%nat).",
            "VernacExtend",
            "3790c51068abea490a4271b3bdf43d9461083faa"
        ],
        [
            "intro; rewrite H2; rewrite pow_1_even; rewrite Rmult_1_l; rewrite <- H2.",
            "VernacExtend",
            "7285f5d3d53fca0c09fb9da3f9e283faf752ca13"
        ],
        [
            "apply Rplus_le_reg_l with (Un (S (2 * S N))).",
            "VernacExtend",
            "6ce5baf7f7e451027801ca9c1548a62d11a4e389"
        ],
        [
            "rewrite Rplus_0_r; replace (Un (S (2 * S N)) + (-1 * Un (S (2 * S N)) + Un (S (S (2 * S N))))) with (Un (S (S (2 * S N)))); [ idtac | ring ].",
            "VernacExtend",
            "b63da30364f0ab4f83d79d1c197e056a2b54eb1d"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply HrecN.",
            "VernacExtend",
            "ec9b348a0961f8ea4434987bb268364b3d8f639c"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_ALT_step3 : forall (Un:nat -> R) (N:nat), Un_decreasing Un -> positivity_seq Un -> sum_f_R0 (fun i:nat => tg_alt Un (S i)) N <= 0.",
            "VernacStartTheoremProof",
            "6f15ae6edc7d00491bd4b67efcda34b8f1af5c34"
        ],
        [
            "intros; induction N as [| N HrecN].",
            "VernacExtend",
            "176c4a7e299087f2a01baed2bde05aa27663e10d"
        ],
        [
            "simpl; unfold tg_alt; simpl; rewrite Rmult_1_r.",
            "VernacExtend",
            "c0f47c8a4d9430e1d6df77431270e07d37f71e04"
        ],
        [
            "apply Rplus_le_reg_l with (Un 1%nat).",
            "VernacExtend",
            "1a20a9f38ba20a00c285e06c9a1266d883ca6158"
        ],
        [
            "rewrite Rplus_0_r; replace (Un 1%nat + -1 * Un 1%nat) with 0; [ apply H0 | ring ].",
            "VernacExtend",
            "da4dac87f7565ccae58e529ca9082b10d24c23ec"
        ],
        [
            "assert (H1 := even_odd_cor N).",
            "VernacExtend",
            "1d6e666cb91abf2a1b3ed68c0632c25371f88736"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "elim H2; intro.",
            "VernacExtend",
            "939c927788b9492b13127156d1f300437fdf7754"
        ],
        [
            "rewrite H3; apply CV_ALT_step2; assumption.",
            "VernacExtend",
            "343ab7d701375a0077bd4e448f9a4f99ad2f03aa"
        ],
        [
            "rewrite H3; rewrite tech5.",
            "VernacExtend",
            "90e49d3985c81447ba47b86eeab8e22606a57012"
        ],
        [
            "apply Rle_trans with (sum_f_R0 (fun i:nat => tg_alt Un (S i)) (S (2 * x))).",
            "VernacExtend",
            "966a27bb40017f38a01c935b1f9eb47670925116"
        ],
        [
            "pattern (sum_f_R0 (fun i:nat => tg_alt Un (S i)) (S (2 * x))) at 2; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "f639ef1afcf77109a5d9b7a4380d90b4044e0c35"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "unfold tg_alt; simpl.",
            "VernacExtend",
            "2d4321e628db948a125bac22d53b447804883b76"
        ],
        [
            "replace (x + (x + 0))%nat with (2 * x)%nat; [ idtac | ring ].",
            "VernacExtend",
            "f31596bb78014ae6d3a24f76fb58ff7374586fd4"
        ],
        [
            "rewrite pow_1_even.",
            "VernacExtend",
            "3e89e4f460e9dff6ff15e1568d18d0db8610286f"
        ],
        [
            "replace (-1 * (-1 * (-1 * 1)) * Un (S (S (S (2 * x))))) with (- Un (S (S (S (2 * x))))); [ idtac | ring ].",
            "VernacExtend",
            "3f18c1cccf171044eef4ee4c62770cd88ca29255"
        ],
        [
            "apply Rplus_le_reg_l with (Un (S (S (S (2 * x))))).",
            "VernacExtend",
            "174b05c1856a047ae645c81349571cb9a3558449"
        ],
        [
            "rewrite Rplus_0_r; rewrite Rplus_opp_r.",
            "VernacExtend",
            "2093fe2f86304229ff9eaef1b7224b390ee645d6"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply CV_ALT_step2; assumption.",
            "VernacExtend",
            "9627205617e9c14df9e923cd32702806296db48c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_ALT_step4 : forall Un:nat -> R, Un_decreasing Un -> positivity_seq Un -> has_ub (fun N:nat => sum_f_R0 (tg_alt Un) (S (2 * N))).",
            "VernacStartTheoremProof",
            "6ddaafdf9ea35de2366b77da9c97435b51c5f1c7"
        ],
        [
            "intros; unfold has_ub; unfold bound.",
            "VernacExtend",
            "4be88999483c626876e364bc62ac34b94d4017a0"
        ],
        [
            "exists (Un 0%nat).",
            "VernacExtend",
            "23dc8b060fa42f8475c8a6fca6767103b2f4581f"
        ],
        [
            "unfold is_upper_bound; intros; elim H1; intros.",
            "VernacExtend",
            "f3a213d26886e9b13db492c03aeff549b593de28"
        ],
        [
            "rewrite H2; rewrite decomp_sum.",
            "VernacExtend",
            "a2e5377cf59d577d8b48c23e5a21686a4659b99b"
        ],
        [
            "replace (tg_alt Un 0) with (Un 0%nat).",
            "VernacExtend",
            "b089d074a1b779431fff880d0a1c08106e801c49"
        ],
        [
            "pattern (Un 0%nat) at 2; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "8f1b799edb2e7aa081a045d563036891f801ecf2"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "apply CV_ALT_step3; assumption.",
            "VernacExtend",
            "860e8db9f492d3eb9f279a541cc2adb5fabd6518"
        ],
        [
            "unfold tg_alt; simpl; ring.",
            "VernacExtend",
            "b3635ce02f1e058b307a6a1c9957e7ccf71bb8eb"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_ALT : forall Un:nat -> R, Un_decreasing Un -> positivity_seq Un -> Un_cv Un 0 -> { l:R | Un_cv (fun N:nat => sum_f_R0 (tg_alt Un) N) l }.",
            "VernacStartTheoremProof",
            "1efdb238a96377c7194b834958392c0be851ab4a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H2 := CV_ALT_step0 _ H).",
            "VernacExtend",
            "b6d7fd2f49431c62991170415bc7e3f70c5eb42a"
        ],
        [
            "assert (H3 := CV_ALT_step4 _ H H0).",
            "VernacExtend",
            "9611018bfb6c36ff78a71f2657a1058820028f23"
        ],
        [
            "destruct (growing_cv _ H2 H3) as (x,p).",
            "VernacExtend",
            "298b46d237689b328eb53f0627f0e04fd19ff470"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "unfold Un_cv; unfold R_dist; unfold Un_cv in H1; unfold R_dist in H1; unfold Un_cv in p; unfold R_dist in p.",
            "VernacExtend",
            "a0068e4d410235ef1bc3b1efd66f4172a5a6af24"
        ],
        [
            "intros; cut (0 < eps / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
            "VernacExtend",
            "fbe90d51ce8a5e2852a2bf79a3cc31e104df7d06"
        ],
        [
            "elim (H1 (eps / 2) H5); intros N2 H6.",
            "VernacExtend",
            "a6e0c761e70bc32ea74e20ea7b4a400440f85017"
        ],
        [
            "elim (p (eps / 2) H5); intros N1 H7.",
            "VernacExtend",
            "11869870156de0ac97a9eb078ab5e61d33bb2a40"
        ],
        [
            "set (N := max (S (2 * N1)) N2).",
            "VernacExtend",
            "4abaefabc611ed11d112431082c9be794602f7e8"
        ],
        [
            "exists N; intros.",
            "VernacExtend",
            "cfd63f1f7fafabc1d063c17632530a627ae99922"
        ],
        [
            "assert (H9 := even_odd_cor n).",
            "VernacExtend",
            "aced3f30f301c388fa41680008b782f808879e54"
        ],
        [
            "elim H9; intros P H10.",
            "VernacExtend",
            "a9cf9b38e02a14b7b30260572b85063f0129e71d"
        ],
        [
            "cut (N1 <= P)%nat.",
            "VernacExtend",
            "c615b535dd761cd6e252a65ad74b6d186836fb1b"
        ],
        [
            "intro; elim H10; intro.",
            "VernacExtend",
            "c83f88ebbde8005e347c650e333f741c81745b3d"
        ],
        [
            "replace (sum_f_R0 (tg_alt Un) n - x) with (sum_f_R0 (tg_alt Un) (S n) - x + - tg_alt Un (S n)).",
            "VernacExtend",
            "2dd1d83ec178d809db6316459b5a7a11b8b718d7"
        ],
        [
            "apply Rle_lt_trans with (Rabs (sum_f_R0 (tg_alt Un) (S n) - x) + Rabs (- tg_alt Un (S n))).",
            "VernacExtend",
            "e05592f3a2b77c8f8b99a22d2c326829cd52150b"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "rewrite (double_var eps); apply Rplus_lt_compat.",
            "VernacExtend",
            "dd3002897582f3251627e3b8fbd0c2a8c471071b"
        ],
        [
            "rewrite H12; apply H7; assumption.",
            "VernacExtend",
            "be97297026980ca475a2854e93dd117c23a62246"
        ],
        [
            "rewrite Rabs_Ropp; unfold tg_alt; rewrite Rabs_mult; rewrite pow_1_abs; rewrite Rmult_1_l; unfold Rminus in H6; rewrite Ropp_0 in H6; rewrite <- (Rplus_0_r (Un (S n))); apply H6.",
            "VernacExtend",
            "cf77f4e3044648dcf7bdd14ebe2c843060682fe6"
        ],
        [
            "unfold ge; apply le_trans with n.",
            "VernacExtend",
            "bf970b3455c6e9c3bf954a54ca27cb9a0fade2ea"
        ],
        [
            "apply le_trans with N; [ unfold N; apply le_max_r | assumption ].",
            "VernacExtend",
            "e4d31eff3b68c68d5b2e6ba96aa29724e436b83e"
        ],
        [
            "apply le_n_Sn.",
            "VernacExtend",
            "7889648199cacb866ef42ba6b4c4192f713b44f4"
        ],
        [
            "rewrite tech5; ring.",
            "VernacExtend",
            "8d1f57dbe6e72ce876934dd6be9c3c014b3474d3"
        ],
        [
            "rewrite H12; apply Rlt_trans with (eps / 2).",
            "VernacExtend",
            "a6d56061aad23d69648efd6d91fb08574ec42bba"
        ],
        [
            "apply H7; assumption.",
            "VernacExtend",
            "5fe9a2981bc9efdad06860c6328e07e091570990"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "f4c0b06c2efd971a65fcd955cb283b1e333171b1"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "rewrite (Rmult_comm 2); rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ rewrite Rmult_1_r | discrR ].",
            "VernacExtend",
            "c78dbbfc0b8bf16e9d957a045d03ef76351f7617"
        ],
        [
            "rewrite double.",
            "VernacExtend",
            "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
        ],
        [
            "pattern eps at 1; rewrite <- (Rplus_0_r eps); apply Rplus_lt_compat_l; assumption.",
            "VernacExtend",
            "d26931261c17b9952f85ba5919c55e5557a02494"
        ],
        [
            "elim H10; intro; apply le_double.",
            "VernacExtend",
            "5318198c162fd2e121282784c9f19d8eab42d58e"
        ],
        [
            "rewrite <- H11; apply le_trans with N.",
            "VernacExtend",
            "f9f063145f6f5604c0fca8b691b168aab0f0782d"
        ],
        [
            "unfold N; apply le_trans with (S (2 * N1)); [ apply le_n_Sn | apply le_max_l ].",
            "VernacExtend",
            "548a874ea0a2d89e89dcc204e83d3d7c2224f1f0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply lt_n_Sm_le.",
            "VernacExtend",
            "354c1d072708776c26f2aab2afa0945822d0815b"
        ],
        [
            "rewrite <- H11.",
            "VernacExtend",
            "ec42fac36aacb0899bfc448afc7aa33e19c94748"
        ],
        [
            "apply lt_le_trans with N.",
            "VernacExtend",
            "11db6cb03818284d6eb0980129eac80f3ad7a41b"
        ],
        [
            "unfold N; apply lt_le_trans with (S (2 * N1)).",
            "VernacExtend",
            "726cb93433cdf155e04e0ff65079a4a681387995"
        ],
        [
            "apply lt_n_Sn.",
            "VernacExtend",
            "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
        ],
        [
            "apply le_max_l.",
            "VernacExtend",
            "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem alternated_series : forall Un:nat -> R, Un_decreasing Un -> Un_cv Un 0 -> { l:R | Un_cv (fun N:nat => sum_f_R0 (tg_alt Un) N) l }.",
            "VernacStartTheoremProof",
            "4aad53330dffa8ff776e3f9ca3a1eab8467cfa3c"
        ],
        [
            "intros; apply CV_ALT.",
            "VernacExtend",
            "406ba1282fc0f542d4b77a3a6e57f74dbc334caf"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold positivity_seq; apply decreasing_ineq; assumption.",
            "VernacExtend",
            "1d932937c1327f294b1077f72b26d90999814dfa"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem alternated_series_ineq : forall (Un:nat -> R) (l:R) (N:nat), Un_decreasing Un -> Un_cv Un 0 -> Un_cv (fun N:nat => sum_f_R0 (tg_alt Un) N) l -> sum_f_R0 (tg_alt Un) (S (2 * N)) <= l <= sum_f_R0 (tg_alt Un) (2 * N).",
            "VernacStartTheoremProof",
            "1bd0167961a4721977d4079b4497a3e71f828d24"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (Un_cv (fun N:nat => sum_f_R0 (tg_alt Un) (2 * N)) l).",
            "VernacExtend",
            "08b1fdd38c0ce0a36566a661bbf86b8acf358814"
        ],
        [
            "cut (Un_cv (fun N:nat => sum_f_R0 (tg_alt Un) (S (2 * N))) l).",
            "VernacExtend",
            "4b763a1b58c4f4b2a6d4fe4c27f2831eff6e0771"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "apply (growing_ineq (fun N:nat => sum_f_R0 (tg_alt Un) (S (2 * N)))).",
            "VernacExtend",
            "be5c8bebf8c753b89063b2686101d430aba405d6"
        ],
        [
            "apply CV_ALT_step0; assumption.",
            "VernacExtend",
            "88b35ebfc04aedfe519d7fa2d1e0165298d07850"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply (decreasing_ineq (fun N:nat => sum_f_R0 (tg_alt Un) (2 * N))).",
            "VernacExtend",
            "88a65f6d6efbe8242a81e2168afe87d499d07cd1"
        ],
        [
            "apply CV_ALT_step1; assumption.",
            "VernacExtend",
            "dd6212b9e2ff3f61afa7af3f31ef7a9d25e8d7ed"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Un_cv; unfold R_dist; unfold Un_cv in H1; unfold R_dist in H1; intros.",
            "VernacExtend",
            "ac7583112c1f0f239b78a4ce64a2fc33a512d51f"
        ],
        [
            "elim (H1 eps H2); intros.",
            "VernacExtend",
            "26b04261dd7fa4897011895680592c70e0eb63e3"
        ],
        [
            "exists x; intros.",
            "VernacExtend",
            "630f24a2d635df94b063a62023a90567ef134b19"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "unfold ge; apply le_trans with (2 * n)%nat.",
            "VernacExtend",
            "10fee6f224f4bb2deeb1833202bcab08c1ffa2a1"
        ],
        [
            "apply le_trans with n.",
            "VernacExtend",
            "9597fcc7c1dd0db73cfc9758e0185a6c74ba3e8b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H5 := mult_O_le n 2).",
            "VernacExtend",
            "284b568f36830d33228b721e10e4cf92250f9bcb"
        ],
        [
            "elim H5; intro.",
            "VernacExtend",
            "29923dfc32add298aa4e01bbfee147f65e05faf2"
        ],
        [
            "cut (0%nat <> 2%nat); [ intro; elim H7; symmetry ; assumption | discriminate ].",
            "VernacExtend",
            "cfbcc4cb921637587ac5c28aaab71a2c138274e1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply le_n_Sn.",
            "VernacExtend",
            "7889648199cacb866ef42ba6b4c4192f713b44f4"
        ],
        [
            "unfold Un_cv; unfold R_dist; unfold Un_cv in H1; unfold R_dist in H1; intros.",
            "VernacExtend",
            "ac7583112c1f0f239b78a4ce64a2fc33a512d51f"
        ],
        [
            "elim (H1 eps H2); intros.",
            "VernacExtend",
            "26b04261dd7fa4897011895680592c70e0eb63e3"
        ],
        [
            "exists x; intros.",
            "VernacExtend",
            "630f24a2d635df94b063a62023a90567ef134b19"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "unfold ge; apply le_trans with n.",
            "VernacExtend",
            "bf970b3455c6e9c3bf954a54ca27cb9a0fade2ea"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H5 := mult_O_le n 2).",
            "VernacExtend",
            "284b568f36830d33228b721e10e4cf92250f9bcb"
        ],
        [
            "elim H5; intro.",
            "VernacExtend",
            "29923dfc32add298aa4e01bbfee147f65e05faf2"
        ],
        [
            "cut (0%nat <> 2%nat); [ intro; elim H7; symmetry ; assumption | discriminate ].",
            "VernacExtend",
            "cfbcc4cb921637587ac5c28aaab71a2c138274e1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition PI_tg (n:nat) := / INR (2 * n + 1).",
            "VernacDefinition",
            "de5fa5764bc6865ee454be259fc6f5d11489f956"
        ],
        [
            "Lemma PI_tg_pos : forall n:nat, 0 <= PI_tg n.",
            "VernacStartTheoremProof",
            "c963a42b8a0b43f2a431529319f83a1f316f2f7a"
        ],
        [
            "intro; unfold PI_tg; left; apply Rinv_0_lt_compat; apply lt_INR_0; replace (2 * n + 1)%nat with (S (2 * n)); [ apply lt_O_Sn | ring ].",
            "VernacExtend",
            "a8069bb8a4458fb99f063c59b06cd27c8f8d644a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PI_tg_decreasing : Un_decreasing PI_tg.",
            "VernacStartTheoremProof",
            "6fb521edc8669ed92112b21851fb51738cb097d5"
        ],
        [
            "unfold PI_tg, Un_decreasing; intro.",
            "VernacExtend",
            "00c7706ac2d49a0713a650df3312513fc707d39b"
        ],
        [
            "apply Rmult_le_reg_l with (INR (2 * n + 1)).",
            "VernacExtend",
            "6e89d3c1b4e04c3cbb4892d14bd34d7769d6b749"
        ],
        [
            "apply lt_INR_0.",
            "VernacExtend",
            "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
        ],
        [
            "replace (2 * n + 1)%nat with (S (2 * n)); [ apply lt_O_Sn | ring ].",
            "VernacExtend",
            "b367689d116ed1bc2d0cb723b894c97f048e4c86"
        ],
        [
            "rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "2ca74255a63c294f9442d956f32a2e3784636efb"
        ],
        [
            "apply Rmult_le_reg_l with (INR (2 * S n + 1)).",
            "VernacExtend",
            "0aba92f09ccffd014f0f937b19559b21ab578d8f"
        ],
        [
            "apply lt_INR_0.",
            "VernacExtend",
            "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
        ],
        [
            "replace (2 * S n + 1)%nat with (S (2 * S n)); [ apply lt_O_Sn | ring ].",
            "VernacExtend",
            "8f60194b38d3111c88075d7823ebb0ff1728b7a5"
        ],
        [
            "rewrite (Rmult_comm (INR (2 * S n + 1))); rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "4531c3b517d72d17442713ca76b8d396a6813adf"
        ],
        [
            "do 2 rewrite Rmult_1_r; apply le_INR.",
            "VernacExtend",
            "52247ef7b29c51a2ca393991e62bb68e751b22ab"
        ],
        [
            "replace (2 * S n + 1)%nat with (S (S (2 * n + 1))).",
            "VernacExtend",
            "271e1c66aec447aabbbe256367fb8c3180164cb0"
        ],
        [
            "apply le_trans with (S (2 * n + 1)); apply le_n_Sn.",
            "VernacExtend",
            "810e2a45e7736e9f6392e2c1cfee883986dfec93"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply not_O_INR; discriminate.",
            "VernacExtend",
            "b0377726251b564451c17d0f089ec6fd746a82be"
        ],
        [
            "apply not_O_INR; replace (2 * n + 1)%nat with (S (2 * n)); [ discriminate | ring ].",
            "VernacExtend",
            "8b9b1ba021d736fc12b6ac8ef8d676b94538f653"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PI_tg_cv : Un_cv PI_tg 0.",
            "VernacStartTheoremProof",
            "f6e36ba0cc0a459915edc62bce85e7c609c5c050"
        ],
        [
            "unfold Un_cv; unfold R_dist; intros.",
            "VernacExtend",
            "add26482ec443227632a57519752bde439308595"
        ],
        [
            "cut (0 < 2 * eps); [ intro | apply Rmult_lt_0_compat; [ prove_sup0 | assumption ] ].",
            "VernacExtend",
            "787e270630fc76aaa728292a4cc91637ab748365"
        ],
        [
            "assert (H1 := archimed (/ (2 * eps))).",
            "VernacExtend",
            "92e04e9f9e67db11ec1597a8868e02246379ce79"
        ],
        [
            "cut (0 <= up (/ (2 * eps)))%Z.",
            "VernacExtend",
            "1140aa26f92b1d1b7b150204124f13fb1c3d8257"
        ],
        [
            "intro; assert (H3 := IZN (up (/ (2 * eps))) H2).",
            "VernacExtend",
            "f19d23832e57260a74b7304fe84f6ef1487ac119"
        ],
        [
            "elim H3; intros N H4.",
            "VernacExtend",
            "b305ea921e2ee3820303d4ae94e863eef8f44cd4"
        ],
        [
            "cut (0 < N)%nat.",
            "VernacExtend",
            "c440c3a8c4d1d5b91226600157b0e92fda64c454"
        ],
        [
            "intro; exists N; intros.",
            "VernacExtend",
            "ad66d194bafce8c8516e0e6241c895bce03444fd"
        ],
        [
            "cut (0 < n)%nat.",
            "VernacExtend",
            "cb2e1862e4d6bff72495cb9737a538f0bea720eb"
        ],
        [
            "intro; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; rewrite Rabs_right.",
            "VernacExtend",
            "04e520c486554273584e94920de03716b9201160"
        ],
        [
            "unfold PI_tg; apply Rlt_trans with (/ INR (2 * n)).",
            "VernacExtend",
            "f5d20970db26f5dc0d51642b670e523aa5c62625"
        ],
        [
            "apply Rmult_lt_reg_l with (INR (2 * n)).",
            "VernacExtend",
            "b7b6bfcc34f5f5066d09b66d5a55fc9cf0d25199"
        ],
        [
            "apply lt_INR_0.",
            "VernacExtend",
            "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
        ],
        [
            "replace (2 * n)%nat with (n + n)%nat; [ idtac | ring ].",
            "VernacExtend",
            "5d8b106642c394a46f5cff1303addf59347e6f8a"
        ],
        [
            "apply lt_le_trans with n.",
            "VernacExtend",
            "cfbf944838de4f2e7f431e1ad105b7f33a7df954"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply le_plus_l.",
            "VernacExtend",
            "30f3305f62c97c24af24578d88eaa888a0053ec1"
        ],
        [
            "rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "2ca74255a63c294f9442d956f32a2e3784636efb"
        ],
        [
            "apply Rmult_lt_reg_l with (INR (2 * n + 1)).",
            "VernacExtend",
            "6ed7d0e634b5530eb4e3e59427642d85dcdcc485"
        ],
        [
            "apply lt_INR_0.",
            "VernacExtend",
            "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
        ],
        [
            "replace (2 * n + 1)%nat with (S (2 * n)); [ apply lt_O_Sn | ring ].",
            "VernacExtend",
            "b367689d116ed1bc2d0cb723b894c97f048e4c86"
        ],
        [
            "rewrite (Rmult_comm (INR (2 * n + 1))).",
            "VernacExtend",
            "18b0e13bc34b08d36d68659448ae80fc351dc728"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "7f630b736ed225dea43b09c6ef0119a691020de4"
        ],
        [
            "do 2 rewrite Rmult_1_r; apply lt_INR.",
            "VernacExtend",
            "2825d36a56b44336ded44621378f0acf218ff2d0"
        ],
        [
            "replace (2 * n + 1)%nat with (S (2 * n)); [ apply lt_n_Sn | ring ].",
            "VernacExtend",
            "fe0d0493cdb65eea6b25114753520d779c81d46a"
        ],
        [
            "apply not_O_INR; replace (2 * n + 1)%nat with (S (2 * n)); [ discriminate | ring ].",
            "VernacExtend",
            "8b9b1ba021d736fc12b6ac8ef8d676b94538f653"
        ],
        [
            "replace n with (S (pred n)).",
            "VernacExtend",
            "f5a0bbc5a2e7e62647818b080b0dc7894bc6145c"
        ],
        [
            "apply not_O_INR; discriminate.",
            "VernacExtend",
            "b0377726251b564451c17d0f089ec6fd746a82be"
        ],
        [
            "symmetry ; apply S_pred with 0%nat.",
            "VernacExtend",
            "f315678d7d061e79f2a4f1f8c6e10d010a3c2577"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_lt_trans with (/ INR (2 * N)).",
            "VernacExtend",
            "05f6c78dceef907380b057bbc5da0d5928fd8b16"
        ],
        [
            "apply Rinv_le_contravar.",
            "VernacExtend",
            "28ea2dd655f9d8c890013606f785cc34c54c4a71"
        ],
        [
            "rewrite mult_INR; apply Rmult_lt_0_compat; [ simpl; prove_sup0 | apply lt_INR_0; assumption ].",
            "VernacExtend",
            "0b8d88081ef28ef360565940541cf227864be271"
        ],
        [
            "apply le_INR.",
            "VernacExtend",
            "482ba85c33b4f446aa5e9ca8bca5b198f5d8a8c5"
        ],
        [
            "now apply mult_le_compat_l.",
            "VernacExtend",
            "c75ad026eaa5bae1e60560b3a2b0efb6e6b5889a"
        ],
        [
            "rewrite mult_INR.",
            "VernacExtend",
            "37e645386446b650721bdbf87c469ec7ef739f19"
        ],
        [
            "apply Rmult_lt_reg_l with (INR N / eps).",
            "VernacExtend",
            "7d59c5769c833a3379adb9a77b13495bda8a70c1"
        ],
        [
            "apply Rdiv_lt_0_compat with (2 := H).",
            "VernacExtend",
            "1f691dad8828faa83f6767f4a41011149e128764"
        ],
        [
            "now apply (lt_INR 0).",
            "VernacExtend",
            "7623af286128bc83ef96fa29afc58fdc2b71adb6"
        ],
        [
            "replace (_ */ _) with (/(2 * eps)).",
            "VernacExtend",
            "3c91e7a697fa7b2f422a2336382023dabd599ede"
        ],
        [
            "replace (_ / _ * _) with (INR N).",
            "VernacExtend",
            "5197c8263fddd41b50344112f121b297db2c6744"
        ],
        [
            "rewrite INR_IZR_INZ.",
            "VernacExtend",
            "8058c7a6913f85d26af3a54acc61c387d0a04933"
        ],
        [
            "now rewrite <- H4.",
            "VernacExtend",
            "a9a5b610a701070698d8715ab5ca0107ce38ff98"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "simpl (INR 2); field; split.",
            "VernacExtend",
            "7bf98e14c35d683649f2253190d381df6ec55589"
        ],
        [
            "now apply Rgt_not_eq, (lt_INR 0).",
            "VernacExtend",
            "91d130c6e382c3bcb70165f39aed41e6f2a29a5f"
        ],
        [
            "now apply Rgt_not_eq.",
            "VernacExtend",
            "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
        ],
        [
            "apply Rle_ge; apply PI_tg_pos.",
            "VernacExtend",
            "440de71b523dfe69bca847a8dc2b575dbbf64968"
        ],
        [
            "apply lt_le_trans with N; assumption.",
            "VernacExtend",
            "6c6f0b498017c41c6b0397c5aaa31ad4490aadbc"
        ],
        [
            "elim H1; intros H5 _.",
            "VernacExtend",
            "97beeef2a16f53ff8b1df18918cfeda09fbb3f92"
        ],
        [
            "destruct (lt_eq_lt_dec 0 N) as [[| <- ]|H6].",
            "VernacExtend",
            "37e4ec1f322fdb2029c32b376ca58e439f9518d9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H4 in H5.",
            "VernacExtend",
            "dc90760fc98a31cbb8924c663e46ebf35a6792db"
        ],
        [
            "simpl in H5.",
            "VernacExtend",
            "03fbfc7bb6b248b41f6241227db3e5c410547157"
        ],
        [
            "cut (0 < / (2 * eps)); [ intro | apply Rinv_0_lt_compat; assumption ].",
            "VernacExtend",
            "daf4854934d28c8c44439b36a7935bcc66349d92"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_trans _ _ _ H6 H5)).",
            "VernacExtend",
            "b1d6c56d07a9135b74f4140b5156e5c2fe62749d"
        ],
        [
            "elim (lt_n_O _ H6).",
            "VernacExtend",
            "76f20476cc950b09cee001460db34758c2a8aa51"
        ],
        [
            "apply le_IZR.",
            "VernacExtend",
            "b9b46c6b2f4d4157bed90857db2b9c3ba33486ad"
        ],
        [
            "left; apply Rlt_trans with (/ (2 * eps)).",
            "VernacExtend",
            "235a3e1be9b29d194133190d92d60dd9c739ccdf"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "elim H1; intros; assumption.",
            "VernacExtend",
            "cc00e4116d0aefea281577ea01f1c22b86beb4e0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exist_PI : { l:R | Un_cv (fun N:nat => sum_f_R0 (tg_alt PI_tg) N) l }.",
            "VernacStartTheoremProof",
            "7f89d533b9c76604be1ccfdf01099d96da8d110c"
        ],
        [
            "apply alternated_series.",
            "VernacExtend",
            "88734ba7403d2940e3c4c4140d690b2e5ffc0e8d"
        ],
        [
            "apply PI_tg_decreasing.",
            "VernacExtend",
            "e04a290c024f871f69353b927170eb92da17f1e9"
        ],
        [
            "apply PI_tg_cv.",
            "VernacExtend",
            "36b7cf33dc3a69273bf494748f099c8d80477226"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Alt_PI : R := 4 * (let (a,_) := exist_PI in a).",
            "VernacDefinition",
            "ab036abfdf1c5104c23faba36f8207d0340f427f"
        ],
        [
            "Lemma Alt_PI_ineq : forall N:nat, sum_f_R0 (tg_alt PI_tg) (S (2 * N)) <= Alt_PI / 4 <= sum_f_R0 (tg_alt PI_tg) (2 * N).",
            "VernacStartTheoremProof",
            "1a782d15dcf610f2192460ef030d9f3877f98899"
        ],
        [
            "intro; apply alternated_series_ineq.",
            "VernacExtend",
            "73e1a397c2637ac6c3f8f32c0cf53a4013aed97c"
        ],
        [
            "apply PI_tg_decreasing.",
            "VernacExtend",
            "e04a290c024f871f69353b927170eb92da17f1e9"
        ],
        [
            "apply PI_tg_cv.",
            "VernacExtend",
            "36b7cf33dc3a69273bf494748f099c8d80477226"
        ],
        [
            "unfold Alt_PI; case exist_PI; intro.",
            "VernacExtend",
            "87698dc863b8140047a2c09b68387da79d9ad725"
        ],
        [
            "replace (4 * x / 4) with x.",
            "VernacExtend",
            "b4891c6b58fb59749177765c5f70eb41c011704d"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "unfold Rdiv; rewrite (Rmult_comm 4); rewrite Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r; reflexivity | discrR ].",
            "VernacExtend",
            "ca3c0730c885d32930a9746c3ed51537752c498f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Alt_PI_RGT_0 : 0 < Alt_PI.",
            "VernacStartTheoremProof",
            "3b2ecf448ab64c834fcab48e84c1c8d683e18eed"
        ],
        [
            "assert (H := Alt_PI_ineq 0).",
            "VernacExtend",
            "4777f279728d6077e681209782df61d270368a10"
        ],
        [
            "apply Rmult_lt_reg_l with (/ 4).",
            "VernacExtend",
            "0fd3d3de6615a8e3bb830482942e20ac53a0c315"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "ee74bd033c1031a79ef440e1d41037d5c9648214"
        ],
        [
            "rewrite Rmult_0_r; rewrite Rmult_comm.",
            "VernacExtend",
            "4ef78f2a143f59d262a7b56c7266a0c8a97ee871"
        ],
        [
            "elim H; clear H; intros H _.",
            "VernacExtend",
            "29e5a637368f209b8f3bf85456b1266dbbde3bae"
        ],
        [
            "unfold Rdiv in H; apply Rlt_le_trans with (sum_f_R0 (tg_alt PI_tg) (S (2 * 0))).",
            "VernacExtend",
            "acda433d32be601301e5939d6f7093eff324f490"
        ],
        [
            "simpl; unfold tg_alt; simpl; rewrite Rmult_1_l; rewrite Rmult_1_r; apply Rplus_lt_reg_l with (PI_tg 1).",
            "VernacExtend",
            "47463f33341218ac4f2722cb8206fa710572106e"
        ],
        [
            "rewrite Rplus_0_r; replace (PI_tg 1 + (PI_tg 0 + -1 * PI_tg 1)) with (PI_tg 0); [ unfold PI_tg | ring ].",
            "VernacExtend",
            "ed8009e85dda20812d629430b4d4c8ed625d125d"
        ],
        [
            "simpl; apply Rinv_lt_contravar.",
            "VernacExtend",
            "dd91c4fc4dee4490f4d38a6faf56b648d75edc91"
        ],
        [
            "rewrite Rmult_1_l; replace (2 + 1) with 3; [ prove_sup0 | ring ].",
            "VernacExtend",
            "87813a2839344bfa6fc01b182e1baf6f2dc4c445"
        ],
        [
            "rewrite Rplus_comm; pattern 1 at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; prove_sup0.",
            "VernacExtend",
            "2689a7f43daec9cbdf0c72649f934053dda32c4a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "CV_ALT_step0",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros; unfold Un_growing; intro.",
                        "VernacExtend",
                        "1c653d0e544963e344f664d48593493fa4470fdf"
                    ]
                },
                {
                    "command": [
                        "cut ((2 * S n)%nat = S (S (2 * n))).",
                        "VernacExtend",
                        "69ba98aa9737cd969ec1c2ba2afa730f54f7e59f"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H0.",
                        "VernacExtend",
                        "a6296e9dcb50e482c09b272dff674125bf504295"
                    ]
                },
                {
                    "command": [
                        "do 4 rewrite tech5; repeat rewrite Rplus_assoc; apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "dbc0aaf843ddd92d7df33cd99ef2b64eb9992f34"
                    ]
                },
                {
                    "command": [
                        "pattern (tg_alt Un (S (2 * n))) at 1; rewrite <- Rplus_0_r.",
                        "VernacExtend",
                        "601d6bfd35834171631576cf53fa0786eb3b632f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "unfold tg_alt; rewrite <- H0; rewrite pow_1_odd; rewrite pow_1_even; rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1c45db82ac9d9063cd9453e32718996057b4358f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (Un (S (2 * S n))).",
                        "VernacExtend",
                        "c9c1e8fe96b7061e4a8f930366510cd3b0ca085c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (Un (S (2 * S n)) + (Un (2 * S n)%nat + -1 * Un (S (2 * S n)))) with (Un (2 * S n)%nat); [ idtac | ring ].",
                        "VernacExtend",
                        "8f44ef919817cc6686162d1c0ef045f996c9d1ca"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "cut (forall n:nat, S n = (n + 1)%nat); [ intro | intro; ring ].",
                        "VernacExtend",
                        "97b16c8aaa23d0492428e048b48e6fa8aa848c01"
                    ]
                },
                {
                    "command": [
                        "rewrite (H0 n); rewrite (H0 (S (2 * n))); rewrite (H0 (2 * n)%nat); ring.",
                        "VernacExtend",
                        "e8fc0b52c8254a99de032ffd8a69a0336235411d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_ALT_step1",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros; unfold Un_decreasing; intro.",
                        "VernacExtend",
                        "4a3002a3ba640f32bd331e27c273f69b0159d680"
                    ]
                },
                {
                    "command": [
                        "cut ((2 * S n)%nat = S (S (2 * n))).",
                        "VernacExtend",
                        "69ba98aa9737cd969ec1c2ba2afa730f54f7e59f"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H0; do 2 rewrite tech5; repeat rewrite Rplus_assoc.",
                        "VernacExtend",
                        "b41a9202a9a5e7154990d1b80a2cdc227e1ab301"
                    ]
                },
                {
                    "command": [
                        "pattern (sum_f_R0 (tg_alt Un) (2 * n)) at 2; rewrite <- Rplus_0_r.",
                        "VernacExtend",
                        "bf67c217168cf401a3cb7757fa680c95bacbc253"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "unfold tg_alt; rewrite <- H0; rewrite pow_1_odd; rewrite pow_1_even; rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1c45db82ac9d9063cd9453e32718996057b4358f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (Un (S (2 * n))).",
                        "VernacExtend",
                        "093da2450d4b88e7fa74db38c9d388d8b93372fb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (Un (S (2 * n)) + (-1 * Un (S (2 * n)) + Un (2 * S n)%nat)) with (Un (2 * S n)%nat); [ idtac | ring ].",
                        "VernacExtend",
                        "e4d5ba81bcc7ddc2ca1a9f4564e035c94201884b"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; apply H.",
                        "VernacExtend",
                        "3ca9f81601d672f1a9f7097b9cd73c52632da972"
                    ]
                },
                {
                    "command": [
                        "cut (forall n:nat, S n = (n + 1)%nat); [ intro | intro; ring ].",
                        "VernacExtend",
                        "97b16c8aaa23d0492428e048b48e6fa8aa848c01"
                    ]
                },
                {
                    "command": [
                        "rewrite (H0 n); rewrite (H0 (S (2 * n))); rewrite (H0 (2 * n)%nat); ring.",
                        "VernacExtend",
                        "e8fc0b52c8254a99de032ffd8a69a0336235411d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_ALT_step2",
            "line_nb": 36,
            "steps": [
                {
                    "command": [
                        "intros; induction N as [| N HrecN].",
                        "VernacExtend",
                        "176c4a7e299087f2a01baed2bde05aa27663e10d"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold tg_alt; simpl; rewrite Rmult_1_r.",
                        "VernacExtend",
                        "c0f47c8a4d9430e1d6df77431270e07d37f71e04"
                    ]
                },
                {
                    "command": [
                        "replace (-1 * -1 * Un 2%nat) with (Un 2%nat); [ idtac | ring ].",
                        "VernacExtend",
                        "ef6110df1af4bc0e4fea00d2afa1f7d92dc20a48"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (Un 1%nat); rewrite Rplus_0_r.",
                        "VernacExtend",
                        "17f385d2ea0c6e665e82837b74c6c748417be752"
                    ]
                },
                {
                    "command": [
                        "replace (Un 1%nat + (-1 * Un 1%nat + Un 2%nat)) with (Un 2%nat); [ apply H | ring ].",
                        "VernacExtend",
                        "eb8d7851e26a52e68deda2d98d389184289354bb"
                    ]
                },
                {
                    "command": [
                        "cut (S (2 * S N) = S (S (S (2 * N)))).",
                        "VernacExtend",
                        "c438ca07d83941943b2e1738cdf4fc7c062ad61f"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H1; do 2 rewrite tech5.",
                        "VernacExtend",
                        "204fbcd61b62b4ea1f7f133d38b9a09168a584ee"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (sum_f_R0 (fun i:nat => tg_alt Un (S i)) (S (2 * N))).",
                        "VernacExtend",
                        "13d9ac6e251f5dc6b8f922523096689ba21d1df5"
                    ]
                },
                {
                    "command": [
                        "pattern (sum_f_R0 (fun i:nat => tg_alt Un (S i)) (S (2 * N))) at 2; rewrite <- Rplus_0_r.",
                        "VernacExtend",
                        "09007cf29c46bf19616735eab391f35a49502b9e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc; apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "acf8e5b51c9d2f8867cbf11b3788dea7e7c86e41"
                    ]
                },
                {
                    "command": [
                        "unfold tg_alt; rewrite <- H1.",
                        "VernacExtend",
                        "f19d89606485a706d30fd02d7e1d68eb69de4a59"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_1_odd.",
                        "VernacExtend",
                        "791610523f2432cad06f99dc17a759f51a65c17e"
                    ]
                },
                {
                    "command": [
                        "cut (S (S (2 * S N)) = (2 * S (S N))%nat).",
                        "VernacExtend",
                        "3790c51068abea490a4271b3bdf43d9461083faa"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H2; rewrite pow_1_even; rewrite Rmult_1_l; rewrite <- H2.",
                        "VernacExtend",
                        "7285f5d3d53fca0c09fb9da3f9e283faf752ca13"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (Un (S (2 * S N))).",
                        "VernacExtend",
                        "6ce5baf7f7e451027801ca9c1548a62d11a4e389"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (Un (S (2 * S N)) + (-1 * Un (S (2 * S N)) + Un (S (S (2 * S N))))) with (Un (S (S (2 * S N)))); [ idtac | ring ].",
                        "VernacExtend",
                        "b63da30364f0ab4f83d79d1c197e056a2b54eb1d"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply HrecN.",
                        "VernacExtend",
                        "ec9b348a0961f8ea4434987bb268364b3d8f639c"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_ALT_step3",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros; induction N as [| N HrecN].",
                        "VernacExtend",
                        "176c4a7e299087f2a01baed2bde05aa27663e10d"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold tg_alt; simpl; rewrite Rmult_1_r.",
                        "VernacExtend",
                        "c0f47c8a4d9430e1d6df77431270e07d37f71e04"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (Un 1%nat).",
                        "VernacExtend",
                        "1a20a9f38ba20a00c285e06c9a1266d883ca6158"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (Un 1%nat + -1 * Un 1%nat) with 0; [ apply H0 | ring ].",
                        "VernacExtend",
                        "da4dac87f7565ccae58e529ca9082b10d24c23ec"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := even_odd_cor N).",
                        "VernacExtend",
                        "1d6e666cb91abf2a1b3ed68c0632c25371f88736"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "elim H2; intro.",
                        "VernacExtend",
                        "939c927788b9492b13127156d1f300437fdf7754"
                    ]
                },
                {
                    "command": [
                        "rewrite H3; apply CV_ALT_step2; assumption.",
                        "VernacExtend",
                        "343ab7d701375a0077bd4e448f9a4f99ad2f03aa"
                    ]
                },
                {
                    "command": [
                        "rewrite H3; rewrite tech5.",
                        "VernacExtend",
                        "90e49d3985c81447ba47b86eeab8e22606a57012"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (sum_f_R0 (fun i:nat => tg_alt Un (S i)) (S (2 * x))).",
                        "VernacExtend",
                        "966a27bb40017f38a01c935b1f9eb47670925116"
                    ]
                },
                {
                    "command": [
                        "pattern (sum_f_R0 (fun i:nat => tg_alt Un (S i)) (S (2 * x))) at 2; rewrite <- Rplus_0_r.",
                        "VernacExtend",
                        "f639ef1afcf77109a5d9b7a4380d90b4044e0c35"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "unfold tg_alt; simpl.",
                        "VernacExtend",
                        "2d4321e628db948a125bac22d53b447804883b76"
                    ]
                },
                {
                    "command": [
                        "replace (x + (x + 0))%nat with (2 * x)%nat; [ idtac | ring ].",
                        "VernacExtend",
                        "f31596bb78014ae6d3a24f76fb58ff7374586fd4"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_1_even.",
                        "VernacExtend",
                        "3e89e4f460e9dff6ff15e1568d18d0db8610286f"
                    ]
                },
                {
                    "command": [
                        "replace (-1 * (-1 * (-1 * 1)) * Un (S (S (S (2 * x))))) with (- Un (S (S (S (2 * x))))); [ idtac | ring ].",
                        "VernacExtend",
                        "3f18c1cccf171044eef4ee4c62770cd88ca29255"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (Un (S (S (S (2 * x))))).",
                        "VernacExtend",
                        "174b05c1856a047ae645c81349571cb9a3558449"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; rewrite Rplus_opp_r.",
                        "VernacExtend",
                        "2093fe2f86304229ff9eaef1b7224b390ee645d6"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "apply CV_ALT_step2; assumption.",
                        "VernacExtend",
                        "9627205617e9c14df9e923cd32702806296db48c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_ALT_step4",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "intros; unfold has_ub; unfold bound.",
                        "VernacExtend",
                        "4be88999483c626876e364bc62ac34b94d4017a0"
                    ]
                },
                {
                    "command": [
                        "exists (Un 0%nat).",
                        "VernacExtend",
                        "23dc8b060fa42f8475c8a6fca6767103b2f4581f"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound; intros; elim H1; intros.",
                        "VernacExtend",
                        "f3a213d26886e9b13db492c03aeff549b593de28"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; rewrite decomp_sum.",
                        "VernacExtend",
                        "a2e5377cf59d577d8b48c23e5a21686a4659b99b"
                    ]
                },
                {
                    "command": [
                        "replace (tg_alt Un 0) with (Un 0%nat).",
                        "VernacExtend",
                        "b089d074a1b779431fff880d0a1c08106e801c49"
                    ]
                },
                {
                    "command": [
                        "pattern (Un 0%nat) at 2; rewrite <- Rplus_0_r.",
                        "VernacExtend",
                        "8f1b799edb2e7aa081a045d563036891f801ecf2"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "apply CV_ALT_step3; assumption.",
                        "VernacExtend",
                        "860e8db9f492d3eb9f279a541cc2adb5fabd6518"
                    ]
                },
                {
                    "command": [
                        "unfold tg_alt; simpl; ring.",
                        "VernacExtend",
                        "b3635ce02f1e058b307a6a1c9957e7ccf71bb8eb"
                    ]
                },
                {
                    "command": [
                        "apply lt_O_Sn.",
                        "VernacExtend",
                        "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_ALT",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := CV_ALT_step0 _ H).",
                        "VernacExtend",
                        "b6d7fd2f49431c62991170415bc7e3f70c5eb42a"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := CV_ALT_step4 _ H H0).",
                        "VernacExtend",
                        "9611018bfb6c36ff78a71f2657a1058820028f23"
                    ]
                },
                {
                    "command": [
                        "destruct (growing_cv _ H2 H3) as (x,p).",
                        "VernacExtend",
                        "298b46d237689b328eb53f0627f0e04fd19ff470"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; unfold Un_cv in H1; unfold R_dist in H1; unfold Un_cv in p; unfold R_dist in p.",
                        "VernacExtend",
                        "a0068e4d410235ef1bc3b1efd66f4172a5a6af24"
                    ]
                },
                {
                    "command": [
                        "intros; cut (0 < eps / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
                        "VernacExtend",
                        "fbe90d51ce8a5e2852a2bf79a3cc31e104df7d06"
                    ]
                },
                {
                    "command": [
                        "elim (H1 (eps / 2) H5); intros N2 H6.",
                        "VernacExtend",
                        "a6e0c761e70bc32ea74e20ea7b4a400440f85017"
                    ]
                },
                {
                    "command": [
                        "elim (p (eps / 2) H5); intros N1 H7.",
                        "VernacExtend",
                        "11869870156de0ac97a9eb078ab5e61d33bb2a40"
                    ]
                },
                {
                    "command": [
                        "set (N := max (S (2 * N1)) N2).",
                        "VernacExtend",
                        "4abaefabc611ed11d112431082c9be794602f7e8"
                    ]
                },
                {
                    "command": [
                        "exists N; intros.",
                        "VernacExtend",
                        "cfd63f1f7fafabc1d063c17632530a627ae99922"
                    ]
                },
                {
                    "command": [
                        "assert (H9 := even_odd_cor n).",
                        "VernacExtend",
                        "aced3f30f301c388fa41680008b782f808879e54"
                    ]
                },
                {
                    "command": [
                        "elim H9; intros P H10.",
                        "VernacExtend",
                        "a9cf9b38e02a14b7b30260572b85063f0129e71d"
                    ]
                },
                {
                    "command": [
                        "cut (N1 <= P)%nat.",
                        "VernacExtend",
                        "c615b535dd761cd6e252a65ad74b6d186836fb1b"
                    ]
                },
                {
                    "command": [
                        "intro; elim H10; intro.",
                        "VernacExtend",
                        "c83f88ebbde8005e347c650e333f741c81745b3d"
                    ]
                },
                {
                    "command": [
                        "replace (sum_f_R0 (tg_alt Un) n - x) with (sum_f_R0 (tg_alt Un) (S n) - x + - tg_alt Un (S n)).",
                        "VernacExtend",
                        "2dd1d83ec178d809db6316459b5a7a11b8b718d7"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (sum_f_R0 (tg_alt Un) (S n) - x) + Rabs (- tg_alt Un (S n))).",
                        "VernacExtend",
                        "e05592f3a2b77c8f8b99a22d2c326829cd52150b"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "rewrite (double_var eps); apply Rplus_lt_compat.",
                        "VernacExtend",
                        "dd3002897582f3251627e3b8fbd0c2a8c471071b"
                    ]
                },
                {
                    "command": [
                        "rewrite H12; apply H7; assumption.",
                        "VernacExtend",
                        "be97297026980ca475a2854e93dd117c23a62246"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp; unfold tg_alt; rewrite Rabs_mult; rewrite pow_1_abs; rewrite Rmult_1_l; unfold Rminus in H6; rewrite Ropp_0 in H6; rewrite <- (Rplus_0_r (Un (S n))); apply H6.",
                        "VernacExtend",
                        "cf77f4e3044648dcf7bdd14ebe2c843060682fe6"
                    ]
                },
                {
                    "command": [
                        "unfold ge; apply le_trans with n.",
                        "VernacExtend",
                        "bf970b3455c6e9c3bf954a54ca27cb9a0fade2ea"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with N; [ unfold N; apply le_max_r | assumption ].",
                        "VernacExtend",
                        "e4d31eff3b68c68d5b2e6ba96aa29724e436b83e"
                    ]
                },
                {
                    "command": [
                        "apply le_n_Sn.",
                        "VernacExtend",
                        "7889648199cacb866ef42ba6b4c4192f713b44f4"
                    ]
                },
                {
                    "command": [
                        "rewrite tech5; ring.",
                        "VernacExtend",
                        "8d1f57dbe6e72ce876934dd6be9c3c014b3474d3"
                    ]
                },
                {
                    "command": [
                        "rewrite H12; apply Rlt_trans with (eps / 2).",
                        "VernacExtend",
                        "a6d56061aad23d69648efd6d91fb08574ec42bba"
                    ]
                },
                {
                    "command": [
                        "apply H7; assumption.",
                        "VernacExtend",
                        "5fe9a2981bc9efdad06860c6328e07e091570990"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "f4c0b06c2efd971a65fcd955cb283b1e333171b1"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm 2); rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ rewrite Rmult_1_r | discrR ].",
                        "VernacExtend",
                        "c78dbbfc0b8bf16e9d957a045d03ef76351f7617"
                    ]
                },
                {
                    "command": [
                        "rewrite double.",
                        "VernacExtend",
                        "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
                    ]
                },
                {
                    "command": [
                        "pattern eps at 1; rewrite <- (Rplus_0_r eps); apply Rplus_lt_compat_l; assumption.",
                        "VernacExtend",
                        "d26931261c17b9952f85ba5919c55e5557a02494"
                    ]
                },
                {
                    "command": [
                        "elim H10; intro; apply le_double.",
                        "VernacExtend",
                        "5318198c162fd2e121282784c9f19d8eab42d58e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H11; apply le_trans with N.",
                        "VernacExtend",
                        "f9f063145f6f5604c0fca8b691b168aab0f0782d"
                    ]
                },
                {
                    "command": [
                        "unfold N; apply le_trans with (S (2 * N1)); [ apply le_n_Sn | apply le_max_l ].",
                        "VernacExtend",
                        "548a874ea0a2d89e89dcc204e83d3d7c2224f1f0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_Sm_le.",
                        "VernacExtend",
                        "354c1d072708776c26f2aab2afa0945822d0815b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H11.",
                        "VernacExtend",
                        "ec42fac36aacb0899bfc448afc7aa33e19c94748"
                    ]
                },
                {
                    "command": [
                        "apply lt_le_trans with N.",
                        "VernacExtend",
                        "11db6cb03818284d6eb0980129eac80f3ad7a41b"
                    ]
                },
                {
                    "command": [
                        "unfold N; apply lt_le_trans with (S (2 * N1)).",
                        "VernacExtend",
                        "726cb93433cdf155e04e0ff65079a4a681387995"
                    ]
                },
                {
                    "command": [
                        "apply lt_n_Sn.",
                        "VernacExtend",
                        "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
                    ]
                },
                {
                    "command": [
                        "apply le_max_l.",
                        "VernacExtend",
                        "084aa2ad97fe4ccf3d3b3737d309d8a3650322e6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alternated_series",
            "line_nb": 137,
            "steps": [
                {
                    "command": [
                        "intros; apply CV_ALT.",
                        "VernacExtend",
                        "406ba1282fc0f542d4b77a3a6e57f74dbc334caf"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold positivity_seq; apply decreasing_ineq; assumption.",
                        "VernacExtend",
                        "1d932937c1327f294b1077f72b26d90999814dfa"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "alternated_series_ineq",
            "line_nb": 143,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cut (Un_cv (fun N:nat => sum_f_R0 (tg_alt Un) (2 * N)) l).",
                        "VernacExtend",
                        "08b1fdd38c0ce0a36566a661bbf86b8acf358814"
                    ]
                },
                {
                    "command": [
                        "cut (Un_cv (fun N:nat => sum_f_R0 (tg_alt Un) (S (2 * N))) l).",
                        "VernacExtend",
                        "4b763a1b58c4f4b2a6d4fe4c27f2831eff6e0771"
                    ]
                },
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "apply (growing_ineq (fun N:nat => sum_f_R0 (tg_alt Un) (S (2 * N)))).",
                        "VernacExtend",
                        "be5c8bebf8c753b89063b2686101d430aba405d6"
                    ]
                },
                {
                    "command": [
                        "apply CV_ALT_step0; assumption.",
                        "VernacExtend",
                        "88b35ebfc04aedfe519d7fa2d1e0165298d07850"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply (decreasing_ineq (fun N:nat => sum_f_R0 (tg_alt Un) (2 * N))).",
                        "VernacExtend",
                        "88a65f6d6efbe8242a81e2168afe87d499d07cd1"
                    ]
                },
                {
                    "command": [
                        "apply CV_ALT_step1; assumption.",
                        "VernacExtend",
                        "dd6212b9e2ff3f61afa7af3f31ef7a9d25e8d7ed"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; unfold Un_cv in H1; unfold R_dist in H1; intros.",
                        "VernacExtend",
                        "ac7583112c1f0f239b78a4ce64a2fc33a512d51f"
                    ]
                },
                {
                    "command": [
                        "elim (H1 eps H2); intros.",
                        "VernacExtend",
                        "26b04261dd7fa4897011895680592c70e0eb63e3"
                    ]
                },
                {
                    "command": [
                        "exists x; intros.",
                        "VernacExtend",
                        "630f24a2d635df94b063a62023a90567ef134b19"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "unfold ge; apply le_trans with (2 * n)%nat.",
                        "VernacExtend",
                        "10fee6f224f4bb2deeb1833202bcab08c1ffa2a1"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with n.",
                        "VernacExtend",
                        "9597fcc7c1dd0db73cfc9758e0185a6c74ba3e8b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := mult_O_le n 2).",
                        "VernacExtend",
                        "284b568f36830d33228b721e10e4cf92250f9bcb"
                    ]
                },
                {
                    "command": [
                        "elim H5; intro.",
                        "VernacExtend",
                        "29923dfc32add298aa4e01bbfee147f65e05faf2"
                    ]
                },
                {
                    "command": [
                        "cut (0%nat <> 2%nat); [ intro; elim H7; symmetry ; assumption | discriminate ].",
                        "VernacExtend",
                        "cfbcc4cb921637587ac5c28aaab71a2c138274e1"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply le_n_Sn.",
                        "VernacExtend",
                        "7889648199cacb866ef42ba6b4c4192f713b44f4"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; unfold Un_cv in H1; unfold R_dist in H1; intros.",
                        "VernacExtend",
                        "ac7583112c1f0f239b78a4ce64a2fc33a512d51f"
                    ]
                },
                {
                    "command": [
                        "elim (H1 eps H2); intros.",
                        "VernacExtend",
                        "26b04261dd7fa4897011895680592c70e0eb63e3"
                    ]
                },
                {
                    "command": [
                        "exists x; intros.",
                        "VernacExtend",
                        "630f24a2d635df94b063a62023a90567ef134b19"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "unfold ge; apply le_trans with n.",
                        "VernacExtend",
                        "bf970b3455c6e9c3bf954a54ca27cb9a0fade2ea"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := mult_O_le n 2).",
                        "VernacExtend",
                        "284b568f36830d33228b721e10e4cf92250f9bcb"
                    ]
                },
                {
                    "command": [
                        "elim H5; intro.",
                        "VernacExtend",
                        "29923dfc32add298aa4e01bbfee147f65e05faf2"
                    ]
                },
                {
                    "command": [
                        "cut (0%nat <> 2%nat); [ intro; elim H7; symmetry ; assumption | discriminate ].",
                        "VernacExtend",
                        "cfbcc4cb921637587ac5c28aaab71a2c138274e1"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PI_tg_pos",
            "line_nb": 178,
            "steps": [
                {
                    "command": [
                        "intro; unfold PI_tg; left; apply Rinv_0_lt_compat; apply lt_INR_0; replace (2 * n + 1)%nat with (S (2 * n)); [ apply lt_O_Sn | ring ].",
                        "VernacExtend",
                        "a8069bb8a4458fb99f063c59b06cd27c8f8d644a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PI_tg_decreasing",
            "line_nb": 181,
            "steps": [
                {
                    "command": [
                        "unfold PI_tg, Un_decreasing; intro.",
                        "VernacExtend",
                        "00c7706ac2d49a0713a650df3312513fc707d39b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (INR (2 * n + 1)).",
                        "VernacExtend",
                        "6e89d3c1b4e04c3cbb4892d14bd34d7769d6b749"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0.",
                        "VernacExtend",
                        "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
                    ]
                },
                {
                    "command": [
                        "replace (2 * n + 1)%nat with (S (2 * n)); [ apply lt_O_Sn | ring ].",
                        "VernacExtend",
                        "b367689d116ed1bc2d0cb723b894c97f048e4c86"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "2ca74255a63c294f9442d956f32a2e3784636efb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (INR (2 * S n + 1)).",
                        "VernacExtend",
                        "0aba92f09ccffd014f0f937b19559b21ab578d8f"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0.",
                        "VernacExtend",
                        "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
                    ]
                },
                {
                    "command": [
                        "replace (2 * S n + 1)%nat with (S (2 * S n)); [ apply lt_O_Sn | ring ].",
                        "VernacExtend",
                        "8f60194b38d3111c88075d7823ebb0ff1728b7a5"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (INR (2 * S n + 1))); rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "4531c3b517d72d17442713ca76b8d396a6813adf"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite Rmult_1_r; apply le_INR.",
                        "VernacExtend",
                        "52247ef7b29c51a2ca393991e62bb68e751b22ab"
                    ]
                },
                {
                    "command": [
                        "replace (2 * S n + 1)%nat with (S (S (2 * n + 1))).",
                        "VernacExtend",
                        "271e1c66aec447aabbbe256367fb8c3180164cb0"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (S (2 * n + 1)); apply le_n_Sn.",
                        "VernacExtend",
                        "810e2a45e7736e9f6392e2c1cfee883986dfec93"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply not_O_INR; discriminate.",
                        "VernacExtend",
                        "b0377726251b564451c17d0f089ec6fd746a82be"
                    ]
                },
                {
                    "command": [
                        "apply not_O_INR; replace (2 * n + 1)%nat with (S (2 * n)); [ discriminate | ring ].",
                        "VernacExtend",
                        "8b9b1ba021d736fc12b6ac8ef8d676b94538f653"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PI_tg_cv",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; intros.",
                        "VernacExtend",
                        "add26482ec443227632a57519752bde439308595"
                    ]
                },
                {
                    "command": [
                        "cut (0 < 2 * eps); [ intro | apply Rmult_lt_0_compat; [ prove_sup0 | assumption ] ].",
                        "VernacExtend",
                        "787e270630fc76aaa728292a4cc91637ab748365"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := archimed (/ (2 * eps))).",
                        "VernacExtend",
                        "92e04e9f9e67db11ec1597a8868e02246379ce79"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= up (/ (2 * eps)))%Z.",
                        "VernacExtend",
                        "1140aa26f92b1d1b7b150204124f13fb1c3d8257"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H3 := IZN (up (/ (2 * eps))) H2).",
                        "VernacExtend",
                        "f19d23832e57260a74b7304fe84f6ef1487ac119"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros N H4.",
                        "VernacExtend",
                        "b305ea921e2ee3820303d4ae94e863eef8f44cd4"
                    ]
                },
                {
                    "command": [
                        "cut (0 < N)%nat.",
                        "VernacExtend",
                        "c440c3a8c4d1d5b91226600157b0e92fda64c454"
                    ]
                },
                {
                    "command": [
                        "intro; exists N; intros.",
                        "VernacExtend",
                        "ad66d194bafce8c8516e0e6241c895bce03444fd"
                    ]
                },
                {
                    "command": [
                        "cut (0 < n)%nat.",
                        "VernacExtend",
                        "cb2e1862e4d6bff72495cb9737a538f0bea720eb"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; rewrite Rabs_right.",
                        "VernacExtend",
                        "04e520c486554273584e94920de03716b9201160"
                    ]
                },
                {
                    "command": [
                        "unfold PI_tg; apply Rlt_trans with (/ INR (2 * n)).",
                        "VernacExtend",
                        "f5d20970db26f5dc0d51642b670e523aa5c62625"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (INR (2 * n)).",
                        "VernacExtend",
                        "b7b6bfcc34f5f5066d09b66d5a55fc9cf0d25199"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0.",
                        "VernacExtend",
                        "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
                    ]
                },
                {
                    "command": [
                        "replace (2 * n)%nat with (n + n)%nat; [ idtac | ring ].",
                        "VernacExtend",
                        "5d8b106642c394a46f5cff1303addf59347e6f8a"
                    ]
                },
                {
                    "command": [
                        "apply lt_le_trans with n.",
                        "VernacExtend",
                        "cfbf944838de4f2e7f431e1ad105b7f33a7df954"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply le_plus_l.",
                        "VernacExtend",
                        "30f3305f62c97c24af24578d88eaa888a0053ec1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "2ca74255a63c294f9442d956f32a2e3784636efb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (INR (2 * n + 1)).",
                        "VernacExtend",
                        "6ed7d0e634b5530eb4e3e59427642d85dcdcc485"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0.",
                        "VernacExtend",
                        "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
                    ]
                },
                {
                    "command": [
                        "replace (2 * n + 1)%nat with (S (2 * n)); [ apply lt_O_Sn | ring ].",
                        "VernacExtend",
                        "b367689d116ed1bc2d0cb723b894c97f048e4c86"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (INR (2 * n + 1))).",
                        "VernacExtend",
                        "18b0e13bc34b08d36d68659448ae80fc351dc728"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "7f630b736ed225dea43b09c6ef0119a691020de4"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite Rmult_1_r; apply lt_INR.",
                        "VernacExtend",
                        "2825d36a56b44336ded44621378f0acf218ff2d0"
                    ]
                },
                {
                    "command": [
                        "replace (2 * n + 1)%nat with (S (2 * n)); [ apply lt_n_Sn | ring ].",
                        "VernacExtend",
                        "fe0d0493cdb65eea6b25114753520d779c81d46a"
                    ]
                },
                {
                    "command": [
                        "apply not_O_INR; replace (2 * n + 1)%nat with (S (2 * n)); [ discriminate | ring ].",
                        "VernacExtend",
                        "8b9b1ba021d736fc12b6ac8ef8d676b94538f653"
                    ]
                },
                {
                    "command": [
                        "replace n with (S (pred n)).",
                        "VernacExtend",
                        "f5a0bbc5a2e7e62647818b080b0dc7894bc6145c"
                    ]
                },
                {
                    "command": [
                        "apply not_O_INR; discriminate.",
                        "VernacExtend",
                        "b0377726251b564451c17d0f089ec6fd746a82be"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply S_pred with 0%nat.",
                        "VernacExtend",
                        "f315678d7d061e79f2a4f1f8c6e10d010a3c2577"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (/ INR (2 * N)).",
                        "VernacExtend",
                        "05f6c78dceef907380b057bbc5da0d5928fd8b16"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_le_contravar.",
                        "VernacExtend",
                        "28ea2dd655f9d8c890013606f785cc34c54c4a71"
                    ]
                },
                {
                    "command": [
                        "rewrite mult_INR; apply Rmult_lt_0_compat; [ simpl; prove_sup0 | apply lt_INR_0; assumption ].",
                        "VernacExtend",
                        "0b8d88081ef28ef360565940541cf227864be271"
                    ]
                },
                {
                    "command": [
                        "apply le_INR.",
                        "VernacExtend",
                        "482ba85c33b4f446aa5e9ca8bca5b198f5d8a8c5"
                    ]
                },
                {
                    "command": [
                        "now apply mult_le_compat_l.",
                        "VernacExtend",
                        "c75ad026eaa5bae1e60560b3a2b0efb6e6b5889a"
                    ]
                },
                {
                    "command": [
                        "rewrite mult_INR.",
                        "VernacExtend",
                        "37e645386446b650721bdbf87c469ec7ef739f19"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (INR N / eps).",
                        "VernacExtend",
                        "7d59c5769c833a3379adb9a77b13495bda8a70c1"
                    ]
                },
                {
                    "command": [
                        "apply Rdiv_lt_0_compat with (2 := H).",
                        "VernacExtend",
                        "1f691dad8828faa83f6767f4a41011149e128764"
                    ]
                },
                {
                    "command": [
                        "now apply (lt_INR 0).",
                        "VernacExtend",
                        "7623af286128bc83ef96fa29afc58fdc2b71adb6"
                    ]
                },
                {
                    "command": [
                        "replace (_ */ _) with (/(2 * eps)).",
                        "VernacExtend",
                        "3c91e7a697fa7b2f422a2336382023dabd599ede"
                    ]
                },
                {
                    "command": [
                        "replace (_ / _ * _) with (INR N).",
                        "VernacExtend",
                        "5197c8263fddd41b50344112f121b297db2c6744"
                    ]
                },
                {
                    "command": [
                        "rewrite INR_IZR_INZ.",
                        "VernacExtend",
                        "8058c7a6913f85d26af3a54acc61c387d0a04933"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- H4.",
                        "VernacExtend",
                        "a9a5b610a701070698d8715ab5ca0107ce38ff98"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "now apply Rgt_not_eq.",
                        "VernacExtend",
                        "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
                    ]
                },
                {
                    "command": [
                        "simpl (INR 2); field; split.",
                        "VernacExtend",
                        "7bf98e14c35d683649f2253190d381df6ec55589"
                    ]
                },
                {
                    "command": [
                        "now apply Rgt_not_eq, (lt_INR 0).",
                        "VernacExtend",
                        "91d130c6e382c3bcb70165f39aed41e6f2a29a5f"
                    ]
                },
                {
                    "command": [
                        "now apply Rgt_not_eq.",
                        "VernacExtend",
                        "588446d8c16d3fb2cbc3b2d779b4a87917ac8f8d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply PI_tg_pos.",
                        "VernacExtend",
                        "440de71b523dfe69bca847a8dc2b575dbbf64968"
                    ]
                },
                {
                    "command": [
                        "apply lt_le_trans with N; assumption.",
                        "VernacExtend",
                        "6c6f0b498017c41c6b0397c5aaa31ad4490aadbc"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros H5 _.",
                        "VernacExtend",
                        "97beeef2a16f53ff8b1df18918cfeda09fbb3f92"
                    ]
                },
                {
                    "command": [
                        "destruct (lt_eq_lt_dec 0 N) as [[| <- ]|H6].",
                        "VernacExtend",
                        "37e4ec1f322fdb2029c32b376ca58e439f9518d9"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H5.",
                        "VernacExtend",
                        "dc90760fc98a31cbb8924c663e46ebf35a6792db"
                    ]
                },
                {
                    "command": [
                        "simpl in H5.",
                        "VernacExtend",
                        "03fbfc7bb6b248b41f6241227db3e5c410547157"
                    ]
                },
                {
                    "command": [
                        "cut (0 < / (2 * eps)); [ intro | apply Rinv_0_lt_compat; assumption ].",
                        "VernacExtend",
                        "daf4854934d28c8c44439b36a7935bcc66349d92"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rlt_trans _ _ _ H6 H5)).",
                        "VernacExtend",
                        "b1d6c56d07a9135b74f4140b5156e5c2fe62749d"
                    ]
                },
                {
                    "command": [
                        "elim (lt_n_O _ H6).",
                        "VernacExtend",
                        "76f20476cc950b09cee001460db34758c2a8aa51"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR.",
                        "VernacExtend",
                        "b9b46c6b2f4d4157bed90857db2b9c3ba33486ad"
                    ]
                },
                {
                    "command": [
                        "left; apply Rlt_trans with (/ (2 * eps)).",
                        "VernacExtend",
                        "235a3e1be9b29d194133190d92d60dd9c739ccdf"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros; assumption.",
                        "VernacExtend",
                        "cc00e4116d0aefea281577ea01f1c22b86beb4e0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exist_PI",
            "line_nb": 262,
            "steps": [
                {
                    "command": [
                        "apply alternated_series.",
                        "VernacExtend",
                        "88734ba7403d2940e3c4c4140d690b2e5ffc0e8d"
                    ]
                },
                {
                    "command": [
                        "apply PI_tg_decreasing.",
                        "VernacExtend",
                        "e04a290c024f871f69353b927170eb92da17f1e9"
                    ]
                },
                {
                    "command": [
                        "apply PI_tg_cv.",
                        "VernacExtend",
                        "36b7cf33dc3a69273bf494748f099c8d80477226"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_PI_ineq",
            "line_nb": 268,
            "steps": [
                {
                    "command": [
                        "intro; apply alternated_series_ineq.",
                        "VernacExtend",
                        "73e1a397c2637ac6c3f8f32c0cf53a4013aed97c"
                    ]
                },
                {
                    "command": [
                        "apply PI_tg_decreasing.",
                        "VernacExtend",
                        "e04a290c024f871f69353b927170eb92da17f1e9"
                    ]
                },
                {
                    "command": [
                        "apply PI_tg_cv.",
                        "VernacExtend",
                        "36b7cf33dc3a69273bf494748f099c8d80477226"
                    ]
                },
                {
                    "command": [
                        "unfold Alt_PI; case exist_PI; intro.",
                        "VernacExtend",
                        "87698dc863b8140047a2c09b68387da79d9ad725"
                    ]
                },
                {
                    "command": [
                        "replace (4 * x / 4) with x.",
                        "VernacExtend",
                        "b4891c6b58fb59749177765c5f70eb41c011704d"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite (Rmult_comm 4); rewrite Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_r; reflexivity | discrR ].",
                        "VernacExtend",
                        "ca3c0730c885d32930a9746c3ed51537752c498f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_PI_RGT_0",
            "line_nb": 277,
            "steps": [
                {
                    "command": [
                        "assert (H := Alt_PI_ineq 0).",
                        "VernacExtend",
                        "4777f279728d6077e681209782df61d270368a10"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (/ 4).",
                        "VernacExtend",
                        "0fd3d3de6615a8e3bb830482942e20ac53a0c315"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup0.",
                        "VernacExtend",
                        "ee74bd033c1031a79ef440e1d41037d5c9648214"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_0_r; rewrite Rmult_comm.",
                        "VernacExtend",
                        "4ef78f2a143f59d262a7b56c7266a0c8a97ee871"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros H _.",
                        "VernacExtend",
                        "29e5a637368f209b8f3bf85456b1266dbbde3bae"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv in H; apply Rlt_le_trans with (sum_f_R0 (tg_alt PI_tg) (S (2 * 0))).",
                        "VernacExtend",
                        "acda433d32be601301e5939d6f7093eff324f490"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold tg_alt; simpl; rewrite Rmult_1_l; rewrite Rmult_1_r; apply Rplus_lt_reg_l with (PI_tg 1).",
                        "VernacExtend",
                        "47463f33341218ac4f2722cb8206fa710572106e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (PI_tg 1 + (PI_tg 0 + -1 * PI_tg 1)) with (PI_tg 0); [ unfold PI_tg | ring ].",
                        "VernacExtend",
                        "ed8009e85dda20812d629430b4d4c8ed625d125d"
                    ]
                },
                {
                    "command": [
                        "simpl; apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "dd91c4fc4dee4490f4d38a6faf56b648d75edc91"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; replace (2 + 1) with 3; [ prove_sup0 | ring ].",
                        "VernacExtend",
                        "87813a2839344bfa6fc01b182e1baf6f2dc4c445"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm; pattern 1 at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; prove_sup0.",
                        "VernacExtend",
                        "2689a7f43daec9cbdf0c72649f934053dda32c4a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}