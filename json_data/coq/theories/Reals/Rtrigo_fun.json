{
    "filename": "theories/Reals/Rtrigo_fun.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import SeqSeries.",
            "VernacRequire",
            "379ec54d32465fe6d151cce8474fb7ff733028bb"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Lemma Alembert_exp : Un_cv (fun n:nat => Rabs (/ INR (fact (S n)) * / / INR (fact n))) 0.",
            "VernacStartTheoremProof",
            "db05e1ac142e697157f8e616fe3c7d5c69644256"
        ],
        [
            "unfold Un_cv; intros; destruct (Rgt_dec eps 1) as [Hgt|Hnotgt].",
            "VernacExtend",
            "6ed904a5c426f99b751bd52d26e088f2680369b9"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "split with 0%nat; intros; rewrite (simpl_fact n); unfold R_dist; rewrite (Rminus_0_r (Rabs (/ INR (S n)))); rewrite (Rabs_Rabsolu (/ INR (S n))); cut (/ INR (S n) > 0).",
            "VernacExtend",
            "c015ecbd518be525d7557850a68ed788dbe077ce"
        ],
        [
            "intro; rewrite (Rabs_pos_eq (/ INR (S n))).",
            "VernacExtend",
            "d265729dcc4da8c7c2b339cc082135d65b38e893"
        ],
        [
            "cut (/ eps - 1 < 0).",
            "VernacExtend",
            "81b9840496b19b7a84e335d5ce3293218039466d"
        ],
        [
            "intro H2; generalize (Rlt_le_trans (/ eps - 1) 0 (INR n) H2 (pos_INR n)); clear H2; intro; unfold Rminus in H2; generalize (Rplus_lt_compat_l 1 (/ eps + -1) (INR n) H2); replace (1 + (/ eps + -1)) with (/ eps); [ clear H2; intro | ring ].",
            "VernacExtend",
            "2d97d7ea5cd3da5a39d5a06a81207839365b567f"
        ],
        [
            "rewrite (Rplus_comm 1 (INR n)) in H2; rewrite <- (S_INR n) in H2; generalize (Rmult_gt_0_compat (/ INR (S n)) eps H1 H); intro; unfold Rgt in H3; generalize (Rmult_lt_compat_l (/ INR (S n) * eps) (/ eps) (INR (S n)) H3 H2); intro; rewrite (Rmult_assoc (/ INR (S n)) eps (/ eps)) in H4; rewrite (Rinv_r eps (Rlt_dichotomy_converse eps 0 (or_intror (eps < 0) H))) in H4; rewrite (let (H1, H2) := Rmult_ne (/ INR (S n)) in H1) in H4; rewrite (Rmult_comm (/ INR (S n))) in H4; rewrite (Rmult_assoc eps (/ INR (S n)) (INR (S n))) in H4; rewrite (Rinv_l (INR (S n)) (not_O_INR (S n) (not_eq_sym (O_S n)))) in H4; rewrite (let (H1, H2) := Rmult_ne eps in H1) in H4; assumption.",
            "VernacExtend",
            "6c02ce8867da57c39254aff32e40c254daefde3b"
        ],
        [
            "apply Rlt_minus; unfold Rgt in Hgt; rewrite <- Rinv_1; apply (Rinv_lt_contravar 1 eps); auto; rewrite (let (H1, H2) := Rmult_ne eps in H2); unfold Rgt in H; assumption.",
            "VernacExtend",
            "df88a0895c69ac4047891e5a1fc18c8942595793"
        ],
        [
            "unfold Rgt in H1; apply Rlt_le; assumption.",
            "VernacExtend",
            "9793cad56a6d20a15d48aa8a5ee54d34f7c9186e"
        ],
        [
            "unfold Rgt; apply Rinv_0_lt_compat; apply lt_INR_0; apply lt_O_Sn.",
            "VernacExtend",
            "52f37026b03ccc7263877f0bd637b187c0b40d6a"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "cut (0 <= up (/ eps - 1))%Z.",
            "VernacExtend",
            "883851d22c677aef4d377c465ce6d30e25720af2"
        ],
        [
            "intro; elim (IZN (up (/ eps - 1)) H0); intros; split with x; intros; rewrite (simpl_fact n); unfold R_dist; rewrite (Rminus_0_r (Rabs (/ INR (S n)))); rewrite (Rabs_Rabsolu (/ INR (S n))); cut (/ INR (S n) > 0).",
            "VernacExtend",
            "ebba8fa79c63430f5363c90e900e8c17c88ef1eb"
        ],
        [
            "intro; rewrite (Rabs_pos_eq (/ INR (S n))).",
            "VernacExtend",
            "d265729dcc4da8c7c2b339cc082135d65b38e893"
        ],
        [
            "cut (/ eps - 1 < INR x).",
            "VernacExtend",
            "91448a291b6ff0bd64b5d273f35d0693f2e4d3e4"
        ],
        [
            "intro ; generalize (Rlt_le_trans (/ eps - 1) (INR x) (INR n) H4 (le_INR x n H2)); clear H4; intro; unfold Rminus in H4; generalize (Rplus_lt_compat_l 1 (/ eps + -1) (INR n) H4); replace (1 + (/ eps + -1)) with (/ eps); [ clear H4; intro | ring ].",
            "VernacExtend",
            "79021c96a430b2039808f6c7ffe4de1a503b394e"
        ],
        [
            "rewrite (Rplus_comm 1 (INR n)) in H4; rewrite <- (S_INR n) in H4; generalize (Rmult_gt_0_compat (/ INR (S n)) eps H3 H); intro; unfold Rgt in H5; generalize (Rmult_lt_compat_l (/ INR (S n) * eps) (/ eps) (INR (S n)) H5 H4); intro; rewrite (Rmult_assoc (/ INR (S n)) eps (/ eps)) in H6; rewrite (Rinv_r eps (Rlt_dichotomy_converse eps 0 (or_intror (eps < 0) H))) in H6; rewrite (let (H1, H2) := Rmult_ne (/ INR (S n)) in H1) in H6; rewrite (Rmult_comm (/ INR (S n))) in H6; rewrite (Rmult_assoc eps (/ INR (S n)) (INR (S n))) in H6; rewrite (Rinv_l (INR (S n)) (not_O_INR (S n) (not_eq_sym (O_S n)))) in H6; rewrite (let (H1, H2) := Rmult_ne eps in H1) in H6; assumption.",
            "VernacExtend",
            "ccac8e27788e3ba77709e22cdaa36afb44555253"
        ],
        [
            "cut (IZR (up (/ eps - 1)) = IZR (Z.of_nat x)); [ intro | rewrite H1; trivial ].",
            "VernacExtend",
            "0d5aed34ccd83704440afb7e87bc0d6b426834dc"
        ],
        [
            "elim (archimed (/ eps - 1)); intros; clear H6; unfold Rgt in H5; rewrite H4 in H5; rewrite INR_IZR_INZ; assumption.",
            "VernacExtend",
            "9ed481cf900f7682473aa02678f1371494032e74"
        ],
        [
            "unfold Rgt in H1; apply Rlt_le; assumption.",
            "VernacExtend",
            "9793cad56a6d20a15d48aa8a5ee54d34f7c9186e"
        ],
        [
            "unfold Rgt; apply Rinv_0_lt_compat; apply lt_INR_0; apply lt_O_Sn.",
            "VernacExtend",
            "52f37026b03ccc7263877f0bd637b187c0b40d6a"
        ],
        [
            "apply (le_O_IZR (up (/ eps - 1))); apply (Rle_trans 0 (/ eps - 1) (IZR (up (/ eps - 1)))).",
            "VernacExtend",
            "f62646e4eb512c4b8c8ce2cb85bc1947cf8922a9"
        ],
        [
            "generalize (Rnot_gt_le eps 1 Hnotgt); clear Hnotgt; unfold Rle; intro; elim H0; clear H0; intro.",
            "VernacExtend",
            "8af98217379983f543c430cc2f41fd7ea996b72b"
        ],
        [
            "left; unfold Rgt in H; generalize (Rmult_lt_compat_l (/ eps) eps 1 (Rinv_0_lt_compat eps H) H0); rewrite (Rinv_l eps (not_eq_sym (Rlt_dichotomy_converse 0 eps (or_introl (0 > eps) H)))) ; rewrite (let (H1, H2) := Rmult_ne (/ eps) in H1); intro; fold (/ eps - 1 > 0); apply Rgt_minus; unfold Rgt; assumption.",
            "VernacExtend",
            "08763b2721d6eb4e03612448b9470aa812161203"
        ],
        [
            "right; rewrite H0; rewrite Rinv_1; symmetry; apply Rminus_diag_eq; auto.",
            "VernacExtend",
            "26fd35d3b3011753d9c4a4a600242df1227be033"
        ],
        [
            "elim (archimed (/ eps - 1)); intros; clear H1; unfold Rgt in H0; apply Rlt_le; assumption.",
            "VernacExtend",
            "ee1dde688d61c5b472111b5bbd98629ee1049874"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Alembert_exp",
            "line_nb": 4,
            "steps": [
                {
                    "command": [
                        "unfold Un_cv; intros; destruct (Rgt_dec eps 1) as [Hgt|Hnotgt].",
                        "VernacExtend",
                        "6ed904a5c426f99b751bd52d26e088f2680369b9"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "split with 0%nat; intros; rewrite (simpl_fact n); unfold R_dist; rewrite (Rminus_0_r (Rabs (/ INR (S n)))); rewrite (Rabs_Rabsolu (/ INR (S n))); cut (/ INR (S n) > 0).",
                        "VernacExtend",
                        "c015ecbd518be525d7557850a68ed788dbe077ce"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (Rabs_pos_eq (/ INR (S n))).",
                        "VernacExtend",
                        "d265729dcc4da8c7c2b339cc082135d65b38e893"
                    ]
                },
                {
                    "command": [
                        "cut (/ eps - 1 < 0).",
                        "VernacExtend",
                        "81b9840496b19b7a84e335d5ce3293218039466d"
                    ]
                },
                {
                    "command": [
                        "intro H2; generalize (Rlt_le_trans (/ eps - 1) 0 (INR n) H2 (pos_INR n)); clear H2; intro; unfold Rminus in H2; generalize (Rplus_lt_compat_l 1 (/ eps + -1) (INR n) H2); replace (1 + (/ eps + -1)) with (/ eps); [ clear H2; intro | ring ].",
                        "VernacExtend",
                        "2d97d7ea5cd3da5a39d5a06a81207839365b567f"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rplus_comm 1 (INR n)) in H2; rewrite <- (S_INR n) in H2; generalize (Rmult_gt_0_compat (/ INR (S n)) eps H1 H); intro; unfold Rgt in H3; generalize (Rmult_lt_compat_l (/ INR (S n) * eps) (/ eps) (INR (S n)) H3 H2); intro; rewrite (Rmult_assoc (/ INR (S n)) eps (/ eps)) in H4; rewrite (Rinv_r eps (Rlt_dichotomy_converse eps 0 (or_intror (eps < 0) H))) in H4; rewrite (let (H1, H2) := Rmult_ne (/ INR (S n)) in H1) in H4; rewrite (Rmult_comm (/ INR (S n))) in H4; rewrite (Rmult_assoc eps (/ INR (S n)) (INR (S n))) in H4; rewrite (Rinv_l (INR (S n)) (not_O_INR (S n) (not_eq_sym (O_S n)))) in H4; rewrite (let (H1, H2) := Rmult_ne eps in H1) in H4; assumption.",
                        "VernacExtend",
                        "6c02ce8867da57c39254aff32e40c254daefde3b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_minus; unfold Rgt in Hgt; rewrite <- Rinv_1; apply (Rinv_lt_contravar 1 eps); auto; rewrite (let (H1, H2) := Rmult_ne eps in H2); unfold Rgt in H; assumption.",
                        "VernacExtend",
                        "df88a0895c69ac4047891e5a1fc18c8942595793"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt in H1; apply Rlt_le; assumption.",
                        "VernacExtend",
                        "9793cad56a6d20a15d48aa8a5ee54d34f7c9186e"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt; apply Rinv_0_lt_compat; apply lt_INR_0; apply lt_O_Sn.",
                        "VernacExtend",
                        "52f37026b03ccc7263877f0bd637b187c0b40d6a"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= up (/ eps - 1))%Z.",
                        "VernacExtend",
                        "883851d22c677aef4d377c465ce6d30e25720af2"
                    ]
                },
                {
                    "command": [
                        "intro; elim (IZN (up (/ eps - 1)) H0); intros; split with x; intros; rewrite (simpl_fact n); unfold R_dist; rewrite (Rminus_0_r (Rabs (/ INR (S n)))); rewrite (Rabs_Rabsolu (/ INR (S n))); cut (/ INR (S n) > 0).",
                        "VernacExtend",
                        "ebba8fa79c63430f5363c90e900e8c17c88ef1eb"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (Rabs_pos_eq (/ INR (S n))).",
                        "VernacExtend",
                        "d265729dcc4da8c7c2b339cc082135d65b38e893"
                    ]
                },
                {
                    "command": [
                        "cut (/ eps - 1 < INR x).",
                        "VernacExtend",
                        "91448a291b6ff0bd64b5d273f35d0693f2e4d3e4"
                    ]
                },
                {
                    "command": [
                        "intro ; generalize (Rlt_le_trans (/ eps - 1) (INR x) (INR n) H4 (le_INR x n H2)); clear H4; intro; unfold Rminus in H4; generalize (Rplus_lt_compat_l 1 (/ eps + -1) (INR n) H4); replace (1 + (/ eps + -1)) with (/ eps); [ clear H4; intro | ring ].",
                        "VernacExtend",
                        "79021c96a430b2039808f6c7ffe4de1a503b394e"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rplus_comm 1 (INR n)) in H4; rewrite <- (S_INR n) in H4; generalize (Rmult_gt_0_compat (/ INR (S n)) eps H3 H); intro; unfold Rgt in H5; generalize (Rmult_lt_compat_l (/ INR (S n) * eps) (/ eps) (INR (S n)) H5 H4); intro; rewrite (Rmult_assoc (/ INR (S n)) eps (/ eps)) in H6; rewrite (Rinv_r eps (Rlt_dichotomy_converse eps 0 (or_intror (eps < 0) H))) in H6; rewrite (let (H1, H2) := Rmult_ne (/ INR (S n)) in H1) in H6; rewrite (Rmult_comm (/ INR (S n))) in H6; rewrite (Rmult_assoc eps (/ INR (S n)) (INR (S n))) in H6; rewrite (Rinv_l (INR (S n)) (not_O_INR (S n) (not_eq_sym (O_S n)))) in H6; rewrite (let (H1, H2) := Rmult_ne eps in H1) in H6; assumption.",
                        "VernacExtend",
                        "ccac8e27788e3ba77709e22cdaa36afb44555253"
                    ]
                },
                {
                    "command": [
                        "cut (IZR (up (/ eps - 1)) = IZR (Z.of_nat x)); [ intro | rewrite H1; trivial ].",
                        "VernacExtend",
                        "0d5aed34ccd83704440afb7e87bc0d6b426834dc"
                    ]
                },
                {
                    "command": [
                        "elim (archimed (/ eps - 1)); intros; clear H6; unfold Rgt in H5; rewrite H4 in H5; rewrite INR_IZR_INZ; assumption.",
                        "VernacExtend",
                        "9ed481cf900f7682473aa02678f1371494032e74"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt in H1; apply Rlt_le; assumption.",
                        "VernacExtend",
                        "9793cad56a6d20a15d48aa8a5ee54d34f7c9186e"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt; apply Rinv_0_lt_compat; apply lt_INR_0; apply lt_O_Sn.",
                        "VernacExtend",
                        "52f37026b03ccc7263877f0bd637b187c0b40d6a"
                    ]
                },
                {
                    "command": [
                        "apply (le_O_IZR (up (/ eps - 1))); apply (Rle_trans 0 (/ eps - 1) (IZR (up (/ eps - 1)))).",
                        "VernacExtend",
                        "f62646e4eb512c4b8c8ce2cb85bc1947cf8922a9"
                    ]
                },
                {
                    "command": [
                        "generalize (Rnot_gt_le eps 1 Hnotgt); clear Hnotgt; unfold Rle; intro; elim H0; clear H0; intro.",
                        "VernacExtend",
                        "8af98217379983f543c430cc2f41fd7ea996b72b"
                    ]
                },
                {
                    "command": [
                        "left; unfold Rgt in H; generalize (Rmult_lt_compat_l (/ eps) eps 1 (Rinv_0_lt_compat eps H) H0); rewrite (Rinv_l eps (not_eq_sym (Rlt_dichotomy_converse 0 eps (or_introl (0 > eps) H)))) ; rewrite (let (H1, H2) := Rmult_ne (/ eps) in H1); intro; fold (/ eps - 1 > 0); apply Rgt_minus; unfold Rgt; assumption.",
                        "VernacExtend",
                        "08763b2721d6eb4e03612448b9470aa812161203"
                    ]
                },
                {
                    "command": [
                        "right; rewrite H0; rewrite Rinv_1; symmetry; apply Rminus_diag_eq; auto.",
                        "VernacExtend",
                        "26fd35d3b3011753d9c4a4a600242df1227be033"
                    ]
                },
                {
                    "command": [
                        "elim (archimed (/ eps - 1)); intros; clear H1; unfold Rgt in H0; apply Rlt_le; assumption.",
                        "VernacExtend",
                        "ee1dde688d61c5b472111b5bbd98629ee1049874"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}