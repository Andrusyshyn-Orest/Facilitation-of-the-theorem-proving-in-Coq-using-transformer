{
    "filename": "theories/Reals/RiemannInt.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import SeqSeries.",
            "VernacRequire",
            "379ec54d32465fe6d151cce8474fb7ff733028bb"
        ],
        [
            "Require Import Ranalysis_reg.",
            "VernacRequire",
            "4618d6bc6e973fd059d7ae3ba7a9096fc3aa83f2"
        ],
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import RiemannInt_SF.",
            "VernacRequire",
            "744d086b3c70bb5aa57f11e88c017dc72912db6e"
        ],
        [
            "Require Import Max.",
            "VernacRequire",
            "163f8b04f9c5ff0ff8fe9ce4c762873ab613a3fa"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Definition Riemann_integrable (f:R -> R) (a b:R) : Type := forall eps:posreal, { phi:StepFun a b & { psi:StepFun a b | (forall t:R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi t) <= psi t) /\\ Rabs (RiemannInt_SF psi) < eps } }.",
            "VernacDefinition",
            "ffe1620de53ce2e08bdd7ea2ddbf262bbcc6b944"
        ],
        [
            "Definition phi_sequence (un:nat -> posreal) (f:R -> R) (a b:R) (pr:Riemann_integrable f a b) (n:nat) := projT1 (pr (un n)).",
            "VernacDefinition",
            "be1c8194c9de73760c264f2037e95296d7cde6db"
        ],
        [
            "Lemma phi_sequence_prop : forall (un:nat -> posreal) (f:R -> R) (a b:R) (pr:Riemann_integrable f a b) (N:nat), { psi:StepFun a b | (forall t:R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi_sequence un pr N t) <= psi t) /\\ Rabs (RiemannInt_SF psi) < un N }.",
            "VernacStartTheoremProof",
            "9fadef96341fd38440b328ba81f3ca29ef4ad6c1"
        ],
        [
            "intros; apply (projT2 (pr (un N))).",
            "VernacExtend",
            "49f87d37f135fafb7ee5853d46e4ecb502aec51f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P1 : forall (f:R -> R) (a b:R), Riemann_integrable f a b -> Riemann_integrable f b a.",
            "VernacStartTheoremProof",
            "e908bfcb3f4ee40136cc9258425d8adae586fbf8"
        ],
        [
            "unfold Riemann_integrable; intros; elim (X eps); clear X; intros.",
            "VernacExtend",
            "d3a8e0927f75f3ad7a9ee36c55b0a249b576eaaf"
        ],
        [
            "elim p; clear p; intros x0 p; exists (mkStepFun (StepFun_P6 (pre x))); exists (mkStepFun (StepFun_P6 (pre x0))); elim p; clear p; intros; split.",
            "VernacExtend",
            "3de3f3b6ebb467abe9bd374131d8a1c3f280cc32"
        ],
        [
            "intros; apply (H t); elim H1; clear H1; intros; split; [ apply Rle_trans with (Rmin b a); try assumption; right; unfold Rmin | apply Rle_trans with (Rmax b a); try assumption; right; unfold Rmax ]; (case (Rle_dec a b); case (Rle_dec b a); intros; try reflexivity || apply Rle_antisym; [ assumption | assumption | auto with real | auto with real ]).",
            "VernacExtend",
            "b0d1830d476acc83e0e108c5a616ff63ca0571ba"
        ],
        [
            "generalize H0; unfold RiemannInt_SF; case (Rle_dec a b); case (Rle_dec b a); intros; (replace (Int_SF (subdivision_val (mkStepFun (StepFun_P6 (pre x0)))) (subdivision (mkStepFun (StepFun_P6 (pre x0))))) with (Int_SF (subdivision_val x0) (subdivision x0)); [ idtac | apply StepFun_P17 with (fe x0) a b; [ apply StepFun_P1 | apply StepFun_P2; apply (StepFun_P1 (mkStepFun (StepFun_P6 (pre x0)))) ] ]).",
            "VernacExtend",
            "f1e410d0a10e0f3c9e16ed64302244fa4ae89295"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "rewrite Rabs_Ropp; apply H1.",
            "VernacExtend",
            "4c2e0ed6751ba045f3a0146cf0ca74972da3eb31"
        ],
        [
            "rewrite Rabs_Ropp in H1; apply H1.",
            "VernacExtend",
            "fbb8fe7f9797523bce2bb8836728cf0f4f050168"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P2 : forall (f:R -> R) (a b:R) (un:nat -> posreal) (vn wn:nat -> StepFun a b), Un_cv un 0 -> a <= b -> (forall n:nat, (forall t:R, Rmin a b <= t <= Rmax a b -> Rabs (f t - vn n t) <= wn n t) /\\ Rabs (RiemannInt_SF (wn n)) < un n) -> { l:R | Un_cv (fun N:nat => RiemannInt_SF (vn N)) l }.",
            "VernacStartTheoremProof",
            "c4ef7c294e47aaafcdfc2f1399af52eda1b39651"
        ],
        [
            "intros; apply R_complete; unfold Un_cv in H; unfold Cauchy_crit; intros; assert (H3 : 0 < eps / 2).",
            "VernacExtend",
            "3d0aec3969f81be0b9fb81eccb23d8615197d7f3"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "elim (H _ H3); intros N0 H4; exists N0; intros; unfold R_dist; unfold R_dist in H4; elim (H1 n); elim (H1 m); intros; replace (RiemannInt_SF (vn n) - RiemannInt_SF (vn m)) with (RiemannInt_SF (vn n) + -1 * RiemannInt_SF (vn m)); [ idtac | ring ]; rewrite <- StepFun_P30; apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (vn n) (vn m)))))).",
            "VernacExtend",
            "c2dc6954bef06f9915ab0e4918da0f9902aa5bcd"
        ],
        [
            "apply StepFun_P34; assumption.",
            "VernacExtend",
            "302ecaef1f1f15c052ed5bdffc68be45ba214735"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 (wn n) (wn m)))).",
            "VernacExtend",
            "90166a96794664ff42ce962f90a4172e8cb1178d"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; simpl; apply Rle_trans with (Rabs (vn n x - f x) + Rabs (f x - vn m x)).",
            "VernacExtend",
            "c108af52dfdf5160434d70154e22f0fe45afb6e1"
        ],
        [
            "replace (vn n x + -1 * vn m x) with (vn n x - f x + (f x - vn m x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "0873779caf2db15ec5723ff9cd26cdcc18fedfc5"
        ],
        [
            "assert (H12 : Rmin a b = a).",
            "VernacExtend",
            "373ac23251973a721181048ddb952796dfdf4a96"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with H0; reflexivity.",
            "VernacExtend",
            "14444f763a24333062455ab7e4bf7a971dee5be3"
        ],
        [
            "assert (H13 : Rmax a b = b).",
            "VernacExtend",
            "b34bd47e751b7464173a2f3a6f0c62f3fae8145d"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with H0; reflexivity.",
            "VernacExtend",
            "dc1ada9e3bf4a0b61bbcbd0fecea113081796ff6"
        ],
        [
            "rewrite <- H12 in H11; rewrite <- H13 in H11 at 2; rewrite Rmult_1_l; apply Rplus_le_compat.",
            "VernacExtend",
            "6ed05a8706bf195bc15130de3fb3250fd390e86e"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H9.",
            "VernacExtend",
            "19d3193144e24236fe8231c8bff101815760b4a4"
        ],
        [
            "elim H11; intros; split; left; assumption.",
            "VernacExtend",
            "81ff182b30b134490fa00086a8644f727a865b56"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "elim H11; intros; split; left; assumption.",
            "VernacExtend",
            "81ff182b30b134490fa00086a8644f727a865b56"
        ],
        [
            "rewrite StepFun_P30; rewrite Rmult_1_l; apply Rlt_trans with (un n + un m).",
            "VernacExtend",
            "e3f833f030aa8bd2d81bab05b80b35584570ce03"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (wn n)) + Rabs (RiemannInt_SF (wn m))).",
            "VernacExtend",
            "24eba5f35ef03196408e75337b267e70b0cae25e"
        ],
        [
            "apply Rplus_le_compat; apply RRle_abs.",
            "VernacExtend",
            "fcb1d0f9e584feb80212ac1141175f177af2da4e"
        ],
        [
            "apply Rplus_lt_compat; assumption.",
            "VernacExtend",
            "f1712e3b676cd8342c4fdcede2aebce6290d9ab6"
        ],
        [
            "apply Rle_lt_trans with (Rabs (un n) + Rabs (un m)).",
            "VernacExtend",
            "3b7480035127bdb4134d39004754ac4721ad59c6"
        ],
        [
            "apply Rplus_le_compat; apply RRle_abs.",
            "VernacExtend",
            "fcb1d0f9e584feb80212ac1141175f177af2da4e"
        ],
        [
            "replace (pos (un n)) with (un n - 0); [ idtac | ring ]; replace (pos (un m)) with (un m - 0); [ idtac | ring ]; rewrite (double_var eps); apply Rplus_lt_compat; apply H4; assumption.",
            "VernacExtend",
            "0a5b7ad36e76c48f0cdbfd12b087a2a35da9c268"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P3 : forall (f:R -> R) (a b:R) (un:nat -> posreal) (vn wn:nat -> StepFun a b), Un_cv un 0 -> (forall n:nat, (forall t:R, Rmin a b <= t <= Rmax a b -> Rabs (f t - vn n t) <= wn n t) /\\ Rabs (RiemannInt_SF (wn n)) < un n) -> { l:R | Un_cv (fun N:nat => RiemannInt_SF (vn N)) l }.",
            "VernacStartTheoremProof",
            "e504b31c1d56340fc8b6aff5ead5f7dd8a86ba8e"
        ],
        [
            "intros; destruct (Rle_dec a b) as [Hle|Hnle].",
            "VernacExtend",
            "dae91af41ad2fc59337ead6f8e468f1db9e2e1cc"
        ],
        [
            "apply RiemannInt_P2 with f un wn; assumption.",
            "VernacExtend",
            "a709603dc5706a83615f80ee2a1b5194dfc6b4cf"
        ],
        [
            "assert (H1 : b <= a); auto with real.",
            "VernacExtend",
            "0cba64910393650e3afdbdee37bacc425c36aa90"
        ],
        [
            "set (vn' := fun n:nat => mkStepFun (StepFun_P6 (pre (vn n)))); set (wn' := fun n:nat => mkStepFun (StepFun_P6 (pre (wn n)))); assert (H2 : forall n:nat, (forall t:R, Rmin b a <= t <= Rmax b a -> Rabs (f t - vn' n t) <= wn' n t) /\\ Rabs (RiemannInt_SF (wn' n)) < un n).",
            "VernacExtend",
            "dbf927e7da7f3b15b361e3a1b16822fc2d243c01"
        ],
        [
            "intro; elim (H0 n); intros; split.",
            "VernacExtend",
            "fc7bdc5b4115df3496d22e043cb4ea4df226038d"
        ],
        [
            "intros t (H4,H5); apply (H2 t); split; [ apply Rle_trans with (Rmin b a); try assumption; right; unfold Rmin | apply Rle_trans with (Rmax b a); try assumption; right; unfold Rmax ]; decide (Rle_dec a b) with Hnle; decide (Rle_dec b a) with H1; reflexivity.",
            "VernacExtend",
            "525f5ad4416784de68b71939e4709d494f645eca"
        ],
        [
            "generalize H3; unfold RiemannInt_SF; destruct (Rle_dec a b) as [Hleab|Hnleab]; destruct (Rle_dec b a) as [Hle'|Hnle']; unfold wn'; intros; (replace (Int_SF (subdivision_val (mkStepFun (StepFun_P6 (pre (wn n))))) (subdivision (mkStepFun (StepFun_P6 (pre (wn n)))))) with (Int_SF (subdivision_val (wn n)) (subdivision (wn n))); [ idtac | apply StepFun_P17 with (fe (wn n)) a b; [ apply StepFun_P1 | apply StepFun_P2; apply (StepFun_P1 (mkStepFun (StepFun_P6 (pre (wn n))))) ] ]).",
            "VernacExtend",
            "bcf20a3800d4550f4cd8dda8641a10c534936b5e"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "rewrite Rabs_Ropp; apply H4.",
            "VernacExtend",
            "9d3af0d2c16bce7723ab7386c5c5568ad17d985e"
        ],
        [
            "rewrite Rabs_Ropp in H4; apply H4.",
            "VernacExtend",
            "690010495904ee33dd5837c611609821857d5273"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "assert (H3 := RiemannInt_P2 _ _ _ _ H H1 H2); elim H3; intros x p; exists (- x); unfold Un_cv; unfold Un_cv in p; intros; elim (p _ H4); intros; exists x0; intros; generalize (H5 _ H6); unfold R_dist, RiemannInt_SF; destruct (Rle_dec b a) as [Hle'|Hnle']; destruct (Rle_dec a b) as [Hle''|Hnle'']; intros.",
            "VernacExtend",
            "e5ac840b3455566e1f11ea6b2b01899ba10f78d7"
        ],
        [
            "elim Hnle; assumption.",
            "VernacExtend",
            "2657f835822b81d5c3920cb0c5325ddca068c321"
        ],
        [
            "unfold vn' in H7; replace (Int_SF (subdivision_val (vn n)) (subdivision (vn n))) with (Int_SF (subdivision_val (mkStepFun (StepFun_P6 (pre (vn n))))) (subdivision (mkStepFun (StepFun_P6 (pre (vn n)))))); [ unfold Rminus; rewrite Ropp_involutive; rewrite <- Rabs_Ropp; rewrite Ropp_plus_distr; rewrite Ropp_involutive; apply H7 | symmetry ; apply StepFun_P17 with (fe (vn n)) a b; [ apply StepFun_P1 | apply StepFun_P2; apply (StepFun_P1 (mkStepFun (StepFun_P6 (pre (vn n))))) ] ].",
            "VernacExtend",
            "edb8523d214bf8215415c681d8b7d40323e78141"
        ],
        [
            "elim Hnle'; assumption.",
            "VernacExtend",
            "8c0778fa836421aeaeee8a4cde326ec7363698a3"
        ],
        [
            "elim Hnle'; assumption.",
            "VernacExtend",
            "8c0778fa836421aeaeee8a4cde326ec7363698a3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_exists : forall (f:R -> R) (a b:R) (pr:Riemann_integrable f a b) (un:nat -> posreal), Un_cv un 0 -> { l:R | Un_cv (fun N:nat => RiemannInt_SF (phi_sequence un pr N)) l }.",
            "VernacStartTheoremProof",
            "99e9f4c9bdaf2a6181ff6fb296e4d4d0e4216750"
        ],
        [
            "intros f; intros; apply RiemannInt_P3 with f un (fun n:nat => proj1_sig (phi_sequence_prop un pr n)); [ apply H | intro; apply (proj2_sig (phi_sequence_prop un pr n)) ].",
            "VernacExtend",
            "ed703f8a2aa2b7175633599750709cb6c31a97bf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P4 : forall (f:R -> R) (a b l:R) (pr1 pr2:Riemann_integrable f a b) (un vn:nat -> posreal), Un_cv un 0 -> Un_cv vn 0 -> Un_cv (fun N:nat => RiemannInt_SF (phi_sequence un pr1 N)) l -> Un_cv (fun N:nat => RiemannInt_SF (phi_sequence vn pr2 N)) l.",
            "VernacStartTheoremProof",
            "7ab6ce011df73b777023cfbe059b844e22df9763"
        ],
        [
            "unfold Un_cv; unfold R_dist; intros f; intros; assert (H3 : 0 < eps / 3).",
            "VernacExtend",
            "b5ad2b9e3d9584495cc0019d6612d67c5ecb8e58"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "elim (H _ H3); clear H; intros N0 H; elim (H0 _ H3); clear H0; intros N1 H0; elim (H1 _ H3); clear H1; intros N2 H1; set (N := max (max N0 N1) N2); exists N; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi_sequence vn pr2 n) - RiemannInt_SF (phi_sequence un pr1 n)) + Rabs (RiemannInt_SF (phi_sequence un pr1 n) - l)).",
            "VernacExtend",
            "ed2e129cd1d98d0b7d6a184f00b20391e6d8d2a4"
        ],
        [
            "replace (RiemannInt_SF (phi_sequence vn pr2 n) - l) with (RiemannInt_SF (phi_sequence vn pr2 n) - RiemannInt_SF (phi_sequence un pr1 n) + (RiemannInt_SF (phi_sequence un pr1 n) - l)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "0c34400b09d31eba1c2645cfddffe840277ea30f"
        ],
        [
            "replace eps with (2 * (eps / 3) + eps / 3).",
            "VernacExtend",
            "f876e8bd18747f7840f2ad4de8b736b9db844040"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "elim (phi_sequence_prop vn pr2 n); intros psi_vn H5; elim (phi_sequence_prop un pr1 n); intros psi_un H6; replace (RiemannInt_SF (phi_sequence vn pr2 n) - RiemannInt_SF (phi_sequence un pr1 n)) with (RiemannInt_SF (phi_sequence vn pr2 n) + -1 * RiemannInt_SF (phi_sequence un pr1 n)); [ idtac | ring ]; rewrite <- StepFun_P30.",
            "VernacExtend",
            "baf257ba826e76ee32270cfbcc3050a8fc324eb4"
        ],
        [
            "destruct (Rle_dec a b) as [Hle|Hnle].",
            "VernacExtend",
            "f3416f93eef3cf68aee486729e511d50cd6262f3"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (phi_sequence vn pr2 n) (phi_sequence un pr1 n)))))).",
            "VernacExtend",
            "0005aeeed42a0e2ed8a2ec206d12391bf5949ac8"
        ],
        [
            "apply StepFun_P34; assumption.",
            "VernacExtend",
            "302ecaef1f1f15c052ed5bdffc68be45ba214735"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 psi_un psi_vn))).",
            "VernacExtend",
            "f0988d8aec10da81ed8a0f188fed44fd74e3a2de"
        ],
        [
            "apply StepFun_P37; try assumption; intros; simpl; rewrite Rmult_1_l; apply Rle_trans with (Rabs (phi_sequence vn pr2 n x - f x) + Rabs (f x - phi_sequence un pr1 n x)).",
            "VernacExtend",
            "00b40f3f46f41dd111defb0f6aef88a710f0c0e6"
        ],
        [
            "replace (phi_sequence vn pr2 n x + -1 * phi_sequence un pr1 n x) with (phi_sequence vn pr2 n x - f x + (f x - phi_sequence un pr1 n x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "91a61029ec77a54f76422e3ad7de9b4fe9a08c60"
        ],
        [
            "assert (H10 : Rmin a b = a).",
            "VernacExtend",
            "16ba28922085f1366de21d7def67b34b7b23e825"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hle; reflexivity.",
            "VernacExtend",
            "54a9cd0a0233957cddbe2ef1db48f27e5a051ccd"
        ],
        [
            "assert (H11 : Rmax a b = b).",
            "VernacExtend",
            "2c0060866e2f0b0d35d924dfb7ae3c9c2f541f99"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hle; reflexivity.",
            "VernacExtend",
            "150c50d95cc57867c06f4d3f12dbe0dfa5ea6eb6"
        ],
        [
            "rewrite (Rplus_comm (psi_un x)); apply Rplus_le_compat.",
            "VernacExtend",
            "b846e39e0f6b03930d74c0867ff708f4c6bfa123"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; destruct H5 as (H8,H9); apply H8.",
            "VernacExtend",
            "a8925e472915bb758ce341aa08799fcfcd195fe7"
        ],
        [
            "rewrite H10; rewrite H11; elim H7; intros; split; left; assumption.",
            "VernacExtend",
            "33db93f9786fb780a91fc29faee7fb42d1c2f834"
        ],
        [
            "elim H6; intros; apply H8.",
            "VernacExtend",
            "56f13083a8d0c048f92ab6dfcfb3e0a423edc260"
        ],
        [
            "rewrite H10; rewrite H11; elim H7; intros; split; left; assumption.",
            "VernacExtend",
            "33db93f9786fb780a91fc29faee7fb42d1c2f834"
        ],
        [
            "rewrite StepFun_P30; rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat.",
            "VernacExtend",
            "8c84bd8ff1b313fcc0542e21b0305084a78f72e6"
        ],
        [
            "apply Rlt_trans with (pos (un n)).",
            "VernacExtend",
            "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
        ],
        [
            "elim H6; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF psi_un)).",
            "VernacExtend",
            "6368ca06a0a9c0ee4a22dea307fa1f66e89fb90c"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (pos (un n)) with (Rabs (un n - 0)); [ apply H; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_trans with (max N0 N1); apply le_max_l | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (un n)) ].",
            "VernacExtend",
            "805f03c7277f399746cb073932c00e8d288f9d9d"
        ],
        [
            "apply Rlt_trans with (pos (vn n)).",
            "VernacExtend",
            "37df5b47c884905a7407992d6e2e2d08117d7b20"
        ],
        [
            "elim H5; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF psi_vn)).",
            "VernacExtend",
            "9653b30e7d5f79ed8d1f7adc62b0d24612a91d05"
        ],
        [
            "apply RRle_abs; assumption.",
            "VernacExtend",
            "6b3aee25e8d2f3523cc6d59c1a37121f75299b27"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (pos (vn n)) with (Rabs (vn n - 0)); [ apply H0; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_trans with (max N0 N1); [ apply le_max_r | apply le_max_l ] | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (vn n)) ].",
            "VernacExtend",
            "8e631454750b95d2ed069cae43a40d452b34cf01"
        ],
        [
            "rewrite StepFun_P39; rewrite Rabs_Ropp; apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 (-1) (phi_sequence vn pr2 n) (phi_sequence un pr1 n))))))))).",
            "VernacExtend",
            "10ac3e74933a44593018d264fbddbb0311b93112"
        ],
        [
            "apply StepFun_P34; try auto with real.",
            "VernacExtend",
            "a4e25ecc14b61638a2451cf7c2d44ad269aa46b6"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 1 psi_vn psi_un)))))).",
            "VernacExtend",
            "9c2fc001900b9ed329c73d589a596bb3a12d4520"
        ],
        [
            "apply StepFun_P37.",
            "VernacExtend",
            "10e4d07c0d3b3c6442e9920725911861218b096b"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "intros; simpl; rewrite Rmult_1_l; apply Rle_trans with (Rabs (phi_sequence vn pr2 n x - f x) + Rabs (f x - phi_sequence un pr1 n x)).",
            "VernacExtend",
            "0a0c8405c78607eaee73fe945c56492f1adbef23"
        ],
        [
            "replace (phi_sequence vn pr2 n x + -1 * phi_sequence un pr1 n x) with (phi_sequence vn pr2 n x - f x + (f x - phi_sequence un pr1 n x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "91a61029ec77a54f76422e3ad7de9b4fe9a08c60"
        ],
        [
            "assert (H10 : Rmin a b = b).",
            "VernacExtend",
            "0af78acd1346d67fc706b36fb9767b07154e3503"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hnle; reflexivity.",
            "VernacExtend",
            "e41d7bb2bb845a289c4ea72b96377727bd370eb0"
        ],
        [
            "assert (H11 : Rmax a b = a).",
            "VernacExtend",
            "3673febf959d0e8fc805bf0c66f4d6038406c49b"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hnle; reflexivity.",
            "VernacExtend",
            "1e3801bab9f44191a09654eafd3fee3947c6db75"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; elim H5; intros; apply H8.",
            "VernacExtend",
            "7f4e6fbcf5e867d815c72e88d66ccfae9c561f6a"
        ],
        [
            "rewrite H10; rewrite H11; elim H7; intros; split; left; assumption.",
            "VernacExtend",
            "33db93f9786fb780a91fc29faee7fb42d1c2f834"
        ],
        [
            "elim H6; intros; apply H8.",
            "VernacExtend",
            "56f13083a8d0c048f92ab6dfcfb3e0a423edc260"
        ],
        [
            "rewrite H10; rewrite H11; elim H7; intros; split; left; assumption.",
            "VernacExtend",
            "33db93f9786fb780a91fc29faee7fb42d1c2f834"
        ],
        [
            "rewrite <- (Ropp_involutive (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 1 psi_vn psi_un))))))) ; rewrite <- StepFun_P39; rewrite StepFun_P30; rewrite Rmult_1_l; rewrite double; rewrite Ropp_plus_distr; apply Rplus_lt_compat.",
            "VernacExtend",
            "bfdb3e99dcb593556a1909cc24c335fa07edce77"
        ],
        [
            "apply Rlt_trans with (pos (vn n)).",
            "VernacExtend",
            "37df5b47c884905a7407992d6e2e2d08117d7b20"
        ],
        [
            "elim H5; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF psi_vn)).",
            "VernacExtend",
            "9653b30e7d5f79ed8d1f7adc62b0d24612a91d05"
        ],
        [
            "rewrite <- Rabs_Ropp; apply RRle_abs.",
            "VernacExtend",
            "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (pos (vn n)) with (Rabs (vn n - 0)); [ apply H0; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_trans with (max N0 N1); [ apply le_max_r | apply le_max_l ] | unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (vn n)) ].",
            "VernacExtend",
            "56d39b968aabdcc0a71db8b26fb3f57f32ae42b5"
        ],
        [
            "apply Rlt_trans with (pos (un n)).",
            "VernacExtend",
            "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
        ],
        [
            "elim H6; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF psi_un)).",
            "VernacExtend",
            "6368ca06a0a9c0ee4a22dea307fa1f66e89fb90c"
        ],
        [
            "rewrite <- Rabs_Ropp; apply RRle_abs; assumption.",
            "VernacExtend",
            "dd8647b31f1d9bb212768d8e6b7bbaca2878dbdb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (pos (un n)) with (Rabs (un n - 0)); [ apply H; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_trans with (max N0 N1); apply le_max_l | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (un n)) ].",
            "VernacExtend",
            "805f03c7277f399746cb073932c00e8d288f9d9d"
        ],
        [
            "apply H1; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_r.",
            "VernacExtend",
            "c24caf5d222a8793527dbfb79ef1cd55dde22b51"
        ],
        [
            "apply Rmult_eq_reg_l with 3; [ unfold Rdiv; rewrite Rmult_plus_distr_l; do 2 rewrite (Rmult_comm 3); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
            "VernacExtend",
            "d5fc6e7e3279ce291cc825d25d97f8b656807ff2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RinvN_pos : forall n:nat, 0 < / (INR n + 1).",
            "VernacStartTheoremProof",
            "20360881dfcfd82a71d41d6fec49b0fd23a3c607"
        ],
        [
            "intro; apply Rinv_0_lt_compat; apply Rplus_le_lt_0_compat; [ apply pos_INR | apply Rlt_0_1 ].",
            "VernacExtend",
            "491d2980eca3d18aff4ece4643c4253cb6a00a4a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition RinvN (N:nat) : posreal := mkposreal _ (RinvN_pos N).",
            "VernacDefinition",
            "7e7e12aa0d85c07d8a8e8ae1a031220b48ca5a92"
        ],
        [
            "Lemma RinvN_cv : Un_cv RinvN 0.",
            "VernacStartTheoremProof",
            "2e77ded7e80c0639646c77e3dafe3156ba12d8b8"
        ],
        [
            "unfold Un_cv; intros; assert (H0 := archimed (/ eps)); elim H0; clear H0; intros; assert (H2 : (0 <= up (/ eps))%Z).",
            "VernacExtend",
            "b5e4a9d1630e1687d363b8dd0141a1677d7c53e0"
        ],
        [
            "apply le_IZR; left; apply Rlt_trans with (/ eps); [ apply Rinv_0_lt_compat; assumption | assumption ].",
            "VernacExtend",
            "316856efd6b3dbdc083a44a9f9fbc38cdb8274ec"
        ],
        [
            "elim (IZN _ H2); intros; exists x; intros; unfold R_dist; simpl; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; assert (H5 : 0 < INR n + 1).",
            "VernacExtend",
            "36932a4ac9c95b365862081810cf0e83a7dfa912"
        ],
        [
            "apply Rplus_le_lt_0_compat; [ apply pos_INR | apply Rlt_0_1 ].",
            "VernacExtend",
            "1acd9b5f3e7837b67b7c1a8ddb6ff74020e01b2b"
        ],
        [
            "rewrite Rabs_right; [ idtac | left; change (0 < / (INR n + 1)); apply Rinv_0_lt_compat; assumption ]; apply Rle_lt_trans with (/ (INR x + 1)).",
            "VernacExtend",
            "6cf485971e723394b1075c7fa30d9f441e7a34b6"
        ],
        [
            "apply Rinv_le_contravar.",
            "VernacExtend",
            "28ea2dd655f9d8c890013606f785cc34c54c4a71"
        ],
        [
            "apply Rplus_le_lt_0_compat; [ apply pos_INR | apply Rlt_0_1 ].",
            "VernacExtend",
            "1acd9b5f3e7837b67b7c1a8ddb6ff74020e01b2b"
        ],
        [
            "apply Rplus_le_compat_r; apply le_INR; apply H4.",
            "VernacExtend",
            "cb98a54d8ee0392ff0fe0213228ce19446f21cd8"
        ],
        [
            "rewrite <- (Rinv_involutive eps).",
            "VernacExtend",
            "3255d4eb7914a1b4381d0b1474bd252e750a2970"
        ],
        [
            "apply Rinv_lt_contravar.",
            "VernacExtend",
            "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "apply Rplus_le_lt_0_compat; [ apply pos_INR | apply Rlt_0_1 ].",
            "VernacExtend",
            "1acd9b5f3e7837b67b7c1a8ddb6ff74020e01b2b"
        ],
        [
            "apply Rlt_trans with (INR x); [ rewrite INR_IZR_INZ; rewrite <- H3; apply H0 | pattern (INR x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1 ].",
            "VernacExtend",
            "a9a00fb20fe24c839c92779b201848d595ef8ce7"
        ],
        [
            "red; intro; rewrite H6 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "17d6bc08ceabbb751a93f39804561b1ad93c32d6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_integrable_ext : forall f g a b, (forall x, Rmin a b <= x <= Rmax a b -> f x = g x) -> Riemann_integrable f a b -> Riemann_integrable g a b.",
            "VernacStartTheoremProof",
            "ad2f92e0c452300118d1b24e0edd280ada7217e0"
        ],
        [
            "intros f g a b fg rif eps; destruct (rif eps) as [phi [psi [P1 P2]]].",
            "VernacExtend",
            "d7cb89086c5692b873f25b174e764abd8dbb48b4"
        ],
        [
            "exists phi; exists psi;split;[ | assumption ].",
            "VernacExtend",
            "f4f8ba244f16907d377ec454919ecef7a68b7ede"
        ],
        [
            "intros t intt; rewrite <- fg;[ | assumption].",
            "VernacExtend",
            "86f84e2316901cf93574430081ae5eadb31c9f27"
        ],
        [
            "apply P1; assumption.",
            "VernacExtend",
            "298a118599e93295a426f85982a084507913308d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition RiemannInt (f:R -> R) (a b:R) (pr:Riemann_integrable f a b) : R := let (a,_) := RiemannInt_exists pr RinvN RinvN_cv in a.",
            "VernacDefinition",
            "8e1a263b5649705a449403e9d1be6e34894b6ba7"
        ],
        [
            "Lemma RiemannInt_P5 : forall (f:R -> R) (a b:R) (pr1 pr2:Riemann_integrable f a b), RiemannInt pr1 = RiemannInt pr2.",
            "VernacStartTheoremProof",
            "6d78d6198e3ccd3e8456e0127dc6ca77815548f1"
        ],
        [
            "intros; unfold RiemannInt; case (RiemannInt_exists pr1 RinvN RinvN_cv) as (x,HUn); case (RiemannInt_exists pr2 RinvN RinvN_cv) as (x0,HUn0); eapply UL_sequence; [ apply HUn | apply RiemannInt_P4 with pr2 RinvN; apply RinvN_cv || assumption ].",
            "VernacExtend",
            "c1b90f67fc9e11ea0d8f562db30a9cc986b71ab2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maxN : forall (a b:R) (del:posreal), a < b -> { n:nat | a + INR n * del < b /\\ b <= a + INR (S n) * del }.",
            "VernacStartTheoremProof",
            "b9f8edf227fab85fe84883084baaf74b42334b46"
        ],
        [
            "intros; set (I := fun n:nat => a + INR n * del < b); assert (H0 : exists n : nat, I n).",
            "VernacExtend",
            "6ccc9f61a98fc8c8fb42d0deb1537c455c0b7142"
        ],
        [
            "exists 0%nat; unfold I; rewrite Rmult_0_l; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "f01a135fa4f6c0a75794afe888418126f29a2a73"
        ],
        [
            "cut (Nbound I).",
            "VernacExtend",
            "1a705c6645be8122edac50d9047e71df38c5c6bb"
        ],
        [
            "intro; assert (H2 := Nzorn H0 H1); elim H2; intros x p; exists x; elim p; intros; split.",
            "VernacExtend",
            "e886627bd8d3635695d742d5dd73ab44e4d7b095"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "destruct (total_order_T (a + INR (S x) * del) b) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "c2f694d0519b132cea9a583baf5205ab55e3e7d9"
        ],
        [
            "assert (H5 := H4 (S x) Hlt); elim (le_Sn_n _ H5).",
            "VernacExtend",
            "dda703c099bad8341d9eece732cc1247d1108884"
        ],
        [
            "right; symmetry ; assumption.",
            "VernacExtend",
            "619229e235b2e1c46f07c7fda7dcc511f49ea7b6"
        ],
        [
            "left; apply Hgt.",
            "VernacExtend",
            "7913cad9687254c1e7d2142068b28a006e2fea73"
        ],
        [
            "assert (H1 : 0 <= (b - a) / del).",
            "VernacExtend",
            "0ac0fe29eecb9c82f63a48a03e2552e90f9426ab"
        ],
        [
            "unfold Rdiv; apply Rmult_le_pos; [ apply Rge_le; apply Rge_minus; apply Rle_ge; left; apply H | left; apply Rinv_0_lt_compat; apply (cond_pos del) ].",
            "VernacExtend",
            "7cc9cdd74acb9bf09629348d6b824f416c145cd1"
        ],
        [
            "elim (archimed ((b - a) / del)); intros; assert (H4 : (0 <= up ((b - a) / del))%Z).",
            "VernacExtend",
            "76a9f1d4d24b1f150d8657124fe8dd1afc5906f9"
        ],
        [
            "apply le_IZR; simpl; left; apply Rle_lt_trans with ((b - a) / del); assumption.",
            "VernacExtend",
            "200a915b18024ddc628e0b980cd1254ad19a6070"
        ],
        [
            "assert (H5 := IZN _ H4); elim H5; clear H5; intros N H5; unfold Nbound; exists N; intros; unfold I in H6; apply INR_le; rewrite H5 in H2; rewrite <- INR_IZR_INZ in H2; left; apply Rle_lt_trans with ((b - a) / del); try assumption; apply Rmult_le_reg_l with (pos del); [ apply (cond_pos del) | unfold Rdiv; rewrite <- (Rmult_comm (/ del)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite Rmult_comm; apply Rplus_le_reg_l with a; replace (a + (b - a)) with b; [ left; assumption | ring ] | assert (H7 := cond_pos del); red; intro; rewrite H8 in H7; elim (Rlt_irrefl _ H7) ] ].",
            "VernacExtend",
            "0499481c525211534baa84eb5badc112f6220802"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint SubEquiN (N:nat) (x y:R) (del:posreal) : Rlist := match N with | O => cons y nil | S p => cons x (SubEquiN p (x + del) y del) end.",
            "VernacFixpoint",
            "09acbd9c80060feff6d848ad0504bb7057e6f16a"
        ],
        [
            "Definition max_N (a b:R) (del:posreal) (h:a < b) : nat := let (N,_) := maxN del h in N.",
            "VernacDefinition",
            "d33beb05a95bd026e245290b313494bbe73fdca3"
        ],
        [
            "Definition SubEqui (a b:R) (del:posreal) (h:a < b) : Rlist := SubEquiN (S (max_N del h)) a b del.",
            "VernacDefinition",
            "c40f1e66bfec001883b748344b18718b0fd83217"
        ],
        [
            "Lemma Heine_cor1 : forall (f:R -> R) (a b:R), a < b -> (forall x:R, a <= x <= b -> continuity_pt f x) -> forall eps:posreal, { delta:posreal | delta <= b - a /\\ (forall x y:R, a <= x <= b -> a <= y <= b -> Rabs (x - y) < delta -> Rabs (f x - f y) < eps) }.",
            "VernacStartTheoremProof",
            "80b84cc1dfa5fd7228bc9b4b2053e0eda5d93429"
        ],
        [
            "intro f; intros; set (E := fun l:R => 0 < l <= b - a /\\ (forall x y:R, a <= x <= b -> a <= y <= b -> Rabs (x - y) < l -> Rabs (f x - f y) < eps)); assert (H1 : bound E).",
            "VernacExtend",
            "8672fff38db4989af096f64cab268002309b1c49"
        ],
        [
            "unfold bound; exists (b - a); unfold is_upper_bound; intros; unfold E in H1; elim H1; clear H1; intros H1 _; elim H1; intros; assumption.",
            "VernacExtend",
            "65c04f1845fb0d663b530e32fd60bf50fd2d241c"
        ],
        [
            "assert (H2 : exists x : R, E x).",
            "VernacExtend",
            "99120bee9cba46b508ca6b8e87df6d203c973e5c"
        ],
        [
            "assert (H2 := Heine f (fun x:R => a <= x <= b) (compact_P3 a b) H0 eps); elim H2; intros; exists (Rmin x (b - a)); unfold E; split; [ split; [ unfold Rmin; case (Rle_dec x (b - a)); intro; [ apply (cond_pos x) | apply Rlt_Rminus; assumption ] | apply Rmin_r ] | intros; apply H3; try assumption; apply Rlt_le_trans with (Rmin x (b - a)); [ assumption | apply Rmin_l ] ].",
            "VernacExtend",
            "475d8b683d4cebc85f55892d25730b2b898000e9"
        ],
        [
            "assert (H3 := completeness E H1 H2); elim H3; intros x p; cut (0 < x <= b - a).",
            "VernacExtend",
            "55ce17ba55bce02fc4ab96a5c0b52ba6a0d7444e"
        ],
        [
            "intro; elim H4; clear H4; intros; exists (mkposreal _ H4); split.",
            "VernacExtend",
            "bdaf4e554b71c315563318a471081b007b578285"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "unfold is_lub in p; elim p; intros; unfold is_upper_bound in H6; set (D := Rabs (x0 - y)).",
            "VernacExtend",
            "c1a7d86e2b6fed999f5da5c4de8c57593b68ce6d"
        ],
        [
            "assert (H11: ((exists y : R, D < y /\\ E y) \\/ (forall y : R, not (D < y /\\ E y)) -> False) -> False).",
            "VernacExtend",
            "7b48cc79d3bc5fd048097df0b3399937d2ec2e16"
        ],
        [
            "clear; intros H; apply H.",
            "VernacExtend",
            "adbbdadcb19dec7b6c2e63cfa32ebeae2fdb3230"
        ],
        [
            "right; intros y0 H0; apply H.",
            "VernacExtend",
            "c86a78693db0e3ca923b2da47e0d6e2a57c49913"
        ],
        [
            "left; now exists y0.",
            "VernacExtend",
            "aa2815d00d773f443a4d13c7f00c3c5eebf0e9c0"
        ],
        [
            "apply Rnot_le_lt; intros H30.",
            "VernacExtend",
            "20508be2c78f5136d070c6e17926fcc427bf0d91"
        ],
        [
            "apply H11; clear H11; intros H11.",
            "VernacExtend",
            "3e245b8737259b63a84184c2f2f7151f8bab365c"
        ],
        [
            "revert H30; apply Rlt_not_le.",
            "VernacExtend",
            "26accdea276b507bd2f9f8aa61d46fd750d6344d"
        ],
        [
            "destruct H11 as [H11|H12].",
            "VernacExtend",
            "a40962c2c4455041753acb1136c05a4de437369c"
        ],
        [
            "elim H11; intros; elim H12; clear H12; intros; unfold E in H13; elim H13; intros; apply H15; assumption.",
            "VernacExtend",
            "97b0e14d77fbf5b3716377de9b8fec6e14aff35b"
        ],
        [
            "assert (H13 : is_upper_bound E D).",
            "VernacExtend",
            "10135751db2c3f079bce6e52e4310b057ffd48c3"
        ],
        [
            "unfold is_upper_bound; intros; assert (H14 := H12 x1); apply Rnot_lt_le; contradict H14; now split.",
            "VernacExtend",
            "fe07af829400b6e3d5a0a3f13aecc3121aa4cd1e"
        ],
        [
            "assert (H14 := H7 _ H13); elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H14 H10)).",
            "VernacExtend",
            "ebb80aa186033eae8292c5b99fd5deceb4900400"
        ],
        [
            "unfold is_lub in p; unfold is_upper_bound in p; elim p; clear p; intros; split.",
            "VernacExtend",
            "4d51bd63b6b748405e138b8e9483f688c396c2b2"
        ],
        [
            "elim H2; intros; assert (H7 := H4 _ H6); unfold E in H6; elim H6; clear H6; intros H6 _; elim H6; intros; apply Rlt_le_trans with x0; assumption.",
            "VernacExtend",
            "18669c88c23c71cf7e21968beaf26c0f4ff7423d"
        ],
        [
            "apply H5; intros; unfold E in H6; elim H6; clear H6; intros H6 _; elim H6; intros; assumption.",
            "VernacExtend",
            "5a26cec85d25a7dcfc2638590834c1c7224f0cb8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Heine_cor2 : forall (f:R -> R) (a b:R), (forall x:R, a <= x <= b -> continuity_pt f x) -> forall eps:posreal, { delta:posreal | forall x y:R, a <= x <= b -> a <= y <= b -> Rabs (x - y) < delta -> Rabs (f x - f y) < eps }.",
            "VernacStartTheoremProof",
            "b8a460c9411f9297fa0c327c17fd6e117e5a30e3"
        ],
        [
            "intro f; intros; destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "9e405b656714206eedf7deb1aa5350facdeb2656"
        ],
        [
            "assert (H0 := Heine_cor1 Hlt H eps); elim H0; intros x p; exists x; elim p; intros; apply H2; assumption.",
            "VernacExtend",
            "635c9a76923ee48df7853f8d8bfb2716676f1cda"
        ],
        [
            "exists (mkposreal _ Rlt_0_1); intros; assert (H3 : x = y); [ elim H0; elim H1; intros; rewrite Heq in H3, H5; apply Rle_antisym; apply Rle_trans with b; assumption | rewrite H3; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (cond_pos eps) ].",
            "VernacExtend",
            "1fe3db0e0cde4fa6eef81ba38debd9fe7e9dce1e"
        ],
        [
            "exists (mkposreal _ Rlt_0_1); intros; elim H0; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ (Rle_trans _ _ _ H3 H4) Hgt)).",
            "VernacExtend",
            "a9e410e2c9c362eead33ab07eb2ab16133f819e5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubEqui_P1 : forall (a b:R) (del:posreal) (h:a < b), pos_Rl (SubEqui del h) 0 = a.",
            "VernacStartTheoremProof",
            "4ab4f90b2c68509c00c24b288d60b0e99bb8de37"
        ],
        [
            "intros; unfold SubEqui; case (maxN del h); intros; reflexivity.",
            "VernacExtend",
            "e1a8a5edcb1fba52a4b50c924279ef78a9111e28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubEqui_P2 : forall (a b:R) (del:posreal) (h:a < b), pos_Rl (SubEqui del h) (pred (Rlength (SubEqui del h))) = b.",
            "VernacStartTheoremProof",
            "2330551ad8f50b2dad3a5dab8af65147ca10baa1"
        ],
        [
            "intros; unfold SubEqui; destruct (maxN del h)as (x,_).",
            "VernacExtend",
            "9a3f89076fd0640ba26467acad76758ec65566a4"
        ],
        [
            "cut (forall (x:nat) (a:R) (del:posreal), pos_Rl (SubEquiN (S x) a b del) (pred (Rlength (SubEquiN (S x) a b del))) = b); [ intro; apply H | simple induction x0; [ intros; reflexivity | intros; change (pos_Rl (SubEquiN (S n) (a0 + del0) b del0) (pred (Rlength (SubEquiN (S n) (a0 + del0) b del0))) = b) ; apply H ] ].",
            "VernacExtend",
            "142fdec88be3d1f805cfae3015f8478b52ecb33c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubEqui_P3 : forall (N:nat) (a b:R) (del:posreal), Rlength (SubEquiN N a b del) = S N.",
            "VernacStartTheoremProof",
            "07ebd8b035a44cdf117e9ba60f1588bb20a6a855"
        ],
        [
            "simple induction N; intros; [ reflexivity | simpl; rewrite H; reflexivity ].",
            "VernacExtend",
            "8153aad2b260a71fe5f0b39c00907004ddad3a70"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubEqui_P4 : forall (N:nat) (a b:R) (del:posreal) (i:nat), (i < S N)%nat -> pos_Rl (SubEquiN (S N) a b del) i = a + INR i * del.",
            "VernacStartTheoremProof",
            "a0b15e157810dc91d46cdcbf50fd3563bb809ad9"
        ],
        [
            "simple induction N; [ intros; inversion H; [ simpl; ring | elim (le_Sn_O _ H1) ] | intros; induction i as [| i Hreci]; [ simpl; ring | change (pos_Rl (SubEquiN (S n) (a + del) b del) i = a + INR (S i) * del) ; rewrite H; [ rewrite S_INR; ring | apply lt_S_n; apply H0 ] ] ].",
            "VernacExtend",
            "38636119ecb813ce4f0f751191a56bd37cfec080"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubEqui_P5 : forall (a b:R) (del:posreal) (h:a < b), Rlength (SubEqui del h) = S (S (max_N del h)).",
            "VernacStartTheoremProof",
            "b0f79be8d0673db55a418bf4a846bfbf649effb5"
        ],
        [
            "intros; unfold SubEqui; apply SubEqui_P3.",
            "VernacExtend",
            "3dc15d7d4cb5b7c065c7cef6869b165f5db30695"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubEqui_P6 : forall (a b:R) (del:posreal) (h:a < b) (i:nat), (i < S (max_N del h))%nat -> pos_Rl (SubEqui del h) i = a + INR i * del.",
            "VernacStartTheoremProof",
            "6aaff3b66f2684858c0d35538cbff5337d5b04ee"
        ],
        [
            "intros; unfold SubEqui; apply SubEqui_P4; assumption.",
            "VernacExtend",
            "d0a08818e0c583e1f7b3057948e88fd1a364982b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubEqui_P7 : forall (a b:R) (del:posreal) (h:a < b), ordered_Rlist (SubEqui del h).",
            "VernacStartTheoremProof",
            "cefd6f8d9c4befaca6ca407dcc9aec28dd7b297c"
        ],
        [
            "intros; unfold ordered_Rlist; intros; rewrite SubEqui_P5 in H; simpl in H; inversion H.",
            "VernacExtend",
            "7999cb60a770be3dedf3018c80274224c0a0379e"
        ],
        [
            "rewrite (SubEqui_P6 del h (i:=(max_N del h))).",
            "VernacExtend",
            "4390b84bbbe02b09fd4956e012b249f8f3536cfe"
        ],
        [
            "replace (S (max_N del h)) with (pred (Rlength (SubEqui del h))).",
            "VernacExtend",
            "af274a5040b520fa2f566433b11f54cf2fe15fab"
        ],
        [
            "rewrite SubEqui_P2; unfold max_N; case (maxN del h) as (?&?&?); left; assumption.",
            "VernacExtend",
            "1e2b37b5e1fc33fb740beef68dee48170f0793c8"
        ],
        [
            "rewrite SubEqui_P5; reflexivity.",
            "VernacExtend",
            "c053888d945912bd246bba311246ebaf1a13c1ad"
        ],
        [
            "apply lt_n_Sn.",
            "VernacExtend",
            "bf57775ed78638cd8c5e7d3ea3f196807acdb119"
        ],
        [
            "repeat rewrite SubEqui_P6.",
            "VernacExtend",
            "273d9efffba58b14d769da5c7f9dfd041476d612"
        ],
        [
            "3: assumption.",
            "VernacExtend",
            "fd7a7200b41c0b95710f545af6087fafa2af8177"
        ],
        [
            "2: apply le_lt_n_Sm; assumption.",
            "VernacExtend",
            "963798368679cd813c683d4ec95ae5b495f5c538"
        ],
        [
            "apply Rplus_le_compat_l; rewrite S_INR; rewrite Rmult_plus_distr_r; pattern (INR i * del) at 1; rewrite <- Rplus_0_r; apply Rplus_le_compat_l; rewrite Rmult_1_l; left; apply (cond_pos del).",
            "VernacExtend",
            "d170e22839d1fd9995950a48876609f2a3c6bd19"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubEqui_P8 : forall (a b:R) (del:posreal) (h:a < b) (i:nat), (i < Rlength (SubEqui del h))%nat -> a <= pos_Rl (SubEqui del h) i <= b.",
            "VernacStartTheoremProof",
            "51f34376af3635b580c185153110691c7430d55c"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "pattern a at 1; rewrite <- (SubEqui_P1 del h); apply RList_P5.",
            "VernacExtend",
            "e1678bec069ce5f487e50543ff2c9b14b504e0f7"
        ],
        [
            "apply SubEqui_P7.",
            "VernacExtend",
            "491def7508342385ecc457ebf49c8c93c7b12e96"
        ],
        [
            "elim (RList_P3 (SubEqui del h) (pos_Rl (SubEqui del h) i)); intros; apply H1; exists i; split; [ reflexivity | assumption ].",
            "VernacExtend",
            "ef198cec44ea381e4ff93661536b7a11b0e0f9cf"
        ],
        [
            "pattern b at 2; rewrite <- (SubEqui_P2 del h); apply RList_P7; [ apply SubEqui_P7 | elim (RList_P3 (SubEqui del h) (pos_Rl (SubEqui del h) i)); intros; apply H1; exists i; split; [ reflexivity | assumption ] ].",
            "VernacExtend",
            "2475fd1329d3c6f1ba1d61bab55635a2ccf51d1d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SubEqui_P9 : forall (a b:R) (del:posreal) (f:R -> R) (h:a < b), { g:StepFun a b | g b = f b /\\ (forall i:nat, (i < pred (Rlength (SubEqui del h)))%nat -> constant_D_eq g (co_interval (pos_Rl (SubEqui del h) i) (pos_Rl (SubEqui del h) (S i))) (f (pos_Rl (SubEqui del h) i))) }.",
            "VernacStartTheoremProof",
            "71a8107d3880a298149c8566d0177e2f7512ca85"
        ],
        [
            "intros; apply StepFun_P38; [ apply SubEqui_P7 | apply SubEqui_P1 | apply SubEqui_P2 ].",
            "VernacExtend",
            "a2bdecc87dc0ba94235149d793acc0030fe36f8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P6 : forall (f:R -> R) (a b:R), a < b -> (forall x:R, a <= x <= b -> continuity_pt f x) -> Riemann_integrable f a b.",
            "VernacStartTheoremProof",
            "60e3168ac81bc7ffa9064df01a46b1d5e4b3d2ac"
        ],
        [
            "intros; unfold Riemann_integrable; intro; assert (H1 : 0 < eps / (2 * (b - a))).",
            "VernacExtend",
            "89a4962bdb85407d02bb91e7870d2af63cc72b20"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; apply Rmult_lt_0_compat; [ prove_sup0 | apply Rlt_Rminus; assumption ] ].",
            "VernacExtend",
            "11ab9f0e4d6205f2d09b78e7a7b1266ce15e47e4"
        ],
        [
            "assert (H2 : Rmin a b = a).",
            "VernacExtend",
            "5fc26c39d140ebeb06f712c19b0086e3e212f711"
        ],
        [
            "apply Rlt_le in H.",
            "VernacExtend",
            "2e0c673244bd9ee461245865416a985193082ebd"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with H; reflexivity.",
            "VernacExtend",
            "3b29ea8d93350e7e7c47fa6d9cc18d181c272f83"
        ],
        [
            "assert (H3 : Rmax a b = b).",
            "VernacExtend",
            "f4bff52581b5bb1551d0e155f49d41888ac3b860"
        ],
        [
            "apply Rlt_le in H.",
            "VernacExtend",
            "2e0c673244bd9ee461245865416a985193082ebd"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with H; reflexivity.",
            "VernacExtend",
            "a38044ef0a7a46792cf6035f8edfa2f15d360b04"
        ],
        [
            "elim (Heine_cor2 H0 (mkposreal _ H1)); intros del H4; elim (SubEqui_P9 del f H); intros phi [H5 H6]; split with phi; split with (mkStepFun (StepFun_P4 a b (eps / (2 * (b - a))))); split.",
            "VernacExtend",
            "5ea633f1af4fe911babcd2e538493146cb033328"
        ],
        [
            "2: rewrite StepFun_P18; unfold Rdiv; rewrite Rinv_mult_distr.",
            "VernacExtend",
            "714d263361b7a849e33004ff9cfdfcac4f4ac252"
        ],
        [
            "2: do 2 rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "fae880eec239ce10303d734b8b3538803b3e0ca8"
        ],
        [
            "2: rewrite Rmult_1_r; rewrite Rabs_right.",
            "VernacExtend",
            "e29287b52c4082fbf5b30c01d8b5ffb98d71c4b2"
        ],
        [
            "2: apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "4c81df0f33b42983d40c09043d3c0c2809de5d4a"
        ],
        [
            "2: prove_sup0.",
            "VernacExtend",
            "88581f7438a6948d1cbf5349e78df7258556b754"
        ],
        [
            "2: rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "4e2dec80ce122cb52a08414f92500507ea05e3ab"
        ],
        [
            "2: rewrite Rmult_1_l; pattern (pos eps) at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; apply (cond_pos eps).",
            "VernacExtend",
            "a4e902be8cfbec20299d054f11ff46f05d6be3c5"
        ],
        [
            "2: discrR.",
            "VernacExtend",
            "0216fb7d2a324b5b877e2d00bde1882d87098ce9"
        ],
        [
            "2: apply Rle_ge; left; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "88e5feea6988a88505e2738fb01828d16af69062"
        ],
        [
            "2: apply (cond_pos eps).",
            "VernacExtend",
            "794df4a8866f1b6ff1ba71d48a25e575fbab2d51"
        ],
        [
            "2: apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "07e4cff9d8eac37a38db41fa4d2f3cc58e6a3ce3"
        ],
        [
            "2: apply Rminus_eq_contra; red; intro; clear H6; rewrite H7 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "5cffa97c0116e74c2b507fc41e975da8cf8a6b0e"
        ],
        [
            "2: discrR.",
            "VernacExtend",
            "0216fb7d2a324b5b877e2d00bde1882d87098ce9"
        ],
        [
            "2: apply Rminus_eq_contra; red; intro; clear H6; rewrite H7 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "5cffa97c0116e74c2b507fc41e975da8cf8a6b0e"
        ],
        [
            "intros; rewrite H2 in H7; rewrite H3 in H7; simpl; unfold fct_cte; cut (forall t:R, a <= t <= b -> t = b \\/ (exists i : nat, (i < pred (Rlength (SubEqui del H)))%nat /\\ co_interval (pos_Rl (SubEqui del H) i) (pos_Rl (SubEqui del H) (S i)) t)).",
            "VernacExtend",
            "c10eeaeb33fa52f808dfe27609a0ad25857d932a"
        ],
        [
            "intro; elim (H8 _ H7); intro.",
            "VernacExtend",
            "5ec2c6741be4bcfd05f87b0662aad2ab64d1e575"
        ],
        [
            "rewrite H9; rewrite H5; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; left; assumption.",
            "VernacExtend",
            "1589b1f96a653c04480deb3b044553d462a78e44"
        ],
        [
            "elim H9; clear H9; intros I [H9 H10]; assert (H11 := H6 I H9 t H10); rewrite H11; left; apply H4.",
            "VernacExtend",
            "c1c7c8f1e277296554e96ed41330243ef439704b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply SubEqui_P8; apply lt_trans with (pred (Rlength (SubEqui del H))).",
            "VernacExtend",
            "e9e85beac1acbc235a7f2190006fafe27b648d9b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H12 in H9; elim (lt_n_O _ H9).",
            "VernacExtend",
            "eefcf7b07e6583763275463dea6f2e4da5d1be64"
        ],
        [
            "unfold co_interval in H10; elim H10; clear H10; intros; rewrite Rabs_right.",
            "VernacExtend",
            "9f0baafba53838d761f6847ea60d9ceaff9ad08c"
        ],
        [
            "rewrite SubEqui_P5 in H9; simpl in H9; inversion H9.",
            "VernacExtend",
            "579c3547c0aab2e59536bce1d1d4621e295cb466"
        ],
        [
            "apply Rplus_lt_reg_l with (pos_Rl (SubEqui del H) (max_N del H)).",
            "VernacExtend",
            "399ea768f09d33b45dfffbb70a681f18560f43d3"
        ],
        [
            "replace (pos_Rl (SubEqui del H) (max_N del H) + (t - pos_Rl (SubEqui del H) (max_N del H))) with t; [ idtac | ring ]; apply Rlt_le_trans with b.",
            "VernacExtend",
            "82966e34294831b63ff6c57c1ee7b546ac7ace15"
        ],
        [
            "rewrite H14 in H12; assert (H13 : S (max_N del H) = pred (Rlength (SubEqui del H))).",
            "VernacExtend",
            "a94b2267b6ce2a270c1db8defedcbfcb8c449a60"
        ],
        [
            "rewrite SubEqui_P5; reflexivity.",
            "VernacExtend",
            "c053888d945912bd246bba311246ebaf1a13c1ad"
        ],
        [
            "rewrite H13 in H12; rewrite SubEqui_P2 in H12; apply H12.",
            "VernacExtend",
            "8762e9e787b680ce9a7effc5d95410611e245cac"
        ],
        [
            "rewrite SubEqui_P6.",
            "VernacExtend",
            "1e4a6c407833b564f58c315ac54e09877d7c7462"
        ],
        [
            "2: apply lt_n_Sn.",
            "VernacExtend",
            "b9ea63a834d71a07160460993a1a5f06e90049f7"
        ],
        [
            "unfold max_N; destruct (maxN del H) as (?&?&H13); replace (a + INR x * del + del) with (a + INR (S x) * del); [ assumption | rewrite S_INR; ring ].",
            "VernacExtend",
            "121c64f31bceb06b7aed81858bf3b745660f742b"
        ],
        [
            "apply Rplus_lt_reg_l with (pos_Rl (SubEqui del H) I); replace (pos_Rl (SubEqui del H) I + (t - pos_Rl (SubEqui del H) I)) with t; [ idtac | ring ]; replace (pos_Rl (SubEqui del H) I + del) with (pos_Rl (SubEqui del H) (S I)).",
            "VernacExtend",
            "1244463f672a347b89da1d8e8ea3c45662734c36"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "repeat rewrite SubEqui_P6.",
            "VernacExtend",
            "273d9efffba58b14d769da5c7f9dfd041476d612"
        ],
        [
            "rewrite S_INR; ring.",
            "VernacExtend",
            "ed95ed2e0a848af68b535fdf26d8cb51f56546bd"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply le_lt_n_Sm; assumption.",
            "VernacExtend",
            "6cc6b17e7444cf552fad659b5daa9ecf302604a4"
        ],
        [
            "apply Rge_minus; apply Rle_ge; assumption.",
            "VernacExtend",
            "cea430234927905de5d9be9a7b362a3965763760"
        ],
        [
            "intros; clear H0 H1 H4 phi H5 H6 t H7; case (Req_dec t0 b); intro.",
            "VernacExtend",
            "cbd617cba2012c18e2cf564c0e1365cda7b4b9a7"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; set (I := fun j:nat => a + INR j * del <= t0); assert (H1 : exists n : nat, I n).",
            "VernacExtend",
            "b8622679597a69ac41db21072d516dc11078b5b5"
        ],
        [
            "exists 0%nat; unfold I; rewrite Rmult_0_l; rewrite Rplus_0_r; elim H8; intros; assumption.",
            "VernacExtend",
            "4293c1247b53f97d4cb6752e481e3aef91c117b2"
        ],
        [
            "assert (H4 : Nbound I).",
            "VernacExtend",
            "9d914f214686ecadcf792ef8bd4dc04fb229dfa2"
        ],
        [
            "unfold Nbound; exists (S (max_N del H)); intros; unfold max_N; destruct (maxN del H) as (?&_&H5); apply INR_le; apply Rmult_le_reg_l with (pos del).",
            "VernacExtend",
            "3156621a52d779205d7cdaf4e330cae421ca1fe9"
        ],
        [
            "apply (cond_pos del).",
            "VernacExtend",
            "ac01251087d8ed6a52f03fd522df5ae3ad740374"
        ],
        [
            "apply Rplus_le_reg_l with a; do 2 rewrite (Rmult_comm del); apply Rle_trans with t0; unfold I in H4; try assumption; apply Rle_trans with b; try assumption; elim H8; intros; assumption.",
            "VernacExtend",
            "3bae016c18189678e26c79fa77c916469cb11d79"
        ],
        [
            "elim (Nzorn H1 H4); intros N [H5 H6]; assert (H7 : (N < S (max_N del H))%nat).",
            "VernacExtend",
            "ed182b206f08f5f0c3613ecf85b3e2fe5d4f8d89"
        ],
        [
            "unfold max_N; case (maxN del H) as (?&?&?); apply INR_lt; apply Rmult_lt_reg_l with (pos del).",
            "VernacExtend",
            "cb8fd1f076829b0a70f4d37aecabbb72084392d2"
        ],
        [
            "apply (cond_pos del).",
            "VernacExtend",
            "ac01251087d8ed6a52f03fd522df5ae3ad740374"
        ],
        [
            "apply Rplus_lt_reg_l with a; do 2 rewrite (Rmult_comm del); apply Rle_lt_trans with t0; unfold I in H5; try assumption; apply Rlt_le_trans with b; try assumption; elim H8; intros.",
            "VernacExtend",
            "159f860c4e6f1a0c7213aca46f52770c7110028f"
        ],
        [
            "elim H11; intro.",
            "VernacExtend",
            "0c29eb3ff440f3a0ec9425df045e9df7bd15a2a4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H0; assumption.",
            "VernacExtend",
            "f893c02cbb3a00a06056628d1667434bc5c5a86d"
        ],
        [
            "exists N; split.",
            "VernacExtend",
            "2654a7b088d6054ebf76fd25c1ac128583f5df61"
        ],
        [
            "rewrite SubEqui_P5; simpl; assumption.",
            "VernacExtend",
            "06fddb2259f7562c758b7fbb779856fd206c7337"
        ],
        [
            "unfold co_interval; split.",
            "VernacExtend",
            "885fc4dae5acec48514c396c08c85d4bff51aace"
        ],
        [
            "rewrite SubEqui_P6.",
            "VernacExtend",
            "1e4a6c407833b564f58c315ac54e09877d7c7462"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "inversion H7.",
            "VernacExtend",
            "42a5ca7b50f733735ed76a249aba00e788a69623"
        ],
        [
            "replace (S (max_N del H)) with (pred (Rlength (SubEqui del H))).",
            "VernacExtend",
            "85109e7326b1d30c31f6a2de9172cad7212c0d7a"
        ],
        [
            "rewrite (SubEqui_P2 del H); elim H8; intros.",
            "VernacExtend",
            "db3019ce4bdd7e4e640cd863b97e4a540054343d"
        ],
        [
            "elim H11; intro.",
            "VernacExtend",
            "0c29eb3ff440f3a0ec9425df045e9df7bd15a2a4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H0; assumption.",
            "VernacExtend",
            "f893c02cbb3a00a06056628d1667434bc5c5a86d"
        ],
        [
            "rewrite SubEqui_P5; reflexivity.",
            "VernacExtend",
            "c053888d945912bd246bba311246ebaf1a13c1ad"
        ],
        [
            "rewrite SubEqui_P6.",
            "VernacExtend",
            "1e4a6c407833b564f58c315ac54e09877d7c7462"
        ],
        [
            "destruct (Rle_dec (a + INR (S N) * del) t0) as [Hle|Hnle].",
            "VernacExtend",
            "959090f0817bcb42f54bb2e3326724b302e521d3"
        ],
        [
            "assert (H11 := H6 (S N) Hle); elim (le_Sn_n _ H11).",
            "VernacExtend",
            "72b848df33f43b354c92e74d3867e588f418c3c8"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "apply le_lt_n_Sm; assumption.",
            "VernacExtend",
            "6cc6b17e7444cf552fad659b5daa9ecf302604a4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P7 : forall (f:R -> R) (a:R), Riemann_integrable f a a.",
            "VernacStartTheoremProof",
            "aab806f14fb4e9f344e6d60a849fe76c9b6112e4"
        ],
        [
            "unfold Riemann_integrable; intro f; intros; split with (mkStepFun (StepFun_P4 a a (f a))); split with (mkStepFun (StepFun_P4 a a 0)); split.",
            "VernacExtend",
            "e42d932389bcb27230912ceffa13fc6de0f37e1a"
        ],
        [
            "intros; simpl; unfold fct_cte; replace t with a.",
            "VernacExtend",
            "de623740ee975ade17085387e94b5853edc6130c"
        ],
        [
            "unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; right; reflexivity.",
            "VernacExtend",
            "b36e7de60369c016b4bb0fedc45be34e93ba5113"
        ],
        [
            "generalize H; unfold Rmin, Rmax; decide (Rle_dec a a) with (Rle_refl a).",
            "VernacExtend",
            "e400c7b57a0e9160f3d053068b843194613df100"
        ],
        [
            "intros (?,?); apply Rle_antisym; assumption.",
            "VernacExtend",
            "144d00d98752bcbea7f4f5ba65b0b98702a733d5"
        ],
        [
            "rewrite StepFun_P18; rewrite Rmult_0_l; rewrite Rabs_R0; apply (cond_pos eps).",
            "VernacExtend",
            "80d2542958345c30e6384c5e5b35d08c1df58f84"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_implies_RiemannInt : forall (f:R -> R) (a b:R), a <= b -> (forall x:R, a <= x <= b -> continuity_pt f x) -> Riemann_integrable f a b.",
            "VernacStartTheoremProof",
            "a6a79edcc1c3b8563dd9b5bf53038503bba4c24c"
        ],
        [
            "intros; destruct (total_order_T a b) as [[Hlt| -> ]|Hgt]; [ apply RiemannInt_P6; assumption | apply RiemannInt_P7 | elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)) ].",
            "VernacExtend",
            "046f18a903b1fde9816fc88a10ca322b0d28b158"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P8 : forall (f:R -> R) (a b:R) (pr1:Riemann_integrable f a b) (pr2:Riemann_integrable f b a), RiemannInt pr1 = - RiemannInt pr2.",
            "VernacStartTheoremProof",
            "9992912003e4d5fc5281cdd8779b36b740f7ca74"
        ],
        [
            "intro f; intros; eapply UL_sequence.",
            "VernacExtend",
            "9cdb38b85eeda621e6b97ffb3526514d6b37f0c6"
        ],
        [
            "unfold RiemannInt; destruct (RiemannInt_exists pr1 RinvN RinvN_cv) as (?,HUn); apply HUn.",
            "VernacExtend",
            "5865d4f5f7a8cdae9e044d5b8da566556b215371"
        ],
        [
            "unfold RiemannInt; destruct (RiemannInt_exists pr2 RinvN RinvN_cv) as (?,HUn); intros; cut (exists psi1 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t - phi_sequence RinvN pr1 n t) <= psi1 n t) /\\ Rabs (RiemannInt_SF (psi1 n)) < RinvN n)).",
            "VernacExtend",
            "fdf5af98ebda1121f2b4ecd4d66210a6b530aec6"
        ],
        [
            "cut (exists psi2 : nat -> StepFun b a, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t - phi_sequence RinvN pr2 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < RinvN n)).",
            "VernacExtend",
            "11f3d7eb0ebb277e2d4e4907d99f7115548b0c7e"
        ],
        [
            "intros; elim H; clear H; intros psi2 H; elim H0; clear H0; intros psi1 H0; assert (H1 := RinvN_cv); unfold Un_cv; intros; assert (H3 : 0 < eps / 3).",
            "VernacExtend",
            "53ab78a2dd40579c76a8d11ed7a39412ff1285df"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "unfold Un_cv in H1; elim (H1 _ H3); clear H1; intros N0 H1; unfold R_dist in H1; simpl in H1; assert (H4 : forall n:nat, (n >= N0)%nat -> RinvN n < eps / 3).",
            "VernacExtend",
            "55b8fa875eea08b88b454bdec3bfcb3e9ee62753"
        ],
        [
            "intros; assert (H5 := H1 _ H4); replace (pos (RinvN n)) with (Rabs (/ (INR n + 1) - 0)); [ assumption | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; left; apply (cond_pos (RinvN n)) ].",
            "VernacExtend",
            "686963b677a28ff7db76dfd69f5e8c14222f29e3"
        ],
        [
            "clear H1; destruct (HUn _ H3) as (N1,H1); exists (max N0 N1); intros; unfold R_dist; apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi_sequence RinvN pr1 n) + RiemannInt_SF (phi_sequence RinvN pr2 n)) + Rabs (RiemannInt_SF (phi_sequence RinvN pr2 n) - x)).",
            "VernacExtend",
            "418b65595f0502a98b9697048febe1a4042c40ae"
        ],
        [
            "rewrite <- (Rabs_Ropp (RiemannInt_SF (phi_sequence RinvN pr2 n) - x)); replace (RiemannInt_SF (phi_sequence RinvN pr1 n) - - x) with (RiemannInt_SF (phi_sequence RinvN pr1 n) + RiemannInt_SF (phi_sequence RinvN pr2 n) + - (RiemannInt_SF (phi_sequence RinvN pr2 n) - x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "a6bce411f12a8331b741441d24551735deaa6487"
        ],
        [
            "replace eps with (2 * (eps / 3) + eps / 3).",
            "VernacExtend",
            "f876e8bd18747f7840f2ad4de8b736b9db844040"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "rewrite (StepFun_P39 (phi_sequence RinvN pr2 n)); replace (RiemannInt_SF (phi_sequence RinvN pr1 n) + - RiemannInt_SF (mkStepFun (StepFun_P6 (pre (phi_sequence RinvN pr2 n))))) with (RiemannInt_SF (phi_sequence RinvN pr1 n) + -1 * RiemannInt_SF (mkStepFun (StepFun_P6 (pre (phi_sequence RinvN pr2 n))))); [ idtac | ring ]; rewrite <- StepFun_P30.",
            "VernacExtend",
            "1b50d32b5a025941e65e42c508bd62db6438dd79"
        ],
        [
            "destruct (Rle_dec a b) as [Hle|Hnle].",
            "VernacExtend",
            "f3416f93eef3cf68aee486729e511d50cd6262f3"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (phi_sequence RinvN pr1 n) (mkStepFun (StepFun_P6 (pre (phi_sequence RinvN pr2 n))))))))).",
            "VernacExtend",
            "4f3d3615d547f779527916eb12227c32dd642521"
        ],
        [
            "apply StepFun_P34; assumption.",
            "VernacExtend",
            "302ecaef1f1f15c052ed5bdffc68be45ba214735"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 (psi1 n) (mkStepFun (StepFun_P6 (pre (psi2 n))))))).",
            "VernacExtend",
            "c1501828f616a0732eca06ef46c8bf60ba16eab3"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; simpl; rewrite Rmult_1_l; apply Rle_trans with (Rabs (phi_sequence RinvN pr1 n x0 - f x0) + Rabs (f x0 - phi_sequence RinvN pr2 n x0)).",
            "VernacExtend",
            "7bfd79cc9e5be534e856717f7a4b4b98e3def5ca"
        ],
        [
            "replace (phi_sequence RinvN pr1 n x0 + -1 * phi_sequence RinvN pr2 n x0) with (phi_sequence RinvN pr1 n x0 - f x0 + (f x0 - phi_sequence RinvN pr2 n x0)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "f54cd49d24398c8b256d0a61dc813b52009dcb6f"
        ],
        [
            "assert (H7 : Rmin a b = a).",
            "VernacExtend",
            "d32f0f28a3678c8df9a5b058258c5331bd63f106"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hle; reflexivity.",
            "VernacExtend",
            "54a9cd0a0233957cddbe2ef1db48f27e5a051ccd"
        ],
        [
            "assert (H8 : Rmax a b = b).",
            "VernacExtend",
            "48af41f4e471008d52d9d9f6f572d2f32e80218e"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hle; reflexivity.",
            "VernacExtend",
            "150c50d95cc57867c06f4d3f12dbe0dfa5ea6eb6"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "elim (H0 n); intros; rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H9; rewrite H7; rewrite H8.",
            "VernacExtend",
            "526b911118fd09ae8facec95ce0fb58d4c1aa15a"
        ],
        [
            "elim H6; intros; split; left; assumption.",
            "VernacExtend",
            "bb23983c8c720ef0253c5d547b60358e2321371d"
        ],
        [
            "elim (H n); intros; apply H9; rewrite H7; rewrite H8.",
            "VernacExtend",
            "620d068af19e43dbd8eec9d0a95be5254d020b42"
        ],
        [
            "elim H6; intros; split; left; assumption.",
            "VernacExtend",
            "bb23983c8c720ef0253c5d547b60358e2321371d"
        ],
        [
            "rewrite StepFun_P30; rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat.",
            "VernacExtend",
            "8c84bd8ff1b313fcc0542e21b0305084a78f72e6"
        ],
        [
            "elim (H0 n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi1 n))); [ apply RRle_abs | apply Rlt_trans with (pos (RinvN n)); [ assumption | apply H4; unfold ge; apply le_trans with (max N0 N1); [ apply le_max_l | assumption ] ] ].",
            "VernacExtend",
            "514a880c7a9c19ec9739efeed338f4ad4de247a7"
        ],
        [
            "elim (H n); intros; rewrite <- (Ropp_involutive (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (psi2 n)))))) ; rewrite <- StepFun_P39; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi2 n))); [ rewrite <- Rabs_Ropp; apply RRle_abs | apply Rlt_trans with (pos (RinvN n)); [ assumption | apply H4; unfold ge; apply le_trans with (max N0 N1); [ apply le_max_l | assumption ] ] ].",
            "VernacExtend",
            "8c5d6080813b5881f08db8fee8ee99608e4934df"
        ],
        [
            "assert (Hyp : b <= a).",
            "VernacExtend",
            "940b3b20b4f791f4dbfcd0f134a43a1192359c46"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "rewrite StepFun_P39; rewrite Rabs_Ropp; apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P6 (StepFun_P28 (-1) (phi_sequence RinvN pr1 n) (mkStepFun (StepFun_P6 (pre (phi_sequence RinvN pr2 n)))))))))).",
            "VernacExtend",
            "0729b1a4e2e936ee8e1f666a373c3a8f66421d7c"
        ],
        [
            "apply StepFun_P34; assumption.",
            "VernacExtend",
            "302ecaef1f1f15c052ed5bdffc68be45ba214735"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 (mkStepFun (StepFun_P6 (pre (psi1 n)))) (psi2 n)))).",
            "VernacExtend",
            "963ea953a63ea272d9499ddd6ccb641bcf7e2f83"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; simpl; rewrite Rmult_1_l; apply Rle_trans with (Rabs (phi_sequence RinvN pr1 n x0 - f x0) + Rabs (f x0 - phi_sequence RinvN pr2 n x0)).",
            "VernacExtend",
            "7bfd79cc9e5be534e856717f7a4b4b98e3def5ca"
        ],
        [
            "replace (phi_sequence RinvN pr1 n x0 + -1 * phi_sequence RinvN pr2 n x0) with (phi_sequence RinvN pr1 n x0 - f x0 + (f x0 - phi_sequence RinvN pr2 n x0)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "f54cd49d24398c8b256d0a61dc813b52009dcb6f"
        ],
        [
            "assert (H7 : Rmin a b = b).",
            "VernacExtend",
            "fd1161ee5d5ddcf825581e5908ec7f4c03fb5020"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hnle; reflexivity.",
            "VernacExtend",
            "e41d7bb2bb845a289c4ea72b96377727bd370eb0"
        ],
        [
            "assert (H8 : Rmax a b = a).",
            "VernacExtend",
            "95419c61df1423abfaec2751953f6c0a7b492f0e"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hnle; reflexivity.",
            "VernacExtend",
            "1e3801bab9f44191a09654eafd3fee3947c6db75"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "elim (H0 n); intros; rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H9; rewrite H7; rewrite H8.",
            "VernacExtend",
            "526b911118fd09ae8facec95ce0fb58d4c1aa15a"
        ],
        [
            "elim H6; intros; split; left; assumption.",
            "VernacExtend",
            "bb23983c8c720ef0253c5d547b60358e2321371d"
        ],
        [
            "elim (H n); intros; apply H9; rewrite H7; rewrite H8; elim H6; intros; split; left; assumption.",
            "VernacExtend",
            "53823d8662c496b8ef05c1eb6d71c4cbc9c291ff"
        ],
        [
            "rewrite StepFun_P30; rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat.",
            "VernacExtend",
            "8c84bd8ff1b313fcc0542e21b0305084a78f72e6"
        ],
        [
            "elim (H0 n); intros; rewrite <- (Ropp_involutive (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (psi1 n)))))) ; rewrite <- StepFun_P39; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi1 n))); [ rewrite <- Rabs_Ropp; apply RRle_abs | apply Rlt_trans with (pos (RinvN n)); [ assumption | apply H4; unfold ge; apply le_trans with (max N0 N1); [ apply le_max_l | assumption ] ] ].",
            "VernacExtend",
            "b3fcffcb6a223e435cbb9bb3fb6c9a6a993d5c79"
        ],
        [
            "elim (H n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi2 n))); [ apply RRle_abs | apply Rlt_trans with (pos (RinvN n)); [ assumption | apply H4; unfold ge; apply le_trans with (max N0 N1); [ apply le_max_l | assumption ] ] ].",
            "VernacExtend",
            "511a6c65c1fb636e03829d7e4c7a5511c8ddfb1a"
        ],
        [
            "unfold R_dist in H1; apply H1; unfold ge; apply le_trans with (max N0 N1); [ apply le_max_r | assumption ].",
            "VernacExtend",
            "dd3b607e297fcb76c74c71af7cbf9649c1f7eb2e"
        ],
        [
            "apply Rmult_eq_reg_l with 3; [ unfold Rdiv; rewrite Rmult_plus_distr_l; do 2 rewrite (Rmult_comm 3); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
            "VernacExtend",
            "d5fc6e7e3279ce291cc825d25d97f8b656807ff2"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr2 n)); intro; rewrite Rmin_comm; rewrite RmaxSym; apply (proj2_sig (phi_sequence_prop RinvN pr2 n)).",
            "VernacExtend",
            "06c00779b57a4290fbf2748bb642e4f183fe548a"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr1 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr1 n)).",
            "VernacExtend",
            "cdad587d1595c46ae4abc486623fbad70c69249a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P9 : forall (f:R -> R) (a:R) (pr:Riemann_integrable f a a), RiemannInt pr = 0.",
            "VernacStartTheoremProof",
            "9e093fe9bc79a5e31fe272b0acdb7e953126a5f3"
        ],
        [
            "intros; assert (H := RiemannInt_P8 pr pr); apply Rmult_eq_reg_l with 2; [ rewrite Rmult_0_r; rewrite double; pattern (RiemannInt pr) at 2; rewrite H; apply Rplus_opp_r | discrR ].",
            "VernacExtend",
            "eb95f034cc89e24e5ced7f92925dff824cfa828c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P10 : forall (f g:R -> R) (a b l:R), Riemann_integrable f a b -> Riemann_integrable g a b -> Riemann_integrable (fun x:R => f x + l * g x) a b.",
            "VernacStartTheoremProof",
            "0534c6f66b91621342659e68685e2f8d67b4e1e2"
        ],
        [
            "unfold Riemann_integrable; intros f g; intros; destruct (Req_EM_T l 0) as [Heq|Hneq].",
            "VernacExtend",
            "17124d13c7a639100a2b25599bb71aa303ebe9cc"
        ],
        [
            "elim (X eps); intros x p; split with x; elim p; intros x0 p0; split with x0; elim p0; intros; split; try assumption; rewrite Heq; intros; rewrite Rmult_0_l; rewrite Rplus_0_r; apply H; assumption.",
            "VernacExtend",
            "ce55258a4c50272aa55845dd44d39c1486b2a877"
        ],
        [
            "assert (H : 0 < eps / 2).",
            "VernacExtend",
            "d4836348e668957c1aadc63f2fa7422c1f6cce05"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "b485b8a95731f8846932bed2f577801cd11f1146"
        ],
        [
            "assert (H0 : 0 < eps / (2 * Rabs l)).",
            "VernacExtend",
            "9d403d1b12c4190ec57694a0ce598a63c1ab8d12"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; apply Rmult_lt_0_compat; [ prove_sup0 | apply Rabs_pos_lt; assumption ] ].",
            "VernacExtend",
            "d307957efe401101275ca1df9713bb2db4f00088"
        ],
        [
            "elim (X (mkposreal _ H)); intros x p; elim (X0 (mkposreal _ H0)); intros x0 p0; split with (mkStepFun (StepFun_P28 l x x0)); elim p0; elim p; intros x1 p1 x2 p2.",
            "VernacExtend",
            "09420805a15bc59606d662810d90bf600328b1cd"
        ],
        [
            "split with (mkStepFun (StepFun_P28 (Rabs l) x1 x2)); elim p1; elim p2; clear p1 p2 p0 p X X0; intros; split.",
            "VernacExtend",
            "b8417fdaab05c491003813e5fe8dd47f319fab8c"
        ],
        [
            "intros; simpl; apply Rle_trans with (Rabs (f t - x t) + Rabs (l * (g t - x0 t))).",
            "VernacExtend",
            "308fb765058d98c81ecb34c7e8fbdc8fa19030c9"
        ],
        [
            "replace (f t + l * g t - (x t + l * x0 t)) with (f t - x t + l * (g t - x0 t)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "a45c978453ff1da6a138dd59adf861627e38f029"
        ],
        [
            "apply Rplus_le_compat; [ apply H3; assumption | rewrite Rabs_mult; apply Rmult_le_compat_l; [ apply Rabs_pos | apply H1; assumption ] ].",
            "VernacExtend",
            "c0089a7a63bbc2e9b6b61d85d8a414c8ad8ba864"
        ],
        [
            "rewrite StepFun_P30; apply Rle_lt_trans with (Rabs (RiemannInt_SF x1) + Rabs (Rabs l * RiemannInt_SF x2)).",
            "VernacExtend",
            "f8fac7a2ffc6306f4d44e34da97cb2d45effbf26"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "rewrite (double_var eps); apply Rplus_lt_compat.",
            "VernacExtend",
            "dd3002897582f3251627e3b8fbd0c2a8c471071b"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "rewrite Rabs_mult; rewrite Rabs_Rabsolu; apply Rmult_lt_reg_l with (/ Rabs l).",
            "VernacExtend",
            "10bfbcdc9a1363bf283a1b0a4b944d8ce04adbe4"
        ],
        [
            "apply Rinv_0_lt_compat; apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "e4c91a40f2fa1c87312f044d164ffed2c6475792"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym; [ rewrite Rmult_1_l; replace (/ Rabs l * (eps / 2)) with (eps / (2 * Rabs l)); [ apply H2 | unfold Rdiv; rewrite Rinv_mult_distr; [ ring | discrR | apply Rabs_no_R0; assumption ] ] | apply Rabs_no_R0; assumption ].",
            "VernacExtend",
            "b70f5b4e64c15cae30a84312536800b58eec4db5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P11 : forall (f:R -> R) (a b l:R) (un:nat -> posreal) (phi1 phi2 psi1 psi2:nat -> StepFun a b), Un_cv un 0 -> (forall n:nat, (forall t:R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi1 n t) <= psi1 n t) /\\ Rabs (RiemannInt_SF (psi1 n)) < un n) -> (forall n:nat, (forall t:R, Rmin a b <= t <= Rmax a b -> Rabs (f t - phi2 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < un n) -> Un_cv (fun N:nat => RiemannInt_SF (phi1 N)) l -> Un_cv (fun N:nat => RiemannInt_SF (phi2 N)) l.",
            "VernacStartTheoremProof",
            "e446bba0fcf7c073603d70e1ed0564a2e96d9850"
        ],
        [
            "unfold Un_cv; intro f; intros; intros.",
            "VernacExtend",
            "f94c1d30dbafdfc8abe31cfbb3e8e301848b275c"
        ],
        [
            "case (Rle_dec a b); intro Hyp.",
            "VernacExtend",
            "dbe1923cf0667353612ec74604c3a25f46959a73"
        ],
        [
            "assert (H4 : 0 < eps / 3).",
            "VernacExtend",
            "1db1f4bf83af6461836d34084806d7da5b6bbb6a"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "elim (H _ H4); clear H; intros N0 H.",
            "VernacExtend",
            "5b0a82157f3970b06619d67a8ac5209b93221a23"
        ],
        [
            "elim (H2 _ H4); clear H2; intros N1 H2.",
            "VernacExtend",
            "22a45fdcf86de63b7070e51a5b3df7c6616686be"
        ],
        [
            "set (N := max N0 N1); exists N; intros; unfold R_dist.",
            "VernacExtend",
            "b67f8d3fefb27aaa34e7eee46fa6352d1b74bb6d"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n)) + Rabs (RiemannInt_SF (phi1 n) - l)).",
            "VernacExtend",
            "200c0da7b2285e5a938ec5750f4002fa726997a4"
        ],
        [
            "replace (RiemannInt_SF (phi2 n) - l) with (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n) + (RiemannInt_SF (phi1 n) - l)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "99004aa43bef87c29e63abd9a33c116c97a564c9"
        ],
        [
            "replace eps with (2 * (eps / 3) + eps / 3).",
            "VernacExtend",
            "f876e8bd18747f7840f2ad4de8b736b9db844040"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "replace (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n)) with (RiemannInt_SF (phi2 n) + -1 * RiemannInt_SF (phi1 n)); [ idtac | ring ].",
            "VernacExtend",
            "71cfadb5f070cc8753f50e4b079b4574e0200710"
        ],
        [
            "rewrite <- StepFun_P30.",
            "VernacExtend",
            "30fa5d9949a9fdc9f6349de0f2b7cb5c90cd3a26"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (phi2 n) (phi1 n)))))).",
            "VernacExtend",
            "7beff1474769ae3f100d0e304977037ced017b3d"
        ],
        [
            "apply StepFun_P34; assumption.",
            "VernacExtend",
            "302ecaef1f1f15c052ed5bdffc68be45ba214735"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 (psi1 n) (psi2 n)))).",
            "VernacExtend",
            "670457cff0381951daec687be61a66da06a41157"
        ],
        [
            "apply StepFun_P37; try assumption; intros; simpl; rewrite Rmult_1_l.",
            "VernacExtend",
            "b791695ba8f25eb053507ac076d5cb72bca69c86"
        ],
        [
            "apply Rle_trans with (Rabs (phi2 n x - f x) + Rabs (f x - phi1 n x)).",
            "VernacExtend",
            "268561e7ae3bcb12786974378e3b271be1e30724"
        ],
        [
            "replace (phi2 n x + -1 * phi1 n x) with (phi2 n x - f x + (f x - phi1 n x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "688861689d05e447010d5339f8a191d02ab2839f"
        ],
        [
            "rewrite (Rplus_comm (psi1 n x)); apply Rplus_le_compat.",
            "VernacExtend",
            "cd4880aa3a3d3c2c87d07757c30023d52937cb03"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; elim (H1 n); intros; apply H7.",
            "VernacExtend",
            "9131a32420a72e9deee2c0e26574696d1d1fd6ce"
        ],
        [
            "assert (H10 : Rmin a b = a).",
            "VernacExtend",
            "16ba28922085f1366de21d7def67b34b7b23e825"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hyp; reflexivity.",
            "VernacExtend",
            "bbb26e2d82f221595c99bdec954b4094656d78c0"
        ],
        [
            "assert (H11 : Rmax a b = b).",
            "VernacExtend",
            "2c0060866e2f0b0d35d924dfb7ae3c9c2f541f99"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hyp; reflexivity.",
            "VernacExtend",
            "2fdad7a7f12df3b6f7fd85363d31da6b7459a437"
        ],
        [
            "rewrite H10; rewrite H11; elim H6; intros; split; left; assumption.",
            "VernacExtend",
            "aa391073e03344bde91dc19307c388827dd629d9"
        ],
        [
            "elim (H0 n); intros; apply H7; assert (H10 : Rmin a b = a).",
            "VernacExtend",
            "ac4f71dc4d645c465f4e62fb0c6d5f8f7f7b4ba0"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hyp; reflexivity.",
            "VernacExtend",
            "bbb26e2d82f221595c99bdec954b4094656d78c0"
        ],
        [
            "assert (H11 : Rmax a b = b).",
            "VernacExtend",
            "2c0060866e2f0b0d35d924dfb7ae3c9c2f541f99"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hyp; reflexivity.",
            "VernacExtend",
            "2fdad7a7f12df3b6f7fd85363d31da6b7459a437"
        ],
        [
            "rewrite H10; rewrite H11; elim H6; intros; split; left; assumption.",
            "VernacExtend",
            "aa391073e03344bde91dc19307c388827dd629d9"
        ],
        [
            "rewrite StepFun_P30; rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat.",
            "VernacExtend",
            "8c84bd8ff1b313fcc0542e21b0305084a78f72e6"
        ],
        [
            "apply Rlt_trans with (pos (un n)).",
            "VernacExtend",
            "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
        ],
        [
            "elim (H0 n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi1 n))).",
            "VernacExtend",
            "b729b394359d59bb6de1e491cd3d1f451902d96d"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (pos (un n)) with (R_dist (un n) 0).",
            "VernacExtend",
            "77992acf6ee2a44f8ded449debe1cfc044b8c6a3"
        ],
        [
            "apply H; unfold ge; apply le_trans with N; try assumption.",
            "VernacExtend",
            "c27821778c2ae99e3ee08aac44336cd207f3258f"
        ],
        [
            "unfold N; apply le_max_l.",
            "VernacExtend",
            "276b555b39b40f510dcc90e9585bf8a1fd5a87cf"
        ],
        [
            "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right.",
            "VernacExtend",
            "c62938dbb1d334f41d8c9dbe6820d3ac76754e36"
        ],
        [
            "apply Rle_ge; left; apply (cond_pos (un n)).",
            "VernacExtend",
            "87d1cbd2e52f8d5c703de78eb59759fda334e22c"
        ],
        [
            "apply Rlt_trans with (pos (un n)).",
            "VernacExtend",
            "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
        ],
        [
            "elim (H1 n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi2 n))).",
            "VernacExtend",
            "29c563e06236244fc423fc6a0ce8fe5ba902af39"
        ],
        [
            "apply RRle_abs; assumption.",
            "VernacExtend",
            "6b3aee25e8d2f3523cc6d59c1a37121f75299b27"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (pos (un n)) with (R_dist (un n) 0).",
            "VernacExtend",
            "77992acf6ee2a44f8ded449debe1cfc044b8c6a3"
        ],
        [
            "apply H; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_l.",
            "VernacExtend",
            "9d9dcb96edc7e123f7e1f4b3c0bb1d7718fe27b4"
        ],
        [
            "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (un n)).",
            "VernacExtend",
            "c3fd5f3ab3dcd1fe43ff31b18da9084c4deb65ee"
        ],
        [
            "unfold R_dist in H2; apply H2; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_r.",
            "VernacExtend",
            "f00d5ec7826e24654fbc945903eca5464d9c19b5"
        ],
        [
            "apply Rmult_eq_reg_l with 3; [ unfold Rdiv; rewrite Rmult_plus_distr_l; do 2 rewrite (Rmult_comm 3); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
            "VernacExtend",
            "d5fc6e7e3279ce291cc825d25d97f8b656807ff2"
        ],
        [
            "assert (H4 : 0 < eps / 3).",
            "VernacExtend",
            "1db1f4bf83af6461836d34084806d7da5b6bbb6a"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "elim (H _ H4); clear H; intros N0 H.",
            "VernacExtend",
            "5b0a82157f3970b06619d67a8ac5209b93221a23"
        ],
        [
            "elim (H2 _ H4); clear H2; intros N1 H2.",
            "VernacExtend",
            "22a45fdcf86de63b7070e51a5b3df7c6616686be"
        ],
        [
            "set (N := max N0 N1); exists N; intros; unfold R_dist.",
            "VernacExtend",
            "b67f8d3fefb27aaa34e7eee46fa6352d1b74bb6d"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n)) + Rabs (RiemannInt_SF (phi1 n) - l)).",
            "VernacExtend",
            "200c0da7b2285e5a938ec5750f4002fa726997a4"
        ],
        [
            "replace (RiemannInt_SF (phi2 n) - l) with (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n) + (RiemannInt_SF (phi1 n) - l)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "99004aa43bef87c29e63abd9a33c116c97a564c9"
        ],
        [
            "assert (Hyp_b : b <= a).",
            "VernacExtend",
            "3d5ed05a5f06f5066aaf34611c4f6a4595570050"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "replace eps with (2 * (eps / 3) + eps / 3).",
            "VernacExtend",
            "f876e8bd18747f7840f2ad4de8b736b9db844040"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "replace (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n)) with (RiemannInt_SF (phi2 n) + -1 * RiemannInt_SF (phi1 n)); [ idtac | ring ].",
            "VernacExtend",
            "71cfadb5f070cc8753f50e4b079b4574e0200710"
        ],
        [
            "rewrite <- StepFun_P30.",
            "VernacExtend",
            "30fa5d9949a9fdc9f6349de0f2b7cb5c90cd3a26"
        ],
        [
            "rewrite StepFun_P39.",
            "VernacExtend",
            "05fe2d7944263f955defd733e518faa08853032b"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "4585414329a0ef757c809f4a4dee3b3a09307b5c"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 (-1) (phi2 n) (phi1 n))))))))).",
            "VernacExtend",
            "35ff70228ce4f0a9ec003a6ac1420acb3a8fe8f7"
        ],
        [
            "apply StepFun_P34; try assumption.",
            "VernacExtend",
            "0c2b568c37d62177de20775e5dada161a4b91ff1"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 1 (psi1 n) (psi2 n))))))).",
            "VernacExtend",
            "dafdc1b237882e622d181b614b0ae5765e272a1c"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; simpl; rewrite Rmult_1_l.",
            "VernacExtend",
            "e743dca94b06e457e4ea1a333ab2b9b3e1c73fca"
        ],
        [
            "apply Rle_trans with (Rabs (phi2 n x - f x) + Rabs (f x - phi1 n x)).",
            "VernacExtend",
            "268561e7ae3bcb12786974378e3b271be1e30724"
        ],
        [
            "replace (phi2 n x + -1 * phi1 n x) with (phi2 n x - f x + (f x - phi1 n x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "688861689d05e447010d5339f8a191d02ab2839f"
        ],
        [
            "rewrite (Rplus_comm (psi1 n x)); apply Rplus_le_compat.",
            "VernacExtend",
            "cd4880aa3a3d3c2c87d07757c30023d52937cb03"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; elim (H1 n); intros; apply H7.",
            "VernacExtend",
            "9131a32420a72e9deee2c0e26574696d1d1fd6ce"
        ],
        [
            "assert (H10 : Rmin a b = b).",
            "VernacExtend",
            "0af78acd1346d67fc706b36fb9767b07154e3503"
        ],
        [
            "unfold Rmin; case (Rle_dec a b); intro; [ elim Hyp; assumption | reflexivity ].",
            "VernacExtend",
            "713a5fe30f4f226be4fb4d7b3e2ca84b71b61bc4"
        ],
        [
            "assert (H11 : Rmax a b = a).",
            "VernacExtend",
            "3673febf959d0e8fc805bf0c66f4d6038406c49b"
        ],
        [
            "unfold Rmax; case (Rle_dec a b); intro; [ elim Hyp; assumption | reflexivity ].",
            "VernacExtend",
            "5698ba223c7b35010b2aa21c05a5a16429716737"
        ],
        [
            "rewrite H10; rewrite H11; elim H6; intros; split; left; assumption.",
            "VernacExtend",
            "aa391073e03344bde91dc19307c388827dd629d9"
        ],
        [
            "elim (H0 n); intros; apply H7; assert (H10 : Rmin a b = b).",
            "VernacExtend",
            "2238589aa8a5ac65417b2b0bd0103fb2fa56cc1e"
        ],
        [
            "unfold Rmin; case (Rle_dec a b); intro; [ elim Hyp; assumption | reflexivity ].",
            "VernacExtend",
            "713a5fe30f4f226be4fb4d7b3e2ca84b71b61bc4"
        ],
        [
            "assert (H11 : Rmax a b = a).",
            "VernacExtend",
            "3673febf959d0e8fc805bf0c66f4d6038406c49b"
        ],
        [
            "unfold Rmax; case (Rle_dec a b); intro; [ elim Hyp; assumption | reflexivity ].",
            "VernacExtend",
            "5698ba223c7b35010b2aa21c05a5a16429716737"
        ],
        [
            "rewrite H10; rewrite H11; elim H6; intros; split; left; assumption.",
            "VernacExtend",
            "aa391073e03344bde91dc19307c388827dd629d9"
        ],
        [
            "rewrite <- (Ropp_involutive (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 1 (psi1 n) (psi2 n)))))))) .",
            "VernacExtend",
            "721d0f33453ae16268263b60754da6f3594945a0"
        ],
        [
            "rewrite <- StepFun_P39.",
            "VernacExtend",
            "af59faa550a63107a160e7bb81b651fb6603577c"
        ],
        [
            "rewrite StepFun_P30.",
            "VernacExtend",
            "d906530c9c2e97101fb3b0446f67e090479ee7db"
        ],
        [
            "rewrite Rmult_1_l; rewrite double.",
            "VernacExtend",
            "9c26c13cbbf5c8312ae7ea7321291c39e7a50be4"
        ],
        [
            "rewrite Ropp_plus_distr; apply Rplus_lt_compat.",
            "VernacExtend",
            "30e6b6f4a9297ad4265b48fa3cfd56bcfed44088"
        ],
        [
            "apply Rlt_trans with (pos (un n)).",
            "VernacExtend",
            "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
        ],
        [
            "elim (H0 n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi1 n))).",
            "VernacExtend",
            "b729b394359d59bb6de1e491cd3d1f451902d96d"
        ],
        [
            "rewrite <- Rabs_Ropp; apply RRle_abs.",
            "VernacExtend",
            "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (pos (un n)) with (R_dist (un n) 0).",
            "VernacExtend",
            "77992acf6ee2a44f8ded449debe1cfc044b8c6a3"
        ],
        [
            "apply H; unfold ge; apply le_trans with N; try assumption.",
            "VernacExtend",
            "c27821778c2ae99e3ee08aac44336cd207f3258f"
        ],
        [
            "unfold N; apply le_max_l.",
            "VernacExtend",
            "276b555b39b40f510dcc90e9585bf8a1fd5a87cf"
        ],
        [
            "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right.",
            "VernacExtend",
            "c62938dbb1d334f41d8c9dbe6820d3ac76754e36"
        ],
        [
            "apply Rle_ge; left; apply (cond_pos (un n)).",
            "VernacExtend",
            "87d1cbd2e52f8d5c703de78eb59759fda334e22c"
        ],
        [
            "apply Rlt_trans with (pos (un n)).",
            "VernacExtend",
            "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
        ],
        [
            "elim (H1 n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi2 n))).",
            "VernacExtend",
            "29c563e06236244fc423fc6a0ce8fe5ba902af39"
        ],
        [
            "rewrite <- Rabs_Ropp; apply RRle_abs; assumption.",
            "VernacExtend",
            "dd8647b31f1d9bb212768d8e6b7bbaca2878dbdb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (pos (un n)) with (R_dist (un n) 0).",
            "VernacExtend",
            "77992acf6ee2a44f8ded449debe1cfc044b8c6a3"
        ],
        [
            "apply H; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_l.",
            "VernacExtend",
            "9d9dcb96edc7e123f7e1f4b3c0bb1d7718fe27b4"
        ],
        [
            "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (un n)).",
            "VernacExtend",
            "c3fd5f3ab3dcd1fe43ff31b18da9084c4deb65ee"
        ],
        [
            "unfold R_dist in H2; apply H2; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_r.",
            "VernacExtend",
            "f00d5ec7826e24654fbc945903eca5464d9c19b5"
        ],
        [
            "apply Rmult_eq_reg_l with 3; [ unfold Rdiv; rewrite Rmult_plus_distr_l; do 2 rewrite (Rmult_comm 3); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
            "VernacExtend",
            "d5fc6e7e3279ce291cc825d25d97f8b656807ff2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P12 : forall (f g:R -> R) (a b l:R) (pr1:Riemann_integrable f a b) (pr2:Riemann_integrable g a b) (pr3:Riemann_integrable (fun x:R => f x + l * g x) a b), a <= b -> RiemannInt pr3 = RiemannInt pr1 + l * RiemannInt pr2.",
            "VernacStartTheoremProof",
            "4cf85f484f088a4983be27c1e27331c5419fe9dd"
        ],
        [
            "intro f; intros; case (Req_dec l 0); intro.",
            "VernacExtend",
            "b4ad7262731c629cbe5275638736e23f7ba6317f"
        ],
        [
            "pattern l at 2; rewrite H0; rewrite Rmult_0_l; rewrite Rplus_0_r; unfold RiemannInt; destruct (RiemannInt_exists pr3 RinvN RinvN_cv) as (?,HUn_cv); destruct (RiemannInt_exists pr1 RinvN RinvN_cv) as (?,HUn_cv0); intros.",
            "VernacExtend",
            "d53e23d2e53fb9115ce505d225673435a4b85f53"
        ],
        [
            "eapply UL_sequence; [ apply HUn_cv | set (psi1 := fun n:nat => proj1_sig (phi_sequence_prop RinvN pr1 n)); set (psi2 := fun n:nat => proj1_sig (phi_sequence_prop RinvN pr3 n)); apply RiemannInt_P11 with f RinvN (phi_sequence RinvN pr1) psi1 psi2; [ apply RinvN_cv | intro; apply (proj2_sig (phi_sequence_prop RinvN pr1 n)) | intro; assert (H1 : (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t + l * g t - phi_sequence RinvN pr3 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < RinvN n); [ apply (proj2_sig (phi_sequence_prop RinvN pr3 n)) | elim H1; intros; split; try assumption; intros; replace (f t) with (f t + l * g t); [ apply H2; assumption | rewrite H0; ring ] ] | assumption ] ].",
            "VernacExtend",
            "d01b70f0f9fe7c407563460265d68beb54b09370"
        ],
        [
            "eapply UL_sequence.",
            "VernacExtend",
            "73f21f11fa4cdfdc2c034b63878b7be248976b8e"
        ],
        [
            "unfold RiemannInt; destruct (RiemannInt_exists pr3 RinvN RinvN_cv) as (?,HUn_cv); intros; apply HUn_cv.",
            "VernacExtend",
            "018a74586ac95a5dd365b8602e3254acdf989a37"
        ],
        [
            "unfold Un_cv; intros; unfold RiemannInt; case (RiemannInt_exists pr1 RinvN RinvN_cv) as (x0,HUn_cv0); case (RiemannInt_exists pr2 RinvN RinvN_cv) as (x,HUn_cv); unfold Un_cv; intros; assert (H2 : 0 < eps / 5).",
            "VernacExtend",
            "5fa229d948dec9f31ae3df147dafa0cfb3e86421"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "elim (HUn_cv0 _ H2); clear HUn_cv0; intros N0 H3; assert (H4 := RinvN_cv); unfold Un_cv in H4; elim (H4 _ H2); clear H4 H2; intros N1 H4; assert (H5 : 0 < eps / (5 * Rabs l)).",
            "VernacExtend",
            "a45df87d9a2c7d6ab4d10c05c919eb214c5a24c6"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; apply Rmult_lt_0_compat; [ prove_sup0 | apply Rabs_pos_lt; assumption ] ].",
            "VernacExtend",
            "b1e353e1ae9b4b02bb56d3a84ae88dabcac31927"
        ],
        [
            "elim (HUn_cv _ H5); clear HUn_cv; intros N2 H6; assert (H7 := RinvN_cv); unfold Un_cv in H7; elim (H7 _ H5); clear H7 H5; intros N3 H5; unfold R_dist in H3, H4, H5, H6; set (N := max (max N0 N1) (max N2 N3)).",
            "VernacExtend",
            "a3882d7aa048e617ba6532e15e83e52aaa686ec4"
        ],
        [
            "assert (H7 : forall n:nat, (n >= N1)%nat -> RinvN n < eps / 5).",
            "VernacExtend",
            "cb24dc63f4a8f7e9ea73135f5bed8cac39f08c78"
        ],
        [
            "intros; replace (pos (RinvN n)) with (Rabs (RinvN n - 0)); [ unfold RinvN; apply H4; assumption | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; left; apply (cond_pos (RinvN n)) ].",
            "VernacExtend",
            "1cee66eb93a3d811c97c74c14c11b3d71d2d6db4"
        ],
        [
            "clear H4; assert (H4 := H7); clear H7; assert (H7 : forall n:nat, (n >= N3)%nat -> RinvN n < eps / (5 * Rabs l)).",
            "VernacExtend",
            "0e7f90e7481789b5b4e116cc5d2e7fb60c8969f6"
        ],
        [
            "intros; replace (pos (RinvN n)) with (Rabs (RinvN n - 0)); [ unfold RinvN; apply H5; assumption | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; left; apply (cond_pos (RinvN n)) ].",
            "VernacExtend",
            "6920e18832696fb4dad61c7a7f604f84a260ed06"
        ],
        [
            "clear H5; assert (H5 := H7); clear H7; exists N; intros; unfold R_dist.",
            "VernacExtend",
            "849215a243f5a29058fb3f329745ad4c86646133"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi_sequence RinvN pr3 n) - (RiemannInt_SF (phi_sequence RinvN pr1 n) + l * RiemannInt_SF (phi_sequence RinvN pr2 n))) + Rabs (RiemannInt_SF (phi_sequence RinvN pr1 n) - x0) + Rabs l * Rabs (RiemannInt_SF (phi_sequence RinvN pr2 n) - x)).",
            "VernacExtend",
            "f0905d0810097cf5985cb7180baa9164b5f0115f"
        ],
        [
            "apply Rle_trans with (Rabs (RiemannInt_SF (phi_sequence RinvN pr3 n) - (RiemannInt_SF (phi_sequence RinvN pr1 n) + l * RiemannInt_SF (phi_sequence RinvN pr2 n))) + Rabs (RiemannInt_SF (phi_sequence RinvN pr1 n) - x0 + l * (RiemannInt_SF (phi_sequence RinvN pr2 n) - x))).",
            "VernacExtend",
            "774bf569b1d820ab92b0c87b40b95cdf43e72358"
        ],
        [
            "replace (RiemannInt_SF (phi_sequence RinvN pr3 n) - (x0 + l * x)) with (RiemannInt_SF (phi_sequence RinvN pr3 n) - (RiemannInt_SF (phi_sequence RinvN pr1 n) + l * RiemannInt_SF (phi_sequence RinvN pr2 n)) + (RiemannInt_SF (phi_sequence RinvN pr1 n) - x0 + l * (RiemannInt_SF (phi_sequence RinvN pr2 n) - x))); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "c85daf7310d1e092017f207a6623753fbd05b37f"
        ],
        [
            "rewrite Rplus_assoc; apply Rplus_le_compat_l; rewrite <- Rabs_mult; replace (RiemannInt_SF (phi_sequence RinvN pr1 n) - x0 + l * (RiemannInt_SF (phi_sequence RinvN pr2 n) - x)) with (RiemannInt_SF (phi_sequence RinvN pr1 n) - x0 + l * (RiemannInt_SF (phi_sequence RinvN pr2 n) - x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "08be2c48b076cd17a6f0b2fb877728ed4845927f"
        ],
        [
            "replace eps with (3 * (eps / 5) + eps / 5 + eps / 5).",
            "VernacExtend",
            "a09b202c5537561473f964a5e8dc7e20bfdce52c"
        ],
        [
            "repeat apply Rplus_lt_compat.",
            "VernacExtend",
            "57c369d5b309a04c5472ef7f32c33977152ecb0c"
        ],
        [
            "assert (H7 : exists psi1 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t - phi_sequence RinvN pr1 n t) <= psi1 n t) /\\ Rabs (RiemannInt_SF (psi1 n)) < RinvN n)).",
            "VernacExtend",
            "9593999d6c7bb0365ed5085bca0362cd2e54a83a"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr1 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr1 n0)).",
            "VernacExtend",
            "3279f94d203204eb1750d9594910c106b46f4dfd"
        ],
        [
            "assert (H8 : exists psi2 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (g t - phi_sequence RinvN pr2 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < RinvN n)).",
            "VernacExtend",
            "11f2ada66ded7dfc1fe4c7688f248d1e5a5166e5"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr2 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr2 n0)).",
            "VernacExtend",
            "12909d8878a794f5f9db647cf6731e2e5b79b571"
        ],
        [
            "assert (H9 : exists psi3 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t + l * g t - phi_sequence RinvN pr3 n t) <= psi3 n t) /\\ Rabs (RiemannInt_SF (psi3 n)) < RinvN n)).",
            "VernacExtend",
            "95002c0ed81660f1ea2639a4bace0c1d05a0ee82"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr3 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr3 n0)).",
            "VernacExtend",
            "1bddb32ac19b83a6b1100d6af8dd380e7b805440"
        ],
        [
            "elim H7; clear H7; intros psi1 H7; elim H8; clear H8; intros psi2 H8; elim H9; clear H9; intros psi3 H9; replace (RiemannInt_SF (phi_sequence RinvN pr3 n) - (RiemannInt_SF (phi_sequence RinvN pr1 n) + l * RiemannInt_SF (phi_sequence RinvN pr2 n))) with (RiemannInt_SF (phi_sequence RinvN pr3 n) + -1 * (RiemannInt_SF (phi_sequence RinvN pr1 n) + l * RiemannInt_SF (phi_sequence RinvN pr2 n))); [ idtac | ring ]; do 2 rewrite <- StepFun_P30; assert (H10 : Rmin a b = a).",
            "VernacExtend",
            "4cc5dd4134250c0e83e673467a3069a50b881554"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with H; reflexivity.",
            "VernacExtend",
            "3b29ea8d93350e7e7c47fa6d9cc18d181c272f83"
        ],
        [
            "assert (H11 : Rmax a b = b).",
            "VernacExtend",
            "2c0060866e2f0b0d35d924dfb7ae3c9c2f541f99"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with H; reflexivity.",
            "VernacExtend",
            "a38044ef0a7a46792cf6035f8edfa2f15d360b04"
        ],
        [
            "rewrite H10 in H7; rewrite H10 in H8; rewrite H10 in H9; rewrite H11 in H7; rewrite H11 in H8; rewrite H11 in H9; apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (phi_sequence RinvN pr3 n) (mkStepFun (StepFun_P28 l (phi_sequence RinvN pr1 n) (phi_sequence RinvN pr2 n)))))))).",
            "VernacExtend",
            "672088928b7f750d35638991a752e46fede02a46"
        ],
        [
            "apply StepFun_P34; assumption.",
            "VernacExtend",
            "302ecaef1f1f15c052ed5bdffc68be45ba214735"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 (psi3 n) (mkStepFun (StepFun_P28 (Rabs l) (psi1 n) (psi2 n)))))).",
            "VernacExtend",
            "a9c0bceee365fc70f401106b0b6038d3b73f2c44"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; simpl; rewrite Rmult_1_l.",
            "VernacExtend",
            "e743dca94b06e457e4ea1a333ab2b9b3e1c73fca"
        ],
        [
            "apply Rle_trans with (Rabs (phi_sequence RinvN pr3 n x1 - (f x1 + l * g x1)) + Rabs (f x1 + l * g x1 + -1 * (phi_sequence RinvN pr1 n x1 + l * phi_sequence RinvN pr2 n x1))).",
            "VernacExtend",
            "0baea0c00960725af1c50cc0a4aaeaa65edb02d9"
        ],
        [
            "replace (phi_sequence RinvN pr3 n x1 + -1 * (phi_sequence RinvN pr1 n x1 + l * phi_sequence RinvN pr2 n x1)) with (phi_sequence RinvN pr3 n x1 - (f x1 + l * g x1) + (f x1 + l * g x1 + -1 * (phi_sequence RinvN pr1 n x1 + l * phi_sequence RinvN pr2 n x1))); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "1bac609cc141b223fd158ede500468cab1611f0c"
        ],
        [
            "rewrite Rplus_assoc; apply Rplus_le_compat.",
            "VernacExtend",
            "876994644fbba02b7dc68b7e3af4f22801454e68"
        ],
        [
            "elim (H9 n); intros; rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H13.",
            "VernacExtend",
            "db18352e6728799e963edc38009baf467de16440"
        ],
        [
            "elim H12; intros; split; left; assumption.",
            "VernacExtend",
            "ab74e47744dbff7031e1aa48e64320495774c495"
        ],
        [
            "apply Rle_trans with (Rabs (f x1 - phi_sequence RinvN pr1 n x1) + Rabs l * Rabs (g x1 - phi_sequence RinvN pr2 n x1)).",
            "VernacExtend",
            "9d6247dd5148de5ddf1659769506bdcabfa1e24c"
        ],
        [
            "rewrite <- Rabs_mult; replace (f x1 + (l * g x1 + -1 * (phi_sequence RinvN pr1 n x1 + l * phi_sequence RinvN pr2 n x1))) with (f x1 - phi_sequence RinvN pr1 n x1 + l * (g x1 - phi_sequence RinvN pr2 n x1)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "f5b4a6ec320e0869ed3a6f2facef937b6816803e"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "elim (H7 n); intros; apply H13.",
            "VernacExtend",
            "b36dc93935007d1479f593c3c30ff91624a6df2f"
        ],
        [
            "elim H12; intros; split; left; assumption.",
            "VernacExtend",
            "ab74e47744dbff7031e1aa48e64320495774c495"
        ],
        [
            "apply Rmult_le_compat_l; [ apply Rabs_pos | elim (H8 n); intros; apply H13; elim H12; intros; split; left; assumption ].",
            "VernacExtend",
            "1774df400c3e5cc9923cc58bd2860c5f9a7771b0"
        ],
        [
            "do 2 rewrite StepFun_P30; rewrite Rmult_1_l; replace (3 * (eps / 5)) with (eps / 5 + (eps / 5 + eps / 5)); [ repeat apply Rplus_lt_compat | ring ].",
            "VernacExtend",
            "7d51308a390703fba5fc3358143638fa28cbc919"
        ],
        [
            "apply Rlt_trans with (pos (RinvN n)); [ apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi3 n))); [ apply RRle_abs | elim (H9 n); intros; assumption ] | apply H4; unfold ge; apply le_trans with N; [ apply le_trans with (max N0 N1); [ apply le_max_r | unfold N; apply le_max_l ] | assumption ] ].",
            "VernacExtend",
            "53dd40d796df6203605a76ad786736a7b027f2fa"
        ],
        [
            "apply Rlt_trans with (pos (RinvN n)); [ apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi1 n))); [ apply RRle_abs | elim (H7 n); intros; assumption ] | apply H4; unfold ge; apply le_trans with N; [ apply le_trans with (max N0 N1); [ apply le_max_r | unfold N; apply le_max_l ] | assumption ] ].",
            "VernacExtend",
            "1c76218939f4ae9f80579d86869651d359b59497"
        ],
        [
            "apply Rmult_lt_reg_l with (/ Rabs l).",
            "VernacExtend",
            "d3fdf80a405c8657f4791d5d97c6141f7b8dc2c8"
        ],
        [
            "apply Rinv_0_lt_compat; apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "e4c91a40f2fa1c87312f044d164ffed2c6475792"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "eccb067dc9e836ad48bf16c61cd308004f5d6712"
        ],
        [
            "rewrite Rmult_1_l; replace (/ Rabs l * (eps / 5)) with (eps / (5 * Rabs l)).",
            "VernacExtend",
            "4489c5d365a89adc625e0eb9613a2154bbe795f8"
        ],
        [
            "apply Rlt_trans with (pos (RinvN n)); [ apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi2 n))); [ apply RRle_abs | elim (H8 n); intros; assumption ] | apply H5; unfold ge; apply le_trans with N; [ apply le_trans with (max N2 N3); [ apply le_max_r | unfold N; apply le_max_r ] | assumption ] ].",
            "VernacExtend",
            "12b5a3cb03e10c5d0799cc87232ab1a7821af2ab"
        ],
        [
            "unfold Rdiv; rewrite Rinv_mult_distr; [ ring | discrR | apply Rabs_no_R0; assumption ].",
            "VernacExtend",
            "47d84698f8803e19ac467bb122b3bebf9e83e6ed"
        ],
        [
            "apply Rabs_no_R0; assumption.",
            "VernacExtend",
            "919603fae9f5552a2987bbb604439a06966af0d9"
        ],
        [
            "apply H3; unfold ge; apply le_trans with (max N0 N1); [ apply le_max_l | apply le_trans with N; [ unfold N; apply le_max_l | assumption ] ].",
            "VernacExtend",
            "7f26459e4ed47a07797091c33e026cad9f58ecca"
        ],
        [
            "apply Rmult_lt_reg_l with (/ Rabs l).",
            "VernacExtend",
            "d3fdf80a405c8657f4791d5d97c6141f7b8dc2c8"
        ],
        [
            "apply Rinv_0_lt_compat; apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "e4c91a40f2fa1c87312f044d164ffed2c6475792"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "eccb067dc9e836ad48bf16c61cd308004f5d6712"
        ],
        [
            "rewrite Rmult_1_l; replace (/ Rabs l * (eps / 5)) with (eps / (5 * Rabs l)).",
            "VernacExtend",
            "4489c5d365a89adc625e0eb9613a2154bbe795f8"
        ],
        [
            "apply H6; unfold ge; apply le_trans with (max N2 N3); [ apply le_max_l | apply le_trans with N; [ unfold N; apply le_max_r | assumption ] ].",
            "VernacExtend",
            "fe7fbf3c7ff32cfa28dfb3931719bcefd0135607"
        ],
        [
            "unfold Rdiv; rewrite Rinv_mult_distr; [ ring | discrR | apply Rabs_no_R0; assumption ].",
            "VernacExtend",
            "47d84698f8803e19ac467bb122b3bebf9e83e6ed"
        ],
        [
            "apply Rabs_no_R0; assumption.",
            "VernacExtend",
            "919603fae9f5552a2987bbb604439a06966af0d9"
        ],
        [
            "apply Rmult_eq_reg_l with 5; [ unfold Rdiv; do 2 rewrite Rmult_plus_distr_l; do 3 rewrite (Rmult_comm 5); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
            "VernacExtend",
            "3e983527201cf8a53ffafeb14328711c9d879be5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P13 : forall (f g:R -> R) (a b l:R) (pr1:Riemann_integrable f a b) (pr2:Riemann_integrable g a b) (pr3:Riemann_integrable (fun x:R => f x + l * g x) a b), RiemannInt pr3 = RiemannInt pr1 + l * RiemannInt pr2.",
            "VernacStartTheoremProof",
            "57c104744418af71a39a466a8be540bc5db3482c"
        ],
        [
            "intros; destruct (Rle_dec a b) as [Hle|Hnle]; [ apply RiemannInt_P12; assumption | assert (H : b <= a); [ auto with real | replace (RiemannInt pr3) with (- RiemannInt (RiemannInt_P1 pr3)); [ idtac | symmetry ; apply RiemannInt_P8 ]; replace (RiemannInt pr2) with (- RiemannInt (RiemannInt_P1 pr2)); [ idtac | symmetry ; apply RiemannInt_P8 ]; replace (RiemannInt pr1) with (- RiemannInt (RiemannInt_P1 pr1)); [ idtac | symmetry ; apply RiemannInt_P8 ]; rewrite (RiemannInt_P12 (RiemannInt_P1 pr1) (RiemannInt_P1 pr2) (RiemannInt_P1 pr3) H); ring ] ].",
            "VernacExtend",
            "ccb3522806e67acb59fd2ed76d7cd2a574782e08"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P14 : forall a b c:R, Riemann_integrable (fct_cte c) a b.",
            "VernacStartTheoremProof",
            "bade87147a409a30dc1295e25f33519805b273f9"
        ],
        [
            "unfold Riemann_integrable; intros; split with (mkStepFun (StepFun_P4 a b c)); split with (mkStepFun (StepFun_P4 a b 0)); split; [ intros; simpl; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; unfold fct_cte; right; reflexivity | rewrite StepFun_P18; rewrite Rmult_0_l; rewrite Rabs_R0; apply (cond_pos eps) ].",
            "VernacExtend",
            "fee99eaa80ffb9c37d3a12bb19ee66d833a593aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P15 : forall (a b c:R) (pr:Riemann_integrable (fct_cte c) a b), RiemannInt pr = c * (b - a).",
            "VernacStartTheoremProof",
            "41fa4d546851d6dc5151432a3d0cb0d6e85b4392"
        ],
        [
            "intros; unfold RiemannInt; destruct (RiemannInt_exists pr RinvN RinvN_cv) as (?,HUn_cv); intros; eapply UL_sequence.",
            "VernacExtend",
            "ce6bf4fb62a66fbc8a4f9cf8184e436207387772"
        ],
        [
            "apply HUn_cv.",
            "VernacExtend",
            "c9d50a197d8b0d6c16f3afe0767f2f9345890572"
        ],
        [
            "set (phi1 := fun N:nat => phi_sequence RinvN pr N); change (Un_cv (fun N:nat => RiemannInt_SF (phi1 N)) (c * (b - a))); set (f := fct_cte c); assert (H1 : exists psi1 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t - phi_sequence RinvN pr n t) <= psi1 n t) /\\ Rabs (RiemannInt_SF (psi1 n)) < RinvN n)).",
            "VernacExtend",
            "382e44c4605e6ce9ae5b40f850afaaa5c8860560"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr n)).",
            "VernacExtend",
            "0d58019a916e4d11369a49d6637601a7dcc47b87"
        ],
        [
            "elim H1; clear H1; intros psi1 H1; set (phi2 := fun n:nat => mkStepFun (StepFun_P4 a b c)); set (psi2 := fun n:nat => mkStepFun (StepFun_P4 a b 0)); apply RiemannInt_P11 with f RinvN phi2 psi2 psi1; try assumption.",
            "VernacExtend",
            "9fbe849e4f06a8126a32ec141d8f7a0689153304"
        ],
        [
            "apply RinvN_cv.",
            "VernacExtend",
            "f10b16df0643f95ea2ec4b88f0ca5f723aebe201"
        ],
        [
            "intro; split.",
            "VernacExtend",
            "fab266bb307ddec4a6ab91d7f2efd84a9c1736ef"
        ],
        [
            "intros; unfold f; simpl; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; unfold fct_cte; right; reflexivity.",
            "VernacExtend",
            "503ed5da60639c6242cd06650460d32b6cbea6c3"
        ],
        [
            "unfold psi2; rewrite StepFun_P18; rewrite Rmult_0_l; rewrite Rabs_R0; apply (cond_pos (RinvN n)).",
            "VernacExtend",
            "030224df6036e5569ac0236ec54af2286c9fe0cd"
        ],
        [
            "unfold Un_cv; intros; split with 0%nat; intros; unfold R_dist; unfold phi2; rewrite StepFun_P18; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply H.",
            "VernacExtend",
            "588a4a52b54767343110c95c1d23d8a1847ccf9f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P16 : forall (f:R -> R) (a b:R), Riemann_integrable f a b -> Riemann_integrable (fun x:R => Rabs (f x)) a b.",
            "VernacStartTheoremProof",
            "555992224bf206e54f0935ae471557f39a71c703"
        ],
        [
            "unfold Riemann_integrable; intro f; intros; elim (X eps); clear X; intros phi [psi [H H0]]; split with (mkStepFun (StepFun_P32 phi)); split with psi; split; try assumption; intros; simpl; apply Rle_trans with (Rabs (f t - phi t)); [ apply Rabs_triang_inv2 | apply H; assumption ].",
            "VernacExtend",
            "e5d3d5253511a7cd88649cd0a12fbf48e07c6974"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rle_cv_lim : forall (Un Vn:nat -> R) (l1 l2:R), (forall n:nat, Un n <= Vn n) -> Un_cv Un l1 -> Un_cv Vn l2 -> l1 <= l2.",
            "VernacStartTheoremProof",
            "9a05ed62e1d8da4e4ba616f5c3e4cf47452152c1"
        ],
        [
            "intros; destruct (Rle_dec l1 l2) as [Hle|Hnle].",
            "VernacExtend",
            "d8fdd542d3df1e1a759321dc924600d18c7e4776"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H2 : l2 < l1).",
            "VernacExtend",
            "376bd83f1780a9b90a805187ac641a686fb19e44"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "assert (H3 : 0 < (l1 - l2) / 2).",
            "VernacExtend",
            "7f127e6dc4f301cef6c0d6b82b91391576e370fa"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ apply Rlt_Rminus; assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "a65c58f5e48bb1154d9bda6fac06437a02af99c4"
        ],
        [
            "elim (H1 _ H3); elim (H0 _ H3); clear H0 H1; unfold R_dist; intros; set (N := max x x0); cut (Vn N < Un N).",
            "VernacExtend",
            "f514aa8ea7a29a15f74ee916d4e0756f3113f33b"
        ],
        [
            "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ (H N) H4)).",
            "VernacExtend",
            "e794284c08b7a8223873c00c2433c29e1273e5ad"
        ],
        [
            "apply Rlt_trans with ((l1 + l2) / 2).",
            "VernacExtend",
            "22639030588dcc16c2278f46bd19c4d1d70ea2e6"
        ],
        [
            "apply Rplus_lt_reg_l with (- l2); replace (- l2 + (l1 + l2) / 2) with ((l1 - l2) / 2).",
            "VernacExtend",
            "2538caccef9d99efd6c894cef34b17b8cc2f0a58"
        ],
        [
            "rewrite Rplus_comm; apply Rle_lt_trans with (Rabs (Vn N - l2)).",
            "VernacExtend",
            "b255436da1fdd0a400983f4401a88aa808bb837d"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply H1; unfold ge; unfold N; apply le_max_r.",
            "VernacExtend",
            "1072fa526188dc7ff3fc677bfefa2f2f62ff3367"
        ],
        [
            "apply Rmult_eq_reg_l with 2; [ unfold Rdiv; do 2 rewrite (Rmult_comm 2); rewrite (Rmult_plus_distr_r (- l2) ((l1 + l2) * / 2) 2); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
            "VernacExtend",
            "ab4beb2478fc1883735b49027457b99e10312319"
        ],
        [
            "apply Ropp_lt_cancel; apply Rplus_lt_reg_l with l1; replace (l1 + - ((l1 + l2) / 2)) with ((l1 - l2) / 2).",
            "VernacExtend",
            "70551a911b763d41fce91f2a1a4cc856e8d38121"
        ],
        [
            "apply Rle_lt_trans with (Rabs (Un N - l1)).",
            "VernacExtend",
            "1c1ca47aeddbcf0d799a712fcd870b04e9a92c49"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply RRle_abs.",
            "VernacExtend",
            "7011ff8c44bcdbea135883b84f45196054dcd9da"
        ],
        [
            "apply H0; unfold ge; unfold N; apply le_max_l.",
            "VernacExtend",
            "6d1b1518fc6c52ea6e3132fc0ee93ad84f5d4b2a"
        ],
        [
            "apply Rmult_eq_reg_l with 2; [ unfold Rdiv; do 2 rewrite (Rmult_comm 2); rewrite (Rmult_plus_distr_r l1 (- ((l1 + l2) * / 2)) 2); rewrite <- Ropp_mult_distr_l_reverse; repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
            "VernacExtend",
            "0d1fb0f5d49066dc2dbb25c050bc22ba1dff5a60"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P17 : forall (f:R -> R) (a b:R) (pr1:Riemann_integrable f a b) (pr2:Riemann_integrable (fun x:R => Rabs (f x)) a b), a <= b -> Rabs (RiemannInt pr1) <= RiemannInt pr2.",
            "VernacStartTheoremProof",
            "feb7571f85fac5fcd92de163b7580b1ea0f5078f"
        ],
        [
            "intro f; intros; unfold RiemannInt; case (RiemannInt_exists pr1 RinvN RinvN_cv) as (x0,HUn_cv0); case (RiemannInt_exists pr2 RinvN RinvN_cv) as (x,HUn_cv); set (phi1 := phi_sequence RinvN pr1) in HUn_cv0; set (phi2 := fun N:nat => mkStepFun (StepFun_P32 (phi1 N))); apply Rle_cv_lim with (fun N:nat => Rabs (RiemannInt_SF (phi1 N))) (fun N:nat => RiemannInt_SF (phi2 N)).",
            "VernacExtend",
            "26d74c056945d3adc428fb6be5c122c0cc808aad"
        ],
        [
            "intro; unfold phi2; apply StepFun_P34; assumption.",
            "VernacExtend",
            "271b4ad81cbbba3c032f6016cf9f279f90ee5299"
        ],
        [
            "apply (continuity_seq Rabs (fun N:nat => RiemannInt_SF (phi1 N)) x0); try assumption.",
            "VernacExtend",
            "e7dc0362c290e57f7e50ceb284c2a6c336244876"
        ],
        [
            "apply Rcontinuity_abs.",
            "VernacExtend",
            "e0d20ffaadb1faf3535f8ba7428876cd9b09dd71"
        ],
        [
            "set (phi3 := phi_sequence RinvN pr2); assert (H0 : exists psi3 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (Rabs (f t) - phi3 n t) <= psi3 n t) /\\ Rabs (RiemannInt_SF (psi3 n)) < RinvN n)).",
            "VernacExtend",
            "57e6fa36f6badf87a10f61e54ee1eeddd9149ef4"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr2 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr2 n)).",
            "VernacExtend",
            "0be4e8ea303cef818be3e82d7104ce64b4434913"
        ],
        [
            "assert (H1 : exists psi2 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (Rabs (f t) - phi2 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < RinvN n)).",
            "VernacExtend",
            "e34635fb4d4361f4d0c2e1496838eca77e676c13"
        ],
        [
            "assert (H1 : exists psi2 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t - phi1 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < RinvN n)).",
            "VernacExtend",
            "fa7779bb3c97e449210e57adc35661b88537912b"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr1 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr1 n)).",
            "VernacExtend",
            "cdad587d1595c46ae4abc486623fbad70c69249a"
        ],
        [
            "elim H1; clear H1; intros psi2 H1; split with psi2; intros; elim (H1 n); clear H1; intros; split; try assumption.",
            "VernacExtend",
            "ebb296c4281d82cefab87909ee82223abf6aa558"
        ],
        [
            "intros; unfold phi2; simpl; apply Rle_trans with (Rabs (f t - phi1 n t)).",
            "VernacExtend",
            "6dd7d828c158f549c3ac54b3feb64143c7af8ae9"
        ],
        [
            "apply Rabs_triang_inv2.",
            "VernacExtend",
            "db3a686e29529c6a07ba47aa021c0e984d49629a"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "elim H0; clear H0; intros psi3 H0; elim H1; clear H1; intros psi2 H1; apply RiemannInt_P11 with (fun x:R => Rabs (f x)) RinvN phi3 psi3 psi2; try assumption; apply RinvN_cv.",
            "VernacExtend",
            "b9a721c0f9afd49f4ffa2cb9eb34cfc87c2d39e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P18 : forall (f g:R -> R) (a b:R) (pr1:Riemann_integrable f a b) (pr2:Riemann_integrable g a b), a <= b -> (forall x:R, a < x < b -> f x = g x) -> RiemannInt pr1 = RiemannInt pr2.",
            "VernacStartTheoremProof",
            "4905e29afab812fcb6a4d9a7a16a5c797f92e381"
        ],
        [
            "intro f; intros; unfold RiemannInt; case (RiemannInt_exists pr1 RinvN RinvN_cv) as (x0,HUn_cv0); case (RiemannInt_exists pr2 RinvN RinvN_cv) as (x,HUn_cv); eapply UL_sequence.",
            "VernacExtend",
            "7a4425cdcbb3a9bc21007ed66552e91987732bd1"
        ],
        [
            "apply HUn_cv0.",
            "VernacExtend",
            "7e4420fdba9cfc93098cb0453d9ec22827c8a2bd"
        ],
        [
            "set (phi1 := fun N:nat => phi_sequence RinvN pr1 N); change (Un_cv (fun N:nat => RiemannInt_SF (phi1 N)) x); assert (H1 : exists psi1 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t - phi1 n t) <= psi1 n t) /\\ Rabs (RiemannInt_SF (psi1 n)) < RinvN n)).",
            "VernacExtend",
            "e218bee0a169f6b014431930c256616a27aeac80"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr1 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr1 n)).",
            "VernacExtend",
            "cdad587d1595c46ae4abc486623fbad70c69249a"
        ],
        [
            "elim H1; clear H1; intros psi1 H1; set (phi2 := fun N:nat => phi_sequence RinvN pr2 N).",
            "VernacExtend",
            "5bb5e24e3074cf27cf0a20fa32540958698e6712"
        ],
        [
            "set (phi2_aux := fun (N:nat) (x:R) => match Req_EM_T x a with | left _ => f a | right _ => match Req_EM_T x b with | left _ => f b | right _ => phi2 N x end end).",
            "VernacExtend",
            "8a2f8e6e7088b40ee77ada144cbff630d47d4815"
        ],
        [
            "cut (forall N:nat, IsStepFun (phi2_aux N) a b).",
            "VernacExtend",
            "7b29129654eb94cc9ce8fd6012f21e93a799c0c6"
        ],
        [
            "intro; set (phi2_m := fun N:nat => mkStepFun (X N)).",
            "VernacExtend",
            "7f6d51f1a63532b972fac90e5032337d11059765"
        ],
        [
            "assert (H2 : exists psi2 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (g t - phi2 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < RinvN n)).",
            "VernacExtend",
            "419b804473a4a6da9f6524978ad8261199d3270a"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr2 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr2 n)).",
            "VernacExtend",
            "0be4e8ea303cef818be3e82d7104ce64b4434913"
        ],
        [
            "elim H2; clear H2; intros psi2 H2; apply RiemannInt_P11 with f RinvN phi2_m psi2 psi1; try assumption.",
            "VernacExtend",
            "1e3a8634a0c29fc45863ac7731507a4a1f7de22c"
        ],
        [
            "apply RinvN_cv.",
            "VernacExtend",
            "f10b16df0643f95ea2ec4b88f0ca5f723aebe201"
        ],
        [
            "intro; elim (H2 n); intros; split; try assumption.",
            "VernacExtend",
            "40f351ff37867bbcc9a9814a2ccce9428eac4944"
        ],
        [
            "intros; unfold phi2_m; simpl; unfold phi2_aux; destruct (Req_EM_T t a) as [Heqa|Hneqa]; destruct (Req_EM_T t b) as [Heqb|Hneqb].",
            "VernacExtend",
            "0ab89691826932607a5e9ec5d6c95e97e233f554"
        ],
        [
            "rewrite Heqa; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply Rle_trans with (Rabs (g t - phi2 n t)).",
            "VernacExtend",
            "e776b05a17f7cfb54f13c9050914fbcc31ed324d"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "pattern a at 3; rewrite <- Heqa; apply H3; assumption.",
            "VernacExtend",
            "99ee005548611a4f38931224688f42c3d3d9b1c0"
        ],
        [
            "rewrite Heqa; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply Rle_trans with (Rabs (g t - phi2 n t)).",
            "VernacExtend",
            "e776b05a17f7cfb54f13c9050914fbcc31ed324d"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "pattern a at 3; rewrite <- Heqa; apply H3; assumption.",
            "VernacExtend",
            "99ee005548611a4f38931224688f42c3d3d9b1c0"
        ],
        [
            "rewrite Heqb; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply Rle_trans with (Rabs (g t - phi2 n t)).",
            "VernacExtend",
            "57f944a1cb58b598b90b51a5bb77cbb58fd603bb"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "pattern b at 3; rewrite <- Heqb; apply H3; assumption.",
            "VernacExtend",
            "8372323ab07e9b70bedd17d70070819b924737a9"
        ],
        [
            "replace (f t) with (g t).",
            "VernacExtend",
            "d31a045f40c63ee5d365005e32122ed37be90e9d"
        ],
        [
            "apply H3; assumption.",
            "VernacExtend",
            "5797d1cfc3adb7c1e34d2f0d332d89f950d72fea"
        ],
        [
            "symmetry ; apply H0; elim H5; clear H5; intros.",
            "VernacExtend",
            "98df95ba053a5d69fe42177ea49dca543b9b8587"
        ],
        [
            "assert (H7 : Rmin a b = a).",
            "VernacExtend",
            "d32f0f28a3678c8df9a5b058258c5331bd63f106"
        ],
        [
            "unfold Rmin; destruct (Rle_dec a b) as [Heqab|Hneqab]; [ reflexivity | elim Hneqab; assumption ].",
            "VernacExtend",
            "2b4dea1a307bcda5d84e09314c37e4a8268bcf48"
        ],
        [
            "assert (H8 : Rmax a b = b).",
            "VernacExtend",
            "48af41f4e471008d52d9d9f6f572d2f32e80218e"
        ],
        [
            "unfold Rmax; destruct (Rle_dec a b) as [Heqab|Hneqab]; [ reflexivity | elim Hneqab; assumption ].",
            "VernacExtend",
            "dd8cb3ccd3deffceb3f0289f1b09a21f7c225955"
        ],
        [
            "rewrite H7 in H5; rewrite H8 in H6; split.",
            "VernacExtend",
            "707b0c884a2ab2272c190e16a88d7e5a3dd61c21"
        ],
        [
            "elim H5; intro; [ assumption | elim Hneqa; symmetry ; assumption ].",
            "VernacExtend",
            "89aca8e6d7a7d31f1227786cc566b4a04cea2308"
        ],
        [
            "elim H6; intro; [ assumption | elim Hneqb; assumption ].",
            "VernacExtend",
            "1a56796f84d7bb299a71fe247cd6e489894e480d"
        ],
        [
            "cut (forall N:nat, RiemannInt_SF (phi2_m N) = RiemannInt_SF (phi2 N)).",
            "VernacExtend",
            "2f05acc3973c76f8cd5b628be1133ad10804d5af"
        ],
        [
            "intro; unfold Un_cv; intros; elim (HUn_cv _ H4); intros; exists x1; intros; rewrite (H3 n); apply H5; assumption.",
            "VernacExtend",
            "9fbc1b8fd358ec01cb7e38f01abe46856586ebf2"
        ],
        [
            "intro; apply Rle_antisym.",
            "VernacExtend",
            "433cff72bb334e8e8261c4ad318de9cea6b1a37e"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; unfold phi2_m; simpl; unfold phi2_aux; destruct (Req_EM_T x1 a) as [Heqa|Hneqa]; destruct (Req_EM_T x1 b) as [Heqb|Hneqb].",
            "VernacExtend",
            "b70a30e90c3c11896d006cdb0c5ee7a9d26c32c9"
        ],
        [
            "elim H3; intros; rewrite Heqa in H4; elim (Rlt_irrefl _ H4).",
            "VernacExtend",
            "83f24dd0f532a509fe07f02b42de2ef529f34f3d"
        ],
        [
            "elim H3; intros; rewrite Heqa in H4; elim (Rlt_irrefl _ H4).",
            "VernacExtend",
            "83f24dd0f532a509fe07f02b42de2ef529f34f3d"
        ],
        [
            "elim H3; intros; rewrite Heqb in H5; elim (Rlt_irrefl _ H5).",
            "VernacExtend",
            "8d754cadd78cd65389835ef4a70db282edc5022b"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; unfold phi2_m; simpl; unfold phi2_aux; destruct (Req_EM_T x1 a) as [ -> |Hneqa].",
            "VernacExtend",
            "33643882ce48f05e90d0351b2486b4e27259a799"
        ],
        [
            "elim H3; intros; elim (Rlt_irrefl _ H4).",
            "VernacExtend",
            "c2c88e702ba9e5ea65c1cc0da64df4a405a7e267"
        ],
        [
            "destruct (Req_EM_T x1 b) as [ -> |Hneqb].",
            "VernacExtend",
            "84a9fa921aa412c99f8f0f7e951cf2bc64982640"
        ],
        [
            "elim H3; intros; elim (Rlt_irrefl _ H5).",
            "VernacExtend",
            "88a7da8984203355071404277bbc8158d79b8908"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "intro; assert (H2 := pre (phi2 N)); unfold IsStepFun in H2; unfold is_subdivision in H2; elim H2; clear H2; intros l [lf H2]; split with l; split with lf; unfold adapted_couple in H2; decompose [and] H2; clear H2; unfold adapted_couple; repeat split; try assumption.",
            "VernacExtend",
            "29b612e583e6274add377bc140559b1bd22ba713"
        ],
        [
            "intros; assert (H9 := H8 i H2); unfold constant_D_eq, open_interval in H9; unfold constant_D_eq, open_interval; intros; rewrite <- (H9 x1 H7); assert (H10 : a <= pos_Rl l i).",
            "VernacExtend",
            "bc979bf30d66e7878563f2d8080844b42f96ae27"
        ],
        [
            "replace a with (Rmin a b).",
            "VernacExtend",
            "4a0c6737ae26b44753b1be4180fc9efce97e5fa2"
        ],
        [
            "rewrite <- H5; elim (RList_P6 l); intros; apply H10.",
            "VernacExtend",
            "63cf7f47077e514563ae28d659fbefc58da3eac9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "apply lt_trans with (pred (Rlength l)); [ assumption | apply lt_pred_n_n ].",
            "VernacExtend",
            "b3d479ef654bf62f1faf65a89ab55f12fa85be73"
        ],
        [
            "apply neq_O_lt; intro; rewrite <- H12 in H6; discriminate.",
            "VernacExtend",
            "b6bff55a44e2d867abd19155431820a0cdf4ca32"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with H; reflexivity.",
            "VernacExtend",
            "3b29ea8d93350e7e7c47fa6d9cc18d181c272f83"
        ],
        [
            "assert (H11 : pos_Rl l (S i) <= b).",
            "VernacExtend",
            "2c0b31f8ab493cd018ab6ac38a73b099ac7c71ce"
        ],
        [
            "replace b with (Rmax a b).",
            "VernacExtend",
            "6043bdb58a81381d63dac345ad3c4cbc3f0372c1"
        ],
        [
            "rewrite <- H4; elim (RList_P6 l); intros; apply H11.",
            "VernacExtend",
            "0e9f76970caadb8be57ad41c9be6abf8885a84d2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply lt_le_S; assumption.",
            "VernacExtend",
            "3b8f08f818b2786b96cf9f3daadbb5ad3e94f1cb"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; intro; rewrite <- H13 in H6; discriminate.",
            "VernacExtend",
            "bf8f0dbadf96ef934bddbf38f683b415124fa436"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with H; reflexivity.",
            "VernacExtend",
            "a38044ef0a7a46792cf6035f8edfa2f15d360b04"
        ],
        [
            "elim H7; clear H7; intros; unfold phi2_aux; destruct (Req_EM_T x1 a) as [Heq|Hneq]; destruct (Req_EM_T x1 b) as [Heq'|Hneq'].",
            "VernacExtend",
            "523efddacfbe1f190abd9efe2df9e379437b1d70"
        ],
        [
            "rewrite Heq' in H12; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H11 H12)).",
            "VernacExtend",
            "7e31eb885d5bc912e8124ed6cd44c6e1d47007f0"
        ],
        [
            "rewrite Heq in H7; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H10 H7)).",
            "VernacExtend",
            "bbc40920e05693367ff855b56f23fc464a5cd6e0"
        ],
        [
            "rewrite Heq' in H12; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H11 H12)).",
            "VernacExtend",
            "7e31eb885d5bc912e8124ed6cd44c6e1d47007f0"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P19 : forall (f g:R -> R) (a b:R) (pr1:Riemann_integrable f a b) (pr2:Riemann_integrable g a b), a <= b -> (forall x:R, a < x < b -> f x <= g x) -> RiemannInt pr1 <= RiemannInt pr2.",
            "VernacStartTheoremProof",
            "ff77019d474e16bb7138d2cdf54fcafc093817bd"
        ],
        [
            "intro f; intros; apply Rplus_le_reg_l with (- RiemannInt pr1); rewrite Rplus_opp_l; rewrite Rplus_comm; apply Rle_trans with (Rabs (RiemannInt (RiemannInt_P10 (-1) pr2 pr1))).",
            "VernacExtend",
            "fc27718d96928b6faf2a14c69fcd63cd8f307938"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "replace (RiemannInt pr2 + - RiemannInt pr1) with (RiemannInt (RiemannInt_P16 (RiemannInt_P10 (-1) pr2 pr1))).",
            "VernacExtend",
            "bc26b49a62f2ea0a3010643e211307a56c199a97"
        ],
        [
            "apply (RiemannInt_P17 (RiemannInt_P10 (-1) pr2 pr1) (RiemannInt_P16 (RiemannInt_P10 (-1) pr2 pr1))); assumption.",
            "VernacExtend",
            "3806d85bdb2e1975d8d8f700e0362aba4b8347bd"
        ],
        [
            "replace (RiemannInt pr2 + - RiemannInt pr1) with (RiemannInt (RiemannInt_P10 (-1) pr2 pr1)).",
            "VernacExtend",
            "92dfe1d7056d28312b6b829df53dc8ae59fa7a6d"
        ],
        [
            "apply RiemannInt_P18; try assumption.",
            "VernacExtend",
            "c4c120e0f7d2a177b6946068a518c21a60c5eade"
        ],
        [
            "intros; apply Rabs_right.",
            "VernacExtend",
            "d651579e234d844214be8f3e0469c6b176825450"
        ],
        [
            "apply Rle_ge; apply Rplus_le_reg_l with (f x); rewrite Rplus_0_r; replace (f x + (g x + -1 * f x)) with (g x); [ apply H0; assumption | ring ].",
            "VernacExtend",
            "e7291c69f05df8a4934f6bbc2be6975b8927c3e7"
        ],
        [
            "rewrite (RiemannInt_P12 pr2 pr1 (RiemannInt_P10 (-1) pr2 pr1)); [ ring | assumption ].",
            "VernacExtend",
            "3dbcc4dc218753fcb6174ae6ca85ce8ce0f10621"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma FTC_P1 : forall (f:R -> R) (a b:R), a <= b -> (forall x:R, a <= x <= b -> continuity_pt f x) -> forall x:R, a <= x -> x <= b -> Riemann_integrable f a x.",
            "VernacStartTheoremProof",
            "e7124767b5c9f0bccd2eff1848a50e42db9424a2"
        ],
        [
            "intros; apply continuity_implies_RiemannInt; [ assumption | intros; apply H0; elim H3; intros; split; assumption || apply Rle_trans with x; assumption ].",
            "VernacExtend",
            "3215c34a4ceefd8f3cf4655390b707f066c1cfbd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition primitive (f:R -> R) (a b:R) (h:a <= b) (pr:forall x:R, a <= x -> x <= b -> Riemann_integrable f a x) (x:R) : R := match Rle_dec a x with | left r => match Rle_dec x b with | left r0 => RiemannInt (pr x r r0) | right _ => f b * (x - b) + RiemannInt (pr b h (Rle_refl b)) end | right _ => f a * (x - a) end.",
            "VernacDefinition",
            "d1750f006fa10a7b4d280a73d8ef61ff91a2df38"
        ],
        [
            "Lemma RiemannInt_P20 : forall (f:R -> R) (a b:R) (h:a <= b) (pr:forall x:R, a <= x -> x <= b -> Riemann_integrable f a x) (pr0:Riemann_integrable f a b), RiemannInt pr0 = primitive h pr b - primitive h pr a.",
            "VernacStartTheoremProof",
            "9953bf7a9e4afaf8b9657f3e2a3deaade2559905"
        ],
        [
            "intros; replace (primitive h pr a) with 0.",
            "VernacExtend",
            "6ee42c26a3bebb4e649e57b09b3f7483647641fa"
        ],
        [
            "replace (RiemannInt pr0) with (primitive h pr b).",
            "VernacExtend",
            "fb366a713b489f29d7a621c2ac269d6b767a5618"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold primitive; destruct (Rle_dec a b) as [Hle|[]]; destruct (Rle_dec b b) as [Hle'|Hnle']; [ apply RiemannInt_P5 | destruct Hnle'; right; reflexivity | assumption | assumption].",
            "VernacExtend",
            "815758a4d6a4e7230b4c5a4f7698b7c58a2e5a5c"
        ],
        [
            "symmetry ; unfold primitive; destruct (Rle_dec a a) as [Hle|[]]; destruct (Rle_dec a b) as [Hle'|Hnle']; [ apply RiemannInt_P9 | elim Hnle'; assumption | right; reflexivity | right; reflexivity ].",
            "VernacExtend",
            "4ac4ee4f1be0590c56caedeadfe9e91fa8ce57ec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P21 : forall (f:R -> R) (a b c:R), a <= b -> b <= c -> Riemann_integrable f a b -> Riemann_integrable f b c -> Riemann_integrable f a c.",
            "VernacStartTheoremProof",
            "4c9c669727a473f36ebfd30b7282ec20f3e03eeb"
        ],
        [
            "unfold Riemann_integrable; intros f a b c Hyp1 Hyp2 X X0 eps.",
            "VernacExtend",
            "88d790775dae728fb213b25917b92e482b63a441"
        ],
        [
            "assert (H : 0 < eps / 2).",
            "VernacExtend",
            "d4836348e668957c1aadc63f2fa7422c1f6cce05"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "b485b8a95731f8846932bed2f577801cd11f1146"
        ],
        [
            "elim (X (mkposreal _ H)); clear X; intros phi1 [psi1 H1]; elim (X0 (mkposreal _ H)); clear X0; intros phi2 [psi2 H2].",
            "VernacExtend",
            "c8e2ed2035171e48ec1e2724a0ceae5e28bd467e"
        ],
        [
            "set (phi3 := fun x:R => match Rle_dec a x with | left _ => match Rle_dec x b with | left _ => phi1 x | right _ => phi2 x end | right _ => 0 end).",
            "VernacExtend",
            "376ecfed26c80301bb4f0adf33021e5d395c3a67"
        ],
        [
            "set (psi3 := fun x:R => match Rle_dec a x with | left _ => match Rle_dec x b with | left _ => psi1 x | right _ => psi2 x end | right _ => 0 end).",
            "VernacExtend",
            "266894bcf088c63a1f7eb97cf9baf921b9d03d35"
        ],
        [
            "cut (IsStepFun phi3 a c).",
            "VernacExtend",
            "26ca986d9b0702f3942db62f5cb060d02322c038"
        ],
        [
            "intro; cut (IsStepFun psi3 a b).",
            "VernacExtend",
            "3b6a32db5d7b62289e1e6df2bddac89a693f63b7"
        ],
        [
            "intro; cut (IsStepFun psi3 b c).",
            "VernacExtend",
            "a67d1488bc06cd85724eff9c9ae5c0ced95ab162"
        ],
        [
            "intro; cut (IsStepFun psi3 a c).",
            "VernacExtend",
            "3169a16a600eda2beb4569a14e95a57b4ed6781c"
        ],
        [
            "intro; split with (mkStepFun X); split with (mkStepFun X2); simpl; split.",
            "VernacExtend",
            "5f687ad160f0225d11af057c26e4ddfa9427154c"
        ],
        [
            "intros; unfold phi3, psi3; case (Rle_dec t b) as [|Hnle]; case (Rle_dec a t) as [|Hnle'].",
            "VernacExtend",
            "787baa95c29d6f9cffdf209d828d6cf71d40accb"
        ],
        [
            "elim H1; intros; apply H3.",
            "VernacExtend",
            "b358052496cc23e7720fdbda808878b12fc5caf2"
        ],
        [
            "replace (Rmin a b) with a.",
            "VernacExtend",
            "4c55f2d2ff4bc70a5f5c00ff713afa66f8589ad5"
        ],
        [
            "replace (Rmax a b) with b.",
            "VernacExtend",
            "534c915ca8b30f00658190617b4bda4abd7377d6"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hyp1; reflexivity.",
            "VernacExtend",
            "7ccbe87a94be8af6c28db89349a258e2c7d8536b"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hyp1; reflexivity.",
            "VernacExtend",
            "cb153170f09618c02d35724901e83e4f689cbe03"
        ],
        [
            "elim Hnle'; replace a with (Rmin a c).",
            "VernacExtend",
            "ca0f8efd6028ff901bdf1ad6bb76b3e05b61afe0"
        ],
        [
            "elim H0; intros; assumption.",
            "VernacExtend",
            "93aaa20e409e093c318ed7f35309abbda4e55e01"
        ],
        [
            "unfold Rmin; case (Rle_dec a c) as [|[]]; [ reflexivity | apply Rle_trans with b; assumption ].",
            "VernacExtend",
            "dfc87b84150b9817cd27ecdeabeb5b8451e28687"
        ],
        [
            "elim H2; intros; apply H3.",
            "VernacExtend",
            "825d20ed8450173860a8194df7e06782017afacb"
        ],
        [
            "replace (Rmax b c) with (Rmax a c).",
            "VernacExtend",
            "c1a0059e84cd48d916b685bf42b2800330048570"
        ],
        [
            "elim H0; intros; split; try assumption.",
            "VernacExtend",
            "976c47cbaa18d84f22f501ca3cb1f4e5eb2a43f2"
        ],
        [
            "replace (Rmin b c) with b.",
            "VernacExtend",
            "6580b5b037a62579b741ef1f2591fb4261bbace9"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "unfold Rmin; decide (Rle_dec b c) with Hyp2; reflexivity.",
            "VernacExtend",
            "06400278aece6a2c5cb917a9e96b909f8108d48d"
        ],
        [
            "unfold Rmax; decide (Rle_dec b c) with Hyp2; case (Rle_dec a c) as [|[]]; [ reflexivity | apply Rle_trans with b; assumption ].",
            "VernacExtend",
            "0c4517b6c567590bc11ee6d054904b30eea080e4"
        ],
        [
            "elim Hnle'; replace a with (Rmin a c).",
            "VernacExtend",
            "ca0f8efd6028ff901bdf1ad6bb76b3e05b61afe0"
        ],
        [
            "elim H0; intros; assumption.",
            "VernacExtend",
            "93aaa20e409e093c318ed7f35309abbda4e55e01"
        ],
        [
            "unfold Rmin; case (Rle_dec a c) as [|[]]; [ reflexivity | apply Rle_trans with b; assumption ].",
            "VernacExtend",
            "dfc87b84150b9817cd27ecdeabeb5b8451e28687"
        ],
        [
            "rewrite <- (StepFun_P43 X0 X1 X2).",
            "VernacExtend",
            "978c1f08a146132185d3d016c18863eef2a6964c"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (mkStepFun X0)) + Rabs (RiemannInt_SF (mkStepFun X1))).",
            "VernacExtend",
            "2c34eee8d27b8a1f8dd9dc5098a4f1fc1772ed8a"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "rewrite (double_var eps); replace (RiemannInt_SF (mkStepFun X0)) with (RiemannInt_SF psi1).",
            "VernacExtend",
            "717d907f9697e99270ac834947d5782152e35d23"
        ],
        [
            "replace (RiemannInt_SF (mkStepFun X1)) with (RiemannInt_SF psi2).",
            "VernacExtend",
            "01a886490874a05f1b272d43e6789785ddace7f4"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "elim H1; intros; assumption.",
            "VernacExtend",
            "cc00e4116d0aefea281577ea01f1c22b86beb4e0"
        ],
        [
            "elim H2; intros; assumption.",
            "VernacExtend",
            "16bb2af93f0861122c21182e52abbea6cd8c5e4c"
        ],
        [
            "apply Rle_antisym.",
            "VernacExtend",
            "8e9431fb6db6f151160007e68131f4f5cb1c7968"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "simpl; intros; unfold psi3; elim H0; clear H0; intros; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H0)) | right; reflexivity | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] ].",
            "VernacExtend",
            "3f0157dd767551b5200a5c18c66fa7977200217c"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "simpl; intros; unfold psi3; elim H0; clear H0; intros; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H0)) | right; reflexivity | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] ].",
            "VernacExtend",
            "3f0157dd767551b5200a5c18c66fa7977200217c"
        ],
        [
            "apply Rle_antisym.",
            "VernacExtend",
            "8e9431fb6db6f151160007e68131f4f5cb1c7968"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "simpl; intros; unfold psi3; elim H0; clear H0; intros; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ right; reflexivity | elim Hnle'; left; assumption | elim Hnle; left; assumption | elim Hnle; left; assumption ].",
            "VernacExtend",
            "b4aebe2990e5451547d1d30e4e22442fe9e458eb"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "simpl; intros; unfold psi3; elim H0; clear H0; intros; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ right; reflexivity | elim Hnle'; left; assumption | elim Hnle; left; assumption | elim Hnle; left; assumption ].",
            "VernacExtend",
            "b4aebe2990e5451547d1d30e4e22442fe9e458eb"
        ],
        [
            "apply StepFun_P46 with b; assumption.",
            "VernacExtend",
            "27d6e45db2a3e5d35c1181dcd082e07abf2882c2"
        ],
        [
            "assert (H3 := pre psi2); unfold IsStepFun in H3; unfold is_subdivision in H3; elim H3; clear H3; intros l1 [lf1 H3]; split with l1; split with lf1; unfold adapted_couple in H3; decompose [and] H3; clear H3; unfold adapted_couple; repeat split; try assumption.",
            "VernacExtend",
            "18dc68f5166fb73ae4c0f3989f404263d7e31027"
        ],
        [
            "intros; assert (H9 := H8 i H3); unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H9; intros; rewrite <- (H9 x H7); unfold psi3; assert (H10 : b < x).",
            "VernacExtend",
            "8b8f3eca04cafd251c842ba2a7b155ef3a312430"
        ],
        [
            "apply Rle_lt_trans with (pos_Rl l1 i).",
            "VernacExtend",
            "b8d497764f3c13ede761fad08f268f6701db904d"
        ],
        [
            "replace b with (Rmin b c).",
            "VernacExtend",
            "0f362c5ec040cf496ce0d28154d8460dec4dea19"
        ],
        [
            "rewrite <- H5; elim (RList_P6 l1); intros; apply H10; try assumption.",
            "VernacExtend",
            "50ef47d76fc4f3438659d4d24b2a978b318237d0"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "apply lt_trans with (pred (Rlength l1)); try assumption; apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H12 in H6; discriminate.",
            "VernacExtend",
            "9c215fff5f2a897b082bcdd829d3967cc7340970"
        ],
        [
            "unfold Rmin; decide (Rle_dec b c) with Hyp2; reflexivity.",
            "VernacExtend",
            "06400278aece6a2c5cb917a9e96b909f8108d48d"
        ],
        [
            "elim H7; intros; assumption.",
            "VernacExtend",
            "204a138266066951af662ca2a9d0c4308b4b1aad"
        ],
        [
            "destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H10)) | reflexivity | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] ].",
            "VernacExtend",
            "352af9c17e695190f910d3fb00e0332fbb469646"
        ],
        [
            "assert (H3 := pre psi1); unfold IsStepFun in H3; unfold is_subdivision in H3; elim H3; clear H3; intros l1 [lf1 H3]; split with l1; split with lf1; unfold adapted_couple in H3; decompose [and] H3; clear H3; unfold adapted_couple; repeat split; try assumption.",
            "VernacExtend",
            "0290bb2b38195df75ac7503c7ef29768f211a7a8"
        ],
        [
            "intros; assert (H9 := H8 i H3); unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H9; intros; rewrite <- (H9 x H7); unfold psi3; assert (H10 : x <= b).",
            "VernacExtend",
            "2aa34664a1ed4410afb9c2c67c65166d4376de1a"
        ],
        [
            "apply Rle_trans with (pos_Rl l1 (S i)).",
            "VernacExtend",
            "014e2a4aa8064aca24f536fa3df53f5dcb48ce95"
        ],
        [
            "elim H7; intros; left; assumption.",
            "VernacExtend",
            "7e026c9e003998ad371dc24f9ff049b1dd40c337"
        ],
        [
            "replace b with (Rmax a b).",
            "VernacExtend",
            "6043bdb58a81381d63dac345ad3c4cbc3f0372c1"
        ],
        [
            "rewrite <- H4; elim (RList_P6 l1); intros; apply H10; try assumption.",
            "VernacExtend",
            "2488745f1519aa649084558ead40860673e71651"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H12 in H6; discriminate.",
            "VernacExtend",
            "35cfc42b5b32b992b561fb886bfbef740e234c35"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hyp1; reflexivity.",
            "VernacExtend",
            "7ccbe87a94be8af6c28db89349a258e2c7d8536b"
        ],
        [
            "assert (H11 : a <= x).",
            "VernacExtend",
            "3b1e7bc120e4845b3651e0d87603af66008b60ab"
        ],
        [
            "apply Rle_trans with (pos_Rl l1 i).",
            "VernacExtend",
            "0794cf35b670a910c81d1700f13dc0f765bb673c"
        ],
        [
            "replace a with (Rmin a b).",
            "VernacExtend",
            "4a0c6737ae26b44753b1be4180fc9efce97e5fa2"
        ],
        [
            "rewrite <- H5; elim (RList_P6 l1); intros; apply H11; try assumption.",
            "VernacExtend",
            "2c4d4979fed14350df7df1585d6f825e9c2753d0"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "apply lt_trans with (pred (Rlength l1)); try assumption; apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H13 in H6; discriminate.",
            "VernacExtend",
            "5d3c801560cb230acde64e766ca70db2c72d5de7"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hyp1; reflexivity.",
            "VernacExtend",
            "cb153170f09618c02d35724901e83e4f689cbe03"
        ],
        [
            "left; elim H7; intros; assumption.",
            "VernacExtend",
            "bbd409c5eb3440d4f5590f5ce89e597c6e9684f1"
        ],
        [
            "decide (Rle_dec a x) with H11; decide (Rle_dec x b) with H10; reflexivity.",
            "VernacExtend",
            "83700e7144fd313a57f976d70bdb566cef285e29"
        ],
        [
            "apply StepFun_P46 with b.",
            "VernacExtend",
            "4901a4b5fd5869e810d6dfe7270572e258468a31"
        ],
        [
            "assert (H3 := pre phi1); unfold IsStepFun in H3; unfold is_subdivision in H3; elim H3; clear H3; intros l1 [lf1 H3]; split with l1; split with lf1; unfold adapted_couple in H3; decompose [and] H3; clear H3; unfold adapted_couple; repeat split; try assumption.",
            "VernacExtend",
            "14cd60d45e8a87b1abe70e62536836448ac1bd6a"
        ],
        [
            "intros; assert (H9 := H8 i H3); unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H9; intros; rewrite <- (H9 x H7); unfold psi3; assert (H10 : x <= b).",
            "VernacExtend",
            "2aa34664a1ed4410afb9c2c67c65166d4376de1a"
        ],
        [
            "apply Rle_trans with (pos_Rl l1 (S i)).",
            "VernacExtend",
            "014e2a4aa8064aca24f536fa3df53f5dcb48ce95"
        ],
        [
            "elim H7; intros; left; assumption.",
            "VernacExtend",
            "7e026c9e003998ad371dc24f9ff049b1dd40c337"
        ],
        [
            "replace b with (Rmax a b).",
            "VernacExtend",
            "6043bdb58a81381d63dac345ad3c4cbc3f0372c1"
        ],
        [
            "rewrite <- H4; elim (RList_P6 l1); intros; apply H10; try assumption.",
            "VernacExtend",
            "2488745f1519aa649084558ead40860673e71651"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H12 in H6; discriminate.",
            "VernacExtend",
            "35cfc42b5b32b992b561fb886bfbef740e234c35"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hyp1; reflexivity.",
            "VernacExtend",
            "7ccbe87a94be8af6c28db89349a258e2c7d8536b"
        ],
        [
            "assert (H11 : a <= x).",
            "VernacExtend",
            "3b1e7bc120e4845b3651e0d87603af66008b60ab"
        ],
        [
            "apply Rle_trans with (pos_Rl l1 i).",
            "VernacExtend",
            "0794cf35b670a910c81d1700f13dc0f765bb673c"
        ],
        [
            "replace a with (Rmin a b).",
            "VernacExtend",
            "4a0c6737ae26b44753b1be4180fc9efce97e5fa2"
        ],
        [
            "rewrite <- H5; elim (RList_P6 l1); intros; apply H11; try assumption.",
            "VernacExtend",
            "2c4d4979fed14350df7df1585d6f825e9c2753d0"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "apply lt_trans with (pred (Rlength l1)); try assumption; apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H13 in H6; discriminate.",
            "VernacExtend",
            "5d3c801560cb230acde64e766ca70db2c72d5de7"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hyp1; reflexivity.",
            "VernacExtend",
            "cb153170f09618c02d35724901e83e4f689cbe03"
        ],
        [
            "left; elim H7; intros; assumption.",
            "VernacExtend",
            "bbd409c5eb3440d4f5590f5ce89e597c6e9684f1"
        ],
        [
            "unfold phi3; decide (Rle_dec a x) with H11; decide (Rle_dec x b) with H10; reflexivity || elim n; assumption.",
            "VernacExtend",
            "072ed886cf0e6591c7aa4f19597beee8a2763453"
        ],
        [
            "assert (H3 := pre phi2); unfold IsStepFun in H3; unfold is_subdivision in H3; elim H3; clear H3; intros l1 [lf1 H3]; split with l1; split with lf1; unfold adapted_couple in H3; decompose [and] H3; clear H3; unfold adapted_couple; repeat split; try assumption.",
            "VernacExtend",
            "3f5333b501427d05a244bc9bb28383b2ddeae810"
        ],
        [
            "intros; assert (H9 := H8 i H3); unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H9; intros; rewrite <- (H9 x H7); unfold psi3; assert (H10 : b < x).",
            "VernacExtend",
            "8b8f3eca04cafd251c842ba2a7b155ef3a312430"
        ],
        [
            "apply Rle_lt_trans with (pos_Rl l1 i).",
            "VernacExtend",
            "b8d497764f3c13ede761fad08f268f6701db904d"
        ],
        [
            "replace b with (Rmin b c).",
            "VernacExtend",
            "0f362c5ec040cf496ce0d28154d8460dec4dea19"
        ],
        [
            "rewrite <- H5; elim (RList_P6 l1); intros; apply H10; try assumption.",
            "VernacExtend",
            "50ef47d76fc4f3438659d4d24b2a978b318237d0"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "apply lt_trans with (pred (Rlength l1)); try assumption; apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H12 in H6; discriminate.",
            "VernacExtend",
            "9c215fff5f2a897b082bcdd829d3967cc7340970"
        ],
        [
            "unfold Rmin; decide (Rle_dec b c) with Hyp2; reflexivity.",
            "VernacExtend",
            "06400278aece6a2c5cb917a9e96b909f8108d48d"
        ],
        [
            "elim H7; intros; assumption.",
            "VernacExtend",
            "204a138266066951af662ca2a9d0c4308b4b1aad"
        ],
        [
            "unfold phi3; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; intros; [ elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H10)) | reflexivity | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] ].",
            "VernacExtend",
            "06a219371f664e1d12ebbe591c29d62960abc4b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P22 : forall (f:R -> R) (a b c:R), Riemann_integrable f a b -> a <= c <= b -> Riemann_integrable f a c.",
            "VernacStartTheoremProof",
            "5ee1f4f3af224c26c1d9e5c8e8c0d9659fb294d9"
        ],
        [
            "unfold Riemann_integrable; intros; elim (X eps); clear X; intros phi [psi H0]; elim H; elim H0; clear H H0; intros; assert (H3 : IsStepFun phi a c).",
            "VernacExtend",
            "ab1071357b562e481eb06217f25e815a01ae966d"
        ],
        [
            "apply StepFun_P44 with b.",
            "VernacExtend",
            "34a147faa7ebc92ff75aa32422e8b9143d8125c9"
        ],
        [
            "apply (pre phi).",
            "VernacExtend",
            "43b235e0ca3b90f466adced0f2a750f94f3eb5d3"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "assert (H4 : IsStepFun psi a c).",
            "VernacExtend",
            "cd23fc02129f24c3abef8c0a1db5ea8d9175ab3b"
        ],
        [
            "apply StepFun_P44 with b.",
            "VernacExtend",
            "34a147faa7ebc92ff75aa32422e8b9143d8125c9"
        ],
        [
            "apply (pre psi).",
            "VernacExtend",
            "2194920ed86b0d8db562b07a60120d1527798491"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "split with (mkStepFun H3); split with (mkStepFun H4); split.",
            "VernacExtend",
            "de812281f4fe9e3741dc1694221e63ef8055a008"
        ],
        [
            "simpl; intros; apply H.",
            "VernacExtend",
            "40e955530c6d08f829f8392bc39326e321ccc0fd"
        ],
        [
            "replace (Rmin a b) with (Rmin a c) by (rewrite 2!Rmin_left; eauto using Rle_trans).",
            "VernacExtend",
            "c6ef8b3921879d4d8602c3acd999a9c3c7a285bf"
        ],
        [
            "destruct H5; split; try assumption.",
            "VernacExtend",
            "8d97c5aa39a4064f097b1c10396c2af76cd7e5fc"
        ],
        [
            "apply Rle_trans with (Rmax a c); try assumption.",
            "VernacExtend",
            "d6c540b87d09f25c98a01dd15022f35acada6771"
        ],
        [
            "apply Rle_max_compat_l; assumption.",
            "VernacExtend",
            "71721907655cc9ac7a548d3ccd61c7b4d7da6d30"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "assert (H5 : IsStepFun psi c b).",
            "VernacExtend",
            "c52f044d8e1974aa7dc4380012b63eb597340e7a"
        ],
        [
            "apply StepFun_P46 with a.",
            "VernacExtend",
            "f13cedb9651c116708168d51c2135af47cbdd25a"
        ],
        [
            "apply StepFun_P6; assumption.",
            "VernacExtend",
            "18eab6cdc0f4f971522e2ff93494c9603435efa6"
        ],
        [
            "apply (pre psi).",
            "VernacExtend",
            "2194920ed86b0d8db562b07a60120d1527798491"
        ],
        [
            "replace (RiemannInt_SF (mkStepFun H4)) with (RiemannInt_SF psi - RiemannInt_SF (mkStepFun H5)).",
            "VernacExtend",
            "df136381315785c7cce3c3bba34e96e1323dc74c"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF psi).",
            "VernacExtend",
            "5f8bc0b13dd6a63c4735bc02f77b48b3c85cd8c7"
        ],
        [
            "unfold Rminus; pattern (RiemannInt_SF psi) at 2; rewrite <- Rplus_0_r; apply Rplus_le_compat_l; rewrite <- Ropp_0; apply Ropp_ge_le_contravar; apply Rle_ge; replace 0 with (RiemannInt_SF (mkStepFun (StepFun_P4 c b 0))).",
            "VernacExtend",
            "53f9ef21c0f2afa7194fdace2e8b298e0c0fc46d"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; simpl; unfold fct_cte; apply Rle_trans with (Rabs (f x - phi x)).",
            "VernacExtend",
            "a38e586b4cb0d9bade6e8acafe6f6e6456b415ba"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite Rmin_left; eauto using Rle_trans.",
            "VernacExtend",
            "6cebae8230b78a0c9f3e08a58b7bbda249161149"
        ],
        [
            "rewrite Rmax_right; eauto using Rle_trans.",
            "VernacExtend",
            "ec6b00bc1de1c5f71f100700d073f9a51d890560"
        ],
        [
            "destruct H6; split; left.",
            "VernacExtend",
            "581956660f977dfe1269d1872e4f18a6a1fea4c8"
        ],
        [
            "apply Rle_lt_trans with c; assumption.",
            "VernacExtend",
            "f65b3af3042af258cfaa40683acb00f9cd402acb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite StepFun_P18; ring.",
            "VernacExtend",
            "47d96b9210053942f27df7ba39e8ba9def7e9217"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF psi)).",
            "VernacExtend",
            "89a2d880279b45c78c2786115ae47bb961b0446b"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H6 : IsStepFun psi a b).",
            "VernacExtend",
            "38a3a09e527cfb06c2f62b1560328bed2c908534"
        ],
        [
            "apply (pre psi).",
            "VernacExtend",
            "2194920ed86b0d8db562b07a60120d1527798491"
        ],
        [
            "replace (RiemannInt_SF psi) with (RiemannInt_SF (mkStepFun H6)).",
            "VernacExtend",
            "75d933ea6f07961b89429a6c2c6762e031b36f97"
        ],
        [
            "rewrite <- (StepFun_P43 H4 H5 H6); ring.",
            "VernacExtend",
            "abc3228358af5a46feb5fa26a6fe365de6538966"
        ],
        [
            "unfold RiemannInt_SF; case (Rle_dec a b); intro.",
            "VernacExtend",
            "898da1cb6f8195a9f65a91f4ee279d90eafa518c"
        ],
        [
            "eapply StepFun_P17.",
            "VernacExtend",
            "b0ae4e909c1434ad21f11892d0d66ba0919a1fa6"
        ],
        [
            "apply StepFun_P1.",
            "VernacExtend",
            "3c8ed047b00539f34566a5209919684fcb4d8ab4"
        ],
        [
            "simpl; apply StepFun_P1.",
            "VernacExtend",
            "252100f0e50c85724bdb9569636108c4434d9fff"
        ],
        [
            "apply Ropp_eq_compat; eapply StepFun_P17.",
            "VernacExtend",
            "7d19502a1d3e7567292e0768b9b6b1d5b31697d9"
        ],
        [
            "apply StepFun_P1.",
            "VernacExtend",
            "3c8ed047b00539f34566a5209919684fcb4d8ab4"
        ],
        [
            "simpl; apply StepFun_P1.",
            "VernacExtend",
            "252100f0e50c85724bdb9569636108c4434d9fff"
        ],
        [
            "apply Rle_ge; replace 0 with (RiemannInt_SF (mkStepFun (StepFun_P4 a c 0))).",
            "VernacExtend",
            "960ffb73b046099266d1fd5e28a957d642d7e72d"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; simpl; unfold fct_cte; apply Rle_trans with (Rabs (f x - phi x)).",
            "VernacExtend",
            "a38e586b4cb0d9bade6e8acafe6f6e6456b415ba"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite Rmin_left; eauto using Rle_trans.",
            "VernacExtend",
            "6cebae8230b78a0c9f3e08a58b7bbda249161149"
        ],
        [
            "rewrite Rmax_right; eauto using Rle_trans.",
            "VernacExtend",
            "ec6b00bc1de1c5f71f100700d073f9a51d890560"
        ],
        [
            "destruct H5; split; left.",
            "VernacExtend",
            "cb8fd28ebf127075c49741b85525660c6a8cb95e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_le_trans with c; assumption.",
            "VernacExtend",
            "951e5b73b9e9c351d47bfe03b64b0d61dd357a05"
        ],
        [
            "rewrite StepFun_P18; ring.",
            "VernacExtend",
            "47d96b9210053942f27df7ba39e8ba9def7e9217"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P23 : forall (f:R -> R) (a b c:R), Riemann_integrable f a b -> a <= c <= b -> Riemann_integrable f c b.",
            "VernacStartTheoremProof",
            "40b9aef5ae348ecda26b8f4981e9fcdf60d9b364"
        ],
        [
            "unfold Riemann_integrable; intros; elim (X eps); clear X; intros phi [psi H0]; elim H; elim H0; clear H H0; intros; assert (H3 : IsStepFun phi c b).",
            "VernacExtend",
            "3756c33351ab9f30f7e21913db15581f5315b3c1"
        ],
        [
            "apply StepFun_P45 with a.",
            "VernacExtend",
            "42acc39908ac091cd83d740aa446f913ef8c054b"
        ],
        [
            "apply (pre phi).",
            "VernacExtend",
            "43b235e0ca3b90f466adced0f2a750f94f3eb5d3"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "assert (H4 : IsStepFun psi c b).",
            "VernacExtend",
            "271673e9cddb5c8241851c3186c2e3deebdfec59"
        ],
        [
            "apply StepFun_P45 with a.",
            "VernacExtend",
            "42acc39908ac091cd83d740aa446f913ef8c054b"
        ],
        [
            "apply (pre psi).",
            "VernacExtend",
            "2194920ed86b0d8db562b07a60120d1527798491"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "split with (mkStepFun H3); split with (mkStepFun H4); split.",
            "VernacExtend",
            "de812281f4fe9e3741dc1694221e63ef8055a008"
        ],
        [
            "simpl; intros; apply H.",
            "VernacExtend",
            "40e955530c6d08f829f8392bc39326e321ccc0fd"
        ],
        [
            "replace (Rmax a b) with (Rmax c b).",
            "VernacExtend",
            "5e5a70f211225ec8395fdaf0b531c0c7bc9ec288"
        ],
        [
            "elim H5; intros; split; try assumption.",
            "VernacExtend",
            "bfad104fe617b075d54d5d9573e21cbac6f11101"
        ],
        [
            "apply Rle_trans with (Rmin c b); try assumption.",
            "VernacExtend",
            "7796fe1d909c29324a94bd1eca1a303fe1db1fd5"
        ],
        [
            "rewrite Rmin_left; eauto using Rle_trans.",
            "VernacExtend",
            "6cebae8230b78a0c9f3e08a58b7bbda249161149"
        ],
        [
            "rewrite Rmin_left; eauto using Rle_trans.",
            "VernacExtend",
            "6cebae8230b78a0c9f3e08a58b7bbda249161149"
        ],
        [
            "rewrite Rmax_right; eauto using Rle_trans.",
            "VernacExtend",
            "ec6b00bc1de1c5f71f100700d073f9a51d890560"
        ],
        [
            "rewrite Rmax_right; eauto using Rle_trans.",
            "VernacExtend",
            "ec6b00bc1de1c5f71f100700d073f9a51d890560"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "assert (H5 : IsStepFun psi a c).",
            "VernacExtend",
            "29a807a8e42d6cfe2d40b8df50d6af7ec343e101"
        ],
        [
            "apply StepFun_P46 with b.",
            "VernacExtend",
            "4901a4b5fd5869e810d6dfe7270572e258468a31"
        ],
        [
            "apply (pre psi).",
            "VernacExtend",
            "2194920ed86b0d8db562b07a60120d1527798491"
        ],
        [
            "apply StepFun_P6; assumption.",
            "VernacExtend",
            "18eab6cdc0f4f971522e2ff93494c9603435efa6"
        ],
        [
            "replace (RiemannInt_SF (mkStepFun H4)) with (RiemannInt_SF psi - RiemannInt_SF (mkStepFun H5)).",
            "VernacExtend",
            "df136381315785c7cce3c3bba34e96e1323dc74c"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF psi).",
            "VernacExtend",
            "5f8bc0b13dd6a63c4735bc02f77b48b3c85cd8c7"
        ],
        [
            "unfold Rminus; pattern (RiemannInt_SF psi) at 2; rewrite <- Rplus_0_r; apply Rplus_le_compat_l; rewrite <- Ropp_0; apply Ropp_ge_le_contravar; apply Rle_ge; replace 0 with (RiemannInt_SF (mkStepFun (StepFun_P4 a c 0))).",
            "VernacExtend",
            "3b90e2d10e33c1a320fb8c8c88b22aa133971459"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; simpl; unfold fct_cte; apply Rle_trans with (Rabs (f x - phi x)).",
            "VernacExtend",
            "a38e586b4cb0d9bade6e8acafe6f6e6456b415ba"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite Rmin_left; eauto using Rle_trans.",
            "VernacExtend",
            "6cebae8230b78a0c9f3e08a58b7bbda249161149"
        ],
        [
            "rewrite Rmax_right; eauto using Rle_trans.",
            "VernacExtend",
            "ec6b00bc1de1c5f71f100700d073f9a51d890560"
        ],
        [
            "destruct H6; split; left.",
            "VernacExtend",
            "581956660f977dfe1269d1872e4f18a6a1fea4c8"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_le_trans with c; assumption.",
            "VernacExtend",
            "951e5b73b9e9c351d47bfe03b64b0d61dd357a05"
        ],
        [
            "rewrite StepFun_P18; ring.",
            "VernacExtend",
            "47d96b9210053942f27df7ba39e8ba9def7e9217"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF psi)).",
            "VernacExtend",
            "89a2d880279b45c78c2786115ae47bb961b0446b"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H6 : IsStepFun psi a b).",
            "VernacExtend",
            "38a3a09e527cfb06c2f62b1560328bed2c908534"
        ],
        [
            "apply (pre psi).",
            "VernacExtend",
            "2194920ed86b0d8db562b07a60120d1527798491"
        ],
        [
            "replace (RiemannInt_SF psi) with (RiemannInt_SF (mkStepFun H6)).",
            "VernacExtend",
            "75d933ea6f07961b89429a6c2c6762e031b36f97"
        ],
        [
            "rewrite <- (StepFun_P43 H5 H4 H6); ring.",
            "VernacExtend",
            "3d832906cf72e983cb7d3e3a27e6708b083db3b6"
        ],
        [
            "unfold RiemannInt_SF; case (Rle_dec a b); intro.",
            "VernacExtend",
            "898da1cb6f8195a9f65a91f4ee279d90eafa518c"
        ],
        [
            "eapply StepFun_P17.",
            "VernacExtend",
            "b0ae4e909c1434ad21f11892d0d66ba0919a1fa6"
        ],
        [
            "apply StepFun_P1.",
            "VernacExtend",
            "3c8ed047b00539f34566a5209919684fcb4d8ab4"
        ],
        [
            "simpl; apply StepFun_P1.",
            "VernacExtend",
            "252100f0e50c85724bdb9569636108c4434d9fff"
        ],
        [
            "apply Ropp_eq_compat; eapply StepFun_P17.",
            "VernacExtend",
            "7d19502a1d3e7567292e0768b9b6b1d5b31697d9"
        ],
        [
            "apply StepFun_P1.",
            "VernacExtend",
            "3c8ed047b00539f34566a5209919684fcb4d8ab4"
        ],
        [
            "simpl; apply StepFun_P1.",
            "VernacExtend",
            "252100f0e50c85724bdb9569636108c4434d9fff"
        ],
        [
            "apply Rle_ge; replace 0 with (RiemannInt_SF (mkStepFun (StepFun_P4 c b 0))).",
            "VernacExtend",
            "37b13cb966c47f21b3b44e86e6c749c3e2d1a251"
        ],
        [
            "apply StepFun_P37; try assumption.",
            "VernacExtend",
            "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
        ],
        [
            "intros; simpl; unfold fct_cte; apply Rle_trans with (Rabs (f x - phi x)).",
            "VernacExtend",
            "a38e586b4cb0d9bade6e8acafe6f6e6456b415ba"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite Rmin_left; eauto using Rle_trans.",
            "VernacExtend",
            "6cebae8230b78a0c9f3e08a58b7bbda249161149"
        ],
        [
            "rewrite Rmax_right; eauto using Rle_trans.",
            "VernacExtend",
            "ec6b00bc1de1c5f71f100700d073f9a51d890560"
        ],
        [
            "destruct H5; split; left.",
            "VernacExtend",
            "cb8fd28ebf127075c49741b85525660c6a8cb95e"
        ],
        [
            "apply Rle_lt_trans with c; assumption.",
            "VernacExtend",
            "f65b3af3042af258cfaa40683acb00f9cd402acb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite StepFun_P18; ring.",
            "VernacExtend",
            "47d96b9210053942f27df7ba39e8ba9def7e9217"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P24 : forall (f:R -> R) (a b c:R), Riemann_integrable f a b -> Riemann_integrable f b c -> Riemann_integrable f a c.",
            "VernacStartTheoremProof",
            "83e69d179a4c10c45d37b4ca513a282a44c8ec1f"
        ],
        [
            "intros; case (Rle_dec a b); case (Rle_dec b c); intros.",
            "VernacExtend",
            "28dc1fd17e4fac1627027e8fd13cf64e0bf2fc7b"
        ],
        [
            "apply RiemannInt_P21 with b; assumption.",
            "VernacExtend",
            "cb6ad108b61d93ac228c79897748261b20d14e1a"
        ],
        [
            "case (Rle_dec a c); intro.",
            "VernacExtend",
            "a52c2d1f592b3316592b3f567f3e423322186e82"
        ],
        [
            "apply RiemannInt_P22 with b; try assumption.",
            "VernacExtend",
            "f6e005b1f79dd475ffff72bd7c659690353725dc"
        ],
        [
            "split; [ assumption | auto with real ].",
            "VernacExtend",
            "9bbdc3b8f0fa19c19cba930488d8dfb29dd45d02"
        ],
        [
            "apply RiemannInt_P1; apply RiemannInt_P22 with b.",
            "VernacExtend",
            "22b91df819ea44eab5ee73b89cfab564d0eb1a91"
        ],
        [
            "apply RiemannInt_P1; assumption.",
            "VernacExtend",
            "a6a5297b10d2aa4c5de79091956dd620cf88c588"
        ],
        [
            "split; auto with real.",
            "VernacExtend",
            "53b919a143f08c7f91e079731a18ea6fb30dca87"
        ],
        [
            "case (Rle_dec a c); intro.",
            "VernacExtend",
            "a52c2d1f592b3316592b3f567f3e423322186e82"
        ],
        [
            "apply RiemannInt_P23 with b; try assumption.",
            "VernacExtend",
            "b06fc9ff58224bbbdb579688340c0c853ffd472a"
        ],
        [
            "split; auto with real.",
            "VernacExtend",
            "53b919a143f08c7f91e079731a18ea6fb30dca87"
        ],
        [
            "apply RiemannInt_P1; apply RiemannInt_P23 with b.",
            "VernacExtend",
            "81c3bf87eaed6da4b7169c5d6c7082942eacf6d0"
        ],
        [
            "apply RiemannInt_P1; assumption.",
            "VernacExtend",
            "a6a5297b10d2aa4c5de79091956dd620cf88c588"
        ],
        [
            "split; [ assumption | auto with real ].",
            "VernacExtend",
            "9bbdc3b8f0fa19c19cba930488d8dfb29dd45d02"
        ],
        [
            "apply RiemannInt_P1; apply RiemannInt_P21 with b; auto with real || apply RiemannInt_P1; assumption.",
            "VernacExtend",
            "bfa0e1e3c40662557fe15a76bb922478c5d3eeaa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P25 : forall (f:R -> R) (a b c:R) (pr1:Riemann_integrable f a b) (pr2:Riemann_integrable f b c) (pr3:Riemann_integrable f a c), a <= b -> b <= c -> RiemannInt pr1 + RiemannInt pr2 = RiemannInt pr3.",
            "VernacStartTheoremProof",
            "4daa6f35b3c619281a1609255f19998cd86fef43"
        ],
        [
            "intros f a b c pr1 pr2 pr3 Hyp1 Hyp2; unfold RiemannInt; case (RiemannInt_exists pr1 RinvN RinvN_cv) as (x1,HUn_cv1); case (RiemannInt_exists pr2 RinvN RinvN_cv) as (x0,HUn_cv0); case (RiemannInt_exists pr3 RinvN RinvN_cv) as (x,HUn_cv); symmetry ; eapply UL_sequence.",
            "VernacExtend",
            "a67a4a22d9a517bf598791039d6af5e1e38f3fae"
        ],
        [
            "apply HUn_cv.",
            "VernacExtend",
            "c9d50a197d8b0d6c16f3afe0767f2f9345890572"
        ],
        [
            "unfold Un_cv; intros; assert (H0 : 0 < eps / 3).",
            "VernacExtend",
            "5f15dc4d1a5ac8013f1ca1abf3a7e40044965475"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "destruct (HUn_cv1 _ H0) as (N1,H1); clear HUn_cv1; destruct (HUn_cv0 _ H0) as (N2,H2); clear HUn_cv0; cut (Un_cv (fun n:nat => RiemannInt_SF (phi_sequence RinvN pr3 n) - (RiemannInt_SF (phi_sequence RinvN pr1 n) + RiemannInt_SF (phi_sequence RinvN pr2 n))) 0).",
            "VernacExtend",
            "54ddd32c3e0de0be4dcddd78f5d3b769b5c632f3"
        ],
        [
            "intro; elim (H3 _ H0); clear H3; intros N3 H3; set (N0 := max (max N1 N2) N3); exists N0; intros; unfold R_dist; apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi_sequence RinvN pr3 n) - (RiemannInt_SF (phi_sequence RinvN pr1 n) + RiemannInt_SF (phi_sequence RinvN pr2 n))) + Rabs (RiemannInt_SF (phi_sequence RinvN pr1 n) + RiemannInt_SF (phi_sequence RinvN pr2 n) - (x1 + x0))).",
            "VernacExtend",
            "71e94f70c1470b1a36b84713705a91b6bf4f9a4d"
        ],
        [
            "replace (RiemannInt_SF (phi_sequence RinvN pr3 n) - (x1 + x0)) with (RiemannInt_SF (phi_sequence RinvN pr3 n) - (RiemannInt_SF (phi_sequence RinvN pr1 n) + RiemannInt_SF (phi_sequence RinvN pr2 n)) + (RiemannInt_SF (phi_sequence RinvN pr1 n) + RiemannInt_SF (phi_sequence RinvN pr2 n) - (x1 + x0))); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "fae788af33a45a0cfdcf00b5dea01a6cc83fc208"
        ],
        [
            "replace eps with (eps / 3 + eps / 3 + eps / 3).",
            "VernacExtend",
            "6797ce7dc3530593281c08e040087e79daac0049"
        ],
        [
            "rewrite Rplus_assoc; apply Rplus_lt_compat.",
            "VernacExtend",
            "36f32c502127875dddd13e4ff3104a8c5717bfef"
        ],
        [
            "unfold R_dist in H3; cut (n >= N3)%nat.",
            "VernacExtend",
            "49b5f91be9a80789bc21e42db482722310083692"
        ],
        [
            "intro; assert (H6 := H3 _ H5); unfold Rminus in H6; rewrite Ropp_0 in H6; rewrite Rplus_0_r in H6; apply H6.",
            "VernacExtend",
            "2979626f19bec3e7cf2e4c1ad58814d488a7c329"
        ],
        [
            "unfold ge; apply le_trans with N0; [ unfold N0; apply le_max_r | assumption ].",
            "VernacExtend",
            "7a6129e77e8d4e908135cdd1cd8d75f4748a7d94"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi_sequence RinvN pr1 n) - x1) + Rabs (RiemannInt_SF (phi_sequence RinvN pr2 n) - x0)).",
            "VernacExtend",
            "8eb5b9b08556803f8b2315830723b993c3d0f8c1"
        ],
        [
            "replace (RiemannInt_SF (phi_sequence RinvN pr1 n) + RiemannInt_SF (phi_sequence RinvN pr2 n) - (x1 + x0)) with (RiemannInt_SF (phi_sequence RinvN pr1 n) - x1 + (RiemannInt_SF (phi_sequence RinvN pr2 n) - x0)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "e2ce6c33b001302b3b89d8acc944bc43b5f6f086"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "unfold R_dist in H1; apply H1.",
            "VernacExtend",
            "521f32fb3dcc77af010dffb893b966633bc5fa59"
        ],
        [
            "unfold ge; apply le_trans with N0; [ apply le_trans with (max N1 N2); [ apply le_max_l | unfold N0; apply le_max_l ] | assumption ].",
            "VernacExtend",
            "a83e186f54c4261e37472702c4c8cd86549637cf"
        ],
        [
            "unfold R_dist in H2; apply H2.",
            "VernacExtend",
            "c66ec8c575fe7c596dc3247e060423a985b9e734"
        ],
        [
            "unfold ge; apply le_trans with N0; [ apply le_trans with (max N1 N2); [ apply le_max_r | unfold N0; apply le_max_l ] | assumption ].",
            "VernacExtend",
            "c29d465fde4491d40bb18078a61dd20d6bd29eb0"
        ],
        [
            "apply Rmult_eq_reg_l with 3; [ unfold Rdiv; repeat rewrite Rmult_plus_distr_l; do 2 rewrite (Rmult_comm 3); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
            "VernacExtend",
            "9efb94cff1c96da18781aea0b2efeabc65776b8f"
        ],
        [
            "clear x HUn_cv x0 x1 eps H H0 N1 H1 N2 H2; assert (H1 : exists psi1 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t - phi_sequence RinvN pr1 n t) <= psi1 n t) /\\ Rabs (RiemannInt_SF (psi1 n)) < RinvN n)).",
            "VernacExtend",
            "14474c11b6e91338fb2eba0243bb4e69c78fdeaa"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr1 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr1 n)).",
            "VernacExtend",
            "cdad587d1595c46ae4abc486623fbad70c69249a"
        ],
        [
            "assert (H2 : exists psi2 : nat -> StepFun b c, (forall n:nat, (forall t:R, Rmin b c <= t /\\ t <= Rmax b c -> Rabs (f t - phi_sequence RinvN pr2 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < RinvN n)).",
            "VernacExtend",
            "6148c415573ab30fbc9afc07262e9b3d27c2c70e"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr2 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr2 n)).",
            "VernacExtend",
            "0be4e8ea303cef818be3e82d7104ce64b4434913"
        ],
        [
            "assert (H3 : exists psi3 : nat -> StepFun a c, (forall n:nat, (forall t:R, Rmin a c <= t /\\ t <= Rmax a c -> Rabs (f t - phi_sequence RinvN pr3 n t) <= psi3 n t) /\\ Rabs (RiemannInt_SF (psi3 n)) < RinvN n)).",
            "VernacExtend",
            "ceac1bff5628345c6f5c11f3bd4f71e2a59e6828"
        ],
        [
            "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr3 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr3 n)).",
            "VernacExtend",
            "bfb5adc6466534ea28c845f3ca1ba4e258dbcd3b"
        ],
        [
            "elim H1; clear H1; intros psi1 H1; elim H2; clear H2; intros psi2 H2; elim H3; clear H3; intros psi3 H3; assert (H := RinvN_cv); unfold Un_cv; intros; assert (H4 : 0 < eps / 3).",
            "VernacExtend",
            "6dde8787bcd934fa17c088ddc17a55bb02a85e4f"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "elim (H _ H4); clear H; intros N0 H; assert (H5 : forall n:nat, (n >= N0)%nat -> RinvN n < eps / 3).",
            "VernacExtend",
            "52bc107a0883d14bd3a6971c66e04a6bd933b750"
        ],
        [
            "intros; replace (pos (RinvN n)) with (R_dist (mkposreal (/ (INR n + 1)) (RinvN_pos n)) 0).",
            "VernacExtend",
            "a6b8b0c263f278b19832bf3fe18c918704209309"
        ],
        [
            "apply H; assumption.",
            "VernacExtend",
            "7904d623a02884c927ef4e8b66c90cb12eee7c7a"
        ],
        [
            "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (RinvN n)).",
            "VernacExtend",
            "4fa69908aaaa9a102ea13af2d516ab81b8c64ea8"
        ],
        [
            "exists N0; intros; elim (H1 n); elim (H2 n); elim (H3 n); clear H1 H2 H3; intros; unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; set (phi1 := phi_sequence RinvN pr1 n) in H8 |- *; set (phi2 := phi_sequence RinvN pr2 n) in H3 |- *; set (phi3 := phi_sequence RinvN pr3 n) in H1 |- *; assert (H10 : IsStepFun phi3 a b).",
            "VernacExtend",
            "214c5716dff04edfad6638895a0a647fd9530d29"
        ],
        [
            "apply StepFun_P44 with c.",
            "VernacExtend",
            "ff8f3b4fa9eeaf077e3b45a5085ed0e23119d016"
        ],
        [
            "apply (pre phi3).",
            "VernacExtend",
            "ab48fbb9462a7aadac46d799593f0deff06724c1"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "assert (H11 : IsStepFun (psi3 n) a b).",
            "VernacExtend",
            "a2306f32cb9068cf579daf80d5f75294361794f6"
        ],
        [
            "apply StepFun_P44 with c.",
            "VernacExtend",
            "ff8f3b4fa9eeaf077e3b45a5085ed0e23119d016"
        ],
        [
            "apply (pre (psi3 n)).",
            "VernacExtend",
            "45ea46d503bf5b810b10e513ed9507ab76dcf2be"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "assert (H12 : IsStepFun phi3 b c).",
            "VernacExtend",
            "65248afd2fe6ecc731c75e742ff5543e65b17ca9"
        ],
        [
            "apply StepFun_P45 with a.",
            "VernacExtend",
            "42acc39908ac091cd83d740aa446f913ef8c054b"
        ],
        [
            "apply (pre phi3).",
            "VernacExtend",
            "ab48fbb9462a7aadac46d799593f0deff06724c1"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "assert (H13 : IsStepFun (psi3 n) b c).",
            "VernacExtend",
            "cd13eed4113c78cbc152287d96cfe58f6afe5a92"
        ],
        [
            "apply StepFun_P45 with a.",
            "VernacExtend",
            "42acc39908ac091cd83d740aa446f913ef8c054b"
        ],
        [
            "apply (pre (psi3 n)).",
            "VernacExtend",
            "45ea46d503bf5b810b10e513ed9507ab76dcf2be"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "replace (RiemannInt_SF phi3) with (RiemannInt_SF (mkStepFun H10) + RiemannInt_SF (mkStepFun H12)).",
            "VernacExtend",
            "6d26e0eeb13044a17fbd399700f0feda7eaacc8a"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (mkStepFun H10) - RiemannInt_SF phi1) + Rabs (RiemannInt_SF (mkStepFun H12) - RiemannInt_SF phi2)).",
            "VernacExtend",
            "76b8b267161b74bc7628467a75ba6e3004b25820"
        ],
        [
            "replace (RiemannInt_SF (mkStepFun H10) + RiemannInt_SF (mkStepFun H12) + - (RiemannInt_SF phi1 + RiemannInt_SF phi2)) with (RiemannInt_SF (mkStepFun H10) - RiemannInt_SF phi1 + (RiemannInt_SF (mkStepFun H12) - RiemannInt_SF phi2)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "d80eec8e45aac13073ba878e0f33cbeb9fc21335"
        ],
        [
            "replace (RiemannInt_SF (mkStepFun H10) - RiemannInt_SF phi1) with (RiemannInt_SF (mkStepFun (StepFun_P28 (-1) (mkStepFun H10) phi1))).",
            "VernacExtend",
            "477efc44f0eb72736dfabf22f1b967ea09c92bb1"
        ],
        [
            "replace (RiemannInt_SF (mkStepFun H12) - RiemannInt_SF phi2) with (RiemannInt_SF (mkStepFun (StepFun_P28 (-1) (mkStepFun H12) phi2))).",
            "VernacExtend",
            "4fa788c76bfb475ee43420cf1510be40d4e3acf5"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (mkStepFun H10) phi1)))) + RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (mkStepFun H12) phi2))))).",
            "VernacExtend",
            "fa99b6a48871695070093ec27256cd3c26739d14"
        ],
        [
            "apply Rle_trans with (Rabs (RiemannInt_SF (mkStepFun (StepFun_P28 (-1) (mkStepFun H10) phi1))) + RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (mkStepFun H12) phi2))))).",
            "VernacExtend",
            "823a65ea2f2c07357bdafd7ec0ed1c0897462ae1"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "apply StepFun_P34; try assumption.",
            "VernacExtend",
            "0c2b568c37d62177de20775e5dada161a4b91ff1"
        ],
        [
            "do 2 rewrite <- (Rplus_comm (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (mkStepFun H12) phi2)))))) ; apply Rplus_le_compat_l; apply StepFun_P34; try assumption.",
            "VernacExtend",
            "e6dca3024b811abb7f8e237b9a3c0ac7ee7a9953"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 (mkStepFun H11) (psi1 n))) + RiemannInt_SF (mkStepFun (StepFun_P28 1 (mkStepFun H13) (psi2 n)))).",
            "VernacExtend",
            "684ab362ff25f48e827ef951b91341a453b11367"
        ],
        [
            "apply Rle_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (mkStepFun H10) phi1)))) + RiemannInt_SF (mkStepFun (StepFun_P28 1 (mkStepFun H13) (psi2 n)))).",
            "VernacExtend",
            "bcc9f6b1d631e907e03b3d2f35cb398156f1d92e"
        ],
        [
            "apply Rplus_le_compat_l; apply StepFun_P37; try assumption.",
            "VernacExtend",
            "fb2200bc5b12b08698950f28fe1452fdeeb9a8b8"
        ],
        [
            "intros; simpl; rewrite Rmult_1_l; apply Rle_trans with (Rabs (f x - phi3 x) + Rabs (f x - phi2 x)).",
            "VernacExtend",
            "7484ed1371a82a76a578bbb90579c3910030052e"
        ],
        [
            "rewrite <- (Rabs_Ropp (f x - phi3 x)); rewrite Ropp_minus_distr; replace (phi3 x + -1 * phi2 x) with (phi3 x - f x + (f x - phi2 x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "62d9420f8f0ee4f56aef5433f041d51b0a6beab2"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "elim H14; intros; split.",
            "VernacExtend",
            "5d30016ae6d85d70c2a0423cada1734f83638411"
        ],
        [
            "rewrite Rmin_left; eauto using Rle_trans.",
            "VernacExtend",
            "6cebae8230b78a0c9f3e08a58b7bbda249161149"
        ],
        [
            "apply Rle_trans with b; try assumption.",
            "VernacExtend",
            "44dae3997fe30e8f4aa53d49fd89f25f61dc2083"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "rewrite Rmax_right; eauto using Rle_trans.",
            "VernacExtend",
            "ec6b00bc1de1c5f71f100700d073f9a51d890560"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "elim H14; intros; split.",
            "VernacExtend",
            "5d30016ae6d85d70c2a0423cada1734f83638411"
        ],
        [
            "rewrite Rmin_left; eauto using Rle_trans.",
            "VernacExtend",
            "6cebae8230b78a0c9f3e08a58b7bbda249161149"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "rewrite Rmax_right; eauto using Rle_trans.",
            "VernacExtend",
            "ec6b00bc1de1c5f71f100700d073f9a51d890560"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "do 2 rewrite <- (Rplus_comm (RiemannInt_SF (mkStepFun (StepFun_P28 1 (mkStepFun H13) (psi2 n))))) ; apply Rplus_le_compat_l; apply StepFun_P37; try assumption.",
            "VernacExtend",
            "012f96b62ad0aedb401e0fe1209c012ac599e692"
        ],
        [
            "intros; simpl; rewrite Rmult_1_l; apply Rle_trans with (Rabs (f x - phi3 x) + Rabs (f x - phi1 x)).",
            "VernacExtend",
            "fee0d3513794fe391e02e4a5856ec6be2f93fb24"
        ],
        [
            "rewrite <- (Rabs_Ropp (f x - phi3 x)); rewrite Ropp_minus_distr; replace (phi3 x + -1 * phi1 x) with (phi3 x - f x + (f x - phi1 x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "a6c9942f44045cd4e74782750f3caff6cf5ee681"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "elim H14; intros; split.",
            "VernacExtend",
            "5d30016ae6d85d70c2a0423cada1734f83638411"
        ],
        [
            "rewrite Rmin_left; eauto using Rle_trans.",
            "VernacExtend",
            "6cebae8230b78a0c9f3e08a58b7bbda249161149"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "rewrite Rmax_right; eauto using Rle_trans.",
            "VernacExtend",
            "ec6b00bc1de1c5f71f100700d073f9a51d890560"
        ],
        [
            "apply Rle_trans with b.",
            "VernacExtend",
            "81cff8b0acc4add72158c4486e0bd11c6f8b20c4"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H8.",
            "VernacExtend",
            "2014720df0411c2963f20792fe424080d05f44aa"
        ],
        [
            "elim H14; intros; split.",
            "VernacExtend",
            "5d30016ae6d85d70c2a0423cada1734f83638411"
        ],
        [
            "rewrite Rmin_left; trivial.",
            "VernacExtend",
            "3ea763a178b68b8e8d0101e9cb23afcf8a690109"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "rewrite Rmax_right; trivial.",
            "VernacExtend",
            "163bcf42a5f7777b6bcdf12d7e692945be8c61a0"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "do 2 rewrite StepFun_P30.",
            "VernacExtend",
            "16f35b14454134406f7e1dc21a96abf1d4af26a6"
        ],
        [
            "do 2 rewrite Rmult_1_l; replace (RiemannInt_SF (mkStepFun H11) + RiemannInt_SF (psi1 n) + (RiemannInt_SF (mkStepFun H13) + RiemannInt_SF (psi2 n))) with (RiemannInt_SF (psi3 n) + RiemannInt_SF (psi1 n) + RiemannInt_SF (psi2 n)).",
            "VernacExtend",
            "335baa69fefbadc90f5b3bdf7fbee1aa2a2b7d20"
        ],
        [
            "replace eps with (eps / 3 + eps / 3 + eps / 3).",
            "VernacExtend",
            "6797ce7dc3530593281c08e040087e79daac0049"
        ],
        [
            "repeat rewrite Rplus_assoc; repeat apply Rplus_lt_compat.",
            "VernacExtend",
            "7b68737e0c5f3f3db4da9a23dba845523d22b76c"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi3 n))).",
            "VernacExtend",
            "320b923862f52ccad1e12a37a23d78b467382f3f"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply Rlt_trans with (pos (RinvN n)).",
            "VernacExtend",
            "9f52cee1cddd18c63a606f7d5c60905299e6e673"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H5; assumption.",
            "VernacExtend",
            "8f860832491462a0a9db7bd7c081da8cdc789cad"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi1 n))).",
            "VernacExtend",
            "a0e53f5371ffcef7e3695d85b719d731af712af4"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply Rlt_trans with (pos (RinvN n)).",
            "VernacExtend",
            "9f52cee1cddd18c63a606f7d5c60905299e6e673"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H5; assumption.",
            "VernacExtend",
            "8f860832491462a0a9db7bd7c081da8cdc789cad"
        ],
        [
            "apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi2 n))).",
            "VernacExtend",
            "0eb4208240e4f9ef058c240188c3aaaec85e98ef"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply Rlt_trans with (pos (RinvN n)).",
            "VernacExtend",
            "9f52cee1cddd18c63a606f7d5c60905299e6e673"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H5; assumption.",
            "VernacExtend",
            "8f860832491462a0a9db7bd7c081da8cdc789cad"
        ],
        [
            "apply Rmult_eq_reg_l with 3; [ unfold Rdiv; repeat rewrite Rmult_plus_distr_l; do 2 rewrite (Rmult_comm 3); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
            "VernacExtend",
            "9efb94cff1c96da18781aea0b2efeabc65776b8f"
        ],
        [
            "replace (RiemannInt_SF (psi3 n)) with (RiemannInt_SF (mkStepFun (pre (psi3 n)))).",
            "VernacExtend",
            "623b0d9c30af458232bb5c245658577fab5c2f57"
        ],
        [
            "rewrite <- (StepFun_P43 H11 H13 (pre (psi3 n))); ring.",
            "VernacExtend",
            "3cb8f36eaa81f53bd06254a4a103faf2f84398e1"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite StepFun_P30; ring.",
            "VernacExtend",
            "57d0f769b6ebb23af759233d3c30788a7e04e3f2"
        ],
        [
            "rewrite StepFun_P30; ring.",
            "VernacExtend",
            "57d0f769b6ebb23af759233d3c30788a7e04e3f2"
        ],
        [
            "apply (StepFun_P43 H10 H12 (pre phi3)).",
            "VernacExtend",
            "3ee4fc9ad5a95c9087273b7f0c64d6126dbedf0b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P26 : forall (f:R -> R) (a b c:R) (pr1:Riemann_integrable f a b) (pr2:Riemann_integrable f b c) (pr3:Riemann_integrable f a c), RiemannInt pr1 + RiemannInt pr2 = RiemannInt pr3.",
            "VernacStartTheoremProof",
            "1e111e6d266c5c08c812a2c098bc25a0be1ee9fb"
        ],
        [
            "intros; destruct (Rle_dec a b) as [Hle|Hnle]; destruct (Rle_dec b c) as [Hle'|Hnle'].",
            "VernacExtend",
            "94cfe0b7959f829d01516fe15504c46ea1e45a03"
        ],
        [
            "apply RiemannInt_P25; assumption.",
            "VernacExtend",
            "dac37b59f705a670f5c7fa98a0958a415292ed29"
        ],
        [
            "destruct (Rle_dec a c) as [Hle''|Hnle''].",
            "VernacExtend",
            "e994a62d3ebacc7fbe381c050d3057e0285134fe"
        ],
        [
            "assert (H : c <= b).",
            "VernacExtend",
            "27439efee446f82317c415dbd86c6f1bff787cf8"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "rewrite <- (RiemannInt_P25 pr3 (RiemannInt_P1 pr2) pr1 Hle'' H); rewrite (RiemannInt_P8 pr2 (RiemannInt_P1 pr2)); ring.",
            "VernacExtend",
            "4583f3bf8013d4befeaed48bfefeae955dba87a1"
        ],
        [
            "assert (H : c <= a).",
            "VernacExtend",
            "e2cd75f0d77ebf5fe57aa74ddbb89f20e7bf2d9f"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "rewrite (RiemannInt_P8 pr2 (RiemannInt_P1 pr2)); rewrite <- (RiemannInt_P25 (RiemannInt_P1 pr3) pr1 (RiemannInt_P1 pr2) H Hle); rewrite (RiemannInt_P8 pr3 (RiemannInt_P1 pr3)); ring.",
            "VernacExtend",
            "48d974f7073326f24bbe5d24db984856c4f02a56"
        ],
        [
            "assert (H : b <= a).",
            "VernacExtend",
            "357357cb13a332aa21b45e33feed2be6a5913b97"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "destruct (Rle_dec a c) as [Hle''|Hnle''].",
            "VernacExtend",
            "e994a62d3ebacc7fbe381c050d3057e0285134fe"
        ],
        [
            "rewrite <- (RiemannInt_P25 (RiemannInt_P1 pr1) pr3 pr2 H Hle''); rewrite (RiemannInt_P8 pr1 (RiemannInt_P1 pr1)); ring.",
            "VernacExtend",
            "410e88094705a83ac179554571f6ae3991cbe45f"
        ],
        [
            "assert (H0 : c <= a).",
            "VernacExtend",
            "246a69e3ba12cc3f62f30c8bceffec9ccd949aef"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "rewrite (RiemannInt_P8 pr1 (RiemannInt_P1 pr1)); rewrite <- (RiemannInt_P25 pr2 (RiemannInt_P1 pr3) (RiemannInt_P1 pr1) Hle' H0); rewrite (RiemannInt_P8 pr3 (RiemannInt_P1 pr3)); ring.",
            "VernacExtend",
            "63e7cbe72655b376593f2df198c0320d7f51481e"
        ],
        [
            "rewrite (RiemannInt_P8 pr1 (RiemannInt_P1 pr1)); rewrite (RiemannInt_P8 pr2 (RiemannInt_P1 pr2)); rewrite (RiemannInt_P8 pr3 (RiemannInt_P1 pr3)); rewrite <- (RiemannInt_P25 (RiemannInt_P1 pr2) (RiemannInt_P1 pr1) (RiemannInt_P1 pr3)) ; [ ring | auto with real | auto with real ].",
            "VernacExtend",
            "91bd976fc634ab0758aa88968740abeb9c2ea097"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P27 : forall (f:R -> R) (a b x:R) (h:a <= b) (C0:forall x:R, a <= x <= b -> continuity_pt f x), a < x < b -> derivable_pt_lim (primitive h (FTC_P1 h C0)) x (f x).",
            "VernacStartTheoremProof",
            "0fbfe05977f4d7904f39a3f8b9c09d594ea771ab"
        ],
        [
            "intro f; intros; elim H; clear H; intros; assert (H1 : continuity_pt f x).",
            "VernacExtend",
            "25bb6cbc2f968ba4e2bdd343d3b4bf2f794d1aed"
        ],
        [
            "apply C0; split; left; assumption.",
            "VernacExtend",
            "b3a556a70817cf19cc11d002b1b3ec6c65c6b3e7"
        ],
        [
            "unfold derivable_pt_lim; intros; assert (Hyp : 0 < eps / 2).",
            "VernacExtend",
            "7c4235e5435a730e43f9cbe3aabdddb9370b652d"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "elim (H1 _ Hyp); unfold dist, D_x, no_cond; simpl; unfold R_dist; intros; set (del := Rmin x0 (Rmin (b - x) (x - a))); assert (H4 : 0 < del).",
            "VernacExtend",
            "1e6429122555b2be746af458421c3920689da2b3"
        ],
        [
            "unfold del; unfold Rmin; case (Rle_dec (b - x) (x - a)); intro.",
            "VernacExtend",
            "a43fc45a965c88c1697b643ff9838530fafd4a2c"
        ],
        [
            "destruct (Rle_dec x0 (b - x)) as [Hle|Hnle]; [ elim H3; intros; assumption | apply Rlt_Rminus; assumption ].",
            "VernacExtend",
            "abd4649bd9922b7ec175a132ee3da1b329535d23"
        ],
        [
            "destruct (Rle_dec x0 (x - a)) as [Hle'|Hnle']; [ elim H3; intros; assumption | apply Rlt_Rminus; assumption ].",
            "VernacExtend",
            "4dceb0db6130bdd4b4f3b3b85dfea6968545ced8"
        ],
        [
            "split with (mkposreal _ H4); intros; assert (H7 : Riemann_integrable f x (x + h0)).",
            "VernacExtend",
            "4816a69b9d924ec2e51ac8503a3525f4615005f7"
        ],
        [
            "destruct (Rle_dec x (x + h0)) as [Hle''|Hnle''].",
            "VernacExtend",
            "8e6a23c9d923be29db5ecd57d3e6a1859df81736"
        ],
        [
            "apply continuity_implies_RiemannInt; try assumption.",
            "VernacExtend",
            "d669460421439f6351ef5a19e4562c5b73bb882b"
        ],
        [
            "intros; apply C0; elim H7; intros; split.",
            "VernacExtend",
            "b94769cefa231fda84fe98f9c7f340be323d288b"
        ],
        [
            "apply Rle_trans with x; [ left; assumption | assumption ].",
            "VernacExtend",
            "f097eac48d75e80a9f2e866079347737ad670d88"
        ],
        [
            "apply Rle_trans with (x + h0).",
            "VernacExtend",
            "b1e340b09b909ebf9e364556d782a8d0af1bd18d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "left; apply Rlt_le_trans with (x + del).",
            "VernacExtend",
            "7bbb4f2410ce85534d5e14f254f741d556f03802"
        ],
        [
            "apply Rplus_lt_compat_l; apply Rle_lt_trans with (Rabs h0); [ apply RRle_abs | apply H6 ].",
            "VernacExtend",
            "a1c12efff5071fd8a9c1503aaafc8f47105332c4"
        ],
        [
            "unfold del; apply Rle_trans with (x + Rmin (b - x) (x - a)).",
            "VernacExtend",
            "050295c56cbd8c2400d7167373643112b7384cd0"
        ],
        [
            "apply Rplus_le_compat_l; apply Rmin_r.",
            "VernacExtend",
            "f8f44d49c6af7be9c386798233249a466042384f"
        ],
        [
            "pattern b at 2; replace b with (x + (b - x)); [ apply Rplus_le_compat_l; apply Rmin_l | ring ].",
            "VernacExtend",
            "df547ca3e4e91d531e54aa43b8e70b90a9969ed3"
        ],
        [
            "apply RiemannInt_P1; apply continuity_implies_RiemannInt; auto with real.",
            "VernacExtend",
            "92601a453b474174a53f0ed2f7b8aa136cad4241"
        ],
        [
            "intros; apply C0; elim H7; intros; split.",
            "VernacExtend",
            "b94769cefa231fda84fe98f9c7f340be323d288b"
        ],
        [
            "apply Rle_trans with (x + h0).",
            "VernacExtend",
            "b1e340b09b909ebf9e364556d782a8d0af1bd18d"
        ],
        [
            "left; apply Rle_lt_trans with (x - del).",
            "VernacExtend",
            "0bcd8aa85061c93c0abd035fb9b835eb76edae31"
        ],
        [
            "unfold del; apply Rle_trans with (x - Rmin (b - x) (x - a)).",
            "VernacExtend",
            "e2765513559ed8f20dc552db05a04195c1003a75"
        ],
        [
            "pattern a at 1; replace a with (x + (a - x)); [ idtac | ring ].",
            "VernacExtend",
            "fa8ff1396a7ea852b7da47debde72df8e365236f"
        ],
        [
            "unfold Rminus; apply Rplus_le_compat_l; apply Ropp_le_cancel.",
            "VernacExtend",
            "a38a951d30372c90a163a9f44e9a7cc9615bed2f"
        ],
        [
            "rewrite Ropp_involutive; rewrite Ropp_plus_distr; rewrite Ropp_involutive; rewrite (Rplus_comm x); apply Rmin_r.",
            "VernacExtend",
            "74540a1066d7a9c1636bb0c911d3ab25258a3598"
        ],
        [
            "unfold Rminus; apply Rplus_le_compat_l; apply Ropp_le_cancel.",
            "VernacExtend",
            "a38a951d30372c90a163a9f44e9a7cc9615bed2f"
        ],
        [
            "do 2 rewrite Ropp_involutive; apply Rmin_r.",
            "VernacExtend",
            "5c531607dd4bd04418020a5341fcedea7f79b20c"
        ],
        [
            "unfold Rminus; apply Rplus_lt_compat_l; apply Ropp_lt_cancel.",
            "VernacExtend",
            "da5210048868e343b2df8b75b9eed7553c533d82"
        ],
        [
            "rewrite Ropp_involutive; apply Rle_lt_trans with (Rabs h0); [ rewrite <- Rabs_Ropp; apply RRle_abs | apply H6 ].",
            "VernacExtend",
            "9ce56d0d1abe9a7c848da3b68e533ff81717719d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_trans with x; [ assumption | left; assumption ].",
            "VernacExtend",
            "ad9eb914e3d7d166faf118407c1b2e30a01c1c65"
        ],
        [
            "replace (primitive h (FTC_P1 h C0) (x + h0) - primitive h (FTC_P1 h C0) x) with (RiemannInt H7).",
            "VernacExtend",
            "007fa8949cfe836898949c828349c55ad77e26c7"
        ],
        [
            "replace (f x) with (RiemannInt (RiemannInt_P14 x (x + h0) (f x)) / h0).",
            "VernacExtend",
            "2e216b09051c6e83d33671eea8e77e9599d6cba9"
        ],
        [
            "replace (RiemannInt H7 / h0 - RiemannInt (RiemannInt_P14 x (x + h0) (f x)) / h0) with ((RiemannInt H7 - RiemannInt (RiemannInt_P14 x (x + h0) (f x))) / h0).",
            "VernacExtend",
            "5a54c267896b796e65890c19fe974735c6d1f1d5"
        ],
        [
            "replace (RiemannInt H7 - RiemannInt (RiemannInt_P14 x (x + h0) (f x))) with (RiemannInt (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))).",
            "VernacExtend",
            "3a6a79deb982e56578e2d576b7f96ac02093d72e"
        ],
        [
            "unfold Rdiv; rewrite Rabs_mult; destruct (Rle_dec x (x + h0)) as [Hle|Hnle].",
            "VernacExtend",
            "04c61c476a236bc1bfd7d560b1dd0a13e4f7a31d"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt (RiemannInt_P16 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))) * Rabs (/ h0)).",
            "VernacExtend",
            "d9c5fccf5330eb385d8bcafaf0d9a32ed90f787b"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
            "VernacExtend",
            "3b51024b593773b0da19f4076119f7a5e3345a59"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply (RiemannInt_P17 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x))) (RiemannInt_P16 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x))))); assumption.",
            "VernacExtend",
            "de92b3f812c3f4cd83944f651fe2df9e12daf461"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt (RiemannInt_P14 x (x + h0) (eps / 2)) * Rabs (/ h0)).",
            "VernacExtend",
            "e9339732798b76f60cde57f6911a1b435a29b383"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
            "VernacExtend",
            "3b51024b593773b0da19f4076119f7a5e3345a59"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply RiemannInt_P19; try assumption.",
            "VernacExtend",
            "6e47c4a3be772e39217a9b15383d017915930d15"
        ],
        [
            "intros; replace (f x1 + -1 * fct_cte (f x) x1) with (f x1 - f x).",
            "VernacExtend",
            "89820ce228dc9da7aa0b1d69ebfca259818a1715"
        ],
        [
            "unfold fct_cte; destruct (Req_dec x x1) as [H9|H9].",
            "VernacExtend",
            "96a7ccabab523f47f92423c223101a7077a48a06"
        ],
        [
            "rewrite H9; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; left; assumption.",
            "VernacExtend",
            "e5b7895e4398505fc7c7dbff0a5226804dc8fb88"
        ],
        [
            "elim H3; intros; left; apply H11.",
            "VernacExtend",
            "ee4b1ea71c6194d7e4de95e6ef77de3595359856"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "apply Rplus_lt_reg_l with x; replace (x + (x1 - x)) with x1; [ idtac | ring ].",
            "VernacExtend",
            "68fb2788e37e40c46a312ee84741d5bde15172e4"
        ],
        [
            "apply Rlt_le_trans with (x + h0).",
            "VernacExtend",
            "463b8d23f32a103b128e35e8933148b5422bf33b"
        ],
        [
            "elim H8; intros; assumption.",
            "VernacExtend",
            "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
        ],
        [
            "apply Rplus_le_compat_l; apply Rle_trans with del.",
            "VernacExtend",
            "55b5f8c1779389a8fe6f85b848fdaa365efac2cb"
        ],
        [
            "left; apply Rle_lt_trans with (Rabs h0); [ apply RRle_abs | assumption ].",
            "VernacExtend",
            "9ef0941e61f8bceeed50a9f6c9767799ff372c70"
        ],
        [
            "unfold del; apply Rmin_l.",
            "VernacExtend",
            "46c0bfc6c0d150fb8634f72c6e90b5099e5e8470"
        ],
        [
            "apply Rge_minus; apply Rle_ge; left; elim H8; intros; assumption.",
            "VernacExtend",
            "e3d736d9bec102701f7a00a26152dcf543830637"
        ],
        [
            "unfold fct_cte; ring.",
            "VernacExtend",
            "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
        ],
        [
            "rewrite RiemannInt_P15.",
            "VernacExtend",
            "35c08b77f8955d6d3c217acb15c489b51ae58453"
        ],
        [
            "rewrite Rmult_assoc; replace ((x + h0 - x) * Rabs (/ h0)) with 1.",
            "VernacExtend",
            "fdaec43a94b45217f92d21794c955fc0ed6a0d80"
        ],
        [
            "rewrite Rmult_1_r; unfold Rdiv; apply Rmult_lt_reg_l with 2; [ prove_sup0 | rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; pattern eps at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "f667c125206bd7c77d72607614d400274916374c"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "replace (x + h0 - x) with h0; [ idtac | ring ].",
            "VernacExtend",
            "4ab7cc607a75ac0356fd943863f38e3e7744a73a"
        ],
        [
            "apply Rinv_r_sym.",
            "VernacExtend",
            "1c8e4cc12ed17eb612dd91541aa8d37d81cbfbbd"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_ge; left; apply Rinv_0_lt_compat.",
            "VernacExtend",
            "9aca125a862c4aeaf2f8b7a5d7b68f1d6c559062"
        ],
        [
            "elim Hle; intro.",
            "VernacExtend",
            "bd6ba96a80e86581fe4fd04d41049bc00329f95c"
        ],
        [
            "apply Rplus_lt_reg_l with x; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "fe47e6d62ae7bcef138d7e277137c708e86e4328"
        ],
        [
            "elim H5; symmetry ; apply Rplus_eq_reg_l with x; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "e439a1488c7f3211002fbf22af665dfcb6b31043"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt (RiemannInt_P16 (RiemannInt_P1 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x))))) * Rabs (/ h0)).",
            "VernacExtend",
            "d310adcc2541eb695094603a59e87d61c4dfe106"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
            "VernacExtend",
            "3b51024b593773b0da19f4076119f7a5e3345a59"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "replace (RiemannInt (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))) with (- RiemannInt (RiemannInt_P1 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x))))).",
            "VernacExtend",
            "7415d3d45c0bd09468131384fa912d7068538a41"
        ],
        [
            "rewrite Rabs_Ropp; apply (RiemannInt_P17 (RiemannInt_P1 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))) (RiemannInt_P16 (RiemannInt_P1 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))))); auto with real.",
            "VernacExtend",
            "d14b300565c7003f793fd3cb159a2a059a5eb861"
        ],
        [
            "symmetry ; apply RiemannInt_P8.",
            "VernacExtend",
            "e7085ee91c541e4958609167cdaf08e9b40d2785"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt (RiemannInt_P14 (x + h0) x (eps / 2)) * Rabs (/ h0)).",
            "VernacExtend",
            "4fb70087f5bb03d4bb5845e7ebd13e7ae9e777c0"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
            "VernacExtend",
            "3b51024b593773b0da19f4076119f7a5e3345a59"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply RiemannInt_P19.",
            "VernacExtend",
            "1bb5773d8e69772d666aa06facdfbf2af2a55783"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "intros; replace (f x1 + -1 * fct_cte (f x) x1) with (f x1 - f x).",
            "VernacExtend",
            "89820ce228dc9da7aa0b1d69ebfca259818a1715"
        ],
        [
            "unfold fct_cte; case (Req_dec x x1); intro.",
            "VernacExtend",
            "6467ff58348cee2f041137cf0820fd3577b96a4d"
        ],
        [
            "rewrite H9; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; left; assumption.",
            "VernacExtend",
            "e5b7895e4398505fc7c7dbff0a5226804dc8fb88"
        ],
        [
            "elim H3; intros; left; apply H11.",
            "VernacExtend",
            "ee4b1ea71c6194d7e4de95e6ef77de3595359856"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite Rabs_left.",
            "VernacExtend",
            "e4f86365ea2cd6f894fbc670197f200cadc12a6c"
        ],
        [
            "apply Rplus_lt_reg_l with (x1 - x0); replace (x1 - x0 + x0) with x1; [ idtac | ring ].",
            "VernacExtend",
            "61ff9b5ed8cdaaeefb3134131c901b23fb431f88"
        ],
        [
            "replace (x1 - x0 + - (x1 - x)) with (x - x0); [ idtac | ring ].",
            "VernacExtend",
            "5966f8f925413b4228b1a412840678206c229ef2"
        ],
        [
            "apply Rle_lt_trans with (x + h0).",
            "VernacExtend",
            "e5f7f105bfee8847b8ccc1fcef3d6a8abe7d4699"
        ],
        [
            "unfold Rminus; apply Rplus_le_compat_l; apply Ropp_le_cancel.",
            "VernacExtend",
            "a38a951d30372c90a163a9f44e9a7cc9615bed2f"
        ],
        [
            "rewrite Ropp_involutive; apply Rle_trans with (Rabs h0).",
            "VernacExtend",
            "56cd9a0dbb156036015ced5557f5ecc15eaeb89c"
        ],
        [
            "rewrite <- Rabs_Ropp; apply RRle_abs.",
            "VernacExtend",
            "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
        ],
        [
            "apply Rle_trans with del; [ left; assumption | unfold del; apply Rmin_l ].",
            "VernacExtend",
            "26b33675895853c18ff62e313458c11d97fd49b2"
        ],
        [
            "elim H8; intros; assumption.",
            "VernacExtend",
            "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
        ],
        [
            "apply Rplus_lt_reg_l with x; rewrite Rplus_0_r; replace (x + (x1 - x)) with x1; [ elim H8; intros; assumption | ring ].",
            "VernacExtend",
            "3d4f60d5e5c70cee7b2b4470d2b9a4b788233772"
        ],
        [
            "unfold fct_cte; ring.",
            "VernacExtend",
            "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
        ],
        [
            "rewrite RiemannInt_P15.",
            "VernacExtend",
            "35c08b77f8955d6d3c217acb15c489b51ae58453"
        ],
        [
            "rewrite Rmult_assoc; replace ((x - (x + h0)) * Rabs (/ h0)) with 1.",
            "VernacExtend",
            "9d7f57364d36531bd3743bdb970805d0e93a08e3"
        ],
        [
            "rewrite Rmult_1_r; unfold Rdiv; apply Rmult_lt_reg_l with 2; [ prove_sup0 | rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; pattern eps at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "f667c125206bd7c77d72607614d400274916374c"
        ],
        [
            "rewrite Rabs_left.",
            "VernacExtend",
            "e4f86365ea2cd6f894fbc670197f200cadc12a6c"
        ],
        [
            "replace (x - (x + h0)) with (- h0); [ idtac | ring ].",
            "VernacExtend",
            "600e8ef6c72b9e87bace04ef870616c263b8cb0e"
        ],
        [
            "rewrite Ropp_mult_distr_l_reverse; rewrite Ropp_mult_distr_r_reverse; rewrite Ropp_involutive; apply Rinv_r_sym.",
            "VernacExtend",
            "5ab550a599699eeaa9bc37f2ccb85cfca85b1d44"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rinv_lt_0_compat.",
            "VernacExtend",
            "c16edbb68a1977d3baaa629f1e7dfb49eb169cbf"
        ],
        [
            "assert (H8 : x + h0 < x).",
            "VernacExtend",
            "f39df1588a6151b5e6f92fc606c96f829189f796"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "apply Rplus_lt_reg_l with x; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "fe47e6d62ae7bcef138d7e277137c708e86e4328"
        ],
        [
            "rewrite (RiemannInt_P13 H7 (RiemannInt_P14 x (x + h0) (f x)) (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))) .",
            "VernacExtend",
            "1f03fd32c119254ed4448e8d35470dcfc4b879e0"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold Rdiv, Rminus; rewrite Rmult_plus_distr_r; ring.",
            "VernacExtend",
            "6c2973c6c6e447bba11b5f10344e5fa8fe77f263"
        ],
        [
            "rewrite RiemannInt_P15; apply Rmult_eq_reg_l with h0; [ unfold Rdiv; rewrite (Rmult_comm h0); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | assumption ] | assumption ].",
            "VernacExtend",
            "8531bbfa004bb8bda7ad4e63665b2210c23c92eb"
        ],
        [
            "cut (a <= x + h0).",
            "VernacExtend",
            "02fd858df2ccb6c94737cca4c9395f8a045016ce"
        ],
        [
            "cut (x + h0 <= b).",
            "VernacExtend",
            "bd6696e46ba558a51668c7ebc8f45da31e216c4b"
        ],
        [
            "intros; unfold primitive.",
            "VernacExtend",
            "f17a8b8207e461f2e7cc2834fc9d586b098aa7da"
        ],
        [
            "assert (H10: a <= x) by (left; assumption).",
            "VernacExtend",
            "83838ca0c07dec8c51d0e16a0df6df4dae686ba7"
        ],
        [
            "assert (H11: x <= b) by (left; assumption).",
            "VernacExtend",
            "727f3a4b85abb14bc9fb6886e961640e2aac78ea"
        ],
        [
            "decide (Rle_dec a (x + h0)) with H9; decide (Rle_dec (x + h0) b) with H8; decide (Rle_dec a x) with H10; decide (Rle_dec x b) with H11.",
            "VernacExtend",
            "87ecb3d944c59b7b082ca15561b9b45941d9e770"
        ],
        [
            "rewrite <- (RiemannInt_P26 (FTC_P1 h C0 H10 H11) H7 (FTC_P1 h C0 H9 H8)); ring.",
            "VernacExtend",
            "d9bd5d2a3aa6026e591760079f9eba582ed8753c"
        ],
        [
            "apply Rplus_le_reg_l with (- x); replace (- x + (x + h0)) with h0; [ idtac | ring ].",
            "VernacExtend",
            "56b5f9bcfbfa660a5358409b086f7ff0169b1705"
        ],
        [
            "rewrite Rplus_comm; apply Rle_trans with (Rabs h0).",
            "VernacExtend",
            "7e27beab6cff2fd00d31d354fde6b54a95411c53"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply Rle_trans with del; [ left; assumption | unfold del; apply Rle_trans with (Rmin (b - x) (x - a)); [ apply Rmin_r | apply Rmin_l ] ].",
            "VernacExtend",
            "e7a9270805b369856507a0ba11d6cf6e37039030"
        ],
        [
            "apply Ropp_le_cancel; apply Rplus_le_reg_l with x; replace (x + - (x + h0)) with (- h0); [ idtac | ring ].",
            "VernacExtend",
            "03492aaa4f8b9aa36a2932f5c5c1acd8e2fadabc"
        ],
        [
            "apply Rle_trans with (Rabs h0); [ rewrite <- Rabs_Ropp; apply RRle_abs | apply Rle_trans with del; [ left; assumption | unfold del; apply Rle_trans with (Rmin (b - x) (x - a)); apply Rmin_r ] ].",
            "VernacExtend",
            "f53136f50bfd81ec42910fcf3493271b08548361"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P28 : forall (f:R -> R) (a b x:R) (h:a <= b) (C0:forall x:R, a <= x <= b -> continuity_pt f x), a <= x <= b -> derivable_pt_lim (primitive h (FTC_P1 h C0)) x (f x).",
            "VernacStartTheoremProof",
            "0c1461045c3424caa686de8d344af780c1b29725"
        ],
        [
            "intro f; intros; elim h; intro.",
            "VernacExtend",
            "ee62b5b9d8cceeb9c0ea57b2804e40bcbc79023f"
        ],
        [
            "elim H; clear H; intros; elim H; intro.",
            "VernacExtend",
            "901567968590f67dd9a806b81a7abd972bb64594"
        ],
        [
            "elim H1; intro.",
            "VernacExtend",
            "69e6dce0928c10bc8e91776963343c6dbf299832"
        ],
        [
            "apply RiemannInt_P27; split; assumption.",
            "VernacExtend",
            "67c182a26398b5edc1d527b4023f6d0aca3eaeda"
        ],
        [
            "set (f_b := fun x:R => f b * (x - b) + RiemannInt (FTC_P1 h C0 h (Rle_refl b))); rewrite H3.",
            "VernacExtend",
            "c7fe28d369d56203659fb4d1a5cee03c61bc37d2"
        ],
        [
            "assert (H4 : derivable_pt_lim f_b b (f b)).",
            "VernacExtend",
            "f989c648e6df22a2c73626705e30b902463548a9"
        ],
        [
            "unfold f_b; pattern (f b) at 2; replace (f b) with (f b + 0).",
            "VernacExtend",
            "6095d63b011b8e968d96535c93d8f449e2611b5e"
        ],
        [
            "change (derivable_pt_lim ((fct_cte (f b) * (id - fct_cte b))%F + fct_cte (RiemannInt (FTC_P1 h C0 h (Rle_refl b)))) b ( f b + 0)).",
            "VernacExtend",
            "b460628d294a5d6a79c88eba02fce57755c75b43"
        ],
        [
            "apply derivable_pt_lim_plus.",
            "VernacExtend",
            "0ff92de56586834c2b5893a998ecf9b0d0c93d06"
        ],
        [
            "pattern (f b) at 2; replace (f b) with (0 * (id - fct_cte b)%F b + fct_cte (f b) b * 1).",
            "VernacExtend",
            "34fcc68cd5e4dff2224457c33e4bd18bb6b9e1a2"
        ],
        [
            "apply derivable_pt_lim_mult.",
            "VernacExtend",
            "64536e67d0a57e66974da34af7c38ef32d200d37"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "replace 1 with (1 - 0); [ idtac | ring ].",
            "VernacExtend",
            "064e2663e0d6a80c765c60336cec57b3e02491dd"
        ],
        [
            "apply derivable_pt_lim_minus.",
            "VernacExtend",
            "2ce17b6d9d27cabc3808057431f47c10825c2fff"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "unfold fct_cte; ring.",
            "VernacExtend",
            "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold derivable_pt_lim; intros; elim (H4 _ H5); intros; assert (H7 : continuity_pt f b).",
            "VernacExtend",
            "c0c675163b67b4d17e230a1a72a91d4a8eab03cc"
        ],
        [
            "apply C0; split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "0a5f58d1c09486a669e47f716fd97277868fd3b3"
        ],
        [
            "assert (H8 : 0 < eps / 2).",
            "VernacExtend",
            "d46f08ac9075a0a76bff6590195f216974527917"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "elim (H7 _ H8); unfold D_x, no_cond, dist; simpl; unfold R_dist; intros; set (del := Rmin x0 (Rmin x1 (b - a))); assert (H10 : 0 < del).",
            "VernacExtend",
            "d23a81c9e1c323b4cecd592efb6491c2dde4c96d"
        ],
        [
            "unfold del; unfold Rmin; case (Rle_dec x1 (b - a)); intros.",
            "VernacExtend",
            "ba0f3868abcbb69d51797b9e5914421f4f5e540b"
        ],
        [
            "destruct (Rle_dec x0 x1) as [Hle|Hnle]; [ apply (cond_pos x0) | elim H9; intros; assumption ].",
            "VernacExtend",
            "4f2988cb692c030803157b540883f283fef2f764"
        ],
        [
            "destruct (Rle_dec x0 (b - a)) as [Hle'|Hnle']; [ apply (cond_pos x0) | apply Rlt_Rminus; assumption ].",
            "VernacExtend",
            "9728d4fd6cecb917de396ce28b50725ce2203c7f"
        ],
        [
            "split with (mkposreal _ H10); intros; destruct (Rcase_abs h0) as [Hle|Hnle].",
            "VernacExtend",
            "a6027294f0e07526606d508b5785e617d54a69ff"
        ],
        [
            "assert (H14 : b + h0 < b).",
            "VernacExtend",
            "5766d79f07867bd55edaa38ec609070bc8dd4ef5"
        ],
        [
            "pattern b at 2; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; assumption.",
            "VernacExtend",
            "235f91783ade3a6f15b52d3169e43484ed0255ee"
        ],
        [
            "assert (H13 : Riemann_integrable f (b + h0) b).",
            "VernacExtend",
            "ff672f3e25ad78c73266b1f29e9c1e1e4651fc7f"
        ],
        [
            "apply continuity_implies_RiemannInt.",
            "VernacExtend",
            "dd456041d3370f827b8fd67296639f4fd59bd526"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "intros; apply C0; elim H13; intros; split; try assumption.",
            "VernacExtend",
            "a99e5a6f13002683b5f04abf2df68de9595e8972"
        ],
        [
            "apply Rle_trans with (b + h0); try assumption.",
            "VernacExtend",
            "cff12c3e02eba1ef430dd929104f1b79ab86f843"
        ],
        [
            "apply Rplus_le_reg_l with (- a - h0).",
            "VernacExtend",
            "519b24772d612eb70801c2f813d61e67d2dfc125"
        ],
        [
            "replace (- a - h0 + a) with (- h0); [ idtac | ring ].",
            "VernacExtend",
            "7ade9d4f148630db9d0a7e384ec8739521d9800b"
        ],
        [
            "replace (- a - h0 + (b + h0)) with (b - a); [ idtac | ring ].",
            "VernacExtend",
            "9aaa2bb5abf184ba1d845286e65a444395f75a3c"
        ],
        [
            "apply Rle_trans with del.",
            "VernacExtend",
            "6de46001fa539ab16a654e74cdde9bc95eaabee3"
        ],
        [
            "apply Rle_trans with (Rabs h0).",
            "VernacExtend",
            "a43ce7047e3a61f63aa8feaadb7090774b756274"
        ],
        [
            "rewrite <- Rabs_Ropp; apply RRle_abs.",
            "VernacExtend",
            "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "unfold del; apply Rle_trans with (Rmin x1 (b - a)); apply Rmin_r.",
            "VernacExtend",
            "76546f009a66557e3238c8e26b33b1249fb4f4b3"
        ],
        [
            "replace (primitive h (FTC_P1 h C0) (b + h0) - primitive h (FTC_P1 h C0) b) with (- RiemannInt H13).",
            "VernacExtend",
            "b513a6aabfe988a5fdce4085b278b3f2f5c65b05"
        ],
        [
            "replace (f b) with (- RiemannInt (RiemannInt_P14 (b + h0) b (f b)) / h0).",
            "VernacExtend",
            "dcf38bc3165b9f96e490e77af41294ba01227039"
        ],
        [
            "rewrite <- Rabs_Ropp; unfold Rminus; unfold Rdiv; rewrite Ropp_mult_distr_l_reverse; rewrite Ropp_plus_distr; repeat rewrite Ropp_involutive; replace (RiemannInt H13 * / h0 + - RiemannInt (RiemannInt_P14 (b + h0) b (f b)) * / h0) with ((RiemannInt H13 - RiemannInt (RiemannInt_P14 (b + h0) b (f b))) / h0).",
            "VernacExtend",
            "a5654b746cf086824f67104d5dcb26f576352840"
        ],
        [
            "replace (RiemannInt H13 - RiemannInt (RiemannInt_P14 (b + h0) b (f b))) with (RiemannInt (RiemannInt_P10 (-1) H13 (RiemannInt_P14 (b + h0) b (f b)))).",
            "VernacExtend",
            "5dba56b99d58b1025a596c044f469afb59e8e2e1"
        ],
        [
            "unfold Rdiv; rewrite Rabs_mult; apply Rle_lt_trans with (RiemannInt (RiemannInt_P16 (RiemannInt_P10 (-1) H13 (RiemannInt_P14 (b + h0) b (f b)))) * Rabs (/ h0)).",
            "VernacExtend",
            "57c934d6fafbaa5cb182d3bd5ad4ba6c9b3da86a"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
            "VernacExtend",
            "3b51024b593773b0da19f4076119f7a5e3345a59"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply (RiemannInt_P17 (RiemannInt_P10 (-1) H13 (RiemannInt_P14 (b + h0) b (f b))) (RiemannInt_P16 (RiemannInt_P10 (-1) H13 (RiemannInt_P14 (b + h0) b (f b))))); left; assumption.",
            "VernacExtend",
            "4fe5d1189066acc8ebf9213a5389a9683cfa6837"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt (RiemannInt_P14 (b + h0) b (eps / 2)) * Rabs (/ h0)).",
            "VernacExtend",
            "e953beedb883150e1292a72acbf61766d9e636f0"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
            "VernacExtend",
            "3b51024b593773b0da19f4076119f7a5e3345a59"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply RiemannInt_P19.",
            "VernacExtend",
            "1bb5773d8e69772d666aa06facdfbf2af2a55783"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "intros; replace (f x2 + -1 * fct_cte (f b) x2) with (f x2 - f b).",
            "VernacExtend",
            "c32cf6b92dc5dca0d8113994246fb28af6bf56f6"
        ],
        [
            "unfold fct_cte; case (Req_dec b x2); intro.",
            "VernacExtend",
            "874a764a8183ebfe817e0b5a6590f67a82690eae"
        ],
        [
            "rewrite H16; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; left; assumption.",
            "VernacExtend",
            "c38eeafdf387db6d39f57a9490d13d585aeb9792"
        ],
        [
            "elim H9; intros; left; apply H18.",
            "VernacExtend",
            "c7eea4ce9b8e72e4b855c0c0c4bc3315c2c1a1b5"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; rewrite Rabs_right.",
            "VernacExtend",
            "28af265cb96777844e45c6903efc46403046679f"
        ],
        [
            "apply Rplus_lt_reg_l with (x2 - x1); replace (x2 - x1 + (b - x2)) with (b - x1); [ idtac | ring ].",
            "VernacExtend",
            "b162f6b7b4a705110f45d894b42af001a2cf64aa"
        ],
        [
            "replace (x2 - x1 + x1) with x2; [ idtac | ring ].",
            "VernacExtend",
            "6185fe0a74262a3b58ee5d403b457ea4cfe82bf9"
        ],
        [
            "apply Rlt_le_trans with (b + h0).",
            "VernacExtend",
            "4882e56a39727bdbcaf48fee4ef740022ac7c255"
        ],
        [
            "2: elim H15; intros; left; assumption.",
            "VernacExtend",
            "bc37f297f5ab6464c5efa09b9b546630dcb8ee36"
        ],
        [
            "unfold Rminus; apply Rplus_lt_compat_l; apply Ropp_lt_cancel; rewrite Ropp_involutive; apply Rle_lt_trans with (Rabs h0).",
            "VernacExtend",
            "5b2cd0deeae0b743826a799a5bdb79c1e8a1b457"
        ],
        [
            "rewrite <- Rabs_Ropp; apply RRle_abs.",
            "VernacExtend",
            "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
        ],
        [
            "apply Rlt_le_trans with del; [ assumption | unfold del; apply Rle_trans with (Rmin x1 (b - a)); [ apply Rmin_r | apply Rmin_l ] ].",
            "VernacExtend",
            "0e0a762e3050711aef71762ee3cd6de8138fa468"
        ],
        [
            "apply Rle_ge; left; apply Rlt_Rminus; elim H15; intros; assumption.",
            "VernacExtend",
            "5eb81dfd32a45566d8be4a7e4558610e2b1d5773"
        ],
        [
            "unfold fct_cte; ring.",
            "VernacExtend",
            "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
        ],
        [
            "rewrite RiemannInt_P15.",
            "VernacExtend",
            "35c08b77f8955d6d3c217acb15c489b51ae58453"
        ],
        [
            "rewrite Rmult_assoc; replace ((b - (b + h0)) * Rabs (/ h0)) with 1.",
            "VernacExtend",
            "3d3d0e8ce64f6173d264d973f2807acde09cfe53"
        ],
        [
            "rewrite Rmult_1_r; unfold Rdiv; apply Rmult_lt_reg_l with 2; [ prove_sup0 | rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; pattern eps at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "f667c125206bd7c77d72607614d400274916374c"
        ],
        [
            "rewrite Rabs_left.",
            "VernacExtend",
            "e4f86365ea2cd6f894fbc670197f200cadc12a6c"
        ],
        [
            "apply Rmult_eq_reg_l with h0; [ do 2 rewrite (Rmult_comm h0); rewrite Rmult_assoc; rewrite Ropp_mult_distr_l_reverse; rewrite <- Rinv_l_sym; [ ring | assumption ] | assumption ].",
            "VernacExtend",
            "2b00f510dc68d28f0d04762b2c472430c2732798"
        ],
        [
            "apply Rinv_lt_0_compat; assumption.",
            "VernacExtend",
            "fc223eec19cc51b48859fc221bf219351fa5ba3a"
        ],
        [
            "rewrite (RiemannInt_P13 H13 (RiemannInt_P14 (b + h0) b (f b)) (RiemannInt_P10 (-1) H13 (RiemannInt_P14 (b + h0) b (f b)))) ; ring.",
            "VernacExtend",
            "f539e901e77cdf198c6daa064533abc8ccaaf2fd"
        ],
        [
            "unfold Rdiv, Rminus; rewrite Rmult_plus_distr_r; ring.",
            "VernacExtend",
            "6c2973c6c6e447bba11b5f10344e5fa8fe77f263"
        ],
        [
            "rewrite RiemannInt_P15.",
            "VernacExtend",
            "35c08b77f8955d6d3c217acb15c489b51ae58453"
        ],
        [
            "rewrite <- Ropp_mult_distr_l_reverse; apply Rmult_eq_reg_l with h0; [ repeat rewrite (Rmult_comm h0); unfold Rdiv; repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | assumption ] | assumption ].",
            "VernacExtend",
            "7386160175a2b112c9b14bea5cfb9b5a8256f909"
        ],
        [
            "cut (a <= b + h0).",
            "VernacExtend",
            "f1098f7722bcf8979d3192c0e300bf32ed196383"
        ],
        [
            "cut (b + h0 <= b).",
            "VernacExtend",
            "9e0f54ef5ea0df1e55046c691a29df2d4c72efdd"
        ],
        [
            "intros; unfold primitive; destruct (Rle_dec a (b + h0)) as [Hle'|Hnle']; destruct (Rle_dec (b + h0) b) as [Hle''|[]]; destruct (Rle_dec a b) as [Hleab|[]]; destruct (Rle_dec b b) as [Hlebb|[]]; assumption || (right; reflexivity) || (try (left; assumption)).",
            "VernacExtend",
            "d1bf42286854e4cee0c35addb506f48cbb4b1e2a"
        ],
        [
            "rewrite <- (RiemannInt_P26 (FTC_P1 h C0 Hle' Hle'') H13 (FTC_P1 h C0 Hleab Hlebb)); ring.",
            "VernacExtend",
            "7241132635b25b0e74908dc4e9a525b7ec118fc3"
        ],
        [
            "elim Hnle'; assumption.",
            "VernacExtend",
            "8c0778fa836421aeaeee8a4cde326ec7363698a3"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "apply Rplus_le_reg_l with (- a - h0).",
            "VernacExtend",
            "519b24772d612eb70801c2f813d61e67d2dfc125"
        ],
        [
            "replace (- a - h0 + a) with (- h0); [ idtac | ring ].",
            "VernacExtend",
            "7ade9d4f148630db9d0a7e384ec8739521d9800b"
        ],
        [
            "replace (- a - h0 + (b + h0)) with (b - a); [ idtac | ring ].",
            "VernacExtend",
            "9aaa2bb5abf184ba1d845286e65a444395f75a3c"
        ],
        [
            "apply Rle_trans with del.",
            "VernacExtend",
            "6de46001fa539ab16a654e74cdde9bc95eaabee3"
        ],
        [
            "apply Rle_trans with (Rabs h0).",
            "VernacExtend",
            "a43ce7047e3a61f63aa8feaadb7090774b756274"
        ],
        [
            "rewrite <- Rabs_Ropp; apply RRle_abs.",
            "VernacExtend",
            "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "unfold del; apply Rle_trans with (Rmin x1 (b - a)); apply Rmin_r.",
            "VernacExtend",
            "76546f009a66557e3238c8e26b33b1249fb4f4b3"
        ],
        [
            "cut (primitive h (FTC_P1 h C0) b = f_b b).",
            "VernacExtend",
            "0b1b72a2fb221d16efa1eb2ada04d7de6ec4e6d7"
        ],
        [
            "intro; cut (primitive h (FTC_P1 h C0) (b + h0) = f_b (b + h0)).",
            "VernacExtend",
            "553c4105e17691d1c5482d7b60009be603dc4347"
        ],
        [
            "intro; rewrite H13; rewrite H14; apply H6.",
            "VernacExtend",
            "323bd89861bcf0d44c860f717eb1d58d5fb6446d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_le_trans with del; [ assumption | unfold del; apply Rmin_l ].",
            "VernacExtend",
            "e5d2a005de52afcb83459eabdf0d42391a21aa1a"
        ],
        [
            "assert (H14 : b < b + h0).",
            "VernacExtend",
            "d8dcbe7a544cf1f908b356f215ebdd7ebc6be8dc"
        ],
        [
            "pattern b at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l.",
            "VernacExtend",
            "fcfb0668e1e824e201d2cb17048e6f149c121cdc"
        ],
        [
            "assert (H14 := Rge_le _ _ Hnle); elim H14; intro.",
            "VernacExtend",
            "4507ca620bc71ea1633644fc8f633e1f67431247"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H11; symmetry ; assumption.",
            "VernacExtend",
            "2b89604691b16ca6005d080953dced27401e61b0"
        ],
        [
            "unfold primitive; destruct (Rle_dec a (b + h0)) as [Hle|[]]; destruct (Rle_dec (b + h0) b) as [Hle'|Hnle']; [ elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H14)) | unfold f_b; reflexivity | left; apply Rlt_trans with b; assumption | left; apply Rlt_trans with b; assumption ].",
            "VernacExtend",
            "0547604c1b0fcaf005199a3fdffa77aa63a76e3f"
        ],
        [
            "unfold f_b; unfold Rminus; rewrite Rplus_opp_r; rewrite Rmult_0_r; rewrite Rplus_0_l; unfold primitive; destruct (Rle_dec a b) as [Hle'|Hnle']; destruct (Rle_dec b b) as [Hle''|[]]; [ apply RiemannInt_P5 | right; reflexivity | elim Hnle'; left; assumption | right; reflexivity ].",
            "VernacExtend",
            "502f2b0312ad5122dd034f3a6d515ce51d2bf681"
        ],
        [
            "set (f_a := fun x:R => f a * (x - a)); rewrite <- H2; assert (H3 : derivable_pt_lim f_a a (f a)).",
            "VernacExtend",
            "dd99ce11269362e2a6f2ddb393605bf10bd96fc6"
        ],
        [
            "unfold f_a; change (derivable_pt_lim (fct_cte (f a) * (id - fct_cte a)%F) a (f a)) ; pattern (f a) at 2; replace (f a) with (0 * (id - fct_cte a)%F a + fct_cte (f a) a * 1).",
            "VernacExtend",
            "9643c1466c8428dfd529ede099f2ff836da0cb9b"
        ],
        [
            "apply derivable_pt_lim_mult.",
            "VernacExtend",
            "64536e67d0a57e66974da34af7c38ef32d200d37"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "replace 1 with (1 - 0); [ idtac | ring ].",
            "VernacExtend",
            "064e2663e0d6a80c765c60336cec57b3e02491dd"
        ],
        [
            "apply derivable_pt_lim_minus.",
            "VernacExtend",
            "2ce17b6d9d27cabc3808057431f47c10825c2fff"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "unfold fct_cte; ring.",
            "VernacExtend",
            "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
        ],
        [
            "unfold derivable_pt_lim; intros; elim (H3 _ H4); intros.",
            "VernacExtend",
            "de5ca35be64b033d690c80ea9ec6eea5778a70fe"
        ],
        [
            "assert (H6 : continuity_pt f a).",
            "VernacExtend",
            "57362bda34b7b3179b34d1c93606ef29637d6e8f"
        ],
        [
            "apply C0; split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "e315bc36626481573b4109d1d28d8f59ee9c24a5"
        ],
        [
            "assert (H7 : 0 < eps / 2).",
            "VernacExtend",
            "1f95620acee7d8df3cde6b8f41bad3bf2febce4a"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
        ],
        [
            "elim (H6 _ H7); unfold D_x, no_cond, dist; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "08298789fd834c922eca140ca8e629b61e78c429"
        ],
        [
            "set (del := Rmin x0 (Rmin x1 (b - a))).",
            "VernacExtend",
            "8ccb4b267f16eaba4e1a72a5ac7a7f8be18b1409"
        ],
        [
            "assert (H9 : 0 < del).",
            "VernacExtend",
            "fbb67106def6bd4bc28a109cde56387a4cdcf6ae"
        ],
        [
            "unfold del; unfold Rmin.",
            "VernacExtend",
            "0c43dc00ac65fb46c9424d92c65637023f53f5f8"
        ],
        [
            "case (Rle_dec x1 (b - a)); intros.",
            "VernacExtend",
            "f9e40fcf328590fb652ee6e2f1d31940f8981c15"
        ],
        [
            "case (Rle_dec x0 x1); intro.",
            "VernacExtend",
            "71131e120047ab6ee3416141fc8082a188832a81"
        ],
        [
            "apply (cond_pos x0).",
            "VernacExtend",
            "1e3a506cf99e477b1cbdba4e16b4eacb1cd879fd"
        ],
        [
            "elim H8; intros; assumption.",
            "VernacExtend",
            "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
        ],
        [
            "case (Rle_dec x0 (b - a)); intro.",
            "VernacExtend",
            "8bd36df0d452677a288e8930e38b634b32fd0a74"
        ],
        [
            "apply (cond_pos x0).",
            "VernacExtend",
            "1e3a506cf99e477b1cbdba4e16b4eacb1cd879fd"
        ],
        [
            "apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
        ],
        [
            "split with (mkposreal _ H9).",
            "VernacExtend",
            "12b08bc61630365b1d34f2fe16c3cf10ea8c0a95"
        ],
        [
            "intros; destruct (Rcase_abs h0) as [Hle|Hnle].",
            "VernacExtend",
            "41888124d83798ec86ccf565771e8fe970244a99"
        ],
        [
            "assert (H12 : a + h0 < a).",
            "VernacExtend",
            "af65688472161321935d96e05f65b3d3616b3277"
        ],
        [
            "pattern a at 2; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; assumption.",
            "VernacExtend",
            "bfcaa3061a1cc34c6c26a61ba4b4118da3564acc"
        ],
        [
            "unfold primitive.",
            "VernacExtend",
            "2b36d7f9851413e2e6c342eadc75df1cb8f8eae9"
        ],
        [
            "destruct (Rle_dec a (a + h0)) as [Hle'|Hnle']; destruct (Rle_dec (a + h0) b) as [Hle''|Hnle'']; destruct (Rle_dec a a) as [Hleaa|[]]; destruct (Rle_dec a b) as [Hleab|[]]; try (left; assumption) || (right; reflexivity).",
            "VernacExtend",
            "c27ef05a2daa465427c925daa2404e0884b72b6b"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H12)).",
            "VernacExtend",
            "9dca6b104fc533cda711bbd9644677a0915d764d"
        ],
        [
            "elim Hnle''; left; apply Rlt_trans with a; assumption.",
            "VernacExtend",
            "af5979ba4fb50b680395bd6ebba3cce3f1ac19c3"
        ],
        [
            "rewrite RiemannInt_P9; replace 0 with (f_a a).",
            "VernacExtend",
            "298bae1473c4363993ea11cd1c363ac83516a457"
        ],
        [
            "replace (f a * (a + h0 - a)) with (f_a (a + h0)).",
            "VernacExtend",
            "d03dff15eda7846ecce2b76c1b9ea1437b4cbeb5"
        ],
        [
            "apply H5; try assumption.",
            "VernacExtend",
            "c0c44fc6b2af7ee8a85c9be21c53b8f1ad84f625"
        ],
        [
            "apply Rlt_le_trans with del; [ assumption | unfold del; apply Rmin_l ].",
            "VernacExtend",
            "e5d2a005de52afcb83459eabdf0d42391a21aa1a"
        ],
        [
            "unfold f_a; ring.",
            "VernacExtend",
            "2fab687e6fe5bbaad8ff39ed9ccaa22bc40f09dd"
        ],
        [
            "unfold f_a; ring.",
            "VernacExtend",
            "2fab687e6fe5bbaad8ff39ed9ccaa22bc40f09dd"
        ],
        [
            "elim Hnle''; left; apply Rlt_trans with a; assumption.",
            "VernacExtend",
            "af5979ba4fb50b680395bd6ebba3cce3f1ac19c3"
        ],
        [
            "assert (H12 : a < a + h0).",
            "VernacExtend",
            "74fefbb8cd62fdbfc19c9fbc5e27310711a010db"
        ],
        [
            "pattern a at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l.",
            "VernacExtend",
            "3b34d8308f8c32ede10107626b0fa14d2f240ff2"
        ],
        [
            "assert (H12 := Rge_le _ _ Hnle); elim H12; intro.",
            "VernacExtend",
            "2b083aad0665da030e32c6cb162592717957ac2a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H10; symmetry ; assumption.",
            "VernacExtend",
            "d96dd7fd0dfaf576a362c9d93f04f41999f7ba2f"
        ],
        [
            "assert (H13 : Riemann_integrable f a (a + h0)).",
            "VernacExtend",
            "a7cad999667b0e1769b9f96ea374339b53d5a7f6"
        ],
        [
            "apply continuity_implies_RiemannInt.",
            "VernacExtend",
            "dd456041d3370f827b8fd67296639f4fd59bd526"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "intros; apply C0; elim H13; intros; split; try assumption.",
            "VernacExtend",
            "a99e5a6f13002683b5f04abf2df68de9595e8972"
        ],
        [
            "apply Rle_trans with (a + h0); try assumption.",
            "VernacExtend",
            "eef55870b69bcf56fb501b828513d90b8f453370"
        ],
        [
            "apply Rplus_le_reg_l with (- b - h0).",
            "VernacExtend",
            "bac85e8ace8f09b620c0af993e92dfb02e0103c8"
        ],
        [
            "replace (- b - h0 + b) with (- h0); [ idtac | ring ].",
            "VernacExtend",
            "b2d00a8a389ee2da56645bc6a469b732954d3d35"
        ],
        [
            "replace (- b - h0 + (a + h0)) with (a - b); [ idtac | ring ].",
            "VernacExtend",
            "93d0948b469ec620a5d689be918efdb4cd38d82a"
        ],
        [
            "apply Ropp_le_cancel; rewrite Ropp_involutive; rewrite Ropp_minus_distr; apply Rle_trans with del.",
            "VernacExtend",
            "019e0c5199004672b0ecf303158eeb102b8f73ff"
        ],
        [
            "apply Rle_trans with (Rabs h0); [ apply RRle_abs | left; assumption ].",
            "VernacExtend",
            "6cf8dfadbe52f5eef31cbe1563c827b662f72890"
        ],
        [
            "unfold del; apply Rle_trans with (Rmin x1 (b - a)); apply Rmin_r.",
            "VernacExtend",
            "76546f009a66557e3238c8e26b33b1249fb4f4b3"
        ],
        [
            "replace (primitive h (FTC_P1 h C0) (a + h0) - primitive h (FTC_P1 h C0) a) with (RiemannInt H13).",
            "VernacExtend",
            "04edcb6c9289acb972933826f6e68982e78ebcfa"
        ],
        [
            "replace (f a) with (RiemannInt (RiemannInt_P14 a (a + h0) (f a)) / h0).",
            "VernacExtend",
            "c37484f3c12d18733b111ce3f0c8d0e0a89b5823"
        ],
        [
            "replace (RiemannInt H13 / h0 - RiemannInt (RiemannInt_P14 a (a + h0) (f a)) / h0) with ((RiemannInt H13 - RiemannInt (RiemannInt_P14 a (a + h0) (f a))) / h0).",
            "VernacExtend",
            "8ca87b773476c24c0b0aa003e9771489266cdd56"
        ],
        [
            "replace (RiemannInt H13 - RiemannInt (RiemannInt_P14 a (a + h0) (f a))) with (RiemannInt (RiemannInt_P10 (-1) H13 (RiemannInt_P14 a (a + h0) (f a)))).",
            "VernacExtend",
            "debb87ab55218f1fbadd054d11f878bcd17eeeac"
        ],
        [
            "unfold Rdiv; rewrite Rabs_mult; apply Rle_lt_trans with (RiemannInt (RiemannInt_P16 (RiemannInt_P10 (-1) H13 (RiemannInt_P14 a (a + h0) (f a)))) * Rabs (/ h0)).",
            "VernacExtend",
            "0878d40aca4001ab1e1d532603dd7746c8481e4a"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
            "VernacExtend",
            "3b51024b593773b0da19f4076119f7a5e3345a59"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply (RiemannInt_P17 (RiemannInt_P10 (-1) H13 (RiemannInt_P14 a (a + h0) (f a))) (RiemannInt_P16 (RiemannInt_P10 (-1) H13 (RiemannInt_P14 a (a + h0) (f a))))); left; assumption.",
            "VernacExtend",
            "2e8bc23cb9bad770b635971f6a3134efc61a719d"
        ],
        [
            "apply Rle_lt_trans with (RiemannInt (RiemannInt_P14 a (a + h0) (eps / 2)) * Rabs (/ h0)).",
            "VernacExtend",
            "51667fbb7824ea1f9ab457e504ac2f77717b6efa"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
            "VernacExtend",
            "3b51024b593773b0da19f4076119f7a5e3345a59"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply RiemannInt_P19.",
            "VernacExtend",
            "1bb5773d8e69772d666aa06facdfbf2af2a55783"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "intros; replace (f x2 + -1 * fct_cte (f a) x2) with (f x2 - f a).",
            "VernacExtend",
            "b09c1eb1f17d75daa498e24c1fa929fb016b036d"
        ],
        [
            "unfold fct_cte; case (Req_dec a x2); intro.",
            "VernacExtend",
            "5672f3fa602db630b608f0111c1f24f95895f7cc"
        ],
        [
            "rewrite H15; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; left; assumption.",
            "VernacExtend",
            "54b9421b2cecdef44734a82a01156328c5f8b54e"
        ],
        [
            "elim H8; intros; left; apply H17; repeat split.",
            "VernacExtend",
            "70366922d457e26a61735c99c8924aa4cd68d56c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "apply Rplus_lt_reg_l with a; replace (a + (x2 - a)) with x2; [ idtac | ring ].",
            "VernacExtend",
            "1b8e49356effff221cfeacec132e2df18be6dc78"
        ],
        [
            "apply Rlt_le_trans with (a + h0).",
            "VernacExtend",
            "a1e8dc22122ac567d0aa8d28cc58c237661cfe7b"
        ],
        [
            "elim H14; intros; assumption.",
            "VernacExtend",
            "2e4741e7c1f8634a92089f03aa4708674cca7d43"
        ],
        [
            "apply Rplus_le_compat_l; left; apply Rle_lt_trans with (Rabs h0).",
            "VernacExtend",
            "549cc24cab1dcf15adbe4536a8e6e614ff2986ef"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply Rlt_le_trans with del; [ assumption | unfold del; apply Rle_trans with (Rmin x1 (b - a)); [ apply Rmin_r | apply Rmin_l ] ].",
            "VernacExtend",
            "0e0a762e3050711aef71762ee3cd6de8138fa468"
        ],
        [
            "apply Rle_ge; left; apply Rlt_Rminus; elim H14; intros; assumption.",
            "VernacExtend",
            "b11cb8141b5dd83256a93b5c2e6f27e8623aeb4c"
        ],
        [
            "unfold fct_cte; ring.",
            "VernacExtend",
            "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
        ],
        [
            "rewrite RiemannInt_P15.",
            "VernacExtend",
            "35c08b77f8955d6d3c217acb15c489b51ae58453"
        ],
        [
            "rewrite Rmult_assoc; replace ((a + h0 - a) * Rabs (/ h0)) with 1.",
            "VernacExtend",
            "78591fd9aa2ee28892ef0827e83f44681d0750f8"
        ],
        [
            "rewrite Rmult_1_r; unfold Rdiv; apply Rmult_lt_reg_l with 2; [ prove_sup0 | rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; pattern eps at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "f667c125206bd7c77d72607614d400274916374c"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "rewrite Rplus_comm; unfold Rminus; rewrite Rplus_assoc; rewrite Rplus_opp_r; rewrite Rplus_0_r; rewrite <- Rinv_r_sym; [ reflexivity | assumption ].",
            "VernacExtend",
            "6871fc21c1d29574395326a9dde83cfd50d9703c"
        ],
        [
            "apply Rle_ge; left; apply Rinv_0_lt_compat; assert (H14 := Rge_le _ _ Hnle); elim H14; intro.",
            "VernacExtend",
            "e59fa15eca2c71973e3776919629298e2e82e504"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H10; symmetry ; assumption.",
            "VernacExtend",
            "d96dd7fd0dfaf576a362c9d93f04f41999f7ba2f"
        ],
        [
            "rewrite (RiemannInt_P13 H13 (RiemannInt_P14 a (a + h0) (f a)) (RiemannInt_P10 (-1) H13 (RiemannInt_P14 a (a + h0) (f a)))) ; ring.",
            "VernacExtend",
            "1af1c4db9facb854b9848e5e2691a3c6d06542bf"
        ],
        [
            "unfold Rdiv, Rminus; rewrite Rmult_plus_distr_r; ring.",
            "VernacExtend",
            "6c2973c6c6e447bba11b5f10344e5fa8fe77f263"
        ],
        [
            "rewrite RiemannInt_P15.",
            "VernacExtend",
            "35c08b77f8955d6d3c217acb15c489b51ae58453"
        ],
        [
            "rewrite Rplus_comm; unfold Rminus; rewrite Rplus_assoc; rewrite Rplus_opp_r; rewrite Rplus_0_r; unfold Rdiv; rewrite Rmult_assoc; rewrite <- Rinv_r_sym; [ ring | assumption ].",
            "VernacExtend",
            "f666401cb09e4f6b51f06f3f695d0142dd6a9396"
        ],
        [
            "cut (a <= a + h0).",
            "VernacExtend",
            "d06f7df5c5a119c89cd5dfdd5c8dda73ea9827aa"
        ],
        [
            "cut (a + h0 <= b).",
            "VernacExtend",
            "9c977ba3cc73e5fffc6781436bf7f026b65ac726"
        ],
        [
            "intros; unfold primitive.",
            "VernacExtend",
            "f17a8b8207e461f2e7cc2834fc9d586b098aa7da"
        ],
        [
            "decide (Rle_dec (a+h0) b) with H14.",
            "VernacExtend",
            "6433a601f08b0a3d293b9f4f6efdfa6763ebe604"
        ],
        [
            "decide (Rle_dec a a) with (Rle_refl a).",
            "VernacExtend",
            "d49fa4df3934bd6b9a178cba333b5244fafd717c"
        ],
        [
            "decide (Rle_dec a (a+h0)) with H15.",
            "VernacExtend",
            "2ae068c8c67ad063ddfbafb070b2253a454807bd"
        ],
        [
            "decide (Rle_dec a b) with h.",
            "VernacExtend",
            "473775af55472a82e01416f5f09436a6904a2034"
        ],
        [
            "rewrite RiemannInt_P9; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply RiemannInt_P5.",
            "VernacExtend",
            "92ec62d8a6420e8d51da2cc42743df735dfefd9b"
        ],
        [
            "2: left; assumption.",
            "VernacExtend",
            "74f1d0bf8e172d52dcfb6d36e7bf2497df1e42af"
        ],
        [
            "apply Rplus_le_reg_l with (- a); replace (- a + (a + h0)) with h0; [ idtac | ring ].",
            "VernacExtend",
            "8f1b7699cd70ecbbe7f50b00366fec24f9d510b5"
        ],
        [
            "rewrite Rplus_comm; apply Rle_trans with del; [ apply Rle_trans with (Rabs h0); [ apply RRle_abs | left; assumption ] | unfold del; apply Rle_trans with (Rmin x1 (b - a)); apply Rmin_r ].",
            "VernacExtend",
            "ef0c71f5552eb1c899b43bb496ab46964b81b018"
        ],
        [
            "assert (H1 : x = a).",
            "VernacExtend",
            "020c64b86e6051a6af1f7c53e9e2e5c5081c78b7"
        ],
        [
            "rewrite <- H0 in H; elim H; intros; apply Rle_antisym; assumption.",
            "VernacExtend",
            "d10418cc98d4c5260c7f8bd9d27b9b4a115e3910"
        ],
        [
            "set (f_a := fun x:R => f a * (x - a)).",
            "VernacExtend",
            "e006ee63dbb88374963cc3a8e035368aa6d62a69"
        ],
        [
            "assert (H2 : derivable_pt_lim f_a a (f a)).",
            "VernacExtend",
            "8e710605720335c33884b69da00a4f36235597df"
        ],
        [
            "unfold f_a; change (derivable_pt_lim (fct_cte (f a) * (id - fct_cte a)%F) a (f a)) ; pattern (f a) at 2; replace (f a) with (0 * (id - fct_cte a)%F a + fct_cte (f a) a * 1).",
            "VernacExtend",
            "9643c1466c8428dfd529ede099f2ff836da0cb9b"
        ],
        [
            "apply derivable_pt_lim_mult.",
            "VernacExtend",
            "64536e67d0a57e66974da34af7c38ef32d200d37"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "replace 1 with (1 - 0); [ idtac | ring ].",
            "VernacExtend",
            "064e2663e0d6a80c765c60336cec57b3e02491dd"
        ],
        [
            "apply derivable_pt_lim_minus.",
            "VernacExtend",
            "2ce17b6d9d27cabc3808057431f47c10825c2fff"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "unfold fct_cte; ring.",
            "VernacExtend",
            "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
        ],
        [
            "set (f_b := fun x:R => f b * (x - b) + RiemannInt (FTC_P1 h C0 h (Rle_refl b))).",
            "VernacExtend",
            "4ba8d4066734861ae8416a67c3616b9368c5dc5d"
        ],
        [
            "assert (H3 : derivable_pt_lim f_b b (f b)).",
            "VernacExtend",
            "560fc8b8d2d65839587db6446e342d991e74c65f"
        ],
        [
            "unfold f_b; pattern (f b) at 2; replace (f b) with (f b + 0).",
            "VernacExtend",
            "6095d63b011b8e968d96535c93d8f449e2611b5e"
        ],
        [
            "change (derivable_pt_lim ((fct_cte (f b) * (id - fct_cte b))%F + fct_cte (RiemannInt (FTC_P1 h C0 h (Rle_refl b)))) b ( f b + 0)).",
            "VernacExtend",
            "b460628d294a5d6a79c88eba02fce57755c75b43"
        ],
        [
            "apply derivable_pt_lim_plus.",
            "VernacExtend",
            "0ff92de56586834c2b5893a998ecf9b0d0c93d06"
        ],
        [
            "pattern (f b) at 2; replace (f b) with (0 * (id - fct_cte b)%F b + fct_cte (f b) b * 1).",
            "VernacExtend",
            "34fcc68cd5e4dff2224457c33e4bd18bb6b9e1a2"
        ],
        [
            "apply derivable_pt_lim_mult.",
            "VernacExtend",
            "64536e67d0a57e66974da34af7c38ef32d200d37"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "replace 1 with (1 - 0); [ idtac | ring ].",
            "VernacExtend",
            "064e2663e0d6a80c765c60336cec57b3e02491dd"
        ],
        [
            "apply derivable_pt_lim_minus.",
            "VernacExtend",
            "2ce17b6d9d27cabc3808057431f47c10825c2fff"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "unfold fct_cte; ring.",
            "VernacExtend",
            "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold derivable_pt_lim; intros; elim (H2 _ H4); intros; elim (H3 _ H4); intros; set (del := Rmin x0 x1).",
            "VernacExtend",
            "8915a04cdd9c9d4f2f13727430189dbeab77d9ab"
        ],
        [
            "assert (H7 : 0 < del).",
            "VernacExtend",
            "3e3d8b30ad5c4b28a476557b5775bad068ba94c0"
        ],
        [
            "unfold del; unfold Rmin; destruct (Rle_dec x0 x1) as [Hle|Hnle].",
            "VernacExtend",
            "0da13cfd9bddcd6b2d4ba75ba03eecf11a6559c7"
        ],
        [
            "apply (cond_pos x0).",
            "VernacExtend",
            "1e3a506cf99e477b1cbdba4e16b4eacb1cd879fd"
        ],
        [
            "apply (cond_pos x1).",
            "VernacExtend",
            "be187368ffd92773f09d8ae14c7ed6a401a5f5d5"
        ],
        [
            "split with (mkposreal _ H7); intros; destruct (Rcase_abs h0) as [Hle|Hnle].",
            "VernacExtend",
            "1806bfbd36acc7cadaf60c01b0414c26e7aa84f4"
        ],
        [
            "assert (H10 : a + h0 < a).",
            "VernacExtend",
            "eeeecb77e822273a75fc1982f9b6e999cc560dfb"
        ],
        [
            "pattern a at 2; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; assumption.",
            "VernacExtend",
            "bfcaa3061a1cc34c6c26a61ba4b4118da3564acc"
        ],
        [
            "rewrite H1; unfold primitive.",
            "VernacExtend",
            "6ecc26a94cd44171d707b0a8ca37e104855ec30a"
        ],
        [
            "apply (decide_left (Rle_dec a b) h); intro h'.",
            "VernacExtend",
            "9bcb063458f7aec3d395f23486fa8ccdf5c2826b"
        ],
        [
            "assert (H11:~ a<=a+h0) by auto using Rlt_not_le.",
            "VernacExtend",
            "8a669d987a3733e6e2573d77e292a19488d3cea4"
        ],
        [
            "decide (Rle_dec a (a+h0)) with H11.",
            "VernacExtend",
            "e9bd838f44c35b53980d725cbf4a353a746d96be"
        ],
        [
            "decide (Rle_dec a a) with (Rle_refl a).",
            "VernacExtend",
            "d49fa4df3934bd6b9a178cba333b5244fafd717c"
        ],
        [
            "rewrite RiemannInt_P9; replace 0 with (f_a a).",
            "VernacExtend",
            "298bae1473c4363993ea11cd1c363ac83516a457"
        ],
        [
            "replace (f a * (a + h0 - a)) with (f_a (a + h0)).",
            "VernacExtend",
            "d03dff15eda7846ecce2b76c1b9ea1437b4cbeb5"
        ],
        [
            "apply H5; try assumption.",
            "VernacExtend",
            "c0c44fc6b2af7ee8a85c9be21c53b8f1ad84f625"
        ],
        [
            "apply Rlt_le_trans with del; try assumption.",
            "VernacExtend",
            "1b71e899b283bf7eea064440d97f1685f1df985d"
        ],
        [
            "unfold del; apply Rmin_l.",
            "VernacExtend",
            "46c0bfc6c0d150fb8634f72c6e90b5099e5e8470"
        ],
        [
            "unfold f_a; ring.",
            "VernacExtend",
            "2fab687e6fe5bbaad8ff39ed9ccaa22bc40f09dd"
        ],
        [
            "unfold f_a; ring.",
            "VernacExtend",
            "2fab687e6fe5bbaad8ff39ed9ccaa22bc40f09dd"
        ],
        [
            "assert (H10 : a < a + h0).",
            "VernacExtend",
            "4029c929248dce0ab234f21413d945bb29970bea"
        ],
        [
            "pattern a at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l.",
            "VernacExtend",
            "3b34d8308f8c32ede10107626b0fa14d2f240ff2"
        ],
        [
            "assert (H10 := Rge_le _ _ Hnle); elim H10; intro.",
            "VernacExtend",
            "66fdcb743b1127d1f85a83c06c99c3ffedc9155f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H8; symmetry ; assumption.",
            "VernacExtend",
            "47c51fc3b9f04759d941fb85079f439c605adcbd"
        ],
        [
            "rewrite H0 in H1; rewrite H1; unfold primitive.",
            "VernacExtend",
            "2a6cf6a873f9cae87c3203ef688656ba89f39caf"
        ],
        [
            "decide (Rle_dec a b) with h.",
            "VernacExtend",
            "473775af55472a82e01416f5f09436a6904a2034"
        ],
        [
            "decide (Rle_dec b b) with (Rle_refl b).",
            "VernacExtend",
            "210a6fb41247abd84e3cd2c017caadd3e2638112"
        ],
        [
            "assert (H12 : a<=b+h0) by (eauto using Rlt_le_trans with real).",
            "VernacExtend",
            "3c5786568d5108056992f6b4a245366029d02cb3"
        ],
        [
            "decide (Rle_dec a (b+h0)) with H12.",
            "VernacExtend",
            "d01a9073b4de86b086181ac22a03b9b8a01329fc"
        ],
        [
            "rewrite H0 in H10.",
            "VernacExtend",
            "07f0916778e8d6888913c95d2b156ad45ab6aea1"
        ],
        [
            "assert (H13 : ~b+h0<=b) by (auto using Rlt_not_le).",
            "VernacExtend",
            "668333d26ab89eaa768ee7e6abf3450deee863bf"
        ],
        [
            "decide (Rle_dec (b+h0) b) with H13.",
            "VernacExtend",
            "dabfb8aa01bd0c2c686abef9b37cb2b95bf5cf54"
        ],
        [
            "replace (RiemannInt (FTC_P1 h C0 hbis H11)) with (f_b b).",
            "VernacExtend",
            "f285f721962bf08e37bb2d019a813c0ae5eb8fea"
        ],
        [
            "fold (f_b (b + h0)).",
            "VernacExtend",
            "54aa94d83fc533b556ff145ce0038f89472d5f83"
        ],
        [
            "apply H6; try assumption.",
            "VernacExtend",
            "01dec2ac2e5cbbb9da3e73af1a04322f995a54b3"
        ],
        [
            "apply Rlt_le_trans with del; try assumption.",
            "VernacExtend",
            "1b71e899b283bf7eea064440d97f1685f1df985d"
        ],
        [
            "unfold del; apply Rmin_r.",
            "VernacExtend",
            "c536207438a9729d0133d46b830f0dafa947b49a"
        ],
        [
            "unfold f_b; unfold Rminus; rewrite Rplus_opp_r; rewrite Rmult_0_r; rewrite Rplus_0_l; apply RiemannInt_P5.",
            "VernacExtend",
            "7c91669d49f997c2b6bdd6366aae1f7716f6066a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P29 : forall (f:R -> R) a b (h:a <= b) (C0:forall x:R, a <= x <= b -> continuity_pt f x), antiderivative f (primitive h (FTC_P1 h C0)) a b.",
            "VernacStartTheoremProof",
            "35348ac0f21a90280a8a9f3756db722d7d606a72"
        ],
        [
            "intro f; intros; unfold antiderivative; split; try assumption; intros; assert (H0 := RiemannInt_P28 h C0 H); assert (H1 : derivable_pt (primitive h (FTC_P1 h C0)) x); [ unfold derivable_pt; split with (f x); apply H0 | split with H1; symmetry ; apply derive_pt_eq_0; apply H0 ].",
            "VernacExtend",
            "cde523266d3c3a45dc2a1ffe71b8c3eff5dfbbc4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P30 : forall (f:R -> R) (a b:R), a <= b -> (forall x:R, a <= x <= b -> continuity_pt f x) -> { g:R -> R | antiderivative f g a b }.",
            "VernacStartTheoremProof",
            "73a941781999cf4e5a85632caf37ee9eb9e1c68e"
        ],
        [
            "intros; split with (primitive H (FTC_P1 H H0)); apply RiemannInt_P29.",
            "VernacExtend",
            "2fc6b559c0a378926e82f22720077dfe845706b9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record C1_fun : Type := mkC1 {c1 :> R -> R; diff0 : derivable c1; cont1 : continuity (derive c1 diff0)}.",
            "VernacInductive",
            "2a6a3b8fe826fce2e95fcad9001f5637e1dc3869"
        ],
        [
            "Lemma RiemannInt_P31 : forall (f:C1_fun) (a b:R), a <= b -> antiderivative (derive f (diff0 f)) f a b.",
            "VernacStartTheoremProof",
            "6e68e9ddeaf4d3b4844ff7c3c7392eedeaf81b2e"
        ],
        [
            "intro f; intros; unfold antiderivative; split; try assumption; intros; split with (diff0 f x); reflexivity.",
            "VernacExtend",
            "90ca67f0176ba28993bf59fe72050b21f39bcf1b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P32 : forall (f:C1_fun) (a b:R), Riemann_integrable (derive f (diff0 f)) a b.",
            "VernacStartTheoremProof",
            "5e4b66febd3d1803e529f23835c30062d066ea58"
        ],
        [
            "intro f; intros; destruct (Rle_dec a b) as [Hle|Hnle]; [ apply continuity_implies_RiemannInt; try assumption; intros; apply (cont1 f) | assert (H : b <= a); [ auto with real | apply RiemannInt_P1; apply continuity_implies_RiemannInt; try assumption; intros; apply (cont1 f) ] ].",
            "VernacExtend",
            "32ce8dcf2e2216a7b6d83dbf8d55a7da290c48ba"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_P33 : forall (f:C1_fun) (a b:R) (pr:Riemann_integrable (derive f (diff0 f)) a b), a <= b -> RiemannInt pr = f b - f a.",
            "VernacStartTheoremProof",
            "1a8928a4e263e52bb6e4aa28c5ed9fd7c7709854"
        ],
        [
            "intro f; intros; assert (H0 : forall x:R, a <= x <= b -> continuity_pt (derive f (diff0 f)) x).",
            "VernacExtend",
            "a6b602e6fee51b4a009ba678c00cfcbcde720d8b"
        ],
        [
            "intros; apply (cont1 f).",
            "VernacExtend",
            "aac55baaac8f0050b01e599221f72350e9fa0eb1"
        ],
        [
            "rewrite (RiemannInt_P20 H (FTC_P1 H H0) pr); assert (H1 := RiemannInt_P29 H H0); assert (H2 := RiemannInt_P31 f H); elim (antiderivative_Ucte (derive f (diff0 f)) _ _ _ _ H1 H2); intros C H3; repeat rewrite H3; [ ring | split; [ right; reflexivity | assumption ] | split; [ assumption | right; reflexivity ] ].",
            "VernacExtend",
            "82fb76005438240380686e9eba22ab6c1ec1ee96"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma FTC_Riemann : forall (f:C1_fun) (a b:R) (pr:Riemann_integrable (derive f (diff0 f)) a b), RiemannInt pr = f b - f a.",
            "VernacStartTheoremProof",
            "6a673fc665f73371fa6324e323a7c71d783f2b31"
        ],
        [
            "intro f; intros; destruct (Rle_dec a b) as [Hle|Hnle]; [ apply RiemannInt_P33; assumption | assert (H : b <= a); [ auto with real | assert (H0 := RiemannInt_P1 pr); rewrite (RiemannInt_P8 pr H0); rewrite (RiemannInt_P33 _ H0 H); ring ] ].",
            "VernacExtend",
            "61c07fe29e3cea7da2d96a5bccde3928436f5bc8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RiemannInt_const_bound : forall f a b l u (h : Riemann_integrable f a b), a <= b -> (forall x, a < x < b -> l <= f x <= u) -> l * (b - a) <= RiemannInt h <= u * (b - a).",
            "VernacStartTheoremProof",
            "3e26d406fcb60cf356dc688125d3251b06bba849"
        ],
        [
            "intros f a b l u ri ab intf.",
            "VernacExtend",
            "7ebbc948b97c3149ad9d8e5b91c331b82b1a37c6"
        ],
        [
            "rewrite <- !(fun l => RiemannInt_P15 (RiemannInt_P14 a b l)).",
            "VernacExtend",
            "e9f1a4065cc996d1a6f66d6bfc307c580403a430"
        ],
        [
            "split; apply RiemannInt_P19; try assumption; intros x intx; unfold fct_cte; destruct (intf x intx); assumption.",
            "VernacExtend",
            "03d96cd761bc9fdba5caf03066f1f717cefffab3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Riemann_integrable_scal : forall f a b k, Riemann_integrable f a b -> Riemann_integrable (fun x => k * f x) a b.",
            "VernacStartTheoremProof",
            "9ddfac330991801eed843a865a890acec16e887f"
        ],
        [
            "intros f a b k ri.",
            "VernacExtend",
            "2ba064722b6934488820b9f453b688a591ecbbae"
        ],
        [
            "apply Riemann_integrable_ext with (f := fun x => 0 + k * f x).",
            "VernacExtend",
            "bacd1162bd0fe1b709c84a8bcd04220c39e545a3"
        ],
        [
            "intros; ring.",
            "VernacExtend",
            "a0e0ba17c737405b1d4c2a120d3717441df76616"
        ],
        [
            "apply (RiemannInt_P10 _ (RiemannInt_P14 _ _ 0) ri).",
            "VernacExtend",
            "5137a63874657addadbba45ba73d04f6f7e5d72d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments Riemann_integrable_scal [f a b] k _ eps.",
            "VernacArguments",
            "a3ea98244b3a99f8654cb5055d17f014016f72cb"
        ],
        [
            "Lemma Riemann_integrable_Ropp : forall f a b, Riemann_integrable f a b -> Riemann_integrable (fun x => - f x) a b.",
            "VernacStartTheoremProof",
            "c007580ce0f37d88a96a098b1d2ff6f5e00dc6aa"
        ],
        [
            "intros ff a b h.",
            "VernacExtend",
            "372923bff6000f1cfd017411270cb9cd5fac0d8c"
        ],
        [
            "apply Riemann_integrable_ext with (f := fun x => (-1) * ff x).",
            "VernacExtend",
            "8eef63bed16109522c19453aa153e0eb8a87bdb4"
        ],
        [
            "intros; ring.",
            "VernacExtend",
            "a0e0ba17c737405b1d4c2a120d3717441df76616"
        ],
        [
            "apply Riemann_integrable_scal; assumption.",
            "VernacExtend",
            "14c72bb8f84cfdf85c89c5aee4f346ef6e64146d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Arguments Riemann_integrable_Ropp [f a b] _ eps.",
            "VernacArguments",
            "0da5d1694e2f93a9d48c7479e61e6ee8f554edd3"
        ]
    ],
    "proofs": [
        {
            "name": "phi_sequence_prop",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros; apply (projT2 (pr (un N))).",
                        "VernacExtend",
                        "49f87d37f135fafb7ee5853d46e4ecb502aec51f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P1",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "unfold Riemann_integrable; intros; elim (X eps); clear X; intros.",
                        "VernacExtend",
                        "d3a8e0927f75f3ad7a9ee36c55b0a249b576eaaf"
                    ]
                },
                {
                    "command": [
                        "elim p; clear p; intros x0 p; exists (mkStepFun (StepFun_P6 (pre x))); exists (mkStepFun (StepFun_P6 (pre x0))); elim p; clear p; intros; split.",
                        "VernacExtend",
                        "3de3f3b6ebb467abe9bd374131d8a1c3f280cc32"
                    ]
                },
                {
                    "command": [
                        "intros; apply (H t); elim H1; clear H1; intros; split; [ apply Rle_trans with (Rmin b a); try assumption; right; unfold Rmin | apply Rle_trans with (Rmax b a); try assumption; right; unfold Rmax ]; (case (Rle_dec a b); case (Rle_dec b a); intros; try reflexivity || apply Rle_antisym; [ assumption | assumption | auto with real | auto with real ]).",
                        "VernacExtend",
                        "b0d1830d476acc83e0e108c5a616ff63ca0571ba"
                    ]
                },
                {
                    "command": [
                        "generalize H0; unfold RiemannInt_SF; case (Rle_dec a b); case (Rle_dec b a); intros; (replace (Int_SF (subdivision_val (mkStepFun (StepFun_P6 (pre x0)))) (subdivision (mkStepFun (StepFun_P6 (pre x0))))) with (Int_SF (subdivision_val x0) (subdivision x0)); [ idtac | apply StepFun_P17 with (fe x0) a b; [ apply StepFun_P1 | apply StepFun_P2; apply (StepFun_P1 (mkStepFun (StepFun_P6 (pre x0)))) ] ]).",
                        "VernacExtend",
                        "f1e410d0a10e0f3c9e16ed64302244fa4ae89295"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp; apply H1.",
                        "VernacExtend",
                        "4c2e0ed6751ba045f3a0146cf0ca74972da3eb31"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp in H1; apply H1.",
                        "VernacExtend",
                        "fbb8fe7f9797523bce2bb8836728cf0f4f050168"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P2",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros; apply R_complete; unfold Un_cv in H; unfold Cauchy_crit; intros; assert (H3 : 0 < eps / 2).",
                        "VernacExtend",
                        "3d0aec3969f81be0b9fb81eccb23d8615197d7f3"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
                    ]
                },
                {
                    "command": [
                        "elim (H _ H3); intros N0 H4; exists N0; intros; unfold R_dist; unfold R_dist in H4; elim (H1 n); elim (H1 m); intros; replace (RiemannInt_SF (vn n) - RiemannInt_SF (vn m)) with (RiemannInt_SF (vn n) + -1 * RiemannInt_SF (vn m)); [ idtac | ring ]; rewrite <- StepFun_P30; apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (vn n) (vn m)))))).",
                        "VernacExtend",
                        "c2dc6954bef06f9915ab0e4918da0f9902aa5bcd"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P34; assumption.",
                        "VernacExtend",
                        "302ecaef1f1f15c052ed5bdffc68be45ba214735"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 (wn n) (wn m)))).",
                        "VernacExtend",
                        "90166a96794664ff42ce962f90a4172e8cb1178d"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P37; try assumption.",
                        "VernacExtend",
                        "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
                    ]
                },
                {
                    "command": [
                        "intros; simpl; apply Rle_trans with (Rabs (vn n x - f x) + Rabs (f x - vn m x)).",
                        "VernacExtend",
                        "c108af52dfdf5160434d70154e22f0fe45afb6e1"
                    ]
                },
                {
                    "command": [
                        "replace (vn n x + -1 * vn m x) with (vn n x - f x + (f x - vn m x)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "0873779caf2db15ec5723ff9cd26cdcc18fedfc5"
                    ]
                },
                {
                    "command": [
                        "assert (H12 : Rmin a b = a).",
                        "VernacExtend",
                        "373ac23251973a721181048ddb952796dfdf4a96"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with H0; reflexivity.",
                        "VernacExtend",
                        "14444f763a24333062455ab7e4bf7a971dee5be3"
                    ]
                },
                {
                    "command": [
                        "assert (H13 : Rmax a b = b).",
                        "VernacExtend",
                        "b34bd47e751b7464173a2f3a6f0c62f3fae8145d"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with H0; reflexivity.",
                        "VernacExtend",
                        "dc1ada9e3bf4a0b61bbcbd0fecea113081796ff6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H12 in H11; rewrite <- H13 in H11 at 2; rewrite Rmult_1_l; apply Rplus_le_compat.",
                        "VernacExtend",
                        "6ed05a8706bf195bc15130de3fb3250fd390e86e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H9.",
                        "VernacExtend",
                        "19d3193144e24236fe8231c8bff101815760b4a4"
                    ]
                },
                {
                    "command": [
                        "elim H11; intros; split; left; assumption.",
                        "VernacExtend",
                        "81ff182b30b134490fa00086a8644f727a865b56"
                    ]
                },
                {
                    "command": [
                        "apply H7.",
                        "VernacExtend",
                        "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
                    ]
                },
                {
                    "command": [
                        "elim H11; intros; split; left; assumption.",
                        "VernacExtend",
                        "81ff182b30b134490fa00086a8644f727a865b56"
                    ]
                },
                {
                    "command": [
                        "rewrite StepFun_P30; rewrite Rmult_1_l; apply Rlt_trans with (un n + un m).",
                        "VernacExtend",
                        "e3f833f030aa8bd2d81bab05b80b35584570ce03"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (RiemannInt_SF (wn n)) + Rabs (RiemannInt_SF (wn m))).",
                        "VernacExtend",
                        "24eba5f35ef03196408e75337b267e70b0cae25e"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat; apply RRle_abs.",
                        "VernacExtend",
                        "fcb1d0f9e584feb80212ac1141175f177af2da4e"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat; assumption.",
                        "VernacExtend",
                        "f1712e3b676cd8342c4fdcede2aebce6290d9ab6"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (un n) + Rabs (un m)).",
                        "VernacExtend",
                        "3b7480035127bdb4134d39004754ac4721ad59c6"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat; apply RRle_abs.",
                        "VernacExtend",
                        "fcb1d0f9e584feb80212ac1141175f177af2da4e"
                    ]
                },
                {
                    "command": [
                        "replace (pos (un n)) with (un n - 0); [ idtac | ring ]; replace (pos (un m)) with (un m - 0); [ idtac | ring ]; rewrite (double_var eps); apply Rplus_lt_compat; apply H4; assumption.",
                        "VernacExtend",
                        "0a5b7ad36e76c48f0cdbfd12b087a2a35da9c268"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P3",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Rle_dec a b) as [Hle|Hnle].",
                        "VernacExtend",
                        "dae91af41ad2fc59337ead6f8e468f1db9e2e1cc"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P2 with f un wn; assumption.",
                        "VernacExtend",
                        "a709603dc5706a83615f80ee2a1b5194dfc6b4cf"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : b <= a); auto with real.",
                        "VernacExtend",
                        "0cba64910393650e3afdbdee37bacc425c36aa90"
                    ]
                },
                {
                    "command": [
                        "set (vn' := fun n:nat => mkStepFun (StepFun_P6 (pre (vn n)))); set (wn' := fun n:nat => mkStepFun (StepFun_P6 (pre (wn n)))); assert (H2 : forall n:nat, (forall t:R, Rmin b a <= t <= Rmax b a -> Rabs (f t - vn' n t) <= wn' n t) /\\ Rabs (RiemannInt_SF (wn' n)) < un n).",
                        "VernacExtend",
                        "dbf927e7da7f3b15b361e3a1b16822fc2d243c01"
                    ]
                },
                {
                    "command": [
                        "intro; elim (H0 n); intros; split.",
                        "VernacExtend",
                        "fc7bdc5b4115df3496d22e043cb4ea4df226038d"
                    ]
                },
                {
                    "command": [
                        "intros t (H4,H5); apply (H2 t); split; [ apply Rle_trans with (Rmin b a); try assumption; right; unfold Rmin | apply Rle_trans with (Rmax b a); try assumption; right; unfold Rmax ]; decide (Rle_dec a b) with Hnle; decide (Rle_dec b a) with H1; reflexivity.",
                        "VernacExtend",
                        "525f5ad4416784de68b71939e4709d494f645eca"
                    ]
                },
                {
                    "command": [
                        "generalize H3; unfold RiemannInt_SF; destruct (Rle_dec a b) as [Hleab|Hnleab]; destruct (Rle_dec b a) as [Hle'|Hnle']; unfold wn'; intros; (replace (Int_SF (subdivision_val (mkStepFun (StepFun_P6 (pre (wn n))))) (subdivision (mkStepFun (StepFun_P6 (pre (wn n)))))) with (Int_SF (subdivision_val (wn n)) (subdivision (wn n))); [ idtac | apply StepFun_P17 with (fe (wn n)) a b; [ apply StepFun_P1 | apply StepFun_P2; apply (StepFun_P1 (mkStepFun (StepFun_P6 (pre (wn n))))) ] ]).",
                        "VernacExtend",
                        "bcf20a3800d4550f4cd8dda8641a10c534936b5e"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp; apply H4.",
                        "VernacExtend",
                        "9d3af0d2c16bce7723ab7386c5c5568ad17d985e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp in H4; apply H4.",
                        "VernacExtend",
                        "690010495904ee33dd5837c611609821857d5273"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := RiemannInt_P2 _ _ _ _ H H1 H2); elim H3; intros x p; exists (- x); unfold Un_cv; unfold Un_cv in p; intros; elim (p _ H4); intros; exists x0; intros; generalize (H5 _ H6); unfold R_dist, RiemannInt_SF; destruct (Rle_dec b a) as [Hle'|Hnle']; destruct (Rle_dec a b) as [Hle''|Hnle'']; intros.",
                        "VernacExtend",
                        "e5ac840b3455566e1f11ea6b2b01899ba10f78d7"
                    ]
                },
                {
                    "command": [
                        "elim Hnle; assumption.",
                        "VernacExtend",
                        "2657f835822b81d5c3920cb0c5325ddca068c321"
                    ]
                },
                {
                    "command": [
                        "unfold vn' in H7; replace (Int_SF (subdivision_val (vn n)) (subdivision (vn n))) with (Int_SF (subdivision_val (mkStepFun (StepFun_P6 (pre (vn n))))) (subdivision (mkStepFun (StepFun_P6 (pre (vn n)))))); [ unfold Rminus; rewrite Ropp_involutive; rewrite <- Rabs_Ropp; rewrite Ropp_plus_distr; rewrite Ropp_involutive; apply H7 | symmetry ; apply StepFun_P17 with (fe (vn n)) a b; [ apply StepFun_P1 | apply StepFun_P2; apply (StepFun_P1 (mkStepFun (StepFun_P6 (pre (vn n))))) ] ].",
                        "VernacExtend",
                        "edb8523d214bf8215415c681d8b7d40323e78141"
                    ]
                },
                {
                    "command": [
                        "elim Hnle'; assumption.",
                        "VernacExtend",
                        "8c0778fa836421aeaeee8a4cde326ec7363698a3"
                    ]
                },
                {
                    "command": [
                        "elim Hnle'; assumption.",
                        "VernacExtend",
                        "8c0778fa836421aeaeee8a4cde326ec7363698a3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_exists",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "intros f; intros; apply RiemannInt_P3 with f un (fun n:nat => proj1_sig (phi_sequence_prop un pr n)); [ apply H | intro; apply (proj2_sig (phi_sequence_prop un pr n)) ].",
                        "VernacExtend",
                        "ed703f8a2aa2b7175633599750709cb6c31a97bf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P4",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; intros f; intros; assert (H3 : 0 < eps / 3).",
                        "VernacExtend",
                        "b5ad2b9e3d9584495cc0019d6612d67c5ecb8e58"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
                    ]
                },
                {
                    "command": [
                        "elim (H _ H3); clear H; intros N0 H; elim (H0 _ H3); clear H0; intros N1 H0; elim (H1 _ H3); clear H1; intros N2 H1; set (N := max (max N0 N1) N2); exists N; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi_sequence vn pr2 n) - RiemannInt_SF (phi_sequence un pr1 n)) + Rabs (RiemannInt_SF (phi_sequence un pr1 n) - l)).",
                        "VernacExtend",
                        "ed2e129cd1d98d0b7d6a184f00b20391e6d8d2a4"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt_SF (phi_sequence vn pr2 n) - l) with (RiemannInt_SF (phi_sequence vn pr2 n) - RiemannInt_SF (phi_sequence un pr1 n) + (RiemannInt_SF (phi_sequence un pr1 n) - l)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "0c34400b09d31eba1c2645cfddffe840277ea30f"
                    ]
                },
                {
                    "command": [
                        "replace eps with (2 * (eps / 3) + eps / 3).",
                        "VernacExtend",
                        "f876e8bd18747f7840f2ad4de8b736b9db844040"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat.",
                        "VernacExtend",
                        "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
                    ]
                },
                {
                    "command": [
                        "elim (phi_sequence_prop vn pr2 n); intros psi_vn H5; elim (phi_sequence_prop un pr1 n); intros psi_un H6; replace (RiemannInt_SF (phi_sequence vn pr2 n) - RiemannInt_SF (phi_sequence un pr1 n)) with (RiemannInt_SF (phi_sequence vn pr2 n) + -1 * RiemannInt_SF (phi_sequence un pr1 n)); [ idtac | ring ]; rewrite <- StepFun_P30.",
                        "VernacExtend",
                        "baf257ba826e76ee32270cfbcc3050a8fc324eb4"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec a b) as [Hle|Hnle].",
                        "VernacExtend",
                        "f3416f93eef3cf68aee486729e511d50cd6262f3"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (phi_sequence vn pr2 n) (phi_sequence un pr1 n)))))).",
                        "VernacExtend",
                        "0005aeeed42a0e2ed8a2ec206d12391bf5949ac8"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P34; assumption.",
                        "VernacExtend",
                        "302ecaef1f1f15c052ed5bdffc68be45ba214735"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 psi_un psi_vn))).",
                        "VernacExtend",
                        "f0988d8aec10da81ed8a0f188fed44fd74e3a2de"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P37; try assumption; intros; simpl; rewrite Rmult_1_l; apply Rle_trans with (Rabs (phi_sequence vn pr2 n x - f x) + Rabs (f x - phi_sequence un pr1 n x)).",
                        "VernacExtend",
                        "00b40f3f46f41dd111defb0f6aef88a710f0c0e6"
                    ]
                },
                {
                    "command": [
                        "replace (phi_sequence vn pr2 n x + -1 * phi_sequence un pr1 n x) with (phi_sequence vn pr2 n x - f x + (f x - phi_sequence un pr1 n x)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "91a61029ec77a54f76422e3ad7de9b4fe9a08c60"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : Rmin a b = a).",
                        "VernacExtend",
                        "16ba28922085f1366de21d7def67b34b7b23e825"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with Hle; reflexivity.",
                        "VernacExtend",
                        "54a9cd0a0233957cddbe2ef1db48f27e5a051ccd"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : Rmax a b = b).",
                        "VernacExtend",
                        "2c0060866e2f0b0d35d924dfb7ae3c9c2f541f99"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with Hle; reflexivity.",
                        "VernacExtend",
                        "150c50d95cc57867c06f4d3f12dbe0dfa5ea6eb6"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rplus_comm (psi_un x)); apply Rplus_le_compat.",
                        "VernacExtend",
                        "b846e39e0f6b03930d74c0867ff708f4c6bfa123"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; destruct H5 as (H8,H9); apply H8.",
                        "VernacExtend",
                        "a8925e472915bb758ce341aa08799fcfcd195fe7"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H11; elim H7; intros; split; left; assumption.",
                        "VernacExtend",
                        "33db93f9786fb780a91fc29faee7fb42d1c2f834"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; apply H8.",
                        "VernacExtend",
                        "56f13083a8d0c048f92ab6dfcfb3e0a423edc260"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H11; elim H7; intros; split; left; assumption.",
                        "VernacExtend",
                        "33db93f9786fb780a91fc29faee7fb42d1c2f834"
                    ]
                },
                {
                    "command": [
                        "rewrite StepFun_P30; rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat.",
                        "VernacExtend",
                        "8c84bd8ff1b313fcc0542e21b0305084a78f72e6"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (pos (un n)).",
                        "VernacExtend",
                        "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF psi_un)).",
                        "VernacExtend",
                        "6368ca06a0a9c0ee4a22dea307fa1f66e89fb90c"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (pos (un n)) with (Rabs (un n - 0)); [ apply H; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_trans with (max N0 N1); apply le_max_l | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (un n)) ].",
                        "VernacExtend",
                        "805f03c7277f399746cb073932c00e8d288f9d9d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (pos (vn n)).",
                        "VernacExtend",
                        "37df5b47c884905a7407992d6e2e2d08117d7b20"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF psi_vn)).",
                        "VernacExtend",
                        "9653b30e7d5f79ed8d1f7adc62b0d24612a91d05"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs; assumption.",
                        "VernacExtend",
                        "6b3aee25e8d2f3523cc6d59c1a37121f75299b27"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (pos (vn n)) with (Rabs (vn n - 0)); [ apply H0; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_trans with (max N0 N1); [ apply le_max_r | apply le_max_l ] | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (vn n)) ].",
                        "VernacExtend",
                        "8e631454750b95d2ed069cae43a40d452b34cf01"
                    ]
                },
                {
                    "command": [
                        "rewrite StepFun_P39; rewrite Rabs_Ropp; apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 (-1) (phi_sequence vn pr2 n) (phi_sequence un pr1 n))))))))).",
                        "VernacExtend",
                        "10ac3e74933a44593018d264fbddbb0311b93112"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P34; try auto with real.",
                        "VernacExtend",
                        "a4e25ecc14b61638a2451cf7c2d44ad269aa46b6"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 1 psi_vn psi_un)))))).",
                        "VernacExtend",
                        "9c2fc001900b9ed329c73d589a596bb3a12d4520"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P37.",
                        "VernacExtend",
                        "10e4d07c0d3b3c6442e9920725911861218b096b"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "intros; simpl; rewrite Rmult_1_l; apply Rle_trans with (Rabs (phi_sequence vn pr2 n x - f x) + Rabs (f x - phi_sequence un pr1 n x)).",
                        "VernacExtend",
                        "0a0c8405c78607eaee73fe945c56492f1adbef23"
                    ]
                },
                {
                    "command": [
                        "replace (phi_sequence vn pr2 n x + -1 * phi_sequence un pr1 n x) with (phi_sequence vn pr2 n x - f x + (f x - phi_sequence un pr1 n x)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "91a61029ec77a54f76422e3ad7de9b4fe9a08c60"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : Rmin a b = b).",
                        "VernacExtend",
                        "0af78acd1346d67fc706b36fb9767b07154e3503"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with Hnle; reflexivity.",
                        "VernacExtend",
                        "e41d7bb2bb845a289c4ea72b96377727bd370eb0"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : Rmax a b = a).",
                        "VernacExtend",
                        "3673febf959d0e8fc805bf0c66f4d6038406c49b"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with Hnle; reflexivity.",
                        "VernacExtend",
                        "1e3801bab9f44191a09654eafd3fee3947c6db75"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat.",
                        "VernacExtend",
                        "7a69898b466991bee51047e3a2fc51c3b80fbd93"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; elim H5; intros; apply H8.",
                        "VernacExtend",
                        "7f4e6fbcf5e867d815c72e88d66ccfae9c561f6a"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H11; elim H7; intros; split; left; assumption.",
                        "VernacExtend",
                        "33db93f9786fb780a91fc29faee7fb42d1c2f834"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; apply H8.",
                        "VernacExtend",
                        "56f13083a8d0c048f92ab6dfcfb3e0a423edc260"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H11; elim H7; intros; split; left; assumption.",
                        "VernacExtend",
                        "33db93f9786fb780a91fc29faee7fb42d1c2f834"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 1 psi_vn psi_un))))))) ; rewrite <- StepFun_P39; rewrite StepFun_P30; rewrite Rmult_1_l; rewrite double; rewrite Ropp_plus_distr; apply Rplus_lt_compat.",
                        "VernacExtend",
                        "bfdb3e99dcb593556a1909cc24c335fa07edce77"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (pos (vn n)).",
                        "VernacExtend",
                        "37df5b47c884905a7407992d6e2e2d08117d7b20"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF psi_vn)).",
                        "VernacExtend",
                        "9653b30e7d5f79ed8d1f7adc62b0d24612a91d05"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; apply RRle_abs.",
                        "VernacExtend",
                        "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (pos (vn n)) with (Rabs (vn n - 0)); [ apply H0; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_trans with (max N0 N1); [ apply le_max_r | apply le_max_l ] | unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (vn n)) ].",
                        "VernacExtend",
                        "56d39b968aabdcc0a71db8b26fb3f57f32ae42b5"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (pos (un n)).",
                        "VernacExtend",
                        "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF psi_un)).",
                        "VernacExtend",
                        "6368ca06a0a9c0ee4a22dea307fa1f66e89fb90c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; apply RRle_abs; assumption.",
                        "VernacExtend",
                        "dd8647b31f1d9bb212768d8e6b7bbaca2878dbdb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (pos (un n)) with (Rabs (un n - 0)); [ apply H; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_trans with (max N0 N1); apply le_max_l | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (un n)) ].",
                        "VernacExtend",
                        "805f03c7277f399746cb073932c00e8d288f9d9d"
                    ]
                },
                {
                    "command": [
                        "apply H1; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_r.",
                        "VernacExtend",
                        "c24caf5d222a8793527dbfb79ef1cd55dde22b51"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with 3; [ unfold Rdiv; rewrite Rmult_plus_distr_l; do 2 rewrite (Rmult_comm 3); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
                        "VernacExtend",
                        "d5fc6e7e3279ce291cc825d25d97f8b656807ff2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RinvN_pos",
            "line_nb": 134,
            "steps": [
                {
                    "command": [
                        "intro; apply Rinv_0_lt_compat; apply Rplus_le_lt_0_compat; [ apply pos_INR | apply Rlt_0_1 ].",
                        "VernacExtend",
                        "491d2980eca3d18aff4ece4643c4253cb6a00a4a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RinvN_cv",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "unfold Un_cv; intros; assert (H0 := archimed (/ eps)); elim H0; clear H0; intros; assert (H2 : (0 <= up (/ eps))%Z).",
                        "VernacExtend",
                        "b5e4a9d1630e1687d363b8dd0141a1677d7c53e0"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; left; apply Rlt_trans with (/ eps); [ apply Rinv_0_lt_compat; assumption | assumption ].",
                        "VernacExtend",
                        "316856efd6b3dbdc083a44a9f9fbc38cdb8274ec"
                    ]
                },
                {
                    "command": [
                        "elim (IZN _ H2); intros; exists x; intros; unfold R_dist; simpl; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; assert (H5 : 0 < INR n + 1).",
                        "VernacExtend",
                        "36932a4ac9c95b365862081810cf0e83a7dfa912"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat; [ apply pos_INR | apply Rlt_0_1 ].",
                        "VernacExtend",
                        "1acd9b5f3e7837b67b7c1a8ddb6ff74020e01b2b"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right; [ idtac | left; change (0 < / (INR n + 1)); apply Rinv_0_lt_compat; assumption ]; apply Rle_lt_trans with (/ (INR x + 1)).",
                        "VernacExtend",
                        "6cf485971e723394b1075c7fa30d9f441e7a34b6"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_le_contravar.",
                        "VernacExtend",
                        "28ea2dd655f9d8c890013606f785cc34c54c4a71"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat; [ apply pos_INR | apply Rlt_0_1 ].",
                        "VernacExtend",
                        "1acd9b5f3e7837b67b7c1a8ddb6ff74020e01b2b"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_r; apply le_INR; apply H4.",
                        "VernacExtend",
                        "cb98a54d8ee0392ff0fe0213228ce19446f21cd8"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rinv_involutive eps).",
                        "VernacExtend",
                        "3255d4eb7914a1b4381d0b1474bd252e750a2970"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat; [ apply pos_INR | apply Rlt_0_1 ].",
                        "VernacExtend",
                        "1acd9b5f3e7837b67b7c1a8ddb6ff74020e01b2b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (INR x); [ rewrite INR_IZR_INZ; rewrite <- H3; apply H0 | pattern (INR x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1 ].",
                        "VernacExtend",
                        "a9a00fb20fe24c839c92779b201848d595ef8ce7"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H6 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "17d6bc08ceabbb751a93f39804561b1ad93c32d6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_integrable_ext",
            "line_nb": 155,
            "steps": [
                {
                    "command": [
                        "intros f g a b fg rif eps; destruct (rif eps) as [phi [psi [P1 P2]]].",
                        "VernacExtend",
                        "d7cb89086c5692b873f25b174e764abd8dbb48b4"
                    ]
                },
                {
                    "command": [
                        "exists phi; exists psi;split;[ | assumption ].",
                        "VernacExtend",
                        "f4f8ba244f16907d377ec454919ecef7a68b7ede"
                    ]
                },
                {
                    "command": [
                        "intros t intt; rewrite <- fg;[ | assumption].",
                        "VernacExtend",
                        "86f84e2316901cf93574430081ae5eadb31c9f27"
                    ]
                },
                {
                    "command": [
                        "apply P1; assumption.",
                        "VernacExtend",
                        "298a118599e93295a426f85982a084507913308d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P5",
            "line_nb": 162,
            "steps": [
                {
                    "command": [
                        "intros; unfold RiemannInt; case (RiemannInt_exists pr1 RinvN RinvN_cv) as (x,HUn); case (RiemannInt_exists pr2 RinvN RinvN_cv) as (x0,HUn0); eapply UL_sequence; [ apply HUn | apply RiemannInt_P4 with pr2 RinvN; apply RinvN_cv || assumption ].",
                        "VernacExtend",
                        "c1b90f67fc9e11ea0d8f562db30a9cc986b71ab2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maxN",
            "line_nb": 165,
            "steps": [
                {
                    "command": [
                        "intros; set (I := fun n:nat => a + INR n * del < b); assert (H0 : exists n : nat, I n).",
                        "VernacExtend",
                        "6ccc9f61a98fc8c8fb42d0deb1537c455c0b7142"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat; unfold I; rewrite Rmult_0_l; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "f01a135fa4f6c0a75794afe888418126f29a2a73"
                    ]
                },
                {
                    "command": [
                        "cut (Nbound I).",
                        "VernacExtend",
                        "1a705c6645be8122edac50d9047e71df38c5c6bb"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H2 := Nzorn H0 H1); elim H2; intros x p; exists x; elim p; intros; split.",
                        "VernacExtend",
                        "e886627bd8d3635695d742d5dd73ab44e4d7b095"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T (a + INR (S x) * del) b) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "c2f694d0519b132cea9a583baf5205ab55e3e7d9"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := H4 (S x) Hlt); elim (le_Sn_n _ H5).",
                        "VernacExtend",
                        "dda703c099bad8341d9eece732cc1247d1108884"
                    ]
                },
                {
                    "command": [
                        "right; symmetry ; assumption.",
                        "VernacExtend",
                        "619229e235b2e1c46f07c7fda7dcc511f49ea7b6"
                    ]
                },
                {
                    "command": [
                        "left; apply Hgt.",
                        "VernacExtend",
                        "7913cad9687254c1e7d2142068b28a006e2fea73"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : 0 <= (b - a) / del).",
                        "VernacExtend",
                        "0ac0fe29eecb9c82f63a48a03e2552e90f9426ab"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_le_pos; [ apply Rge_le; apply Rge_minus; apply Rle_ge; left; apply H | left; apply Rinv_0_lt_compat; apply (cond_pos del) ].",
                        "VernacExtend",
                        "7cc9cdd74acb9bf09629348d6b824f416c145cd1"
                    ]
                },
                {
                    "command": [
                        "elim (archimed ((b - a) / del)); intros; assert (H4 : (0 <= up ((b - a) / del))%Z).",
                        "VernacExtend",
                        "76a9f1d4d24b1f150d8657124fe8dd1afc5906f9"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; simpl; left; apply Rle_lt_trans with ((b - a) / del); assumption.",
                        "VernacExtend",
                        "200a915b18024ddc628e0b980cd1254ad19a6070"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := IZN _ H4); elim H5; clear H5; intros N H5; unfold Nbound; exists N; intros; unfold I in H6; apply INR_le; rewrite H5 in H2; rewrite <- INR_IZR_INZ in H2; left; apply Rle_lt_trans with ((b - a) / del); try assumption; apply Rmult_le_reg_l with (pos del); [ apply (cond_pos del) | unfold Rdiv; rewrite <- (Rmult_comm (/ del)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite Rmult_comm; apply Rplus_le_reg_l with a; replace (a + (b - a)) with b; [ left; assumption | ring ] | assert (H7 := cond_pos del); red; intro; rewrite H8 in H7; elim (Rlt_irrefl _ H7) ] ].",
                        "VernacExtend",
                        "0499481c525211534baa84eb5badc112f6220802"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Heine_cor1",
            "line_nb": 184,
            "steps": [
                {
                    "command": [
                        "intro f; intros; set (E := fun l:R => 0 < l <= b - a /\\ (forall x y:R, a <= x <= b -> a <= y <= b -> Rabs (x - y) < l -> Rabs (f x - f y) < eps)); assert (H1 : bound E).",
                        "VernacExtend",
                        "8672fff38db4989af096f64cab268002309b1c49"
                    ]
                },
                {
                    "command": [
                        "unfold bound; exists (b - a); unfold is_upper_bound; intros; unfold E in H1; elim H1; clear H1; intros H1 _; elim H1; intros; assumption.",
                        "VernacExtend",
                        "65c04f1845fb0d663b530e32fd60bf50fd2d241c"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : exists x : R, E x).",
                        "VernacExtend",
                        "99120bee9cba46b508ca6b8e87df6d203c973e5c"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := Heine f (fun x:R => a <= x <= b) (compact_P3 a b) H0 eps); elim H2; intros; exists (Rmin x (b - a)); unfold E; split; [ split; [ unfold Rmin; case (Rle_dec x (b - a)); intro; [ apply (cond_pos x) | apply Rlt_Rminus; assumption ] | apply Rmin_r ] | intros; apply H3; try assumption; apply Rlt_le_trans with (Rmin x (b - a)); [ assumption | apply Rmin_l ] ].",
                        "VernacExtend",
                        "475d8b683d4cebc85f55892d25730b2b898000e9"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := completeness E H1 H2); elim H3; intros x p; cut (0 < x <= b - a).",
                        "VernacExtend",
                        "55ce17ba55bce02fc4ab96a5c0b52ba6a0d7444e"
                    ]
                },
                {
                    "command": [
                        "intro; elim H4; clear H4; intros; exists (mkposreal _ H4); split.",
                        "VernacExtend",
                        "bdaf4e554b71c315563318a471081b007b578285"
                    ]
                },
                {
                    "command": [
                        "apply H5.",
                        "VernacExtend",
                        "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p; elim p; intros; unfold is_upper_bound in H6; set (D := Rabs (x0 - y)).",
                        "VernacExtend",
                        "c1a7d86e2b6fed999f5da5c4de8c57593b68ce6d"
                    ]
                },
                {
                    "command": [
                        "assert (H11: ((exists y : R, D < y /\\ E y) \\/ (forall y : R, not (D < y /\\ E y)) -> False) -> False).",
                        "VernacExtend",
                        "7b48cc79d3bc5fd048097df0b3399937d2ec2e16"
                    ]
                },
                {
                    "command": [
                        "clear; intros H; apply H.",
                        "VernacExtend",
                        "adbbdadcb19dec7b6c2e63cfa32ebeae2fdb3230"
                    ]
                },
                {
                    "command": [
                        "right; intros y0 H0; apply H.",
                        "VernacExtend",
                        "c86a78693db0e3ca923b2da47e0d6e2a57c49913"
                    ]
                },
                {
                    "command": [
                        "left; now exists y0.",
                        "VernacExtend",
                        "aa2815d00d773f443a4d13c7f00c3c5eebf0e9c0"
                    ]
                },
                {
                    "command": [
                        "apply Rnot_le_lt; intros H30.",
                        "VernacExtend",
                        "20508be2c78f5136d070c6e17926fcc427bf0d91"
                    ]
                },
                {
                    "command": [
                        "apply H11; clear H11; intros H11.",
                        "VernacExtend",
                        "3e245b8737259b63a84184c2f2f7151f8bab365c"
                    ]
                },
                {
                    "command": [
                        "revert H30; apply Rlt_not_le.",
                        "VernacExtend",
                        "26accdea276b507bd2f9f8aa61d46fd750d6344d"
                    ]
                },
                {
                    "command": [
                        "destruct H11 as [H11|H12].",
                        "VernacExtend",
                        "a40962c2c4455041753acb1136c05a4de437369c"
                    ]
                },
                {
                    "command": [
                        "elim H11; intros; elim H12; clear H12; intros; unfold E in H13; elim H13; intros; apply H15; assumption.",
                        "VernacExtend",
                        "97b0e14d77fbf5b3716377de9b8fec6e14aff35b"
                    ]
                },
                {
                    "command": [
                        "assert (H13 : is_upper_bound E D).",
                        "VernacExtend",
                        "10135751db2c3f079bce6e52e4310b057ffd48c3"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound; intros; assert (H14 := H12 x1); apply Rnot_lt_le; contradict H14; now split.",
                        "VernacExtend",
                        "fe07af829400b6e3d5a0a3f13aecc3121aa4cd1e"
                    ]
                },
                {
                    "command": [
                        "assert (H14 := H7 _ H13); elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H14 H10)).",
                        "VernacExtend",
                        "ebb80aa186033eae8292c5b99fd5deceb4900400"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p; unfold is_upper_bound in p; elim p; clear p; intros; split.",
                        "VernacExtend",
                        "4d51bd63b6b748405e138b8e9483f688c396c2b2"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros; assert (H7 := H4 _ H6); unfold E in H6; elim H6; clear H6; intros H6 _; elim H6; intros; apply Rlt_le_trans with x0; assumption.",
                        "VernacExtend",
                        "18669c88c23c71cf7e21968beaf26c0f4ff7423d"
                    ]
                },
                {
                    "command": [
                        "apply H5; intros; unfold E in H6; elim H6; clear H6; intros H6 _; elim H6; intros; assumption.",
                        "VernacExtend",
                        "5a26cec85d25a7dcfc2638590834c1c7224f0cb8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Heine_cor2",
            "line_nb": 209,
            "steps": [
                {
                    "command": [
                        "intro f; intros; destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "9e405b656714206eedf7deb1aa5350facdeb2656"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := Heine_cor1 Hlt H eps); elim H0; intros x p; exists x; elim p; intros; apply H2; assumption.",
                        "VernacExtend",
                        "635c9a76923ee48df7853f8d8bfb2716676f1cda"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ Rlt_0_1); intros; assert (H3 : x = y); [ elim H0; elim H1; intros; rewrite Heq in H3, H5; apply Rle_antisym; apply Rle_trans with b; assumption | rewrite H3; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (cond_pos eps) ].",
                        "VernacExtend",
                        "1fe3db0e0cde4fa6eef81ba38debd9fe7e9dce1e"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ Rlt_0_1); intros; elim H0; intros; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ (Rle_trans _ _ _ H3 H4) Hgt)).",
                        "VernacExtend",
                        "a9e410e2c9c362eead33ab07eb2ab16133f819e5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubEqui_P1",
            "line_nb": 215,
            "steps": [
                {
                    "command": [
                        "intros; unfold SubEqui; case (maxN del h); intros; reflexivity.",
                        "VernacExtend",
                        "e1a8a5edcb1fba52a4b50c924279ef78a9111e28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubEqui_P2",
            "line_nb": 218,
            "steps": [
                {
                    "command": [
                        "intros; unfold SubEqui; destruct (maxN del h)as (x,_).",
                        "VernacExtend",
                        "9a3f89076fd0640ba26467acad76758ec65566a4"
                    ]
                },
                {
                    "command": [
                        "cut (forall (x:nat) (a:R) (del:posreal), pos_Rl (SubEquiN (S x) a b del) (pred (Rlength (SubEquiN (S x) a b del))) = b); [ intro; apply H | simple induction x0; [ intros; reflexivity | intros; change (pos_Rl (SubEquiN (S n) (a0 + del0) b del0) (pred (Rlength (SubEquiN (S n) (a0 + del0) b del0))) = b) ; apply H ] ].",
                        "VernacExtend",
                        "142fdec88be3d1f805cfae3015f8478b52ecb33c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubEqui_P3",
            "line_nb": 222,
            "steps": [
                {
                    "command": [
                        "simple induction N; intros; [ reflexivity | simpl; rewrite H; reflexivity ].",
                        "VernacExtend",
                        "8153aad2b260a71fe5f0b39c00907004ddad3a70"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubEqui_P4",
            "line_nb": 225,
            "steps": [
                {
                    "command": [
                        "simple induction N; [ intros; inversion H; [ simpl; ring | elim (le_Sn_O _ H1) ] | intros; induction i as [| i Hreci]; [ simpl; ring | change (pos_Rl (SubEquiN (S n) (a + del) b del) i = a + INR (S i) * del) ; rewrite H; [ rewrite S_INR; ring | apply lt_S_n; apply H0 ] ] ].",
                        "VernacExtend",
                        "38636119ecb813ce4f0f751191a56bd37cfec080"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubEqui_P5",
            "line_nb": 228,
            "steps": [
                {
                    "command": [
                        "intros; unfold SubEqui; apply SubEqui_P3.",
                        "VernacExtend",
                        "3dc15d7d4cb5b7c065c7cef6869b165f5db30695"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubEqui_P6",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "intros; unfold SubEqui; apply SubEqui_P4; assumption.",
                        "VernacExtend",
                        "d0a08818e0c583e1f7b3057948e88fd1a364982b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubEqui_P8",
            "line_nb": 246,
            "steps": [
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "pattern a at 1; rewrite <- (SubEqui_P1 del h); apply RList_P5.",
                        "VernacExtend",
                        "e1678bec069ce5f487e50543ff2c9b14b504e0f7"
                    ]
                },
                {
                    "command": [
                        "apply SubEqui_P7.",
                        "VernacExtend",
                        "491def7508342385ecc457ebf49c8c93c7b12e96"
                    ]
                },
                {
                    "command": [
                        "elim (RList_P3 (SubEqui del h) (pos_Rl (SubEqui del h) i)); intros; apply H1; exists i; split; [ reflexivity | assumption ].",
                        "VernacExtend",
                        "ef198cec44ea381e4ff93661536b7a11b0e0f9cf"
                    ]
                },
                {
                    "command": [
                        "pattern b at 2; rewrite <- (SubEqui_P2 del h); apply RList_P7; [ apply SubEqui_P7 | elim (RList_P3 (SubEqui del h) (pos_Rl (SubEqui del h) i)); intros; apply H1; exists i; split; [ reflexivity | assumption ] ].",
                        "VernacExtend",
                        "2475fd1329d3c6f1ba1d61bab55635a2ccf51d1d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SubEqui_P9",
            "line_nb": 253,
            "steps": [
                {
                    "command": [
                        "intros; apply StepFun_P38; [ apply SubEqui_P7 | apply SubEqui_P1 | apply SubEqui_P2 ].",
                        "VernacExtend",
                        "a2bdecc87dc0ba94235149d793acc0030fe36f8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P7",
            "line_nb": 339,
            "steps": [
                {
                    "command": [
                        "unfold Riemann_integrable; intro f; intros; split with (mkStepFun (StepFun_P4 a a (f a))); split with (mkStepFun (StepFun_P4 a a 0)); split.",
                        "VernacExtend",
                        "e42d932389bcb27230912ceffa13fc6de0f37e1a"
                    ]
                },
                {
                    "command": [
                        "intros; simpl; unfold fct_cte; replace t with a.",
                        "VernacExtend",
                        "de623740ee975ade17085387e94b5853edc6130c"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; right; reflexivity.",
                        "VernacExtend",
                        "b36e7de60369c016b4bb0fedc45be34e93ba5113"
                    ]
                },
                {
                    "command": [
                        "generalize H; unfold Rmin, Rmax; decide (Rle_dec a a) with (Rle_refl a).",
                        "VernacExtend",
                        "e400c7b57a0e9160f3d053068b843194613df100"
                    ]
                },
                {
                    "command": [
                        "intros (?,?); apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "144d00d98752bcbea7f4f5ba65b0b98702a733d5"
                    ]
                },
                {
                    "command": [
                        "rewrite StepFun_P18; rewrite Rmult_0_l; rewrite Rabs_R0; apply (cond_pos eps).",
                        "VernacExtend",
                        "80d2542958345c30e6384c5e5b35d08c1df58f84"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_implies_RiemannInt",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "intros; destruct (total_order_T a b) as [[Hlt| -> ]|Hgt]; [ apply RiemannInt_P6; assumption | apply RiemannInt_P7 | elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)) ].",
                        "VernacExtend",
                        "046f18a903b1fde9816fc88a10ca322b0d28b158"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P9",
            "line_nb": 407,
            "steps": [
                {
                    "command": [
                        "intros; assert (H := RiemannInt_P8 pr pr); apply Rmult_eq_reg_l with 2; [ rewrite Rmult_0_r; rewrite double; pattern (RiemannInt pr) at 2; rewrite H; apply Rplus_opp_r | discrR ].",
                        "VernacExtend",
                        "eb95f034cc89e24e5ced7f92925dff824cfa828c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P10",
            "line_nb": 410,
            "steps": [
                {
                    "command": [
                        "unfold Riemann_integrable; intros f g; intros; destruct (Req_EM_T l 0) as [Heq|Hneq].",
                        "VernacExtend",
                        "17124d13c7a639100a2b25599bb71aa303ebe9cc"
                    ]
                },
                {
                    "command": [
                        "elim (X eps); intros x p; split with x; elim p; intros x0 p0; split with x0; elim p0; intros; split; try assumption; rewrite Heq; intros; rewrite Rmult_0_l; rewrite Rplus_0_r; apply H; assumption.",
                        "VernacExtend",
                        "ce55258a4c50272aa55845dd44d39c1486b2a877"
                    ]
                },
                {
                    "command": [
                        "assert (H : 0 < eps / 2).",
                        "VernacExtend",
                        "d4836348e668957c1aadc63f2fa7422c1f6cce05"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "b485b8a95731f8846932bed2f577801cd11f1146"
                    ]
                },
                {
                    "command": [
                        "assert (H0 : 0 < eps / (2 * Rabs l)).",
                        "VernacExtend",
                        "9d403d1b12c4190ec57694a0ce598a63c1ab8d12"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; apply Rmult_lt_0_compat; [ prove_sup0 | apply Rabs_pos_lt; assumption ] ].",
                        "VernacExtend",
                        "d307957efe401101275ca1df9713bb2db4f00088"
                    ]
                },
                {
                    "command": [
                        "elim (X (mkposreal _ H)); intros x p; elim (X0 (mkposreal _ H0)); intros x0 p0; split with (mkStepFun (StepFun_P28 l x x0)); elim p0; elim p; intros x1 p1 x2 p2.",
                        "VernacExtend",
                        "09420805a15bc59606d662810d90bf600328b1cd"
                    ]
                },
                {
                    "command": [
                        "split with (mkStepFun (StepFun_P28 (Rabs l) x1 x2)); elim p1; elim p2; clear p1 p2 p0 p X X0; intros; split.",
                        "VernacExtend",
                        "b8417fdaab05c491003813e5fe8dd47f319fab8c"
                    ]
                },
                {
                    "command": [
                        "intros; simpl; apply Rle_trans with (Rabs (f t - x t) + Rabs (l * (g t - x0 t))).",
                        "VernacExtend",
                        "308fb765058d98c81ecb34c7e8fbdc8fa19030c9"
                    ]
                },
                {
                    "command": [
                        "replace (f t + l * g t - (x t + l * x0 t)) with (f t - x t + l * (g t - x0 t)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "a45c978453ff1da6a138dd59adf861627e38f029"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat; [ apply H3; assumption | rewrite Rabs_mult; apply Rmult_le_compat_l; [ apply Rabs_pos | apply H1; assumption ] ].",
                        "VernacExtend",
                        "c0089a7a63bbc2e9b6b61d85d8a414c8ad8ba864"
                    ]
                },
                {
                    "command": [
                        "rewrite StepFun_P30; apply Rle_lt_trans with (Rabs (RiemannInt_SF x1) + Rabs (Rabs l * RiemannInt_SF x2)).",
                        "VernacExtend",
                        "f8fac7a2ffc6306f4d44e34da97cb2d45effbf26"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "rewrite (double_var eps); apply Rplus_lt_compat.",
                        "VernacExtend",
                        "dd3002897582f3251627e3b8fbd0c2a8c471071b"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult; rewrite Rabs_Rabsolu; apply Rmult_lt_reg_l with (/ Rabs l).",
                        "VernacExtend",
                        "10bfbcdc9a1363bf283a1b0a4b944d8ce04adbe4"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply Rabs_pos_lt; assumption.",
                        "VernacExtend",
                        "e4c91a40f2fa1c87312f044d164ffed2c6475792"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym; [ rewrite Rmult_1_l; replace (/ Rabs l * (eps / 2)) with (eps / (2 * Rabs l)); [ apply H2 | unfold Rdiv; rewrite Rinv_mult_distr; [ ring | discrR | apply Rabs_no_R0; assumption ] ] | apply Rabs_no_R0; assumption ].",
                        "VernacExtend",
                        "b70f5b4e64c15cae30a84312536800b58eec4db5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P11",
            "line_nb": 430,
            "steps": [
                {
                    "command": [
                        "unfold Un_cv; intro f; intros; intros.",
                        "VernacExtend",
                        "f94c1d30dbafdfc8abe31cfbb3e8e301848b275c"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec a b); intro Hyp.",
                        "VernacExtend",
                        "dbe1923cf0667353612ec74604c3a25f46959a73"
                    ]
                },
                {
                    "command": [
                        "assert (H4 : 0 < eps / 3).",
                        "VernacExtend",
                        "1db1f4bf83af6461836d34084806d7da5b6bbb6a"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
                    ]
                },
                {
                    "command": [
                        "elim (H _ H4); clear H; intros N0 H.",
                        "VernacExtend",
                        "5b0a82157f3970b06619d67a8ac5209b93221a23"
                    ]
                },
                {
                    "command": [
                        "elim (H2 _ H4); clear H2; intros N1 H2.",
                        "VernacExtend",
                        "22a45fdcf86de63b7070e51a5b3df7c6616686be"
                    ]
                },
                {
                    "command": [
                        "set (N := max N0 N1); exists N; intros; unfold R_dist.",
                        "VernacExtend",
                        "b67f8d3fefb27aaa34e7eee46fa6352d1b74bb6d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n)) + Rabs (RiemannInt_SF (phi1 n) - l)).",
                        "VernacExtend",
                        "200c0da7b2285e5a938ec5750f4002fa726997a4"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt_SF (phi2 n) - l) with (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n) + (RiemannInt_SF (phi1 n) - l)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "99004aa43bef87c29e63abd9a33c116c97a564c9"
                    ]
                },
                {
                    "command": [
                        "replace eps with (2 * (eps / 3) + eps / 3).",
                        "VernacExtend",
                        "f876e8bd18747f7840f2ad4de8b736b9db844040"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat.",
                        "VernacExtend",
                        "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n)) with (RiemannInt_SF (phi2 n) + -1 * RiemannInt_SF (phi1 n)); [ idtac | ring ].",
                        "VernacExtend",
                        "71cfadb5f070cc8753f50e4b079b4574e0200710"
                    ]
                },
                {
                    "command": [
                        "rewrite <- StepFun_P30.",
                        "VernacExtend",
                        "30fa5d9949a9fdc9f6349de0f2b7cb5c90cd3a26"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P28 (-1) (phi2 n) (phi1 n)))))).",
                        "VernacExtend",
                        "7beff1474769ae3f100d0e304977037ced017b3d"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P34; assumption.",
                        "VernacExtend",
                        "302ecaef1f1f15c052ed5bdffc68be45ba214735"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P28 1 (psi1 n) (psi2 n)))).",
                        "VernacExtend",
                        "670457cff0381951daec687be61a66da06a41157"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P37; try assumption; intros; simpl; rewrite Rmult_1_l.",
                        "VernacExtend",
                        "b791695ba8f25eb053507ac076d5cb72bca69c86"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs (phi2 n x - f x) + Rabs (f x - phi1 n x)).",
                        "VernacExtend",
                        "268561e7ae3bcb12786974378e3b271be1e30724"
                    ]
                },
                {
                    "command": [
                        "replace (phi2 n x + -1 * phi1 n x) with (phi2 n x - f x + (f x - phi1 n x)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "688861689d05e447010d5339f8a191d02ab2839f"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rplus_comm (psi1 n x)); apply Rplus_le_compat.",
                        "VernacExtend",
                        "cd4880aa3a3d3c2c87d07757c30023d52937cb03"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; elim (H1 n); intros; apply H7.",
                        "VernacExtend",
                        "9131a32420a72e9deee2c0e26574696d1d1fd6ce"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : Rmin a b = a).",
                        "VernacExtend",
                        "16ba28922085f1366de21d7def67b34b7b23e825"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with Hyp; reflexivity.",
                        "VernacExtend",
                        "bbb26e2d82f221595c99bdec954b4094656d78c0"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : Rmax a b = b).",
                        "VernacExtend",
                        "2c0060866e2f0b0d35d924dfb7ae3c9c2f541f99"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with Hyp; reflexivity.",
                        "VernacExtend",
                        "2fdad7a7f12df3b6f7fd85363d31da6b7459a437"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H11; elim H6; intros; split; left; assumption.",
                        "VernacExtend",
                        "aa391073e03344bde91dc19307c388827dd629d9"
                    ]
                },
                {
                    "command": [
                        "elim (H0 n); intros; apply H7; assert (H10 : Rmin a b = a).",
                        "VernacExtend",
                        "ac4f71dc4d645c465f4e62fb0c6d5f8f7f7b4ba0"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with Hyp; reflexivity.",
                        "VernacExtend",
                        "bbb26e2d82f221595c99bdec954b4094656d78c0"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : Rmax a b = b).",
                        "VernacExtend",
                        "2c0060866e2f0b0d35d924dfb7ae3c9c2f541f99"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with Hyp; reflexivity.",
                        "VernacExtend",
                        "2fdad7a7f12df3b6f7fd85363d31da6b7459a437"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H11; elim H6; intros; split; left; assumption.",
                        "VernacExtend",
                        "aa391073e03344bde91dc19307c388827dd629d9"
                    ]
                },
                {
                    "command": [
                        "rewrite StepFun_P30; rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat.",
                        "VernacExtend",
                        "8c84bd8ff1b313fcc0542e21b0305084a78f72e6"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (pos (un n)).",
                        "VernacExtend",
                        "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
                    ]
                },
                {
                    "command": [
                        "elim (H0 n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi1 n))).",
                        "VernacExtend",
                        "b729b394359d59bb6de1e491cd3d1f451902d96d"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (pos (un n)) with (R_dist (un n) 0).",
                        "VernacExtend",
                        "77992acf6ee2a44f8ded449debe1cfc044b8c6a3"
                    ]
                },
                {
                    "command": [
                        "apply H; unfold ge; apply le_trans with N; try assumption.",
                        "VernacExtend",
                        "c27821778c2ae99e3ee08aac44336cd207f3258f"
                    ]
                },
                {
                    "command": [
                        "unfold N; apply le_max_l.",
                        "VernacExtend",
                        "276b555b39b40f510dcc90e9585bf8a1fd5a87cf"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right.",
                        "VernacExtend",
                        "c62938dbb1d334f41d8c9dbe6820d3ac76754e36"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; left; apply (cond_pos (un n)).",
                        "VernacExtend",
                        "87d1cbd2e52f8d5c703de78eb59759fda334e22c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (pos (un n)).",
                        "VernacExtend",
                        "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
                    ]
                },
                {
                    "command": [
                        "elim (H1 n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi2 n))).",
                        "VernacExtend",
                        "29c563e06236244fc423fc6a0ce8fe5ba902af39"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs; assumption.",
                        "VernacExtend",
                        "6b3aee25e8d2f3523cc6d59c1a37121f75299b27"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (pos (un n)) with (R_dist (un n) 0).",
                        "VernacExtend",
                        "77992acf6ee2a44f8ded449debe1cfc044b8c6a3"
                    ]
                },
                {
                    "command": [
                        "apply H; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_l.",
                        "VernacExtend",
                        "9d9dcb96edc7e123f7e1f4b3c0bb1d7718fe27b4"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (un n)).",
                        "VernacExtend",
                        "c3fd5f3ab3dcd1fe43ff31b18da9084c4deb65ee"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist in H2; apply H2; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_r.",
                        "VernacExtend",
                        "f00d5ec7826e24654fbc945903eca5464d9c19b5"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with 3; [ unfold Rdiv; rewrite Rmult_plus_distr_l; do 2 rewrite (Rmult_comm 3); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
                        "VernacExtend",
                        "d5fc6e7e3279ce291cc825d25d97f8b656807ff2"
                    ]
                },
                {
                    "command": [
                        "assert (H4 : 0 < eps / 3).",
                        "VernacExtend",
                        "1db1f4bf83af6461836d34084806d7da5b6bbb6a"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
                    ]
                },
                {
                    "command": [
                        "elim (H _ H4); clear H; intros N0 H.",
                        "VernacExtend",
                        "5b0a82157f3970b06619d67a8ac5209b93221a23"
                    ]
                },
                {
                    "command": [
                        "elim (H2 _ H4); clear H2; intros N1 H2.",
                        "VernacExtend",
                        "22a45fdcf86de63b7070e51a5b3df7c6616686be"
                    ]
                },
                {
                    "command": [
                        "set (N := max N0 N1); exists N; intros; unfold R_dist.",
                        "VernacExtend",
                        "b67f8d3fefb27aaa34e7eee46fa6352d1b74bb6d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n)) + Rabs (RiemannInt_SF (phi1 n) - l)).",
                        "VernacExtend",
                        "200c0da7b2285e5a938ec5750f4002fa726997a4"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt_SF (phi2 n) - l) with (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n) + (RiemannInt_SF (phi1 n) - l)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "99004aa43bef87c29e63abd9a33c116c97a564c9"
                    ]
                },
                {
                    "command": [
                        "assert (Hyp_b : b <= a).",
                        "VernacExtend",
                        "3d5ed05a5f06f5066aaf34611c4f6a4595570050"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "replace eps with (2 * (eps / 3) + eps / 3).",
                        "VernacExtend",
                        "f876e8bd18747f7840f2ad4de8b736b9db844040"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat.",
                        "VernacExtend",
                        "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt_SF (phi2 n) - RiemannInt_SF (phi1 n)) with (RiemannInt_SF (phi2 n) + -1 * RiemannInt_SF (phi1 n)); [ idtac | ring ].",
                        "VernacExtend",
                        "71cfadb5f070cc8753f50e4b079b4574e0200710"
                    ]
                },
                {
                    "command": [
                        "rewrite <- StepFun_P30.",
                        "VernacExtend",
                        "30fa5d9949a9fdc9f6349de0f2b7cb5c90cd3a26"
                    ]
                },
                {
                    "command": [
                        "rewrite StepFun_P39.",
                        "VernacExtend",
                        "05fe2d7944263f955defd733e518faa08853032b"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "4585414329a0ef757c809f4a4dee3b3a09307b5c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P32 (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 (-1) (phi2 n) (phi1 n))))))))).",
                        "VernacExtend",
                        "35ff70228ce4f0a9ec003a6ac1420acb3a8fe8f7"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P34; try assumption.",
                        "VernacExtend",
                        "0c2b568c37d62177de20775e5dada161a4b91ff1"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 1 (psi1 n) (psi2 n))))))).",
                        "VernacExtend",
                        "dafdc1b237882e622d181b614b0ae5765e272a1c"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P37; try assumption.",
                        "VernacExtend",
                        "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
                    ]
                },
                {
                    "command": [
                        "intros; simpl; rewrite Rmult_1_l.",
                        "VernacExtend",
                        "e743dca94b06e457e4ea1a333ab2b9b3e1c73fca"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs (phi2 n x - f x) + Rabs (f x - phi1 n x)).",
                        "VernacExtend",
                        "268561e7ae3bcb12786974378e3b271be1e30724"
                    ]
                },
                {
                    "command": [
                        "replace (phi2 n x + -1 * phi1 n x) with (phi2 n x - f x + (f x - phi1 n x)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "688861689d05e447010d5339f8a191d02ab2839f"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rplus_comm (psi1 n x)); apply Rplus_le_compat.",
                        "VernacExtend",
                        "cd4880aa3a3d3c2c87d07757c30023d52937cb03"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; elim (H1 n); intros; apply H7.",
                        "VernacExtend",
                        "9131a32420a72e9deee2c0e26574696d1d1fd6ce"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : Rmin a b = b).",
                        "VernacExtend",
                        "0af78acd1346d67fc706b36fb9767b07154e3503"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec a b); intro; [ elim Hyp; assumption | reflexivity ].",
                        "VernacExtend",
                        "713a5fe30f4f226be4fb4d7b3e2ca84b71b61bc4"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : Rmax a b = a).",
                        "VernacExtend",
                        "3673febf959d0e8fc805bf0c66f4d6038406c49b"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; case (Rle_dec a b); intro; [ elim Hyp; assumption | reflexivity ].",
                        "VernacExtend",
                        "5698ba223c7b35010b2aa21c05a5a16429716737"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H11; elim H6; intros; split; left; assumption.",
                        "VernacExtend",
                        "aa391073e03344bde91dc19307c388827dd629d9"
                    ]
                },
                {
                    "command": [
                        "elim (H0 n); intros; apply H7; assert (H10 : Rmin a b = b).",
                        "VernacExtend",
                        "2238589aa8a5ac65417b2b0bd0103fb2fa56cc1e"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec a b); intro; [ elim Hyp; assumption | reflexivity ].",
                        "VernacExtend",
                        "713a5fe30f4f226be4fb4d7b3e2ca84b71b61bc4"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : Rmax a b = a).",
                        "VernacExtend",
                        "3673febf959d0e8fc805bf0c66f4d6038406c49b"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; case (Rle_dec a b); intro; [ elim Hyp; assumption | reflexivity ].",
                        "VernacExtend",
                        "5698ba223c7b35010b2aa21c05a5a16429716737"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H11; elim H6; intros; split; left; assumption.",
                        "VernacExtend",
                        "aa391073e03344bde91dc19307c388827dd629d9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (RiemannInt_SF (mkStepFun (StepFun_P6 (pre (mkStepFun (StepFun_P28 1 (psi1 n) (psi2 n)))))))) .",
                        "VernacExtend",
                        "721d0f33453ae16268263b60754da6f3594945a0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- StepFun_P39.",
                        "VernacExtend",
                        "af59faa550a63107a160e7bb81b651fb6603577c"
                    ]
                },
                {
                    "command": [
                        "rewrite StepFun_P30.",
                        "VernacExtend",
                        "d906530c9c2e97101fb3b0446f67e090479ee7db"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; rewrite double.",
                        "VernacExtend",
                        "9c26c13cbbf5c8312ae7ea7321291c39e7a50be4"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_plus_distr; apply Rplus_lt_compat.",
                        "VernacExtend",
                        "30e6b6f4a9297ad4265b48fa3cfd56bcfed44088"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (pos (un n)).",
                        "VernacExtend",
                        "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
                    ]
                },
                {
                    "command": [
                        "elim (H0 n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi1 n))).",
                        "VernacExtend",
                        "b729b394359d59bb6de1e491cd3d1f451902d96d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; apply RRle_abs.",
                        "VernacExtend",
                        "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (pos (un n)) with (R_dist (un n) 0).",
                        "VernacExtend",
                        "77992acf6ee2a44f8ded449debe1cfc044b8c6a3"
                    ]
                },
                {
                    "command": [
                        "apply H; unfold ge; apply le_trans with N; try assumption.",
                        "VernacExtend",
                        "c27821778c2ae99e3ee08aac44336cd207f3258f"
                    ]
                },
                {
                    "command": [
                        "unfold N; apply le_max_l.",
                        "VernacExtend",
                        "276b555b39b40f510dcc90e9585bf8a1fd5a87cf"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right.",
                        "VernacExtend",
                        "c62938dbb1d334f41d8c9dbe6820d3ac76754e36"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; left; apply (cond_pos (un n)).",
                        "VernacExtend",
                        "87d1cbd2e52f8d5c703de78eb59759fda334e22c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (pos (un n)).",
                        "VernacExtend",
                        "57e34ccf39c195f1efe38125ea5bbfe95a2aec39"
                    ]
                },
                {
                    "command": [
                        "elim (H1 n); intros; apply Rle_lt_trans with (Rabs (RiemannInt_SF (psi2 n))).",
                        "VernacExtend",
                        "29c563e06236244fc423fc6a0ce8fe5ba902af39"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; apply RRle_abs; assumption.",
                        "VernacExtend",
                        "dd8647b31f1d9bb212768d8e6b7bbaca2878dbdb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (pos (un n)) with (R_dist (un n) 0).",
                        "VernacExtend",
                        "77992acf6ee2a44f8ded449debe1cfc044b8c6a3"
                    ]
                },
                {
                    "command": [
                        "apply H; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_l.",
                        "VernacExtend",
                        "9d9dcb96edc7e123f7e1f4b3c0bb1d7718fe27b4"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply Rabs_right; apply Rle_ge; left; apply (cond_pos (un n)).",
                        "VernacExtend",
                        "c3fd5f3ab3dcd1fe43ff31b18da9084c4deb65ee"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist in H2; apply H2; unfold ge; apply le_trans with N; try assumption; unfold N; apply le_max_r.",
                        "VernacExtend",
                        "f00d5ec7826e24654fbc945903eca5464d9c19b5"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with 3; [ unfold Rdiv; rewrite Rmult_plus_distr_l; do 2 rewrite (Rmult_comm 3); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
                        "VernacExtend",
                        "d5fc6e7e3279ce291cc825d25d97f8b656807ff2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P13",
            "line_nb": 607,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Rle_dec a b) as [Hle|Hnle]; [ apply RiemannInt_P12; assumption | assert (H : b <= a); [ auto with real | replace (RiemannInt pr3) with (- RiemannInt (RiemannInt_P1 pr3)); [ idtac | symmetry ; apply RiemannInt_P8 ]; replace (RiemannInt pr2) with (- RiemannInt (RiemannInt_P1 pr2)); [ idtac | symmetry ; apply RiemannInt_P8 ]; replace (RiemannInt pr1) with (- RiemannInt (RiemannInt_P1 pr1)); [ idtac | symmetry ; apply RiemannInt_P8 ]; rewrite (RiemannInt_P12 (RiemannInt_P1 pr1) (RiemannInt_P1 pr2) (RiemannInt_P1 pr3) H); ring ] ].",
                        "VernacExtend",
                        "ccb3522806e67acb59fd2ed76d7cd2a574782e08"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P14",
            "line_nb": 610,
            "steps": [
                {
                    "command": [
                        "unfold Riemann_integrable; intros; split with (mkStepFun (StepFun_P4 a b c)); split with (mkStepFun (StepFun_P4 a b 0)); split; [ intros; simpl; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; unfold fct_cte; right; reflexivity | rewrite StepFun_P18; rewrite Rmult_0_l; rewrite Rabs_R0; apply (cond_pos eps) ].",
                        "VernacExtend",
                        "fee99eaa80ffb9c37d3a12bb19ee66d833a593aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P16",
            "line_nb": 625,
            "steps": [
                {
                    "command": [
                        "unfold Riemann_integrable; intro f; intros; elim (X eps); clear X; intros phi [psi [H H0]]; split with (mkStepFun (StepFun_P32 phi)); split with psi; split; try assumption; intros; simpl; apply Rle_trans with (Rabs (f t - phi t)); [ apply Rabs_triang_inv2 | apply H; assumption ].",
                        "VernacExtend",
                        "e5d3d5253511a7cd88649cd0a12fbf48e07c6974"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rle_cv_lim",
            "line_nb": 628,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Rle_dec l1 l2) as [Hle|Hnle].",
                        "VernacExtend",
                        "d8fdd542d3df1e1a759321dc924600d18c7e4776"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : l2 < l1).",
                        "VernacExtend",
                        "376bd83f1780a9b90a805187ac641a686fb19e44"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : 0 < (l1 - l2) / 2).",
                        "VernacExtend",
                        "7f127e6dc4f301cef6c0d6b82b91391576e370fa"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ apply Rlt_Rminus; assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "a65c58f5e48bb1154d9bda6fac06437a02af99c4"
                    ]
                },
                {
                    "command": [
                        "elim (H1 _ H3); elim (H0 _ H3); clear H0 H1; unfold R_dist; intros; set (N := max x x0); cut (Vn N < Un N).",
                        "VernacExtend",
                        "f514aa8ea7a29a15f74ee916d4e0756f3113f33b"
                    ]
                },
                {
                    "command": [
                        "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ (H N) H4)).",
                        "VernacExtend",
                        "e794284c08b7a8223873c00c2433c29e1273e5ad"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with ((l1 + l2) / 2).",
                        "VernacExtend",
                        "22639030588dcc16c2278f46bd19c4d1d70ea2e6"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (- l2); replace (- l2 + (l1 + l2) / 2) with ((l1 - l2) / 2).",
                        "VernacExtend",
                        "2538caccef9d99efd6c894cef34b17b8cc2f0a58"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm; apply Rle_lt_trans with (Rabs (Vn N - l2)).",
                        "VernacExtend",
                        "b255436da1fdd0a400983f4401a88aa808bb837d"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "apply H1; unfold ge; unfold N; apply le_max_r.",
                        "VernacExtend",
                        "1072fa526188dc7ff3fc677bfefa2f2f62ff3367"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with 2; [ unfold Rdiv; do 2 rewrite (Rmult_comm 2); rewrite (Rmult_plus_distr_r (- l2) ((l1 + l2) * / 2) 2); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
                        "VernacExtend",
                        "ab4beb2478fc1883735b49027457b99e10312319"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel; apply Rplus_lt_reg_l with l1; replace (l1 + - ((l1 + l2) / 2)) with ((l1 - l2) / 2).",
                        "VernacExtend",
                        "70551a911b763d41fce91f2a1a4cc856e8d38121"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (Un N - l1)).",
                        "VernacExtend",
                        "1c1ca47aeddbcf0d799a712fcd870b04e9a92c49"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply RRle_abs.",
                        "VernacExtend",
                        "7011ff8c44bcdbea135883b84f45196054dcd9da"
                    ]
                },
                {
                    "command": [
                        "apply H0; unfold ge; unfold N; apply le_max_l.",
                        "VernacExtend",
                        "6d1b1518fc6c52ea6e3132fc0ee93ad84f5d4b2a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with 2; [ unfold Rdiv; do 2 rewrite (Rmult_comm 2); rewrite (Rmult_plus_distr_r l1 (- ((l1 + l2) * / 2)) 2); rewrite <- Ropp_mult_distr_l_reverse; repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | discrR ] | discrR ].",
                        "VernacExtend",
                        "0d1fb0f5d49066dc2dbb25c050bc22ba1dff5a60"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P17",
            "line_nb": 649,
            "steps": [
                {
                    "command": [
                        "intro f; intros; unfold RiemannInt; case (RiemannInt_exists pr1 RinvN RinvN_cv) as (x0,HUn_cv0); case (RiemannInt_exists pr2 RinvN RinvN_cv) as (x,HUn_cv); set (phi1 := phi_sequence RinvN pr1) in HUn_cv0; set (phi2 := fun N:nat => mkStepFun (StepFun_P32 (phi1 N))); apply Rle_cv_lim with (fun N:nat => Rabs (RiemannInt_SF (phi1 N))) (fun N:nat => RiemannInt_SF (phi2 N)).",
                        "VernacExtend",
                        "26d74c056945d3adc428fb6be5c122c0cc808aad"
                    ]
                },
                {
                    "command": [
                        "intro; unfold phi2; apply StepFun_P34; assumption.",
                        "VernacExtend",
                        "271b4ad81cbbba3c032f6016cf9f279f90ee5299"
                    ]
                },
                {
                    "command": [
                        "apply (continuity_seq Rabs (fun N:nat => RiemannInt_SF (phi1 N)) x0); try assumption.",
                        "VernacExtend",
                        "e7dc0362c290e57f7e50ceb284c2a6c336244876"
                    ]
                },
                {
                    "command": [
                        "apply Rcontinuity_abs.",
                        "VernacExtend",
                        "e0d20ffaadb1faf3535f8ba7428876cd9b09dd71"
                    ]
                },
                {
                    "command": [
                        "set (phi3 := phi_sequence RinvN pr2); assert (H0 : exists psi3 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (Rabs (f t) - phi3 n t) <= psi3 n t) /\\ Rabs (RiemannInt_SF (psi3 n)) < RinvN n)).",
                        "VernacExtend",
                        "57e6fa36f6badf87a10f61e54ee1eeddd9149ef4"
                    ]
                },
                {
                    "command": [
                        "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr2 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr2 n)).",
                        "VernacExtend",
                        "0be4e8ea303cef818be3e82d7104ce64b4434913"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : exists psi2 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (Rabs (f t) - phi2 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < RinvN n)).",
                        "VernacExtend",
                        "e34635fb4d4361f4d0c2e1496838eca77e676c13"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : exists psi2 : nat -> StepFun a b, (forall n:nat, (forall t:R, Rmin a b <= t /\\ t <= Rmax a b -> Rabs (f t - phi1 n t) <= psi2 n t) /\\ Rabs (RiemannInt_SF (psi2 n)) < RinvN n)).",
                        "VernacExtend",
                        "fa7779bb3c97e449210e57adc35661b88537912b"
                    ]
                },
                {
                    "command": [
                        "split with (fun n:nat => proj1_sig (phi_sequence_prop RinvN pr1 n)); intro; apply (proj2_sig (phi_sequence_prop RinvN pr1 n)).",
                        "VernacExtend",
                        "cdad587d1595c46ae4abc486623fbad70c69249a"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intros psi2 H1; split with psi2; intros; elim (H1 n); clear H1; intros; split; try assumption.",
                        "VernacExtend",
                        "ebb296c4281d82cefab87909ee82223abf6aa558"
                    ]
                },
                {
                    "command": [
                        "intros; unfold phi2; simpl; apply Rle_trans with (Rabs (f t - phi1 n t)).",
                        "VernacExtend",
                        "6dd7d828c158f549c3ac54b3feb64143c7af8ae9"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang_inv2.",
                        "VernacExtend",
                        "db3a686e29529c6a07ba47aa021c0e984d49629a"
                    ]
                },
                {
                    "command": [
                        "apply H1; assumption.",
                        "VernacExtend",
                        "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros psi3 H0; elim H1; clear H1; intros psi2 H1; apply RiemannInt_P11 with (fun x:R => Rabs (f x)) RinvN phi3 psi3 psi2; try assumption; apply RinvN_cv.",
                        "VernacExtend",
                        "b9a721c0f9afd49f4ffa2cb9eb34cfc87c2d39e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P19",
            "line_nb": 736,
            "steps": [
                {
                    "command": [
                        "intro f; intros; apply Rplus_le_reg_l with (- RiemannInt pr1); rewrite Rplus_opp_l; rewrite Rplus_comm; apply Rle_trans with (Rabs (RiemannInt (RiemannInt_P10 (-1) pr2 pr1))).",
                        "VernacExtend",
                        "fc27718d96928b6faf2a14c69fcd63cd8f307938"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt pr2 + - RiemannInt pr1) with (RiemannInt (RiemannInt_P16 (RiemannInt_P10 (-1) pr2 pr1))).",
                        "VernacExtend",
                        "bc26b49a62f2ea0a3010643e211307a56c199a97"
                    ]
                },
                {
                    "command": [
                        "apply (RiemannInt_P17 (RiemannInt_P10 (-1) pr2 pr1) (RiemannInt_P16 (RiemannInt_P10 (-1) pr2 pr1))); assumption.",
                        "VernacExtend",
                        "3806d85bdb2e1975d8d8f700e0362aba4b8347bd"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt pr2 + - RiemannInt pr1) with (RiemannInt (RiemannInt_P10 (-1) pr2 pr1)).",
                        "VernacExtend",
                        "92dfe1d7056d28312b6b829df53dc8ae59fa7a6d"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P18; try assumption.",
                        "VernacExtend",
                        "c4c120e0f7d2a177b6946068a518c21a60c5eade"
                    ]
                },
                {
                    "command": [
                        "intros; apply Rabs_right.",
                        "VernacExtend",
                        "d651579e234d844214be8f3e0469c6b176825450"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply Rplus_le_reg_l with (f x); rewrite Rplus_0_r; replace (f x + (g x + -1 * f x)) with (g x); [ apply H0; assumption | ring ].",
                        "VernacExtend",
                        "e7291c69f05df8a4934f6bbc2be6975b8927c3e7"
                    ]
                },
                {
                    "command": [
                        "rewrite (RiemannInt_P12 pr2 pr1 (RiemannInt_P10 (-1) pr2 pr1)); [ ring | assumption ].",
                        "VernacExtend",
                        "3dbcc4dc218753fcb6174ae6ca85ce8ce0f10621"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FTC_P1",
            "line_nb": 747,
            "steps": [
                {
                    "command": [
                        "intros; apply continuity_implies_RiemannInt; [ assumption | intros; apply H0; elim H3; intros; split; assumption || apply Rle_trans with x; assumption ].",
                        "VernacExtend",
                        "3215c34a4ceefd8f3cf4655390b707f066c1cfbd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P20",
            "line_nb": 751,
            "steps": [
                {
                    "command": [
                        "intros; replace (primitive h pr a) with 0.",
                        "VernacExtend",
                        "6ee42c26a3bebb4e649e57b09b3f7483647641fa"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt pr0) with (primitive h pr b).",
                        "VernacExtend",
                        "fb366a713b489f29d7a621c2ac269d6b767a5618"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold primitive; destruct (Rle_dec a b) as [Hle|[]]; destruct (Rle_dec b b) as [Hle'|Hnle']; [ apply RiemannInt_P5 | destruct Hnle'; right; reflexivity | assumption | assumption].",
                        "VernacExtend",
                        "815758a4d6a4e7230b4c5a4f7698b7c58a2e5a5c"
                    ]
                },
                {
                    "command": [
                        "symmetry ; unfold primitive; destruct (Rle_dec a a) as [Hle|[]]; destruct (Rle_dec a b) as [Hle'|Hnle']; [ apply RiemannInt_P9 | elim Hnle'; assumption | right; reflexivity | right; reflexivity ].",
                        "VernacExtend",
                        "4ac4ee4f1be0590c56caedeadfe9e91fa8ce57ec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P21",
            "line_nb": 758,
            "steps": [
                {
                    "command": [
                        "unfold Riemann_integrable; intros f a b c Hyp1 Hyp2 X X0 eps.",
                        "VernacExtend",
                        "88d790775dae728fb213b25917b92e482b63a441"
                    ]
                },
                {
                    "command": [
                        "assert (H : 0 < eps / 2).",
                        "VernacExtend",
                        "d4836348e668957c1aadc63f2fa7422c1f6cce05"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "b485b8a95731f8846932bed2f577801cd11f1146"
                    ]
                },
                {
                    "command": [
                        "elim (X (mkposreal _ H)); clear X; intros phi1 [psi1 H1]; elim (X0 (mkposreal _ H)); clear X0; intros phi2 [psi2 H2].",
                        "VernacExtend",
                        "c8e2ed2035171e48ec1e2724a0ceae5e28bd467e"
                    ]
                },
                {
                    "command": [
                        "set (phi3 := fun x:R => match Rle_dec a x with | left _ => match Rle_dec x b with | left _ => phi1 x | right _ => phi2 x end | right _ => 0 end).",
                        "VernacExtend",
                        "376ecfed26c80301bb4f0adf33021e5d395c3a67"
                    ]
                },
                {
                    "command": [
                        "set (psi3 := fun x:R => match Rle_dec a x with | left _ => match Rle_dec x b with | left _ => psi1 x | right _ => psi2 x end | right _ => 0 end).",
                        "VernacExtend",
                        "266894bcf088c63a1f7eb97cf9baf921b9d03d35"
                    ]
                },
                {
                    "command": [
                        "cut (IsStepFun phi3 a c).",
                        "VernacExtend",
                        "26ca986d9b0702f3942db62f5cb060d02322c038"
                    ]
                },
                {
                    "command": [
                        "intro; cut (IsStepFun psi3 a b).",
                        "VernacExtend",
                        "3b6a32db5d7b62289e1e6df2bddac89a693f63b7"
                    ]
                },
                {
                    "command": [
                        "intro; cut (IsStepFun psi3 b c).",
                        "VernacExtend",
                        "a67d1488bc06cd85724eff9c9ae5c0ced95ab162"
                    ]
                },
                {
                    "command": [
                        "intro; cut (IsStepFun psi3 a c).",
                        "VernacExtend",
                        "3169a16a600eda2beb4569a14e95a57b4ed6781c"
                    ]
                },
                {
                    "command": [
                        "intro; split with (mkStepFun X); split with (mkStepFun X2); simpl; split.",
                        "VernacExtend",
                        "5f687ad160f0225d11af057c26e4ddfa9427154c"
                    ]
                },
                {
                    "command": [
                        "intros; unfold phi3, psi3; case (Rle_dec t b) as [|Hnle]; case (Rle_dec a t) as [|Hnle'].",
                        "VernacExtend",
                        "787baa95c29d6f9cffdf209d828d6cf71d40accb"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros; apply H3.",
                        "VernacExtend",
                        "b358052496cc23e7720fdbda808878b12fc5caf2"
                    ]
                },
                {
                    "command": [
                        "replace (Rmin a b) with a.",
                        "VernacExtend",
                        "4c55f2d2ff4bc70a5f5c00ff713afa66f8589ad5"
                    ]
                },
                {
                    "command": [
                        "replace (Rmax a b) with b.",
                        "VernacExtend",
                        "534c915ca8b30f00658190617b4bda4abd7377d6"
                    ]
                },
                {
                    "command": [
                        "split; assumption.",
                        "VernacExtend",
                        "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with Hyp1; reflexivity.",
                        "VernacExtend",
                        "7ccbe87a94be8af6c28db89349a258e2c7d8536b"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with Hyp1; reflexivity.",
                        "VernacExtend",
                        "cb153170f09618c02d35724901e83e4f689cbe03"
                    ]
                },
                {
                    "command": [
                        "elim Hnle'; replace a with (Rmin a c).",
                        "VernacExtend",
                        "ca0f8efd6028ff901bdf1ad6bb76b3e05b61afe0"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros; assumption.",
                        "VernacExtend",
                        "93aaa20e409e093c318ed7f35309abbda4e55e01"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec a c) as [|[]]; [ reflexivity | apply Rle_trans with b; assumption ].",
                        "VernacExtend",
                        "dfc87b84150b9817cd27ecdeabeb5b8451e28687"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros; apply H3.",
                        "VernacExtend",
                        "825d20ed8450173860a8194df7e06782017afacb"
                    ]
                },
                {
                    "command": [
                        "replace (Rmax b c) with (Rmax a c).",
                        "VernacExtend",
                        "c1a0059e84cd48d916b685bf42b2800330048570"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros; split; try assumption.",
                        "VernacExtend",
                        "976c47cbaa18d84f22f501ca3cb1f4e5eb2a43f2"
                    ]
                },
                {
                    "command": [
                        "replace (Rmin b c) with b.",
                        "VernacExtend",
                        "6580b5b037a62579b741ef1f2591fb4261bbace9"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec b c) with Hyp2; reflexivity.",
                        "VernacExtend",
                        "06400278aece6a2c5cb917a9e96b909f8108d48d"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec b c) with Hyp2; case (Rle_dec a c) as [|[]]; [ reflexivity | apply Rle_trans with b; assumption ].",
                        "VernacExtend",
                        "0c4517b6c567590bc11ee6d054904b30eea080e4"
                    ]
                },
                {
                    "command": [
                        "elim Hnle'; replace a with (Rmin a c).",
                        "VernacExtend",
                        "ca0f8efd6028ff901bdf1ad6bb76b3e05b61afe0"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros; assumption.",
                        "VernacExtend",
                        "93aaa20e409e093c318ed7f35309abbda4e55e01"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec a c) as [|[]]; [ reflexivity | apply Rle_trans with b; assumption ].",
                        "VernacExtend",
                        "dfc87b84150b9817cd27ecdeabeb5b8451e28687"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (StepFun_P43 X0 X1 X2).",
                        "VernacExtend",
                        "978c1f08a146132185d3d016c18863eef2a6964c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (RiemannInt_SF (mkStepFun X0)) + Rabs (RiemannInt_SF (mkStepFun X1))).",
                        "VernacExtend",
                        "2c34eee8d27b8a1f8dd9dc5098a4f1fc1772ed8a"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "rewrite (double_var eps); replace (RiemannInt_SF (mkStepFun X0)) with (RiemannInt_SF psi1).",
                        "VernacExtend",
                        "717d907f9697e99270ac834947d5782152e35d23"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt_SF (mkStepFun X1)) with (RiemannInt_SF psi2).",
                        "VernacExtend",
                        "01a886490874a05f1b272d43e6789785ddace7f4"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat.",
                        "VernacExtend",
                        "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros; assumption.",
                        "VernacExtend",
                        "cc00e4116d0aefea281577ea01f1c22b86beb4e0"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros; assumption.",
                        "VernacExtend",
                        "16bb2af93f0861122c21182e52abbea6cd8c5e4c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym.",
                        "VernacExtend",
                        "8e9431fb6db6f151160007e68131f4f5cb1c7968"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P37; try assumption.",
                        "VernacExtend",
                        "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
                    ]
                },
                {
                    "command": [
                        "simpl; intros; unfold psi3; elim H0; clear H0; intros; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H0)) | right; reflexivity | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] ].",
                        "VernacExtend",
                        "3f0157dd767551b5200a5c18c66fa7977200217c"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P37; try assumption.",
                        "VernacExtend",
                        "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
                    ]
                },
                {
                    "command": [
                        "simpl; intros; unfold psi3; elim H0; clear H0; intros; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H0)) | right; reflexivity | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] ].",
                        "VernacExtend",
                        "3f0157dd767551b5200a5c18c66fa7977200217c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym.",
                        "VernacExtend",
                        "8e9431fb6db6f151160007e68131f4f5cb1c7968"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P37; try assumption.",
                        "VernacExtend",
                        "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
                    ]
                },
                {
                    "command": [
                        "simpl; intros; unfold psi3; elim H0; clear H0; intros; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ right; reflexivity | elim Hnle'; left; assumption | elim Hnle; left; assumption | elim Hnle; left; assumption ].",
                        "VernacExtend",
                        "b4aebe2990e5451547d1d30e4e22442fe9e458eb"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P37; try assumption.",
                        "VernacExtend",
                        "949f4c3f3e574c97b05ca2ba6b82a4969e2c5f86"
                    ]
                },
                {
                    "command": [
                        "simpl; intros; unfold psi3; elim H0; clear H0; intros; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ right; reflexivity | elim Hnle'; left; assumption | elim Hnle; left; assumption | elim Hnle; left; assumption ].",
                        "VernacExtend",
                        "b4aebe2990e5451547d1d30e4e22442fe9e458eb"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P46 with b; assumption.",
                        "VernacExtend",
                        "27d6e45db2a3e5d35c1181dcd082e07abf2882c2"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := pre psi2); unfold IsStepFun in H3; unfold is_subdivision in H3; elim H3; clear H3; intros l1 [lf1 H3]; split with l1; split with lf1; unfold adapted_couple in H3; decompose [and] H3; clear H3; unfold adapted_couple; repeat split; try assumption.",
                        "VernacExtend",
                        "18dc68f5166fb73ae4c0f3989f404263d7e31027"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H9 := H8 i H3); unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H9; intros; rewrite <- (H9 x H7); unfold psi3; assert (H10 : b < x).",
                        "VernacExtend",
                        "8b8f3eca04cafd251c842ba2a7b155ef3a312430"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (pos_Rl l1 i).",
                        "VernacExtend",
                        "b8d497764f3c13ede761fad08f268f6701db904d"
                    ]
                },
                {
                    "command": [
                        "replace b with (Rmin b c).",
                        "VernacExtend",
                        "0f362c5ec040cf496ce0d28154d8460dec4dea19"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H5; elim (RList_P6 l1); intros; apply H10; try assumption.",
                        "VernacExtend",
                        "50ef47d76fc4f3438659d4d24b2a978b318237d0"
                    ]
                },
                {
                    "command": [
                        "apply le_O_n.",
                        "VernacExtend",
                        "7fa25714b3e362fc6548cec817a7c173238f4970"
                    ]
                },
                {
                    "command": [
                        "apply lt_trans with (pred (Rlength l1)); try assumption; apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H12 in H6; discriminate.",
                        "VernacExtend",
                        "9c215fff5f2a897b082bcdd829d3967cc7340970"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec b c) with Hyp2; reflexivity.",
                        "VernacExtend",
                        "06400278aece6a2c5cb917a9e96b909f8108d48d"
                    ]
                },
                {
                    "command": [
                        "elim H7; intros; assumption.",
                        "VernacExtend",
                        "204a138266066951af662ca2a9d0c4308b4b1aad"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; [ elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H10)) | reflexivity | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] ].",
                        "VernacExtend",
                        "352af9c17e695190f910d3fb00e0332fbb469646"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := pre psi1); unfold IsStepFun in H3; unfold is_subdivision in H3; elim H3; clear H3; intros l1 [lf1 H3]; split with l1; split with lf1; unfold adapted_couple in H3; decompose [and] H3; clear H3; unfold adapted_couple; repeat split; try assumption.",
                        "VernacExtend",
                        "0290bb2b38195df75ac7503c7ef29768f211a7a8"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H9 := H8 i H3); unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H9; intros; rewrite <- (H9 x H7); unfold psi3; assert (H10 : x <= b).",
                        "VernacExtend",
                        "2aa34664a1ed4410afb9c2c67c65166d4376de1a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (pos_Rl l1 (S i)).",
                        "VernacExtend",
                        "014e2a4aa8064aca24f536fa3df53f5dcb48ce95"
                    ]
                },
                {
                    "command": [
                        "elim H7; intros; left; assumption.",
                        "VernacExtend",
                        "7e026c9e003998ad371dc24f9ff049b1dd40c337"
                    ]
                },
                {
                    "command": [
                        "replace b with (Rmax a b).",
                        "VernacExtend",
                        "6043bdb58a81381d63dac345ad3c4cbc3f0372c1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H4; elim (RList_P6 l1); intros; apply H10; try assumption.",
                        "VernacExtend",
                        "2488745f1519aa649084558ead40860673e71651"
                    ]
                },
                {
                    "command": [
                        "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H12 in H6; discriminate.",
                        "VernacExtend",
                        "35cfc42b5b32b992b561fb886bfbef740e234c35"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with Hyp1; reflexivity.",
                        "VernacExtend",
                        "7ccbe87a94be8af6c28db89349a258e2c7d8536b"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : a <= x).",
                        "VernacExtend",
                        "3b1e7bc120e4845b3651e0d87603af66008b60ab"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (pos_Rl l1 i).",
                        "VernacExtend",
                        "0794cf35b670a910c81d1700f13dc0f765bb673c"
                    ]
                },
                {
                    "command": [
                        "replace a with (Rmin a b).",
                        "VernacExtend",
                        "4a0c6737ae26b44753b1be4180fc9efce97e5fa2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H5; elim (RList_P6 l1); intros; apply H11; try assumption.",
                        "VernacExtend",
                        "2c4d4979fed14350df7df1585d6f825e9c2753d0"
                    ]
                },
                {
                    "command": [
                        "apply le_O_n.",
                        "VernacExtend",
                        "7fa25714b3e362fc6548cec817a7c173238f4970"
                    ]
                },
                {
                    "command": [
                        "apply lt_trans with (pred (Rlength l1)); try assumption; apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H13 in H6; discriminate.",
                        "VernacExtend",
                        "5d3c801560cb230acde64e766ca70db2c72d5de7"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with Hyp1; reflexivity.",
                        "VernacExtend",
                        "cb153170f09618c02d35724901e83e4f689cbe03"
                    ]
                },
                {
                    "command": [
                        "left; elim H7; intros; assumption.",
                        "VernacExtend",
                        "bbd409c5eb3440d4f5590f5ce89e597c6e9684f1"
                    ]
                },
                {
                    "command": [
                        "decide (Rle_dec a x) with H11; decide (Rle_dec x b) with H10; reflexivity.",
                        "VernacExtend",
                        "83700e7144fd313a57f976d70bdb566cef285e29"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P46 with b.",
                        "VernacExtend",
                        "4901a4b5fd5869e810d6dfe7270572e258468a31"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := pre phi1); unfold IsStepFun in H3; unfold is_subdivision in H3; elim H3; clear H3; intros l1 [lf1 H3]; split with l1; split with lf1; unfold adapted_couple in H3; decompose [and] H3; clear H3; unfold adapted_couple; repeat split; try assumption.",
                        "VernacExtend",
                        "14cd60d45e8a87b1abe70e62536836448ac1bd6a"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H9 := H8 i H3); unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H9; intros; rewrite <- (H9 x H7); unfold psi3; assert (H10 : x <= b).",
                        "VernacExtend",
                        "2aa34664a1ed4410afb9c2c67c65166d4376de1a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (pos_Rl l1 (S i)).",
                        "VernacExtend",
                        "014e2a4aa8064aca24f536fa3df53f5dcb48ce95"
                    ]
                },
                {
                    "command": [
                        "elim H7; intros; left; assumption.",
                        "VernacExtend",
                        "7e026c9e003998ad371dc24f9ff049b1dd40c337"
                    ]
                },
                {
                    "command": [
                        "replace b with (Rmax a b).",
                        "VernacExtend",
                        "6043bdb58a81381d63dac345ad3c4cbc3f0372c1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H4; elim (RList_P6 l1); intros; apply H10; try assumption.",
                        "VernacExtend",
                        "2488745f1519aa649084558ead40860673e71651"
                    ]
                },
                {
                    "command": [
                        "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H12 in H6; discriminate.",
                        "VernacExtend",
                        "35cfc42b5b32b992b561fb886bfbef740e234c35"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with Hyp1; reflexivity.",
                        "VernacExtend",
                        "7ccbe87a94be8af6c28db89349a258e2c7d8536b"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : a <= x).",
                        "VernacExtend",
                        "3b1e7bc120e4845b3651e0d87603af66008b60ab"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (pos_Rl l1 i).",
                        "VernacExtend",
                        "0794cf35b670a910c81d1700f13dc0f765bb673c"
                    ]
                },
                {
                    "command": [
                        "replace a with (Rmin a b).",
                        "VernacExtend",
                        "4a0c6737ae26b44753b1be4180fc9efce97e5fa2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H5; elim (RList_P6 l1); intros; apply H11; try assumption.",
                        "VernacExtend",
                        "2c4d4979fed14350df7df1585d6f825e9c2753d0"
                    ]
                },
                {
                    "command": [
                        "apply le_O_n.",
                        "VernacExtend",
                        "7fa25714b3e362fc6548cec817a7c173238f4970"
                    ]
                },
                {
                    "command": [
                        "apply lt_trans with (pred (Rlength l1)); try assumption; apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H13 in H6; discriminate.",
                        "VernacExtend",
                        "5d3c801560cb230acde64e766ca70db2c72d5de7"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with Hyp1; reflexivity.",
                        "VernacExtend",
                        "cb153170f09618c02d35724901e83e4f689cbe03"
                    ]
                },
                {
                    "command": [
                        "left; elim H7; intros; assumption.",
                        "VernacExtend",
                        "bbd409c5eb3440d4f5590f5ce89e597c6e9684f1"
                    ]
                },
                {
                    "command": [
                        "unfold phi3; decide (Rle_dec a x) with H11; decide (Rle_dec x b) with H10; reflexivity || elim n; assumption.",
                        "VernacExtend",
                        "072ed886cf0e6591c7aa4f19597beee8a2763453"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := pre phi2); unfold IsStepFun in H3; unfold is_subdivision in H3; elim H3; clear H3; intros l1 [lf1 H3]; split with l1; split with lf1; unfold adapted_couple in H3; decompose [and] H3; clear H3; unfold adapted_couple; repeat split; try assumption.",
                        "VernacExtend",
                        "3f5333b501427d05a244bc9bb28383b2ddeae810"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H9 := H8 i H3); unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H9; intros; rewrite <- (H9 x H7); unfold psi3; assert (H10 : b < x).",
                        "VernacExtend",
                        "8b8f3eca04cafd251c842ba2a7b155ef3a312430"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (pos_Rl l1 i).",
                        "VernacExtend",
                        "b8d497764f3c13ede761fad08f268f6701db904d"
                    ]
                },
                {
                    "command": [
                        "replace b with (Rmin b c).",
                        "VernacExtend",
                        "0f362c5ec040cf496ce0d28154d8460dec4dea19"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H5; elim (RList_P6 l1); intros; apply H10; try assumption.",
                        "VernacExtend",
                        "50ef47d76fc4f3438659d4d24b2a978b318237d0"
                    ]
                },
                {
                    "command": [
                        "apply le_O_n.",
                        "VernacExtend",
                        "7fa25714b3e362fc6548cec817a7c173238f4970"
                    ]
                },
                {
                    "command": [
                        "apply lt_trans with (pred (Rlength l1)); try assumption; apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H12 in H6; discriminate.",
                        "VernacExtend",
                        "9c215fff5f2a897b082bcdd829d3967cc7340970"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec b c) with Hyp2; reflexivity.",
                        "VernacExtend",
                        "06400278aece6a2c5cb917a9e96b909f8108d48d"
                    ]
                },
                {
                    "command": [
                        "elim H7; intros; assumption.",
                        "VernacExtend",
                        "204a138266066951af662ca2a9d0c4308b4b1aad"
                    ]
                },
                {
                    "command": [
                        "unfold phi3; destruct (Rle_dec a x) as [Hle|Hnle]; destruct (Rle_dec x b) as [Hle'|Hnle']; intros; [ elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle' H10)) | reflexivity | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] | elim Hnle; apply Rle_trans with b; [ assumption | left; assumption ] ].",
                        "VernacExtend",
                        "06a219371f664e1d12ebbe591c29d62960abc4b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P24",
            "line_nb": 986,
            "steps": [
                {
                    "command": [
                        "intros; case (Rle_dec a b); case (Rle_dec b c); intros.",
                        "VernacExtend",
                        "28dc1fd17e4fac1627027e8fd13cf64e0bf2fc7b"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P21 with b; assumption.",
                        "VernacExtend",
                        "cb6ad108b61d93ac228c79897748261b20d14e1a"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec a c); intro.",
                        "VernacExtend",
                        "a52c2d1f592b3316592b3f567f3e423322186e82"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P22 with b; try assumption.",
                        "VernacExtend",
                        "f6e005b1f79dd475ffff72bd7c659690353725dc"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | auto with real ].",
                        "VernacExtend",
                        "9bbdc3b8f0fa19c19cba930488d8dfb29dd45d02"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P1; apply RiemannInt_P22 with b.",
                        "VernacExtend",
                        "22b91df819ea44eab5ee73b89cfab564d0eb1a91"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P1; assumption.",
                        "VernacExtend",
                        "a6a5297b10d2aa4c5de79091956dd620cf88c588"
                    ]
                },
                {
                    "command": [
                        "split; auto with real.",
                        "VernacExtend",
                        "53b919a143f08c7f91e079731a18ea6fb30dca87"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec a c); intro.",
                        "VernacExtend",
                        "a52c2d1f592b3316592b3f567f3e423322186e82"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P23 with b; try assumption.",
                        "VernacExtend",
                        "b06fc9ff58224bbbdb579688340c0c853ffd472a"
                    ]
                },
                {
                    "command": [
                        "split; auto with real.",
                        "VernacExtend",
                        "53b919a143f08c7f91e079731a18ea6fb30dca87"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P1; apply RiemannInt_P23 with b.",
                        "VernacExtend",
                        "81c3bf87eaed6da4b7169c5d6c7082942eacf6d0"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P1; assumption.",
                        "VernacExtend",
                        "a6a5297b10d2aa4c5de79091956dd620cf88c588"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | auto with real ].",
                        "VernacExtend",
                        "9bbdc3b8f0fa19c19cba930488d8dfb29dd45d02"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P1; apply RiemannInt_P21 with b; auto with real || apply RiemannInt_P1; assumption.",
                        "VernacExtend",
                        "bfa0e1e3c40662557fe15a76bb922478c5d3eeaa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P26",
            "line_nb": 1126,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Rle_dec a b) as [Hle|Hnle]; destruct (Rle_dec b c) as [Hle'|Hnle'].",
                        "VernacExtend",
                        "94cfe0b7959f829d01516fe15504c46ea1e45a03"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P25; assumption.",
                        "VernacExtend",
                        "dac37b59f705a670f5c7fa98a0958a415292ed29"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec a c) as [Hle''|Hnle''].",
                        "VernacExtend",
                        "e994a62d3ebacc7fbe381c050d3057e0285134fe"
                    ]
                },
                {
                    "command": [
                        "assert (H : c <= b).",
                        "VernacExtend",
                        "27439efee446f82317c415dbd86c6f1bff787cf8"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (RiemannInt_P25 pr3 (RiemannInt_P1 pr2) pr1 Hle'' H); rewrite (RiemannInt_P8 pr2 (RiemannInt_P1 pr2)); ring.",
                        "VernacExtend",
                        "4583f3bf8013d4befeaed48bfefeae955dba87a1"
                    ]
                },
                {
                    "command": [
                        "assert (H : c <= a).",
                        "VernacExtend",
                        "e2cd75f0d77ebf5fe57aa74ddbb89f20e7bf2d9f"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "rewrite (RiemannInt_P8 pr2 (RiemannInt_P1 pr2)); rewrite <- (RiemannInt_P25 (RiemannInt_P1 pr3) pr1 (RiemannInt_P1 pr2) H Hle); rewrite (RiemannInt_P8 pr3 (RiemannInt_P1 pr3)); ring.",
                        "VernacExtend",
                        "48d974f7073326f24bbe5d24db984856c4f02a56"
                    ]
                },
                {
                    "command": [
                        "assert (H : b <= a).",
                        "VernacExtend",
                        "357357cb13a332aa21b45e33feed2be6a5913b97"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec a c) as [Hle''|Hnle''].",
                        "VernacExtend",
                        "e994a62d3ebacc7fbe381c050d3057e0285134fe"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (RiemannInt_P25 (RiemannInt_P1 pr1) pr3 pr2 H Hle''); rewrite (RiemannInt_P8 pr1 (RiemannInt_P1 pr1)); ring.",
                        "VernacExtend",
                        "410e88094705a83ac179554571f6ae3991cbe45f"
                    ]
                },
                {
                    "command": [
                        "assert (H0 : c <= a).",
                        "VernacExtend",
                        "246a69e3ba12cc3f62f30c8bceffec9ccd949aef"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "rewrite (RiemannInt_P8 pr1 (RiemannInt_P1 pr1)); rewrite <- (RiemannInt_P25 pr2 (RiemannInt_P1 pr3) (RiemannInt_P1 pr1) Hle' H0); rewrite (RiemannInt_P8 pr3 (RiemannInt_P1 pr3)); ring.",
                        "VernacExtend",
                        "63e7cbe72655b376593f2df198c0320d7f51481e"
                    ]
                },
                {
                    "command": [
                        "rewrite (RiemannInt_P8 pr1 (RiemannInt_P1 pr1)); rewrite (RiemannInt_P8 pr2 (RiemannInt_P1 pr2)); rewrite (RiemannInt_P8 pr3 (RiemannInt_P1 pr3)); rewrite <- (RiemannInt_P25 (RiemannInt_P1 pr2) (RiemannInt_P1 pr1) (RiemannInt_P1 pr3)) ; [ ring | auto with real | auto with real ].",
                        "VernacExtend",
                        "91bd976fc634ab0758aa88968740abeb9c2ea097"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P27",
            "line_nb": 1145,
            "steps": [
                {
                    "command": [
                        "intro f; intros; elim H; clear H; intros; assert (H1 : continuity_pt f x).",
                        "VernacExtend",
                        "25bb6cbc2f968ba4e2bdd343d3b4bf2f794d1aed"
                    ]
                },
                {
                    "command": [
                        "apply C0; split; left; assumption.",
                        "VernacExtend",
                        "b3a556a70817cf19cc11d002b1b3ec6c65c6b3e7"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_lim; intros; assert (Hyp : 0 < eps / 2).",
                        "VernacExtend",
                        "7c4235e5435a730e43f9cbe3aabdddb9370b652d"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "4d905fce1c75d7adfc4f1cd2deb30dbdf49bf2f3"
                    ]
                },
                {
                    "command": [
                        "elim (H1 _ Hyp); unfold dist, D_x, no_cond; simpl; unfold R_dist; intros; set (del := Rmin x0 (Rmin (b - x) (x - a))); assert (H4 : 0 < del).",
                        "VernacExtend",
                        "1e6429122555b2be746af458421c3920689da2b3"
                    ]
                },
                {
                    "command": [
                        "unfold del; unfold Rmin; case (Rle_dec (b - x) (x - a)); intro.",
                        "VernacExtend",
                        "a43fc45a965c88c1697b643ff9838530fafd4a2c"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec x0 (b - x)) as [Hle|Hnle]; [ elim H3; intros; assumption | apply Rlt_Rminus; assumption ].",
                        "VernacExtend",
                        "abd4649bd9922b7ec175a132ee3da1b329535d23"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec x0 (x - a)) as [Hle'|Hnle']; [ elim H3; intros; assumption | apply Rlt_Rminus; assumption ].",
                        "VernacExtend",
                        "4dceb0db6130bdd4b4f3b3b85dfea6968545ced8"
                    ]
                },
                {
                    "command": [
                        "split with (mkposreal _ H4); intros; assert (H7 : Riemann_integrable f x (x + h0)).",
                        "VernacExtend",
                        "4816a69b9d924ec2e51ac8503a3525f4615005f7"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec x (x + h0)) as [Hle''|Hnle''].",
                        "VernacExtend",
                        "8e6a23c9d923be29db5ecd57d3e6a1859df81736"
                    ]
                },
                {
                    "command": [
                        "apply continuity_implies_RiemannInt; try assumption.",
                        "VernacExtend",
                        "d669460421439f6351ef5a19e4562c5b73bb882b"
                    ]
                },
                {
                    "command": [
                        "intros; apply C0; elim H7; intros; split.",
                        "VernacExtend",
                        "b94769cefa231fda84fe98f9c7f340be323d288b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with x; [ left; assumption | assumption ].",
                        "VernacExtend",
                        "f097eac48d75e80a9f2e866079347737ad670d88"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (x + h0).",
                        "VernacExtend",
                        "b1e340b09b909ebf9e364556d782a8d0af1bd18d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "left; apply Rlt_le_trans with (x + del).",
                        "VernacExtend",
                        "7bbb4f2410ce85534d5e14f254f741d556f03802"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l; apply Rle_lt_trans with (Rabs h0); [ apply RRle_abs | apply H6 ].",
                        "VernacExtend",
                        "a1c12efff5071fd8a9c1503aaafc8f47105332c4"
                    ]
                },
                {
                    "command": [
                        "unfold del; apply Rle_trans with (x + Rmin (b - x) (x - a)).",
                        "VernacExtend",
                        "050295c56cbd8c2400d7167373643112b7384cd0"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l; apply Rmin_r.",
                        "VernacExtend",
                        "f8f44d49c6af7be9c386798233249a466042384f"
                    ]
                },
                {
                    "command": [
                        "pattern b at 2; replace b with (x + (b - x)); [ apply Rplus_le_compat_l; apply Rmin_l | ring ].",
                        "VernacExtend",
                        "df547ca3e4e91d531e54aa43b8e70b90a9969ed3"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P1; apply continuity_implies_RiemannInt; auto with real.",
                        "VernacExtend",
                        "92601a453b474174a53f0ed2f7b8aa136cad4241"
                    ]
                },
                {
                    "command": [
                        "intros; apply C0; elim H7; intros; split.",
                        "VernacExtend",
                        "b94769cefa231fda84fe98f9c7f340be323d288b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (x + h0).",
                        "VernacExtend",
                        "b1e340b09b909ebf9e364556d782a8d0af1bd18d"
                    ]
                },
                {
                    "command": [
                        "left; apply Rle_lt_trans with (x - del).",
                        "VernacExtend",
                        "0bcd8aa85061c93c0abd035fb9b835eb76edae31"
                    ]
                },
                {
                    "command": [
                        "unfold del; apply Rle_trans with (x - Rmin (b - x) (x - a)).",
                        "VernacExtend",
                        "e2765513559ed8f20dc552db05a04195c1003a75"
                    ]
                },
                {
                    "command": [
                        "pattern a at 1; replace a with (x + (a - x)); [ idtac | ring ].",
                        "VernacExtend",
                        "fa8ff1396a7ea852b7da47debde72df8e365236f"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_le_compat_l; apply Ropp_le_cancel.",
                        "VernacExtend",
                        "a38a951d30372c90a163a9f44e9a7cc9615bed2f"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_involutive; rewrite Ropp_plus_distr; rewrite Ropp_involutive; rewrite (Rplus_comm x); apply Rmin_r.",
                        "VernacExtend",
                        "74540a1066d7a9c1636bb0c911d3ab25258a3598"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_le_compat_l; apply Ropp_le_cancel.",
                        "VernacExtend",
                        "a38a951d30372c90a163a9f44e9a7cc9615bed2f"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite Ropp_involutive; apply Rmin_r.",
                        "VernacExtend",
                        "5c531607dd4bd04418020a5341fcedea7f79b20c"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_lt_compat_l; apply Ropp_lt_cancel.",
                        "VernacExtend",
                        "da5210048868e343b2df8b75b9eed7553c533d82"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_involutive; apply Rle_lt_trans with (Rabs h0); [ rewrite <- Rabs_Ropp; apply RRle_abs | apply H6 ].",
                        "VernacExtend",
                        "9ce56d0d1abe9a7c848da3b68e533ff81717719d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with x; [ assumption | left; assumption ].",
                        "VernacExtend",
                        "ad9eb914e3d7d166faf118407c1b2e30a01c1c65"
                    ]
                },
                {
                    "command": [
                        "replace (primitive h (FTC_P1 h C0) (x + h0) - primitive h (FTC_P1 h C0) x) with (RiemannInt H7).",
                        "VernacExtend",
                        "007fa8949cfe836898949c828349c55ad77e26c7"
                    ]
                },
                {
                    "command": [
                        "replace (f x) with (RiemannInt (RiemannInt_P14 x (x + h0) (f x)) / h0).",
                        "VernacExtend",
                        "2e216b09051c6e83d33671eea8e77e9599d6cba9"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt H7 / h0 - RiemannInt (RiemannInt_P14 x (x + h0) (f x)) / h0) with ((RiemannInt H7 - RiemannInt (RiemannInt_P14 x (x + h0) (f x))) / h0).",
                        "VernacExtend",
                        "5a54c267896b796e65890c19fe974735c6d1f1d5"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt H7 - RiemannInt (RiemannInt_P14 x (x + h0) (f x))) with (RiemannInt (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))).",
                        "VernacExtend",
                        "3a6a79deb982e56578e2d576b7f96ac02093d72e"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rabs_mult; destruct (Rle_dec x (x + h0)) as [Hle|Hnle].",
                        "VernacExtend",
                        "04c61c476a236bc1bfd7d560b1dd0a13e4f7a31d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt (RiemannInt_P16 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))) * Rabs (/ h0)).",
                        "VernacExtend",
                        "d9c5fccf5330eb385d8bcafaf0d9a32ed90f787b"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "3b51024b593773b0da19f4076119f7a5e3345a59"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "apply (RiemannInt_P17 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x))) (RiemannInt_P16 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x))))); assumption.",
                        "VernacExtend",
                        "de92b3f812c3f4cd83944f651fe2df9e12daf461"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt (RiemannInt_P14 x (x + h0) (eps / 2)) * Rabs (/ h0)).",
                        "VernacExtend",
                        "e9339732798b76f60cde57f6911a1b435a29b383"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "3b51024b593773b0da19f4076119f7a5e3345a59"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P19; try assumption.",
                        "VernacExtend",
                        "6e47c4a3be772e39217a9b15383d017915930d15"
                    ]
                },
                {
                    "command": [
                        "intros; replace (f x1 + -1 * fct_cte (f x) x1) with (f x1 - f x).",
                        "VernacExtend",
                        "89820ce228dc9da7aa0b1d69ebfca259818a1715"
                    ]
                },
                {
                    "command": [
                        "unfold fct_cte; destruct (Req_dec x x1) as [H9|H9].",
                        "VernacExtend",
                        "96a7ccabab523f47f92423c223101a7077a48a06"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; left; assumption.",
                        "VernacExtend",
                        "e5b7895e4398505fc7c7dbff0a5226804dc8fb88"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros; left; apply H11.",
                        "VernacExtend",
                        "ee4b1ea71c6194d7e4de95e6ef77de3595359856"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right.",
                        "VernacExtend",
                        "9b60731d6b608338747f09fec19f24d12baad022"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with x; replace (x + (x1 - x)) with x1; [ idtac | ring ].",
                        "VernacExtend",
                        "68fb2788e37e40c46a312ee84741d5bde15172e4"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (x + h0).",
                        "VernacExtend",
                        "463b8d23f32a103b128e35e8933148b5422bf33b"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; assumption.",
                        "VernacExtend",
                        "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l; apply Rle_trans with del.",
                        "VernacExtend",
                        "55b5f8c1779389a8fe6f85b848fdaa365efac2cb"
                    ]
                },
                {
                    "command": [
                        "left; apply Rle_lt_trans with (Rabs h0); [ apply RRle_abs | assumption ].",
                        "VernacExtend",
                        "9ef0941e61f8bceeed50a9f6c9767799ff372c70"
                    ]
                },
                {
                    "command": [
                        "unfold del; apply Rmin_l.",
                        "VernacExtend",
                        "46c0bfc6c0d150fb8634f72c6e90b5099e5e8470"
                    ]
                },
                {
                    "command": [
                        "apply Rge_minus; apply Rle_ge; left; elim H8; intros; assumption.",
                        "VernacExtend",
                        "e3d736d9bec102701f7a00a26152dcf543830637"
                    ]
                },
                {
                    "command": [
                        "unfold fct_cte; ring.",
                        "VernacExtend",
                        "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
                    ]
                },
                {
                    "command": [
                        "rewrite RiemannInt_P15.",
                        "VernacExtend",
                        "35c08b77f8955d6d3c217acb15c489b51ae58453"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; replace ((x + h0 - x) * Rabs (/ h0)) with 1.",
                        "VernacExtend",
                        "fdaec43a94b45217f92d21794c955fc0ed6a0d80"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; unfold Rdiv; apply Rmult_lt_reg_l with 2; [ prove_sup0 | rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; pattern eps at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "f667c125206bd7c77d72607614d400274916374c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right.",
                        "VernacExtend",
                        "9b60731d6b608338747f09fec19f24d12baad022"
                    ]
                },
                {
                    "command": [
                        "replace (x + h0 - x) with h0; [ idtac | ring ].",
                        "VernacExtend",
                        "4ab7cc607a75ac0356fd943863f38e3e7744a73a"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_r_sym.",
                        "VernacExtend",
                        "1c8e4cc12ed17eb612dd91541aa8d37d81cbfbbd"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; left; apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "9aca125a862c4aeaf2f8b7a5d7b68f1d6c559062"
                    ]
                },
                {
                    "command": [
                        "elim Hle; intro.",
                        "VernacExtend",
                        "bd6ba96a80e86581fe4fd04d41049bc00329f95c"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with x; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "fe47e6d62ae7bcef138d7e277137c708e86e4328"
                    ]
                },
                {
                    "command": [
                        "elim H5; symmetry ; apply Rplus_eq_reg_l with x; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "e439a1488c7f3211002fbf22af665dfcb6b31043"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt (RiemannInt_P16 (RiemannInt_P1 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x))))) * Rabs (/ h0)).",
                        "VernacExtend",
                        "d310adcc2541eb695094603a59e87d61c4dfe106"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "3b51024b593773b0da19f4076119f7a5e3345a59"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "replace (RiemannInt (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))) with (- RiemannInt (RiemannInt_P1 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x))))).",
                        "VernacExtend",
                        "7415d3d45c0bd09468131384fa912d7068538a41"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp; apply (RiemannInt_P17 (RiemannInt_P1 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))) (RiemannInt_P16 (RiemannInt_P1 (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))))); auto with real.",
                        "VernacExtend",
                        "d14b300565c7003f793fd3cb159a2a059a5eb861"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply RiemannInt_P8.",
                        "VernacExtend",
                        "e7085ee91c541e4958609167cdaf08e9b40d2785"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (RiemannInt (RiemannInt_P14 (x + h0) x (eps / 2)) * Rabs (/ h0)).",
                        "VernacExtend",
                        "4fb70087f5bb03d4bb5845e7ebd13e7ae9e777c0"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rmult_comm (Rabs (/ h0))); apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "3b51024b593773b0da19f4076119f7a5e3345a59"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "apply RiemannInt_P19.",
                        "VernacExtend",
                        "1bb5773d8e69772d666aa06facdfbf2af2a55783"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "intros; replace (f x1 + -1 * fct_cte (f x) x1) with (f x1 - f x).",
                        "VernacExtend",
                        "89820ce228dc9da7aa0b1d69ebfca259818a1715"
                    ]
                },
                {
                    "command": [
                        "unfold fct_cte; case (Req_dec x x1); intro.",
                        "VernacExtend",
                        "6467ff58348cee2f041137cf0820fd3577b96a4d"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; left; assumption.",
                        "VernacExtend",
                        "e5b7895e4398505fc7c7dbff0a5226804dc8fb88"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros; left; apply H11.",
                        "VernacExtend",
                        "ee4b1ea71c6194d7e4de95e6ef77de3595359856"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_left.",
                        "VernacExtend",
                        "e4f86365ea2cd6f894fbc670197f200cadc12a6c"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (x1 - x0); replace (x1 - x0 + x0) with x1; [ idtac | ring ].",
                        "VernacExtend",
                        "61ff9b5ed8cdaaeefb3134131c901b23fb431f88"
                    ]
                },
                {
                    "command": [
                        "replace (x1 - x0 + - (x1 - x)) with (x - x0); [ idtac | ring ].",
                        "VernacExtend",
                        "5966f8f925413b4228b1a412840678206c229ef2"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (x + h0).",
                        "VernacExtend",
                        "e5f7f105bfee8847b8ccc1fcef3d6a8abe7d4699"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_le_compat_l; apply Ropp_le_cancel.",
                        "VernacExtend",
                        "a38a951d30372c90a163a9f44e9a7cc9615bed2f"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_involutive; apply Rle_trans with (Rabs h0).",
                        "VernacExtend",
                        "56cd9a0dbb156036015ced5557f5ecc15eaeb89c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; apply RRle_abs.",
                        "VernacExtend",
                        "4ecb3e2260965d6d9df7e30c3a4c5bd460cc893a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with del; [ left; assumption | unfold del; apply Rmin_l ].",
                        "VernacExtend",
                        "26b33675895853c18ff62e313458c11d97fd49b2"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; assumption.",
                        "VernacExtend",
                        "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with x; rewrite Rplus_0_r; replace (x + (x1 - x)) with x1; [ elim H8; intros; assumption | ring ].",
                        "VernacExtend",
                        "3d4f60d5e5c70cee7b2b4470d2b9a4b788233772"
                    ]
                },
                {
                    "command": [
                        "unfold fct_cte; ring.",
                        "VernacExtend",
                        "c1359ce4cfa58d0f8a9d16e9d02c15b45dabbdf2"
                    ]
                },
                {
                    "command": [
                        "rewrite RiemannInt_P15.",
                        "VernacExtend",
                        "35c08b77f8955d6d3c217acb15c489b51ae58453"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; replace ((x - (x + h0)) * Rabs (/ h0)) with 1.",
                        "VernacExtend",
                        "9d7f57364d36531bd3743bdb970805d0e93a08e3"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; unfold Rdiv; apply Rmult_lt_reg_l with 2; [ prove_sup0 | rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; pattern eps at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "f667c125206bd7c77d72607614d400274916374c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_left.",
                        "VernacExtend",
                        "e4f86365ea2cd6f894fbc670197f200cadc12a6c"
                    ]
                },
                {
                    "command": [
                        "replace (x - (x + h0)) with (- h0); [ idtac | ring ].",
                        "VernacExtend",
                        "600e8ef6c72b9e87bace04ef870616c263b8cb0e"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_mult_distr_l_reverse; rewrite Ropp_mult_distr_r_reverse; rewrite Ropp_involutive; apply Rinv_r_sym.",
                        "VernacExtend",
                        "5ab550a599699eeaa9bc37f2ccb85cfca85b1d44"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_lt_0_compat.",
                        "VernacExtend",
                        "c16edbb68a1977d3baaa629f1e7dfb49eb169cbf"
                    ]
                },
                {
                    "command": [
                        "assert (H8 : x + h0 < x).",
                        "VernacExtend",
                        "f39df1588a6151b5e6f92fc606c96f829189f796"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with x; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "fe47e6d62ae7bcef138d7e277137c708e86e4328"
                    ]
                },
                {
                    "command": [
                        "rewrite (RiemannInt_P13 H7 (RiemannInt_P14 x (x + h0) (f x)) (RiemannInt_P10 (-1) H7 (RiemannInt_P14 x (x + h0) (f x)))) .",
                        "VernacExtend",
                        "1f03fd32c119254ed4448e8d35470dcfc4b879e0"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv, Rminus; rewrite Rmult_plus_distr_r; ring.",
                        "VernacExtend",
                        "6c2973c6c6e447bba11b5f10344e5fa8fe77f263"
                    ]
                },
                {
                    "command": [
                        "rewrite RiemannInt_P15; apply Rmult_eq_reg_l with h0; [ unfold Rdiv; rewrite (Rmult_comm h0); repeat rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ ring | assumption ] | assumption ].",
                        "VernacExtend",
                        "8531bbfa004bb8bda7ad4e63665b2210c23c92eb"
                    ]
                },
                {
                    "command": [
                        "cut (a <= x + h0).",
                        "VernacExtend",
                        "02fd858df2ccb6c94737cca4c9395f8a045016ce"
                    ]
                },
                {
                    "command": [
                        "cut (x + h0 <= b).",
                        "VernacExtend",
                        "bd6696e46ba558a51668c7ebc8f45da31e216c4b"
                    ]
                },
                {
                    "command": [
                        "intros; unfold primitive.",
                        "VernacExtend",
                        "f17a8b8207e461f2e7cc2834fc9d586b098aa7da"
                    ]
                },
                {
                    "command": [
                        "assert (H10: a <= x) by (left; assumption).",
                        "VernacExtend",
                        "83838ca0c07dec8c51d0e16a0df6df4dae686ba7"
                    ]
                },
                {
                    "command": [
                        "assert (H11: x <= b) by (left; assumption).",
                        "VernacExtend",
                        "727f3a4b85abb14bc9fb6886e961640e2aac78ea"
                    ]
                },
                {
                    "command": [
                        "decide (Rle_dec a (x + h0)) with H9; decide (Rle_dec (x + h0) b) with H8; decide (Rle_dec a x) with H10; decide (Rle_dec x b) with H11.",
                        "VernacExtend",
                        "87ecb3d944c59b7b082ca15561b9b45941d9e770"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (RiemannInt_P26 (FTC_P1 h C0 H10 H11) H7 (FTC_P1 h C0 H9 H8)); ring.",
                        "VernacExtend",
                        "d9bd5d2a3aa6026e591760079f9eba582ed8753c"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with (- x); replace (- x + (x + h0)) with h0; [ idtac | ring ].",
                        "VernacExtend",
                        "56b5f9bcfbfa660a5358409b086f7ff0169b1705"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm; apply Rle_trans with (Rabs h0).",
                        "VernacExtend",
                        "7e27beab6cff2fd00d31d354fde6b54a95411c53"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with del; [ left; assumption | unfold del; apply Rle_trans with (Rmin (b - x) (x - a)); [ apply Rmin_r | apply Rmin_l ] ].",
                        "VernacExtend",
                        "e7a9270805b369856507a0ba11d6cf6e37039030"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_cancel; apply Rplus_le_reg_l with x; replace (x + - (x + h0)) with (- h0); [ idtac | ring ].",
                        "VernacExtend",
                        "03492aaa4f8b9aa36a2932f5c5c1acd8e2fadabc"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs h0); [ rewrite <- Rabs_Ropp; apply RRle_abs | apply Rle_trans with del; [ left; assumption | unfold del; apply Rle_trans with (Rmin (b - x) (x - a)); apply Rmin_r ] ].",
                        "VernacExtend",
                        "f53136f50bfd81ec42910fcf3493271b08548361"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P29",
            "line_nb": 1558,
            "steps": [
                {
                    "command": [
                        "intro f; intros; unfold antiderivative; split; try assumption; intros; assert (H0 := RiemannInt_P28 h C0 H); assert (H1 : derivable_pt (primitive h (FTC_P1 h C0)) x); [ unfold derivable_pt; split with (f x); apply H0 | split with H1; symmetry ; apply derive_pt_eq_0; apply H0 ].",
                        "VernacExtend",
                        "cde523266d3c3a45dc2a1ffe71b8c3eff5dfbbc4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P30",
            "line_nb": 1561,
            "steps": [
                {
                    "command": [
                        "intros; split with (primitive H (FTC_P1 H H0)); apply RiemannInt_P29.",
                        "VernacExtend",
                        "2fc6b559c0a378926e82f22720077dfe845706b9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P31",
            "line_nb": 1565,
            "steps": [
                {
                    "command": [
                        "intro f; intros; unfold antiderivative; split; try assumption; intros; split with (diff0 f x); reflexivity.",
                        "VernacExtend",
                        "90ca67f0176ba28993bf59fe72050b21f39bcf1b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P32",
            "line_nb": 1568,
            "steps": [
                {
                    "command": [
                        "intro f; intros; destruct (Rle_dec a b) as [Hle|Hnle]; [ apply continuity_implies_RiemannInt; try assumption; intros; apply (cont1 f) | assert (H : b <= a); [ auto with real | apply RiemannInt_P1; apply continuity_implies_RiemannInt; try assumption; intros; apply (cont1 f) ] ].",
                        "VernacExtend",
                        "32ce8dcf2e2216a7b6d83dbf8d55a7da290c48ba"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_P33",
            "line_nb": 1571,
            "steps": [
                {
                    "command": [
                        "intro f; intros; assert (H0 : forall x:R, a <= x <= b -> continuity_pt (derive f (diff0 f)) x).",
                        "VernacExtend",
                        "a6b602e6fee51b4a009ba678c00cfcbcde720d8b"
                    ]
                },
                {
                    "command": [
                        "intros; apply (cont1 f).",
                        "VernacExtend",
                        "aac55baaac8f0050b01e599221f72350e9fa0eb1"
                    ]
                },
                {
                    "command": [
                        "rewrite (RiemannInt_P20 H (FTC_P1 H H0) pr); assert (H1 := RiemannInt_P29 H H0); assert (H2 := RiemannInt_P31 f H); elim (antiderivative_Ucte (derive f (diff0 f)) _ _ _ _ H1 H2); intros C H3; repeat rewrite H3; [ ring | split; [ right; reflexivity | assumption ] | split; [ assumption | right; reflexivity ] ].",
                        "VernacExtend",
                        "82fb76005438240380686e9eba22ab6c1ec1ee96"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "FTC_Riemann",
            "line_nb": 1576,
            "steps": [
                {
                    "command": [
                        "intro f; intros; destruct (Rle_dec a b) as [Hle|Hnle]; [ apply RiemannInt_P33; assumption | assert (H : b <= a); [ auto with real | assert (H0 := RiemannInt_P1 pr); rewrite (RiemannInt_P8 pr H0); rewrite (RiemannInt_P33 _ H0 H); ring ] ].",
                        "VernacExtend",
                        "61c07fe29e3cea7da2d96a5bccde3928436f5bc8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RiemannInt_const_bound",
            "line_nb": 1579,
            "steps": [
                {
                    "command": [
                        "intros f a b l u ri ab intf.",
                        "VernacExtend",
                        "7ebbc948b97c3149ad9d8e5b91c331b82b1a37c6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- !(fun l => RiemannInt_P15 (RiemannInt_P14 a b l)).",
                        "VernacExtend",
                        "e9f1a4065cc996d1a6f66d6bfc307c580403a430"
                    ]
                },
                {
                    "command": [
                        "split; apply RiemannInt_P19; try assumption; intros x intx; unfold fct_cte; destruct (intf x intx); assumption.",
                        "VernacExtend",
                        "03d96cd761bc9fdba5caf03066f1f717cefffab3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_integrable_scal",
            "line_nb": 1584,
            "steps": [
                {
                    "command": [
                        "intros f a b k ri.",
                        "VernacExtend",
                        "2ba064722b6934488820b9f453b688a591ecbbae"
                    ]
                },
                {
                    "command": [
                        "apply Riemann_integrable_ext with (f := fun x => 0 + k * f x).",
                        "VernacExtend",
                        "bacd1162bd0fe1b709c84a8bcd04220c39e545a3"
                    ]
                },
                {
                    "command": [
                        "intros; ring.",
                        "VernacExtend",
                        "a0e0ba17c737405b1d4c2a120d3717441df76616"
                    ]
                },
                {
                    "command": [
                        "apply (RiemannInt_P10 _ (RiemannInt_P14 _ _ 0) ri).",
                        "VernacExtend",
                        "5137a63874657addadbba45ba73d04f6f7e5d72d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Riemann_integrable_Ropp",
            "line_nb": 1591,
            "steps": [
                {
                    "command": [
                        "intros ff a b h.",
                        "VernacExtend",
                        "372923bff6000f1cfd017411270cb9cd5fac0d8c"
                    ]
                },
                {
                    "command": [
                        "apply Riemann_integrable_ext with (f := fun x => (-1) * ff x).",
                        "VernacExtend",
                        "8eef63bed16109522c19453aa153e0eb8a87bdb4"
                    ]
                },
                {
                    "command": [
                        "intros; ring.",
                        "VernacExtend",
                        "a0e0ba17c737405b1d4c2a120d3717441df76616"
                    ]
                },
                {
                    "command": [
                        "apply Riemann_integrable_scal; assumption.",
                        "VernacExtend",
                        "14c72bb8f84cfdf85c89c5aee4f346ef6e64146d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}