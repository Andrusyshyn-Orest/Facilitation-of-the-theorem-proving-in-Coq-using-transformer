{
    "filename": "theories/Reals/Ratan.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Lra.",
            "VernacRequire",
            "6dd90563c90485cd5a8a8b957af14c96d3b4cbc1"
        ],
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import PSeries_reg.",
            "VernacRequire",
            "87af597dd6052306d2795970a7457ae85e8b680b"
        ],
        [
            "Require Import Rtrigo1.",
            "VernacRequire",
            "598baa2d58df0ffe31096944ae833778167e93eb"
        ],
        [
            "Require Import Ranalysis_reg.",
            "VernacRequire",
            "4618d6bc6e973fd059d7ae3ba7a9096fc3aa83f2"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import AltSeries.",
            "VernacRequire",
            "7b92e5e53fba8fd2622c769d50ccc7b0e6d4ad46"
        ],
        [
            "Require Import Rseries.",
            "VernacRequire",
            "7a432dd14e4529f426efb08dc0832c62a8dcc16b"
        ],
        [
            "Require Import SeqProp.",
            "VernacRequire",
            "a37c3bf41f1f017811a12d99565cebd0c11a7976"
        ],
        [
            "Require Import Ranalysis5.",
            "VernacRequire",
            "dd6a54674c14d83ab110ffa1f6e098a02098cbb4"
        ],
        [
            "Require Import SeqSeries.",
            "VernacRequire",
            "379ec54d32465fe6d151cce8474fb7ff733028bb"
        ],
        [
            "Require Import PartSum.",
            "VernacRequire",
            "615de8ef0ed75bdb68bd5486514f11be1837ffd8"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Lemma Ropp_div : forall x y, -x/y = -(x/y).",
            "VernacStartTheoremProof",
            "7e3ab19136bf7566357401522a183c57c524c591"
        ],
        [
            "intros x y; unfold Rdiv; rewrite <-Ropp_mult_distr_l_reverse; reflexivity.",
            "VernacExtend",
            "49ac996db5ff189ff1a2b1ae9f239e0896b99bf4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pos_half_prf : 0 < /2.",
            "VernacDefinition",
            "758bb49f03fa344ce1dab02d99f4170662e89aa8"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pos_half := mkposreal (/2) pos_half_prf.",
            "VernacDefinition",
            "cea0f5cb0ad83f50de45f202a32bbfbd93de27dc"
        ],
        [
            "Lemma Boule_half_to_interval : forall x , Boule (/2) pos_half x -> 0 <= x <= 1.",
            "VernacStartTheoremProof",
            "464fe316c96578914e0d73aae7fdeeb7024158b7"
        ],
        [
            "unfold Boule, pos_half; simpl.",
            "VernacExtend",
            "a8a416bfcee0e9357a58a2183806f3c4bf772527"
        ],
        [
            "intros x b; apply Rabs_def2 in b; destruct b; split; lra.",
            "VernacExtend",
            "a3a7599c71f4702adb6d4a9b0087d17f3c1e6144"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Boule_lt : forall c r x, Boule c r x -> Rabs x < Rabs c + r.",
            "VernacStartTheoremProof",
            "1bbf0787c6868334f21c5063a9655dc53c231467"
        ],
        [
            "unfold Boule; intros c r x h.",
            "VernacExtend",
            "7da91c7d19a67cab33a5cc06b44af93d49406633"
        ],
        [
            "apply Rabs_def2 in h; destruct h; apply Rabs_def1; (destruct (Rle_lt_dec 0 c);[rewrite Rabs_pos_eq; lra | rewrite <- Rabs_Ropp, Rabs_pos_eq; lra]).",
            "VernacExtend",
            "284de58243ed50b02b777feb3d2fbe8c67e5303f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Un_cv_ext : forall un vn, (forall n, un n = vn n) -> forall l, Un_cv un l -> Un_cv vn l.",
            "VernacStartTheoremProof",
            "832670212d987cc2266d717bd69902f91b557375"
        ],
        [
            "intros un vn quv l P eps ep; destruct (P eps ep) as [N Pn]; exists N.",
            "VernacExtend",
            "58ee533efe8362acac42a02126aaaadb88f2782f"
        ],
        [
            "intro n; rewrite <- quv; apply Pn.",
            "VernacExtend",
            "ce9b289d861f4a55473d180b3d79a47c981352f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Alt_first_term_bound :forall f l N n, Un_decreasing f -> Un_cv f 0 -> Un_cv (sum_f_R0 (tg_alt f)) l -> (N <= n)%nat -> R_dist (sum_f_R0 (tg_alt f) n) l <= f N.",
            "VernacStartTheoremProof",
            "f4323ec534dd91c6dbdf77cdc5670d59510b9a5b"
        ],
        [
            "intros f l.",
            "VernacExtend",
            "d1ed433971f119a9e5f6d68101463da45df3f95b"
        ],
        [
            "assert (WLOG : forall n P, (forall k, (0 < k)%nat -> P k) -> ((forall k, (0 < k)%nat -> P k) -> P 0%nat) -> P n).",
            "VernacExtend",
            "d4171eb83a41f1770bd265136d3a9aa0fdf75ce7"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "intros [ | n] P Hs Ho;[solve[apply Ho, Hs] | apply Hs; auto with arith].",
            "VernacExtend",
            "f947002fddba58bc8bce4227469a2fbd60965443"
        ],
        [
            "intros N; pattern N; apply WLOG; clear N.",
            "VernacExtend",
            "32ddc8b359d28c48de0e9b4f98c2c23175b17fda"
        ],
        [
            "intros [ | N] Npos n decr to0 cv nN.",
            "VernacExtend",
            "354091bf68e4e41f734c78b4bd2268ff70e90337"
        ],
        [
            "clear -Npos; elimtype False; omega.",
            "VernacExtend",
            "5c497d7c4f69dc811c95429671d59cdbe1aac3d4"
        ],
        [
            "assert (decr' : Un_decreasing (fun i => f (S N + i)%nat)).",
            "VernacExtend",
            "cc90256bfbd611034cfb3b1831d2d1ef7d9824ff"
        ],
        [
            "intros k; replace (S N+S k)%nat with (S (S N+k)) by ring.",
            "VernacExtend",
            "ad334a52b93159a66de2d6119440c2ba9da1b641"
        ],
        [
            "apply (decr (S N + k)%nat).",
            "VernacExtend",
            "22e44f2881c2009b3f10adbb0cca90ea05e331a9"
        ],
        [
            "assert (to' : Un_cv (fun i => f (S N + i)%nat) 0).",
            "VernacExtend",
            "7cf46b124171f4d42c5c479504b533936b2a379d"
        ],
        [
            "intros eps ep; destruct (to0 eps ep) as [M PM].",
            "VernacExtend",
            "7ec15de35e28ae89879ffea8d0184f71c4e63bdc"
        ],
        [
            "exists M; intros k kM; apply PM; omega.",
            "VernacExtend",
            "818b27f8c483257ecdc585ebd15190ce08ebf181"
        ],
        [
            "assert (cv' : Un_cv (sum_f_R0 (tg_alt (fun i => ((-1) ^ S N * f(S N + i)%nat)))) (l - sum_f_R0 (tg_alt f) N)).",
            "VernacExtend",
            "bcb072be7b57d17239454142fcf5ff1e190f1f14"
        ],
        [
            "intros eps ep; destruct (cv eps ep) as [M PM]; exists M.",
            "VernacExtend",
            "75bfe0ff1e11147e09ac1440fa1567dc25000674"
        ],
        [
            "intros n' nM.",
            "VernacExtend",
            "0a943dc76a4f10bc076828d8e136af3d466dda6f"
        ],
        [
            "match goal with |- ?C => set (U := C) end.",
            "VernacExtend",
            "5bc8619badb8a0804dcb6b25d1a86fc53cfc99ed"
        ],
        [
            "assert (nM' : (n' + S N >= M)%nat) by omega.",
            "VernacExtend",
            "02c4259957bff8606c1bfcd321e78c38936a0247"
        ],
        [
            "generalize (PM _ nM'); unfold R_dist.",
            "VernacExtend",
            "aa1e475128293baa66c5968324e7b3a745d481cb"
        ],
        [
            "rewrite (tech2 (tg_alt f) N (n' + S N)).",
            "VernacExtend",
            "4a6eeb1496b51dc31268a4be4d7ae2d0563caa86"
        ],
        [
            "assert (t : forall a b c, (a + b) - c = b - (c - a)) by (intros; ring).",
            "VernacExtend",
            "368789a52553060996e1ec0111ad8971698c2978"
        ],
        [
            "rewrite t; clear t; unfold U, R_dist; clear U.",
            "VernacExtend",
            "a0fe3b695505613217a8e5172ffe24c753d4dffe"
        ],
        [
            "replace (n' + S N - S N)%nat with n' by omega.",
            "VernacExtend",
            "50b164da9efdeef68e7283c94e79858c2b8fe7b2"
        ],
        [
            "rewrite <- (sum_eq (tg_alt (fun i => (-1) ^ S N * f(S N + i)%nat))).",
            "VernacExtend",
            "64194ebb5374d889039089bde5c392d6637d3556"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "intros i _; unfold tg_alt.",
            "VernacExtend",
            "7576cd4aecf97ea3f2baa5e16c77bbae79731dd5"
        ],
        [
            "rewrite <- Rmult_assoc, <- pow_add, !(plus_comm i); reflexivity.",
            "VernacExtend",
            "34e1dda948902a7bd0baf108baaedad9e9a3e772"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assert (cv'' : Un_cv (sum_f_R0 (tg_alt (fun i => f (S N + i)%nat))) ((-1) ^ S N * (l - sum_f_R0 (tg_alt f) N))).",
            "VernacExtend",
            "3f9166dee6e8193262d1e0f022b5b63b1920b60f"
        ],
        [
            "apply (Un_cv_ext (fun n => (-1) ^ S N * sum_f_R0 (tg_alt (fun i : nat => (-1) ^ S N * f (S N + i)%nat)) n)).",
            "VernacExtend",
            "e825666fdf2de46e66dc180125b71ac40abba7c5"
        ],
        [
            "intros n0; rewrite scal_sum; apply sum_eq; intros i _.",
            "VernacExtend",
            "722dc3524e515a0bb6dbc9025003e248f643b6a3"
        ],
        [
            "unfold tg_alt; ring_simplify; replace (((-1) ^ S N) ^ 2) with 1.",
            "VernacExtend",
            "0ae500b72dc176586292ba3400cf33fedb88c1dd"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "rewrite <- pow_mult, mult_comm, pow_mult; replace ((-1) ^2) with 1 by ring.",
            "VernacExtend",
            "c5877c3f4aee3ac69158e593ddbab13f4710883a"
        ],
        [
            "rewrite pow1; reflexivity.",
            "VernacExtend",
            "4fc557b4918accf3ba86555631ea422e2b8f92ec"
        ],
        [
            "apply CV_mult.",
            "VernacExtend",
            "7df85077b85eadac24b572b1d2ba1d223ec90eca"
        ],
        [
            "solve[intros eps ep; exists 0%nat; intros; rewrite R_dist_eq; auto].",
            "VernacExtend",
            "cb131baaf4217e3b3f5e7c8d2130b49d4162595a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct (even_odd_cor N) as [p [Neven | Nodd]].",
            "VernacExtend",
            "c622f9fdc63384a57c3ae1def4d093569c971aeb"
        ],
        [
            "rewrite Neven; destruct (alternated_series_ineq _ _ p decr to0 cv) as [B C].",
            "VernacExtend",
            "bf8226f8ba9c037db62f602b4a72ed6e0e599670"
        ],
        [
            "case (even_odd_cor n) as [p' [neven | nodd]].",
            "VernacExtend",
            "f2f968ed3eb13aaf71d89c754d1170b1d206aa73"
        ],
        [
            "rewrite neven.",
            "VernacExtend",
            "8cf8e31ea9bd6b952df5bba51c8d74b5206bbb68"
        ],
        [
            "destruct (alternated_series_ineq _ _ p' decr to0 cv) as [D E].",
            "VernacExtend",
            "e25a052e6549d84265056d3f568109c2dc09b807"
        ],
        [
            "unfold R_dist; rewrite Rabs_pos_eq;[ | lra].",
            "VernacExtend",
            "1375b2fa294549d425903962581d4e1bed880e60"
        ],
        [
            "assert (dist : (p <= p')%nat) by omega.",
            "VernacExtend",
            "e9ff602694b49475805bc21a444d3746a63c1210"
        ],
        [
            "assert (t := decreasing_prop _ _ _ (CV_ALT_step1 f decr) dist).",
            "VernacExtend",
            "5d554aebe30fd14309f7b1f3143aa24ed05f8470"
        ],
        [
            "apply Rle_trans with (sum_f_R0 (tg_alt f) (2 * p) - l).",
            "VernacExtend",
            "8503826d140f5a50b1f1af46f6fd66408c2578b1"
        ],
        [
            "unfold Rminus; apply Rplus_le_compat_r; exact t.",
            "VernacExtend",
            "65b3d466fdbf37f615d51b958d5886d0c5ab0def"
        ],
        [
            "match goal with _ : ?a <= l, _ : l <= ?b |- _ => replace (f (S (2 * p))) with (b - a) by (rewrite tech5; unfold tg_alt; rewrite pow_1_odd; ring); lra end.",
            "VernacExtend",
            "d8ec2932be03076be386426fd594fcb6ecb7b00b"
        ],
        [
            "rewrite nodd; destruct (alternated_series_ineq _ _ p' decr to0 cv) as [D E].",
            "VernacExtend",
            "eb21e629b82741bfd563155d096df78558c0ef2f"
        ],
        [
            "unfold R_dist; rewrite <- Rabs_Ropp, Rabs_pos_eq, Ropp_minus_distr; [ | lra].",
            "VernacExtend",
            "5c4732498943e8754c6cc77bb04d89f946210185"
        ],
        [
            "assert (dist : (p <= p')%nat) by omega.",
            "VernacExtend",
            "e9ff602694b49475805bc21a444d3746a63c1210"
        ],
        [
            "apply Rle_trans with (l - sum_f_R0 (tg_alt f) (S (2 * p))).",
            "VernacExtend",
            "3a24c4e4764629fe5f4a0dfb0a85c5a791d95ecb"
        ],
        [
            "unfold Rminus; apply Rplus_le_compat_l, Ropp_le_contravar.",
            "VernacExtend",
            "20eb1f81401e021c19a910ea462b3e2231fd5d54"
        ],
        [
            "solve[apply Rge_le, (growing_prop _ _ _ (CV_ALT_step0 f decr) dist)].",
            "VernacExtend",
            "8277e703247a42324c19a15ec117452fbf6c4c42"
        ],
        [
            "unfold Rminus; rewrite tech5, Ropp_plus_distr, <- Rplus_assoc.",
            "VernacExtend",
            "50b5444b1cdc2842ee13279a167797bce0b70572"
        ],
        [
            "unfold tg_alt at 2; rewrite pow_1_odd; lra.",
            "VernacExtend",
            "a61d5263cea041a8c1901c4d9b749e6ba59932db"
        ],
        [
            "rewrite Nodd; destruct (alternated_series_ineq _ _ p decr to0 cv) as [B _].",
            "VernacExtend",
            "d91e927f3ba380f7a32eb086e68fe17297761f2c"
        ],
        [
            "destruct (alternated_series_ineq _ _ (S p) decr to0 cv) as [_ C].",
            "VernacExtend",
            "2bf0fb92dc9d099bfd1051b32cd9860584b71d01"
        ],
        [
            "assert (keep : (2 * S p = S (S ( 2 * p)))%nat) by ring.",
            "VernacExtend",
            "f59f277dd6e606efabedcf4f907ef56a55b84a70"
        ],
        [
            "case (even_odd_cor n) as [p' [neven | nodd]].",
            "VernacExtend",
            "f2f968ed3eb13aaf71d89c754d1170b1d206aa73"
        ],
        [
            "rewrite neven; destruct (alternated_series_ineq _ _ p' decr to0 cv) as [D E].",
            "VernacExtend",
            "26257b3c50b17fc0305994a47ba39f78465d157a"
        ],
        [
            "unfold R_dist; rewrite Rabs_pos_eq;[ | lra].",
            "VernacExtend",
            "1375b2fa294549d425903962581d4e1bed880e60"
        ],
        [
            "assert (dist : (S p < S p')%nat) by omega.",
            "VernacExtend",
            "231c7d468095aa10006c50ad49589ae5854791d4"
        ],
        [
            "apply Rle_trans with (sum_f_R0 (tg_alt f) (2 * S p) - l).",
            "VernacExtend",
            "ab64b2ecfc986361e7d413968a36c2e158cd73d4"
        ],
        [
            "unfold Rminus; apply Rplus_le_compat_r, (decreasing_prop _ _ _ (CV_ALT_step1 f decr)).",
            "VernacExtend",
            "036446b21d1356dfea1669371e08b4ea2b421add"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "rewrite keep, tech5; unfold tg_alt at 2; rewrite <- keep, pow_1_even.",
            "VernacExtend",
            "22a182b06afd11c0814fb7d731fe0580e80be74c"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "rewrite nodd; destruct (alternated_series_ineq _ _ p' decr to0 cv) as [D E].",
            "VernacExtend",
            "eb21e629b82741bfd563155d096df78558c0ef2f"
        ],
        [
            "unfold R_dist; rewrite <- Rabs_Ropp, Rabs_pos_eq;[ | lra].",
            "VernacExtend",
            "352b01f038844ed097ab295e0ccf7f5522a6da4a"
        ],
        [
            "rewrite Ropp_minus_distr.",
            "VernacExtend",
            "03410ea29af67bdcfa7393931606c01ed23d7394"
        ],
        [
            "apply Rle_trans with (l - sum_f_R0 (tg_alt f) (S (2 * p))).",
            "VernacExtend",
            "3a24c4e4764629fe5f4a0dfb0a85c5a791d95ecb"
        ],
        [
            "unfold Rminus; apply Rplus_le_compat_l, Ropp_le_contravar, Rge_le, (growing_prop _ _ _ (CV_ALT_step0 f decr)); omega.",
            "VernacExtend",
            "9b6790e348c80d7464c81fc75a60c7eedd045f65"
        ],
        [
            "generalize C; rewrite keep, tech5; unfold tg_alt.",
            "VernacExtend",
            "96d688716355deb0c65acfa3265a1f2886cce2d4"
        ],
        [
            "rewrite <- keep, pow_1_even.",
            "VernacExtend",
            "825bd61dbf70bbe8b6c68d119b84929f758d0e19"
        ],
        [
            "assert (t : forall a b c, a <= b + 1 * c -> a - b <= c) by (intros; lra).",
            "VernacExtend",
            "7ecf3c99a9e49bf621b4253bd291d30f95c96ca8"
        ],
        [
            "solve[apply t].",
            "VernacExtend",
            "8db9f802c21822d59faea17863d618991dfbcb0d"
        ],
        [
            "clear WLOG; intros Hyp [ | n] decr to0 cv _.",
            "VernacExtend",
            "879e9e6f82ccc53833df06029e183727d36e698b"
        ],
        [
            "generalize (alternated_series_ineq f l 0 decr to0 cv).",
            "VernacExtend",
            "77edd72d2e24d8debd3bd49fa74fcb261c000872"
        ],
        [
            "unfold R_dist, tg_alt; simpl; rewrite !Rmult_1_l, !Rmult_1_r.",
            "VernacExtend",
            "c7feb79827c8f7c3d9a24fad212cd565ca6467b0"
        ],
        [
            "assert (f 1%nat <= f 0%nat) by apply decr.",
            "VernacExtend",
            "cabeb5841d1957f4a83e275ef0f89a7886f76001"
        ],
        [
            "intros [A B]; rewrite Rabs_pos_eq; lra.",
            "VernacExtend",
            "bf2ceeb001277955ffaa24515d97ecbf8662a732"
        ],
        [
            "apply Rle_trans with (f 1%nat).",
            "VernacExtend",
            "98c5134d9f726c1c0b1a439c4b3c9ed29ad509e5"
        ],
        [
            "apply (Hyp 1%nat (le_n 1) (S n) decr to0 cv).",
            "VernacExtend",
            "fd95182ea633fb62cb563c85222bb4466488ceef"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "solve[apply decr].",
            "VernacExtend",
            "bf100751824a846ad9fa51bde0ba588bcd3a4898"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Alt_CVU : forall (f : nat -> R -> R) g h c r, (forall x, Boule c r x ->Un_decreasing (fun n => f n x)) -> (forall x, Boule c r x -> Un_cv (fun n => f n x) 0) -> (forall x, Boule c r x -> Un_cv (sum_f_R0 (tg_alt (fun i => f i x))) (g x)) -> (forall x n, Boule c r x -> f n x <= h n) -> (Un_cv h 0) -> CVU (fun N x => sum_f_R0 (tg_alt (fun i => f i x)) N) g c r.",
            "VernacStartTheoremProof",
            "c8a970f5a6e01680d750a72921e24f333b7cafcf"
        ],
        [
            "intros f g h c r decr to0 to_g bound bound0 eps ep.",
            "VernacExtend",
            "223eeecc97a47887085e82b1a682d2cdb22872d8"
        ],
        [
            "assert (ep' : 0 <eps/2) by lra.",
            "VernacExtend",
            "8e6a7ac6c6ff158629ba213cbfd05d3dc0c7a5b9"
        ],
        [
            "destruct (bound0 _ ep) as [N Pn]; exists N.",
            "VernacExtend",
            "527e98fefbae31975874da5e5367c894f3330c18"
        ],
        [
            "intros n y nN dy.",
            "VernacExtend",
            "3f830a7b34f5a5be29adb57690b5989fc914106f"
        ],
        [
            "rewrite <- Rabs_Ropp, Ropp_minus_distr; apply Rle_lt_trans with (f n y).",
            "VernacExtend",
            "81c1830c06630295ef3790692152efca26d58bdc"
        ],
        [
            "solve[apply (Alt_first_term_bound (fun i => f i y) (g y) n n); auto].",
            "VernacExtend",
            "0dc994ea889b99525dba78ad7785bc95cf5f0914"
        ],
        [
            "apply Rle_lt_trans with (h n).",
            "VernacExtend",
            "ce09675dd3443ba33602c0ad483ed3952d74a7cf"
        ],
        [
            "apply bound; assumption.",
            "VernacExtend",
            "e8d297b74f3c097453aee75510c762e969db36c9"
        ],
        [
            "clear - nN Pn.",
            "VernacExtend",
            "098d983e95e057d0a633517843659bf9ba8fc5df"
        ],
        [
            "generalize (Pn _ nN); unfold R_dist; rewrite Rminus_0_r; intros t.",
            "VernacExtend",
            "c69cdc758c319560c49d7fd1a9981dbf31a4d211"
        ],
        [
            "apply Rabs_def2 in t; tauto.",
            "VernacExtend",
            "00ff91b58f13266ff4b85615d3af094a429c41ff"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pow2_ge_0 : forall x, 0 <= x ^ 2.",
            "VernacStartTheoremProof",
            "08ea3f484d31035335579d93539e8cea1dd3a5b0"
        ],
        [
            "intros x; destruct (Rle_lt_dec 0 x).",
            "VernacExtend",
            "d2b891a31ae2980d355b4bdb27380cdf3721cb4e"
        ],
        [
            "replace (x ^ 2) with (x * x) by field.",
            "VernacExtend",
            "09610ce12c2a3b363c4c249b6815e1bb3cb8e7e9"
        ],
        [
            "apply Rmult_le_pos; assumption.",
            "VernacExtend",
            "edb97fa47e3a1100be297f87ce9b4dde910909cb"
        ],
        [
            "replace (x ^ 2) with ((-x) * (-x)) by field.",
            "VernacExtend",
            "5abf75d1c01528353cc238ec56792191076186dd"
        ],
        [
            "apply Rmult_le_pos; lra.",
            "VernacExtend",
            "2443e77eaa3899fcc0dc3f297814b024361367ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pow2_abs : forall x, Rabs x ^ 2 = x ^ 2.",
            "VernacStartTheoremProof",
            "7f754a711d0d134f3299d585bbca5d1654f22e5d"
        ],
        [
            "intros x; destruct (Rle_lt_dec 0 x).",
            "VernacExtend",
            "d2b891a31ae2980d355b4bdb27380cdf3721cb4e"
        ],
        [
            "rewrite Rabs_pos_eq;[field | assumption].",
            "VernacExtend",
            "32db583e98469b7aabce085ffd4a318511700285"
        ],
        [
            "rewrite <- Rabs_Ropp, Rabs_pos_eq;[field | lra].",
            "VernacExtend",
            "dae17d8b84ee4ff6c7b290b1dede485a6f810f6a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_tan : forall x, -PI/2 < x < PI/2 -> derivable_pt tan x.",
            "VernacStartTheoremProof",
            "ab328b146c8f44c279d1f714d489e2bd51c81ff6"
        ],
        [
            "intros x xint.",
            "VernacExtend",
            "349cbc69798305bbf056aeb8de108b307bdf41f5"
        ],
        [
            "unfold derivable_pt, tan.",
            "VernacExtend",
            "f7f0b2fdbca73f57cb0deee3befa54251fc0e6a0"
        ],
        [
            "apply derivable_pt_div ; [reg | reg | ].",
            "VernacExtend",
            "a91aa13c6b9633a8b07db5194090238d51a68e50"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "unfold Rgt ; apply cos_gt_0; [unfold Rdiv; rewrite <- Ropp_mult_distr_l_reverse; fold (-PI/2) |];tauto.",
            "VernacExtend",
            "b269d9ca089d859b54e7c81c08355287ce5241b5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_tan : forall (x:R), forall (Pr1: -PI/2 < x < PI/2), derive_pt tan x (derivable_pt_tan x Pr1) = 1 + (tan x)^2.",
            "VernacStartTheoremProof",
            "91810ff7184afe63b33deba9e2d1013b74bed0c5"
        ],
        [
            "intros x pr.",
            "VernacExtend",
            "e46d7cb668ac3a85aef6bdd8ea509cc588edaddc"
        ],
        [
            "assert (cos x <> 0).",
            "VernacExtend",
            "edc80748d1a3f8295deb11320a5e313ec2af7713"
        ],
        [
            "apply Rgt_not_eq, cos_gt_0; rewrite <- ?Ropp_div; tauto.",
            "VernacExtend",
            "654e6bb3d5dc501dc1d06c3a2923269ba509600d"
        ],
        [
            "unfold tan; reg; unfold pow, Rsqr; field; assumption.",
            "VernacExtend",
            "8150a6ca4276b5dd27c7961377f79e6e346e05c8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_increasing_interv : forall (a b:R) (f:R -> R), a < b -> forall (pr:forall x, a < x < b -> derivable_pt f x), (forall t:R, forall (t_encad : a < t < b), 0 < derive_pt f t (pr t t_encad)) -> forall x y:R, a < x < b -> a < y < b -> x < y -> f x < f y.",
            "VernacStartTheoremProof",
            "74b19162606a1fa693aff778c8a0631e84a48175"
        ],
        [
            "intros a b f a_lt_b pr Df_gt_0 x y x_encad y_encad x_lt_y.",
            "VernacExtend",
            "77699e276dc2296c40589bf3c048c877dc782109"
        ],
        [
            "assert (derivable_id_interv : forall c : R, x < c < y -> derivable_pt id c).",
            "VernacExtend",
            "5757402577b513c3df9339de61124af356696445"
        ],
        [
            "intros ; apply derivable_pt_id.",
            "VernacExtend",
            "938ad5252ca2e0b1fd31017c21bbeb8e37bb4503"
        ],
        [
            "assert (derivable_f_interv : forall c : R, x < c < y -> derivable_pt f c).",
            "VernacExtend",
            "41af0c0b61716a87910e454bb0f4554b47a532f4"
        ],
        [
            "intros c c_encad.",
            "VernacExtend",
            "3ada1aced4f6405cb678a09a8c79393a0281c10c"
        ],
        [
            "apply pr.",
            "VernacExtend",
            "e564d48317d343abd9d9ecff47e1ad6fa98bc4c7"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_trans with (r2:=x) ; [exact (proj1 x_encad) | exact (proj1 c_encad)].",
            "VernacExtend",
            "4c8ff75c919996bc41d7cf3a8b0328227afdc4e3"
        ],
        [
            "apply Rlt_trans with (r2:=y) ; [exact (proj2 c_encad) | exact (proj2 y_encad)].",
            "VernacExtend",
            "807ef62802399f2bb17be0254d69702fc1cd16d0"
        ],
        [
            "assert (f_cont_interv : forall c : R, x <= c <= y -> continuity_pt f c).",
            "VernacExtend",
            "c03e167c26a73c05c5215aaec6590db35546c848"
        ],
        [
            "intros c c_encad; apply derivable_continuous_pt ; apply pr.",
            "VernacExtend",
            "124be84b8343cf2493f2cf2c66978f08baf48e16"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le_trans with (r2:=x) ; [exact (proj1 x_encad) | exact (proj1 c_encad)].",
            "VernacExtend",
            "193c4bc5ace41bce50036532e526b9c9b503e5d9"
        ],
        [
            "apply Rle_lt_trans with (r2:=y) ; [ exact (proj2 c_encad) | exact (proj2 y_encad)].",
            "VernacExtend",
            "44440373debb96cccffb4167b707a0badc124910"
        ],
        [
            "assert (id_cont_interv : forall c : R, x <= c <= y -> continuity_pt id c).",
            "VernacExtend",
            "0f90df1c35a37cec5d7177927b4d7ea6cae44bc9"
        ],
        [
            "intros ; apply derivable_continuous_pt ; apply derivable_pt_id.",
            "VernacExtend",
            "e0fd3bbbfdc33dad0ab449f25672d2d5185b8d92"
        ],
        [
            "elim (MVT f id x y derivable_f_interv derivable_id_interv x_lt_y f_cont_interv id_cont_interv).",
            "VernacExtend",
            "1dfa4e0f5c735ffaa65eaeffc5e683a998ea0523"
        ],
        [
            "intros c Temp ; elim Temp ; clear Temp ; intros Pr eq.",
            "VernacExtend",
            "c06899b89cfc14049de11a36a28b6dfdff338dc8"
        ],
        [
            "replace (id y - id x) with (y - x) in eq by intuition.",
            "VernacExtend",
            "77f63109f3291ed0c6af76a89311f0b4c69de4d0"
        ],
        [
            "replace (derive_pt id c (derivable_id_interv c Pr)) with 1 in eq.",
            "VernacExtend",
            "6ea23269cde1491e7cbae529ad0d8645902fdb9d"
        ],
        [
            "assert (Hyp : f y - f x > 0).",
            "VernacExtend",
            "43bfe18aa36cf5e68c37266da64aa137f997965b"
        ],
        [
            "rewrite Rmult_1_r in eq.",
            "VernacExtend",
            "59ecdba0605caa1e4441fc54615f4018fd41b037"
        ],
        [
            "rewrite <- eq.",
            "VernacExtend",
            "9f4f32f6d5e1e672a3991900f767f7aa54bbf4ac"
        ],
        [
            "apply Rmult_gt_0_compat.",
            "VernacExtend",
            "d033236f2dabdc6d48d6d6aaa1c3030ba9186536"
        ],
        [
            "apply Rgt_minus ; assumption.",
            "VernacExtend",
            "3812192e62acc9941a76d58a727122b68e6f5f0a"
        ],
        [
            "assert (c_encad2 : a <= c < b).",
            "VernacExtend",
            "b6fb9d5506f0ee1195f5e82117a31ac9cde6242d"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le ; apply Rlt_trans with (r2:=x) ; [exact (proj1 x_encad) | exact (proj1 Pr)].",
            "VernacExtend",
            "f8e1f470bba5b644c8ef90be5e587789782f33ed"
        ],
        [
            "apply Rle_lt_trans with (r2:=y) ; [apply Rlt_le ; exact (proj2 Pr) | exact (proj2 y_encad)].",
            "VernacExtend",
            "32f266f4acfa19423862d042ef7f54d25bb3b166"
        ],
        [
            "assert (c_encad : a < c < b).",
            "VernacExtend",
            "ebbbb6718fd16fe12e0f1b59631fc65b27b73efe"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_trans with (r2:=x) ; [exact (proj1 x_encad) | exact (proj1 Pr)].",
            "VernacExtend",
            "570622c56e60b6d0666e6ee7fdf3a45845d8b10b"
        ],
        [
            "apply Rle_lt_trans with (r2:=y) ; [apply Rlt_le ; exact (proj2 Pr) | exact (proj2 y_encad)].",
            "VernacExtend",
            "32f266f4acfa19423862d042ef7f54d25bb3b166"
        ],
        [
            "assert (Temp := Df_gt_0 c c_encad).",
            "VernacExtend",
            "b2f0efa154314f6baa5ff1f24c334b424b15f2ca"
        ],
        [
            "assert (Temp2 := pr_nu f c (derivable_f_interv c Pr) (pr c c_encad)).",
            "VernacExtend",
            "798c49062aa02c1a0c009f9218a791a0731865f5"
        ],
        [
            "rewrite Temp2 ; apply Temp.",
            "VernacExtend",
            "a443cdd810b782a44c47e042afc374b4b4a198b9"
        ],
        [
            "apply Rminus_gt ; exact Hyp.",
            "VernacExtend",
            "788cb2ce415e64f8fb20fa84e66273949695f347"
        ],
        [
            "symmetry ; rewrite derive_pt_eq ; apply derivable_pt_lim_id.",
            "VernacExtend",
            "56906f85354116e6e9337a003d66161d3efcedb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma plus_Rsqr_gt_0 : forall x, 1 + x ^ 2 > 0.",
            "VernacStartTheoremProof",
            "4fae8a0792d9d2480addcbb57f2abd51c31665cf"
        ],
        [
            "intro m.",
            "VernacExtend",
            "4b82221b29d931d49eaab61535235762be4a3968"
        ],
        [
            "replace 0 with (0+0) by intuition.",
            "VernacExtend",
            "6eed4e8cd0c562444128eb10a916d405414cb455"
        ],
        [
            "apply Rplus_gt_ge_compat.",
            "VernacExtend",
            "c2cf953423298baac56ffe28c300bd2fe08ad5eb"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "elim (total_order_T m 0) ; intro s'.",
            "VernacExtend",
            "36eb1993a0ffb57477a11b5a583dc4e076f09fcf"
        ],
        [
            "case s'.",
            "VernacExtend",
            "fce8ae2e69a85bd38433529f3bc98e66fcd195e2"
        ],
        [
            "intros m_cond.",
            "VernacExtend",
            "a5783bfbeea75943952a6cafe944570354f3b4c0"
        ],
        [
            "replace 0 with (0*0) by intuition.",
            "VernacExtend",
            "5ca6d25157f4ab122cb2c74428693c031cd659c2"
        ],
        [
            "replace (m ^ 2) with ((-m)^2).",
            "VernacExtend",
            "f1db4a11a4e386431f8f59480220b5d4a4c69db8"
        ],
        [
            "apply Rle_ge ; apply Rmult_le_compat ; intuition ; apply Rlt_le ; rewrite Rmult_1_r ; intuition.",
            "VernacExtend",
            "a6abea4dac19b1bcf0ede96cebb348e47d7ca793"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "intro H' ; rewrite H' ; right ; field.",
            "VernacExtend",
            "be337d27e8b8dc8e780cc0783e34832015b9dce0"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PI2_lower_bound : forall x, 0 < x < 2 -> 0 < cos x -> x < PI/2.",
            "VernacStartTheoremProof",
            "86a09a3b050e05fe663a651357da0dec29be3270"
        ],
        [
            "intros x [xp xlt2] cx.",
            "VernacExtend",
            "22812b6d16143e503253a43d77380138b6ae23be"
        ],
        [
            "destruct (Rtotal_order x (PI/2)) as [xltpi2 | [xeqpi2 | xgtpi2]].",
            "VernacExtend",
            "12a1c32f7fd3ac76f194f8a304f8dc92b6af5076"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "now case (Rgt_not_eq _ _ cx); rewrite xeqpi2, cos_PI2.",
            "VernacExtend",
            "5c87713d37995227a8e1b21ed11c62e3ed8eab7e"
        ],
        [
            "destruct (MVT_cor1 cos (PI/2) x derivable_cos xgtpi2) as [c [Pc [cint1 cint2]]].",
            "VernacExtend",
            "dcec87725dfce2949bd80e58da83f752206e649d"
        ],
        [
            "revert Pc; rewrite cos_PI2, Rminus_0_r.",
            "VernacExtend",
            "16af7b978a8f27ab9f8b97494c45c8ffad8bd032"
        ],
        [
            "rewrite <- (pr_nu cos c (derivable_pt_cos c)), derive_pt_cos.",
            "VernacExtend",
            "765e937b4632c793043e7f9d9f67073d3b5e4178"
        ],
        [
            "assert (0 < c < 2) by (split; assert (t := PI2_RGT_0); lra).",
            "VernacExtend",
            "d7da24c8b3098fa57835ed76be32d28ee42527fd"
        ],
        [
            "assert (0 < sin c) by now apply sin_pos_tech.",
            "VernacExtend",
            "65356724c2a9ded0c77f489a6590fca5b7794766"
        ],
        [
            "intros Pc.",
            "VernacExtend",
            "f79f20549e8ffd8ccbba4a1fede45a20794a8b6e"
        ],
        [
            "case (Rlt_not_le _ _ cx).",
            "VernacExtend",
            "fad4052bbf6fc9ba3562e61eb09c1853a3df9316"
        ],
        [
            "rewrite <- (Rplus_0_l (cos x)), Pc, Ropp_mult_distr_l_reverse.",
            "VernacExtend",
            "422a3eac990b04b58ab9876e9a7f8c9a654637b6"
        ],
        [
            "apply Rle_minus, Rmult_le_pos;[apply Rlt_le; assumption | lra ].",
            "VernacExtend",
            "6a84c0b681cd8e9f47dad5a62cead43e4cf95cf4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PI2_3_2 : 3/2 < PI/2.",
            "VernacStartTheoremProof",
            "8f036dbd5f3f76cd305203805168fbf0e1af30ed"
        ],
        [
            "apply PI2_lower_bound;[split; lra | ].",
            "VernacExtend",
            "52477a0a910168aeb84d269596280e96ea1cf915"
        ],
        [
            "destruct (pre_cos_bound (3/2) 1) as [t _]; [lra | lra | ].",
            "VernacExtend",
            "c73b7e8dcd5c7394e70d545a76739d679b010732"
        ],
        [
            "apply Rlt_le_trans with (2 := t); clear t.",
            "VernacExtend",
            "f51c30f01a48101a1489d4cbbf2b8c023ab2cb75"
        ],
        [
            "unfold cos_approx; simpl; unfold cos_term.",
            "VernacExtend",
            "4352c9e61d5c08bb00152ca8bc341aa0d5afcfdc"
        ],
        [
            "rewrite !INR_IZR_INZ.",
            "VernacExtend",
            "ff6d21e1c3420ec38a5eb2bc89a6cff80e6d3cc7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "field_simplify.",
            "VernacExtend",
            "69312d77240dafb89e62832bed63aad6ea572da3"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite Rmult_0_l.",
            "VernacExtend",
            "198c4e4c2aa27e6987cc5bebc1444c8d76760541"
        ],
        [
            "apply Rdiv_lt_0_compat ; now apply IZR_lt.",
            "VernacExtend",
            "a717de987383b1fb821308521b1c14c41aad717d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PI2_1 : 1 < PI/2.",
            "VernacStartTheoremProof",
            "52ae60435d90857bde7716747d0ff91d4fb23928"
        ],
        [
            "assert (t := PI2_3_2); lra.",
            "VernacExtend",
            "8937d5f2d656e12b16c3c371d605e75a80152385"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tan_increasing : forall x y:R, -PI/2 < x -> x < y -> y < PI/2 -> tan x < tan y.",
            "VernacStartTheoremProof",
            "b0ecab9e34d1f1914234be46ed24c7e2ad2cf1b2"
        ],
        [
            "intros x y Z_le_x x_lt_y y_le_1.",
            "VernacExtend",
            "5d9c3ef20183391b4f98fc18afeb003c690beef7"
        ],
        [
            "assert (x_encad : -PI/2 < x < PI/2).",
            "VernacExtend",
            "8dee97d1182a14ee32d42076d6772daf00bcac44"
        ],
        [
            "split ; [assumption | apply Rlt_trans with (r2:=y) ; assumption].",
            "VernacExtend",
            "8fbdf88028ea42329b889b8f3e525f996ef09f85"
        ],
        [
            "assert (y_encad : -PI/2 < y < PI/2).",
            "VernacExtend",
            "05edfd62461d1c3513c802f8c6cc6c22e391e96a"
        ],
        [
            "split ; [apply Rlt_trans with (r2:=x) ; intuition | intuition ].",
            "VernacExtend",
            "a050931545e74e378a45f60dbe22f5e7390e487a"
        ],
        [
            "assert (local_derivable_pt_tan : forall x : R, -PI/2 < x < PI/2 -> derivable_pt tan x).",
            "VernacExtend",
            "3bbb8fa123514374b24824e0e528ee5d6b1fc3f8"
        ],
        [
            "intros ; apply derivable_pt_tan ; intuition.",
            "VernacExtend",
            "a9b8f54995364ed5c4c5a30ae381e9fd9e4e272e"
        ],
        [
            "apply derive_increasing_interv with (a:=-PI/2) (b:=PI/2) (pr:=local_derivable_pt_tan) ; intuition.",
            "VernacExtend",
            "20b1cf5d5ccd4f403c048cfe1d754c6564c59113"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assert (Temp := pr_nu tan t (derivable_pt_tan t t_encad) (local_derivable_pt_tan t t_encad)) ; rewrite <- Temp ; clear Temp.",
            "VernacExtend",
            "ccdc00b8f6476390216060fefd70859f8a09655c"
        ],
        [
            "assert (Temp := derive_pt_tan t t_encad) ; rewrite Temp ; clear Temp.",
            "VernacExtend",
            "927d1ace424c61b55f2225d83071fc4ae48e614c"
        ],
        [
            "apply plus_Rsqr_gt_0.",
            "VernacExtend",
            "1ebc831e44d78d29fdd30daa4df1fcb4ad2fc0d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tan_is_inj : forall x y, -PI/2 < x < PI/2 -> -PI/2 < y < PI/2 -> tan x = tan y -> x = y.",
            "VernacStartTheoremProof",
            "eb8e2303e7a2ec7d577ff572cc14982e98d288f5"
        ],
        [
            "intros a b a_encad b_encad fa_eq_fb.",
            "VernacExtend",
            "0ec8984222591addec56c7cb10c561768dbafc8c"
        ],
        [
            "case(total_order_T a b).",
            "VernacExtend",
            "6b7b4f3e0502fb1d5f46c2ca288fc31ca1a7f6a2"
        ],
        [
            "intro s ; case s ; clear s.",
            "VernacExtend",
            "57f4e29443d335dbff605a26b23fd61cb70077fa"
        ],
        [
            "intro Hf.",
            "VernacExtend",
            "6f8097812b59a70e6a2905483ee62407e17f44b0"
        ],
        [
            "assert (Hfalse := tan_increasing a b (proj1 a_encad) Hf (proj2 b_encad)).",
            "VernacExtend",
            "aaef62cb5f7b9ec47b62cd8b9546ab179b27f158"
        ],
        [
            "case (Rlt_not_eq (tan a) (tan b)) ; assumption.",
            "VernacExtend",
            "42b85d7c657f8a6edd723f57dd3671ff8c65da0f"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intro Hf.",
            "VernacExtend",
            "6f8097812b59a70e6a2905483ee62407e17f44b0"
        ],
        [
            "assert (Hfalse := tan_increasing b a (proj1 b_encad) Hf (proj2 a_encad)).",
            "VernacExtend",
            "1e88382291ec9d71017512360c5fde25746043ec"
        ],
        [
            "case (Rlt_not_eq (tan b) (tan a)) ; [|symmetry] ; assumption.",
            "VernacExtend",
            "0a3c224f85bce3ee39f987189dc3b2e93b4fe790"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma exists_atan_in_frame : forall lb ub y, lb < ub -> -PI/2 < lb -> ub < PI/2 -> tan lb < y < tan ub -> {x | lb < x < ub /\\ tan x = y}.",
            "VernacStartTheoremProof",
            "8e845936c41d214b416a8590b44aacc28995d8fa"
        ],
        [
            "intros lb ub y lb_lt_ub lb_cond ub_cond y_encad.",
            "VernacExtend",
            "177cedcbf11774895ffb39814b42fdc208f8c504"
        ],
        [
            "case y_encad ; intros y_encad1 y_encad2.",
            "VernacExtend",
            "c3f2fa450bda29ce7fd8d08ece28dfc843cfb0e4"
        ],
        [
            "assert (f_cont : forall a : R, lb <= a <= ub -> continuity_pt tan a).",
            "VernacExtend",
            "f12f6815112c8d13b84686315b73d15b0a9fafcf"
        ],
        [
            "intros a a_encad.",
            "VernacExtend",
            "1a4733bc609ab5a6dcdcac39c9488d201525ee30"
        ],
        [
            "apply derivable_continuous_pt ; apply derivable_pt_tan.",
            "VernacExtend",
            "f63e1e5d345bf92fbad0776eab095d45c9e61eb9"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rlt_le_trans with (r2:=lb) ; intuition.",
            "VernacExtend",
            "a1f4c0eb04928f9989c08a86066a7b81167eb60f"
        ],
        [
            "apply Rle_lt_trans with (r2:=ub) ; intuition.",
            "VernacExtend",
            "b0f8245b40cbe78f0f204f59c88e08cdd3ff9c99"
        ],
        [
            "assert (Cont : forall a : R, lb <= a <= ub -> continuity_pt (fun x => tan x - y) a).",
            "VernacExtend",
            "ae968248cc90738c906bc36044d2afd11943cf37"
        ],
        [
            "intros a a_encad.",
            "VernacExtend",
            "1a4733bc609ab5a6dcdcac39c9488d201525ee30"
        ],
        [
            "unfold continuity_pt, continue_in, limit1_in, limit_in ; simpl ; unfold R_dist.",
            "VernacExtend",
            "1bad2f7c5aa020d921ac684b7ba8df3226fba8e4"
        ],
        [
            "intros eps eps_pos.",
            "VernacExtend",
            "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
        ],
        [
            "elim (f_cont a a_encad eps eps_pos).",
            "VernacExtend",
            "67fb6dea56d3dd13878ff7f7807481dad0aa2398"
        ],
        [
            "intros alpha alpha_pos.",
            "VernacExtend",
            "41e934a2c998d11b748d265eac97cc19e5cd181f"
        ],
        [
            "destruct alpha_pos as (alpha_pos,Temp).",
            "VernacExtend",
            "5cbb94478ab2cb9a442c0a5b8732c52da58d447d"
        ],
        [
            "exists alpha.",
            "VernacExtend",
            "4db99336d59a6e68b1148a330e52b395313d97e7"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros x x_cond.",
            "VernacExtend",
            "518049a0b44b5ba2a994e8186cc0b4a54b01b2ff"
        ],
        [
            "replace (tan x - y - (tan a - y)) with (tan x - tan a) by field.",
            "VernacExtend",
            "1763e206508001eb0b10d1773ad06f33344ebcdc"
        ],
        [
            "exact (Temp x x_cond).",
            "VernacExtend",
            "c1a21b20423b8259ad76db04437151e1fe579706"
        ],
        [
            "assert (H1 : (fun x : R => tan x - y) lb < 0).",
            "VernacExtend",
            "11370174b868906c6ad64b8e7a2a1f8c6defad55"
        ],
        [
            "apply Rlt_minus.",
            "VernacExtend",
            "9fee20f16a41f319061ad24c67e73ac9f8090990"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H2 : 0 < (fun x : R => tan x - y) ub).",
            "VernacExtend",
            "2e13b41ad7ae58d54f31b9b90757430fb8314dab"
        ],
        [
            "apply Rgt_minus.",
            "VernacExtend",
            "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct (IVT_interv (fun x => tan x - y) lb ub Cont lb_lt_ub H1 H2) as (x,Hx).",
            "VernacExtend",
            "669d523c509594c3896adb4c589bc08412550d7e"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "destruct Hx as (Hyp,Result).",
            "VernacExtend",
            "d41e3d8e3d42cf44ef9bdb9ba8cfc0a7c67f1ac5"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (Temp2 : x <> lb).",
            "VernacExtend",
            "98cdd43da079521caf7cf01b3073e927af41ae11"
        ],
        [
            "intro Hfalse.",
            "VernacExtend",
            "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
        ],
        [
            "rewrite Hfalse in Result.",
            "VernacExtend",
            "98671de006e209551f9f7d683f81690af9e3917c"
        ],
        [
            "assert (Temp2 : y <> tan lb).",
            "VernacExtend",
            "c9333442f5746b831f992aa8300d85f2060912bf"
        ],
        [
            "apply Rgt_not_eq ; assumption.",
            "VernacExtend",
            "9dbd3eafa8d07a9bb7dbdb29781a2910e14b400b"
        ],
        [
            "clear - Temp2 Result.",
            "VernacExtend",
            "bf453dbc9d7c91d7bff2ab27ba8d9f00d9d694af"
        ],
        [
            "apply Temp2.",
            "VernacExtend",
            "b49b8cdb0af7197519caf97538a3c2020bcbcfc6"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "clear -Temp2 H3.",
            "VernacExtend",
            "e4c37f6d9efe027c596216f1fa80588a5bab8648"
        ],
        [
            "case H3 ; intuition.",
            "VernacExtend",
            "675ee46e7b3075db982ae57b1af42b4125abd4ff"
        ],
        [
            "apply False_ind ; apply Temp2 ; symmetry ; assumption.",
            "VernacExtend",
            "8957ef72319caf972ed4a6871e20a039c8ab171c"
        ],
        [
            "assert (Temp : x <> ub).",
            "VernacExtend",
            "2e2a72726f9ea767a0227ba47f2dedd9bbd9c8d0"
        ],
        [
            "intro Hfalse.",
            "VernacExtend",
            "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
        ],
        [
            "rewrite Hfalse in Result.",
            "VernacExtend",
            "98671de006e209551f9f7d683f81690af9e3917c"
        ],
        [
            "assert (Temp2 : y <> tan ub).",
            "VernacExtend",
            "0c6d6756900689d943da19271aadb8cc1dc4c740"
        ],
        [
            "apply Rlt_not_eq ; assumption.",
            "VernacExtend",
            "71ee539e69e72c7c5f1c175968d44a9a4558166a"
        ],
        [
            "clear - Temp2 Result.",
            "VernacExtend",
            "bf453dbc9d7c91d7bff2ab27ba8d9f00d9d694af"
        ],
        [
            "apply Temp2.",
            "VernacExtend",
            "b49b8cdb0af7197519caf97538a3c2020bcbcfc6"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "case H4 ; intuition.",
            "VernacExtend",
            "66c9fcacbb784c19a386feee0f0f38747e566af7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tan_1_gt_1 : tan 1 > 1.",
            "VernacStartTheoremProof",
            "ef97df2f8d85a1775a26aaae21b385b694c5a7b9"
        ],
        [
            "assert (0 < cos 1) by (apply cos_gt_0; assert (t:=PI2_1); lra).",
            "VernacExtend",
            "5482660213bc56c5e0e4976749ad189ba28fb4b7"
        ],
        [
            "assert (t1 : cos 1 <= 1 - 1/2 + 1/24).",
            "VernacExtend",
            "af2e2644855f70842d534e2ef61348663a8b393a"
        ],
        [
            "destruct (pre_cos_bound 1 0) as [_ t]; try lra; revert t.",
            "VernacExtend",
            "b9935eb18b0336231cb63d1b64e7bf4519e8da22"
        ],
        [
            "unfold cos_approx, cos_term; simpl; intros t; apply Rle_trans with (1:=t).",
            "VernacExtend",
            "262e8ddfce9cdf5f83b0af238cafb8d76b49b8fc"
        ],
        [
            "clear t; apply Req_le; field.",
            "VernacExtend",
            "9a8bb6a52058be2689f8db9bd5eb1aba1574bc00"
        ],
        [
            "assert (t2 : 1 - 1/6 <= sin 1).",
            "VernacExtend",
            "afcbbacf7fe4f5fe038806a8b48c2c0adc1b905b"
        ],
        [
            "destruct (pre_sin_bound 1 0) as [t _]; try lra; revert t.",
            "VernacExtend",
            "25d97948ed1a5eaccfa7335723e97c8539c9c39b"
        ],
        [
            "unfold sin_approx, sin_term; simpl; intros t; apply Rle_trans with (2:=t).",
            "VernacExtend",
            "398aff4b9812807a05cae58b811094ac9f3a2280"
        ],
        [
            "clear t; apply Req_le; field.",
            "VernacExtend",
            "9a8bb6a52058be2689f8db9bd5eb1aba1574bc00"
        ],
        [
            "pattern 1 at 2; replace 1 with (cos 1 / cos 1) by (field; apply Rgt_not_eq; lra).",
            "VernacExtend",
            "571eb7d55a035abf3643ca7879d4baa287154979"
        ],
        [
            "apply Rlt_gt; apply (Rmult_lt_compat_r (/ cos 1) (cos 1) (sin 1)).",
            "VernacExtend",
            "9a82066e8b819e90e0da76633e550600f3417e30"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "apply Rle_lt_trans with (1 := t1); apply Rlt_le_trans with (2 := t2).",
            "VernacExtend",
            "c59c02c391240488bf9f164f65cfccd576e05268"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition frame_tan y : {x | 0 < x < PI/2 /\\ Rabs y < tan x}.",
            "VernacDefinition",
            "113911b5080f52aa5dafc15fc4db516ff6117e51"
        ],
        [
            "destruct (total_order_T (Rabs y) 1) as [Hs|Hgt].",
            "VernacExtend",
            "ff726d4b50769fee9a0e1da3f1dc4aaeba18e072"
        ],
        [
            "assert (yle1 : Rabs y <= 1) by (destruct Hs; lra).",
            "VernacExtend",
            "e15b772de7e37ca780f1c65dce20941d8478feeb"
        ],
        [
            "clear Hs; exists 1; split;[split; [exact Rlt_0_1 | exact PI2_1] | ].",
            "VernacExtend",
            "0e833afa5e96ff047fd18d443f3f49a56ca81590"
        ],
        [
            "apply Rle_lt_trans with (1 := yle1); exact tan_1_gt_1.",
            "VernacExtend",
            "8f5633ac4bb3c0bb7909415644595eeb91cc4193"
        ],
        [
            "assert (0 < / (Rabs y + 1)).",
            "VernacExtend",
            "323800a5c6e1ad549e1a433afaa81ec3691ed5fd"
        ],
        [
            "apply Rinv_0_lt_compat; lra.",
            "VernacExtend",
            "b7c315d28122f96e539bda730a1932e20d27564d"
        ],
        [
            "set (u := /2 * / (Rabs y + 1)).",
            "VernacExtend",
            "f495149e8571837d868c3eeb92b5ca5b1795aa80"
        ],
        [
            "assert (0 < u).",
            "VernacExtend",
            "64f77c79b046b8d511bbcdc6a5748055de97e4c2"
        ],
        [
            "apply Rmult_lt_0_compat; [lra | assumption].",
            "VernacExtend",
            "36a1b9bbd76e26ff9076f1ce6746054190119652"
        ],
        [
            "assert (vlt1 : / (Rabs y + 1) < 1).",
            "VernacExtend",
            "6930a5cf77c539465bc0985bd7e3f0993fe74e68"
        ],
        [
            "apply Rmult_lt_reg_r with (Rabs y + 1).",
            "VernacExtend",
            "9d0d9633a516e556ed331ec0e4f029ce25c45447"
        ],
        [
            "assert (t := Rabs_pos y); lra.",
            "VernacExtend",
            "468b6b3756086a6204d69a0a682016ff17076043"
        ],
        [
            "rewrite Rinv_l; [rewrite Rmult_1_l | apply Rgt_not_eq]; lra.",
            "VernacExtend",
            "c00125b504fa68b242ca027b18e600071097c09f"
        ],
        [
            "assert (vlt2 : u < 1).",
            "VernacExtend",
            "58d21c4481cc4c1249ae3c29fd174e1ee9d1b90e"
        ],
        [
            "apply Rlt_trans with (/ (Rabs y + 1)).",
            "VernacExtend",
            "678eb99da9cd2b7b7e402a300d444eab7dedc94f"
        ],
        [
            "rewrite double_var.",
            "VernacExtend",
            "cdcd7ecd0a5e6a34d944626ebc3daafb27b90163"
        ],
        [
            "assert (t : forall x, 0 < x -> x < x + x) by (clear; intros; lra).",
            "VernacExtend",
            "aa47008dc44a2aa9fdd51d4d512ed026fc5caffe"
        ],
        [
            "unfold u; rewrite Rmult_comm; apply t.",
            "VernacExtend",
            "ed459f6fe24472bef87184942510b2ed53c46afd"
        ],
        [
            "unfold Rdiv; rewrite Rmult_comm; assumption.",
            "VernacExtend",
            "eefc6e73823af66d7a77a69a5b8d74492ba8bfca"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert(int : 0 < PI / 2 - u < PI / 2).",
            "VernacExtend",
            "f91b6ceed7bb8de3bc7cfd11a3fc2aa83cdb7b3c"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assert (t := PI2_1); apply Rlt_Rminus, Rlt_trans with (2 := t); assumption.",
            "VernacExtend",
            "b16046e3af3f03194fce55bff689a4142040c9eb"
        ],
        [
            "assert (dumb : forall x y, 0 < y -> x - y < x) by (clear; intros; lra).",
            "VernacExtend",
            "c66791988f7da6274ba9a828008c79d44c45bacd"
        ],
        [
            "apply dumb; clear dumb; assumption.",
            "VernacExtend",
            "162bcf6e09cb0baebf8804c54c53fce9d0ff8ec7"
        ],
        [
            "exists (PI/2 - u).",
            "VernacExtend",
            "9ea7080435c8514e1b143cf397c8662c8177aef9"
        ],
        [
            "assert (tmp : forall x y, 0 < x -> y < 1 -> x * y < x).",
            "VernacExtend",
            "0898b3587f750b0566c2e6510030c4cf6927aa7a"
        ],
        [
            "clear; intros x y x0 y1; pattern x at 2; rewrite <- (Rmult_1_r x).",
            "VernacExtend",
            "9392493c18f432ea8f73b3d444e3cb0dccef6fa7"
        ],
        [
            "apply Rmult_lt_compat_l; assumption.",
            "VernacExtend",
            "a0928e135e6444a63d998d0f7d7ab651c707d349"
        ],
        [
            "assert (0 < sin u).",
            "VernacExtend",
            "0dff65c0bbdfcb10db9e336c2c6d228ff4320328"
        ],
        [
            "apply sin_gt_0;[ assumption | ].",
            "VernacExtend",
            "492b4bbbf44282a9f71406692b6b1a8636287ffe"
        ],
        [
            "assert (t := PI2_Rlt_PI); assert (t' := PI2_1).",
            "VernacExtend",
            "88a06591fb9417d5aaa3b7c86df74f9b1a62fbef"
        ],
        [
            "apply Rlt_trans with (2 := Rlt_trans _ _ _ t' t); assumption.",
            "VernacExtend",
            "9d17ae810be3183cd974eb6743d020f1f0b8ad05"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_trans with (/2 * / cos(PI / 2 - u)).",
            "VernacExtend",
            "cd22c16719555d474dcb65df1aea4d984897487b"
        ],
        [
            "rewrite cos_shift.",
            "VernacExtend",
            "83db67df4c0e4c199af26326a1e8e64a840b9f2b"
        ],
        [
            "assert (sin u < u).",
            "VernacExtend",
            "3061bb5631682fb65c64feeee89d5d13c3fbd94a"
        ],
        [
            "assert (t1 : 0 <= u) by (apply Rlt_le; assumption).",
            "VernacExtend",
            "3662c9804448a04dde9989eeb943dfe44673eb4e"
        ],
        [
            "assert (t2 : u <= 4) by (apply Rle_trans with 1;[apply Rlt_le | lra]; assumption).",
            "VernacExtend",
            "0ab529043b2aeb81af4c3be4732f4713915a18b6"
        ],
        [
            "destruct (pre_sin_bound u 0 t1 t2) as [_ t].",
            "VernacExtend",
            "12c7d58e02f168a2575f1d30c1212aa55965a124"
        ],
        [
            "apply Rle_lt_trans with (1 := t); clear t1 t2 t.",
            "VernacExtend",
            "827d6701bb7a830b062c5edda4b62172c89d7950"
        ],
        [
            "unfold sin_approx; simpl; unfold sin_term; simpl ((-1) ^ 0); replace ((-1) ^ 2) with 1 by ring; simpl ((-1) ^ 1); rewrite !Rmult_1_r, !Rmult_1_l; simpl plus; simpl (INR (fact 1)).",
            "VernacExtend",
            "0c436d3f3a98bccea622094b40b8d1a376d60b95"
        ],
        [
            "rewrite <- (fun x => tech_pow_Rmult x 0), <- (fun x => tech_pow_Rmult x 2), <- (fun x => tech_pow_Rmult x 4).",
            "VernacExtend",
            "99d3156a52e239d152e18fd9911bb04ff48c6ae8"
        ],
        [
            "rewrite (Rmult_comm (-1)); simpl ((/(Rabs y + 1)) ^ 0).",
            "VernacExtend",
            "8246d43a15de31ea3fba04f3832b913597980c4b"
        ],
        [
            "unfold Rdiv; rewrite Rinv_1, !Rmult_assoc, <- !Rmult_plus_distr_l.",
            "VernacExtend",
            "75b5866db450828761f2c5360bcc828f288c906f"
        ],
        [
            "apply tmp;[assumption | ].",
            "VernacExtend",
            "37fa2a131a53fa9366ebabbcb1b2c4a771eb091e"
        ],
        [
            "rewrite Rplus_assoc, Rmult_1_l; pattern 1 at 2; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "dd3e61f412fea47fde40acadbfbbfa648748f7b6"
        ],
        [
            "apply Rplus_lt_compat_l.",
            "VernacExtend",
            "cfadddfd242496b5b9297d5ae6868b0dbc12aeee"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "match goal with |- (?a * (-1)) + _ < 0 => rewrite <- (Rplus_opp_l a); change (-1) with (-(1)); rewrite Ropp_mult_distr_r_reverse, Rmult_1_r end.",
            "VernacExtend",
            "1db3558ba29d248020b218e347ce92f3d0b32f4d"
        ],
        [
            "apply Rplus_lt_compat_l.",
            "VernacExtend",
            "cfadddfd242496b5b9297d5ae6868b0dbc12aeee"
        ],
        [
            "assert (0 < u ^ 2) by (apply pow_lt; assumption).",
            "VernacExtend",
            "2840861e4fde17573f61228411afb641c186e941"
        ],
        [
            "replace (u ^ 4) with (u ^ 2 * u ^ 2) by ring.",
            "VernacExtend",
            "4648d756f604bfa6789fbbbdf41fab74d2dae7b3"
        ],
        [
            "rewrite Rmult_assoc; apply Rmult_lt_compat_l; auto.",
            "VernacExtend",
            "deff155337d8d45dbec25f739e6d51cc69825717"
        ],
        [
            "apply Rlt_trans with (u ^ 2 * /INR (fact 3)).",
            "VernacExtend",
            "667cb56c5cc56def3bb9899970dbb8a8ec253e5b"
        ],
        [
            "apply Rmult_lt_compat_l; auto.",
            "VernacExtend",
            "07529c97a878d71c5dcb0c16971cd1a7ec2a3761"
        ],
        [
            "apply Rinv_lt_contravar.",
            "VernacExtend",
            "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
        ],
        [
            "solve[apply Rmult_lt_0_compat; apply INR_fact_lt_0].",
            "VernacExtend",
            "2e686f787988977eaea8f13e974cacbaf418d389"
        ],
        [
            "rewrite !INR_IZR_INZ; apply IZR_lt; reflexivity.",
            "VernacExtend",
            "3f9726164789af5aee83bad7ca96444ade7d2519"
        ],
        [
            "rewrite Rmult_comm; apply tmp.",
            "VernacExtend",
            "e794ed8aaf517c9d7cb00422335682499cfac5cb"
        ],
        [
            "solve[apply Rinv_0_lt_compat, INR_fact_lt_0].",
            "VernacExtend",
            "69427226b80d073b83bbbacc8362bd8b4a5dba2b"
        ],
        [
            "apply Rlt_trans with (2 := vlt2).",
            "VernacExtend",
            "26ab64e2d343eb45cf44c4be2554ca2445c8fca0"
        ],
        [
            "simpl; unfold u; apply tmp; auto; rewrite Rmult_1_r; assumption.",
            "VernacExtend",
            "4e8430d8df13cf980ec8c2393030e8d67d9a7f4f"
        ],
        [
            "apply Rlt_trans with (Rabs y + 1);[lra | ].",
            "VernacExtend",
            "34919dac635586165a0b672cb287150c795600f9"
        ],
        [
            "pattern (Rabs y + 1) at 1; rewrite <- (Rinv_involutive (Rabs y + 1)); [ | apply Rgt_not_eq; lra].",
            "VernacExtend",
            "cae2d233e98c7b6610e9e794984ab865f4e368e2"
        ],
        [
            "rewrite <- Rinv_mult_distr.",
            "VernacExtend",
            "c12ef2181b9990533ec54fcfa7a44402635ff59c"
        ],
        [
            "apply Rinv_lt_contravar.",
            "VernacExtend",
            "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "apply Rmult_lt_0_compat;[lra | assumption].",
            "VernacExtend",
            "36a1b9bbd76e26ff9076f1ce6746054190119652"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (/(Rabs y + 1)) with (2 * u).",
            "VernacExtend",
            "a0f5ccec0dfd6f48bbfa0fed249ddca2a9b5cd86"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "unfold u; field; apply Rgt_not_eq; clear -Hgt; lra.",
            "VernacExtend",
            "ec391a43e19e4a8216379f7688f3ed821b829086"
        ],
        [
            "solve[discrR].",
            "VernacExtend",
            "2cfc13957303e61009d3596f470eb56d594b90b0"
        ],
        [
            "apply Rgt_not_eq; assumption.",
            "VernacExtend",
            "9dbd3eafa8d07a9bb7dbdb29781a2910e14b400b"
        ],
        [
            "unfold tan.",
            "VernacExtend",
            "0f8d073e49c9cc689c8ce1949822c17020378654"
        ],
        [
            "set (u' := PI / 2); unfold Rdiv; apply Rmult_lt_compat_r; unfold u'.",
            "VernacExtend",
            "12782e891f68a8ba4585f1821c992f4dbab11867"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "rewrite cos_shift; assumption.",
            "VernacExtend",
            "04f4e3fcde0acc3e02f24d23d87a6ff1fa26311c"
        ],
        [
            "assert (vlt3 : u < /4).",
            "VernacExtend",
            "7302425dc068fabd18c22fe451a26b752ae44bd2"
        ],
        [
            "replace (/4) with (/2 * /2) by field.",
            "VernacExtend",
            "8c38aed2bd2dfbe0867c55e30832edd4a4e86ba9"
        ],
        [
            "unfold u; apply Rmult_lt_compat_l;[lra | ].",
            "VernacExtend",
            "7accaf97127112e7f1c8b40a8a4f1cb0b99c7a72"
        ],
        [
            "apply Rinv_lt_contravar.",
            "VernacExtend",
            "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
        ],
        [
            "apply Rmult_lt_0_compat; lra.",
            "VernacExtend",
            "df67e23e1540ac051c6df6de4f576430efcc8312"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assert (1 < PI / 2 - u) by (assert (t := PI2_3_2); lra).",
            "VernacExtend",
            "810e69f43c3fabf34a2a0d0e325cb4734be6de9f"
        ],
        [
            "apply Rlt_trans with (sin 1).",
            "VernacExtend",
            "239f9efb2e70fec1cece66275a8c04d5c5ae3203"
        ],
        [
            "assert (t' : 1 <= 4) by lra.",
            "VernacExtend",
            "58c7765683e362c69ab88d8d61add13c7a0f3c01"
        ],
        [
            "destruct (pre_sin_bound 1 0 (Rlt_le _ _ Rlt_0_1) t') as [t _].",
            "VernacExtend",
            "7c93b288dd5d217db5534df37ba6905c5815cd2a"
        ],
        [
            "apply Rlt_le_trans with (2 := t); clear t.",
            "VernacExtend",
            "f51c30f01a48101a1489d4cbbf2b8c023ab2cb75"
        ],
        [
            "simpl plus; replace (sin_approx 1 1) with (5/6);[lra | ].",
            "VernacExtend",
            "69a94cf7942346da558341582ed2ef2d9e5eb462"
        ],
        [
            "unfold sin_approx, sin_term; simpl; field.",
            "VernacExtend",
            "a923a73f206ef11dfbe2ea125ba1a6be92ca6564"
        ],
        [
            "apply sin_increasing_1.",
            "VernacExtend",
            "38343a6448ffc3ea36df7b9332c9e2c99e1e870a"
        ],
        [
            "assert (t := PI2_1); lra.",
            "VernacExtend",
            "cb5ffbea6ba4749519b9201339dd7b430cb35f32"
        ],
        [
            "apply Rlt_le, PI2_1.",
            "VernacExtend",
            "d01095966c863ff92426c0a9794dec6c578ab822"
        ],
        [
            "assert (t := PI2_1); lra.",
            "VernacExtend",
            "cb5ffbea6ba4749519b9201339dd7b430cb35f32"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ub_opp : forall x, x < PI/2 -> -PI/2 < -x.",
            "VernacStartTheoremProof",
            "ace753804bb796493cd509757662005e5d851cde"
        ],
        [
            "intros x h; rewrite Ropp_div; apply Ropp_lt_contravar; assumption.",
            "VernacExtend",
            "f8f139e1967bbd92ebaa1109d4509b363af401f9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pos_opp_lt : forall x, 0 < x -> -x < x.",
            "VernacStartTheoremProof",
            "85ea6869f88840cf608a6176e35418c440edc162"
        ],
        [
            "intros; lra.",
            "VernacExtend",
            "449a153f406381cfb8ab107f551a2c789b996417"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech_opp_tan : forall x y, -tan x < y -> tan (-x) < y.",
            "VernacStartTheoremProof",
            "7d2b8836c7919b63785998f79db17ed7305fb7ec"
        ],
        [
            "intros; rewrite tan_neg; assumption.",
            "VernacExtend",
            "02f4570927b05c310de9c09f05a29e9f8df9cca7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pre_atan (y : R) : {x : R | -PI/2 < x < PI/2 /\\ tan x = y}.",
            "VernacDefinition",
            "ca450aaeeffbd89a531229bc67eb164885105aa9"
        ],
        [
            "destruct (frame_tan y) as [ub [[ub0 ubpi2] Ptan_ub]].",
            "VernacExtend",
            "66961eed15cd0f43494b8bc2008a5f6c0a4254e2"
        ],
        [
            "set (pr := (conj (tech_opp_tan _ _ (proj2 (Rabs_def2 _ _ Ptan_ub))) (proj1 (Rabs_def2 _ _ Ptan_ub)))).",
            "VernacExtend",
            "139e272ae4014e8e5af801b3d56515ba8a365da1"
        ],
        [
            "destruct (exists_atan_in_frame (-ub) ub y (pos_opp_lt _ ub0) (ub_opp _ ubpi2) ubpi2 pr) as [v [[vl vu] vq]].",
            "VernacExtend",
            "5f575b0ba1cb0b4b8f85ad14a2b78557364851b1"
        ],
        [
            "exists v; clear pr.",
            "VernacExtend",
            "33d862f24cd0bde0c2bf193d6f133678b92b5202"
        ],
        [
            "split;[rewrite Ropp_div; split; lra | assumption].",
            "VernacExtend",
            "4c4e2d7b121bca8a59b0ddfd7bb494f3f0457264"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition atan x := let (v, _) := pre_atan x in v.",
            "VernacDefinition",
            "b3722e4209e7bab6cfef1b99b62961f9a55c6052"
        ],
        [
            "Lemma atan_bound : forall x, -PI/2 < atan x < PI/2.",
            "VernacStartTheoremProof",
            "609802cc9136f9d35e4e88df29d14e789af9274c"
        ],
        [
            "intros x; unfold atan; destruct (pre_atan x) as [v [int _]]; exact int.",
            "VernacExtend",
            "b8db0192cf3ee19cd135b91ddf04bfed9490f647"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma atan_right_inv : forall x, tan (atan x) = x.",
            "VernacStartTheoremProof",
            "42d04de5bec859abae478f38a615e0779ce7b80e"
        ],
        [
            "intros x; unfold atan; destruct (pre_atan x) as [v [_ q]]; exact q.",
            "VernacExtend",
            "3171cabed6603a0e7a55ec4f1e1c5052a7a3571a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma atan_opp : forall x, atan (- x) = - atan x.",
            "VernacStartTheoremProof",
            "af1faa9b2559b158d2fa6dbcda5fcfce1dbc727d"
        ],
        [
            "intros x; generalize (atan_bound (-x)); rewrite Ropp_div;intros [a b].",
            "VernacExtend",
            "87830a511c420d4940791dc8c9c31b24d72a1865"
        ],
        [
            "generalize (atan_bound x); rewrite Ropp_div; intros [c d].",
            "VernacExtend",
            "a720498dee8c45e44c6c4979f01cc93892bc2b92"
        ],
        [
            "apply tan_is_inj; try rewrite Ropp_div; try split; try lra.",
            "VernacExtend",
            "54ce31692a5b43ec3b05938710ff0f07706585e0"
        ],
        [
            "rewrite tan_neg, !atan_right_inv; reflexivity.",
            "VernacExtend",
            "6952feef6aad1108083d1dd1b2a8ead9d48250d3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_atan : forall x, derivable_pt atan x.",
            "VernacStartTheoremProof",
            "d0f61d3d057c92bf374eaf91117018862a521b7e"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "destruct (frame_tan x) as [ub [[ub0 ubpi] P]].",
            "VernacExtend",
            "d75045567ce4d2a438c7a3010e8ca8977909ea5a"
        ],
        [
            "assert (lb_lt_ub : -ub < ub) by apply pos_opp_lt, ub0.",
            "VernacExtend",
            "0a980c885ccbfe96667d475d63ea95768407e360"
        ],
        [
            "assert (xint : tan(-ub) < x < tan ub).",
            "VernacExtend",
            "377ad5eae37547422e3edda0bf477e3c326156a3"
        ],
        [
            "assert (xint' : x < tan ub /\\ -(tan ub) < x) by apply Rabs_def2, P.",
            "VernacExtend",
            "c6b3aaba754b627b78b793a89c55930ae214e903"
        ],
        [
            "rewrite tan_neg; tauto.",
            "VernacExtend",
            "98d6763e2e6c89db0c1ca2248fb6248bbee53f74"
        ],
        [
            "assert (inv_p : forall x, tan(-ub) <= x -> x <= tan ub -> comp tan atan x = id x).",
            "VernacExtend",
            "4369bc22c6365e03908ba743abf73f01789d10cb"
        ],
        [
            "intros; apply atan_right_inv.",
            "VernacExtend",
            "b23ec1a51eaa5de173c0df4c4c66549bd1c5dc27"
        ],
        [
            "assert (int_tan : forall y, tan (- ub) <= y -> y <= tan ub -> -ub <= atan y <= ub).",
            "VernacExtend",
            "6cc8aed7740d85c1364927fc5607a7dc819b9f7d"
        ],
        [
            "clear -ub0 ubpi; intros y lo up; split.",
            "VernacExtend",
            "a080de309694bec04ba5d65e69c6984d628ea758"
        ],
        [
            "destruct (Rle_lt_dec (-ub) (atan y)) as [h | abs]; auto.",
            "VernacExtend",
            "6dcc3b72f3f37dcd9f4701c54472098dd46e1bc7"
        ],
        [
            "assert (y < tan (-ub)).",
            "VernacExtend",
            "f0902e3ef5a032d025e7320238b043fffe516460"
        ],
        [
            "rewrite <- (atan_right_inv y); apply tan_increasing.",
            "VernacExtend",
            "6dc6d70a3f981ebb12bd65ed80b8e6f32f28c085"
        ],
        [
            "destruct (atan_bound y); assumption.",
            "VernacExtend",
            "6002d1bd82cc8c5286ffd6724862bcd0f66242a5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "destruct (Rle_lt_dec (atan y) ub) as [h | abs]; auto.",
            "VernacExtend",
            "20f72611d8872c38dfc2423a3006cbe09363c244"
        ],
        [
            "assert (tan ub < y).",
            "VernacExtend",
            "40c297e0d455e5b98cf6e8a7baf70124b5833368"
        ],
        [
            "rewrite <- (atan_right_inv y); apply tan_increasing.",
            "VernacExtend",
            "6dc6d70a3f981ebb12bd65ed80b8e6f32f28c085"
        ],
        [
            "rewrite Ropp_div; lra.",
            "VernacExtend",
            "340db74ad5ddd66ab75cc8824f09c61d20738e74"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct (atan_bound y); assumption.",
            "VernacExtend",
            "6002d1bd82cc8c5286ffd6724862bcd0f66242a5"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assert (incr : forall x y, -ub <= x -> x < y -> y <= ub -> tan x < tan y).",
            "VernacExtend",
            "d4b18fc1c192a3da423e40f965364d212e4aae94"
        ],
        [
            "intros y z l yz u; apply tan_increasing.",
            "VernacExtend",
            "dabab7c19627fb3c26c4eec1fb77ba0cd1851d8f"
        ],
        [
            "rewrite Ropp_div; lra.",
            "VernacExtend",
            "340db74ad5ddd66ab75cc8824f09c61d20738e74"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assert (der : forall a, -ub <= a <= ub -> derivable_pt tan a).",
            "VernacExtend",
            "ac3543480592514e148dedbdb63ae992a9b3873d"
        ],
        [
            "intros a [la ua]; apply derivable_pt_tan.",
            "VernacExtend",
            "691f74d91a64704949f88880b2299299aa3d14a3"
        ],
        [
            "rewrite Ropp_div; split; lra.",
            "VernacExtend",
            "a1d2b2925af1e1c6f6721c33242e0feeaa312867"
        ],
        [
            "assert (df_neq : derive_pt tan (atan x) (derivable_pt_recip_interv_prelim1 tan atan (- ub) ub x lb_lt_ub xint inv_p int_tan incr der) <> 0).",
            "VernacExtend",
            "e523769358cb701308da63305324a162766b1fa2"
        ],
        [
            "rewrite <- (pr_nu tan (atan x) (derivable_pt_tan (atan x) (atan_bound x))).",
            "VernacExtend",
            "23e5f2eaa314679434dbfcae8de66dbe53c04f1d"
        ],
        [
            "rewrite derive_pt_tan.",
            "VernacExtend",
            "2cde721afedac1f43d1c8d28eca77262e1df660e"
        ],
        [
            "solve[apply Rgt_not_eq, plus_Rsqr_gt_0].",
            "VernacExtend",
            "b60b8557de8a1bbc5ab7fd3415a6e24b572b6534"
        ],
        [
            "apply (derivable_pt_recip_interv tan atan (-ub) ub x lb_lt_ub xint inv_p int_tan incr der).",
            "VernacExtend",
            "2bedc34037e5b2413999015fea5b34cefe8faaff"
        ],
        [
            "exact df_neq.",
            "VernacExtend",
            "238d4a26ef0a520c7e4fda8dd9724efa0787e15d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma atan_increasing : forall x y, x < y -> atan x < atan y.",
            "VernacStartTheoremProof",
            "c2fcecf464c2e7e57fccd7b77050a0ffe242a065"
        ],
        [
            "intros x y d.",
            "VernacExtend",
            "df61646ba26057a11ee95d34f0dd5165f6a1ac53"
        ],
        [
            "assert (t1 := atan_bound x).",
            "VernacExtend",
            "0dbeb2726db8d93e22a469fa03e1afc4f615b11d"
        ],
        [
            "assert (t2 := atan_bound y).",
            "VernacExtend",
            "66283f5c9ab4ef09ec97247c1de8d35dca5d0269"
        ],
        [
            "destruct (Rlt_le_dec (atan x) (atan y)) as [lt | bad].",
            "VernacExtend",
            "d2a384b6baf9627e9d7857aa3fe8820eadbe0855"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_not_le in d.",
            "VernacExtend",
            "15a80b9558d7941777a5d0d44cbbee86e8633e2d"
        ],
        [
            "case d.",
            "VernacExtend",
            "c0154daf2286bdfa3ac83fa4874ad52160f9dd02"
        ],
        [
            "rewrite <- (atan_right_inv y), <- (atan_right_inv x).",
            "VernacExtend",
            "0de427105581e033fa37e2172a65fb5a71be459d"
        ],
        [
            "destruct bad as [ylt | yx].",
            "VernacExtend",
            "9b3b7254990a4d363923cb26263aead0826ed472"
        ],
        [
            "apply Rlt_le, tan_increasing; try tauto.",
            "VernacExtend",
            "e69c1628a77fe1fdd6698c62a5a81452e57832e1"
        ],
        [
            "solve[rewrite yx; apply Rle_refl].",
            "VernacExtend",
            "89d9bfb11b6c259f085e4ff6d8c4be6caa19a374"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma atan_0 : atan 0 = 0.",
            "VernacStartTheoremProof",
            "7d3a6be7b167445dd7df9b61c0c944003eaba88b"
        ],
        [
            "apply tan_is_inj; try (apply atan_bound).",
            "VernacExtend",
            "122c2135be51c84a8dd6491d03eb1da2dcacbdde"
        ],
        [
            "assert (t := PI_RGT_0); rewrite Ropp_div; split; lra.",
            "VernacExtend",
            "e2cf49a8cef963b01a262561ef5eb975cc4ae5b7"
        ],
        [
            "rewrite atan_right_inv, tan_0.",
            "VernacExtend",
            "15865b58e6248ab9abc24e1cf4eb7d3db21812fd"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma atan_1 : atan 1 = PI/4.",
            "VernacStartTheoremProof",
            "17862b6891b23a1662d5d6b74fe0f8019d924e57"
        ],
        [
            "assert (ut := PI_RGT_0).",
            "VernacExtend",
            "d405cea2130da1de154e143f277d521c2647aba1"
        ],
        [
            "assert (-PI/2 < PI/4 < PI/2) by (rewrite Ropp_div; split; lra).",
            "VernacExtend",
            "65a089a0baeb6ffedcaedd06be80bc0030520ee1"
        ],
        [
            "assert (t := atan_bound 1).",
            "VernacExtend",
            "affc7bf42dbf33b86f57bc2ab7a1285046029fde"
        ],
        [
            "apply tan_is_inj; auto.",
            "VernacExtend",
            "6d95959c5d1ed7cd3c7104b0381293f49d79c21e"
        ],
        [
            "rewrite tan_PI4, atan_right_inv; reflexivity.",
            "VernacExtend",
            "c78a6eb8421249ede165321badec4c5b28fe476b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_atan : forall x, derive_pt atan x (derivable_pt_atan x) = 1 / (1 + x\u00b2).",
            "VernacStartTheoremProof",
            "67f56c91cf44f409553afaa4841737439b54ce21"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "destruct (frame_tan x) as [ub [[ub0 ubpi] Pub]].",
            "VernacExtend",
            "b674171d2a7508a8dd087e73d8fe160c1d78fc57"
        ],
        [
            "assert (lb_lt_ub : -ub < ub) by apply pos_opp_lt, ub0.",
            "VernacExtend",
            "0a980c885ccbfe96667d475d63ea95768407e360"
        ],
        [
            "assert (xint : tan(-ub) < x < tan ub).",
            "VernacExtend",
            "377ad5eae37547422e3edda0bf477e3c326156a3"
        ],
        [
            "assert (xint' : x < tan ub /\\ -(tan ub) < x) by apply Rabs_def2, Pub.",
            "VernacExtend",
            "cb86f5ebe4177317297b6cab2bdbdaacaf90f954"
        ],
        [
            "rewrite tan_neg; tauto.",
            "VernacExtend",
            "98d6763e2e6c89db0c1ca2248fb6248bbee53f74"
        ],
        [
            "assert (inv_p : forall x, tan(-ub) <= x -> x <= tan ub -> comp tan atan x = id x).",
            "VernacExtend",
            "4369bc22c6365e03908ba743abf73f01789d10cb"
        ],
        [
            "intros; apply atan_right_inv.",
            "VernacExtend",
            "b23ec1a51eaa5de173c0df4c4c66549bd1c5dc27"
        ],
        [
            "assert (int_tan : forall y, tan (- ub) <= y -> y <= tan ub -> -ub <= atan y <= ub).",
            "VernacExtend",
            "6cc8aed7740d85c1364927fc5607a7dc819b9f7d"
        ],
        [
            "clear -ub0 ubpi; intros y lo up; split.",
            "VernacExtend",
            "a080de309694bec04ba5d65e69c6984d628ea758"
        ],
        [
            "destruct (Rle_lt_dec (-ub) (atan y)) as [h | abs]; auto.",
            "VernacExtend",
            "6dcc3b72f3f37dcd9f4701c54472098dd46e1bc7"
        ],
        [
            "assert (y < tan (-ub)).",
            "VernacExtend",
            "f0902e3ef5a032d025e7320238b043fffe516460"
        ],
        [
            "rewrite <- (atan_right_inv y); apply tan_increasing.",
            "VernacExtend",
            "6dc6d70a3f981ebb12bd65ed80b8e6f32f28c085"
        ],
        [
            "destruct (atan_bound y); assumption.",
            "VernacExtend",
            "6002d1bd82cc8c5286ffd6724862bcd0f66242a5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "destruct (Rle_lt_dec (atan y) ub) as [h | abs]; auto.",
            "VernacExtend",
            "20f72611d8872c38dfc2423a3006cbe09363c244"
        ],
        [
            "assert (tan ub < y).",
            "VernacExtend",
            "40c297e0d455e5b98cf6e8a7baf70124b5833368"
        ],
        [
            "rewrite <- (atan_right_inv y); apply tan_increasing.",
            "VernacExtend",
            "6dc6d70a3f981ebb12bd65ed80b8e6f32f28c085"
        ],
        [
            "rewrite Ropp_div; lra.",
            "VernacExtend",
            "340db74ad5ddd66ab75cc8824f09c61d20738e74"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct (atan_bound y); assumption.",
            "VernacExtend",
            "6002d1bd82cc8c5286ffd6724862bcd0f66242a5"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assert (incr : forall x y, -ub <= x -> x < y -> y <= ub -> tan x < tan y).",
            "VernacExtend",
            "d4b18fc1c192a3da423e40f965364d212e4aae94"
        ],
        [
            "intros y z l yz u; apply tan_increasing.",
            "VernacExtend",
            "dabab7c19627fb3c26c4eec1fb77ba0cd1851d8f"
        ],
        [
            "rewrite Ropp_div; lra.",
            "VernacExtend",
            "340db74ad5ddd66ab75cc8824f09c61d20738e74"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assert (der : forall a, -ub <= a <= ub -> derivable_pt tan a).",
            "VernacExtend",
            "ac3543480592514e148dedbdb63ae992a9b3873d"
        ],
        [
            "intros a [la ua]; apply derivable_pt_tan.",
            "VernacExtend",
            "691f74d91a64704949f88880b2299299aa3d14a3"
        ],
        [
            "rewrite Ropp_div; split; lra.",
            "VernacExtend",
            "a1d2b2925af1e1c6f6721c33242e0feeaa312867"
        ],
        [
            "assert (df_neq : derive_pt tan (atan x) (derivable_pt_recip_interv_prelim1 tan atan (- ub) ub x lb_lt_ub xint inv_p int_tan incr der) <> 0).",
            "VernacExtend",
            "e523769358cb701308da63305324a162766b1fa2"
        ],
        [
            "rewrite <- (pr_nu tan (atan x) (derivable_pt_tan (atan x) (atan_bound x))).",
            "VernacExtend",
            "23e5f2eaa314679434dbfcae8de66dbe53c04f1d"
        ],
        [
            "rewrite derive_pt_tan.",
            "VernacExtend",
            "2cde721afedac1f43d1c8d28eca77262e1df660e"
        ],
        [
            "solve[apply Rgt_not_eq, plus_Rsqr_gt_0].",
            "VernacExtend",
            "b60b8557de8a1bbc5ab7fd3415a6e24b572b6534"
        ],
        [
            "assert (t := derive_pt_recip_interv tan atan (-ub) ub x lb_lt_ub xint incr int_tan der inv_p df_neq).",
            "VernacExtend",
            "be29530389d45ceeecf4d7470b175c5f24a3e07e"
        ],
        [
            "rewrite <- (pr_nu atan x (derivable_pt_recip_interv tan atan (- ub) ub x lb_lt_ub xint inv_p int_tan incr der df_neq)).",
            "VernacExtend",
            "e48a9c0820788a194da4f3a56324b89a83dc6851"
        ],
        [
            "rewrite t.",
            "VernacExtend",
            "d187ecef79e3762aaf4f6de9075d9e12dbadbeea"
        ],
        [
            "assert (t' := atan_bound x).",
            "VernacExtend",
            "011977e193786f34d6317ddfa20f6c148b4da84f"
        ],
        [
            "rewrite <- (pr_nu tan (atan x) (derivable_pt_tan _ t')).",
            "VernacExtend",
            "38830ff1ef7634760400171ef9ac1978f26f8cc3"
        ],
        [
            "rewrite derive_pt_tan, atan_right_inv.",
            "VernacExtend",
            "fb7f90561b131b9ed432ccc5b8016e68469bb5a2"
        ],
        [
            "replace (Rsqr x) with (x ^ 2) by (unfold Rsqr; ring).",
            "VernacExtend",
            "b6f5260e904cc44c6a54a9b590deba099fe7b33b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_atan : forall x, derivable_pt_lim atan x (/(1 + x^2)).",
            "VernacStartTheoremProof",
            "048340e48c76bed2dce4940c6446036ef502095f"
        ],
        [
            "intros x.",
            "VernacExtend",
            "596d66edc70dae19981ed74f103fc0a865aec92c"
        ],
        [
            "apply derive_pt_eq_1 with (derivable_pt_atan x).",
            "VernacExtend",
            "52f2fea9f5519f1978b2522987a38726d58d4523"
        ],
        [
            "replace (x ^ 2) with (x * x) by ring.",
            "VernacExtend",
            "ee0e45e43237cdc61188409c10a3e2a03edbe689"
        ],
        [
            "rewrite <- (Rmult_1_l (Rinv _)).",
            "VernacExtend",
            "e99d5b3b957b5f8d24fb7c5525eff75c6c93dc11"
        ],
        [
            "apply derive_pt_atan.",
            "VernacExtend",
            "15592655c644c6dc362e05e011cdb8fb179291ab"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Ratan_seq x := fun n => (x ^ (2 * n + 1) / INR (2 * n + 1))%R.",
            "VernacDefinition",
            "ff3591ddefb6638a75591a7c04cd8276c3ac2b93"
        ],
        [
            "Lemma Ratan_seq_decreasing : forall x, (0 <= x <= 1)%R -> Un_decreasing (Ratan_seq x).",
            "VernacStartTheoremProof",
            "582eaba4839da7945dac863c6afd4827d8b5db87"
        ],
        [
            "intros x Hx n.",
            "VernacExtend",
            "94f8394515701832303e6f656a649eb42f2f0793"
        ],
        [
            "unfold Ratan_seq, Rdiv.",
            "VernacExtend",
            "9aef71f7702eb5b688794faafebce8f8c232eb98"
        ],
        [
            "apply Rmult_le_compat.",
            "VernacExtend",
            "99a65cd1efb8e35313415d4b052731e2b0746daf"
        ],
        [
            "apply pow_le.",
            "VernacExtend",
            "cc44161251b27644855953f8a9cda06edcf33960"
        ],
        [
            "exact (proj1 Hx).",
            "VernacExtend",
            "d195dce3c719826bbf3ee710ae48fd6625ea5791"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "apply lt_INR_0.",
            "VernacExtend",
            "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "destruct (proj1 Hx) as [Hx1|Hx1].",
            "VernacExtend",
            "cd37741fbc7c71a11d1d64fe819f98587e0d6d75"
        ],
        [
            "destruct (proj2 Hx) as [Hx2|Hx2].",
            "VernacExtend",
            "809c3ca0e78eb6a254ce944fb6fb6264884d535c"
        ],
        [
            "rewrite <- (Rinv_involutive x).",
            "VernacExtend",
            "d474c5a399b665588f81c9b76d787d6e9733fd6a"
        ],
        [
            "assert (/ x <> 0)%R by auto with real.",
            "VernacExtend",
            "e26feda9db221f9aaa5de3280c467be687938586"
        ],
        [
            "repeat rewrite <- Rinv_pow with (1 := H).",
            "VernacExtend",
            "784e7123da96c353320b55222320211f377a7f84"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_lt_contravar.",
            "VernacExtend",
            "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
        ],
        [
            "apply Rmult_lt_0_compat ; apply pow_lt ; auto with real.",
            "VernacExtend",
            "bab816b40f5cf396e93a00b4816f0fbec886b3e7"
        ],
        [
            "apply Rlt_pow.",
            "VernacExtend",
            "17447c4958d072f260c2174def3747d4da8d4e17"
        ],
        [
            "rewrite <- Rinv_1.",
            "VernacExtend",
            "25f4271863b63e7960d69c1c8df426f168da59be"
        ],
        [
            "apply Rinv_lt_contravar.",
            "VernacExtend",
            "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "exact Hx1.",
            "VernacExtend",
            "619012b5bc303d3813baf09b498945592c82f909"
        ],
        [
            "exact Hx2.",
            "VernacExtend",
            "698088d6eee34c6e8791b48d84b9572c31885ce8"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "exact Hx1.",
            "VernacExtend",
            "619012b5bc303d3813baf09b498945592c82f909"
        ],
        [
            "rewrite Hx2.",
            "VernacExtend",
            "762fa2d49508177b00d0e4ad5a9c143b424050e0"
        ],
        [
            "do 2 rewrite pow1.",
            "VernacExtend",
            "f5181b0e824424068d2a267347efb08354b1c28b"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "rewrite <- Hx1.",
            "VernacExtend",
            "dc04c588509e9c80cb9de507fd065df20b165a4b"
        ],
        [
            "do 2 (rewrite pow_i ; [ idtac | omega ]).",
            "VernacExtend",
            "78493b70aa79c9a8b1a614fe40a56b6b747de421"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_lt_contravar.",
            "VernacExtend",
            "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
        ],
        [
            "apply Rmult_lt_0_compat ; apply lt_INR_0 ; omega.",
            "VernacExtend",
            "f3d7b69c7832a85d46fded5b2e29fbcde836c633"
        ],
        [
            "apply lt_INR.",
            "VernacExtend",
            "6da54bc8028ec35546fbb190052dc9499ef7649e"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ratan_seq_converging : forall x, (0 <= x <= 1)%R -> Un_cv (Ratan_seq x) 0.",
            "VernacStartTheoremProof",
            "721794de1700ee4f5503192b2152cf4631b221de"
        ],
        [
            "intros x Hx eps Heps.",
            "VernacExtend",
            "242d3eb1902432348f7cea9c90c315a38d888da3"
        ],
        [
            "destruct (archimed (/ eps)) as (HN,_).",
            "VernacExtend",
            "919e63bf52e1722f4d86366f19cb5d52ed2d33ce"
        ],
        [
            "assert (0 < up (/ eps))%Z.",
            "VernacExtend",
            "6784550e70a60258e7d12d96312e66d09defd0d2"
        ],
        [
            "apply lt_IZR.",
            "VernacExtend",
            "165b941162ea1938aa71e78f57835b8df85de779"
        ],
        [
            "apply Rlt_trans with (2 := HN).",
            "VernacExtend",
            "a402a7cb3ad58cbbd2fe307c910619fec2755e5f"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "exact Heps.",
            "VernacExtend",
            "717cd246808f247773d933debf18d809aaf30e8c"
        ],
        [
            "case_eq (up (/ eps)) ; intros ; rewrite H0 in H ; try discriminate H.",
            "VernacExtend",
            "71eec079accc6a05d1c280b39400ba759a188ea4"
        ],
        [
            "rewrite H0 in HN.",
            "VernacExtend",
            "d3641a0b930d04960d300859594fb88fe5bd1857"
        ],
        [
            "simpl in HN.",
            "VernacExtend",
            "2a1cbc3ad8718bded16f535a33e4fb25fb6f9bea"
        ],
        [
            "pose (N := Pos.to_nat p).",
            "VernacExtend",
            "fa931190d0c31671f4f8a87d674876a0e42f3193"
        ],
        [
            "fold N in HN.",
            "VernacExtend",
            "c3e774031d4da3e46ea6c5aa24cb34302f97004f"
        ],
        [
            "clear H H0.",
            "VernacExtend",
            "a743351ff441835fe992d483bf3a5b58c3fccd77"
        ],
        [
            "exists N.",
            "VernacExtend",
            "3a77aef7937b4644ae655ca246f76b7aa0d197df"
        ],
        [
            "intros n Hn.",
            "VernacExtend",
            "4a15d287eb245c84eabfb58cba2e377ac025029a"
        ],
        [
            "unfold R_dist.",
            "VernacExtend",
            "9d14879a55d02ad54565968e31b64da7aeb66d97"
        ],
        [
            "rewrite Rminus_0_r.",
            "VernacExtend",
            "f41d2c9a1ab0030a599c576fc397975a2d0d5b33"
        ],
        [
            "unfold Ratan_seq.",
            "VernacExtend",
            "4959378ac4c9f7fe7ac66af75d626b3c8a376371"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "apply Rle_lt_trans with (1 ^ (2 * n + 1) / INR (2 * n + 1))%R.",
            "VernacExtend",
            "326e42154bdb6559be4d918b3e352b090f406915"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "apply lt_INR_0.",
            "VernacExtend",
            "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply pow_incr.",
            "VernacExtend",
            "6fbd345598152184ea2223d20421517d574c6af3"
        ],
        [
            "exact Hx.",
            "VernacExtend",
            "c13c54106cd84aeca38c2dd70bf8e46a5be5e1eb"
        ],
        [
            "rewrite pow1.",
            "VernacExtend",
            "dd526bd019440e498820d4e94534018a27ad5cf9"
        ],
        [
            "apply Rle_lt_trans with (/ INR (2 * N + 1))%R.",
            "VernacExtend",
            "9040db9a40ef1a2bcd856e2d671af3652c764d5e"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "apply Rinv_le_contravar.",
            "VernacExtend",
            "28ea2dd655f9d8c890013606f785cc34c54c4a71"
        ],
        [
            "apply lt_INR_0.",
            "VernacExtend",
            "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply le_INR.",
            "VernacExtend",
            "482ba85c33b4f446aa5e9ca8bca5b198f5d8a8c5"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "rewrite <- (Rinv_involutive eps).",
            "VernacExtend",
            "3255d4eb7914a1b4381d0b1474bd252e750a2970"
        ],
        [
            "apply Rinv_lt_contravar.",
            "VernacExtend",
            "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
        ],
        [
            "apply Rmult_lt_0_compat.",
            "VernacExtend",
            "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "apply lt_INR_0.",
            "VernacExtend",
            "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply Rlt_trans with (INR N).",
            "VernacExtend",
            "2b9675cf7f7bbc203ee9d49ac2a3f75dd7ee9c2e"
        ],
        [
            "destruct (archimed (/ eps)) as (H,_).",
            "VernacExtend",
            "f9d30c6782745db498a295a2a7c29280e4d0c6d4"
        ],
        [
            "assert (0 < up (/ eps))%Z.",
            "VernacExtend",
            "6784550e70a60258e7d12d96312e66d09defd0d2"
        ],
        [
            "apply lt_IZR.",
            "VernacExtend",
            "165b941162ea1938aa71e78f57835b8df85de779"
        ],
        [
            "apply Rlt_trans with (2 := H).",
            "VernacExtend",
            "d8410cc596b0098b2ccbdf38c7de66085ce5c67f"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "exact Heps.",
            "VernacExtend",
            "717cd246808f247773d933debf18d809aaf30e8c"
        ],
        [
            "unfold N.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "rewrite INR_IZR_INZ, positive_nat_Z.",
            "VernacExtend",
            "8056f04745c927274895ce094ec6ee7f94bb70c8"
        ],
        [
            "exact HN.",
            "VernacExtend",
            "93f70707aec05037c30097964e6fb9f807a9738d"
        ],
        [
            "apply lt_INR.",
            "VernacExtend",
            "6da54bc8028ec35546fbb190052dc9499ef7649e"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply Rgt_not_eq.",
            "VernacExtend",
            "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
        ],
        [
            "exact Heps.",
            "VernacExtend",
            "717cd246808f247773d933debf18d809aaf30e8c"
        ],
        [
            "apply Rle_ge.",
            "VernacExtend",
            "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "apply pow_le.",
            "VernacExtend",
            "cc44161251b27644855953f8a9cda06edcf33960"
        ],
        [
            "exact (proj1 Hx).",
            "VernacExtend",
            "d195dce3c719826bbf3ee710ae48fd6625ea5791"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "apply Rinv_0_lt_compat.",
            "VernacExtend",
            "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
        ],
        [
            "apply lt_INR_0.",
            "VernacExtend",
            "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ps_atan_exists_01 (x : R) (Hx:0 <= x <= 1) : {l : R | Un_cv (fun N : nat => sum_f_R0 (tg_alt (Ratan_seq x)) N) l}.",
            "VernacDefinition",
            "f6cb2c4653ae2798072381e8e9f745112242347e"
        ],
        [
            "exact (alternated_series (Ratan_seq x) (Ratan_seq_decreasing _ Hx) (Ratan_seq_converging _ Hx)).",
            "VernacExtend",
            "03efa2baa9570998c74cd90f9b3fc85779f54cac"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma Ratan_seq_opp : forall x n, Ratan_seq (-x) n = -Ratan_seq x n.",
            "VernacStartTheoremProof",
            "3078516c98e724799412e50509754d59004c815f"
        ],
        [
            "intros x n; unfold Ratan_seq.",
            "VernacExtend",
            "d83ca16e9e4b6fbeb80664b61ab9dc8cc77a7aa5"
        ],
        [
            "rewrite !pow_add, !pow_mult, !pow_1.",
            "VernacExtend",
            "f77bdeb26fae9fe7af7c3834db9f8da394a018a6"
        ],
        [
            "unfold Rdiv; replace ((-x) ^ 2) with (x ^ 2) by ring; ring.",
            "VernacExtend",
            "94eb4a62e4712caa4dc923a70d7cca3b6ab4f889"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma sum_Ratan_seq_opp : forall x n, sum_f_R0 (tg_alt (Ratan_seq (- x))) n = - sum_f_R0 (tg_alt (Ratan_seq x)) n.",
            "VernacStartTheoremProof",
            "b83905687cd5f56f30b32dc59d1ef6c2f3765617"
        ],
        [
            "intros x n; replace (-sum_f_R0 (tg_alt (Ratan_seq x)) n) with (-1 * sum_f_R0 (tg_alt (Ratan_seq x)) n) by ring.",
            "VernacExtend",
            "fd88f589632c3073891b06895b064cc87a10021b"
        ],
        [
            "rewrite scal_sum; apply sum_eq; intros i _; unfold tg_alt.",
            "VernacExtend",
            "acc11649078939f4dd334d9131407f203320bb05"
        ],
        [
            "rewrite Ratan_seq_opp; ring.",
            "VernacExtend",
            "403a14cd016e11738ac734655ebf4c7c729c2738"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ps_atan_exists_1 (x : R) (Hx : -1 <= x <= 1) : {l : R | Un_cv (fun N : nat => sum_f_R0 (tg_alt (Ratan_seq x)) N) l}.",
            "VernacDefinition",
            "8fc6bbb5204969ee100fe5966892a0ddb842c584"
        ],
        [
            "destruct (Rle_lt_dec 0 x).",
            "VernacExtend",
            "07d3e05336bf45ef72edfb497841013f661e2665"
        ],
        [
            "assert (pr : 0 <= x <= 1) by tauto.",
            "VernacExtend",
            "86d12f5c720203cb9805238c47813f4e27839631"
        ],
        [
            "exact (ps_atan_exists_01 x pr).",
            "VernacExtend",
            "5ee0bbdd564edd31c4d71f3a8222563956241e32"
        ],
        [
            "assert (pr : 0 <= -x <= 1) by (destruct Hx; split; lra).",
            "VernacExtend",
            "52b6259901b78cde58fbaef50cc6cb8248b7dfc1"
        ],
        [
            "destruct (ps_atan_exists_01 _ pr) as [v Pv].",
            "VernacExtend",
            "94d3892639300fdfbde7d4e3a6ef8564f264a0e3"
        ],
        [
            "exists (-v).",
            "VernacExtend",
            "4418cc34525075afc9fd55c09df934ddececf930"
        ],
        [
            "apply (Un_cv_ext (fun n => (- 1) * sum_f_R0 (tg_alt (Ratan_seq (- x))) n)).",
            "VernacExtend",
            "8d0793b6a4ba92486553028dadb7c8184f495c3d"
        ],
        [
            "intros n; rewrite sum_Ratan_seq_opp; ring.",
            "VernacExtend",
            "4efabc4dc3ab9308311772f8be62a8f7548a929c"
        ],
        [
            "replace (-v) with (-1 * v) by ring.",
            "VernacExtend",
            "0dd7e9ce7c4ca662dd0e88b637c31849470b19b0"
        ],
        [
            "apply CV_mult;[ | assumption].",
            "VernacExtend",
            "7f65904717bc65729979ce6f564e0453d1e58d1f"
        ],
        [
            "solve[intros; exists 0%nat; intros; rewrite R_dist_eq; auto].",
            "VernacExtend",
            "ead993c6ff3e48570ae292b649895b3307a7a1ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition in_int (x : R) : {-1 <= x <= 1}+{~ -1 <= x <= 1}.",
            "VernacDefinition",
            "a70ba592cad7542686462a9af855a61607a574db"
        ],
        [
            "destruct (Rle_lt_dec x 1).",
            "VernacExtend",
            "fdceb939d342392dc14f10f810caed0f484266dd"
        ],
        [
            "destruct (Rle_lt_dec (-1) x).",
            "VernacExtend",
            "58d837f3ebda7380b5a31b3fd64b5b64e5695e09"
        ],
        [
            "left;split; auto.",
            "VernacExtend",
            "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
        ],
        [
            "right;intros [a1 a2]; lra.",
            "VernacExtend",
            "e10952d3ecccceb25304ffdaa5826521c8299e5b"
        ],
        [
            "right;intros [a1 a2]; lra.",
            "VernacExtend",
            "e10952d3ecccceb25304ffdaa5826521c8299e5b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ps_atan (x : R) : R := match in_int x with left h => let (v, _) := ps_atan_exists_1 x h in v | right h => atan x end.",
            "VernacDefinition",
            "818d6ab7f765dc1a8ca05b9fa938f11a96df00e9"
        ],
        [
            "Lemma ps_atan0_0 : ps_atan 0 = 0.",
            "VernacStartTheoremProof",
            "8c0558788ccec7df240b1cc7515adf77051df28f"
        ],
        [
            "unfold ps_atan.",
            "VernacExtend",
            "48e83e23273aaf0a5900c6e4aaed93809791cc6e"
        ],
        [
            "destruct (in_int 0) as [h1 | h2].",
            "VernacExtend",
            "2afccf8d1161af22c6e8df07f015351693b262c4"
        ],
        [
            "destruct (ps_atan_exists_1 0 h1) as [v P].",
            "VernacExtend",
            "d7ae3fc3ecd75555d3f5576ef1dcd7fd7f8a4dce"
        ],
        [
            "apply (UL_sequence _ _ _ P).",
            "VernacExtend",
            "eb9057009102ce0e2a6e7ddd73f98b92003d1b78"
        ],
        [
            "apply (Un_cv_ext (fun n => 0)).",
            "VernacExtend",
            "73386b982d3c725f2cf6f596be20bce95622a82a"
        ],
        [
            "symmetry;apply sum_eq_R0.",
            "VernacExtend",
            "0d71a194f13c03e1c51e00f8a3d0efed0d529ef2"
        ],
        [
            "intros i _; unfold tg_alt, Ratan_seq; rewrite plus_comm; simpl.",
            "VernacExtend",
            "8b5440dd5c8e317423ea307d9e5e3fbf965bcc0a"
        ],
        [
            "unfold Rdiv; rewrite !Rmult_0_l, Rmult_0_r; reflexivity.",
            "VernacExtend",
            "5e2e5123fd339e7bf60293fcb2d443a0ae41beca"
        ],
        [
            "intros eps ep; exists 0%nat; intros n _; unfold R_dist.",
            "VernacExtend",
            "118212f9182410e68774082f423c1b7fe07a67b0"
        ],
        [
            "rewrite Rminus_0_r, Rabs_pos_eq; auto with real.",
            "VernacExtend",
            "d7e765746c7b7264173ea44e314166accf235e3b"
        ],
        [
            "case h2; split; lra.",
            "VernacExtend",
            "c1222d5d5f25c453e8a3c413784c98bfd47a8108"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ps_atan_exists_1_opp : forall x h h', proj1_sig (ps_atan_exists_1 (-x) h) = -(proj1_sig (ps_atan_exists_1 x h')).",
            "VernacStartTheoremProof",
            "f90664814149270627ef688ef0771a380938f394"
        ],
        [
            "intros x h h'; destruct (ps_atan_exists_1 (-x) h) as [v Pv].",
            "VernacExtend",
            "536cb611b52e5d1379c42a47170ff344f1088fdf"
        ],
        [
            "destruct (ps_atan_exists_1 x h') as [u Pu]; simpl.",
            "VernacExtend",
            "b0b8efa12cccdcb578a694c4c3a402aa8fa0d007"
        ],
        [
            "assert (Pu' : Un_cv (fun N => (-1) * sum_f_R0 (tg_alt (Ratan_seq x)) N) (-1 * u)).",
            "VernacExtend",
            "490cf0695b3689562b7721a30e1056bbe09c48cc"
        ],
        [
            "apply CV_mult;[ | assumption].",
            "VernacExtend",
            "7f65904717bc65729979ce6f564e0453d1e58d1f"
        ],
        [
            "intros eps ep; exists 0%nat; intros; rewrite R_dist_eq; assumption.",
            "VernacExtend",
            "b075137f2efebb63e26a26a592ae218093a17eb5"
        ],
        [
            "assert (Pv' : Un_cv (fun N : nat => -1 * sum_f_R0 (tg_alt (Ratan_seq x)) N) v).",
            "VernacExtend",
            "966a0ad488d1147e4fa387f3c86709cfce35b212"
        ],
        [
            "apply Un_cv_ext with (2 := Pv); intros n; rewrite sum_Ratan_seq_opp; ring.",
            "VernacExtend",
            "e228f56aed06173af5292a9e091102a35abf0750"
        ],
        [
            "replace (-u) with (-1 * u) by ring.",
            "VernacExtend",
            "10c1c41c152b1766a0400804bc82553a349af183"
        ],
        [
            "apply UL_sequence with (1:=Pv') (2:= Pu').",
            "VernacExtend",
            "d78a63f685389735ebb3293872c6ec246a7e474f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ps_atan_opp : forall x, ps_atan (-x) = -ps_atan x.",
            "VernacStartTheoremProof",
            "59e22eac681c01b026d329e75b8d03c578f370c5"
        ],
        [
            "intros x; unfold ps_atan.",
            "VernacExtend",
            "d05b77557b6fcd6349dadce11584da43b1fb1362"
        ],
        [
            "destruct (in_int (- x)) as [inside | outside].",
            "VernacExtend",
            "2c8e5345bd8490356e0a023b0c0ed69f564047ad"
        ],
        [
            "destruct (in_int x) as [ins' | outs'].",
            "VernacExtend",
            "c3c8894b90576ed214599f8340ecaf8ff0979153"
        ],
        [
            "generalize (ps_atan_exists_1_opp x inside ins').",
            "VernacExtend",
            "c260974315d277ada75809d872a3e3ec689d183c"
        ],
        [
            "intros h; exact h.",
            "VernacExtend",
            "c90012e2d5dec45782f4e822b488b59c29a207c8"
        ],
        [
            "destruct inside; case outs'; split; lra.",
            "VernacExtend",
            "cb3af48fd08d1c6b367175233883470b021e970b"
        ],
        [
            "destruct (in_int x) as [ins' | outs'].",
            "VernacExtend",
            "c3c8894b90576ed214599f8340ecaf8ff0979153"
        ],
        [
            "destruct outside; case ins'; split; lra.",
            "VernacExtend",
            "f8f8ce3b87125f1004fa8abdedaeba8388075f83"
        ],
        [
            "apply atan_opp.",
            "VernacExtend",
            "c0946fd864299e6b74c5d73fdee2743d5074c9d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ps_atanSeq_continuity_pt_1 : forall (N:nat) (x:R), 0 <= x -> x <= 1 -> continuity_pt (fun x => sum_f_R0 (tg_alt (Ratan_seq x)) N) x.",
            "VernacStartTheoremProof",
            "bf33c80464f13ad3d25e0f50798104a9c58e35ec"
        ],
        [
            "assert (Sublemma : forall (x:R) (N:nat), sum_f_R0 (tg_alt (Ratan_seq x)) N = x * (comp (fun x => sum_f_R0 (fun n => (fun i : nat => (-1) ^ i / INR (2 * i + 1)) n * x ^ n) N) (fun x => x ^ 2) x)).",
            "VernacExtend",
            "d671b9a2adffbd68e7f31261ab395c3bda956a1e"
        ],
        [
            "intros x N.",
            "VernacExtend",
            "8f6bb5e9f89650401c318ed5ec064551ee2496a3"
        ],
        [
            "induction N.",
            "VernacExtend",
            "014c91061e9f52f369bba44af3bfd9be499036f5"
        ],
        [
            "unfold tg_alt, Ratan_seq, comp ; simpl ; field.",
            "VernacExtend",
            "dcf4da5d22c3bd8120c16245e71255982187382d"
        ],
        [
            "simpl sum_f_R0 at 1.",
            "VernacExtend",
            "f02360dbb44637edabdff5eeca9faaf7b758c0d7"
        ],
        [
            "rewrite IHN.",
            "VernacExtend",
            "00aa034a2d57f9e663ce1238f2af406e45b52477"
        ],
        [
            "replace (comp (fun x => sum_f_R0 (fun n : nat => (-1) ^ n / INR (2 * n + 1) * x ^ n) (S N)) (fun x => x ^ 2)) with (comp (fun x => sum_f_R0 (fun n : nat => (-1) ^ n / INR (2 * n + 1) * x ^ n) N + (-1) ^ (S N) / INR (2 * (S N) + 1) * x ^ (S N)) (fun x => x ^ 2)).",
            "VernacExtend",
            "656e54a63a5e939bb85bf59ce4f5636fe2501428"
        ],
        [
            "unfold comp.",
            "VernacExtend",
            "b8c595984ddc3a4857a83b585333ec689de2b811"
        ],
        [
            "rewrite Rmult_plus_distr_l.",
            "VernacExtend",
            "e243bcfd594d50273783e947b301871dc4efc70c"
        ],
        [
            "apply Rplus_eq_compat_l.",
            "VernacExtend",
            "76e8923f15671bb36c0fea83fec68cfd51cb2557"
        ],
        [
            "unfold tg_alt, Ratan_seq.",
            "VernacExtend",
            "14407c367e2d58a9175d6ed011818f960c179fb9"
        ],
        [
            "rewrite <- Rmult_assoc.",
            "VernacExtend",
            "34da3c50cde53c179a4908b1329a459071245c05"
        ],
        [
            "case (Req_dec x 0) ; intro Hyp.",
            "VernacExtend",
            "2491b2b0e554c53f0c65da1fa142870bae48b53d"
        ],
        [
            "rewrite Hyp ; rewrite pow_i.",
            "VernacExtend",
            "9f89202578ae7373a2a8df3d2cfe99a831d34163"
        ],
        [
            "rewrite Rmult_0_l ; rewrite Rmult_0_l.",
            "VernacExtend",
            "893b07160b0ca9a38a2f8746aadce7f39f6dee10"
        ],
        [
            "unfold Rdiv ; rewrite Rmult_0_l ; rewrite Rmult_0_r ; reflexivity.",
            "VernacExtend",
            "2764afad493e4dda3ea005376b936bb1dcb868fb"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "replace (x * ((-1) ^ S N / INR (2 * S N + 1)) * (x ^ 2) ^ S N) with (x ^ (2 * S N + 1) * ((-1) ^ S N / INR (2 * S N + 1))).",
            "VernacExtend",
            "28b61b3c3c1af0ea5b6aa33e7b1a2a9cd768af28"
        ],
        [
            "rewrite Rmult_comm ; unfold Rdiv at 1.",
            "VernacExtend",
            "f5d4baa79fb90e705fcafe10650c84e9838f8bd4"
        ],
        [
            "rewrite Rmult_assoc ; apply Rmult_eq_compat_l.",
            "VernacExtend",
            "e137f0649bb524db6ee354f5fba7a87e0babf344"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "apply Rgt_not_eq ; intuition.",
            "VernacExtend",
            "2a866015e0838b26d3f5654cd54ee0107cd2ddec"
        ],
        [
            "rewrite Rmult_assoc.",
            "VernacExtend",
            "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
        ],
        [
            "replace (x * ((-1) ^ S N / INR (2 * S N + 1) * (x ^ 2) ^ S N)) with (((-1) ^ S N / INR (2 * S N + 1) * (x ^ 2) ^ S N) * x).",
            "VernacExtend",
            "83bc755de7ceb001926b31f451de142f01038164"
        ],
        [
            "rewrite Rmult_assoc.",
            "VernacExtend",
            "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
        ],
        [
            "replace ((x ^ 2) ^ S N * x) with (x ^ (2 * S N + 1)).",
            "VernacExtend",
            "9f6cb7ccfb88ba2ec4faad2cfd60bfcb7036f03a"
        ],
        [
            "rewrite Rmult_comm at 1 ; reflexivity.",
            "VernacExtend",
            "4621a98761187ba6e02ddc4caa522df4b5e783b2"
        ],
        [
            "rewrite <- pow_mult.",
            "VernacExtend",
            "0cc1882459d0db153735c16ba69e5e207c303bd9"
        ],
        [
            "assert (Temp : forall x n, x ^ n * x = x ^ (n+1)).",
            "VernacExtend",
            "04a8b5d28f299cb0c587455dd5ed00e6de152305"
        ],
        [
            "intros a n ; induction n.",
            "VernacExtend",
            "abf6a5265f2f9cacab8e34f44f63e0d8f6095899"
        ],
        [
            "rewrite pow_O.",
            "VernacExtend",
            "917096df985d65f4e2dba38a6bd08f22c35a2789"
        ],
        [
            "simpl ; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "simpl ; rewrite Rmult_assoc ; rewrite IHn ; intuition.",
            "VernacExtend",
            "b492105bcb83a5a10a3e16fea7262bc5c50086a8"
        ],
        [
            "rewrite Temp ; reflexivity.",
            "VernacExtend",
            "10e7ef34e7d5595a2cc7ac69aac0beebda9e47a9"
        ],
        [
            "rewrite Rmult_comm ; reflexivity.",
            "VernacExtend",
            "4dc614fae2a0fd9114af75fd72af7f949b96d4a5"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intros N x x_lb x_ub.",
            "VernacExtend",
            "e99a0f4a2091710c47f638a8d646833d8eb5dc45"
        ],
        [
            "intros eps eps_pos.",
            "VernacExtend",
            "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
        ],
        [
            "assert (continuity_id : continuity id).",
            "VernacExtend",
            "d2f098e46ab4a642b38ebc48a9009cb3b074812e"
        ],
        [
            "apply derivable_continuous ; exact derivable_id.",
            "VernacExtend",
            "def8870c4887088ca7183565380a4db2707e37ce"
        ],
        [
            "assert (Temp := continuity_mult id (comp (fun x1 : R => sum_f_R0 (fun n : nat => (-1) ^ n / INR (2 * n + 1) * x1 ^ n) N) (fun x1 : R => x1 ^ 2)) continuity_id).",
            "VernacExtend",
            "73d63ccbb228247df08fbb064c1db9d85f6cab67"
        ],
        [
            "assert (Temp2 : continuity (comp (fun x1 : R => sum_f_R0 (fun n : nat => (-1) ^ n / INR (2 * n + 1) * x1 ^ n) N) (fun x1 : R => x1 ^ 2))).",
            "VernacExtend",
            "326337895c56ba03aaaccfcfeb05a47a7dcf02ab"
        ],
        [
            "apply continuity_comp.",
            "VernacExtend",
            "8bb15e6da25754c33eb2c6bd1991fb28bf1ee30a"
        ],
        [
            "reg.",
            "VernacExtend",
            "200773634894b8319f51d08aac98d6835b0db846"
        ],
        [
            "apply continuity_finite_sum.",
            "VernacExtend",
            "464f94a28a89c7a0dbd8d9b315b8c32c1d6e239a"
        ],
        [
            "elim (Temp Temp2 x eps eps_pos) ; clear Temp Temp2 ; intros alpha T ; destruct T as (alpha_pos, T).",
            "VernacExtend",
            "c764163c42a9e8d86afd6ab9f32747e0490ae0e9"
        ],
        [
            "exists alpha ; split.",
            "VernacExtend",
            "4cb693ec547c02367329bf0821b91d53077c3882"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intros x0 x0_cond.",
            "VernacExtend",
            "c88db78a68e826c93a215b4425360cf9d326a1e0"
        ],
        [
            "rewrite Sublemma ; rewrite Sublemma.",
            "VernacExtend",
            "203b1e50789cd869a8efec53a7672b1ff6966c83"
        ],
        [
            "apply T.",
            "VernacExtend",
            "58f1cfdffc07643a959fa337d4262e5857b39e7d"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Datan_seq := fun (x:R) (n:nat) => x ^ (2*n).",
            "VernacDefinition",
            "39979ab74edabae1800f87aa8d1e1eefef703aa3"
        ],
        [
            "Lemma pow_lt_1_compat : forall x n, 0 <= x < 1 -> (0 < n)%nat -> 0 <= x ^ n < 1.",
            "VernacStartTheoremProof",
            "c71a58525af26c5b95aea88dafb2001b7988263b"
        ],
        [
            "intros x n hx; induction 1; simpl.",
            "VernacExtend",
            "29f07428c2844bf544bf09fe0d858dcf1166edbb"
        ],
        [
            "rewrite Rmult_1_r; tauto.",
            "VernacExtend",
            "ea71ee3cfa392951ec362763dfbb8bbae3b9ab44"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmult_le_pos; tauto.",
            "VernacExtend",
            "418ad925b206c764c6bfe2237c8c09ba23e1cfd4"
        ],
        [
            "rewrite <- (Rmult_1_r 1); apply Rmult_le_0_lt_compat; intuition.",
            "VernacExtend",
            "23e7b5067251c00f4e3ed303f27fe6fe8746a881"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_seq_Rabs : forall x n, Datan_seq (Rabs x) n = Datan_seq x n.",
            "VernacStartTheoremProof",
            "da87b4e55030132763d374a82ba71be352529e76"
        ],
        [
            "intros x n; unfold Datan_seq; rewrite !pow_mult, pow2_abs; reflexivity.",
            "VernacExtend",
            "d76a97a9463a61e9eaca6109564eac966d91f658"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_seq_pos : forall x n, 0 < x -> 0 < Datan_seq x n.",
            "VernacStartTheoremProof",
            "d5939d5d7d3089b30265baca2befb3e0859fda88"
        ],
        [
            "intros x n x_lb ; unfold Datan_seq ; induction n.",
            "VernacExtend",
            "01879232ba843a24bf5138aa337046c5729de277"
        ],
        [
            "simpl ; intuition.",
            "VernacExtend",
            "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
        ],
        [
            "replace (x ^ (2 * S n)) with ((x ^ 2) * (x ^ (2 * n))).",
            "VernacExtend",
            "da896ebade3112746605524a6aeb212c57a5c6a9"
        ],
        [
            "apply Rmult_gt_0_compat.",
            "VernacExtend",
            "d033236f2dabdc6d48d6d6aaa1c3030ba9186536"
        ],
        [
            "replace (x^2) with (x*x) by field ; apply Rmult_gt_0_compat ; assumption.",
            "VernacExtend",
            "7abc44c0702945e2aad696a73b93cbc165aac23f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (2 * S n)%nat with (S (S (2 * n))) by intuition.",
            "VernacExtend",
            "3f7c896f6f567da2c5dc4f8b4e54cb377ae12603"
        ],
        [
            "simpl ; field.",
            "VernacExtend",
            "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_sum_eq :forall x n, sum_f_R0 (tg_alt (Datan_seq x)) n = (1 - (- x ^ 2) ^ S n)/(1 + x ^ 2).",
            "VernacStartTheoremProof",
            "f49a0d1db41fca1ef12f09e080d396d66fb9da04"
        ],
        [
            "intros x n.",
            "VernacExtend",
            "d1898cd84886a23c5b1d52224620661237036e2c"
        ],
        [
            "assert (dif : - x ^ 2 <> 1).",
            "VernacExtend",
            "7933db8b72b45712316c08cec05748232952f4c6"
        ],
        [
            "apply Rlt_not_eq; apply Rle_lt_trans with 0;[ | apply Rlt_0_1].",
            "VernacExtend",
            "24f159a8e268a74eae8471108addc59acd1a54e3"
        ],
        [
            "assert (t := pow2_ge_0 x); lra.",
            "VernacExtend",
            "0c92929d064f45bb3739629152d4d88f17e61878"
        ],
        [
            "replace (1 + x ^ 2) with (1 - - (x ^ 2)) by ring; rewrite <- (tech3 _ n dif).",
            "VernacExtend",
            "f2a24fbba38b7a61c0068fc2ca6bf1e1ef7c1ab1"
        ],
        [
            "apply sum_eq; unfold tg_alt, Datan_seq; intros i _.",
            "VernacExtend",
            "ec7afc0dd9a0f3d8a9edb5da65684eb1e1a16b54"
        ],
        [
            "rewrite pow_mult, <- Rpow_mult_distr.",
            "VernacExtend",
            "911dd00d70ba73ae84be89b767b47f3bbdf58d02"
        ],
        [
            "f_equal.",
            "VernacExtend",
            "dfce814d1efcef60f8330516ad88155a3a5ec317"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_seq_increasing : forall x y n, (n > 0)%nat -> 0 <= x < y -> Datan_seq x n < Datan_seq y n.",
            "VernacStartTheoremProof",
            "d29b23336d909c783dd74b8d93244530b91fbf2c"
        ],
        [
            "intros x y n n_lb x_encad ; assert (x_pos : x >= 0) by intuition.",
            "VernacExtend",
            "25341d0888fa2f625d7369b89fa63e4b27793f12"
        ],
        [
            "assert (y_pos : y > 0).",
            "VernacExtend",
            "2054e0aa94a573c08addb8f36fd573141b0f87e2"
        ],
        [
            "apply Rle_lt_trans with (r2:=x) ; intuition.",
            "VernacExtend",
            "89d4e55c30787f6ae070eb38ad3b73f2ad6a0183"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "apply False_ind ; intuition.",
            "VernacExtend",
            "b4f4bad3ba8bf393e157f17e70333b596fe809dc"
        ],
        [
            "clear -x_encad x_pos y_pos ; induction n ; unfold Datan_seq.",
            "VernacExtend",
            "cd15f6e54c276387b3add3e98ab7c058a78f0861"
        ],
        [
            "case x_pos ; clear x_pos ; intro x_pos.",
            "VernacExtend",
            "86a6c6aa974dd3fcb70e30b0118026154490bb80"
        ],
        [
            "simpl ; apply Rmult_gt_0_lt_compat ; intuition.",
            "VernacExtend",
            "e6a18caf4b01ef3178fb7babd029e9e2b2de2a9e"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "rewrite x_pos ; rewrite pow_i.",
            "VernacExtend",
            "94d59b283f139d3a5ca21c10fed099d754c23927"
        ],
        [
            "replace (y ^ (2*1)) with (y*y).",
            "VernacExtend",
            "141c7d63e9e19cc7d06d8b6b49f6d74247c7fc56"
        ],
        [
            "apply Rmult_gt_0_compat ; assumption.",
            "VernacExtend",
            "52eaaa75f9b32ef29f209cf8f624689b487afed6"
        ],
        [
            "simpl ; field.",
            "VernacExtend",
            "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assert (Hrew : forall a, a^(2 * S (S n)) = (a ^ 2) * (a ^ (2 * S n))).",
            "VernacExtend",
            "c88e8134e28859a419f0a2820d8a8e4971acf72c"
        ],
        [
            "clear ; intro a ; replace (2 * S (S n))%nat with (S (S (2 * S n)))%nat by intuition.",
            "VernacExtend",
            "4bc9d2eee6a9fad933decb9ea457180a79327fc9"
        ],
        [
            "simpl ; field.",
            "VernacExtend",
            "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
        ],
        [
            "case x_pos ; clear x_pos ; intro x_pos.",
            "VernacExtend",
            "86a6c6aa974dd3fcb70e30b0118026154490bb80"
        ],
        [
            "rewrite Hrew ; rewrite Hrew.",
            "VernacExtend",
            "59170e85f95cc28417b8a41bbb59d666ea5328aa"
        ],
        [
            "apply Rmult_gt_0_lt_compat ; intuition.",
            "VernacExtend",
            "8601690ed821169a21896ba91fd1877a43f72cf0"
        ],
        [
            "apply Rmult_gt_0_lt_compat ; intuition ; lra.",
            "VernacExtend",
            "18dde5a52e6f93021af9e3b96dedecdfc8a6bfe8"
        ],
        [
            "rewrite x_pos.",
            "VernacExtend",
            "9643c2b6bd0e780555ce231c98fcd3cfedec8ded"
        ],
        [
            "rewrite pow_i ; intuition.",
            "VernacExtend",
            "97d8968779a246b6065d7443e0259d10d7dc2f2f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_seq_decreasing : forall x, -1 < x -> x < 1 -> Un_decreasing (Datan_seq x).",
            "VernacStartTheoremProof",
            "e6022e6ae636bdd6d866ac7096dfc2d708e442e0"
        ],
        [
            "intros x x_lb x_ub n.",
            "VernacExtend",
            "109558f9f6447d5b13773297878066142fadacda"
        ],
        [
            "unfold Datan_seq.",
            "VernacExtend",
            "eafb83508425acd6a062fed5ead915943bb35ea7"
        ],
        [
            "replace (2 * S n)%nat with (2 + 2 * n)%nat by ring.",
            "VernacExtend",
            "6986ed3973513617489f61b8a7866c1beae683aa"
        ],
        [
            "rewrite <- (Rmult_1_l (x ^ (2 * n))).",
            "VernacExtend",
            "232f5a389eea396da7eb500e550cbcbcbc87d3c3"
        ],
        [
            "rewrite pow_add.",
            "VernacExtend",
            "e7ffb4294c31ded66f1a5f321399a9a5b2326cb2"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "rewrite pow_mult; apply pow_le, pow2_ge_0.",
            "VernacExtend",
            "c51e9ebdb4c8bfb33e8d24de3158a355468d7b95"
        ],
        [
            "apply Rlt_le; rewrite <- pow2_abs.",
            "VernacExtend",
            "cad6c64b2dbae0a992c302d19a9f007a2f2bf399"
        ],
        [
            "assert (intabs : 0 <= Rabs x < 1).",
            "VernacExtend",
            "031fed135b3ae8843b976c82e34d61576ec2aac4"
        ],
        [
            "split;[apply Rabs_pos | apply Rabs_def1]; tauto.",
            "VernacExtend",
            "0c000481b61d5a57b5775a2e5dc1898622afe796"
        ],
        [
            "apply (pow_lt_1_compat (Rabs x) 2) in intabs.",
            "VernacExtend",
            "7dfd8e4bf20eb29a0f4b3d2900ea96698706d39e"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_seq_CV_0 : forall x, -1 < x -> x < 1 -> Un_cv (Datan_seq x) 0.",
            "VernacStartTheoremProof",
            "80ac38fa1563829ca9533c82ba39a63ae9c6fedd"
        ],
        [
            "intros x x_lb x_ub eps eps_pos.",
            "VernacExtend",
            "681355a99c50d2c4d31cb3f6259b806c926f99f1"
        ],
        [
            "assert (x_ub2 : Rabs (x^2) < 1).",
            "VernacExtend",
            "444c3fec44200a6600ab5b59c6d0ccde741db773"
        ],
        [
            "rewrite Rabs_pos_eq;[ | apply pow2_ge_0].",
            "VernacExtend",
            "98592d4bb216d681f3933f78bcddb792fc434d7d"
        ],
        [
            "rewrite <- pow2_abs.",
            "VernacExtend",
            "9082fe7fe884f9650b908fa21cf44a5a6ef54c37"
        ],
        [
            "assert (H: 0 <= Rabs x < 1) by (split;[apply Rabs_pos | apply Rabs_def1; auto]).",
            "VernacExtend",
            "8aa0a53777562cdc32365d04a97cabe0e422f5ef"
        ],
        [
            "apply (pow_lt_1_compat _ 2) in H;[tauto | omega].",
            "VernacExtend",
            "ea5fce1d61c0ec13b716b506639b14f8970bb038"
        ],
        [
            "elim (pow_lt_1_zero (x^2) x_ub2 eps eps_pos) ; intros N HN ; exists N ; intros n Hn.",
            "VernacExtend",
            "33fc528070f31149b2bd0eb681722354dcc968f4"
        ],
        [
            "unfold R_dist, Datan_seq.",
            "VernacExtend",
            "e788ec72f33da60023132809011f6578d7d0f9a5"
        ],
        [
            "replace (x ^ (2 * n) - 0) with ((x ^ 2) ^ n).",
            "VernacExtend",
            "c86bef88bfd05f1eda01487640d762597708e628"
        ],
        [
            "apply HN ; assumption.",
            "VernacExtend",
            "c293294a14cf1353857e698622785b61708ae915"
        ],
        [
            "rewrite pow_mult ; field.",
            "VernacExtend",
            "03d0f6cf03798bd33e660ba62dc8dfb4d0fbbff4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_lim : forall x, -1 < x -> x < 1 -> Un_cv (fun N : nat => sum_f_R0 (tg_alt (Datan_seq x)) N) (/ (1 + x ^ 2)).",
            "VernacStartTheoremProof",
            "0bcd8c80ffda8c6862d6caf8f2669a3aa0a402f4"
        ],
        [
            "intros x x_lb x_ub eps eps_pos.",
            "VernacExtend",
            "681355a99c50d2c4d31cb3f6259b806c926f99f1"
        ],
        [
            "assert (Tool0 : 0 <= x ^ 2) by apply pow2_ge_0.",
            "VernacExtend",
            "c40d832a2865da27e33bfa5d525df41299dd275a"
        ],
        [
            "assert (Tool1 : 0 < (1 + x ^ 2)).",
            "VernacExtend",
            "987ae1af1ca56ab1ec300abf077abf0da51e580f"
        ],
        [
            "solve[apply Rplus_lt_le_0_compat ; intuition].",
            "VernacExtend",
            "19424c956fd4fc48e1c0f889c23462d5ab9314cb"
        ],
        [
            "assert (Tool2 : / (1 + x ^ 2) > 0).",
            "VernacExtend",
            "40ff0c0ccb239771a9431507977056384fd06e75"
        ],
        [
            "apply Rinv_0_lt_compat ; tauto.",
            "VernacExtend",
            "96b2f239896f4e1e0a4ca0cf26977307729330da"
        ],
        [
            "assert (x_ub2' : 0<= Rabs (x^2) < 1).",
            "VernacExtend",
            "2c2a6ec3417b80886de927123f2008b314928363"
        ],
        [
            "rewrite Rabs_pos_eq, <- pow2_abs;[ | apply pow2_ge_0].",
            "VernacExtend",
            "1249049e21217169bbe29241c365198a628d556c"
        ],
        [
            "apply pow_lt_1_compat;[split;[apply Rabs_pos | ] | omega].",
            "VernacExtend",
            "e917bd9a868adcb1cc2caae23d8915977468fb79"
        ],
        [
            "apply Rabs_def1; assumption.",
            "VernacExtend",
            "2d422d076abb68a2d95002939ccec8f05916dccd"
        ],
        [
            "assert (x_ub2 : Rabs (x^2) < 1) by tauto.",
            "VernacExtend",
            "744741ebf97bb39db1b4f3e3548f79fad217081c"
        ],
        [
            "assert (eps'_pos : ((1+x^2)*eps) > 0).",
            "VernacExtend",
            "ceccb64765842531fe4772b1e0e05904ed45ecfc"
        ],
        [
            "apply Rmult_gt_0_compat ; assumption.",
            "VernacExtend",
            "52eaaa75f9b32ef29f209cf8f624689b487afed6"
        ],
        [
            "elim (pow_lt_1_zero _ x_ub2 _ eps'_pos) ; intros N HN ; exists N.",
            "VernacExtend",
            "913f9602914e35c8b4425542a6d8843a054695f6"
        ],
        [
            "intros n Hn.",
            "VernacExtend",
            "4a15d287eb245c84eabfb58cba2e377ac025029a"
        ],
        [
            "assert (H1 : - x^2 <> 1).",
            "VernacExtend",
            "f9f6aa270f8ea7376e9ab016a57f589f15f5b3e2"
        ],
        [
            "apply Rlt_not_eq; apply Rle_lt_trans with (2 := Rlt_0_1).",
            "VernacExtend",
            "c09451357c021ec4382075b6fa4a267c01b6e80e"
        ],
        [
            "assert (t := pow2_ge_0 x); lra.",
            "VernacExtend",
            "0c92929d064f45bb3739629152d4d88f17e61878"
        ],
        [
            "rewrite Datan_sum_eq.",
            "VernacExtend",
            "43e58b75cc3786c1573db5cbe82e465a1b926a10"
        ],
        [
            "unfold R_dist.",
            "VernacExtend",
            "9d14879a55d02ad54565968e31b64da7aeb66d97"
        ],
        [
            "assert (tool : forall a b, a / b - /b = (-1 + a) /b).",
            "VernacExtend",
            "09ba633c1dbabf52e3ef187f8d7fe381db93a1c7"
        ],
        [
            "intros a b; rewrite <- (Rmult_1_l (/b)); unfold Rdiv, Rminus.",
            "VernacExtend",
            "f462b6240a0474c3737a2a884ce8aede34a3e29b"
        ],
        [
            "rewrite <- Ropp_mult_distr_l_reverse, Rmult_plus_distr_r, Rplus_comm.",
            "VernacExtend",
            "e8983dd1d7e0b38a2efd46bf25b52e3850cda62a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "set (u := 1 + x ^ 2); rewrite tool; unfold Rminus; rewrite <- Rplus_assoc.",
            "VernacExtend",
            "72f19bda1d330f0b6819d56a11fa1e20549203c9"
        ],
        [
            "unfold Rdiv, u.",
            "VernacExtend",
            "13210c2aefa985768797c49a8e29d06ca20cfe23"
        ],
        [
            "change (-1) with (-(1)).",
            "VernacExtend",
            "1f60c1a6cdb67b8d172aedacd166faedbafbdc55"
        ],
        [
            "rewrite Rplus_opp_l, Rplus_0_l, Ropp_mult_distr_l_reverse, Rabs_Ropp.",
            "VernacExtend",
            "24dcb0ccc22b2aaa0ebeee824f361fac6aa6e9fa"
        ],
        [
            "rewrite Rabs_mult; clear tool u.",
            "VernacExtend",
            "ff809148c99ebde86227bfaf24051761a3b6d5e0"
        ],
        [
            "assert (tool : forall k, Rabs ((-x ^ 2) ^ k) = Rabs ((x ^ 2) ^ k)).",
            "VernacExtend",
            "59fce71a8abf3310ed173a061329eb101d0d72ae"
        ],
        [
            "clear -Tool0; induction k;[simpl; rewrite Rabs_R1;tauto | ].",
            "VernacExtend",
            "a2e7394208aeb2d37700abf643a983a705e95079"
        ],
        [
            "rewrite <- !(tech_pow_Rmult _ k), !Rabs_mult, Rabs_Ropp, IHk, Rabs_pos_eq.",
            "VernacExtend",
            "215e7a7741ccb2e86acc2e4b060ba670e03d0d45"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "exact Tool0.",
            "VernacExtend",
            "57c07607ea44ef28802820223297c04e9cbbe10f"
        ],
        [
            "rewrite tool, (Rabs_pos_eq (/ _)); clear tool;[ | apply Rlt_le; assumption].",
            "VernacExtend",
            "0307401c4f7e5f183c8419375079309c1ecfc60c"
        ],
        [
            "assert (tool : forall a b c, 0 < b -> a < b * c -> a * / b < c).",
            "VernacExtend",
            "82f772f60b27ba2c3b2d2de1b112833d2a623c19"
        ],
        [
            "intros a b c bp h; replace c with (b * c * /b).",
            "VernacExtend",
            "709a5387d462de32aab5e3cc0dd497b5d4bf7404"
        ],
        [
            "apply Rmult_lt_compat_r.",
            "VernacExtend",
            "e041593c57ec6470673cc705c01d215d230e0676"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "field; apply Rgt_not_eq; exact bp.",
            "VernacExtend",
            "52b20e52f5e3bbdf50a3dd91dca70b1211cf0dce"
        ],
        [
            "apply tool;[exact Tool1 | ].",
            "VernacExtend",
            "8d9051175ab57fcc44ca9a96d5e120903a216a49"
        ],
        [
            "apply HN; omega.",
            "VernacExtend",
            "540f89d3317daf4c86d01e6422c6118e36d2f7d0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_CVU_prelim : forall c (r : posreal), Rabs c + r < 1 -> CVU (fun N x => sum_f_R0 (tg_alt (Datan_seq x)) N) (fun y : R => / (1 + y ^ 2)) c r.",
            "VernacStartTheoremProof",
            "991a99f0e07e324b41b7a788bc2df1f733af0676"
        ],
        [
            "intros c r ub_ub eps eps_pos.",
            "VernacExtend",
            "51c6fdc4e8b58497b80065b3bde244b93b097c3b"
        ],
        [
            "apply (Alt_CVU (fun x n => Datan_seq n x) (fun x => /(1 + x ^ 2)) (Datan_seq (Rabs c + r)) c r).",
            "VernacExtend",
            "5fa9da79e7bf1cd9b328adddc2b6abdc4dbf9b2d"
        ],
        [
            "intros x inb; apply Datan_seq_decreasing; try (apply Boule_lt in inb; apply Rabs_def2 in inb; destruct inb; lra).",
            "VernacExtend",
            "50f6e08fc794c13856021c2778563f149f38e9bd"
        ],
        [
            "intros x inb; apply Datan_seq_CV_0; try (apply Boule_lt in inb; apply Rabs_def2 in inb; destruct inb; lra).",
            "VernacExtend",
            "999b003d27ac95a6b24fe80af50e9fbb353b1cdf"
        ],
        [
            "intros x inb; apply (Datan_lim x); try (apply Boule_lt in inb; apply Rabs_def2 in inb; destruct inb; lra).",
            "VernacExtend",
            "e0faeceda772bd8db9a2cd09f7b62152e3540169"
        ],
        [
            "intros x [ | n] inb.",
            "VernacExtend",
            "5b17cf41ac99c8c91c4666185b1d437960a125ac"
        ],
        [
            "solve[unfold Datan_seq; apply Rle_refl].",
            "VernacExtend",
            "900de41becbc33fa88f97e2916110a9ef2b9f812"
        ],
        [
            "rewrite <- (Datan_seq_Rabs x); apply Rlt_le, Datan_seq_increasing.",
            "VernacExtend",
            "8d5c62ea138933d059f206de1b0bd52daa571920"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "apply Boule_lt in inb; intuition.",
            "VernacExtend",
            "992f7be7142d3c313144eba34f7f7a926b16ff06"
        ],
        [
            "solve[apply Rabs_pos].",
            "VernacExtend",
            "379c43f595c71981debb46f5c356fc75a6ec1727"
        ],
        [
            "apply Datan_seq_CV_0.",
            "VernacExtend",
            "7762f7d8455c2f66fb9d6dce0546e7e194b712c6"
        ],
        [
            "apply Rlt_trans with 0;[lra | ].",
            "VernacExtend",
            "0aebc32e125bf1eddfaed0daacde02f841cfe360"
        ],
        [
            "apply Rplus_le_lt_0_compat.",
            "VernacExtend",
            "f52234f44384644fc6f21adef182d5c4067417f5"
        ],
        [
            "solve[apply Rabs_pos].",
            "VernacExtend",
            "379c43f595c71981debb46f5c356fc75a6ec1727"
        ],
        [
            "destruct r; assumption.",
            "VernacExtend",
            "b49cbe5cb69b2813eb61628ea10c1b9c0f916a57"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_is_datan : forall (N:nat) (x:R), -1 <= x -> x < 1 -> derivable_pt_lim (fun x => sum_f_R0 (tg_alt (Ratan_seq x)) N) x (sum_f_R0 (tg_alt (Datan_seq x)) N).",
            "VernacStartTheoremProof",
            "d4fc77135a090033353f701069ef17a9a9647cd3"
        ],
        [
            "assert (Tool : forall N, (-1) ^ (S (2 * N)) = - 1).",
            "VernacExtend",
            "c39b1c6f407fa942afac8d21155a588c9b257cf8"
        ],
        [
            "intro n ; induction n.",
            "VernacExtend",
            "d0fb4cd4fcd668e74be080a0a5c781ae93469446"
        ],
        [
            "simpl ; field.",
            "VernacExtend",
            "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
        ],
        [
            "replace ((-1) ^ S (2 * S n)) with ((-1) ^ 2 * (-1) ^ S (2*n)).",
            "VernacExtend",
            "868fe5fa7024fd08b14611d0cdfaca0c8c6e5282"
        ],
        [
            "rewrite IHn ; field.",
            "VernacExtend",
            "1e9817728c65667003b0157c17a988c4ac4756e9"
        ],
        [
            "rewrite <- pow_add.",
            "VernacExtend",
            "05b198205d930fe5ac438778819013a0655e910d"
        ],
        [
            "replace (2 + S (2 * n))%nat with (S (2 * S n))%nat.",
            "VernacExtend",
            "1cd89f1a89ea9cd7bbc5ee903d04592de733a5d9"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "intros N x x_lb x_ub.",
            "VernacExtend",
            "e99a0f4a2091710c47f638a8d646833d8eb5dc45"
        ],
        [
            "induction N.",
            "VernacExtend",
            "014c91061e9f52f369bba44af3bfd9be499036f5"
        ],
        [
            "unfold Datan_seq, Ratan_seq, tg_alt ; simpl.",
            "VernacExtend",
            "1d8092e05fd7bbca596951f57d3743c76dbfede7"
        ],
        [
            "intros eps eps_pos.",
            "VernacExtend",
            "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
        ],
        [
            "elim (derivable_pt_lim_id x eps eps_pos) ; intros delta Hdelta ; exists delta.",
            "VernacExtend",
            "fd08fc02012f5fdfd2a27e52ad8044206600c585"
        ],
        [
            "intros h hneq h_b.",
            "VernacExtend",
            "425af7016712ac35d80430ef302bdb739a6add88"
        ],
        [
            "replace (1 * ((x + h) * 1 / 1) - 1 * (x * 1 / 1)) with (id (x + h) - id x).",
            "VernacExtend",
            "67d61d69eefb02687a019dc50958ceb184687700"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "apply Hdelta ; assumption.",
            "VernacExtend",
            "e3aae55aa164ef893ffa198c56f4e91fa228d153"
        ],
        [
            "unfold id ; field ; assumption.",
            "VernacExtend",
            "aa679d56d21ce8047ca295ef395f440d9393f739"
        ],
        [
            "intros eps eps_pos.",
            "VernacExtend",
            "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
        ],
        [
            "assert (eps_3_pos : (eps/3) > 0) by lra.",
            "VernacExtend",
            "bf913f42629913c9689f2f1d712d282b56ad6018"
        ],
        [
            "elim (IHN (eps/3) eps_3_pos) ; intros delta1 Hdelta1.",
            "VernacExtend",
            "7df1618a03dfada73bf2ff60194f482f46aa8ba2"
        ],
        [
            "assert (Main : derivable_pt_lim (fun x : R =>tg_alt (Ratan_seq x) (S N)) x ((tg_alt (Datan_seq x)) (S N))).",
            "VernacExtend",
            "5b7bca318bb264c68f939a8764a5a04a90ce313d"
        ],
        [
            "clear -Tool ; intros eps' eps'_pos.",
            "VernacExtend",
            "80f2ccbdfe3d9b4340803b1fb77546c1e04c2249"
        ],
        [
            "elim (derivable_pt_lim_pow x (2 * (S N) + 1) eps' eps'_pos) ; intros delta Hdelta ; exists delta.",
            "VernacExtend",
            "79f8c5c20f7d934636460fd39f9855f5c1114b89"
        ],
        [
            "intros h h_neq h_b ; unfold tg_alt, Ratan_seq, Datan_seq.",
            "VernacExtend",
            "76bb38cc9a346e6c34fd954c3ed83ec1b77693b3"
        ],
        [
            "replace (((-1) ^ S N * ((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1)) - (-1) ^ S N * (x ^ (2 * S N + 1) / INR (2 * S N + 1))) / h - (-1) ^ S N * x ^ (2 * S N)) with (((-1)^(S N)) * ((((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1)) - (x ^ (2 * S N + 1) / INR (2 * S N + 1))) / h - x ^ (2 * S N))).",
            "VernacExtend",
            "50988d8355567e6f42e9e8a8935702cb018e0b7d"
        ],
        [
            "rewrite Rabs_mult ; rewrite pow_1_abs ; rewrite Rmult_1_l.",
            "VernacExtend",
            "725dd2d4e359505307b5e3b7e3fd7507d697882c"
        ],
        [
            "replace (((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1) - x ^ (2 * S N + 1) / INR (2 * S N + 1)) / h - x ^ (2 * S N)) with ((/INR (2* S N + 1)) * (((x + h) ^ (2 * S N + 1) - x ^ (2 * S N + 1)) / h - INR (2 * S N + 1) * x ^ pred (2 * S N + 1))).",
            "VernacExtend",
            "ff4e03de9453759acb027e044e8893097b024818"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "case (Req_dec (((x + h) ^ (2 * S N + 1) - x ^ (2 * S N + 1)) / h - INR (2 * S N + 1) * x ^ pred (2 * S N + 1)) 0) ; intro Heq.",
            "VernacExtend",
            "6bf765433c7f00939f6b841400a9c50a7f63abbe"
        ],
        [
            "rewrite Heq ; rewrite Rabs_R0 ; rewrite Rmult_0_r ; assumption.",
            "VernacExtend",
            "20c381b5e98c54ea43f771abd22b98a1c0a347b2"
        ],
        [
            "apply Rlt_trans with (r2:=Rabs (((x + h) ^ (2 * S N + 1) - x ^ (2 * S N + 1)) / h - INR (2 * S N + 1) * x ^ pred (2 * S N + 1))).",
            "VernacExtend",
            "d5f99ecee5b8818e7a38f6271f0174761d386d35"
        ],
        [
            "rewrite <- Rmult_1_l ; apply Rmult_lt_compat_r.",
            "VernacExtend",
            "c68f22b0b00e0cccfd65b5307bfd897e6fbb608f"
        ],
        [
            "apply Rabs_pos_lt ; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "rewrite Rabs_right.",
            "VernacExtend",
            "9b60731d6b608338747f09fec19f24d12baad022"
        ],
        [
            "replace 1 with (/1) by field.",
            "VernacExtend",
            "ca76f2baa181e0ad5977b67d5be13de333fdf591"
        ],
        [
            "apply Rinv_1_lt_contravar ; intuition.",
            "VernacExtend",
            "bd24f361f57b8fb6159e941ff7de9f93ff5c146e"
        ],
        [
            "apply Rgt_ge ; replace (INR (2 * S N + 1)) with (INR (2*S N) + 1) ; [apply RiemannInt.RinvN_pos | ].",
            "VernacExtend",
            "156282d3b51f650cea7cbd6bbe417ebfb9dde61e"
        ],
        [
            "replace (2 * S N + 1)%nat with (S (2 * S N))%nat by intuition ; rewrite S_INR ; reflexivity.",
            "VernacExtend",
            "6b47f3f4cf9b3e853bd686db02ae39479e064dec"
        ],
        [
            "apply Hdelta ; assumption.",
            "VernacExtend",
            "e3aae55aa164ef893ffa198c56f4e91fa228d153"
        ],
        [
            "rewrite Rmult_minus_distr_l.",
            "VernacExtend",
            "7222a49d2309983cf6476a1131eec66c4836f9f6"
        ],
        [
            "replace (/ INR (2 * S N + 1) * (INR (2 * S N + 1) * x ^ pred (2 * S N + 1))) with (x ^ (2 * S N)).",
            "VernacExtend",
            "51154a798e2d8c18c5398a88ba52c5bf654c7c4d"
        ],
        [
            "unfold Rminus ; rewrite Rplus_comm.",
            "VernacExtend",
            "7cfa88b8362606dcb25e723a22e841e0dfd0fe63"
        ],
        [
            "replace (((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1) + - (x ^ (2 * S N + 1) / INR (2 * S N + 1))) / h + - x ^ (2 * S N)) with (- x ^ (2 * S N) + (((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1) + - (x ^ (2 * S N + 1) / INR (2 * S N + 1))) / h)) by intuition.",
            "VernacExtend",
            "2d52ace2e6db97bc9f1b5e207e92ad6ee420c831"
        ],
        [
            "apply Rplus_eq_compat_l.",
            "VernacExtend",
            "76e8923f15671bb36c0fea83fec68cfd51cb2557"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "split ; [apply Rgt_not_eq|] ; intuition.",
            "VernacExtend",
            "26741263ea6da81f3d74be72d5d767696bb67b9c"
        ],
        [
            "clear ; replace (pred (2 * S N + 1)) with (2 * S N)%nat by intuition.",
            "VernacExtend",
            "f410d640c285893999e04a888532249d2b1c17b4"
        ],
        [
            "field ; apply Rgt_not_eq ; intuition.",
            "VernacExtend",
            "29892d48d85d46dfdb6de1477b7fbab39105c33e"
        ],
        [
            "field ; split ; [apply Rgt_not_eq |] ; intuition.",
            "VernacExtend",
            "bcedbd06f9ff09065737ce757d7768a39fb7e197"
        ],
        [
            "elim (Main (eps/3) eps_3_pos) ; intros delta2 Hdelta2.",
            "VernacExtend",
            "ff2d4af65a4bf6ca6d3891587556bef6ce683934"
        ],
        [
            "destruct delta1 as (delta1, delta1_pos) ; destruct delta2 as (delta2, delta2_pos).",
            "VernacExtend",
            "f3d161515551bc7dcc42411e6f3282bd43d1421f"
        ],
        [
            "pose (mydelta := Rmin delta1 delta2).",
            "VernacExtend",
            "9c753c13b6a613b7ad01fbb36a8314ec9ff08d35"
        ],
        [
            "assert (mydelta_pos : mydelta > 0).",
            "VernacExtend",
            "02ac4901e79c72c65c328efd1c4b2380a680afba"
        ],
        [
            "unfold mydelta ; rewrite Rmin_Rgt ; split ; assumption.",
            "VernacExtend",
            "5b0e016851f321656949ce523428a999054a6414"
        ],
        [
            "pose (delta := mkposreal mydelta mydelta_pos) ; exists delta ; intros h h_neq h_b.",
            "VernacExtend",
            "9399e8cc8b6b825b4dee45752231a294e0be7b5b"
        ],
        [
            "clear Main IHN.",
            "VernacExtend",
            "018ad2eec26f6bc6c914b56690fa6bb305429a31"
        ],
        [
            "unfold Rminus at 1.",
            "VernacExtend",
            "7fe93a6371adce83f27b0bbfed85c9e3f7c08c59"
        ],
        [
            "apply Rle_lt_trans with (r2:=eps/3 + eps / 3).",
            "VernacExtend",
            "de3f569b9ede09211c12957ff9d9adf0027fbc35"
        ],
        [
            "assert (Temp : (sum_f_R0 (tg_alt (Ratan_seq (x + h))) (S N) - sum_f_R0 (tg_alt (Ratan_seq x)) (S N)) / h + - sum_f_R0 (tg_alt (Datan_seq x)) (S N) = ((sum_f_R0 (tg_alt (Ratan_seq (x + h))) N - sum_f_R0 (tg_alt (Ratan_seq x)) N) / h) + (- sum_f_R0 (tg_alt (Datan_seq x)) N) + ((tg_alt (Ratan_seq (x + h)) (S N) - tg_alt (Ratan_seq x) (S N)) / h - tg_alt (Datan_seq x) (S N))).",
            "VernacExtend",
            "0298ece9cb74822bafb09e1b6e4e1e016fe37e3b"
        ],
        [
            "simpl ; field ; intuition.",
            "VernacExtend",
            "587ad7187f91910e8747a76e75b83fc8627bf781"
        ],
        [
            "apply Rle_trans with (r2:= Rabs ((sum_f_R0 (tg_alt (Ratan_seq (x + h))) N - sum_f_R0 (tg_alt (Ratan_seq x)) N) / h + - sum_f_R0 (tg_alt (Datan_seq x)) N) + Rabs ((tg_alt (Ratan_seq (x + h)) (S N) - tg_alt (Ratan_seq x) (S N)) / h - tg_alt (Datan_seq x) (S N))).",
            "VernacExtend",
            "77b8ade156bcdd5894139088e9cf0bc959d254f5"
        ],
        [
            "rewrite Temp ; clear Temp ; apply Rabs_triang.",
            "VernacExtend",
            "ab670a284c263286335866e2febd0a21dc0d33de"
        ],
        [
            "apply Rplus_le_compat ; apply Rlt_le ; [apply Hdelta1 | apply Hdelta2] ; intuition ; apply Rlt_le_trans with (r2:=delta) ; intuition unfold delta, mydelta.",
            "VernacExtend",
            "de405d9fc471bff9b5bc853e33f3a055bb3bc873"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ratan_CVU' : CVU (fun N x => sum_f_R0 (tg_alt (Ratan_seq x)) N) ps_atan (/2) (mkposreal (/2) pos_half_prf).",
            "VernacStartTheoremProof",
            "96d20d1a4efc69cab55387fa2cc979167d280d5c"
        ],
        [
            "apply (Alt_CVU (fun i r => Ratan_seq r i) ps_atan PI_tg (/2) pos_half); lazy beta.",
            "VernacExtend",
            "6ecd32de99d5634b964cbecee50df2621ddf431e"
        ],
        [
            "now intros; apply Ratan_seq_decreasing, Boule_half_to_interval.",
            "VernacExtend",
            "1066d950a4faea776e74e96872a1029fcf979a8a"
        ],
        [
            "now intros; apply Ratan_seq_converging, Boule_half_to_interval.",
            "VernacExtend",
            "ed696b2f97e199374435b2f3ec2d331f5bf92d82"
        ],
        [
            "intros x b; apply Boule_half_to_interval in b.",
            "VernacExtend",
            "529ce90119a39744814d276b7307de89165cdd88"
        ],
        [
            "unfold ps_atan; destruct (in_int x) as [inside | outside]; [ | destruct b; case outside; split; lra].",
            "VernacExtend",
            "2c27ebfa6a38e251a5a3674cccfb9dd4b87ac700"
        ],
        [
            "destruct (ps_atan_exists_1 x inside) as [v Pv].",
            "VernacExtend",
            "e59b506b79f28024f0201e70bdbf7cf3d99cfc1c"
        ],
        [
            "apply Un_cv_ext with (2 := Pv);[reflexivity].",
            "VernacExtend",
            "7158a89b64f384df93c02d486914c2e4fdd4744f"
        ],
        [
            "intros x n b; apply Boule_half_to_interval in b.",
            "VernacExtend",
            "eb09393fd595c07c507bc31b8f40997ea68f1366"
        ],
        [
            "rewrite <- (Rmult_1_l (PI_tg n)); unfold Ratan_seq, PI_tg.",
            "VernacExtend",
            "c3f6f1df2c240130e7d3c0f8230404400de66496"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "apply Rlt_le, Rinv_0_lt_compat, (lt_INR 0); omega.",
            "VernacExtend",
            "716256f0a745003f6760c1592f295045b66e8289"
        ],
        [
            "rewrite <- (pow1 (2 * n + 1)); apply pow_incr; assumption.",
            "VernacExtend",
            "67b1675e2cb82aec25ec7ee663ea12f79ab0e5e9"
        ],
        [
            "exact PI_tg_cv.",
            "VernacExtend",
            "0f7606d8cecd53cbe84e8c4d0d8b3f55c14c0a1c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ratan_CVU : CVU (fun N x => sum_f_R0 (tg_alt (Ratan_seq x)) N) ps_atan 0 (mkposreal 1 Rlt_0_1).",
            "VernacStartTheoremProof",
            "2054d63d9b28a9eb6fc3d5ba7e00941978f0a18e"
        ],
        [
            "intros eps ep; destruct (Ratan_CVU' eps ep) as [N Pn].",
            "VernacExtend",
            "bf7892a218f3845cfaad3c3f514ad7a8506e417a"
        ],
        [
            "exists N; intros n x nN b_y.",
            "VernacExtend",
            "a986a5420d7cd89d8479080534cfa5731c93f146"
        ],
        [
            "case (Rtotal_order 0 x) as [xgt0 | [x0 | x0]].",
            "VernacExtend",
            "5f88ea2f18839286594d1d531897fddc81303152"
        ],
        [
            "assert (Boule (/2) {| pos := / 2; cond_pos := pos_half_prf|} x).",
            "VernacExtend",
            "0f3942a474d60112ae853f16db5431e996556a6c"
        ],
        [
            "revert b_y; unfold Boule; simpl; intros b_y; apply Rabs_def2 in b_y.",
            "VernacExtend",
            "08881c6085fd8d9f0b91ab7c95f7fc499de56c21"
        ],
        [
            "destruct b_y; unfold Boule; simpl; apply Rabs_def1; lra.",
            "VernacExtend",
            "9b5e5f2d6b280c81cbeb5d1232470d0ec52164d7"
        ],
        [
            "apply Pn; assumption.",
            "VernacExtend",
            "3bedfeb072fc0a6cce2ed8865f7f524fb0fe317c"
        ],
        [
            "rewrite <- x0, ps_atan0_0.",
            "VernacExtend",
            "dbc96eeca9ba4ee5dc02745ce428ef9ca3204348"
        ],
        [
            "rewrite <- (sum_eq (fun _ => 0)), sum_cte, Rmult_0_l, Rminus_0_r, Rabs_pos_eq.",
            "VernacExtend",
            "7779560253caf71eb6aea54a299f2cb422281784"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "intros i _; unfold tg_alt, Ratan_seq, Rdiv; rewrite plus_comm; simpl.",
            "VernacExtend",
            "3b3bc29e92b9071e38d54e4fd76e9432f47d21a8"
        ],
        [
            "solve[rewrite !Rmult_0_l, Rmult_0_r; auto].",
            "VernacExtend",
            "9e86d9dd96acb744252be1bb2b7cf357bd008b70"
        ],
        [
            "replace (ps_atan x - sum_f_R0 (tg_alt (Ratan_seq x)) n) with (-(ps_atan (-x) - sum_f_R0 (tg_alt (Ratan_seq (-x))) n)).",
            "VernacExtend",
            "ba5117f9f84b1c3d95a1a6b33d3a344d7d529188"
        ],
        [
            "rewrite Rabs_Ropp.",
            "VernacExtend",
            "4585414329a0ef757c809f4a4dee3b3a09307b5c"
        ],
        [
            "assert (Boule (/2) {| pos := / 2; cond_pos := pos_half_prf|} (-x)).",
            "VernacExtend",
            "a462c61e8124ade641dc88197c070353b139fee2"
        ],
        [
            "revert b_y; unfold Boule; simpl; intros b_y; apply Rabs_def2 in b_y.",
            "VernacExtend",
            "08881c6085fd8d9f0b91ab7c95f7fc499de56c21"
        ],
        [
            "destruct b_y; unfold Boule; simpl; apply Rabs_def1; lra.",
            "VernacExtend",
            "9b5e5f2d6b280c81cbeb5d1232470d0ec52164d7"
        ],
        [
            "apply Pn; assumption.",
            "VernacExtend",
            "3bedfeb072fc0a6cce2ed8865f7f524fb0fe317c"
        ],
        [
            "unfold Rminus; rewrite ps_atan_opp, Ropp_plus_distr, sum_Ratan_seq_opp.",
            "VernacExtend",
            "69406a38ea21e5cbbafdf3c92b1caaabf2f47d30"
        ],
        [
            "rewrite !Ropp_involutive; reflexivity.",
            "VernacExtend",
            "6be0f6dacd4d4d468739725c003a60bae4fdfae0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Alt_PI_tg : forall n, PI_tg n = Ratan_seq 1 n.",
            "VernacStartTheoremProof",
            "6b9766cda393cef1c503fcb2e1596e33bbc5033b"
        ],
        [
            "intros n; unfold PI_tg, Ratan_seq, Rdiv; rewrite pow1, Rmult_1_l.",
            "VernacExtend",
            "5d1d1a44ab0cc704ca140c021893fa1c41dbc4fa"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ratan_is_ps_atan : forall eps, eps > 0 -> exists N, forall n, (n >= N)%nat -> forall x, -1 < x -> x < 1 -> Rabs (sum_f_R0 (tg_alt (Ratan_seq x)) n - ps_atan x) < eps.",
            "VernacStartTheoremProof",
            "76ac985a2cb9e4c4d019205dd64097089d6422c5"
        ],
        [
            "intros eps ep.",
            "VernacExtend",
            "af89a53f4fae9477ea82d9a2bc893f64250db095"
        ],
        [
            "destruct (Ratan_CVU _ ep) as [N1 PN1].",
            "VernacExtend",
            "6d0a0ec4226d44eb58e0a54a18729d68e770964d"
        ],
        [
            "exists N1; intros n nN x xm1 x1; rewrite <- Rabs_Ropp, Ropp_minus_distr.",
            "VernacExtend",
            "e91e7a928b63b7ba9540d564c53467cea5a3d2a3"
        ],
        [
            "apply PN1; [assumption | ].",
            "VernacExtend",
            "7b7f7af3fab24ca20ec070e86bad5950b247901b"
        ],
        [
            "unfold Boule; simpl; rewrite Rminus_0_r; apply Rabs_def1; assumption.",
            "VernacExtend",
            "f54fb04790cdbba69866d9897357960516335fa3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_continuity : continuity (fun x => /(1+x ^ 2)).",
            "VernacStartTheoremProof",
            "8075981960be4e9870a9eebdae33be9a316a2ae8"
        ],
        [
            "apply continuity_inv.",
            "VernacExtend",
            "f2272a81baf059908313236d605cf1a909aab9d2"
        ],
        [
            "apply continuity_plus.",
            "VernacExtend",
            "8d383d23cebde97144ccbf17b035ba3f2cde473a"
        ],
        [
            "apply continuity_const ; unfold constant ; intuition.",
            "VernacExtend",
            "831b883763e00ab2c2065b9b3e03b3cf279c6371"
        ],
        [
            "apply derivable_continuous ; apply derivable_pow.",
            "VernacExtend",
            "ec86625c82b0e7a78174eaea1432dfe5f33a746e"
        ],
        [
            "intro x ; apply Rgt_not_eq ; apply Rge_gt_trans with (1+0) ; [|lra] ; apply Rplus_ge_compat_l.",
            "VernacExtend",
            "81ae035b92f66b937a8e8d7b3605d0b4b9ab023c"
        ],
        [
            "replace (x^2) with (x\u00b2).",
            "VernacExtend",
            "2686f69d1d1824eac845773442d7c25fc26c5cc9"
        ],
        [
            "apply Rle_ge ; apply Rle_0_sqr.",
            "VernacExtend",
            "63c26167d594b6afb3b502a8efb8d1e5ccc4ea29"
        ],
        [
            "unfold Rsqr ; field.",
            "VernacExtend",
            "11efb49ecb6d57422994c18cd53d4e2c1a2dbee8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_ps_atan : forall x, -1 < x < 1 -> derivable_pt_lim ps_atan x ((fun y => /(1 + y ^ 2)) x).",
            "VernacStartTheoremProof",
            "fd51131f12f2bfb4450fd7c7ef935518305785a5"
        ],
        [
            "intros x x_encad.",
            "VernacExtend",
            "a3f4ecd7ce3024de9b74e5a401dad1d47c7e7079"
        ],
        [
            "destruct (boule_in_interval (-1) 1 x x_encad) as [c [r [Pcr1 [P1 P2]]]].",
            "VernacExtend",
            "cd9b767ccca27156a845006c7b662e00de1ab6e1"
        ],
        [
            "change (/ (1 + x ^ 2)) with ((fun u => /(1 + u ^ 2)) x).",
            "VernacExtend",
            "4ca5bd8de902bbb4eb3111a93ab7663d3c66e957"
        ],
        [
            "assert (t := derivable_pt_lim_CVU).",
            "VernacExtend",
            "e115c2b363b1279e8e7d156f1729b6908f0dc20f"
        ],
        [
            "apply derivable_pt_lim_CVU with (fn := (fun N x => sum_f_R0 (tg_alt (Ratan_seq x)) N)) (fn' := (fun N x => sum_f_R0 (tg_alt (Datan_seq x)) N)) (c := c) (r := r).",
            "VernacExtend",
            "d3fa1a5c02ee5b39c2c9acb464ee84e852cc1a19"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros y N inb; apply Rabs_def2 in inb; destruct inb.",
            "VernacExtend",
            "4f03cc4d6312d05ea3fcb04c7d8a8f4f2c4c722a"
        ],
        [
            "apply Datan_is_datan.",
            "VernacExtend",
            "0732c1900707e7f70d02cc87a381e11d2f618641"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "intros y inb; apply Rabs_def2 in inb; destruct inb.",
            "VernacExtend",
            "1c7fd12c72870b5f4ff631092ccd415fa93e3c8c"
        ],
        [
            "assert (y_gt_0 : -1 < y) by lra.",
            "VernacExtend",
            "40dd7c9e5cf00a28a8ea134bbaca06660352ac21"
        ],
        [
            "assert (y_lt_1 : y < 1) by lra.",
            "VernacExtend",
            "a2d7be619e0b9ae3886bb9fbca12e4b51fc06d55"
        ],
        [
            "intros eps eps_pos ; elim (Ratan_is_ps_atan eps eps_pos).",
            "VernacExtend",
            "fe7278861e0e7bfc1e583b934cea28a3481aef3f"
        ],
        [
            "intros N HN ; exists N; intros n n_lb ; apply HN ; tauto.",
            "VernacExtend",
            "b00b0eafcdd18b940de0f8bc983573ae099736da"
        ],
        [
            "apply Datan_CVU_prelim.",
            "VernacExtend",
            "3d53178e3775cc10d313291b1a0a81fc2af3fd3d"
        ],
        [
            "replace ((c - r + (c + r)) / 2) with c by field.",
            "VernacExtend",
            "fec7459c1de273d2baf66d1d7400411b0120c34d"
        ],
        [
            "unfold mkposreal_lb_ub; simpl.",
            "VernacExtend",
            "1578b38bcca18ae8b4f42d2c0b643261af3972b2"
        ],
        [
            "replace ((c + r - (c - r)) / 2) with (r :R) by field.",
            "VernacExtend",
            "6c36de6dbe19a750df8b19f175c406f13d9201f9"
        ],
        [
            "assert (Rabs c < 1 - r).",
            "VernacExtend",
            "cb9cd304af176978eaca5638b7e453bb1bde645b"
        ],
        [
            "unfold Boule in Pcr1; destruct r; simpl in *; apply Rabs_def1; apply Rabs_def2 in Pcr1; destruct Pcr1; lra.",
            "VernacExtend",
            "39af28bf9c1f968158abc64400ce20af17dd430a"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "intros; apply Datan_continuity.",
            "VernacExtend",
            "6b74e5aed057947abc5feb8ddaa5538bde638dd2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_ps_atan : forall x, -1 < x < 1 -> derivable_pt ps_atan x.",
            "VernacStartTheoremProof",
            "ab01de9b1f02f2bb9ba1ea36f37bf459081f7c52"
        ],
        [
            "intros x x_encad.",
            "VernacExtend",
            "a3f4ecd7ce3024de9b74e5a401dad1d47c7e7079"
        ],
        [
            "exists (/(1+x^2)) ; apply derivable_pt_lim_ps_atan; assumption.",
            "VernacExtend",
            "e1814c6ebad090e3696d44726c374c699a5b1640"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ps_atan_continuity_pt_1 : forall eps : R, eps > 0 -> exists alp : R, alp > 0 /\\ (forall x, x < 1 -> 0 < x -> R_dist x 1 < alp -> dist R_met (ps_atan x) (Alt_PI/4) < eps).",
            "VernacStartTheoremProof",
            "2f8d7ea17ec3f0d88da93d9d7623804644b705e8"
        ],
        [
            "intros eps eps_pos.",
            "VernacExtend",
            "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
        ],
        [
            "assert (eps_3_pos : eps / 3 > 0) by lra.",
            "VernacExtend",
            "bf913f42629913c9689f2f1d712d282b56ad6018"
        ],
        [
            "elim (Ratan_is_ps_atan (eps / 3) eps_3_pos) ; intros N1 HN1.",
            "VernacExtend",
            "1d7338cde0049e694aa460510a70bdcb56420426"
        ],
        [
            "unfold Alt_PI.",
            "VernacExtend",
            "9e6659eabb4a9be6b36335113602abf29ea89a79"
        ],
        [
            "destruct exist_PI as [v Pv]; replace ((4 * v)/4) with v by field.",
            "VernacExtend",
            "5e282675e4feea14dd2094717f25786fc2a09604"
        ],
        [
            "assert (Pv' : Un_cv (sum_f_R0 (tg_alt (Ratan_seq 1))) v).",
            "VernacExtend",
            "61209de303161adcfc58471cb87f7ed1dfe2fe27"
        ],
        [
            "apply Un_cv_ext with (2:= Pv).",
            "VernacExtend",
            "8315e0bcd8f530a1358e3f5e6cc2ce1658a02e73"
        ],
        [
            "intros; apply sum_eq; intros; unfold tg_alt; rewrite Alt_PI_tg; tauto.",
            "VernacExtend",
            "45834e2fff86be996dea6ac0012197ed046e36a6"
        ],
        [
            "destruct (Pv' (eps / 3) eps_3_pos) as [N2 HN2].",
            "VernacExtend",
            "c90b520027046593143ca36674b539496088ca37"
        ],
        [
            "set (N := (N1 + N2)%nat).",
            "VernacExtend",
            "7cf28f1f2e872885026d612059b50bd10b985b40"
        ],
        [
            "assert (O_lb : 0 <= 1) by intuition ; assert (O_ub : 1 <= 1) by intuition ; elim (ps_atanSeq_continuity_pt_1 N 1 O_lb O_ub (eps / 3) eps_3_pos) ; intros alpha Halpha ; clear -HN1 HN2 Halpha eps_3_pos; destruct Halpha as (alpha_pos, Halpha).",
            "VernacExtend",
            "b128c4cd33cd413c0085f178b51aa243e84d4df1"
        ],
        [
            "exists alpha ; split;[assumption | ].",
            "VernacExtend",
            "d5c090d8522e94df6a9eefa0adacf6b591c551eb"
        ],
        [
            "intros x x_ub x_lb x_bounds.",
            "VernacExtend",
            "5608cd8bf27be040401777af14ac0e7281cada0d"
        ],
        [
            "simpl ; unfold R_dist.",
            "VernacExtend",
            "db555dffbb2c35caa3c9a6f63cd610fa717cc3be"
        ],
        [
            "replace (ps_atan x - v) with ((ps_atan x - sum_f_R0 (tg_alt (Ratan_seq x)) N) + (sum_f_R0 (tg_alt (Ratan_seq x)) N - sum_f_R0 (tg_alt (Ratan_seq 1)) N) + (sum_f_R0 (tg_alt (Ratan_seq 1)) N - v)).",
            "VernacExtend",
            "03f89fb1049e64df7783ffb94af84b14201a374a"
        ],
        [
            "apply Rle_lt_trans with (r2:=Rabs (ps_atan x - sum_f_R0 (tg_alt (Ratan_seq x)) N) + Rabs ((sum_f_R0 (tg_alt (Ratan_seq x)) N - sum_f_R0 (tg_alt (Ratan_seq 1)) N) + (sum_f_R0 (tg_alt (Ratan_seq 1)) N - v))).",
            "VernacExtend",
            "e7b092c8235b93c25f9a895757fe99b4f78fd9b0"
        ],
        [
            "rewrite Rplus_assoc ; apply Rabs_triang.",
            "VernacExtend",
            "d03f3bba93ed68bf367480091f836ef7e2bce2dd"
        ],
        [
            "replace eps with (2 / 3 * eps + eps / 3).",
            "VernacExtend",
            "bcf074ffa4f8a5b64f82c9175d8f649d23c53bea"
        ],
        [
            "rewrite Rplus_comm.",
            "VernacExtend",
            "1ea33e6774c5768bd211bdf8c447feee9b9e21de"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "apply Rle_lt_trans with (r2 := Rabs (sum_f_R0 (tg_alt (Ratan_seq x)) N - sum_f_R0 (tg_alt (Ratan_seq 1)) N) + Rabs (sum_f_R0 (tg_alt (Ratan_seq 1)) N - v)).",
            "VernacExtend",
            "0c25b3927116c7030feaf299d54812671ddf864f"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "apply Rlt_le_trans with (r2:= eps / 3 + eps / 3).",
            "VernacExtend",
            "95d00376882c4e84c538e8f5889880d7a8ffd630"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "simpl in Halpha ; unfold R_dist in Halpha.",
            "VernacExtend",
            "154c3c7261b6b89936e4f39c1cac15adea9bb8e6"
        ],
        [
            "apply Halpha ; split.",
            "VernacExtend",
            "a9dbcce50533e3c966f447682b3d4b045a998f4a"
        ],
        [
            "unfold D_x, no_cond ; split ; [ | apply Rgt_not_eq ] ; intuition.",
            "VernacExtend",
            "7fc73b4ee48b2293d752f55657c951ab7c60dd71"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "apply HN2; unfold N; omega.",
            "VernacExtend",
            "e60cc3f5672afb5ac1bb3d5d3f6f621ce75debe0"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "rewrite <- Rabs_Ropp, Ropp_minus_distr; apply HN1.",
            "VernacExtend",
            "5255b5331089fd667b1ac72a3c76b1f777e389d6"
        ],
        [
            "unfold N; omega.",
            "VernacExtend",
            "ec642d6e70b005beb4bad57dec005858ee95c560"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Datan_eq_DatanSeq_interv : forall x, -1 < x < 1 -> forall (Pratan:derivable_pt ps_atan x) (Prmymeta:derivable_pt atan x), derive_pt ps_atan x Pratan = derive_pt atan x Prmymeta.",
            "VernacStartTheoremProof",
            "2c49046afb12580d08c331214e3b0a23b4c409b9"
        ],
        [
            "assert (freq : 0 < tan 1) by apply (Rlt_trans _ _ _ Rlt_0_1 tan_1_gt_1).",
            "VernacExtend",
            "dc86c30d03dc5845a0f8b53e1fc71628f17cd705"
        ],
        [
            "intros x x_encad Pratan Prmymeta.",
            "VernacExtend",
            "040e6abe01e1e7491949f3a2e4b52a4cbf4491af"
        ],
        [
            "rewrite pr_nu_var2_interv with (g:=ps_atan) (lb:=-1) (ub:=tan 1) (pr2 := derivable_pt_ps_atan x x_encad).",
            "VernacExtend",
            "4faa33ac948ebc182cfee05d36536dc79f9ac501"
        ],
        [
            "rewrite pr_nu_var2_interv with (f:=atan) (g:=atan) (lb:=-1) (ub:= 1) (pr2:=derivable_pt_atan x).",
            "VernacExtend",
            "44476be492f251424fb87fdb8cfd755bb48f72bd"
        ],
        [
            "assert (Temp := derivable_pt_lim_ps_atan x x_encad).",
            "VernacExtend",
            "d159e2442e7e45b6dfd5e979894c4821ceccf979"
        ],
        [
            "assert (Hrew1 : derive_pt ps_atan x (derivable_pt_ps_atan x x_encad) = (/(1+x^2))).",
            "VernacExtend",
            "e0ffc1bbff94b8ca037845d5a517cc3fbf62f895"
        ],
        [
            "apply derive_pt_eq_0 ; assumption.",
            "VernacExtend",
            "40279b41668d312b10443e8c2b66762436ede10d"
        ],
        [
            "rewrite derive_pt_atan.",
            "VernacExtend",
            "08afa88e0773d18c2ee9bfc9f8c79068bc2cf5c8"
        ],
        [
            "rewrite Hrew1.",
            "VernacExtend",
            "5530bc150f2f7b7137aa34ec5e6eb0776f717fbb"
        ],
        [
            "replace (Rsqr x) with (x ^ 2) by (unfold Rsqr; ring).",
            "VernacExtend",
            "b6f5260e904cc44c6a54a9b590deba099fe7b33b"
        ],
        [
            "unfold Rdiv; rewrite Rmult_1_l; reflexivity.",
            "VernacExtend",
            "4b3882319ad2f1286592d853e65ae8d0cacb9404"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros; reflexivity.",
            "VernacExtend",
            "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "assert (t := tan_1_gt_1); split;destruct x_encad; lra.",
            "VernacExtend",
            "52f6b238f9315e7de1b55c521c66878bcdd764e1"
        ],
        [
            "intros; reflexivity.",
            "VernacExtend",
            "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma atan_eq_ps_atan : forall x, 0 < x < 1 -> atan x = ps_atan x.",
            "VernacStartTheoremProof",
            "1d307b7ddfa9c50dd236a49eebff6da0624fd49d"
        ],
        [
            "intros x x_encad.",
            "VernacExtend",
            "a3f4ecd7ce3024de9b74e5a401dad1d47c7e7079"
        ],
        [
            "assert (pr1 : forall c : R, 0 < c < x -> derivable_pt (atan - ps_atan) c).",
            "VernacExtend",
            "315b7f0d40d27b27c3ce71046e18baef9e671aaf"
        ],
        [
            "intros c c_encad.",
            "VernacExtend",
            "3ada1aced4f6405cb678a09a8c79393a0281c10c"
        ],
        [
            "apply derivable_pt_minus.",
            "VernacExtend",
            "ba0f12b0c6b1d9f0442014804620576081f54651"
        ],
        [
            "exact (derivable_pt_atan c).",
            "VernacExtend",
            "ab29aae84dfc26ef684b5535e4ab1fd45ea7c27c"
        ],
        [
            "apply derivable_pt_ps_atan.",
            "VernacExtend",
            "e94cbb72c803e244a54047e48a1066b252c602d0"
        ],
        [
            "destruct x_encad; destruct c_encad; split; lra.",
            "VernacExtend",
            "4d6e1c1218109b7ea27929e4d50dab008d566fb9"
        ],
        [
            "assert (pr2 : forall c : R, 0 < c < x -> derivable_pt id c).",
            "VernacExtend",
            "08c08a49295db1e3d27e58bbedba14bc45c7a321"
        ],
        [
            "intros ; apply derivable_pt_id; lra.",
            "VernacExtend",
            "0e83955d8eda821cc0326908ef1bd623356de515"
        ],
        [
            "assert (delta_cont : forall c : R, 0 <= c <= x -> continuity_pt (atan - ps_atan) c).",
            "VernacExtend",
            "bfbe5e5fe2f995320caef022144d75ec7495d7b5"
        ],
        [
            "intros c [[c_encad1 | c_encad1 ] [c_encad2 | c_encad2]]; apply continuity_pt_minus.",
            "VernacExtend",
            "b9379ac8a268428af3532161bb2dd0ab256445f0"
        ],
        [
            "apply derivable_continuous_pt ; apply derivable_pt_atan.",
            "VernacExtend",
            "483c37f9a35d9dcfa23f2cce25429395adb5c063"
        ],
        [
            "apply derivable_continuous_pt ; apply derivable_pt_ps_atan.",
            "VernacExtend",
            "3d9aa9361ff9a771335c1132e871de6a077a70d3"
        ],
        [
            "split; destruct x_encad; lra.",
            "VernacExtend",
            "e700f787c660689090151c337160c5a355947fff"
        ],
        [
            "apply derivable_continuous_pt, derivable_pt_atan.",
            "VernacExtend",
            "7ce8807929d8cfa6ee49fd759c0379cce0905999"
        ],
        [
            "apply derivable_continuous_pt, derivable_pt_ps_atan.",
            "VernacExtend",
            "06b4ebc3b020fe82577a2ba278af26a10df37d83"
        ],
        [
            "subst c; destruct x_encad; split; lra.",
            "VernacExtend",
            "3db26a8575c516c3ca81ebad91dd45b9b326f5a8"
        ],
        [
            "apply derivable_continuous_pt, derivable_pt_atan.",
            "VernacExtend",
            "7ce8807929d8cfa6ee49fd759c0379cce0905999"
        ],
        [
            "apply derivable_continuous_pt, derivable_pt_ps_atan.",
            "VernacExtend",
            "06b4ebc3b020fe82577a2ba278af26a10df37d83"
        ],
        [
            "subst c; split; lra.",
            "VernacExtend",
            "ec743bbded0e445061b400236bd5c7585c4adaad"
        ],
        [
            "apply derivable_continuous_pt, derivable_pt_atan.",
            "VernacExtend",
            "7ce8807929d8cfa6ee49fd759c0379cce0905999"
        ],
        [
            "apply derivable_continuous_pt, derivable_pt_ps_atan.",
            "VernacExtend",
            "06b4ebc3b020fe82577a2ba278af26a10df37d83"
        ],
        [
            "subst c; destruct x_encad; split; lra.",
            "VernacExtend",
            "3db26a8575c516c3ca81ebad91dd45b9b326f5a8"
        ],
        [
            "assert (id_cont : forall c : R, 0 <= c <= x -> continuity_pt id c).",
            "VernacExtend",
            "d00e2294cec193e1638e6c7e2a262f8b68157b00"
        ],
        [
            "intros ; apply derivable_continuous ; apply derivable_id.",
            "VernacExtend",
            "6128d5d68bbd06bbad037e48530487a799f4a767"
        ],
        [
            "assert (x_lb : 0 < x) by (destruct x_encad; lra).",
            "VernacExtend",
            "5873ed94a074557b30c881608d0a79007e05656b"
        ],
        [
            "elim (MVT (atan - ps_atan)%F id 0 x pr1 pr2 x_lb delta_cont id_cont) ; intros d Temp ; elim Temp ; intros d_encad Main.",
            "VernacExtend",
            "eaa3946f19822affd752822c8b4ffc5da22eb3f6"
        ],
        [
            "clear - Main x_encad.",
            "VernacExtend",
            "0514bac3630c7f078199edb035c40cad140a4ae7"
        ],
        [
            "assert (Temp : forall (pr: derivable_pt (atan - ps_atan) d), derive_pt (atan - ps_atan) d pr = 0).",
            "VernacExtend",
            "2941c6e20a84fc82fff31c659d3b078ae48f220d"
        ],
        [
            "intro pr.",
            "VernacExtend",
            "849ef7f784a7697a4497d8d476f8b2de6dc031ef"
        ],
        [
            "assert (d_encad3 : -1 < d < 1).",
            "VernacExtend",
            "2ee38869aeca4a43c8b26667e632796c53de81f1"
        ],
        [
            "destruct d_encad; destruct x_encad; split; lra.",
            "VernacExtend",
            "164c34aa8200a2e75f3695038e12acef2aca7dca"
        ],
        [
            "pose (pr3 := derivable_pt_minus atan ps_atan d (derivable_pt_atan d) (derivable_pt_ps_atan d d_encad3)).",
            "VernacExtend",
            "51b65dc17704972183a5134e6ec7e1b2280f58bd"
        ],
        [
            "rewrite <- pr_nu_var2_interv with (f:=(atan - ps_atan)%F) (g:=(atan - ps_atan)%F) (lb:=0) (ub:=x) (pr1:=pr3) (pr2:=pr).",
            "VernacExtend",
            "a8ed64a98e50a46580dc4c13c84c7b4fdac96784"
        ],
        [
            "unfold pr3.",
            "VernacExtend",
            "90187fa3a53ce31ee7036dbc64d20cd2bd005401"
        ],
        [
            "rewrite derive_pt_minus.",
            "VernacExtend",
            "7b5b7977d9cc568b30e4a6ba97f4178cfcc372af"
        ],
        [
            "rewrite Datan_eq_DatanSeq_interv with (Prmymeta := derivable_pt_atan d).",
            "VernacExtend",
            "ed5f990cb2c68827746c46595c64ed7a319415d3"
        ],
        [
            "intuition.",
            "VernacExtend",
            "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct d_encad; lra.",
            "VernacExtend",
            "e231b10e77b650c95fb68ab68edbb2e8d1095b38"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assert (iatan0 : atan 0 = 0).",
            "VernacExtend",
            "0e375e47fc4521a09fabfd3506f3d99d84d32649"
        ],
        [
            "apply tan_is_inj.",
            "VernacExtend",
            "ccf227ee718811c10adb01c93b452ac682275059"
        ],
        [
            "apply atan_bound.",
            "VernacExtend",
            "c433ab7ce245b5a86c9461910091f3eedbb99ac1"
        ],
        [
            "rewrite Ropp_div; assert (t := PI2_RGT_0); split; lra.",
            "VernacExtend",
            "0c4d9df8ad24f466851e9d3c577803fce4660482"
        ],
        [
            "rewrite tan_0, atan_right_inv; reflexivity.",
            "VernacExtend",
            "c965ac78e1c46bc19e098f501f12ddf7a937dedd"
        ],
        [
            "generalize Main; rewrite Temp, Rmult_0_r.",
            "VernacExtend",
            "39c614242f71c98b251dd332656e0e4c562160cd"
        ],
        [
            "replace ((atan - ps_atan)%F x) with (atan x - ps_atan x) by intuition.",
            "VernacExtend",
            "a961cf9a109fed32d9a355c4def49d56240e509b"
        ],
        [
            "replace ((atan - ps_atan)%F 0) with (atan 0 - ps_atan 0) by intuition.",
            "VernacExtend",
            "8565fc35417b27d6622614d015cd9d8aed369d53"
        ],
        [
            "rewrite iatan0, ps_atan0_0, !Rminus_0_r.",
            "VernacExtend",
            "9ce52a193c679c044fc5ce6d1615caecd6c90473"
        ],
        [
            "replace (derive_pt id d (pr2 d d_encad)) with 1.",
            "VernacExtend",
            "73699eb699a509d26263d429cced22f44db39342"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "solve[intros M; apply Rminus_diag_uniq; auto].",
            "VernacExtend",
            "8df33e783d5e8c66b510d369e576b352fbb40f03"
        ],
        [
            "rewrite pr_nu_var with (g:=id) (pr2:=derivable_pt_id d).",
            "VernacExtend",
            "43bcee371b8b9ed2b28c37839d10644d8acad75d"
        ],
        [
            "symmetry ; apply derive_pt_id.",
            "VernacExtend",
            "2cf4c6a92a0c71266cc80ddc501682ef1423990c"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Alt_PI_eq : Alt_PI = PI.",
            "VernacStartTheoremProof",
            "0fb460605f923a2b336822b0aa8e9d5e6ae77c13"
        ],
        [
            "apply Rmult_eq_reg_r with (/4); fold (Alt_PI/4); fold (PI/4); [ | apply Rgt_not_eq; lra].",
            "VernacExtend",
            "ffb1a0fc3120f871c03356e9e0411ffac7c1b823"
        ],
        [
            "assert (0 < PI/6) by (apply PI6_RGT_0).",
            "VernacExtend",
            "a82f778f5ca29ef03dfae426cd801473bafe01ea"
        ],
        [
            "assert (t1:= PI2_1).",
            "VernacExtend",
            "76e32dd4aad8190e446d14348db93ac432c62a71"
        ],
        [
            "assert (t2 := PI_4).",
            "VernacExtend",
            "59da46b9a14deab511e2e1ddf5cc6f3729bbd674"
        ],
        [
            "assert (m := Alt_PI_RGT_0).",
            "VernacExtend",
            "d91e99e794814d2e57059b29faa9203062fedf1f"
        ],
        [
            "assert (-PI/2 < 1 < PI/2) by (rewrite Ropp_div; split; lra).",
            "VernacExtend",
            "787e0a779b91628ff1540413b4b3c3087308f103"
        ],
        [
            "apply cond_eq; intros eps ep.",
            "VernacExtend",
            "19b56c0ce36e4d882127f2d4dfb9f254aa69b779"
        ],
        [
            "change (R_dist (Alt_PI/4) (PI/4) < eps).",
            "VernacExtend",
            "4f0ad52173514da803d74f7b2b79c57157a36a6e"
        ],
        [
            "assert (ca : continuity_pt atan 1).",
            "VernacExtend",
            "0be1e5537f30be6557b71a2f7429bdde03dc893f"
        ],
        [
            "apply derivable_continuous_pt, derivable_pt_atan.",
            "VernacExtend",
            "7ce8807929d8cfa6ee49fd759c0379cce0905999"
        ],
        [
            "assert (Xe : exists eps', exists eps'', eps' + eps'' <= eps /\\ 0 < eps' /\\ 0 < eps'').",
            "VernacExtend",
            "93d4e3d72ebc1bee77101a4583eaeb094ae645be"
        ],
        [
            "exists (eps/2); exists (eps/2); repeat apply conj; lra.",
            "VernacExtend",
            "227ed2e0a0814ccff3f7805b336578ea0beea933"
        ],
        [
            "destruct Xe as [eps' [eps'' [eps_ineq [ep' ep'']]]].",
            "VernacExtend",
            "485454600a142f242c69fcf7d9932c86ef451b64"
        ],
        [
            "destruct (ps_atan_continuity_pt_1 _ ep') as [alpha [a0 Palpha]].",
            "VernacExtend",
            "72b6efd73a57979978f256b8c725a171a9812b8b"
        ],
        [
            "destruct (ca _ ep'') as [beta [b0 Pbeta]].",
            "VernacExtend",
            "b12e0c7dc95e2189d716e14a77d0a0c3ae60a9e8"
        ],
        [
            "assert (Xa : exists a, 0 < a < 1 /\\ R_dist a 1 < alpha /\\ R_dist a 1 < beta).",
            "VernacExtend",
            "867fde948da285bd50d1b84ada7cf9d7ce86b18e"
        ],
        [
            "exists (Rmax (/2) (Rmax (1 - alpha /2) (1 - beta /2))).",
            "VernacExtend",
            "e71e7ebbf16b0f988db3ae9994efad71664a497e"
        ],
        [
            "assert (/2 <= Rmax (/2) (Rmax (1 - alpha /2) (1 - beta /2))) by apply Rmax_l.",
            "VernacExtend",
            "c664478b6dd992a48d458461becbe85e12d67bfc"
        ],
        [
            "assert (Rmax (1 - alpha /2) (1 - beta /2) <= Rmax (/2) (Rmax (1 - alpha /2) (1 - beta /2))) by apply Rmax_r.",
            "VernacExtend",
            "99fc263505b12203fbe45202cfc3363a00fba707"
        ],
        [
            "assert ((1 - alpha /2) <= Rmax (1 - alpha /2) (1 - beta /2)) by apply Rmax_l.",
            "VernacExtend",
            "bd77550865502bfe33a3f47c782e03bb05d29764"
        ],
        [
            "assert ((1 - beta /2) <= Rmax (1 - alpha /2) (1 - beta /2)) by apply Rmax_r.",
            "VernacExtend",
            "2fa9b0243da407736eea1296c258971d33fb6711"
        ],
        [
            "assert (Rmax (1 - alpha /2) (1 - beta /2) < 1) by (apply Rmax_lub_lt; lra).",
            "VernacExtend",
            "e33ad211f0df073d114c91a5f169d00145911e8f"
        ],
        [
            "split;[split;[ | apply Rmax_lub_lt]; lra | ].",
            "VernacExtend",
            "bafc7ab3e88bf104564285756ce22683df7fced0"
        ],
        [
            "assert (0 <= 1 - Rmax (/ 2) (Rmax (1 - alpha / 2) (1 - beta / 2))).",
            "VernacExtend",
            "78b0e5537b3507bd3f4ced96ba52f640bb1c78c2"
        ],
        [
            "assert (Rmax (/2) (Rmax (1 - alpha / 2) (1 - beta /2)) <= 1) by (apply Rmax_lub; lra).",
            "VernacExtend",
            "59be2d2da735adbee55e1cc1f7a17aba1c93b2f8"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "split; unfold R_dist; rewrite <-Rabs_Ropp, Ropp_minus_distr, Rabs_pos_eq;lra.",
            "VernacExtend",
            "d0e4c1fa69fe4df0424468e74a3e23cc1517b25f"
        ],
        [
            "destruct Xa as [a [[Pa0 Pa1] [P1 P2]]].",
            "VernacExtend",
            "f945cf42d0d622e654368390c239a7eb5ce167bc"
        ],
        [
            "apply Rle_lt_trans with (1 := R_dist_tri _ _ (ps_atan a)).",
            "VernacExtend",
            "c2b245e61a0b58a5f20fcc57280d59ad4d9e6e58"
        ],
        [
            "apply Rlt_le_trans with (2 := eps_ineq).",
            "VernacExtend",
            "774e811c64d5968f55bb6f206b0496091f2de87c"
        ],
        [
            "apply Rplus_lt_compat.",
            "VernacExtend",
            "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
        ],
        [
            "rewrite R_dist_sym; apply Palpha; assumption.",
            "VernacExtend",
            "f7452c7f447aa83ce6f34c99574c010ec96bc1d3"
        ],
        [
            "rewrite <- atan_eq_ps_atan.",
            "VernacExtend",
            "4663e90efd594b608fb599f5c2fead515a68d8eb"
        ],
        [
            "rewrite <- atan_1; apply (Pbeta a); auto.",
            "VernacExtend",
            "ce1307e49f2efc711dc91c210d694fcb06ff6497"
        ],
        [
            "split; [ | exact P2].",
            "VernacExtend",
            "f2eec5da64661dadc9699a9de6d43018b57cfc4e"
        ],
        [
            "split;[exact I | apply Rgt_not_eq; assumption].",
            "VernacExtend",
            "4067108e0a6a8b9730c9b850f1e7432e1ee72c7d"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma PI_ineq : forall N : nat, sum_f_R0 (tg_alt PI_tg) (S (2 * N)) <= PI / 4 <= sum_f_R0 (tg_alt PI_tg) (2 * N).",
            "VernacStartTheoremProof",
            "6966b3c23a00ecbed036193a618d6e6f71893b64"
        ],
        [
            "intros; rewrite <- Alt_PI_eq; apply Alt_PI_ineq.",
            "VernacExtend",
            "72020b208f34d753eb89869052885d2460da90d7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Ropp_div",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros x y; unfold Rdiv; rewrite <-Ropp_mult_distr_l_reverse; reflexivity.",
                        "VernacExtend",
                        "49ac996db5ff189ff1a2b1ae9f239e0896b99bf4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pos_half_prf",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Boule_half_to_interval",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "unfold Boule, pos_half; simpl.",
                        "VernacExtend",
                        "a8a416bfcee0e9357a58a2183806f3c4bf772527"
                    ]
                },
                {
                    "command": [
                        "intros x b; apply Rabs_def2 in b; destruct b; split; lra.",
                        "VernacExtend",
                        "a3a7599c71f4702adb6d4a9b0087d17f3c1e6144"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Boule_lt",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "unfold Boule; intros c r x h.",
                        "VernacExtend",
                        "7da91c7d19a67cab33a5cc06b44af93d49406633"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in h; destruct h; apply Rabs_def1; (destruct (Rle_lt_dec 0 c);[rewrite Rabs_pos_eq; lra | rewrite <- Rabs_Ropp, Rabs_pos_eq; lra]).",
                        "VernacExtend",
                        "284de58243ed50b02b777feb3d2fbe8c67e5303f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Un_cv_ext",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "intros un vn quv l P eps ep; destruct (P eps ep) as [N Pn]; exists N.",
                        "VernacExtend",
                        "58ee533efe8362acac42a02126aaaadb88f2782f"
                    ]
                },
                {
                    "command": [
                        "intro n; rewrite <- quv; apply Pn.",
                        "VernacExtend",
                        "ce9b289d861f4a55473d180b3d79a47c981352f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_first_term_bound",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros f l.",
                        "VernacExtend",
                        "d1ed433971f119a9e5f6d68101463da45df3f95b"
                    ]
                },
                {
                    "command": [
                        "assert (WLOG : forall n P, (forall k, (0 < k)%nat -> P k) -> ((forall k, (0 < k)%nat -> P k) -> P 0%nat) -> P n).",
                        "VernacExtend",
                        "d4171eb83a41f1770bd265136d3a9aa0fdf75ce7"
                    ]
                },
                {
                    "command": [
                        "clear.",
                        "VernacExtend",
                        "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
                    ]
                },
                {
                    "command": [
                        "intros [ | n] P Hs Ho;[solve[apply Ho, Hs] | apply Hs; auto with arith].",
                        "VernacExtend",
                        "f947002fddba58bc8bce4227469a2fbd60965443"
                    ]
                },
                {
                    "command": [
                        "intros N; pattern N; apply WLOG; clear N.",
                        "VernacExtend",
                        "32ddc8b359d28c48de0e9b4f98c2c23175b17fda"
                    ]
                },
                {
                    "command": [
                        "intros [ | N] Npos n decr to0 cv nN.",
                        "VernacExtend",
                        "354091bf68e4e41f734c78b4bd2268ff70e90337"
                    ]
                },
                {
                    "command": [
                        "clear -Npos; elimtype False; omega.",
                        "VernacExtend",
                        "5c497d7c4f69dc811c95429671d59cdbe1aac3d4"
                    ]
                },
                {
                    "command": [
                        "assert (decr' : Un_decreasing (fun i => f (S N + i)%nat)).",
                        "VernacExtend",
                        "cc90256bfbd611034cfb3b1831d2d1ef7d9824ff"
                    ]
                },
                {
                    "command": [
                        "intros k; replace (S N+S k)%nat with (S (S N+k)) by ring.",
                        "VernacExtend",
                        "ad334a52b93159a66de2d6119440c2ba9da1b641"
                    ]
                },
                {
                    "command": [
                        "apply (decr (S N + k)%nat).",
                        "VernacExtend",
                        "22e44f2881c2009b3f10adbb0cca90ea05e331a9"
                    ]
                },
                {
                    "command": [
                        "assert (to' : Un_cv (fun i => f (S N + i)%nat) 0).",
                        "VernacExtend",
                        "7cf46b124171f4d42c5c479504b533936b2a379d"
                    ]
                },
                {
                    "command": [
                        "intros eps ep; destruct (to0 eps ep) as [M PM].",
                        "VernacExtend",
                        "7ec15de35e28ae89879ffea8d0184f71c4e63bdc"
                    ]
                },
                {
                    "command": [
                        "exists M; intros k kM; apply PM; omega.",
                        "VernacExtend",
                        "818b27f8c483257ecdc585ebd15190ce08ebf181"
                    ]
                },
                {
                    "command": [
                        "assert (cv' : Un_cv (sum_f_R0 (tg_alt (fun i => ((-1) ^ S N * f(S N + i)%nat)))) (l - sum_f_R0 (tg_alt f) N)).",
                        "VernacExtend",
                        "bcb072be7b57d17239454142fcf5ff1e190f1f14"
                    ]
                },
                {
                    "command": [
                        "intros eps ep; destruct (cv eps ep) as [M PM]; exists M.",
                        "VernacExtend",
                        "75bfe0ff1e11147e09ac1440fa1567dc25000674"
                    ]
                },
                {
                    "command": [
                        "intros n' nM.",
                        "VernacExtend",
                        "0a943dc76a4f10bc076828d8e136af3d466dda6f"
                    ]
                },
                {
                    "command": [
                        "match goal with |- ?C => set (U := C) end.",
                        "VernacExtend",
                        "5bc8619badb8a0804dcb6b25d1a86fc53cfc99ed"
                    ]
                },
                {
                    "command": [
                        "assert (nM' : (n' + S N >= M)%nat) by omega.",
                        "VernacExtend",
                        "02c4259957bff8606c1bfcd321e78c38936a0247"
                    ]
                },
                {
                    "command": [
                        "generalize (PM _ nM'); unfold R_dist.",
                        "VernacExtend",
                        "aa1e475128293baa66c5968324e7b3a745d481cb"
                    ]
                },
                {
                    "command": [
                        "rewrite (tech2 (tg_alt f) N (n' + S N)).",
                        "VernacExtend",
                        "4a6eeb1496b51dc31268a4be4d7ae2d0563caa86"
                    ]
                },
                {
                    "command": [
                        "assert (t : forall a b c, (a + b) - c = b - (c - a)) by (intros; ring).",
                        "VernacExtend",
                        "368789a52553060996e1ec0111ad8971698c2978"
                    ]
                },
                {
                    "command": [
                        "rewrite t; clear t; unfold U, R_dist; clear U.",
                        "VernacExtend",
                        "a0fe3b695505613217a8e5172ffe24c753d4dffe"
                    ]
                },
                {
                    "command": [
                        "replace (n' + S N - S N)%nat with n' by omega.",
                        "VernacExtend",
                        "50b164da9efdeef68e7283c94e79858c2b8fe7b2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (sum_eq (tg_alt (fun i => (-1) ^ S N * f(S N + i)%nat))).",
                        "VernacExtend",
                        "64194ebb5374d889039089bde5c392d6637d3556"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "intros i _; unfold tg_alt.",
                        "VernacExtend",
                        "7576cd4aecf97ea3f2baa5e16c77bbae79731dd5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc, <- pow_add, !(plus_comm i); reflexivity.",
                        "VernacExtend",
                        "34e1dda948902a7bd0baf108baaedad9e9a3e772"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assert (cv'' : Un_cv (sum_f_R0 (tg_alt (fun i => f (S N + i)%nat))) ((-1) ^ S N * (l - sum_f_R0 (tg_alt f) N))).",
                        "VernacExtend",
                        "3f9166dee6e8193262d1e0f022b5b63b1920b60f"
                    ]
                },
                {
                    "command": [
                        "apply (Un_cv_ext (fun n => (-1) ^ S N * sum_f_R0 (tg_alt (fun i : nat => (-1) ^ S N * f (S N + i)%nat)) n)).",
                        "VernacExtend",
                        "e825666fdf2de46e66dc180125b71ac40abba7c5"
                    ]
                },
                {
                    "command": [
                        "intros n0; rewrite scal_sum; apply sum_eq; intros i _.",
                        "VernacExtend",
                        "722dc3524e515a0bb6dbc9025003e248f643b6a3"
                    ]
                },
                {
                    "command": [
                        "unfold tg_alt; ring_simplify; replace (((-1) ^ S N) ^ 2) with 1.",
                        "VernacExtend",
                        "0ae500b72dc176586292ba3400cf33fedb88c1dd"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- pow_mult, mult_comm, pow_mult; replace ((-1) ^2) with 1 by ring.",
                        "VernacExtend",
                        "c5877c3f4aee3ac69158e593ddbab13f4710883a"
                    ]
                },
                {
                    "command": [
                        "rewrite pow1; reflexivity.",
                        "VernacExtend",
                        "4fc557b4918accf3ba86555631ea422e2b8f92ec"
                    ]
                },
                {
                    "command": [
                        "apply CV_mult.",
                        "VernacExtend",
                        "7df85077b85eadac24b572b1d2ba1d223ec90eca"
                    ]
                },
                {
                    "command": [
                        "solve[intros eps ep; exists 0%nat; intros; rewrite R_dist_eq; auto].",
                        "VernacExtend",
                        "cb131baaf4217e3b3f5e7c8d2130b49d4162595a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "destruct (even_odd_cor N) as [p [Neven | Nodd]].",
                        "VernacExtend",
                        "c622f9fdc63384a57c3ae1def4d093569c971aeb"
                    ]
                },
                {
                    "command": [
                        "rewrite Neven; destruct (alternated_series_ineq _ _ p decr to0 cv) as [B C].",
                        "VernacExtend",
                        "bf8226f8ba9c037db62f602b4a72ed6e0e599670"
                    ]
                },
                {
                    "command": [
                        "case (even_odd_cor n) as [p' [neven | nodd]].",
                        "VernacExtend",
                        "f2f968ed3eb13aaf71d89c754d1170b1d206aa73"
                    ]
                },
                {
                    "command": [
                        "rewrite neven.",
                        "VernacExtend",
                        "8cf8e31ea9bd6b952df5bba51c8d74b5206bbb68"
                    ]
                },
                {
                    "command": [
                        "destruct (alternated_series_ineq _ _ p' decr to0 cv) as [D E].",
                        "VernacExtend",
                        "e25a052e6549d84265056d3f568109c2dc09b807"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; rewrite Rabs_pos_eq;[ | lra].",
                        "VernacExtend",
                        "1375b2fa294549d425903962581d4e1bed880e60"
                    ]
                },
                {
                    "command": [
                        "assert (dist : (p <= p')%nat) by omega.",
                        "VernacExtend",
                        "e9ff602694b49475805bc21a444d3746a63c1210"
                    ]
                },
                {
                    "command": [
                        "assert (t := decreasing_prop _ _ _ (CV_ALT_step1 f decr) dist).",
                        "VernacExtend",
                        "5d554aebe30fd14309f7b1f3143aa24ed05f8470"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (sum_f_R0 (tg_alt f) (2 * p) - l).",
                        "VernacExtend",
                        "8503826d140f5a50b1f1af46f6fd66408c2578b1"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_le_compat_r; exact t.",
                        "VernacExtend",
                        "65b3d466fdbf37f615d51b958d5886d0c5ab0def"
                    ]
                },
                {
                    "command": [
                        "match goal with _ : ?a <= l, _ : l <= ?b |- _ => replace (f (S (2 * p))) with (b - a) by (rewrite tech5; unfold tg_alt; rewrite pow_1_odd; ring); lra end.",
                        "VernacExtend",
                        "d8ec2932be03076be386426fd594fcb6ecb7b00b"
                    ]
                },
                {
                    "command": [
                        "rewrite nodd; destruct (alternated_series_ineq _ _ p' decr to0 cv) as [D E].",
                        "VernacExtend",
                        "eb21e629b82741bfd563155d096df78558c0ef2f"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; rewrite <- Rabs_Ropp, Rabs_pos_eq, Ropp_minus_distr; [ | lra].",
                        "VernacExtend",
                        "5c4732498943e8754c6cc77bb04d89f946210185"
                    ]
                },
                {
                    "command": [
                        "assert (dist : (p <= p')%nat) by omega.",
                        "VernacExtend",
                        "e9ff602694b49475805bc21a444d3746a63c1210"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (l - sum_f_R0 (tg_alt f) (S (2 * p))).",
                        "VernacExtend",
                        "3a24c4e4764629fe5f4a0dfb0a85c5a791d95ecb"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_le_compat_l, Ropp_le_contravar.",
                        "VernacExtend",
                        "20eb1f81401e021c19a910ea462b3e2231fd5d54"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rge_le, (growing_prop _ _ _ (CV_ALT_step0 f decr) dist)].",
                        "VernacExtend",
                        "8277e703247a42324c19a15ec117452fbf6c4c42"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite tech5, Ropp_plus_distr, <- Rplus_assoc.",
                        "VernacExtend",
                        "50b5444b1cdc2842ee13279a167797bce0b70572"
                    ]
                },
                {
                    "command": [
                        "unfold tg_alt at 2; rewrite pow_1_odd; lra.",
                        "VernacExtend",
                        "a61d5263cea041a8c1901c4d9b749e6ba59932db"
                    ]
                },
                {
                    "command": [
                        "rewrite Nodd; destruct (alternated_series_ineq _ _ p decr to0 cv) as [B _].",
                        "VernacExtend",
                        "d91e927f3ba380f7a32eb086e68fe17297761f2c"
                    ]
                },
                {
                    "command": [
                        "destruct (alternated_series_ineq _ _ (S p) decr to0 cv) as [_ C].",
                        "VernacExtend",
                        "2bf0fb92dc9d099bfd1051b32cd9860584b71d01"
                    ]
                },
                {
                    "command": [
                        "assert (keep : (2 * S p = S (S ( 2 * p)))%nat) by ring.",
                        "VernacExtend",
                        "f59f277dd6e606efabedcf4f907ef56a55b84a70"
                    ]
                },
                {
                    "command": [
                        "case (even_odd_cor n) as [p' [neven | nodd]].",
                        "VernacExtend",
                        "f2f968ed3eb13aaf71d89c754d1170b1d206aa73"
                    ]
                },
                {
                    "command": [
                        "rewrite neven; destruct (alternated_series_ineq _ _ p' decr to0 cv) as [D E].",
                        "VernacExtend",
                        "26257b3c50b17fc0305994a47ba39f78465d157a"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; rewrite Rabs_pos_eq;[ | lra].",
                        "VernacExtend",
                        "1375b2fa294549d425903962581d4e1bed880e60"
                    ]
                },
                {
                    "command": [
                        "assert (dist : (S p < S p')%nat) by omega.",
                        "VernacExtend",
                        "231c7d468095aa10006c50ad49589ae5854791d4"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (sum_f_R0 (tg_alt f) (2 * S p) - l).",
                        "VernacExtend",
                        "ab64b2ecfc986361e7d413968a36c2e158cd73d4"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_le_compat_r, (decreasing_prop _ _ _ (CV_ALT_step1 f decr)).",
                        "VernacExtend",
                        "036446b21d1356dfea1669371e08b4ea2b421add"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "rewrite keep, tech5; unfold tg_alt at 2; rewrite <- keep, pow_1_even.",
                        "VernacExtend",
                        "22a182b06afd11c0814fb7d731fe0580e80be74c"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "rewrite nodd; destruct (alternated_series_ineq _ _ p' decr to0 cv) as [D E].",
                        "VernacExtend",
                        "eb21e629b82741bfd563155d096df78558c0ef2f"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; rewrite <- Rabs_Ropp, Rabs_pos_eq;[ | lra].",
                        "VernacExtend",
                        "352b01f038844ed097ab295e0ccf7f5522a6da4a"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_minus_distr.",
                        "VernacExtend",
                        "03410ea29af67bdcfa7393931606c01ed23d7394"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (l - sum_f_R0 (tg_alt f) (S (2 * p))).",
                        "VernacExtend",
                        "3a24c4e4764629fe5f4a0dfb0a85c5a791d95ecb"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_le_compat_l, Ropp_le_contravar, Rge_le, (growing_prop _ _ _ (CV_ALT_step0 f decr)); omega.",
                        "VernacExtend",
                        "9b6790e348c80d7464c81fc75a60c7eedd045f65"
                    ]
                },
                {
                    "command": [
                        "generalize C; rewrite keep, tech5; unfold tg_alt.",
                        "VernacExtend",
                        "96d688716355deb0c65acfa3265a1f2886cce2d4"
                    ]
                },
                {
                    "command": [
                        "rewrite <- keep, pow_1_even.",
                        "VernacExtend",
                        "825bd61dbf70bbe8b6c68d119b84929f758d0e19"
                    ]
                },
                {
                    "command": [
                        "assert (t : forall a b c, a <= b + 1 * c -> a - b <= c) by (intros; lra).",
                        "VernacExtend",
                        "7ecf3c99a9e49bf621b4253bd291d30f95c96ca8"
                    ]
                },
                {
                    "command": [
                        "solve[apply t].",
                        "VernacExtend",
                        "8db9f802c21822d59faea17863d618991dfbcb0d"
                    ]
                },
                {
                    "command": [
                        "clear WLOG; intros Hyp [ | n] decr to0 cv _.",
                        "VernacExtend",
                        "879e9e6f82ccc53833df06029e183727d36e698b"
                    ]
                },
                {
                    "command": [
                        "generalize (alternated_series_ineq f l 0 decr to0 cv).",
                        "VernacExtend",
                        "77edd72d2e24d8debd3bd49fa74fcb261c000872"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist, tg_alt; simpl; rewrite !Rmult_1_l, !Rmult_1_r.",
                        "VernacExtend",
                        "c7feb79827c8f7c3d9a24fad212cd565ca6467b0"
                    ]
                },
                {
                    "command": [
                        "assert (f 1%nat <= f 0%nat) by apply decr.",
                        "VernacExtend",
                        "cabeb5841d1957f4a83e275ef0f89a7886f76001"
                    ]
                },
                {
                    "command": [
                        "intros [A B]; rewrite Rabs_pos_eq; lra.",
                        "VernacExtend",
                        "bf2ceeb001277955ffaa24515d97ecbf8662a732"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (f 1%nat).",
                        "VernacExtend",
                        "98c5134d9f726c1c0b1a439c4b3c9ed29ad509e5"
                    ]
                },
                {
                    "command": [
                        "apply (Hyp 1%nat (le_n 1) (S n) decr to0 cv).",
                        "VernacExtend",
                        "fd95182ea633fb62cb563c85222bb4466488ceef"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "solve[apply decr].",
                        "VernacExtend",
                        "bf100751824a846ad9fa51bde0ba588bcd3a4898"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_CVU",
            "line_nb": 122,
            "steps": [
                {
                    "command": [
                        "intros f g h c r decr to0 to_g bound bound0 eps ep.",
                        "VernacExtend",
                        "223eeecc97a47887085e82b1a682d2cdb22872d8"
                    ]
                },
                {
                    "command": [
                        "assert (ep' : 0 <eps/2) by lra.",
                        "VernacExtend",
                        "8e6a7ac6c6ff158629ba213cbfd05d3dc0c7a5b9"
                    ]
                },
                {
                    "command": [
                        "destruct (bound0 _ ep) as [N Pn]; exists N.",
                        "VernacExtend",
                        "527e98fefbae31975874da5e5367c894f3330c18"
                    ]
                },
                {
                    "command": [
                        "intros n y nN dy.",
                        "VernacExtend",
                        "3f830a7b34f5a5be29adb57690b5989fc914106f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp, Ropp_minus_distr; apply Rle_lt_trans with (f n y).",
                        "VernacExtend",
                        "81c1830c06630295ef3790692152efca26d58bdc"
                    ]
                },
                {
                    "command": [
                        "solve[apply (Alt_first_term_bound (fun i => f i y) (g y) n n); auto].",
                        "VernacExtend",
                        "0dc994ea889b99525dba78ad7785bc95cf5f0914"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (h n).",
                        "VernacExtend",
                        "ce09675dd3443ba33602c0ad483ed3952d74a7cf"
                    ]
                },
                {
                    "command": [
                        "apply bound; assumption.",
                        "VernacExtend",
                        "e8d297b74f3c097453aee75510c762e969db36c9"
                    ]
                },
                {
                    "command": [
                        "clear - nN Pn.",
                        "VernacExtend",
                        "098d983e95e057d0a633517843659bf9ba8fc5df"
                    ]
                },
                {
                    "command": [
                        "generalize (Pn _ nN); unfold R_dist; rewrite Rminus_0_r; intros t.",
                        "VernacExtend",
                        "c69cdc758c319560c49d7fd1a9981dbf31a4d211"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in t; tauto.",
                        "VernacExtend",
                        "00ff91b58f13266ff4b85615d3af094a429c41ff"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pow2_ge_0",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "intros x; destruct (Rle_lt_dec 0 x).",
                        "VernacExtend",
                        "d2b891a31ae2980d355b4bdb27380cdf3721cb4e"
                    ]
                },
                {
                    "command": [
                        "replace (x ^ 2) with (x * x) by field.",
                        "VernacExtend",
                        "09610ce12c2a3b363c4c249b6815e1bb3cb8e7e9"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos; assumption.",
                        "VernacExtend",
                        "edb97fa47e3a1100be297f87ce9b4dde910909cb"
                    ]
                },
                {
                    "command": [
                        "replace (x ^ 2) with ((-x) * (-x)) by field.",
                        "VernacExtend",
                        "5abf75d1c01528353cc238ec56792191076186dd"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos; lra.",
                        "VernacExtend",
                        "2443e77eaa3899fcc0dc3f297814b024361367ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pow2_abs",
            "line_nb": 142,
            "steps": [
                {
                    "command": [
                        "intros x; destruct (Rle_lt_dec 0 x).",
                        "VernacExtend",
                        "d2b891a31ae2980d355b4bdb27380cdf3721cb4e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_pos_eq;[field | assumption].",
                        "VernacExtend",
                        "32db583e98469b7aabce085ffd4a318511700285"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp, Rabs_pos_eq;[field | lra].",
                        "VernacExtend",
                        "dae17d8b84ee4ff6c7b290b1dede485a6f810f6a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_tan",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "intros x xint.",
                        "VernacExtend",
                        "349cbc69798305bbf056aeb8de108b307bdf41f5"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt, tan.",
                        "VernacExtend",
                        "f7f0b2fdbca73f57cb0deee3befa54251fc0e6a0"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_div ; [reg | reg | ].",
                        "VernacExtend",
                        "a91aa13c6b9633a8b07db5194090238d51a68e50"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq.",
                        "VernacExtend",
                        "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt ; apply cos_gt_0; [unfold Rdiv; rewrite <- Ropp_mult_distr_l_reverse; fold (-PI/2) |];tauto.",
                        "VernacExtend",
                        "b269d9ca089d859b54e7c81c08355287ce5241b5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_tan",
            "line_nb": 154,
            "steps": [
                {
                    "command": [
                        "intros x pr.",
                        "VernacExtend",
                        "e46d7cb668ac3a85aef6bdd8ea509cc588edaddc"
                    ]
                },
                {
                    "command": [
                        "assert (cos x <> 0).",
                        "VernacExtend",
                        "edc80748d1a3f8295deb11320a5e313ec2af7713"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq, cos_gt_0; rewrite <- ?Ropp_div; tauto.",
                        "VernacExtend",
                        "654e6bb3d5dc501dc1d06c3a2923269ba509600d"
                    ]
                },
                {
                    "command": [
                        "unfold tan; reg; unfold pow, Rsqr; field; assumption.",
                        "VernacExtend",
                        "8150a6ca4276b5dd27c7961377f79e6e346e05c8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_increasing_interv",
            "line_nb": 160,
            "steps": [
                {
                    "command": [
                        "intros a b f a_lt_b pr Df_gt_0 x y x_encad y_encad x_lt_y.",
                        "VernacExtend",
                        "77699e276dc2296c40589bf3c048c877dc782109"
                    ]
                },
                {
                    "command": [
                        "assert (derivable_id_interv : forall c : R, x < c < y -> derivable_pt id c).",
                        "VernacExtend",
                        "5757402577b513c3df9339de61124af356696445"
                    ]
                },
                {
                    "command": [
                        "intros ; apply derivable_pt_id.",
                        "VernacExtend",
                        "938ad5252ca2e0b1fd31017c21bbeb8e37bb4503"
                    ]
                },
                {
                    "command": [
                        "assert (derivable_f_interv : forall c : R, x < c < y -> derivable_pt f c).",
                        "VernacExtend",
                        "41af0c0b61716a87910e454bb0f4554b47a532f4"
                    ]
                },
                {
                    "command": [
                        "intros c c_encad.",
                        "VernacExtend",
                        "3ada1aced4f6405cb678a09a8c79393a0281c10c"
                    ]
                },
                {
                    "command": [
                        "apply pr.",
                        "VernacExtend",
                        "e564d48317d343abd9d9ecff47e1ad6fa98bc4c7"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (r2:=x) ; [exact (proj1 x_encad) | exact (proj1 c_encad)].",
                        "VernacExtend",
                        "4c8ff75c919996bc41d7cf3a8b0328227afdc4e3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (r2:=y) ; [exact (proj2 c_encad) | exact (proj2 y_encad)].",
                        "VernacExtend",
                        "807ef62802399f2bb17be0254d69702fc1cd16d0"
                    ]
                },
                {
                    "command": [
                        "assert (f_cont_interv : forall c : R, x <= c <= y -> continuity_pt f c).",
                        "VernacExtend",
                        "c03e167c26a73c05c5215aaec6590db35546c848"
                    ]
                },
                {
                    "command": [
                        "intros c c_encad; apply derivable_continuous_pt ; apply pr.",
                        "VernacExtend",
                        "124be84b8343cf2493f2cf2c66978f08baf48e16"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=x) ; [exact (proj1 x_encad) | exact (proj1 c_encad)].",
                        "VernacExtend",
                        "193c4bc5ace41bce50036532e526b9c9b503e5d9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=y) ; [ exact (proj2 c_encad) | exact (proj2 y_encad)].",
                        "VernacExtend",
                        "44440373debb96cccffb4167b707a0badc124910"
                    ]
                },
                {
                    "command": [
                        "assert (id_cont_interv : forall c : R, x <= c <= y -> continuity_pt id c).",
                        "VernacExtend",
                        "0f90df1c35a37cec5d7177927b4d7ea6cae44bc9"
                    ]
                },
                {
                    "command": [
                        "intros ; apply derivable_continuous_pt ; apply derivable_pt_id.",
                        "VernacExtend",
                        "e0fd3bbbfdc33dad0ab449f25672d2d5185b8d92"
                    ]
                },
                {
                    "command": [
                        "elim (MVT f id x y derivable_f_interv derivable_id_interv x_lt_y f_cont_interv id_cont_interv).",
                        "VernacExtend",
                        "1dfa4e0f5c735ffaa65eaeffc5e683a998ea0523"
                    ]
                },
                {
                    "command": [
                        "intros c Temp ; elim Temp ; clear Temp ; intros Pr eq.",
                        "VernacExtend",
                        "c06899b89cfc14049de11a36a28b6dfdff338dc8"
                    ]
                },
                {
                    "command": [
                        "replace (id y - id x) with (y - x) in eq by intuition.",
                        "VernacExtend",
                        "77f63109f3291ed0c6af76a89311f0b4c69de4d0"
                    ]
                },
                {
                    "command": [
                        "replace (derive_pt id c (derivable_id_interv c Pr)) with 1 in eq.",
                        "VernacExtend",
                        "6ea23269cde1491e7cbae529ad0d8645902fdb9d"
                    ]
                },
                {
                    "command": [
                        "assert (Hyp : f y - f x > 0).",
                        "VernacExtend",
                        "43bfe18aa36cf5e68c37266da64aa137f997965b"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r in eq.",
                        "VernacExtend",
                        "59ecdba0605caa1e4441fc54615f4018fd41b037"
                    ]
                },
                {
                    "command": [
                        "rewrite <- eq.",
                        "VernacExtend",
                        "9f4f32f6d5e1e672a3991900f767f7aa54bbf4ac"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_gt_0_compat.",
                        "VernacExtend",
                        "d033236f2dabdc6d48d6d6aaa1c3030ba9186536"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_minus ; assumption.",
                        "VernacExtend",
                        "3812192e62acc9941a76d58a727122b68e6f5f0a"
                    ]
                },
                {
                    "command": [
                        "assert (c_encad2 : a <= c < b).",
                        "VernacExtend",
                        "b6fb9d5506f0ee1195f5e82117a31ac9cde6242d"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le ; apply Rlt_trans with (r2:=x) ; [exact (proj1 x_encad) | exact (proj1 Pr)].",
                        "VernacExtend",
                        "f8e1f470bba5b644c8ef90be5e587789782f33ed"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=y) ; [apply Rlt_le ; exact (proj2 Pr) | exact (proj2 y_encad)].",
                        "VernacExtend",
                        "32f266f4acfa19423862d042ef7f54d25bb3b166"
                    ]
                },
                {
                    "command": [
                        "assert (c_encad : a < c < b).",
                        "VernacExtend",
                        "ebbbb6718fd16fe12e0f1b59631fc65b27b73efe"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (r2:=x) ; [exact (proj1 x_encad) | exact (proj1 Pr)].",
                        "VernacExtend",
                        "570622c56e60b6d0666e6ee7fdf3a45845d8b10b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=y) ; [apply Rlt_le ; exact (proj2 Pr) | exact (proj2 y_encad)].",
                        "VernacExtend",
                        "32f266f4acfa19423862d042ef7f54d25bb3b166"
                    ]
                },
                {
                    "command": [
                        "assert (Temp := Df_gt_0 c c_encad).",
                        "VernacExtend",
                        "b2f0efa154314f6baa5ff1f24c334b424b15f2ca"
                    ]
                },
                {
                    "command": [
                        "assert (Temp2 := pr_nu f c (derivable_f_interv c Pr) (pr c c_encad)).",
                        "VernacExtend",
                        "798c49062aa02c1a0c009f9218a791a0731865f5"
                    ]
                },
                {
                    "command": [
                        "rewrite Temp2 ; apply Temp.",
                        "VernacExtend",
                        "a443cdd810b782a44c47e042afc374b4b4a198b9"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_gt ; exact Hyp.",
                        "VernacExtend",
                        "788cb2ce415e64f8fb20fa84e66273949695f347"
                    ]
                },
                {
                    "command": [
                        "symmetry ; rewrite derive_pt_eq ; apply derivable_pt_lim_id.",
                        "VernacExtend",
                        "56906f85354116e6e9337a003d66161d3efcedb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "plus_Rsqr_gt_0",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "intro m.",
                        "VernacExtend",
                        "4b82221b29d931d49eaab61535235762be4a3968"
                    ]
                },
                {
                    "command": [
                        "replace 0 with (0+0) by intuition.",
                        "VernacExtend",
                        "6eed4e8cd0c562444128eb10a916d405414cb455"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_gt_ge_compat.",
                        "VernacExtend",
                        "c2cf953423298baac56ffe28c300bd2fe08ad5eb"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "elim (total_order_T m 0) ; intro s'.",
                        "VernacExtend",
                        "36eb1993a0ffb57477a11b5a583dc4e076f09fcf"
                    ]
                },
                {
                    "command": [
                        "case s'.",
                        "VernacExtend",
                        "fce8ae2e69a85bd38433529f3bc98e66fcd195e2"
                    ]
                },
                {
                    "command": [
                        "intros m_cond.",
                        "VernacExtend",
                        "a5783bfbeea75943952a6cafe944570354f3b4c0"
                    ]
                },
                {
                    "command": [
                        "replace 0 with (0*0) by intuition.",
                        "VernacExtend",
                        "5ca6d25157f4ab122cb2c74428693c031cd659c2"
                    ]
                },
                {
                    "command": [
                        "replace (m ^ 2) with ((-m)^2).",
                        "VernacExtend",
                        "f1db4a11a4e386431f8f59480220b5d4a4c69db8"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge ; apply Rmult_le_compat ; intuition ; apply Rlt_le ; rewrite Rmult_1_r ; intuition.",
                        "VernacExtend",
                        "a6abea4dac19b1bcf0ede96cebb348e47d7ca793"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "intro H' ; rewrite H' ; right ; field.",
                        "VernacExtend",
                        "be337d27e8b8dc8e780cc0783e34832015b9dce0"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PI2_lower_bound",
            "line_nb": 216,
            "steps": [
                {
                    "command": [
                        "intros x [xp xlt2] cx.",
                        "VernacExtend",
                        "22812b6d16143e503253a43d77380138b6ae23be"
                    ]
                },
                {
                    "command": [
                        "destruct (Rtotal_order x (PI/2)) as [xltpi2 | [xeqpi2 | xgtpi2]].",
                        "VernacExtend",
                        "12a1c32f7fd3ac76f194f8a304f8dc92b6af5076"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "now case (Rgt_not_eq _ _ cx); rewrite xeqpi2, cos_PI2.",
                        "VernacExtend",
                        "5c87713d37995227a8e1b21ed11c62e3ed8eab7e"
                    ]
                },
                {
                    "command": [
                        "destruct (MVT_cor1 cos (PI/2) x derivable_cos xgtpi2) as [c [Pc [cint1 cint2]]].",
                        "VernacExtend",
                        "dcec87725dfce2949bd80e58da83f752206e649d"
                    ]
                },
                {
                    "command": [
                        "revert Pc; rewrite cos_PI2, Rminus_0_r.",
                        "VernacExtend",
                        "16af7b978a8f27ab9f8b97494c45c8ffad8bd032"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (pr_nu cos c (derivable_pt_cos c)), derive_pt_cos.",
                        "VernacExtend",
                        "765e937b4632c793043e7f9d9f67073d3b5e4178"
                    ]
                },
                {
                    "command": [
                        "assert (0 < c < 2) by (split; assert (t := PI2_RGT_0); lra).",
                        "VernacExtend",
                        "d7da24c8b3098fa57835ed76be32d28ee42527fd"
                    ]
                },
                {
                    "command": [
                        "assert (0 < sin c) by now apply sin_pos_tech.",
                        "VernacExtend",
                        "65356724c2a9ded0c77f489a6590fca5b7794766"
                    ]
                },
                {
                    "command": [
                        "intros Pc.",
                        "VernacExtend",
                        "f79f20549e8ffd8ccbba4a1fede45a20794a8b6e"
                    ]
                },
                {
                    "command": [
                        "case (Rlt_not_le _ _ cx).",
                        "VernacExtend",
                        "fad4052bbf6fc9ba3562e61eb09c1853a3df9316"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rplus_0_l (cos x)), Pc, Ropp_mult_distr_l_reverse.",
                        "VernacExtend",
                        "422a3eac990b04b58ab9876e9a7f8c9a654637b6"
                    ]
                },
                {
                    "command": [
                        "apply Rle_minus, Rmult_le_pos;[apply Rlt_le; assumption | lra ].",
                        "VernacExtend",
                        "6a84c0b681cd8e9f47dad5a62cead43e4cf95cf4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PI2_3_2",
            "line_nb": 231,
            "steps": [
                {
                    "command": [
                        "apply PI2_lower_bound;[split; lra | ].",
                        "VernacExtend",
                        "52477a0a910168aeb84d269596280e96ea1cf915"
                    ]
                },
                {
                    "command": [
                        "destruct (pre_cos_bound (3/2) 1) as [t _]; [lra | lra | ].",
                        "VernacExtend",
                        "c73b7e8dcd5c7394e70d545a76739d679b010732"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (2 := t); clear t.",
                        "VernacExtend",
                        "f51c30f01a48101a1489d4cbbf2b8c023ab2cb75"
                    ]
                },
                {
                    "command": [
                        "unfold cos_approx; simpl; unfold cos_term.",
                        "VernacExtend",
                        "4352c9e61d5c08bb00152ca8bc341aa0d5afcfdc"
                    ]
                },
                {
                    "command": [
                        "rewrite !INR_IZR_INZ.",
                        "VernacExtend",
                        "ff6d21e1c3420ec38a5eb2bc89a6cff80e6d3cc7"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "field_simplify.",
                        "VernacExtend",
                        "69312d77240dafb89e62832bed63aad6ea572da3"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_0_l.",
                        "VernacExtend",
                        "198c4e4c2aa27e6987cc5bebc1444c8d76760541"
                    ]
                },
                {
                    "command": [
                        "apply Rdiv_lt_0_compat ; now apply IZR_lt.",
                        "VernacExtend",
                        "a717de987383b1fb821308521b1c14c41aad717d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PI2_1",
            "line_nb": 243,
            "steps": [
                {
                    "command": [
                        "assert (t := PI2_3_2); lra.",
                        "VernacExtend",
                        "8937d5f2d656e12b16c3c371d605e75a80152385"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tan_increasing",
            "line_nb": 246,
            "steps": [
                {
                    "command": [
                        "intros x y Z_le_x x_lt_y y_le_1.",
                        "VernacExtend",
                        "5d9c3ef20183391b4f98fc18afeb003c690beef7"
                    ]
                },
                {
                    "command": [
                        "assert (x_encad : -PI/2 < x < PI/2).",
                        "VernacExtend",
                        "8dee97d1182a14ee32d42076d6772daf00bcac44"
                    ]
                },
                {
                    "command": [
                        "split ; [assumption | apply Rlt_trans with (r2:=y) ; assumption].",
                        "VernacExtend",
                        "8fbdf88028ea42329b889b8f3e525f996ef09f85"
                    ]
                },
                {
                    "command": [
                        "assert (y_encad : -PI/2 < y < PI/2).",
                        "VernacExtend",
                        "05edfd62461d1c3513c802f8c6cc6c22e391e96a"
                    ]
                },
                {
                    "command": [
                        "split ; [apply Rlt_trans with (r2:=x) ; intuition | intuition ].",
                        "VernacExtend",
                        "a050931545e74e378a45f60dbe22f5e7390e487a"
                    ]
                },
                {
                    "command": [
                        "assert (local_derivable_pt_tan : forall x : R, -PI/2 < x < PI/2 -> derivable_pt tan x).",
                        "VernacExtend",
                        "3bbb8fa123514374b24824e0e528ee5d6b1fc3f8"
                    ]
                },
                {
                    "command": [
                        "intros ; apply derivable_pt_tan ; intuition.",
                        "VernacExtend",
                        "a9b8f54995364ed5c4c5a30ae381e9fd9e4e272e"
                    ]
                },
                {
                    "command": [
                        "apply derive_increasing_interv with (a:=-PI/2) (b:=PI/2) (pr:=local_derivable_pt_tan) ; intuition.",
                        "VernacExtend",
                        "20b1cf5d5ccd4f403c048cfe1d754c6564c59113"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assert (Temp := pr_nu tan t (derivable_pt_tan t t_encad) (local_derivable_pt_tan t t_encad)) ; rewrite <- Temp ; clear Temp.",
                        "VernacExtend",
                        "ccdc00b8f6476390216060fefd70859f8a09655c"
                    ]
                },
                {
                    "command": [
                        "assert (Temp := derive_pt_tan t t_encad) ; rewrite Temp ; clear Temp.",
                        "VernacExtend",
                        "927d1ace424c61b55f2225d83071fc4ae48e614c"
                    ]
                },
                {
                    "command": [
                        "apply plus_Rsqr_gt_0.",
                        "VernacExtend",
                        "1ebc831e44d78d29fdd30daa4df1fcb4ad2fc0d3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tan_is_inj",
            "line_nb": 260,
            "steps": [
                {
                    "command": [
                        "intros a b a_encad b_encad fa_eq_fb.",
                        "VernacExtend",
                        "0ec8984222591addec56c7cb10c561768dbafc8c"
                    ]
                },
                {
                    "command": [
                        "case(total_order_T a b).",
                        "VernacExtend",
                        "6b7b4f3e0502fb1d5f46c2ca288fc31ca1a7f6a2"
                    ]
                },
                {
                    "command": [
                        "intro s ; case s ; clear s.",
                        "VernacExtend",
                        "57f4e29443d335dbff605a26b23fd61cb70077fa"
                    ]
                },
                {
                    "command": [
                        "intro Hf.",
                        "VernacExtend",
                        "6f8097812b59a70e6a2905483ee62407e17f44b0"
                    ]
                },
                {
                    "command": [
                        "assert (Hfalse := tan_increasing a b (proj1 a_encad) Hf (proj2 b_encad)).",
                        "VernacExtend",
                        "aaef62cb5f7b9ec47b62cd8b9546ab179b27f158"
                    ]
                },
                {
                    "command": [
                        "case (Rlt_not_eq (tan a) (tan b)) ; assumption.",
                        "VernacExtend",
                        "42b85d7c657f8a6edd723f57dd3671ff8c65da0f"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intro Hf.",
                        "VernacExtend",
                        "6f8097812b59a70e6a2905483ee62407e17f44b0"
                    ]
                },
                {
                    "command": [
                        "assert (Hfalse := tan_increasing b a (proj1 b_encad) Hf (proj2 a_encad)).",
                        "VernacExtend",
                        "1e88382291ec9d71017512360c5fde25746043ec"
                    ]
                },
                {
                    "command": [
                        "case (Rlt_not_eq (tan b) (tan a)) ; [|symmetry] ; assumption.",
                        "VernacExtend",
                        "0a3c224f85bce3ee39f987189dc3b2e93b4fe790"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "exists_atan_in_frame",
            "line_nb": 272,
            "steps": [
                {
                    "command": [
                        "intros lb ub y lb_lt_ub lb_cond ub_cond y_encad.",
                        "VernacExtend",
                        "177cedcbf11774895ffb39814b42fdc208f8c504"
                    ]
                },
                {
                    "command": [
                        "case y_encad ; intros y_encad1 y_encad2.",
                        "VernacExtend",
                        "c3f2fa450bda29ce7fd8d08ece28dfc843cfb0e4"
                    ]
                },
                {
                    "command": [
                        "assert (f_cont : forall a : R, lb <= a <= ub -> continuity_pt tan a).",
                        "VernacExtend",
                        "f12f6815112c8d13b84686315b73d15b0a9fafcf"
                    ]
                },
                {
                    "command": [
                        "intros a a_encad.",
                        "VernacExtend",
                        "1a4733bc609ab5a6dcdcac39c9488d201525ee30"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt ; apply derivable_pt_tan.",
                        "VernacExtend",
                        "f63e1e5d345bf92fbad0776eab095d45c9e61eb9"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:=lb) ; intuition.",
                        "VernacExtend",
                        "a1f4c0eb04928f9989c08a86066a7b81167eb60f"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=ub) ; intuition.",
                        "VernacExtend",
                        "b0f8245b40cbe78f0f204f59c88e08cdd3ff9c99"
                    ]
                },
                {
                    "command": [
                        "assert (Cont : forall a : R, lb <= a <= ub -> continuity_pt (fun x => tan x - y) a).",
                        "VernacExtend",
                        "ae968248cc90738c906bc36044d2afd11943cf37"
                    ]
                },
                {
                    "command": [
                        "intros a a_encad.",
                        "VernacExtend",
                        "1a4733bc609ab5a6dcdcac39c9488d201525ee30"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt, continue_in, limit1_in, limit_in ; simpl ; unfold R_dist.",
                        "VernacExtend",
                        "1bad2f7c5aa020d921ac684b7ba8df3226fba8e4"
                    ]
                },
                {
                    "command": [
                        "intros eps eps_pos.",
                        "VernacExtend",
                        "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
                    ]
                },
                {
                    "command": [
                        "elim (f_cont a a_encad eps eps_pos).",
                        "VernacExtend",
                        "67fb6dea56d3dd13878ff7f7807481dad0aa2398"
                    ]
                },
                {
                    "command": [
                        "intros alpha alpha_pos.",
                        "VernacExtend",
                        "41e934a2c998d11b748d265eac97cc19e5cd181f"
                    ]
                },
                {
                    "command": [
                        "destruct alpha_pos as (alpha_pos,Temp).",
                        "VernacExtend",
                        "5cbb94478ab2cb9a442c0a5b8732c52da58d447d"
                    ]
                },
                {
                    "command": [
                        "exists alpha.",
                        "VernacExtend",
                        "4db99336d59a6e68b1148a330e52b395313d97e7"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros x x_cond.",
                        "VernacExtend",
                        "518049a0b44b5ba2a994e8186cc0b4a54b01b2ff"
                    ]
                },
                {
                    "command": [
                        "replace (tan x - y - (tan a - y)) with (tan x - tan a) by field.",
                        "VernacExtend",
                        "1763e206508001eb0b10d1773ad06f33344ebcdc"
                    ]
                },
                {
                    "command": [
                        "exact (Temp x x_cond).",
                        "VernacExtend",
                        "c1a21b20423b8259ad76db04437151e1fe579706"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : (fun x : R => tan x - y) lb < 0).",
                        "VernacExtend",
                        "11370174b868906c6ad64b8e7a2a1f8c6defad55"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_minus.",
                        "VernacExtend",
                        "9fee20f16a41f319061ad24c67e73ac9f8090990"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : 0 < (fun x : R => tan x - y) ub).",
                        "VernacExtend",
                        "2e13b41ad7ae58d54f31b9b90757430fb8314dab"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_minus.",
                        "VernacExtend",
                        "22c4b2f4e2c621cef31da499d2c7cffc553c269f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "destruct (IVT_interv (fun x => tan x - y) lb ub Cont lb_lt_ub H1 H2) as (x,Hx).",
                        "VernacExtend",
                        "669d523c509594c3896adb4c589bc08412550d7e"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "destruct Hx as (Hyp,Result).",
                        "VernacExtend",
                        "d41e3d8e3d42cf44ef9bdb9ba8cfc0a7c67f1ac5"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (Temp2 : x <> lb).",
                        "VernacExtend",
                        "98cdd43da079521caf7cf01b3073e927af41ae11"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse.",
                        "VernacExtend",
                        "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
                    ]
                },
                {
                    "command": [
                        "rewrite Hfalse in Result.",
                        "VernacExtend",
                        "98671de006e209551f9f7d683f81690af9e3917c"
                    ]
                },
                {
                    "command": [
                        "assert (Temp2 : y <> tan lb).",
                        "VernacExtend",
                        "c9333442f5746b831f992aa8300d85f2060912bf"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq ; assumption.",
                        "VernacExtend",
                        "9dbd3eafa8d07a9bb7dbdb29781a2910e14b400b"
                    ]
                },
                {
                    "command": [
                        "clear - Temp2 Result.",
                        "VernacExtend",
                        "bf453dbc9d7c91d7bff2ab27ba8d9f00d9d694af"
                    ]
                },
                {
                    "command": [
                        "apply Temp2.",
                        "VernacExtend",
                        "b49b8cdb0af7197519caf97538a3c2020bcbcfc6"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "clear -Temp2 H3.",
                        "VernacExtend",
                        "e4c37f6d9efe027c596216f1fa80588a5bab8648"
                    ]
                },
                {
                    "command": [
                        "case H3 ; intuition.",
                        "VernacExtend",
                        "675ee46e7b3075db982ae57b1af42b4125abd4ff"
                    ]
                },
                {
                    "command": [
                        "apply False_ind ; apply Temp2 ; symmetry ; assumption.",
                        "VernacExtend",
                        "8957ef72319caf972ed4a6871e20a039c8ab171c"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : x <> ub).",
                        "VernacExtend",
                        "2e2a72726f9ea767a0227ba47f2dedd9bbd9c8d0"
                    ]
                },
                {
                    "command": [
                        "intro Hfalse.",
                        "VernacExtend",
                        "f2af5ed1e20bb9e0bc8e40a9fca9236eebb70538"
                    ]
                },
                {
                    "command": [
                        "rewrite Hfalse in Result.",
                        "VernacExtend",
                        "98671de006e209551f9f7d683f81690af9e3917c"
                    ]
                },
                {
                    "command": [
                        "assert (Temp2 : y <> tan ub).",
                        "VernacExtend",
                        "0c6d6756900689d943da19271aadb8cc1dc4c740"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_eq ; assumption.",
                        "VernacExtend",
                        "71ee539e69e72c7c5f1c175968d44a9a4558166a"
                    ]
                },
                {
                    "command": [
                        "clear - Temp2 Result.",
                        "VernacExtend",
                        "bf453dbc9d7c91d7bff2ab27ba8d9f00d9d694af"
                    ]
                },
                {
                    "command": [
                        "apply Temp2.",
                        "VernacExtend",
                        "b49b8cdb0af7197519caf97538a3c2020bcbcfc6"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "case H4 ; intuition.",
                        "VernacExtend",
                        "66c9fcacbb784c19a386feee0f0f38747e566af7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tan_1_gt_1",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "assert (0 < cos 1) by (apply cos_gt_0; assert (t:=PI2_1); lra).",
                        "VernacExtend",
                        "5482660213bc56c5e0e4976749ad189ba28fb4b7"
                    ]
                },
                {
                    "command": [
                        "assert (t1 : cos 1 <= 1 - 1/2 + 1/24).",
                        "VernacExtend",
                        "af2e2644855f70842d534e2ef61348663a8b393a"
                    ]
                },
                {
                    "command": [
                        "destruct (pre_cos_bound 1 0) as [_ t]; try lra; revert t.",
                        "VernacExtend",
                        "b9935eb18b0336231cb63d1b64e7bf4519e8da22"
                    ]
                },
                {
                    "command": [
                        "unfold cos_approx, cos_term; simpl; intros t; apply Rle_trans with (1:=t).",
                        "VernacExtend",
                        "262e8ddfce9cdf5f83b0af238cafb8d76b49b8fc"
                    ]
                },
                {
                    "command": [
                        "clear t; apply Req_le; field.",
                        "VernacExtend",
                        "9a8bb6a52058be2689f8db9bd5eb1aba1574bc00"
                    ]
                },
                {
                    "command": [
                        "assert (t2 : 1 - 1/6 <= sin 1).",
                        "VernacExtend",
                        "afcbbacf7fe4f5fe038806a8b48c2c0adc1b905b"
                    ]
                },
                {
                    "command": [
                        "destruct (pre_sin_bound 1 0) as [t _]; try lra; revert t.",
                        "VernacExtend",
                        "25d97948ed1a5eaccfa7335723e97c8539c9c39b"
                    ]
                },
                {
                    "command": [
                        "unfold sin_approx, sin_term; simpl; intros t; apply Rle_trans with (2:=t).",
                        "VernacExtend",
                        "398aff4b9812807a05cae58b811094ac9f3a2280"
                    ]
                },
                {
                    "command": [
                        "clear t; apply Req_le; field.",
                        "VernacExtend",
                        "9a8bb6a52058be2689f8db9bd5eb1aba1574bc00"
                    ]
                },
                {
                    "command": [
                        "pattern 1 at 2; replace 1 with (cos 1 / cos 1) by (field; apply Rgt_not_eq; lra).",
                        "VernacExtend",
                        "571eb7d55a035abf3643ca7879d4baa287154979"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_gt; apply (Rmult_lt_compat_r (/ cos 1) (cos 1) (sin 1)).",
                        "VernacExtend",
                        "9a82066e8b819e90e0da76633e550600f3417e30"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := t1); apply Rlt_le_trans with (2 := t2).",
                        "VernacExtend",
                        "c59c02c391240488bf9f164f65cfccd576e05268"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "frame_tan",
            "line_nb": 341,
            "steps": [
                {
                    "command": [
                        "destruct (total_order_T (Rabs y) 1) as [Hs|Hgt].",
                        "VernacExtend",
                        "ff726d4b50769fee9a0e1da3f1dc4aaeba18e072"
                    ]
                },
                {
                    "command": [
                        "assert (yle1 : Rabs y <= 1) by (destruct Hs; lra).",
                        "VernacExtend",
                        "e15b772de7e37ca780f1c65dce20941d8478feeb"
                    ]
                },
                {
                    "command": [
                        "clear Hs; exists 1; split;[split; [exact Rlt_0_1 | exact PI2_1] | ].",
                        "VernacExtend",
                        "0e833afa5e96ff047fd18d443f3f49a56ca81590"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := yle1); exact tan_1_gt_1.",
                        "VernacExtend",
                        "8f5633ac4bb3c0bb7909415644595eeb91cc4193"
                    ]
                },
                {
                    "command": [
                        "assert (0 < / (Rabs y + 1)).",
                        "VernacExtend",
                        "323800a5c6e1ad549e1a433afaa81ec3691ed5fd"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; lra.",
                        "VernacExtend",
                        "b7c315d28122f96e539bda730a1932e20d27564d"
                    ]
                },
                {
                    "command": [
                        "set (u := /2 * / (Rabs y + 1)).",
                        "VernacExtend",
                        "f495149e8571837d868c3eeb92b5ca5b1795aa80"
                    ]
                },
                {
                    "command": [
                        "assert (0 < u).",
                        "VernacExtend",
                        "64f77c79b046b8d511bbcdc6a5748055de97e4c2"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; [lra | assumption].",
                        "VernacExtend",
                        "36a1b9bbd76e26ff9076f1ce6746054190119652"
                    ]
                },
                {
                    "command": [
                        "assert (vlt1 : / (Rabs y + 1) < 1).",
                        "VernacExtend",
                        "6930a5cf77c539465bc0985bd7e3f0993fe74e68"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_r with (Rabs y + 1).",
                        "VernacExtend",
                        "9d0d9633a516e556ed331ec0e4f029ce25c45447"
                    ]
                },
                {
                    "command": [
                        "assert (t := Rabs_pos y); lra.",
                        "VernacExtend",
                        "468b6b3756086a6204d69a0a682016ff17076043"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_l; [rewrite Rmult_1_l | apply Rgt_not_eq]; lra.",
                        "VernacExtend",
                        "c00125b504fa68b242ca027b18e600071097c09f"
                    ]
                },
                {
                    "command": [
                        "assert (vlt2 : u < 1).",
                        "VernacExtend",
                        "58d21c4481cc4c1249ae3c29fd174e1ee9d1b90e"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (/ (Rabs y + 1)).",
                        "VernacExtend",
                        "678eb99da9cd2b7b7e402a300d444eab7dedc94f"
                    ]
                },
                {
                    "command": [
                        "rewrite double_var.",
                        "VernacExtend",
                        "cdcd7ecd0a5e6a34d944626ebc3daafb27b90163"
                    ]
                },
                {
                    "command": [
                        "assert (t : forall x, 0 < x -> x < x + x) by (clear; intros; lra).",
                        "VernacExtend",
                        "aa47008dc44a2aa9fdd51d4d512ed026fc5caffe"
                    ]
                },
                {
                    "command": [
                        "unfold u; rewrite Rmult_comm; apply t.",
                        "VernacExtend",
                        "ed459f6fe24472bef87184942510b2ed53c46afd"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rmult_comm; assumption.",
                        "VernacExtend",
                        "eefc6e73823af66d7a77a69a5b8d74492ba8bfca"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert(int : 0 < PI / 2 - u < PI / 2).",
                        "VernacExtend",
                        "f91b6ceed7bb8de3bc7cfd11a3fc2aa83cdb7b3c"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assert (t := PI2_1); apply Rlt_Rminus, Rlt_trans with (2 := t); assumption.",
                        "VernacExtend",
                        "b16046e3af3f03194fce55bff689a4142040c9eb"
                    ]
                },
                {
                    "command": [
                        "assert (dumb : forall x y, 0 < y -> x - y < x) by (clear; intros; lra).",
                        "VernacExtend",
                        "c66791988f7da6274ba9a828008c79d44c45bacd"
                    ]
                },
                {
                    "command": [
                        "apply dumb; clear dumb; assumption.",
                        "VernacExtend",
                        "162bcf6e09cb0baebf8804c54c53fce9d0ff8ec7"
                    ]
                },
                {
                    "command": [
                        "exists (PI/2 - u).",
                        "VernacExtend",
                        "9ea7080435c8514e1b143cf397c8662c8177aef9"
                    ]
                },
                {
                    "command": [
                        "assert (tmp : forall x y, 0 < x -> y < 1 -> x * y < x).",
                        "VernacExtend",
                        "0898b3587f750b0566c2e6510030c4cf6927aa7a"
                    ]
                },
                {
                    "command": [
                        "clear; intros x y x0 y1; pattern x at 2; rewrite <- (Rmult_1_r x).",
                        "VernacExtend",
                        "9392493c18f432ea8f73b3d444e3cb0dccef6fa7"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l; assumption.",
                        "VernacExtend",
                        "a0928e135e6444a63d998d0f7d7ab651c707d349"
                    ]
                },
                {
                    "command": [
                        "assert (0 < sin u).",
                        "VernacExtend",
                        "0dff65c0bbdfcb10db9e336c2c6d228ff4320328"
                    ]
                },
                {
                    "command": [
                        "apply sin_gt_0;[ assumption | ].",
                        "VernacExtend",
                        "492b4bbbf44282a9f71406692b6b1a8636287ffe"
                    ]
                },
                {
                    "command": [
                        "assert (t := PI2_Rlt_PI); assert (t' := PI2_1).",
                        "VernacExtend",
                        "88a06591fb9417d5aaa3b7c86df74f9b1a62fbef"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (2 := Rlt_trans _ _ _ t' t); assumption.",
                        "VernacExtend",
                        "9d17ae810be3183cd974eb6743d020f1f0b8ad05"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (/2 * / cos(PI / 2 - u)).",
                        "VernacExtend",
                        "cd22c16719555d474dcb65df1aea4d984897487b"
                    ]
                },
                {
                    "command": [
                        "rewrite cos_shift.",
                        "VernacExtend",
                        "83db67df4c0e4c199af26326a1e8e64a840b9f2b"
                    ]
                },
                {
                    "command": [
                        "assert (sin u < u).",
                        "VernacExtend",
                        "3061bb5631682fb65c64feeee89d5d13c3fbd94a"
                    ]
                },
                {
                    "command": [
                        "assert (t1 : 0 <= u) by (apply Rlt_le; assumption).",
                        "VernacExtend",
                        "3662c9804448a04dde9989eeb943dfe44673eb4e"
                    ]
                },
                {
                    "command": [
                        "assert (t2 : u <= 4) by (apply Rle_trans with 1;[apply Rlt_le | lra]; assumption).",
                        "VernacExtend",
                        "0ab529043b2aeb81af4c3be4732f4713915a18b6"
                    ]
                },
                {
                    "command": [
                        "destruct (pre_sin_bound u 0 t1 t2) as [_ t].",
                        "VernacExtend",
                        "12c7d58e02f168a2575f1d30c1212aa55965a124"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := t); clear t1 t2 t.",
                        "VernacExtend",
                        "827d6701bb7a830b062c5edda4b62172c89d7950"
                    ]
                },
                {
                    "command": [
                        "unfold sin_approx; simpl; unfold sin_term; simpl ((-1) ^ 0); replace ((-1) ^ 2) with 1 by ring; simpl ((-1) ^ 1); rewrite !Rmult_1_r, !Rmult_1_l; simpl plus; simpl (INR (fact 1)).",
                        "VernacExtend",
                        "0c436d3f3a98bccea622094b40b8d1a376d60b95"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (fun x => tech_pow_Rmult x 0), <- (fun x => tech_pow_Rmult x 2), <- (fun x => tech_pow_Rmult x 4).",
                        "VernacExtend",
                        "99d3156a52e239d152e18fd9911bb04ff48c6ae8"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (-1)); simpl ((/(Rabs y + 1)) ^ 0).",
                        "VernacExtend",
                        "8246d43a15de31ea3fba04f3832b913597980c4b"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rinv_1, !Rmult_assoc, <- !Rmult_plus_distr_l.",
                        "VernacExtend",
                        "75b5866db450828761f2c5360bcc828f288c906f"
                    ]
                },
                {
                    "command": [
                        "apply tmp;[assumption | ].",
                        "VernacExtend",
                        "37fa2a131a53fa9366ebabbcb1b2c4a771eb091e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc, Rmult_1_l; pattern 1 at 2; rewrite <- Rplus_0_r.",
                        "VernacExtend",
                        "dd3e61f412fea47fde40acadbfbbfa648748f7b6"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "cfadddfd242496b5b9297d5ae6868b0dbc12aeee"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "34da3c50cde53c179a4908b1329a459071245c05"
                    ]
                },
                {
                    "command": [
                        "match goal with |- (?a * (-1)) + _ < 0 => rewrite <- (Rplus_opp_l a); change (-1) with (-(1)); rewrite Ropp_mult_distr_r_reverse, Rmult_1_r end.",
                        "VernacExtend",
                        "1db3558ba29d248020b218e347ce92f3d0b32f4d"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "cfadddfd242496b5b9297d5ae6868b0dbc12aeee"
                    ]
                },
                {
                    "command": [
                        "assert (0 < u ^ 2) by (apply pow_lt; assumption).",
                        "VernacExtend",
                        "2840861e4fde17573f61228411afb641c186e941"
                    ]
                },
                {
                    "command": [
                        "replace (u ^ 4) with (u ^ 2 * u ^ 2) by ring.",
                        "VernacExtend",
                        "4648d756f604bfa6789fbbbdf41fab74d2dae7b3"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; apply Rmult_lt_compat_l; auto.",
                        "VernacExtend",
                        "deff155337d8d45dbec25f739e6d51cc69825717"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (u ^ 2 * /INR (fact 3)).",
                        "VernacExtend",
                        "667cb56c5cc56def3bb9899970dbb8a8ec253e5b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l; auto.",
                        "VernacExtend",
                        "07529c97a878d71c5dcb0c16971cd1a7ec2a3761"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rmult_lt_0_compat; apply INR_fact_lt_0].",
                        "VernacExtend",
                        "2e686f787988977eaea8f13e974cacbaf418d389"
                    ]
                },
                {
                    "command": [
                        "rewrite !INR_IZR_INZ; apply IZR_lt; reflexivity.",
                        "VernacExtend",
                        "3f9726164789af5aee83bad7ca96444ade7d2519"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm; apply tmp.",
                        "VernacExtend",
                        "e794ed8aaf517c9d7cb00422335682499cfac5cb"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rinv_0_lt_compat, INR_fact_lt_0].",
                        "VernacExtend",
                        "69427226b80d073b83bbbacc8362bd8b4a5dba2b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (2 := vlt2).",
                        "VernacExtend",
                        "26ab64e2d343eb45cf44c4be2554ca2445c8fca0"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold u; apply tmp; auto; rewrite Rmult_1_r; assumption.",
                        "VernacExtend",
                        "4e8430d8df13cf980ec8c2393030e8d67d9a7f4f"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (Rabs y + 1);[lra | ].",
                        "VernacExtend",
                        "34919dac635586165a0b672cb287150c795600f9"
                    ]
                },
                {
                    "command": [
                        "pattern (Rabs y + 1) at 1; rewrite <- (Rinv_involutive (Rabs y + 1)); [ | apply Rgt_not_eq; lra].",
                        "VernacExtend",
                        "cae2d233e98c7b6610e9e794984ab865f4e368e2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_mult_distr.",
                        "VernacExtend",
                        "c12ef2181b9990533ec54fcfa7a44402635ff59c"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat;[lra | assumption].",
                        "VernacExtend",
                        "36a1b9bbd76e26ff9076f1ce6746054190119652"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (/(Rabs y + 1)) with (2 * u).",
                        "VernacExtend",
                        "a0f5ccec0dfd6f48bbfa0fed249ddca2a9b5cd86"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "unfold u; field; apply Rgt_not_eq; clear -Hgt; lra.",
                        "VernacExtend",
                        "ec391a43e19e4a8216379f7688f3ed821b829086"
                    ]
                },
                {
                    "command": [
                        "solve[discrR].",
                        "VernacExtend",
                        "2cfc13957303e61009d3596f470eb56d594b90b0"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq; assumption.",
                        "VernacExtend",
                        "9dbd3eafa8d07a9bb7dbdb29781a2910e14b400b"
                    ]
                },
                {
                    "command": [
                        "unfold tan.",
                        "VernacExtend",
                        "0f8d073e49c9cc689c8ce1949822c17020378654"
                    ]
                },
                {
                    "command": [
                        "set (u' := PI / 2); unfold Rdiv; apply Rmult_lt_compat_r; unfold u'.",
                        "VernacExtend",
                        "12782e891f68a8ba4585f1821c992f4dbab11867"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "rewrite cos_shift; assumption.",
                        "VernacExtend",
                        "04f4e3fcde0acc3e02f24d23d87a6ff1fa26311c"
                    ]
                },
                {
                    "command": [
                        "assert (vlt3 : u < /4).",
                        "VernacExtend",
                        "7302425dc068fabd18c22fe451a26b752ae44bd2"
                    ]
                },
                {
                    "command": [
                        "replace (/4) with (/2 * /2) by field.",
                        "VernacExtend",
                        "8c38aed2bd2dfbe0867c55e30832edd4a4e86ba9"
                    ]
                },
                {
                    "command": [
                        "unfold u; apply Rmult_lt_compat_l;[lra | ].",
                        "VernacExtend",
                        "7accaf97127112e7f1c8b40a8a4f1cb0b99c7a72"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; lra.",
                        "VernacExtend",
                        "df67e23e1540ac051c6df6de4f576430efcc8312"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assert (1 < PI / 2 - u) by (assert (t := PI2_3_2); lra).",
                        "VernacExtend",
                        "810e69f43c3fabf34a2a0d0e325cb4734be6de9f"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (sin 1).",
                        "VernacExtend",
                        "239f9efb2e70fec1cece66275a8c04d5c5ae3203"
                    ]
                },
                {
                    "command": [
                        "assert (t' : 1 <= 4) by lra.",
                        "VernacExtend",
                        "58c7765683e362c69ab88d8d61add13c7a0f3c01"
                    ]
                },
                {
                    "command": [
                        "destruct (pre_sin_bound 1 0 (Rlt_le _ _ Rlt_0_1) t') as [t _].",
                        "VernacExtend",
                        "7c93b288dd5d217db5534df37ba6905c5815cd2a"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (2 := t); clear t.",
                        "VernacExtend",
                        "f51c30f01a48101a1489d4cbbf2b8c023ab2cb75"
                    ]
                },
                {
                    "command": [
                        "simpl plus; replace (sin_approx 1 1) with (5/6);[lra | ].",
                        "VernacExtend",
                        "69a94cf7942346da558341582ed2ef2d9e5eb462"
                    ]
                },
                {
                    "command": [
                        "unfold sin_approx, sin_term; simpl; field.",
                        "VernacExtend",
                        "a923a73f206ef11dfbe2ea125ba1a6be92ca6564"
                    ]
                },
                {
                    "command": [
                        "apply sin_increasing_1.",
                        "VernacExtend",
                        "38343a6448ffc3ea36df7b9332c9e2c99e1e870a"
                    ]
                },
                {
                    "command": [
                        "assert (t := PI2_1); lra.",
                        "VernacExtend",
                        "cb5ffbea6ba4749519b9201339dd7b430cb35f32"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, PI2_1.",
                        "VernacExtend",
                        "d01095966c863ff92426c0a9794dec6c578ab822"
                    ]
                },
                {
                    "command": [
                        "assert (t := PI2_1); lra.",
                        "VernacExtend",
                        "cb5ffbea6ba4749519b9201339dd7b430cb35f32"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ub_opp",
            "line_nb": 442,
            "steps": [
                {
                    "command": [
                        "intros x h; rewrite Ropp_div; apply Ropp_lt_contravar; assumption.",
                        "VernacExtend",
                        "f8f139e1967bbd92ebaa1109d4509b363af401f9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pos_opp_lt",
            "line_nb": 445,
            "steps": [
                {
                    "command": [
                        "intros; lra.",
                        "VernacExtend",
                        "449a153f406381cfb8ab107f551a2c789b996417"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech_opp_tan",
            "line_nb": 448,
            "steps": [
                {
                    "command": [
                        "intros; rewrite tan_neg; assumption.",
                        "VernacExtend",
                        "02f4570927b05c310de9c09f05a29e9f8df9cca7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pre_atan",
            "line_nb": 451,
            "steps": [
                {
                    "command": [
                        "destruct (frame_tan y) as [ub [[ub0 ubpi2] Ptan_ub]].",
                        "VernacExtend",
                        "66961eed15cd0f43494b8bc2008a5f6c0a4254e2"
                    ]
                },
                {
                    "command": [
                        "set (pr := (conj (tech_opp_tan _ _ (proj2 (Rabs_def2 _ _ Ptan_ub))) (proj1 (Rabs_def2 _ _ Ptan_ub)))).",
                        "VernacExtend",
                        "139e272ae4014e8e5af801b3d56515ba8a365da1"
                    ]
                },
                {
                    "command": [
                        "destruct (exists_atan_in_frame (-ub) ub y (pos_opp_lt _ ub0) (ub_opp _ ubpi2) ubpi2 pr) as [v [[vl vu] vq]].",
                        "VernacExtend",
                        "5f575b0ba1cb0b4b8f85ad14a2b78557364851b1"
                    ]
                },
                {
                    "command": [
                        "exists v; clear pr.",
                        "VernacExtend",
                        "33d862f24cd0bde0c2bf193d6f133678b92b5202"
                    ]
                },
                {
                    "command": [
                        "split;[rewrite Ropp_div; split; lra | assumption].",
                        "VernacExtend",
                        "4c4e2d7b121bca8a59b0ddfd7bb494f3f0457264"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "atan_bound",
            "line_nb": 459,
            "steps": [
                {
                    "command": [
                        "intros x; unfold atan; destruct (pre_atan x) as [v [int _]]; exact int.",
                        "VernacExtend",
                        "b8db0192cf3ee19cd135b91ddf04bfed9490f647"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "atan_right_inv",
            "line_nb": 462,
            "steps": [
                {
                    "command": [
                        "intros x; unfold atan; destruct (pre_atan x) as [v [_ q]]; exact q.",
                        "VernacExtend",
                        "3171cabed6603a0e7a55ec4f1e1c5052a7a3571a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "atan_opp",
            "line_nb": 465,
            "steps": [
                {
                    "command": [
                        "intros x; generalize (atan_bound (-x)); rewrite Ropp_div;intros [a b].",
                        "VernacExtend",
                        "87830a511c420d4940791dc8c9c31b24d72a1865"
                    ]
                },
                {
                    "command": [
                        "generalize (atan_bound x); rewrite Ropp_div; intros [c d].",
                        "VernacExtend",
                        "a720498dee8c45e44c6c4979f01cc93892bc2b92"
                    ]
                },
                {
                    "command": [
                        "apply tan_is_inj; try rewrite Ropp_div; try split; try lra.",
                        "VernacExtend",
                        "54ce31692a5b43ec3b05938710ff0f07706585e0"
                    ]
                },
                {
                    "command": [
                        "rewrite tan_neg, !atan_right_inv; reflexivity.",
                        "VernacExtend",
                        "6952feef6aad1108083d1dd1b2a8ead9d48250d3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_atan",
            "line_nb": 471,
            "steps": [
                {
                    "command": [
                        "intros x.",
                        "VernacExtend",
                        "596d66edc70dae19981ed74f103fc0a865aec92c"
                    ]
                },
                {
                    "command": [
                        "destruct (frame_tan x) as [ub [[ub0 ubpi] P]].",
                        "VernacExtend",
                        "d75045567ce4d2a438c7a3010e8ca8977909ea5a"
                    ]
                },
                {
                    "command": [
                        "assert (lb_lt_ub : -ub < ub) by apply pos_opp_lt, ub0.",
                        "VernacExtend",
                        "0a980c885ccbfe96667d475d63ea95768407e360"
                    ]
                },
                {
                    "command": [
                        "assert (xint : tan(-ub) < x < tan ub).",
                        "VernacExtend",
                        "377ad5eae37547422e3edda0bf477e3c326156a3"
                    ]
                },
                {
                    "command": [
                        "assert (xint' : x < tan ub /\\ -(tan ub) < x) by apply Rabs_def2, P.",
                        "VernacExtend",
                        "c6b3aaba754b627b78b793a89c55930ae214e903"
                    ]
                },
                {
                    "command": [
                        "rewrite tan_neg; tauto.",
                        "VernacExtend",
                        "98d6763e2e6c89db0c1ca2248fb6248bbee53f74"
                    ]
                },
                {
                    "command": [
                        "assert (inv_p : forall x, tan(-ub) <= x -> x <= tan ub -> comp tan atan x = id x).",
                        "VernacExtend",
                        "4369bc22c6365e03908ba743abf73f01789d10cb"
                    ]
                },
                {
                    "command": [
                        "intros; apply atan_right_inv.",
                        "VernacExtend",
                        "b23ec1a51eaa5de173c0df4c4c66549bd1c5dc27"
                    ]
                },
                {
                    "command": [
                        "assert (int_tan : forall y, tan (- ub) <= y -> y <= tan ub -> -ub <= atan y <= ub).",
                        "VernacExtend",
                        "6cc8aed7740d85c1364927fc5607a7dc819b9f7d"
                    ]
                },
                {
                    "command": [
                        "clear -ub0 ubpi; intros y lo up; split.",
                        "VernacExtend",
                        "a080de309694bec04ba5d65e69c6984d628ea758"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (-ub) (atan y)) as [h | abs]; auto.",
                        "VernacExtend",
                        "6dcc3b72f3f37dcd9f4701c54472098dd46e1bc7"
                    ]
                },
                {
                    "command": [
                        "assert (y < tan (-ub)).",
                        "VernacExtend",
                        "f0902e3ef5a032d025e7320238b043fffe516460"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (atan_right_inv y); apply tan_increasing.",
                        "VernacExtend",
                        "6dc6d70a3f981ebb12bd65ed80b8e6f32f28c085"
                    ]
                },
                {
                    "command": [
                        "destruct (atan_bound y); assumption.",
                        "VernacExtend",
                        "6002d1bd82cc8c5286ffd6724862bcd0f66242a5"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (atan y) ub) as [h | abs]; auto.",
                        "VernacExtend",
                        "20f72611d8872c38dfc2423a3006cbe09363c244"
                    ]
                },
                {
                    "command": [
                        "assert (tan ub < y).",
                        "VernacExtend",
                        "40c297e0d455e5b98cf6e8a7baf70124b5833368"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (atan_right_inv y); apply tan_increasing.",
                        "VernacExtend",
                        "6dc6d70a3f981ebb12bd65ed80b8e6f32f28c085"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_div; lra.",
                        "VernacExtend",
                        "340db74ad5ddd66ab75cc8824f09c61d20738e74"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "destruct (atan_bound y); assumption.",
                        "VernacExtend",
                        "6002d1bd82cc8c5286ffd6724862bcd0f66242a5"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assert (incr : forall x y, -ub <= x -> x < y -> y <= ub -> tan x < tan y).",
                        "VernacExtend",
                        "d4b18fc1c192a3da423e40f965364d212e4aae94"
                    ]
                },
                {
                    "command": [
                        "intros y z l yz u; apply tan_increasing.",
                        "VernacExtend",
                        "dabab7c19627fb3c26c4eec1fb77ba0cd1851d8f"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_div; lra.",
                        "VernacExtend",
                        "340db74ad5ddd66ab75cc8824f09c61d20738e74"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assert (der : forall a, -ub <= a <= ub -> derivable_pt tan a).",
                        "VernacExtend",
                        "ac3543480592514e148dedbdb63ae992a9b3873d"
                    ]
                },
                {
                    "command": [
                        "intros a [la ua]; apply derivable_pt_tan.",
                        "VernacExtend",
                        "691f74d91a64704949f88880b2299299aa3d14a3"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_div; split; lra.",
                        "VernacExtend",
                        "a1d2b2925af1e1c6f6721c33242e0feeaa312867"
                    ]
                },
                {
                    "command": [
                        "assert (df_neq : derive_pt tan (atan x) (derivable_pt_recip_interv_prelim1 tan atan (- ub) ub x lb_lt_ub xint inv_p int_tan incr der) <> 0).",
                        "VernacExtend",
                        "e523769358cb701308da63305324a162766b1fa2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (pr_nu tan (atan x) (derivable_pt_tan (atan x) (atan_bound x))).",
                        "VernacExtend",
                        "23e5f2eaa314679434dbfcae8de66dbe53c04f1d"
                    ]
                },
                {
                    "command": [
                        "rewrite derive_pt_tan.",
                        "VernacExtend",
                        "2cde721afedac1f43d1c8d28eca77262e1df660e"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rgt_not_eq, plus_Rsqr_gt_0].",
                        "VernacExtend",
                        "b60b8557de8a1bbc5ab7fd3415a6e24b572b6534"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_recip_interv tan atan (-ub) ub x lb_lt_ub xint inv_p int_tan incr der).",
                        "VernacExtend",
                        "2bedc34037e5b2413999015fea5b34cefe8faaff"
                    ]
                },
                {
                    "command": [
                        "exact df_neq.",
                        "VernacExtend",
                        "238d4a26ef0a520c7e4fda8dd9724efa0787e15d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "atan_increasing",
            "line_nb": 511,
            "steps": [
                {
                    "command": [
                        "intros x y d.",
                        "VernacExtend",
                        "df61646ba26057a11ee95d34f0dd5165f6a1ac53"
                    ]
                },
                {
                    "command": [
                        "assert (t1 := atan_bound x).",
                        "VernacExtend",
                        "0dbeb2726db8d93e22a469fa03e1afc4f615b11d"
                    ]
                },
                {
                    "command": [
                        "assert (t2 := atan_bound y).",
                        "VernacExtend",
                        "66283f5c9ab4ef09ec97247c1de8d35dca5d0269"
                    ]
                },
                {
                    "command": [
                        "destruct (Rlt_le_dec (atan x) (atan y)) as [lt | bad].",
                        "VernacExtend",
                        "d2a384b6baf9627e9d7857aa3fe8820eadbe0855"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_le in d.",
                        "VernacExtend",
                        "15a80b9558d7941777a5d0d44cbbee86e8633e2d"
                    ]
                },
                {
                    "command": [
                        "case d.",
                        "VernacExtend",
                        "c0154daf2286bdfa3ac83fa4874ad52160f9dd02"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (atan_right_inv y), <- (atan_right_inv x).",
                        "VernacExtend",
                        "0de427105581e033fa37e2172a65fb5a71be459d"
                    ]
                },
                {
                    "command": [
                        "destruct bad as [ylt | yx].",
                        "VernacExtend",
                        "9b3b7254990a4d363923cb26263aead0826ed472"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, tan_increasing; try tauto.",
                        "VernacExtend",
                        "e69c1628a77fe1fdd6698c62a5a81452e57832e1"
                    ]
                },
                {
                    "command": [
                        "solve[rewrite yx; apply Rle_refl].",
                        "VernacExtend",
                        "89d9bfb11b6c259f085e4ff6d8c4be6caa19a374"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "atan_0",
            "line_nb": 524,
            "steps": [
                {
                    "command": [
                        "apply tan_is_inj; try (apply atan_bound).",
                        "VernacExtend",
                        "122c2135be51c84a8dd6491d03eb1da2dcacbdde"
                    ]
                },
                {
                    "command": [
                        "assert (t := PI_RGT_0); rewrite Ropp_div; split; lra.",
                        "VernacExtend",
                        "e2cf49a8cef963b01a262561ef5eb975cc4ae5b7"
                    ]
                },
                {
                    "command": [
                        "rewrite atan_right_inv, tan_0.",
                        "VernacExtend",
                        "15865b58e6248ab9abc24e1cf4eb7d3db21812fd"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "atan_1",
            "line_nb": 530,
            "steps": [
                {
                    "command": [
                        "assert (ut := PI_RGT_0).",
                        "VernacExtend",
                        "d405cea2130da1de154e143f277d521c2647aba1"
                    ]
                },
                {
                    "command": [
                        "assert (-PI/2 < PI/4 < PI/2) by (rewrite Ropp_div; split; lra).",
                        "VernacExtend",
                        "65a089a0baeb6ffedcaedd06be80bc0030520ee1"
                    ]
                },
                {
                    "command": [
                        "assert (t := atan_bound 1).",
                        "VernacExtend",
                        "affc7bf42dbf33b86f57bc2ab7a1285046029fde"
                    ]
                },
                {
                    "command": [
                        "apply tan_is_inj; auto.",
                        "VernacExtend",
                        "6d95959c5d1ed7cd3c7104b0381293f49d79c21e"
                    ]
                },
                {
                    "command": [
                        "rewrite tan_PI4, atan_right_inv; reflexivity.",
                        "VernacExtend",
                        "c78a6eb8421249ede165321badec4c5b28fe476b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_atan",
            "line_nb": 537,
            "steps": [
                {
                    "command": [
                        "intros x.",
                        "VernacExtend",
                        "596d66edc70dae19981ed74f103fc0a865aec92c"
                    ]
                },
                {
                    "command": [
                        "destruct (frame_tan x) as [ub [[ub0 ubpi] Pub]].",
                        "VernacExtend",
                        "b674171d2a7508a8dd087e73d8fe160c1d78fc57"
                    ]
                },
                {
                    "command": [
                        "assert (lb_lt_ub : -ub < ub) by apply pos_opp_lt, ub0.",
                        "VernacExtend",
                        "0a980c885ccbfe96667d475d63ea95768407e360"
                    ]
                },
                {
                    "command": [
                        "assert (xint : tan(-ub) < x < tan ub).",
                        "VernacExtend",
                        "377ad5eae37547422e3edda0bf477e3c326156a3"
                    ]
                },
                {
                    "command": [
                        "assert (xint' : x < tan ub /\\ -(tan ub) < x) by apply Rabs_def2, Pub.",
                        "VernacExtend",
                        "cb86f5ebe4177317297b6cab2bdbdaacaf90f954"
                    ]
                },
                {
                    "command": [
                        "rewrite tan_neg; tauto.",
                        "VernacExtend",
                        "98d6763e2e6c89db0c1ca2248fb6248bbee53f74"
                    ]
                },
                {
                    "command": [
                        "assert (inv_p : forall x, tan(-ub) <= x -> x <= tan ub -> comp tan atan x = id x).",
                        "VernacExtend",
                        "4369bc22c6365e03908ba743abf73f01789d10cb"
                    ]
                },
                {
                    "command": [
                        "intros; apply atan_right_inv.",
                        "VernacExtend",
                        "b23ec1a51eaa5de173c0df4c4c66549bd1c5dc27"
                    ]
                },
                {
                    "command": [
                        "assert (int_tan : forall y, tan (- ub) <= y -> y <= tan ub -> -ub <= atan y <= ub).",
                        "VernacExtend",
                        "6cc8aed7740d85c1364927fc5607a7dc819b9f7d"
                    ]
                },
                {
                    "command": [
                        "clear -ub0 ubpi; intros y lo up; split.",
                        "VernacExtend",
                        "a080de309694bec04ba5d65e69c6984d628ea758"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (-ub) (atan y)) as [h | abs]; auto.",
                        "VernacExtend",
                        "6dcc3b72f3f37dcd9f4701c54472098dd46e1bc7"
                    ]
                },
                {
                    "command": [
                        "assert (y < tan (-ub)).",
                        "VernacExtend",
                        "f0902e3ef5a032d025e7320238b043fffe516460"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (atan_right_inv y); apply tan_increasing.",
                        "VernacExtend",
                        "6dc6d70a3f981ebb12bd65ed80b8e6f32f28c085"
                    ]
                },
                {
                    "command": [
                        "destruct (atan_bound y); assumption.",
                        "VernacExtend",
                        "6002d1bd82cc8c5286ffd6724862bcd0f66242a5"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (atan y) ub) as [h | abs]; auto.",
                        "VernacExtend",
                        "20f72611d8872c38dfc2423a3006cbe09363c244"
                    ]
                },
                {
                    "command": [
                        "assert (tan ub < y).",
                        "VernacExtend",
                        "40c297e0d455e5b98cf6e8a7baf70124b5833368"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (atan_right_inv y); apply tan_increasing.",
                        "VernacExtend",
                        "6dc6d70a3f981ebb12bd65ed80b8e6f32f28c085"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_div; lra.",
                        "VernacExtend",
                        "340db74ad5ddd66ab75cc8824f09c61d20738e74"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "destruct (atan_bound y); assumption.",
                        "VernacExtend",
                        "6002d1bd82cc8c5286ffd6724862bcd0f66242a5"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assert (incr : forall x y, -ub <= x -> x < y -> y <= ub -> tan x < tan y).",
                        "VernacExtend",
                        "d4b18fc1c192a3da423e40f965364d212e4aae94"
                    ]
                },
                {
                    "command": [
                        "intros y z l yz u; apply tan_increasing.",
                        "VernacExtend",
                        "dabab7c19627fb3c26c4eec1fb77ba0cd1851d8f"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_div; lra.",
                        "VernacExtend",
                        "340db74ad5ddd66ab75cc8824f09c61d20738e74"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assert (der : forall a, -ub <= a <= ub -> derivable_pt tan a).",
                        "VernacExtend",
                        "ac3543480592514e148dedbdb63ae992a9b3873d"
                    ]
                },
                {
                    "command": [
                        "intros a [la ua]; apply derivable_pt_tan.",
                        "VernacExtend",
                        "691f74d91a64704949f88880b2299299aa3d14a3"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_div; split; lra.",
                        "VernacExtend",
                        "a1d2b2925af1e1c6f6721c33242e0feeaa312867"
                    ]
                },
                {
                    "command": [
                        "assert (df_neq : derive_pt tan (atan x) (derivable_pt_recip_interv_prelim1 tan atan (- ub) ub x lb_lt_ub xint inv_p int_tan incr der) <> 0).",
                        "VernacExtend",
                        "e523769358cb701308da63305324a162766b1fa2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (pr_nu tan (atan x) (derivable_pt_tan (atan x) (atan_bound x))).",
                        "VernacExtend",
                        "23e5f2eaa314679434dbfcae8de66dbe53c04f1d"
                    ]
                },
                {
                    "command": [
                        "rewrite derive_pt_tan.",
                        "VernacExtend",
                        "2cde721afedac1f43d1c8d28eca77262e1df660e"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rgt_not_eq, plus_Rsqr_gt_0].",
                        "VernacExtend",
                        "b60b8557de8a1bbc5ab7fd3415a6e24b572b6534"
                    ]
                },
                {
                    "command": [
                        "assert (t := derive_pt_recip_interv tan atan (-ub) ub x lb_lt_ub xint incr int_tan der inv_p df_neq).",
                        "VernacExtend",
                        "be29530389d45ceeecf4d7470b175c5f24a3e07e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (pr_nu atan x (derivable_pt_recip_interv tan atan (- ub) ub x lb_lt_ub xint inv_p int_tan incr der df_neq)).",
                        "VernacExtend",
                        "e48a9c0820788a194da4f3a56324b89a83dc6851"
                    ]
                },
                {
                    "command": [
                        "rewrite t.",
                        "VernacExtend",
                        "d187ecef79e3762aaf4f6de9075d9e12dbadbeea"
                    ]
                },
                {
                    "command": [
                        "assert (t' := atan_bound x).",
                        "VernacExtend",
                        "011977e193786f34d6317ddfa20f6c148b4da84f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (pr_nu tan (atan x) (derivable_pt_tan _ t')).",
                        "VernacExtend",
                        "38830ff1ef7634760400171ef9ac1978f26f8cc3"
                    ]
                },
                {
                    "command": [
                        "rewrite derive_pt_tan, atan_right_inv.",
                        "VernacExtend",
                        "fb7f90561b131b9ed432ccc5b8016e68469bb5a2"
                    ]
                },
                {
                    "command": [
                        "replace (Rsqr x) with (x ^ 2) by (unfold Rsqr; ring).",
                        "VernacExtend",
                        "b6f5260e904cc44c6a54a9b590deba099fe7b33b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_atan",
            "line_nb": 583,
            "steps": [
                {
                    "command": [
                        "intros x.",
                        "VernacExtend",
                        "596d66edc70dae19981ed74f103fc0a865aec92c"
                    ]
                },
                {
                    "command": [
                        "apply derive_pt_eq_1 with (derivable_pt_atan x).",
                        "VernacExtend",
                        "52f2fea9f5519f1978b2522987a38726d58d4523"
                    ]
                },
                {
                    "command": [
                        "replace (x ^ 2) with (x * x) by ring.",
                        "VernacExtend",
                        "ee0e45e43237cdc61188409c10a3e2a03edbe689"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_1_l (Rinv _)).",
                        "VernacExtend",
                        "e99d5b3b957b5f8d24fb7c5525eff75c6c93dc11"
                    ]
                },
                {
                    "command": [
                        "apply derive_pt_atan.",
                        "VernacExtend",
                        "15592655c644c6dc362e05e011cdb8fb179291ab"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ratan_seq_decreasing",
            "line_nb": 591,
            "steps": [
                {
                    "command": [
                        "intros x Hx n.",
                        "VernacExtend",
                        "94f8394515701832303e6f656a649eb42f2f0793"
                    ]
                },
                {
                    "command": [
                        "unfold Ratan_seq, Rdiv.",
                        "VernacExtend",
                        "9aef71f7702eb5b688794faafebce8f8c232eb98"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat.",
                        "VernacExtend",
                        "99a65cd1efb8e35313415d4b052731e2b0746daf"
                    ]
                },
                {
                    "command": [
                        "apply pow_le.",
                        "VernacExtend",
                        "cc44161251b27644855953f8a9cda06edcf33960"
                    ]
                },
                {
                    "command": [
                        "exact (proj1 Hx).",
                        "VernacExtend",
                        "d195dce3c719826bbf3ee710ae48fd6625ea5791"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0.",
                        "VernacExtend",
                        "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "destruct (proj1 Hx) as [Hx1|Hx1].",
                        "VernacExtend",
                        "cd37741fbc7c71a11d1d64fe819f98587e0d6d75"
                    ]
                },
                {
                    "command": [
                        "destruct (proj2 Hx) as [Hx2|Hx2].",
                        "VernacExtend",
                        "809c3ca0e78eb6a254ce944fb6fb6264884d535c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rinv_involutive x).",
                        "VernacExtend",
                        "d474c5a399b665588f81c9b76d787d6e9733fd6a"
                    ]
                },
                {
                    "command": [
                        "assert (/ x <> 0)%R by auto with real.",
                        "VernacExtend",
                        "e26feda9db221f9aaa5de3280c467be687938586"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rinv_pow with (1 := H).",
                        "VernacExtend",
                        "784e7123da96c353320b55222320211f377a7f84"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat ; apply pow_lt ; auto with real.",
                        "VernacExtend",
                        "bab816b40f5cf396e93a00b4816f0fbec886b3e7"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_pow.",
                        "VernacExtend",
                        "17447c4958d072f260c2174def3747d4da8d4e17"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_1.",
                        "VernacExtend",
                        "25f4271863b63e7960d69c1c8df426f168da59be"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "exact Hx1.",
                        "VernacExtend",
                        "619012b5bc303d3813baf09b498945592c82f909"
                    ]
                },
                {
                    "command": [
                        "exact Hx2.",
                        "VernacExtend",
                        "698088d6eee34c6e8791b48d84b9572c31885ce8"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq.",
                        "VernacExtend",
                        "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
                    ]
                },
                {
                    "command": [
                        "exact Hx1.",
                        "VernacExtend",
                        "619012b5bc303d3813baf09b498945592c82f909"
                    ]
                },
                {
                    "command": [
                        "rewrite Hx2.",
                        "VernacExtend",
                        "762fa2d49508177b00d0e4ad5a9c143b424050e0"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite pow1.",
                        "VernacExtend",
                        "f5181b0e824424068d2a267347efb08354b1c28b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hx1.",
                        "VernacExtend",
                        "dc04c588509e9c80cb9de507fd065df20b165a4b"
                    ]
                },
                {
                    "command": [
                        "do 2 (rewrite pow_i ; [ idtac | omega ]).",
                        "VernacExtend",
                        "78493b70aa79c9a8b1a614fe40a56b6b747de421"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat ; apply lt_INR_0 ; omega.",
                        "VernacExtend",
                        "f3d7b69c7832a85d46fded5b2e29fbcde836c633"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR.",
                        "VernacExtend",
                        "6da54bc8028ec35546fbb190052dc9499ef7649e"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ratan_seq_converging",
            "line_nb": 630,
            "steps": [
                {
                    "command": [
                        "intros x Hx eps Heps.",
                        "VernacExtend",
                        "242d3eb1902432348f7cea9c90c315a38d888da3"
                    ]
                },
                {
                    "command": [
                        "destruct (archimed (/ eps)) as (HN,_).",
                        "VernacExtend",
                        "919e63bf52e1722f4d86366f19cb5d52ed2d33ce"
                    ]
                },
                {
                    "command": [
                        "assert (0 < up (/ eps))%Z.",
                        "VernacExtend",
                        "6784550e70a60258e7d12d96312e66d09defd0d2"
                    ]
                },
                {
                    "command": [
                        "apply lt_IZR.",
                        "VernacExtend",
                        "165b941162ea1938aa71e78f57835b8df85de779"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (2 := HN).",
                        "VernacExtend",
                        "a402a7cb3ad58cbbd2fe307c910619fec2755e5f"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "exact Heps.",
                        "VernacExtend",
                        "717cd246808f247773d933debf18d809aaf30e8c"
                    ]
                },
                {
                    "command": [
                        "case_eq (up (/ eps)) ; intros ; rewrite H0 in H ; try discriminate H.",
                        "VernacExtend",
                        "71eec079accc6a05d1c280b39400ba759a188ea4"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in HN.",
                        "VernacExtend",
                        "d3641a0b930d04960d300859594fb88fe5bd1857"
                    ]
                },
                {
                    "command": [
                        "simpl in HN.",
                        "VernacExtend",
                        "2a1cbc3ad8718bded16f535a33e4fb25fb6f9bea"
                    ]
                },
                {
                    "command": [
                        "pose (N := Pos.to_nat p).",
                        "VernacExtend",
                        "fa931190d0c31671f4f8a87d674876a0e42f3193"
                    ]
                },
                {
                    "command": [
                        "fold N in HN.",
                        "VernacExtend",
                        "c3e774031d4da3e46ea6c5aa24cb34302f97004f"
                    ]
                },
                {
                    "command": [
                        "clear H H0.",
                        "VernacExtend",
                        "a743351ff441835fe992d483bf3a5b58c3fccd77"
                    ]
                },
                {
                    "command": [
                        "exists N.",
                        "VernacExtend",
                        "3a77aef7937b4644ae655ca246f76b7aa0d197df"
                    ]
                },
                {
                    "command": [
                        "intros n Hn.",
                        "VernacExtend",
                        "4a15d287eb245c84eabfb58cba2e377ac025029a"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist.",
                        "VernacExtend",
                        "9d14879a55d02ad54565968e31b64da7aeb66d97"
                    ]
                },
                {
                    "command": [
                        "rewrite Rminus_0_r.",
                        "VernacExtend",
                        "f41d2c9a1ab0030a599c576fc397975a2d0d5b33"
                    ]
                },
                {
                    "command": [
                        "unfold Ratan_seq.",
                        "VernacExtend",
                        "4959378ac4c9f7fe7ac66af75d626b3c8a376371"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right.",
                        "VernacExtend",
                        "9b60731d6b608338747f09fec19f24d12baad022"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 ^ (2 * n + 1) / INR (2 * n + 1))%R.",
                        "VernacExtend",
                        "326e42154bdb6559be4d918b3e352b090f406915"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r.",
                        "VernacExtend",
                        "6c4c5a82dab802842919dd673f1978a3cb8cff73"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0.",
                        "VernacExtend",
                        "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "apply pow_incr.",
                        "VernacExtend",
                        "6fbd345598152184ea2223d20421517d574c6af3"
                    ]
                },
                {
                    "command": [
                        "exact Hx.",
                        "VernacExtend",
                        "c13c54106cd84aeca38c2dd70bf8e46a5be5e1eb"
                    ]
                },
                {
                    "command": [
                        "rewrite pow1.",
                        "VernacExtend",
                        "dd526bd019440e498820d4e94534018a27ad5cf9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (/ INR (2 * N + 1))%R.",
                        "VernacExtend",
                        "9040db9a40ef1a2bcd856e2d671af3652c764d5e"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_le_contravar.",
                        "VernacExtend",
                        "28ea2dd655f9d8c890013606f785cc34c54c4a71"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0.",
                        "VernacExtend",
                        "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "apply le_INR.",
                        "VernacExtend",
                        "482ba85c33b4f446aa5e9ca8bca5b198f5d8a8c5"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rinv_involutive eps).",
                        "VernacExtend",
                        "3255d4eb7914a1b4381d0b1474bd252e750a2970"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "39f1015e834f9c2b39a61c50e6b9c8cf8a29f32a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "c57ce258f04cdf6d200ca0efb8bd86c726436bf7"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0.",
                        "VernacExtend",
                        "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (INR N).",
                        "VernacExtend",
                        "2b9675cf7f7bbc203ee9d49ac2a3f75dd7ee9c2e"
                    ]
                },
                {
                    "command": [
                        "destruct (archimed (/ eps)) as (H,_).",
                        "VernacExtend",
                        "f9d30c6782745db498a295a2a7c29280e4d0c6d4"
                    ]
                },
                {
                    "command": [
                        "assert (0 < up (/ eps))%Z.",
                        "VernacExtend",
                        "6784550e70a60258e7d12d96312e66d09defd0d2"
                    ]
                },
                {
                    "command": [
                        "apply lt_IZR.",
                        "VernacExtend",
                        "165b941162ea1938aa71e78f57835b8df85de779"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (2 := H).",
                        "VernacExtend",
                        "d8410cc596b0098b2ccbdf38c7de66085ce5c67f"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "exact Heps.",
                        "VernacExtend",
                        "717cd246808f247773d933debf18d809aaf30e8c"
                    ]
                },
                {
                    "command": [
                        "unfold N.",
                        "VernacExtend",
                        "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
                    ]
                },
                {
                    "command": [
                        "rewrite INR_IZR_INZ, positive_nat_Z.",
                        "VernacExtend",
                        "8056f04745c927274895ce094ec6ee7f94bb70c8"
                    ]
                },
                {
                    "command": [
                        "exact HN.",
                        "VernacExtend",
                        "93f70707aec05037c30097964e6fb9f807a9738d"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR.",
                        "VernacExtend",
                        "6da54bc8028ec35546fbb190052dc9499ef7649e"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq.",
                        "VernacExtend",
                        "8860a9193cfdaf1f0316f8df1f2c0781738e5ef7"
                    ]
                },
                {
                    "command": [
                        "exact Heps.",
                        "VernacExtend",
                        "717cd246808f247773d933debf18d809aaf30e8c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge.",
                        "VernacExtend",
                        "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos.",
                        "VernacExtend",
                        "e03207c3cef85471384dc0906485b056bc83a80a"
                    ]
                },
                {
                    "command": [
                        "apply pow_le.",
                        "VernacExtend",
                        "cc44161251b27644855953f8a9cda06edcf33960"
                    ]
                },
                {
                    "command": [
                        "exact (proj1 Hx).",
                        "VernacExtend",
                        "d195dce3c719826bbf3ee710ae48fd6625ea5791"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat.",
                        "VernacExtend",
                        "d7abdc8c3031a09ca2712c9563d7ecf89b4d477e"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0.",
                        "VernacExtend",
                        "a1a2187f5724bf22725bfafeaf648a30dcb1f835"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ps_atan_exists_01",
            "line_nb": 698,
            "steps": [
                {
                    "command": [
                        "exact (alternated_series (Ratan_seq x) (Ratan_seq_decreasing _ Hx) (Ratan_seq_converging _ Hx)).",
                        "VernacExtend",
                        "03efa2baa9570998c74cd90f9b3fc85779f54cac"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "Ratan_seq_opp",
            "line_nb": 701,
            "steps": [
                {
                    "command": [
                        "intros x n; unfold Ratan_seq.",
                        "VernacExtend",
                        "d83ca16e9e4b6fbeb80664b61ab9dc8cc77a7aa5"
                    ]
                },
                {
                    "command": [
                        "rewrite !pow_add, !pow_mult, !pow_1.",
                        "VernacExtend",
                        "f77bdeb26fae9fe7af7c3834db9f8da394a018a6"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; replace ((-x) ^ 2) with (x ^ 2) by ring; ring.",
                        "VernacExtend",
                        "94eb4a62e4712caa4dc923a70d7cca3b6ab4f889"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sum_Ratan_seq_opp",
            "line_nb": 706,
            "steps": [
                {
                    "command": [
                        "intros x n; replace (-sum_f_R0 (tg_alt (Ratan_seq x)) n) with (-1 * sum_f_R0 (tg_alt (Ratan_seq x)) n) by ring.",
                        "VernacExtend",
                        "fd88f589632c3073891b06895b064cc87a10021b"
                    ]
                },
                {
                    "command": [
                        "rewrite scal_sum; apply sum_eq; intros i _; unfold tg_alt.",
                        "VernacExtend",
                        "acc11649078939f4dd334d9131407f203320bb05"
                    ]
                },
                {
                    "command": [
                        "rewrite Ratan_seq_opp; ring.",
                        "VernacExtend",
                        "403a14cd016e11738ac734655ebf4c7c729c2738"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ps_atan_exists_1",
            "line_nb": 711,
            "steps": [
                {
                    "command": [
                        "destruct (Rle_lt_dec 0 x).",
                        "VernacExtend",
                        "07d3e05336bf45ef72edfb497841013f661e2665"
                    ]
                },
                {
                    "command": [
                        "assert (pr : 0 <= x <= 1) by tauto.",
                        "VernacExtend",
                        "86d12f5c720203cb9805238c47813f4e27839631"
                    ]
                },
                {
                    "command": [
                        "exact (ps_atan_exists_01 x pr).",
                        "VernacExtend",
                        "5ee0bbdd564edd31c4d71f3a8222563956241e32"
                    ]
                },
                {
                    "command": [
                        "assert (pr : 0 <= -x <= 1) by (destruct Hx; split; lra).",
                        "VernacExtend",
                        "52b6259901b78cde58fbaef50cc6cb8248b7dfc1"
                    ]
                },
                {
                    "command": [
                        "destruct (ps_atan_exists_01 _ pr) as [v Pv].",
                        "VernacExtend",
                        "94d3892639300fdfbde7d4e3a6ef8564f264a0e3"
                    ]
                },
                {
                    "command": [
                        "exists (-v).",
                        "VernacExtend",
                        "4418cc34525075afc9fd55c09df934ddececf930"
                    ]
                },
                {
                    "command": [
                        "apply (Un_cv_ext (fun n => (- 1) * sum_f_R0 (tg_alt (Ratan_seq (- x))) n)).",
                        "VernacExtend",
                        "8d0793b6a4ba92486553028dadb7c8184f495c3d"
                    ]
                },
                {
                    "command": [
                        "intros n; rewrite sum_Ratan_seq_opp; ring.",
                        "VernacExtend",
                        "4efabc4dc3ab9308311772f8be62a8f7548a929c"
                    ]
                },
                {
                    "command": [
                        "replace (-v) with (-1 * v) by ring.",
                        "VernacExtend",
                        "0dd7e9ce7c4ca662dd0e88b637c31849470b19b0"
                    ]
                },
                {
                    "command": [
                        "apply CV_mult;[ | assumption].",
                        "VernacExtend",
                        "7f65904717bc65729979ce6f564e0453d1e58d1f"
                    ]
                },
                {
                    "command": [
                        "solve[intros; exists 0%nat; intros; rewrite R_dist_eq; auto].",
                        "VernacExtend",
                        "ead993c6ff3e48570ae292b649895b3307a7a1ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "in_int",
            "line_nb": 724,
            "steps": [
                {
                    "command": [
                        "destruct (Rle_lt_dec x 1).",
                        "VernacExtend",
                        "fdceb939d342392dc14f10f810caed0f484266dd"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (-1) x).",
                        "VernacExtend",
                        "58d837f3ebda7380b5a31b3fd64b5b64e5695e09"
                    ]
                },
                {
                    "command": [
                        "left;split; auto.",
                        "VernacExtend",
                        "839f21d27eb3d8616b1c18bc30b38cff7c9f8eb4"
                    ]
                },
                {
                    "command": [
                        "right;intros [a1 a2]; lra.",
                        "VernacExtend",
                        "e10952d3ecccceb25304ffdaa5826521c8299e5b"
                    ]
                },
                {
                    "command": [
                        "right;intros [a1 a2]; lra.",
                        "VernacExtend",
                        "e10952d3ecccceb25304ffdaa5826521c8299e5b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ps_atan0_0",
            "line_nb": 732,
            "steps": [
                {
                    "command": [
                        "unfold ps_atan.",
                        "VernacExtend",
                        "48e83e23273aaf0a5900c6e4aaed93809791cc6e"
                    ]
                },
                {
                    "command": [
                        "destruct (in_int 0) as [h1 | h2].",
                        "VernacExtend",
                        "2afccf8d1161af22c6e8df07f015351693b262c4"
                    ]
                },
                {
                    "command": [
                        "destruct (ps_atan_exists_1 0 h1) as [v P].",
                        "VernacExtend",
                        "d7ae3fc3ecd75555d3f5576ef1dcd7fd7f8a4dce"
                    ]
                },
                {
                    "command": [
                        "apply (UL_sequence _ _ _ P).",
                        "VernacExtend",
                        "eb9057009102ce0e2a6e7ddd73f98b92003d1b78"
                    ]
                },
                {
                    "command": [
                        "apply (Un_cv_ext (fun n => 0)).",
                        "VernacExtend",
                        "73386b982d3c725f2cf6f596be20bce95622a82a"
                    ]
                },
                {
                    "command": [
                        "symmetry;apply sum_eq_R0.",
                        "VernacExtend",
                        "0d71a194f13c03e1c51e00f8a3d0efed0d529ef2"
                    ]
                },
                {
                    "command": [
                        "intros i _; unfold tg_alt, Ratan_seq; rewrite plus_comm; simpl.",
                        "VernacExtend",
                        "8b5440dd5c8e317423ea307d9e5e3fbf965bcc0a"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite !Rmult_0_l, Rmult_0_r; reflexivity.",
                        "VernacExtend",
                        "5e2e5123fd339e7bf60293fcb2d443a0ae41beca"
                    ]
                },
                {
                    "command": [
                        "intros eps ep; exists 0%nat; intros n _; unfold R_dist.",
                        "VernacExtend",
                        "118212f9182410e68774082f423c1b7fe07a67b0"
                    ]
                },
                {
                    "command": [
                        "rewrite Rminus_0_r, Rabs_pos_eq; auto with real.",
                        "VernacExtend",
                        "d7e765746c7b7264173ea44e314166accf235e3b"
                    ]
                },
                {
                    "command": [
                        "case h2; split; lra.",
                        "VernacExtend",
                        "c1222d5d5f25c453e8a3c413784c98bfd47a8108"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ps_atan_exists_1_opp",
            "line_nb": 745,
            "steps": [
                {
                    "command": [
                        "intros x h h'; destruct (ps_atan_exists_1 (-x) h) as [v Pv].",
                        "VernacExtend",
                        "536cb611b52e5d1379c42a47170ff344f1088fdf"
                    ]
                },
                {
                    "command": [
                        "destruct (ps_atan_exists_1 x h') as [u Pu]; simpl.",
                        "VernacExtend",
                        "b0b8efa12cccdcb578a694c4c3a402aa8fa0d007"
                    ]
                },
                {
                    "command": [
                        "assert (Pu' : Un_cv (fun N => (-1) * sum_f_R0 (tg_alt (Ratan_seq x)) N) (-1 * u)).",
                        "VernacExtend",
                        "490cf0695b3689562b7721a30e1056bbe09c48cc"
                    ]
                },
                {
                    "command": [
                        "apply CV_mult;[ | assumption].",
                        "VernacExtend",
                        "7f65904717bc65729979ce6f564e0453d1e58d1f"
                    ]
                },
                {
                    "command": [
                        "intros eps ep; exists 0%nat; intros; rewrite R_dist_eq; assumption.",
                        "VernacExtend",
                        "b075137f2efebb63e26a26a592ae218093a17eb5"
                    ]
                },
                {
                    "command": [
                        "assert (Pv' : Un_cv (fun N : nat => -1 * sum_f_R0 (tg_alt (Ratan_seq x)) N) v).",
                        "VernacExtend",
                        "966a0ad488d1147e4fa387f3c86709cfce35b212"
                    ]
                },
                {
                    "command": [
                        "apply Un_cv_ext with (2 := Pv); intros n; rewrite sum_Ratan_seq_opp; ring.",
                        "VernacExtend",
                        "e228f56aed06173af5292a9e091102a35abf0750"
                    ]
                },
                {
                    "command": [
                        "replace (-u) with (-1 * u) by ring.",
                        "VernacExtend",
                        "10c1c41c152b1766a0400804bc82553a349af183"
                    ]
                },
                {
                    "command": [
                        "apply UL_sequence with (1:=Pv') (2:= Pu').",
                        "VernacExtend",
                        "d78a63f685389735ebb3293872c6ec246a7e474f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ps_atan_opp",
            "line_nb": 756,
            "steps": [
                {
                    "command": [
                        "intros x; unfold ps_atan.",
                        "VernacExtend",
                        "d05b77557b6fcd6349dadce11584da43b1fb1362"
                    ]
                },
                {
                    "command": [
                        "destruct (in_int (- x)) as [inside | outside].",
                        "VernacExtend",
                        "2c8e5345bd8490356e0a023b0c0ed69f564047ad"
                    ]
                },
                {
                    "command": [
                        "destruct (in_int x) as [ins' | outs'].",
                        "VernacExtend",
                        "c3c8894b90576ed214599f8340ecaf8ff0979153"
                    ]
                },
                {
                    "command": [
                        "generalize (ps_atan_exists_1_opp x inside ins').",
                        "VernacExtend",
                        "c260974315d277ada75809d872a3e3ec689d183c"
                    ]
                },
                {
                    "command": [
                        "intros h; exact h.",
                        "VernacExtend",
                        "c90012e2d5dec45782f4e822b488b59c29a207c8"
                    ]
                },
                {
                    "command": [
                        "destruct inside; case outs'; split; lra.",
                        "VernacExtend",
                        "cb3af48fd08d1c6b367175233883470b021e970b"
                    ]
                },
                {
                    "command": [
                        "destruct (in_int x) as [ins' | outs'].",
                        "VernacExtend",
                        "c3c8894b90576ed214599f8340ecaf8ff0979153"
                    ]
                },
                {
                    "command": [
                        "destruct outside; case ins'; split; lra.",
                        "VernacExtend",
                        "f8f8ce3b87125f1004fa8abdedaeba8388075f83"
                    ]
                },
                {
                    "command": [
                        "apply atan_opp.",
                        "VernacExtend",
                        "c0946fd864299e6b74c5d73fdee2743d5074c9d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ps_atanSeq_continuity_pt_1",
            "line_nb": 767,
            "steps": [
                {
                    "command": [
                        "assert (Sublemma : forall (x:R) (N:nat), sum_f_R0 (tg_alt (Ratan_seq x)) N = x * (comp (fun x => sum_f_R0 (fun n => (fun i : nat => (-1) ^ i / INR (2 * i + 1)) n * x ^ n) N) (fun x => x ^ 2) x)).",
                        "VernacExtend",
                        "d671b9a2adffbd68e7f31261ab395c3bda956a1e"
                    ]
                },
                {
                    "command": [
                        "intros x N.",
                        "VernacExtend",
                        "8f6bb5e9f89650401c318ed5ec064551ee2496a3"
                    ]
                },
                {
                    "command": [
                        "induction N.",
                        "VernacExtend",
                        "014c91061e9f52f369bba44af3bfd9be499036f5"
                    ]
                },
                {
                    "command": [
                        "unfold tg_alt, Ratan_seq, comp ; simpl ; field.",
                        "VernacExtend",
                        "dcf4da5d22c3bd8120c16245e71255982187382d"
                    ]
                },
                {
                    "command": [
                        "simpl sum_f_R0 at 1.",
                        "VernacExtend",
                        "f02360dbb44637edabdff5eeca9faaf7b758c0d7"
                    ]
                },
                {
                    "command": [
                        "rewrite IHN.",
                        "VernacExtend",
                        "00aa034a2d57f9e663ce1238f2af406e45b52477"
                    ]
                },
                {
                    "command": [
                        "replace (comp (fun x => sum_f_R0 (fun n : nat => (-1) ^ n / INR (2 * n + 1) * x ^ n) (S N)) (fun x => x ^ 2)) with (comp (fun x => sum_f_R0 (fun n : nat => (-1) ^ n / INR (2 * n + 1) * x ^ n) N + (-1) ^ (S N) / INR (2 * (S N) + 1) * x ^ (S N)) (fun x => x ^ 2)).",
                        "VernacExtend",
                        "656e54a63a5e939bb85bf59ce4f5636fe2501428"
                    ]
                },
                {
                    "command": [
                        "unfold comp.",
                        "VernacExtend",
                        "b8c595984ddc3a4857a83b585333ec689de2b811"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_plus_distr_l.",
                        "VernacExtend",
                        "e243bcfd594d50273783e947b301871dc4efc70c"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_eq_compat_l.",
                        "VernacExtend",
                        "76e8923f15671bb36c0fea83fec68cfd51cb2557"
                    ]
                },
                {
                    "command": [
                        "unfold tg_alt, Ratan_seq.",
                        "VernacExtend",
                        "14407c367e2d58a9175d6ed011818f960c179fb9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "34da3c50cde53c179a4908b1329a459071245c05"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec x 0) ; intro Hyp.",
                        "VernacExtend",
                        "2491b2b0e554c53f0c65da1fa142870bae48b53d"
                    ]
                },
                {
                    "command": [
                        "rewrite Hyp ; rewrite pow_i.",
                        "VernacExtend",
                        "9f89202578ae7373a2a8df3d2cfe99a831d34163"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_0_l ; rewrite Rmult_0_l.",
                        "VernacExtend",
                        "893b07160b0ca9a38a2f8746aadce7f39f6dee10"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv ; rewrite Rmult_0_l ; rewrite Rmult_0_r ; reflexivity.",
                        "VernacExtend",
                        "2764afad493e4dda3ea005376b936bb1dcb868fb"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "replace (x * ((-1) ^ S N / INR (2 * S N + 1)) * (x ^ 2) ^ S N) with (x ^ (2 * S N + 1) * ((-1) ^ S N / INR (2 * S N + 1))).",
                        "VernacExtend",
                        "28b61b3c3c1af0ea5b6aa33e7b1a2a9cd768af28"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm ; unfold Rdiv at 1.",
                        "VernacExtend",
                        "f5d4baa79fb90e705fcafe10650c84e9838f8bd4"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc ; apply Rmult_eq_compat_l.",
                        "VernacExtend",
                        "e137f0649bb524db6ee354f5fba7a87e0babf344"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_not_eq ; intuition.",
                        "VernacExtend",
                        "2a866015e0838b26d3f5654cd54ee0107cd2ddec"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc.",
                        "VernacExtend",
                        "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
                    ]
                },
                {
                    "command": [
                        "replace (x * ((-1) ^ S N / INR (2 * S N + 1) * (x ^ 2) ^ S N)) with (((-1) ^ S N / INR (2 * S N + 1) * (x ^ 2) ^ S N) * x).",
                        "VernacExtend",
                        "83bc755de7ceb001926b31f451de142f01038164"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc.",
                        "VernacExtend",
                        "323caa1eefcb937c18a66a7144c1e29b2c1a3e40"
                    ]
                },
                {
                    "command": [
                        "replace ((x ^ 2) ^ S N * x) with (x ^ (2 * S N + 1)).",
                        "VernacExtend",
                        "9f6cb7ccfb88ba2ec4faad2cfd60bfcb7036f03a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm at 1 ; reflexivity.",
                        "VernacExtend",
                        "4621a98761187ba6e02ddc4caa522df4b5e783b2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- pow_mult.",
                        "VernacExtend",
                        "0cc1882459d0db153735c16ba69e5e207c303bd9"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : forall x n, x ^ n * x = x ^ (n+1)).",
                        "VernacExtend",
                        "04a8b5d28f299cb0c587455dd5ed00e6de152305"
                    ]
                },
                {
                    "command": [
                        "intros a n ; induction n.",
                        "VernacExtend",
                        "abf6a5265f2f9cacab8e34f44f63e0d8f6095899"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_O.",
                        "VernacExtend",
                        "917096df985d65f4e2dba38a6bd08f22c35a2789"
                    ]
                },
                {
                    "command": [
                        "simpl ; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "simpl ; rewrite Rmult_assoc ; rewrite IHn ; intuition.",
                        "VernacExtend",
                        "b492105bcb83a5a10a3e16fea7262bc5c50086a8"
                    ]
                },
                {
                    "command": [
                        "rewrite Temp ; reflexivity.",
                        "VernacExtend",
                        "10e7ef34e7d5595a2cc7ac69aac0beebda9e47a9"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm ; reflexivity.",
                        "VernacExtend",
                        "4dc614fae2a0fd9114af75fd72af7f949b96d4a5"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intros N x x_lb x_ub.",
                        "VernacExtend",
                        "e99a0f4a2091710c47f638a8d646833d8eb5dc45"
                    ]
                },
                {
                    "command": [
                        "intros eps eps_pos.",
                        "VernacExtend",
                        "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
                    ]
                },
                {
                    "command": [
                        "assert (continuity_id : continuity id).",
                        "VernacExtend",
                        "d2f098e46ab4a642b38ebc48a9009cb3b074812e"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous ; exact derivable_id.",
                        "VernacExtend",
                        "def8870c4887088ca7183565380a4db2707e37ce"
                    ]
                },
                {
                    "command": [
                        "assert (Temp := continuity_mult id (comp (fun x1 : R => sum_f_R0 (fun n : nat => (-1) ^ n / INR (2 * n + 1) * x1 ^ n) N) (fun x1 : R => x1 ^ 2)) continuity_id).",
                        "VernacExtend",
                        "73d63ccbb228247df08fbb064c1db9d85f6cab67"
                    ]
                },
                {
                    "command": [
                        "assert (Temp2 : continuity (comp (fun x1 : R => sum_f_R0 (fun n : nat => (-1) ^ n / INR (2 * n + 1) * x1 ^ n) N) (fun x1 : R => x1 ^ 2))).",
                        "VernacExtend",
                        "326337895c56ba03aaaccfcfeb05a47a7dcf02ab"
                    ]
                },
                {
                    "command": [
                        "apply continuity_comp.",
                        "VernacExtend",
                        "8bb15e6da25754c33eb2c6bd1991fb28bf1ee30a"
                    ]
                },
                {
                    "command": [
                        "reg.",
                        "VernacExtend",
                        "200773634894b8319f51d08aac98d6835b0db846"
                    ]
                },
                {
                    "command": [
                        "apply continuity_finite_sum.",
                        "VernacExtend",
                        "464f94a28a89c7a0dbd8d9b315b8c32c1d6e239a"
                    ]
                },
                {
                    "command": [
                        "elim (Temp Temp2 x eps eps_pos) ; clear Temp Temp2 ; intros alpha T ; destruct T as (alpha_pos, T).",
                        "VernacExtend",
                        "c764163c42a9e8d86afd6ab9f32747e0490ae0e9"
                    ]
                },
                {
                    "command": [
                        "exists alpha ; split.",
                        "VernacExtend",
                        "4cb693ec547c02367329bf0821b91d53077c3882"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intros x0 x0_cond.",
                        "VernacExtend",
                        "c88db78a68e826c93a215b4425360cf9d326a1e0"
                    ]
                },
                {
                    "command": [
                        "rewrite Sublemma ; rewrite Sublemma.",
                        "VernacExtend",
                        "203b1e50789cd869a8efec53a7672b1ff6966c83"
                    ]
                },
                {
                    "command": [
                        "apply T.",
                        "VernacExtend",
                        "58f1cfdffc07643a959fa337d4262e5857b39e7d"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pow_lt_1_compat",
            "line_nb": 822,
            "steps": [
                {
                    "command": [
                        "intros x n hx; induction 1; simpl.",
                        "VernacExtend",
                        "29f07428c2844bf544bf09fe0d858dcf1166edbb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; tauto.",
                        "VernacExtend",
                        "ea71ee3cfa392951ec362763dfbb8bbae3b9ab44"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos; tauto.",
                        "VernacExtend",
                        "418ad925b206c764c6bfe2237c8c09ba23e1cfd4"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_1_r 1); apply Rmult_le_0_lt_compat; intuition.",
                        "VernacExtend",
                        "23e7b5067251c00f4e3ed303f27fe6fe8746a881"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_seq_Rabs",
            "line_nb": 829,
            "steps": [
                {
                    "command": [
                        "intros x n; unfold Datan_seq; rewrite !pow_mult, pow2_abs; reflexivity.",
                        "VernacExtend",
                        "d76a97a9463a61e9eaca6109564eac966d91f658"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_seq_pos",
            "line_nb": 832,
            "steps": [
                {
                    "command": [
                        "intros x n x_lb ; unfold Datan_seq ; induction n.",
                        "VernacExtend",
                        "01879232ba843a24bf5138aa337046c5729de277"
                    ]
                },
                {
                    "command": [
                        "simpl ; intuition.",
                        "VernacExtend",
                        "2a8f84ed3abedbe9d9fbb80aa4215114cbdbe500"
                    ]
                },
                {
                    "command": [
                        "replace (x ^ (2 * S n)) with ((x ^ 2) * (x ^ (2 * n))).",
                        "VernacExtend",
                        "da896ebade3112746605524a6aeb212c57a5c6a9"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_gt_0_compat.",
                        "VernacExtend",
                        "d033236f2dabdc6d48d6d6aaa1c3030ba9186536"
                    ]
                },
                {
                    "command": [
                        "replace (x^2) with (x*x) by field ; apply Rmult_gt_0_compat ; assumption.",
                        "VernacExtend",
                        "7abc44c0702945e2aad696a73b93cbc165aac23f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (2 * S n)%nat with (S (S (2 * n))) by intuition.",
                        "VernacExtend",
                        "3f7c896f6f567da2c5dc4f8b4e54cb377ae12603"
                    ]
                },
                {
                    "command": [
                        "simpl ; field.",
                        "VernacExtend",
                        "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_sum_eq",
            "line_nb": 842,
            "steps": [
                {
                    "command": [
                        "intros x n.",
                        "VernacExtend",
                        "d1898cd84886a23c5b1d52224620661237036e2c"
                    ]
                },
                {
                    "command": [
                        "assert (dif : - x ^ 2 <> 1).",
                        "VernacExtend",
                        "7933db8b72b45712316c08cec05748232952f4c6"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_eq; apply Rle_lt_trans with 0;[ | apply Rlt_0_1].",
                        "VernacExtend",
                        "24f159a8e268a74eae8471108addc59acd1a54e3"
                    ]
                },
                {
                    "command": [
                        "assert (t := pow2_ge_0 x); lra.",
                        "VernacExtend",
                        "0c92929d064f45bb3739629152d4d88f17e61878"
                    ]
                },
                {
                    "command": [
                        "replace (1 + x ^ 2) with (1 - - (x ^ 2)) by ring; rewrite <- (tech3 _ n dif).",
                        "VernacExtend",
                        "f2a24fbba38b7a61c0068fc2ca6bf1e1ef7c1ab1"
                    ]
                },
                {
                    "command": [
                        "apply sum_eq; unfold tg_alt, Datan_seq; intros i _.",
                        "VernacExtend",
                        "ec7afc0dd9a0f3d8a9edb5da65684eb1e1a16b54"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_mult, <- Rpow_mult_distr.",
                        "VernacExtend",
                        "911dd00d70ba73ae84be89b767b47f3bbdf58d02"
                    ]
                },
                {
                    "command": [
                        "f_equal.",
                        "VernacExtend",
                        "dfce814d1efcef60f8330516ad88155a3a5ec317"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_seq_increasing",
            "line_nb": 853,
            "steps": [
                {
                    "command": [
                        "intros x y n n_lb x_encad ; assert (x_pos : x >= 0) by intuition.",
                        "VernacExtend",
                        "25341d0888fa2f625d7369b89fa63e4b27793f12"
                    ]
                },
                {
                    "command": [
                        "assert (y_pos : y > 0).",
                        "VernacExtend",
                        "2054e0aa94a573c08addb8f36fd573141b0f87e2"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=x) ; intuition.",
                        "VernacExtend",
                        "89d4e55c30787f6ae070eb38ad3b73f2ad6a0183"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "apply False_ind ; intuition.",
                        "VernacExtend",
                        "b4f4bad3ba8bf393e157f17e70333b596fe809dc"
                    ]
                },
                {
                    "command": [
                        "clear -x_encad x_pos y_pos ; induction n ; unfold Datan_seq.",
                        "VernacExtend",
                        "cd15f6e54c276387b3add3e98ab7c058a78f0861"
                    ]
                },
                {
                    "command": [
                        "case x_pos ; clear x_pos ; intro x_pos.",
                        "VernacExtend",
                        "86a6c6aa974dd3fcb70e30b0118026154490bb80"
                    ]
                },
                {
                    "command": [
                        "simpl ; apply Rmult_gt_0_lt_compat ; intuition.",
                        "VernacExtend",
                        "e6a18caf4b01ef3178fb7babd029e9e2b2de2a9e"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "rewrite x_pos ; rewrite pow_i.",
                        "VernacExtend",
                        "94d59b283f139d3a5ca21c10fed099d754c23927"
                    ]
                },
                {
                    "command": [
                        "replace (y ^ (2*1)) with (y*y).",
                        "VernacExtend",
                        "141c7d63e9e19cc7d06d8b6b49f6d74247c7fc56"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_gt_0_compat ; assumption.",
                        "VernacExtend",
                        "52eaaa75f9b32ef29f209cf8f624689b487afed6"
                    ]
                },
                {
                    "command": [
                        "simpl ; field.",
                        "VernacExtend",
                        "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assert (Hrew : forall a, a^(2 * S (S n)) = (a ^ 2) * (a ^ (2 * S n))).",
                        "VernacExtend",
                        "c88e8134e28859a419f0a2820d8a8e4971acf72c"
                    ]
                },
                {
                    "command": [
                        "clear ; intro a ; replace (2 * S (S n))%nat with (S (S (2 * S n)))%nat by intuition.",
                        "VernacExtend",
                        "4bc9d2eee6a9fad933decb9ea457180a79327fc9"
                    ]
                },
                {
                    "command": [
                        "simpl ; field.",
                        "VernacExtend",
                        "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
                    ]
                },
                {
                    "command": [
                        "case x_pos ; clear x_pos ; intro x_pos.",
                        "VernacExtend",
                        "86a6c6aa974dd3fcb70e30b0118026154490bb80"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrew ; rewrite Hrew.",
                        "VernacExtend",
                        "59170e85f95cc28417b8a41bbb59d666ea5328aa"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_gt_0_lt_compat ; intuition.",
                        "VernacExtend",
                        "8601690ed821169a21896ba91fd1877a43f72cf0"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_gt_0_lt_compat ; intuition ; lra.",
                        "VernacExtend",
                        "18dde5a52e6f93021af9e3b96dedecdfc8a6bfe8"
                    ]
                },
                {
                    "command": [
                        "rewrite x_pos.",
                        "VernacExtend",
                        "9643c2b6bd0e780555ce231c98fcd3cfedec8ded"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_i ; intuition.",
                        "VernacExtend",
                        "97d8968779a246b6065d7443e0259d10d7dc2f2f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_seq_decreasing",
            "line_nb": 878,
            "steps": [
                {
                    "command": [
                        "intros x x_lb x_ub n.",
                        "VernacExtend",
                        "109558f9f6447d5b13773297878066142fadacda"
                    ]
                },
                {
                    "command": [
                        "unfold Datan_seq.",
                        "VernacExtend",
                        "eafb83508425acd6a062fed5ead915943bb35ea7"
                    ]
                },
                {
                    "command": [
                        "replace (2 * S n)%nat with (2 + 2 * n)%nat by ring.",
                        "VernacExtend",
                        "6986ed3973513617489f61b8a7866c1beae683aa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_1_l (x ^ (2 * n))).",
                        "VernacExtend",
                        "232f5a389eea396da7eb500e550cbcbcbc87d3c3"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_add.",
                        "VernacExtend",
                        "e7ffb4294c31ded66f1a5f321399a9a5b2326cb2"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r.",
                        "VernacExtend",
                        "6c4c5a82dab802842919dd673f1978a3cb8cff73"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_mult; apply pow_le, pow2_ge_0.",
                        "VernacExtend",
                        "c51e9ebdb4c8bfb33e8d24de3158a355468d7b95"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le; rewrite <- pow2_abs.",
                        "VernacExtend",
                        "cad6c64b2dbae0a992c302d19a9f007a2f2bf399"
                    ]
                },
                {
                    "command": [
                        "assert (intabs : 0 <= Rabs x < 1).",
                        "VernacExtend",
                        "031fed135b3ae8843b976c82e34d61576ec2aac4"
                    ]
                },
                {
                    "command": [
                        "split;[apply Rabs_pos | apply Rabs_def1]; tauto.",
                        "VernacExtend",
                        "0c000481b61d5a57b5775a2e5dc1898622afe796"
                    ]
                },
                {
                    "command": [
                        "apply (pow_lt_1_compat (Rabs x) 2) in intabs.",
                        "VernacExtend",
                        "7dfd8e4bf20eb29a0f4b3d2900ea96698706d39e"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_seq_CV_0",
            "line_nb": 893,
            "steps": [
                {
                    "command": [
                        "intros x x_lb x_ub eps eps_pos.",
                        "VernacExtend",
                        "681355a99c50d2c4d31cb3f6259b806c926f99f1"
                    ]
                },
                {
                    "command": [
                        "assert (x_ub2 : Rabs (x^2) < 1).",
                        "VernacExtend",
                        "444c3fec44200a6600ab5b59c6d0ccde741db773"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_pos_eq;[ | apply pow2_ge_0].",
                        "VernacExtend",
                        "98592d4bb216d681f3933f78bcddb792fc434d7d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- pow2_abs.",
                        "VernacExtend",
                        "9082fe7fe884f9650b908fa21cf44a5a6ef54c37"
                    ]
                },
                {
                    "command": [
                        "assert (H: 0 <= Rabs x < 1) by (split;[apply Rabs_pos | apply Rabs_def1; auto]).",
                        "VernacExtend",
                        "8aa0a53777562cdc32365d04a97cabe0e422f5ef"
                    ]
                },
                {
                    "command": [
                        "apply (pow_lt_1_compat _ 2) in H;[tauto | omega].",
                        "VernacExtend",
                        "ea5fce1d61c0ec13b716b506639b14f8970bb038"
                    ]
                },
                {
                    "command": [
                        "elim (pow_lt_1_zero (x^2) x_ub2 eps eps_pos) ; intros N HN ; exists N ; intros n Hn.",
                        "VernacExtend",
                        "33fc528070f31149b2bd0eb681722354dcc968f4"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist, Datan_seq.",
                        "VernacExtend",
                        "e788ec72f33da60023132809011f6578d7d0f9a5"
                    ]
                },
                {
                    "command": [
                        "replace (x ^ (2 * n) - 0) with ((x ^ 2) ^ n).",
                        "VernacExtend",
                        "c86bef88bfd05f1eda01487640d762597708e628"
                    ]
                },
                {
                    "command": [
                        "apply HN ; assumption.",
                        "VernacExtend",
                        "c293294a14cf1353857e698622785b61708ae915"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_mult ; field.",
                        "VernacExtend",
                        "03d0f6cf03798bd33e660ba62dc8dfb4d0fbbff4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_lim",
            "line_nb": 906,
            "steps": [
                {
                    "command": [
                        "intros x x_lb x_ub eps eps_pos.",
                        "VernacExtend",
                        "681355a99c50d2c4d31cb3f6259b806c926f99f1"
                    ]
                },
                {
                    "command": [
                        "assert (Tool0 : 0 <= x ^ 2) by apply pow2_ge_0.",
                        "VernacExtend",
                        "c40d832a2865da27e33bfa5d525df41299dd275a"
                    ]
                },
                {
                    "command": [
                        "assert (Tool1 : 0 < (1 + x ^ 2)).",
                        "VernacExtend",
                        "987ae1af1ca56ab1ec300abf077abf0da51e580f"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rplus_lt_le_0_compat ; intuition].",
                        "VernacExtend",
                        "19424c956fd4fc48e1c0f889c23462d5ab9314cb"
                    ]
                },
                {
                    "command": [
                        "assert (Tool2 : / (1 + x ^ 2) > 0).",
                        "VernacExtend",
                        "40ff0c0ccb239771a9431507977056384fd06e75"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat ; tauto.",
                        "VernacExtend",
                        "96b2f239896f4e1e0a4ca0cf26977307729330da"
                    ]
                },
                {
                    "command": [
                        "assert (x_ub2' : 0<= Rabs (x^2) < 1).",
                        "VernacExtend",
                        "2c2a6ec3417b80886de927123f2008b314928363"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_pos_eq, <- pow2_abs;[ | apply pow2_ge_0].",
                        "VernacExtend",
                        "1249049e21217169bbe29241c365198a628d556c"
                    ]
                },
                {
                    "command": [
                        "apply pow_lt_1_compat;[split;[apply Rabs_pos | ] | omega].",
                        "VernacExtend",
                        "e917bd9a868adcb1cc2caae23d8915977468fb79"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def1; assumption.",
                        "VernacExtend",
                        "2d422d076abb68a2d95002939ccec8f05916dccd"
                    ]
                },
                {
                    "command": [
                        "assert (x_ub2 : Rabs (x^2) < 1) by tauto.",
                        "VernacExtend",
                        "744741ebf97bb39db1b4f3e3548f79fad217081c"
                    ]
                },
                {
                    "command": [
                        "assert (eps'_pos : ((1+x^2)*eps) > 0).",
                        "VernacExtend",
                        "ceccb64765842531fe4772b1e0e05904ed45ecfc"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_gt_0_compat ; assumption.",
                        "VernacExtend",
                        "52eaaa75f9b32ef29f209cf8f624689b487afed6"
                    ]
                },
                {
                    "command": [
                        "elim (pow_lt_1_zero _ x_ub2 _ eps'_pos) ; intros N HN ; exists N.",
                        "VernacExtend",
                        "913f9602914e35c8b4425542a6d8843a054695f6"
                    ]
                },
                {
                    "command": [
                        "intros n Hn.",
                        "VernacExtend",
                        "4a15d287eb245c84eabfb58cba2e377ac025029a"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : - x^2 <> 1).",
                        "VernacExtend",
                        "f9f6aa270f8ea7376e9ab016a57f589f15f5b3e2"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_not_eq; apply Rle_lt_trans with (2 := Rlt_0_1).",
                        "VernacExtend",
                        "c09451357c021ec4382075b6fa4a267c01b6e80e"
                    ]
                },
                {
                    "command": [
                        "assert (t := pow2_ge_0 x); lra.",
                        "VernacExtend",
                        "0c92929d064f45bb3739629152d4d88f17e61878"
                    ]
                },
                {
                    "command": [
                        "rewrite Datan_sum_eq.",
                        "VernacExtend",
                        "43e58b75cc3786c1573db5cbe82e465a1b926a10"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist.",
                        "VernacExtend",
                        "9d14879a55d02ad54565968e31b64da7aeb66d97"
                    ]
                },
                {
                    "command": [
                        "assert (tool : forall a b, a / b - /b = (-1 + a) /b).",
                        "VernacExtend",
                        "09ba633c1dbabf52e3ef187f8d7fe381db93a1c7"
                    ]
                },
                {
                    "command": [
                        "intros a b; rewrite <- (Rmult_1_l (/b)); unfold Rdiv, Rminus.",
                        "VernacExtend",
                        "f462b6240a0474c3737a2a884ce8aede34a3e29b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_mult_distr_l_reverse, Rmult_plus_distr_r, Rplus_comm.",
                        "VernacExtend",
                        "e8983dd1d7e0b38a2efd46bf25b52e3850cda62a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "set (u := 1 + x ^ 2); rewrite tool; unfold Rminus; rewrite <- Rplus_assoc.",
                        "VernacExtend",
                        "72f19bda1d330f0b6819d56a11fa1e20549203c9"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv, u.",
                        "VernacExtend",
                        "13210c2aefa985768797c49a8e29d06ca20cfe23"
                    ]
                },
                {
                    "command": [
                        "change (-1) with (-(1)).",
                        "VernacExtend",
                        "1f60c1a6cdb67b8d172aedacd166faedbafbdc55"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_opp_l, Rplus_0_l, Ropp_mult_distr_l_reverse, Rabs_Ropp.",
                        "VernacExtend",
                        "24dcb0ccc22b2aaa0ebeee824f361fac6aa6e9fa"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult; clear tool u.",
                        "VernacExtend",
                        "ff809148c99ebde86227bfaf24051761a3b6d5e0"
                    ]
                },
                {
                    "command": [
                        "assert (tool : forall k, Rabs ((-x ^ 2) ^ k) = Rabs ((x ^ 2) ^ k)).",
                        "VernacExtend",
                        "59fce71a8abf3310ed173a061329eb101d0d72ae"
                    ]
                },
                {
                    "command": [
                        "clear -Tool0; induction k;[simpl; rewrite Rabs_R1;tauto | ].",
                        "VernacExtend",
                        "a2e7394208aeb2d37700abf643a983a705e95079"
                    ]
                },
                {
                    "command": [
                        "rewrite <- !(tech_pow_Rmult _ k), !Rabs_mult, Rabs_Ropp, IHk, Rabs_pos_eq.",
                        "VernacExtend",
                        "215e7a7741ccb2e86acc2e4b060ba670e03d0d45"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "exact Tool0.",
                        "VernacExtend",
                        "57c07607ea44ef28802820223297c04e9cbbe10f"
                    ]
                },
                {
                    "command": [
                        "rewrite tool, (Rabs_pos_eq (/ _)); clear tool;[ | apply Rlt_le; assumption].",
                        "VernacExtend",
                        "0307401c4f7e5f183c8419375079309c1ecfc60c"
                    ]
                },
                {
                    "command": [
                        "assert (tool : forall a b c, 0 < b -> a < b * c -> a * / b < c).",
                        "VernacExtend",
                        "82f772f60b27ba2c3b2d2de1b112833d2a623c19"
                    ]
                },
                {
                    "command": [
                        "intros a b c bp h; replace c with (b * c * /b).",
                        "VernacExtend",
                        "709a5387d462de32aab5e3cc0dd497b5d4bf7404"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_r.",
                        "VernacExtend",
                        "e041593c57ec6470673cc705c01d215d230e0676"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "field; apply Rgt_not_eq; exact bp.",
                        "VernacExtend",
                        "52b20e52f5e3bbdf50a3dd91dca70b1211cf0dce"
                    ]
                },
                {
                    "command": [
                        "apply tool;[exact Tool1 | ].",
                        "VernacExtend",
                        "8d9051175ab57fcc44ca9a96d5e120903a216a49"
                    ]
                },
                {
                    "command": [
                        "apply HN; omega.",
                        "VernacExtend",
                        "540f89d3317daf4c86d01e6422c6118e36d2f7d0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_CVU_prelim",
            "line_nb": 951,
            "steps": [
                {
                    "command": [
                        "intros c r ub_ub eps eps_pos.",
                        "VernacExtend",
                        "51c6fdc4e8b58497b80065b3bde244b93b097c3b"
                    ]
                },
                {
                    "command": [
                        "apply (Alt_CVU (fun x n => Datan_seq n x) (fun x => /(1 + x ^ 2)) (Datan_seq (Rabs c + r)) c r).",
                        "VernacExtend",
                        "5fa9da79e7bf1cd9b328adddc2b6abdc4dbf9b2d"
                    ]
                },
                {
                    "command": [
                        "intros x inb; apply Datan_seq_decreasing; try (apply Boule_lt in inb; apply Rabs_def2 in inb; destruct inb; lra).",
                        "VernacExtend",
                        "50f6e08fc794c13856021c2778563f149f38e9bd"
                    ]
                },
                {
                    "command": [
                        "intros x inb; apply Datan_seq_CV_0; try (apply Boule_lt in inb; apply Rabs_def2 in inb; destruct inb; lra).",
                        "VernacExtend",
                        "999b003d27ac95a6b24fe80af50e9fbb353b1cdf"
                    ]
                },
                {
                    "command": [
                        "intros x inb; apply (Datan_lim x); try (apply Boule_lt in inb; apply Rabs_def2 in inb; destruct inb; lra).",
                        "VernacExtend",
                        "e0faeceda772bd8db9a2cd09f7b62152e3540169"
                    ]
                },
                {
                    "command": [
                        "intros x [ | n] inb.",
                        "VernacExtend",
                        "5b17cf41ac99c8c91c4666185b1d437960a125ac"
                    ]
                },
                {
                    "command": [
                        "solve[unfold Datan_seq; apply Rle_refl].",
                        "VernacExtend",
                        "900de41becbc33fa88f97e2916110a9ef2b9f812"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Datan_seq_Rabs x); apply Rlt_le, Datan_seq_increasing.",
                        "VernacExtend",
                        "8d5c62ea138933d059f206de1b0bd52daa571920"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "apply Boule_lt in inb; intuition.",
                        "VernacExtend",
                        "992f7be7142d3c313144eba34f7f7a926b16ff06"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rabs_pos].",
                        "VernacExtend",
                        "379c43f595c71981debb46f5c356fc75a6ec1727"
                    ]
                },
                {
                    "command": [
                        "apply Datan_seq_CV_0.",
                        "VernacExtend",
                        "7762f7d8455c2f66fb9d6dce0546e7e194b712c6"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with 0;[lra | ].",
                        "VernacExtend",
                        "0aebc32e125bf1eddfaed0daacde02f841cfe360"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat.",
                        "VernacExtend",
                        "f52234f44384644fc6f21adef182d5c4067417f5"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rabs_pos].",
                        "VernacExtend",
                        "379c43f595c71981debb46f5c356fc75a6ec1727"
                    ]
                },
                {
                    "command": [
                        "destruct r; assumption.",
                        "VernacExtend",
                        "b49cbe5cb69b2813eb61628ea10c1b9c0f916a57"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_is_datan",
            "line_nb": 971,
            "steps": [
                {
                    "command": [
                        "assert (Tool : forall N, (-1) ^ (S (2 * N)) = - 1).",
                        "VernacExtend",
                        "c39b1c6f407fa942afac8d21155a588c9b257cf8"
                    ]
                },
                {
                    "command": [
                        "intro n ; induction n.",
                        "VernacExtend",
                        "d0fb4cd4fcd668e74be080a0a5c781ae93469446"
                    ]
                },
                {
                    "command": [
                        "simpl ; field.",
                        "VernacExtend",
                        "db84c8cac4d419667c5dc078fea83a0aa7cc0138"
                    ]
                },
                {
                    "command": [
                        "replace ((-1) ^ S (2 * S n)) with ((-1) ^ 2 * (-1) ^ S (2*n)).",
                        "VernacExtend",
                        "868fe5fa7024fd08b14611d0cdfaca0c8c6e5282"
                    ]
                },
                {
                    "command": [
                        "rewrite IHn ; field.",
                        "VernacExtend",
                        "1e9817728c65667003b0157c17a988c4ac4756e9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- pow_add.",
                        "VernacExtend",
                        "05b198205d930fe5ac438778819013a0655e910d"
                    ]
                },
                {
                    "command": [
                        "replace (2 + S (2 * n))%nat with (S (2 * S n))%nat.",
                        "VernacExtend",
                        "1cd89f1a89ea9cd7bbc5ee903d04592de733a5d9"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "intros N x x_lb x_ub.",
                        "VernacExtend",
                        "e99a0f4a2091710c47f638a8d646833d8eb5dc45"
                    ]
                },
                {
                    "command": [
                        "induction N.",
                        "VernacExtend",
                        "014c91061e9f52f369bba44af3bfd9be499036f5"
                    ]
                },
                {
                    "command": [
                        "unfold Datan_seq, Ratan_seq, tg_alt ; simpl.",
                        "VernacExtend",
                        "1d8092e05fd7bbca596951f57d3743c76dbfede7"
                    ]
                },
                {
                    "command": [
                        "intros eps eps_pos.",
                        "VernacExtend",
                        "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
                    ]
                },
                {
                    "command": [
                        "elim (derivable_pt_lim_id x eps eps_pos) ; intros delta Hdelta ; exists delta.",
                        "VernacExtend",
                        "fd08fc02012f5fdfd2a27e52ad8044206600c585"
                    ]
                },
                {
                    "command": [
                        "intros h hneq h_b.",
                        "VernacExtend",
                        "425af7016712ac35d80430ef302bdb739a6add88"
                    ]
                },
                {
                    "command": [
                        "replace (1 * ((x + h) * 1 / 1) - 1 * (x * 1 / 1)) with (id (x + h) - id x).",
                        "VernacExtend",
                        "67d61d69eefb02687a019dc50958ceb184687700"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "apply Hdelta ; assumption.",
                        "VernacExtend",
                        "e3aae55aa164ef893ffa198c56f4e91fa228d153"
                    ]
                },
                {
                    "command": [
                        "unfold id ; field ; assumption.",
                        "VernacExtend",
                        "aa679d56d21ce8047ca295ef395f440d9393f739"
                    ]
                },
                {
                    "command": [
                        "intros eps eps_pos.",
                        "VernacExtend",
                        "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
                    ]
                },
                {
                    "command": [
                        "assert (eps_3_pos : (eps/3) > 0) by lra.",
                        "VernacExtend",
                        "bf913f42629913c9689f2f1d712d282b56ad6018"
                    ]
                },
                {
                    "command": [
                        "elim (IHN (eps/3) eps_3_pos) ; intros delta1 Hdelta1.",
                        "VernacExtend",
                        "7df1618a03dfada73bf2ff60194f482f46aa8ba2"
                    ]
                },
                {
                    "command": [
                        "assert (Main : derivable_pt_lim (fun x : R =>tg_alt (Ratan_seq x) (S N)) x ((tg_alt (Datan_seq x)) (S N))).",
                        "VernacExtend",
                        "5b7bca318bb264c68f939a8764a5a04a90ce313d"
                    ]
                },
                {
                    "command": [
                        "clear -Tool ; intros eps' eps'_pos.",
                        "VernacExtend",
                        "80f2ccbdfe3d9b4340803b1fb77546c1e04c2249"
                    ]
                },
                {
                    "command": [
                        "elim (derivable_pt_lim_pow x (2 * (S N) + 1) eps' eps'_pos) ; intros delta Hdelta ; exists delta.",
                        "VernacExtend",
                        "79f8c5c20f7d934636460fd39f9855f5c1114b89"
                    ]
                },
                {
                    "command": [
                        "intros h h_neq h_b ; unfold tg_alt, Ratan_seq, Datan_seq.",
                        "VernacExtend",
                        "76bb38cc9a346e6c34fd954c3ed83ec1b77693b3"
                    ]
                },
                {
                    "command": [
                        "replace (((-1) ^ S N * ((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1)) - (-1) ^ S N * (x ^ (2 * S N + 1) / INR (2 * S N + 1))) / h - (-1) ^ S N * x ^ (2 * S N)) with (((-1)^(S N)) * ((((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1)) - (x ^ (2 * S N + 1) / INR (2 * S N + 1))) / h - x ^ (2 * S N))).",
                        "VernacExtend",
                        "50988d8355567e6f42e9e8a8935702cb018e0b7d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult ; rewrite pow_1_abs ; rewrite Rmult_1_l.",
                        "VernacExtend",
                        "725dd2d4e359505307b5e3b7e3fd7507d697882c"
                    ]
                },
                {
                    "command": [
                        "replace (((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1) - x ^ (2 * S N + 1) / INR (2 * S N + 1)) / h - x ^ (2 * S N)) with ((/INR (2* S N + 1)) * (((x + h) ^ (2 * S N + 1) - x ^ (2 * S N + 1)) / h - INR (2 * S N + 1) * x ^ pred (2 * S N + 1))).",
                        "VernacExtend",
                        "ff4e03de9453759acb027e044e8893097b024818"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult.",
                        "VernacExtend",
                        "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec (((x + h) ^ (2 * S N + 1) - x ^ (2 * S N + 1)) / h - INR (2 * S N + 1) * x ^ pred (2 * S N + 1)) 0) ; intro Heq.",
                        "VernacExtend",
                        "6bf765433c7f00939f6b841400a9c50a7f63abbe"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq ; rewrite Rabs_R0 ; rewrite Rmult_0_r ; assumption.",
                        "VernacExtend",
                        "20c381b5e98c54ea43f771abd22b98a1c0a347b2"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (r2:=Rabs (((x + h) ^ (2 * S N + 1) - x ^ (2 * S N + 1)) / h - INR (2 * S N + 1) * x ^ pred (2 * S N + 1))).",
                        "VernacExtend",
                        "d5f99ecee5b8818e7a38f6271f0174761d386d35"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_1_l ; apply Rmult_lt_compat_r.",
                        "VernacExtend",
                        "c68f22b0b00e0cccfd65b5307bfd897e6fbb608f"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt ; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right.",
                        "VernacExtend",
                        "9b60731d6b608338747f09fec19f24d12baad022"
                    ]
                },
                {
                    "command": [
                        "replace 1 with (/1) by field.",
                        "VernacExtend",
                        "ca76f2baa181e0ad5977b67d5be13de333fdf591"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_1_lt_contravar ; intuition.",
                        "VernacExtend",
                        "bd24f361f57b8fb6159e941ff7de9f93ff5c146e"
                    ]
                },
                {
                    "command": [
                        "apply Rgt_ge ; replace (INR (2 * S N + 1)) with (INR (2*S N) + 1) ; [apply RiemannInt.RinvN_pos | ].",
                        "VernacExtend",
                        "156282d3b51f650cea7cbd6bbe417ebfb9dde61e"
                    ]
                },
                {
                    "command": [
                        "replace (2 * S N + 1)%nat with (S (2 * S N))%nat by intuition ; rewrite S_INR ; reflexivity.",
                        "VernacExtend",
                        "6b47f3f4cf9b3e853bd686db02ae39479e064dec"
                    ]
                },
                {
                    "command": [
                        "apply Hdelta ; assumption.",
                        "VernacExtend",
                        "e3aae55aa164ef893ffa198c56f4e91fa228d153"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_minus_distr_l.",
                        "VernacExtend",
                        "7222a49d2309983cf6476a1131eec66c4836f9f6"
                    ]
                },
                {
                    "command": [
                        "replace (/ INR (2 * S N + 1) * (INR (2 * S N + 1) * x ^ pred (2 * S N + 1))) with (x ^ (2 * S N)).",
                        "VernacExtend",
                        "51154a798e2d8c18c5398a88ba52c5bf654c7c4d"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus ; rewrite Rplus_comm.",
                        "VernacExtend",
                        "7cfa88b8362606dcb25e723a22e841e0dfd0fe63"
                    ]
                },
                {
                    "command": [
                        "replace (((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1) + - (x ^ (2 * S N + 1) / INR (2 * S N + 1))) / h + - x ^ (2 * S N)) with (- x ^ (2 * S N) + (((x + h) ^ (2 * S N + 1) / INR (2 * S N + 1) + - (x ^ (2 * S N + 1) / INR (2 * S N + 1))) / h)) by intuition.",
                        "VernacExtend",
                        "2d52ace2e6db97bc9f1b5e207e92ad6ee420c831"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_eq_compat_l.",
                        "VernacExtend",
                        "76e8923f15671bb36c0fea83fec68cfd51cb2557"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "split ; [apply Rgt_not_eq|] ; intuition.",
                        "VernacExtend",
                        "26741263ea6da81f3d74be72d5d767696bb67b9c"
                    ]
                },
                {
                    "command": [
                        "clear ; replace (pred (2 * S N + 1)) with (2 * S N)%nat by intuition.",
                        "VernacExtend",
                        "f410d640c285893999e04a888532249d2b1c17b4"
                    ]
                },
                {
                    "command": [
                        "field ; apply Rgt_not_eq ; intuition.",
                        "VernacExtend",
                        "29892d48d85d46dfdb6de1477b7fbab39105c33e"
                    ]
                },
                {
                    "command": [
                        "field ; split ; [apply Rgt_not_eq |] ; intuition.",
                        "VernacExtend",
                        "bcedbd06f9ff09065737ce757d7768a39fb7e197"
                    ]
                },
                {
                    "command": [
                        "elim (Main (eps/3) eps_3_pos) ; intros delta2 Hdelta2.",
                        "VernacExtend",
                        "ff2d4af65a4bf6ca6d3891587556bef6ce683934"
                    ]
                },
                {
                    "command": [
                        "destruct delta1 as (delta1, delta1_pos) ; destruct delta2 as (delta2, delta2_pos).",
                        "VernacExtend",
                        "f3d161515551bc7dcc42411e6f3282bd43d1421f"
                    ]
                },
                {
                    "command": [
                        "pose (mydelta := Rmin delta1 delta2).",
                        "VernacExtend",
                        "9c753c13b6a613b7ad01fbb36a8314ec9ff08d35"
                    ]
                },
                {
                    "command": [
                        "assert (mydelta_pos : mydelta > 0).",
                        "VernacExtend",
                        "02ac4901e79c72c65c328efd1c4b2380a680afba"
                    ]
                },
                {
                    "command": [
                        "unfold mydelta ; rewrite Rmin_Rgt ; split ; assumption.",
                        "VernacExtend",
                        "5b0e016851f321656949ce523428a999054a6414"
                    ]
                },
                {
                    "command": [
                        "pose (delta := mkposreal mydelta mydelta_pos) ; exists delta ; intros h h_neq h_b.",
                        "VernacExtend",
                        "9399e8cc8b6b825b4dee45752231a294e0be7b5b"
                    ]
                },
                {
                    "command": [
                        "clear Main IHN.",
                        "VernacExtend",
                        "018ad2eec26f6bc6c914b56690fa6bb305429a31"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus at 1.",
                        "VernacExtend",
                        "7fe93a6371adce83f27b0bbfed85c9e3f7c08c59"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=eps/3 + eps / 3).",
                        "VernacExtend",
                        "de3f569b9ede09211c12957ff9d9adf0027fbc35"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : (sum_f_R0 (tg_alt (Ratan_seq (x + h))) (S N) - sum_f_R0 (tg_alt (Ratan_seq x)) (S N)) / h + - sum_f_R0 (tg_alt (Datan_seq x)) (S N) = ((sum_f_R0 (tg_alt (Ratan_seq (x + h))) N - sum_f_R0 (tg_alt (Ratan_seq x)) N) / h) + (- sum_f_R0 (tg_alt (Datan_seq x)) N) + ((tg_alt (Ratan_seq (x + h)) (S N) - tg_alt (Ratan_seq x) (S N)) / h - tg_alt (Datan_seq x) (S N))).",
                        "VernacExtend",
                        "0298ece9cb74822bafb09e1b6e4e1e016fe37e3b"
                    ]
                },
                {
                    "command": [
                        "simpl ; field ; intuition.",
                        "VernacExtend",
                        "587ad7187f91910e8747a76e75b83fc8627bf781"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (r2:= Rabs ((sum_f_R0 (tg_alt (Ratan_seq (x + h))) N - sum_f_R0 (tg_alt (Ratan_seq x)) N) / h + - sum_f_R0 (tg_alt (Datan_seq x)) N) + Rabs ((tg_alt (Ratan_seq (x + h)) (S N) - tg_alt (Ratan_seq x) (S N)) / h - tg_alt (Datan_seq x) (S N))).",
                        "VernacExtend",
                        "77b8ade156bcdd5894139088e9cf0bc959d254f5"
                    ]
                },
                {
                    "command": [
                        "rewrite Temp ; clear Temp ; apply Rabs_triang.",
                        "VernacExtend",
                        "ab670a284c263286335866e2febd0a21dc0d33de"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat ; apply Rlt_le ; [apply Hdelta1 | apply Hdelta2] ; intuition ; apply Rlt_le_trans with (r2:=delta) ; intuition unfold delta, mydelta.",
                        "VernacExtend",
                        "de405d9fc471bff9b5bc853e33f3a055bb3bc873"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ratan_CVU'",
            "line_nb": 1041,
            "steps": [
                {
                    "command": [
                        "apply (Alt_CVU (fun i r => Ratan_seq r i) ps_atan PI_tg (/2) pos_half); lazy beta.",
                        "VernacExtend",
                        "6ecd32de99d5634b964cbecee50df2621ddf431e"
                    ]
                },
                {
                    "command": [
                        "now intros; apply Ratan_seq_decreasing, Boule_half_to_interval.",
                        "VernacExtend",
                        "1066d950a4faea776e74e96872a1029fcf979a8a"
                    ]
                },
                {
                    "command": [
                        "now intros; apply Ratan_seq_converging, Boule_half_to_interval.",
                        "VernacExtend",
                        "ed696b2f97e199374435b2f3ec2d331f5bf92d82"
                    ]
                },
                {
                    "command": [
                        "intros x b; apply Boule_half_to_interval in b.",
                        "VernacExtend",
                        "529ce90119a39744814d276b7307de89165cdd88"
                    ]
                },
                {
                    "command": [
                        "unfold ps_atan; destruct (in_int x) as [inside | outside]; [ | destruct b; case outside; split; lra].",
                        "VernacExtend",
                        "2c27ebfa6a38e251a5a3674cccfb9dd4b87ac700"
                    ]
                },
                {
                    "command": [
                        "destruct (ps_atan_exists_1 x inside) as [v Pv].",
                        "VernacExtend",
                        "e59b506b79f28024f0201e70bdbf7cf3d99cfc1c"
                    ]
                },
                {
                    "command": [
                        "apply Un_cv_ext with (2 := Pv);[reflexivity].",
                        "VernacExtend",
                        "7158a89b64f384df93c02d486914c2e4fdd4744f"
                    ]
                },
                {
                    "command": [
                        "intros x n b; apply Boule_half_to_interval in b.",
                        "VernacExtend",
                        "eb09393fd595c07c507bc31b8f40997ea68f1366"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_1_l (PI_tg n)); unfold Ratan_seq, PI_tg.",
                        "VernacExtend",
                        "c3f6f1df2c240130e7d3c0f8230404400de66496"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r.",
                        "VernacExtend",
                        "6c4c5a82dab802842919dd673f1978a3cb8cff73"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, Rinv_0_lt_compat, (lt_INR 0); omega.",
                        "VernacExtend",
                        "716256f0a745003f6760c1592f295045b66e8289"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (pow1 (2 * n + 1)); apply pow_incr; assumption.",
                        "VernacExtend",
                        "67b1675e2cb82aec25ec7ee663ea12f79ab0e5e9"
                    ]
                },
                {
                    "command": [
                        "exact PI_tg_cv.",
                        "VernacExtend",
                        "0f7606d8cecd53cbe84e8c4d0d8b3f55c14c0a1c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ratan_CVU",
            "line_nb": 1056,
            "steps": [
                {
                    "command": [
                        "intros eps ep; destruct (Ratan_CVU' eps ep) as [N Pn].",
                        "VernacExtend",
                        "bf7892a218f3845cfaad3c3f514ad7a8506e417a"
                    ]
                },
                {
                    "command": [
                        "exists N; intros n x nN b_y.",
                        "VernacExtend",
                        "a986a5420d7cd89d8479080534cfa5731c93f146"
                    ]
                },
                {
                    "command": [
                        "case (Rtotal_order 0 x) as [xgt0 | [x0 | x0]].",
                        "VernacExtend",
                        "5f88ea2f18839286594d1d531897fddc81303152"
                    ]
                },
                {
                    "command": [
                        "assert (Boule (/2) {| pos := / 2; cond_pos := pos_half_prf|} x).",
                        "VernacExtend",
                        "0f3942a474d60112ae853f16db5431e996556a6c"
                    ]
                },
                {
                    "command": [
                        "revert b_y; unfold Boule; simpl; intros b_y; apply Rabs_def2 in b_y.",
                        "VernacExtend",
                        "08881c6085fd8d9f0b91ab7c95f7fc499de56c21"
                    ]
                },
                {
                    "command": [
                        "destruct b_y; unfold Boule; simpl; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "9b5e5f2d6b280c81cbeb5d1232470d0ec52164d7"
                    ]
                },
                {
                    "command": [
                        "apply Pn; assumption.",
                        "VernacExtend",
                        "3bedfeb072fc0a6cce2ed8865f7f524fb0fe317c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- x0, ps_atan0_0.",
                        "VernacExtend",
                        "dbc96eeca9ba4ee5dc02745ce428ef9ca3204348"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (sum_eq (fun _ => 0)), sum_cte, Rmult_0_l, Rminus_0_r, Rabs_pos_eq.",
                        "VernacExtend",
                        "7779560253caf71eb6aea54a299f2cb422281784"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "intros i _; unfold tg_alt, Ratan_seq, Rdiv; rewrite plus_comm; simpl.",
                        "VernacExtend",
                        "3b3bc29e92b9071e38d54e4fd76e9432f47d21a8"
                    ]
                },
                {
                    "command": [
                        "solve[rewrite !Rmult_0_l, Rmult_0_r; auto].",
                        "VernacExtend",
                        "9e86d9dd96acb744252be1bb2b7cf357bd008b70"
                    ]
                },
                {
                    "command": [
                        "replace (ps_atan x - sum_f_R0 (tg_alt (Ratan_seq x)) n) with (-(ps_atan (-x) - sum_f_R0 (tg_alt (Ratan_seq (-x))) n)).",
                        "VernacExtend",
                        "ba5117f9f84b1c3d95a1a6b33d3a344d7d529188"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "4585414329a0ef757c809f4a4dee3b3a09307b5c"
                    ]
                },
                {
                    "command": [
                        "assert (Boule (/2) {| pos := / 2; cond_pos := pos_half_prf|} (-x)).",
                        "VernacExtend",
                        "a462c61e8124ade641dc88197c070353b139fee2"
                    ]
                },
                {
                    "command": [
                        "revert b_y; unfold Boule; simpl; intros b_y; apply Rabs_def2 in b_y.",
                        "VernacExtend",
                        "08881c6085fd8d9f0b91ab7c95f7fc499de56c21"
                    ]
                },
                {
                    "command": [
                        "destruct b_y; unfold Boule; simpl; apply Rabs_def1; lra.",
                        "VernacExtend",
                        "9b5e5f2d6b280c81cbeb5d1232470d0ec52164d7"
                    ]
                },
                {
                    "command": [
                        "apply Pn; assumption.",
                        "VernacExtend",
                        "3bedfeb072fc0a6cce2ed8865f7f524fb0fe317c"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite ps_atan_opp, Ropp_plus_distr, sum_Ratan_seq_opp.",
                        "VernacExtend",
                        "69406a38ea21e5cbbafdf3c92b1caaabf2f47d30"
                    ]
                },
                {
                    "command": [
                        "rewrite !Ropp_involutive; reflexivity.",
                        "VernacExtend",
                        "6be0f6dacd4d4d468739725c003a60bae4fdfae0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_PI_tg",
            "line_nb": 1079,
            "steps": [
                {
                    "command": [
                        "intros n; unfold PI_tg, Ratan_seq, Rdiv; rewrite pow1, Rmult_1_l.",
                        "VernacExtend",
                        "5d1d1a44ab0cc704ca140c021893fa1c41dbc4fa"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ratan_is_ps_atan",
            "line_nb": 1083,
            "steps": [
                {
                    "command": [
                        "intros eps ep.",
                        "VernacExtend",
                        "af89a53f4fae9477ea82d9a2bc893f64250db095"
                    ]
                },
                {
                    "command": [
                        "destruct (Ratan_CVU _ ep) as [N1 PN1].",
                        "VernacExtend",
                        "6d0a0ec4226d44eb58e0a54a18729d68e770964d"
                    ]
                },
                {
                    "command": [
                        "exists N1; intros n nN x xm1 x1; rewrite <- Rabs_Ropp, Ropp_minus_distr.",
                        "VernacExtend",
                        "e91e7a928b63b7ba9540d564c53467cea5a3d2a3"
                    ]
                },
                {
                    "command": [
                        "apply PN1; [assumption | ].",
                        "VernacExtend",
                        "7b7f7af3fab24ca20ec070e86bad5950b247901b"
                    ]
                },
                {
                    "command": [
                        "unfold Boule; simpl; rewrite Rminus_0_r; apply Rabs_def1; assumption.",
                        "VernacExtend",
                        "f54fb04790cdbba69866d9897357960516335fa3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_continuity",
            "line_nb": 1090,
            "steps": [
                {
                    "command": [
                        "apply continuity_inv.",
                        "VernacExtend",
                        "f2272a81baf059908313236d605cf1a909aab9d2"
                    ]
                },
                {
                    "command": [
                        "apply continuity_plus.",
                        "VernacExtend",
                        "8d383d23cebde97144ccbf17b035ba3f2cde473a"
                    ]
                },
                {
                    "command": [
                        "apply continuity_const ; unfold constant ; intuition.",
                        "VernacExtend",
                        "831b883763e00ab2c2065b9b3e03b3cf279c6371"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous ; apply derivable_pow.",
                        "VernacExtend",
                        "ec86625c82b0e7a78174eaea1432dfe5f33a746e"
                    ]
                },
                {
                    "command": [
                        "intro x ; apply Rgt_not_eq ; apply Rge_gt_trans with (1+0) ; [|lra] ; apply Rplus_ge_compat_l.",
                        "VernacExtend",
                        "81ae035b92f66b937a8e8d7b3605d0b4b9ab023c"
                    ]
                },
                {
                    "command": [
                        "replace (x^2) with (x\u00b2).",
                        "VernacExtend",
                        "2686f69d1d1824eac845773442d7c25fc26c5cc9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge ; apply Rle_0_sqr.",
                        "VernacExtend",
                        "63c26167d594b6afb3b502a8efb8d1e5ccc4ea29"
                    ]
                },
                {
                    "command": [
                        "unfold Rsqr ; field.",
                        "VernacExtend",
                        "11efb49ecb6d57422994c18cd53d4e2c1a2dbee8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_ps_atan",
            "line_nb": 1100,
            "steps": [
                {
                    "command": [
                        "intros x x_encad.",
                        "VernacExtend",
                        "a3f4ecd7ce3024de9b74e5a401dad1d47c7e7079"
                    ]
                },
                {
                    "command": [
                        "destruct (boule_in_interval (-1) 1 x x_encad) as [c [r [Pcr1 [P1 P2]]]].",
                        "VernacExtend",
                        "cd9b767ccca27156a845006c7b662e00de1ab6e1"
                    ]
                },
                {
                    "command": [
                        "change (/ (1 + x ^ 2)) with ((fun u => /(1 + u ^ 2)) x).",
                        "VernacExtend",
                        "4ca5bd8de902bbb4eb3111a93ab7663d3c66e957"
                    ]
                },
                {
                    "command": [
                        "assert (t := derivable_pt_lim_CVU).",
                        "VernacExtend",
                        "e115c2b363b1279e8e7d156f1729b6908f0dc20f"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_CVU with (fn := (fun N x => sum_f_R0 (tg_alt (Ratan_seq x)) N)) (fn' := (fun N x => sum_f_R0 (tg_alt (Datan_seq x)) N)) (c := c) (r := r).",
                        "VernacExtend",
                        "d3fa1a5c02ee5b39c2c9acb464ee84e852cc1a19"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros y N inb; apply Rabs_def2 in inb; destruct inb.",
                        "VernacExtend",
                        "4f03cc4d6312d05ea3fcb04c7d8a8f4f2c4c722a"
                    ]
                },
                {
                    "command": [
                        "apply Datan_is_datan.",
                        "VernacExtend",
                        "0732c1900707e7f70d02cc87a381e11d2f618641"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "intros y inb; apply Rabs_def2 in inb; destruct inb.",
                        "VernacExtend",
                        "1c7fd12c72870b5f4ff631092ccd415fa93e3c8c"
                    ]
                },
                {
                    "command": [
                        "assert (y_gt_0 : -1 < y) by lra.",
                        "VernacExtend",
                        "40dd7c9e5cf00a28a8ea134bbaca06660352ac21"
                    ]
                },
                {
                    "command": [
                        "assert (y_lt_1 : y < 1) by lra.",
                        "VernacExtend",
                        "a2d7be619e0b9ae3886bb9fbca12e4b51fc06d55"
                    ]
                },
                {
                    "command": [
                        "intros eps eps_pos ; elim (Ratan_is_ps_atan eps eps_pos).",
                        "VernacExtend",
                        "fe7278861e0e7bfc1e583b934cea28a3481aef3f"
                    ]
                },
                {
                    "command": [
                        "intros N HN ; exists N; intros n n_lb ; apply HN ; tauto.",
                        "VernacExtend",
                        "b00b0eafcdd18b940de0f8bc983573ae099736da"
                    ]
                },
                {
                    "command": [
                        "apply Datan_CVU_prelim.",
                        "VernacExtend",
                        "3d53178e3775cc10d313291b1a0a81fc2af3fd3d"
                    ]
                },
                {
                    "command": [
                        "replace ((c - r + (c + r)) / 2) with c by field.",
                        "VernacExtend",
                        "fec7459c1de273d2baf66d1d7400411b0120c34d"
                    ]
                },
                {
                    "command": [
                        "unfold mkposreal_lb_ub; simpl.",
                        "VernacExtend",
                        "1578b38bcca18ae8b4f42d2c0b643261af3972b2"
                    ]
                },
                {
                    "command": [
                        "replace ((c + r - (c - r)) / 2) with (r :R) by field.",
                        "VernacExtend",
                        "6c36de6dbe19a750df8b19f175c406f13d9201f9"
                    ]
                },
                {
                    "command": [
                        "assert (Rabs c < 1 - r).",
                        "VernacExtend",
                        "cb9cd304af176978eaca5638b7e453bb1bde645b"
                    ]
                },
                {
                    "command": [
                        "unfold Boule in Pcr1; destruct r; simpl in *; apply Rabs_def1; apply Rabs_def2 in Pcr1; destruct Pcr1; lra.",
                        "VernacExtend",
                        "39af28bf9c1f968158abc64400ce20af17dd430a"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "intros; apply Datan_continuity.",
                        "VernacExtend",
                        "6b74e5aed057947abc5feb8ddaa5538bde638dd2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_ps_atan",
            "line_nb": 1125,
            "steps": [
                {
                    "command": [
                        "intros x x_encad.",
                        "VernacExtend",
                        "a3f4ecd7ce3024de9b74e5a401dad1d47c7e7079"
                    ]
                },
                {
                    "command": [
                        "exists (/(1+x^2)) ; apply derivable_pt_lim_ps_atan; assumption.",
                        "VernacExtend",
                        "e1814c6ebad090e3696d44726c374c699a5b1640"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ps_atan_continuity_pt_1",
            "line_nb": 1129,
            "steps": [
                {
                    "command": [
                        "intros eps eps_pos.",
                        "VernacExtend",
                        "7d7e561a4a46c191d1851b4d56062b9fc52885c1"
                    ]
                },
                {
                    "command": [
                        "assert (eps_3_pos : eps / 3 > 0) by lra.",
                        "VernacExtend",
                        "bf913f42629913c9689f2f1d712d282b56ad6018"
                    ]
                },
                {
                    "command": [
                        "elim (Ratan_is_ps_atan (eps / 3) eps_3_pos) ; intros N1 HN1.",
                        "VernacExtend",
                        "1d7338cde0049e694aa460510a70bdcb56420426"
                    ]
                },
                {
                    "command": [
                        "unfold Alt_PI.",
                        "VernacExtend",
                        "9e6659eabb4a9be6b36335113602abf29ea89a79"
                    ]
                },
                {
                    "command": [
                        "destruct exist_PI as [v Pv]; replace ((4 * v)/4) with v by field.",
                        "VernacExtend",
                        "5e282675e4feea14dd2094717f25786fc2a09604"
                    ]
                },
                {
                    "command": [
                        "assert (Pv' : Un_cv (sum_f_R0 (tg_alt (Ratan_seq 1))) v).",
                        "VernacExtend",
                        "61209de303161adcfc58471cb87f7ed1dfe2fe27"
                    ]
                },
                {
                    "command": [
                        "apply Un_cv_ext with (2:= Pv).",
                        "VernacExtend",
                        "8315e0bcd8f530a1358e3f5e6cc2ce1658a02e73"
                    ]
                },
                {
                    "command": [
                        "intros; apply sum_eq; intros; unfold tg_alt; rewrite Alt_PI_tg; tauto.",
                        "VernacExtend",
                        "45834e2fff86be996dea6ac0012197ed046e36a6"
                    ]
                },
                {
                    "command": [
                        "destruct (Pv' (eps / 3) eps_3_pos) as [N2 HN2].",
                        "VernacExtend",
                        "c90b520027046593143ca36674b539496088ca37"
                    ]
                },
                {
                    "command": [
                        "set (N := (N1 + N2)%nat).",
                        "VernacExtend",
                        "7cf28f1f2e872885026d612059b50bd10b985b40"
                    ]
                },
                {
                    "command": [
                        "assert (O_lb : 0 <= 1) by intuition ; assert (O_ub : 1 <= 1) by intuition ; elim (ps_atanSeq_continuity_pt_1 N 1 O_lb O_ub (eps / 3) eps_3_pos) ; intros alpha Halpha ; clear -HN1 HN2 Halpha eps_3_pos; destruct Halpha as (alpha_pos, Halpha).",
                        "VernacExtend",
                        "b128c4cd33cd413c0085f178b51aa243e84d4df1"
                    ]
                },
                {
                    "command": [
                        "exists alpha ; split;[assumption | ].",
                        "VernacExtend",
                        "d5c090d8522e94df6a9eefa0adacf6b591c551eb"
                    ]
                },
                {
                    "command": [
                        "intros x x_ub x_lb x_bounds.",
                        "VernacExtend",
                        "5608cd8bf27be040401777af14ac0e7281cada0d"
                    ]
                },
                {
                    "command": [
                        "simpl ; unfold R_dist.",
                        "VernacExtend",
                        "db555dffbb2c35caa3c9a6f63cd610fa717cc3be"
                    ]
                },
                {
                    "command": [
                        "replace (ps_atan x - v) with ((ps_atan x - sum_f_R0 (tg_alt (Ratan_seq x)) N) + (sum_f_R0 (tg_alt (Ratan_seq x)) N - sum_f_R0 (tg_alt (Ratan_seq 1)) N) + (sum_f_R0 (tg_alt (Ratan_seq 1)) N - v)).",
                        "VernacExtend",
                        "03f89fb1049e64df7783ffb94af84b14201a374a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2:=Rabs (ps_atan x - sum_f_R0 (tg_alt (Ratan_seq x)) N) + Rabs ((sum_f_R0 (tg_alt (Ratan_seq x)) N - sum_f_R0 (tg_alt (Ratan_seq 1)) N) + (sum_f_R0 (tg_alt (Ratan_seq 1)) N - v))).",
                        "VernacExtend",
                        "e7b092c8235b93c25f9a895757fe99b4f78fd9b0"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc ; apply Rabs_triang.",
                        "VernacExtend",
                        "d03f3bba93ed68bf367480091f836ef7e2bce2dd"
                    ]
                },
                {
                    "command": [
                        "replace eps with (2 / 3 * eps + eps / 3).",
                        "VernacExtend",
                        "bcf074ffa4f8a5b64f82c9175d8f649d23c53bea"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm.",
                        "VernacExtend",
                        "1ea33e6774c5768bd211bdf8c447feee9b9e21de"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat.",
                        "VernacExtend",
                        "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r2 := Rabs (sum_f_R0 (tg_alt (Ratan_seq x)) N - sum_f_R0 (tg_alt (Ratan_seq 1)) N) + Rabs (sum_f_R0 (tg_alt (Ratan_seq 1)) N - v)).",
                        "VernacExtend",
                        "0c25b3927116c7030feaf299d54812671ddf864f"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (r2:= eps / 3 + eps / 3).",
                        "VernacExtend",
                        "95d00376882c4e84c538e8f5889880d7a8ffd630"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat.",
                        "VernacExtend",
                        "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
                    ]
                },
                {
                    "command": [
                        "simpl in Halpha ; unfold R_dist in Halpha.",
                        "VernacExtend",
                        "154c3c7261b6b89936e4f39c1cac15adea9bb8e6"
                    ]
                },
                {
                    "command": [
                        "apply Halpha ; split.",
                        "VernacExtend",
                        "a9dbcce50533e3c966f447682b3d4b045a998f4a"
                    ]
                },
                {
                    "command": [
                        "unfold D_x, no_cond ; split ; [ | apply Rgt_not_eq ] ; intuition.",
                        "VernacExtend",
                        "7fc73b4ee48b2293d752f55657c951ab7c60dd71"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "apply HN2; unfold N; omega.",
                        "VernacExtend",
                        "e60cc3f5672afb5ac1bb3d5d3f6f621ce75debe0"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp, Ropp_minus_distr; apply HN1.",
                        "VernacExtend",
                        "5255b5331089fd667b1ac72a3c76b1f777e389d6"
                    ]
                },
                {
                    "command": [
                        "unfold N; omega.",
                        "VernacExtend",
                        "ec642d6e70b005beb4bad57dec005858ee95c560"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Datan_eq_DatanSeq_interv",
            "line_nb": 1167,
            "steps": [
                {
                    "command": [
                        "assert (freq : 0 < tan 1) by apply (Rlt_trans _ _ _ Rlt_0_1 tan_1_gt_1).",
                        "VernacExtend",
                        "dc86c30d03dc5845a0f8b53e1fc71628f17cd705"
                    ]
                },
                {
                    "command": [
                        "intros x x_encad Pratan Prmymeta.",
                        "VernacExtend",
                        "040e6abe01e1e7491949f3a2e4b52a4cbf4491af"
                    ]
                },
                {
                    "command": [
                        "rewrite pr_nu_var2_interv with (g:=ps_atan) (lb:=-1) (ub:=tan 1) (pr2 := derivable_pt_ps_atan x x_encad).",
                        "VernacExtend",
                        "4faa33ac948ebc182cfee05d36536dc79f9ac501"
                    ]
                },
                {
                    "command": [
                        "rewrite pr_nu_var2_interv with (f:=atan) (g:=atan) (lb:=-1) (ub:= 1) (pr2:=derivable_pt_atan x).",
                        "VernacExtend",
                        "44476be492f251424fb87fdb8cfd755bb48f72bd"
                    ]
                },
                {
                    "command": [
                        "assert (Temp := derivable_pt_lim_ps_atan x x_encad).",
                        "VernacExtend",
                        "d159e2442e7e45b6dfd5e979894c4821ceccf979"
                    ]
                },
                {
                    "command": [
                        "assert (Hrew1 : derive_pt ps_atan x (derivable_pt_ps_atan x x_encad) = (/(1+x^2))).",
                        "VernacExtend",
                        "e0ffc1bbff94b8ca037845d5a517cc3fbf62f895"
                    ]
                },
                {
                    "command": [
                        "apply derive_pt_eq_0 ; assumption.",
                        "VernacExtend",
                        "40279b41668d312b10443e8c2b66762436ede10d"
                    ]
                },
                {
                    "command": [
                        "rewrite derive_pt_atan.",
                        "VernacExtend",
                        "08afa88e0773d18c2ee9bfc9f8c79068bc2cf5c8"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrew1.",
                        "VernacExtend",
                        "5530bc150f2f7b7137aa34ec5e6eb0776f717fbb"
                    ]
                },
                {
                    "command": [
                        "replace (Rsqr x) with (x ^ 2) by (unfold Rsqr; ring).",
                        "VernacExtend",
                        "b6f5260e904cc44c6a54a9b590deba099fe7b33b"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rmult_1_l; reflexivity.",
                        "VernacExtend",
                        "4b3882319ad2f1286592d853e65ae8d0cacb9404"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros; reflexivity.",
                        "VernacExtend",
                        "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "assert (t := tan_1_gt_1); split;destruct x_encad; lra.",
                        "VernacExtend",
                        "52f6b238f9315e7de1b55c521c66878bcdd764e1"
                    ]
                },
                {
                    "command": [
                        "intros; reflexivity.",
                        "VernacExtend",
                        "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "atan_eq_ps_atan",
            "line_nb": 1186,
            "steps": [
                {
                    "command": [
                        "intros x x_encad.",
                        "VernacExtend",
                        "a3f4ecd7ce3024de9b74e5a401dad1d47c7e7079"
                    ]
                },
                {
                    "command": [
                        "assert (pr1 : forall c : R, 0 < c < x -> derivable_pt (atan - ps_atan) c).",
                        "VernacExtend",
                        "315b7f0d40d27b27c3ce71046e18baef9e671aaf"
                    ]
                },
                {
                    "command": [
                        "intros c c_encad.",
                        "VernacExtend",
                        "3ada1aced4f6405cb678a09a8c79393a0281c10c"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_minus.",
                        "VernacExtend",
                        "ba0f12b0c6b1d9f0442014804620576081f54651"
                    ]
                },
                {
                    "command": [
                        "exact (derivable_pt_atan c).",
                        "VernacExtend",
                        "ab29aae84dfc26ef684b5535e4ab1fd45ea7c27c"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_ps_atan.",
                        "VernacExtend",
                        "e94cbb72c803e244a54047e48a1066b252c602d0"
                    ]
                },
                {
                    "command": [
                        "destruct x_encad; destruct c_encad; split; lra.",
                        "VernacExtend",
                        "4d6e1c1218109b7ea27929e4d50dab008d566fb9"
                    ]
                },
                {
                    "command": [
                        "assert (pr2 : forall c : R, 0 < c < x -> derivable_pt id c).",
                        "VernacExtend",
                        "08c08a49295db1e3d27e58bbedba14bc45c7a321"
                    ]
                },
                {
                    "command": [
                        "intros ; apply derivable_pt_id; lra.",
                        "VernacExtend",
                        "0e83955d8eda821cc0326908ef1bd623356de515"
                    ]
                },
                {
                    "command": [
                        "assert (delta_cont : forall c : R, 0 <= c <= x -> continuity_pt (atan - ps_atan) c).",
                        "VernacExtend",
                        "bfbe5e5fe2f995320caef022144d75ec7495d7b5"
                    ]
                },
                {
                    "command": [
                        "intros c [[c_encad1 | c_encad1 ] [c_encad2 | c_encad2]]; apply continuity_pt_minus.",
                        "VernacExtend",
                        "b9379ac8a268428af3532161bb2dd0ab256445f0"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt ; apply derivable_pt_atan.",
                        "VernacExtend",
                        "483c37f9a35d9dcfa23f2cce25429395adb5c063"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt ; apply derivable_pt_ps_atan.",
                        "VernacExtend",
                        "3d9aa9361ff9a771335c1132e871de6a077a70d3"
                    ]
                },
                {
                    "command": [
                        "split; destruct x_encad; lra.",
                        "VernacExtend",
                        "e700f787c660689090151c337160c5a355947fff"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt, derivable_pt_atan.",
                        "VernacExtend",
                        "7ce8807929d8cfa6ee49fd759c0379cce0905999"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt, derivable_pt_ps_atan.",
                        "VernacExtend",
                        "06b4ebc3b020fe82577a2ba278af26a10df37d83"
                    ]
                },
                {
                    "command": [
                        "subst c; destruct x_encad; split; lra.",
                        "VernacExtend",
                        "3db26a8575c516c3ca81ebad91dd45b9b326f5a8"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt, derivable_pt_atan.",
                        "VernacExtend",
                        "7ce8807929d8cfa6ee49fd759c0379cce0905999"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt, derivable_pt_ps_atan.",
                        "VernacExtend",
                        "06b4ebc3b020fe82577a2ba278af26a10df37d83"
                    ]
                },
                {
                    "command": [
                        "subst c; split; lra.",
                        "VernacExtend",
                        "ec743bbded0e445061b400236bd5c7585c4adaad"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt, derivable_pt_atan.",
                        "VernacExtend",
                        "7ce8807929d8cfa6ee49fd759c0379cce0905999"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt, derivable_pt_ps_atan.",
                        "VernacExtend",
                        "06b4ebc3b020fe82577a2ba278af26a10df37d83"
                    ]
                },
                {
                    "command": [
                        "subst c; destruct x_encad; split; lra.",
                        "VernacExtend",
                        "3db26a8575c516c3ca81ebad91dd45b9b326f5a8"
                    ]
                },
                {
                    "command": [
                        "assert (id_cont : forall c : R, 0 <= c <= x -> continuity_pt id c).",
                        "VernacExtend",
                        "d00e2294cec193e1638e6c7e2a262f8b68157b00"
                    ]
                },
                {
                    "command": [
                        "intros ; apply derivable_continuous ; apply derivable_id.",
                        "VernacExtend",
                        "6128d5d68bbd06bbad037e48530487a799f4a767"
                    ]
                },
                {
                    "command": [
                        "assert (x_lb : 0 < x) by (destruct x_encad; lra).",
                        "VernacExtend",
                        "5873ed94a074557b30c881608d0a79007e05656b"
                    ]
                },
                {
                    "command": [
                        "elim (MVT (atan - ps_atan)%F id 0 x pr1 pr2 x_lb delta_cont id_cont) ; intros d Temp ; elim Temp ; intros d_encad Main.",
                        "VernacExtend",
                        "eaa3946f19822affd752822c8b4ffc5da22eb3f6"
                    ]
                },
                {
                    "command": [
                        "clear - Main x_encad.",
                        "VernacExtend",
                        "0514bac3630c7f078199edb035c40cad140a4ae7"
                    ]
                },
                {
                    "command": [
                        "assert (Temp : forall (pr: derivable_pt (atan - ps_atan) d), derive_pt (atan - ps_atan) d pr = 0).",
                        "VernacExtend",
                        "2941c6e20a84fc82fff31c659d3b078ae48f220d"
                    ]
                },
                {
                    "command": [
                        "intro pr.",
                        "VernacExtend",
                        "849ef7f784a7697a4497d8d476f8b2de6dc031ef"
                    ]
                },
                {
                    "command": [
                        "assert (d_encad3 : -1 < d < 1).",
                        "VernacExtend",
                        "2ee38869aeca4a43c8b26667e632796c53de81f1"
                    ]
                },
                {
                    "command": [
                        "destruct d_encad; destruct x_encad; split; lra.",
                        "VernacExtend",
                        "164c34aa8200a2e75f3695038e12acef2aca7dca"
                    ]
                },
                {
                    "command": [
                        "pose (pr3 := derivable_pt_minus atan ps_atan d (derivable_pt_atan d) (derivable_pt_ps_atan d d_encad3)).",
                        "VernacExtend",
                        "51b65dc17704972183a5134e6ec7e1b2280f58bd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- pr_nu_var2_interv with (f:=(atan - ps_atan)%F) (g:=(atan - ps_atan)%F) (lb:=0) (ub:=x) (pr1:=pr3) (pr2:=pr).",
                        "VernacExtend",
                        "a8ed64a98e50a46580dc4c13c84c7b4fdac96784"
                    ]
                },
                {
                    "command": [
                        "unfold pr3.",
                        "VernacExtend",
                        "90187fa3a53ce31ee7036dbc64d20cd2bd005401"
                    ]
                },
                {
                    "command": [
                        "rewrite derive_pt_minus.",
                        "VernacExtend",
                        "7b5b7977d9cc568b30e4a6ba97f4178cfcc372af"
                    ]
                },
                {
                    "command": [
                        "rewrite Datan_eq_DatanSeq_interv with (Prmymeta := derivable_pt_atan d).",
                        "VernacExtend",
                        "ed5f990cb2c68827746c46595c64ed7a319415d3"
                    ]
                },
                {
                    "command": [
                        "intuition.",
                        "VernacExtend",
                        "ebd9388eeb482972743f9cce5cbddbd85ca5bdfd"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "destruct d_encad; lra.",
                        "VernacExtend",
                        "e231b10e77b650c95fb68ab68edbb2e8d1095b38"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assert (iatan0 : atan 0 = 0).",
                        "VernacExtend",
                        "0e375e47fc4521a09fabfd3506f3d99d84d32649"
                    ]
                },
                {
                    "command": [
                        "apply tan_is_inj.",
                        "VernacExtend",
                        "ccf227ee718811c10adb01c93b452ac682275059"
                    ]
                },
                {
                    "command": [
                        "apply atan_bound.",
                        "VernacExtend",
                        "c433ab7ce245b5a86c9461910091f3eedbb99ac1"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_div; assert (t := PI2_RGT_0); split; lra.",
                        "VernacExtend",
                        "0c4d9df8ad24f466851e9d3c577803fce4660482"
                    ]
                },
                {
                    "command": [
                        "rewrite tan_0, atan_right_inv; reflexivity.",
                        "VernacExtend",
                        "c965ac78e1c46bc19e098f501f12ddf7a937dedd"
                    ]
                },
                {
                    "command": [
                        "generalize Main; rewrite Temp, Rmult_0_r.",
                        "VernacExtend",
                        "39c614242f71c98b251dd332656e0e4c562160cd"
                    ]
                },
                {
                    "command": [
                        "replace ((atan - ps_atan)%F x) with (atan x - ps_atan x) by intuition.",
                        "VernacExtend",
                        "a961cf9a109fed32d9a355c4def49d56240e509b"
                    ]
                },
                {
                    "command": [
                        "replace ((atan - ps_atan)%F 0) with (atan 0 - ps_atan 0) by intuition.",
                        "VernacExtend",
                        "8565fc35417b27d6622614d015cd9d8aed369d53"
                    ]
                },
                {
                    "command": [
                        "rewrite iatan0, ps_atan0_0, !Rminus_0_r.",
                        "VernacExtend",
                        "9ce52a193c679c044fc5ce6d1615caecd6c90473"
                    ]
                },
                {
                    "command": [
                        "replace (derive_pt id d (pr2 d d_encad)) with 1.",
                        "VernacExtend",
                        "73699eb699a509d26263d429cced22f44db39342"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "solve[intros M; apply Rminus_diag_uniq; auto].",
                        "VernacExtend",
                        "8df33e783d5e8c66b510d369e576b352fbb40f03"
                    ]
                },
                {
                    "command": [
                        "rewrite pr_nu_var with (g:=id) (pr2:=derivable_pt_id d).",
                        "VernacExtend",
                        "43bcee371b8b9ed2b28c37839d10644d8acad75d"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply derive_pt_id.",
                        "VernacExtend",
                        "2cf4c6a92a0c71266cc80ddc501682ef1423990c"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Alt_PI_eq",
            "line_nb": 1245,
            "steps": [
                {
                    "command": [
                        "apply Rmult_eq_reg_r with (/4); fold (Alt_PI/4); fold (PI/4); [ | apply Rgt_not_eq; lra].",
                        "VernacExtend",
                        "ffb1a0fc3120f871c03356e9e0411ffac7c1b823"
                    ]
                },
                {
                    "command": [
                        "assert (0 < PI/6) by (apply PI6_RGT_0).",
                        "VernacExtend",
                        "a82f778f5ca29ef03dfae426cd801473bafe01ea"
                    ]
                },
                {
                    "command": [
                        "assert (t1:= PI2_1).",
                        "VernacExtend",
                        "76e32dd4aad8190e446d14348db93ac432c62a71"
                    ]
                },
                {
                    "command": [
                        "assert (t2 := PI_4).",
                        "VernacExtend",
                        "59da46b9a14deab511e2e1ddf5cc6f3729bbd674"
                    ]
                },
                {
                    "command": [
                        "assert (m := Alt_PI_RGT_0).",
                        "VernacExtend",
                        "d91e99e794814d2e57059b29faa9203062fedf1f"
                    ]
                },
                {
                    "command": [
                        "assert (-PI/2 < 1 < PI/2) by (rewrite Ropp_div; split; lra).",
                        "VernacExtend",
                        "787e0a779b91628ff1540413b4b3c3087308f103"
                    ]
                },
                {
                    "command": [
                        "apply cond_eq; intros eps ep.",
                        "VernacExtend",
                        "19b56c0ce36e4d882127f2d4dfb9f254aa69b779"
                    ]
                },
                {
                    "command": [
                        "change (R_dist (Alt_PI/4) (PI/4) < eps).",
                        "VernacExtend",
                        "4f0ad52173514da803d74f7b2b79c57157a36a6e"
                    ]
                },
                {
                    "command": [
                        "assert (ca : continuity_pt atan 1).",
                        "VernacExtend",
                        "0be1e5537f30be6557b71a2f7429bdde03dc893f"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt, derivable_pt_atan.",
                        "VernacExtend",
                        "7ce8807929d8cfa6ee49fd759c0379cce0905999"
                    ]
                },
                {
                    "command": [
                        "assert (Xe : exists eps', exists eps'', eps' + eps'' <= eps /\\ 0 < eps' /\\ 0 < eps'').",
                        "VernacExtend",
                        "93d4e3d72ebc1bee77101a4583eaeb094ae645be"
                    ]
                },
                {
                    "command": [
                        "exists (eps/2); exists (eps/2); repeat apply conj; lra.",
                        "VernacExtend",
                        "227ed2e0a0814ccff3f7805b336578ea0beea933"
                    ]
                },
                {
                    "command": [
                        "destruct Xe as [eps' [eps'' [eps_ineq [ep' ep'']]]].",
                        "VernacExtend",
                        "485454600a142f242c69fcf7d9932c86ef451b64"
                    ]
                },
                {
                    "command": [
                        "destruct (ps_atan_continuity_pt_1 _ ep') as [alpha [a0 Palpha]].",
                        "VernacExtend",
                        "72b6efd73a57979978f256b8c725a171a9812b8b"
                    ]
                },
                {
                    "command": [
                        "destruct (ca _ ep'') as [beta [b0 Pbeta]].",
                        "VernacExtend",
                        "b12e0c7dc95e2189d716e14a77d0a0c3ae60a9e8"
                    ]
                },
                {
                    "command": [
                        "assert (Xa : exists a, 0 < a < 1 /\\ R_dist a 1 < alpha /\\ R_dist a 1 < beta).",
                        "VernacExtend",
                        "867fde948da285bd50d1b84ada7cf9d7ce86b18e"
                    ]
                },
                {
                    "command": [
                        "exists (Rmax (/2) (Rmax (1 - alpha /2) (1 - beta /2))).",
                        "VernacExtend",
                        "e71e7ebbf16b0f988db3ae9994efad71664a497e"
                    ]
                },
                {
                    "command": [
                        "assert (/2 <= Rmax (/2) (Rmax (1 - alpha /2) (1 - beta /2))) by apply Rmax_l.",
                        "VernacExtend",
                        "c664478b6dd992a48d458461becbe85e12d67bfc"
                    ]
                },
                {
                    "command": [
                        "assert (Rmax (1 - alpha /2) (1 - beta /2) <= Rmax (/2) (Rmax (1 - alpha /2) (1 - beta /2))) by apply Rmax_r.",
                        "VernacExtend",
                        "99fc263505b12203fbe45202cfc3363a00fba707"
                    ]
                },
                {
                    "command": [
                        "assert ((1 - alpha /2) <= Rmax (1 - alpha /2) (1 - beta /2)) by apply Rmax_l.",
                        "VernacExtend",
                        "bd77550865502bfe33a3f47c782e03bb05d29764"
                    ]
                },
                {
                    "command": [
                        "assert ((1 - beta /2) <= Rmax (1 - alpha /2) (1 - beta /2)) by apply Rmax_r.",
                        "VernacExtend",
                        "2fa9b0243da407736eea1296c258971d33fb6711"
                    ]
                },
                {
                    "command": [
                        "assert (Rmax (1 - alpha /2) (1 - beta /2) < 1) by (apply Rmax_lub_lt; lra).",
                        "VernacExtend",
                        "e33ad211f0df073d114c91a5f169d00145911e8f"
                    ]
                },
                {
                    "command": [
                        "split;[split;[ | apply Rmax_lub_lt]; lra | ].",
                        "VernacExtend",
                        "bafc7ab3e88bf104564285756ce22683df7fced0"
                    ]
                },
                {
                    "command": [
                        "assert (0 <= 1 - Rmax (/ 2) (Rmax (1 - alpha / 2) (1 - beta / 2))).",
                        "VernacExtend",
                        "78b0e5537b3507bd3f4ced96ba52f640bb1c78c2"
                    ]
                },
                {
                    "command": [
                        "assert (Rmax (/2) (Rmax (1 - alpha / 2) (1 - beta /2)) <= 1) by (apply Rmax_lub; lra).",
                        "VernacExtend",
                        "59be2d2da735adbee55e1cc1f7a17aba1c93b2f8"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "split; unfold R_dist; rewrite <-Rabs_Ropp, Ropp_minus_distr, Rabs_pos_eq;lra.",
                        "VernacExtend",
                        "d0e4c1fa69fe4df0424468e74a3e23cc1517b25f"
                    ]
                },
                {
                    "command": [
                        "destruct Xa as [a [[Pa0 Pa1] [P1 P2]]].",
                        "VernacExtend",
                        "f945cf42d0d622e654368390c239a7eb5ce167bc"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := R_dist_tri _ _ (ps_atan a)).",
                        "VernacExtend",
                        "c2b245e61a0b58a5f20fcc57280d59ad4d9e6e58"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (2 := eps_ineq).",
                        "VernacExtend",
                        "774e811c64d5968f55bb6f206b0496091f2de87c"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat.",
                        "VernacExtend",
                        "f7bc5a60a4f35352751a55736bc694ac6ced98ea"
                    ]
                },
                {
                    "command": [
                        "rewrite R_dist_sym; apply Palpha; assumption.",
                        "VernacExtend",
                        "f7452c7f447aa83ce6f34c99574c010ec96bc1d3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- atan_eq_ps_atan.",
                        "VernacExtend",
                        "4663e90efd594b608fb599f5c2fead515a68d8eb"
                    ]
                },
                {
                    "command": [
                        "rewrite <- atan_1; apply (Pbeta a); auto.",
                        "VernacExtend",
                        "ce1307e49f2efc711dc91c210d694fcb06ff6497"
                    ]
                },
                {
                    "command": [
                        "split; [ | exact P2].",
                        "VernacExtend",
                        "f2eec5da64661dadc9699a9de6d43018b57cfc4e"
                    ]
                },
                {
                    "command": [
                        "split;[exact I | apply Rgt_not_eq; assumption].",
                        "VernacExtend",
                        "4067108e0a6a8b9730c9b850f1e7432e1ee72c7d"
                    ]
                },
                {
                    "command": [
                        "split; assumption.",
                        "VernacExtend",
                        "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "PI_ineq",
            "line_nb": 1284,
            "steps": [
                {
                    "command": [
                        "intros; rewrite <- Alt_PI_eq; apply Alt_PI_ineq.",
                        "VernacExtend",
                        "72020b208f34d753eb89869052885d2460da90d7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}