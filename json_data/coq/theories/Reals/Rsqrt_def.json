{
    "filename": "theories/Reals/Rsqrt_def.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Sumbool.",
            "VernacRequire",
            "555a25fa361ace801dc7927d5872def951dfbee5"
        ],
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import SeqSeries.",
            "VernacRequire",
            "379ec54d32465fe6d151cce8474fb7ff733028bb"
        ],
        [
            "Require Import Ranalysis1.",
            "VernacRequire",
            "b7df6cdb101f6571d1192419ca4168ab43a628dd"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Fixpoint Dichotomy_lb (x y:R) (P:R -> bool) (N:nat) {struct N} : R := match N with | O => x | S n => let down := Dichotomy_lb x y P n in let up := Dichotomy_ub x y P n in let z := (down + up) / 2 in if P z then down else z end with Dichotomy_ub (x y:R) (P:R -> bool) (N:nat) {struct N} : R := match N with | O => y | S n => let down := Dichotomy_lb x y P n in let up := Dichotomy_ub x y P n in let z := (down + up) / 2 in if P z then z else up end.",
            "VernacFixpoint",
            "dc4b03c2e2e09893144c7f212347e81dc10e90ae"
        ],
        [
            "Definition dicho_lb (x y:R) (P:R -> bool) (N:nat) : R := Dichotomy_lb x y P N.",
            "VernacDefinition",
            "e6845589cb7ed3e67939008cb06ab51fedc00b47"
        ],
        [
            "Definition dicho_up (x y:R) (P:R -> bool) (N:nat) : R := Dichotomy_ub x y P N.",
            "VernacDefinition",
            "48ce75399eb30369cc651bac795eb25d5fc6555e"
        ],
        [
            "Lemma dicho_comp : forall (x y:R) (P:R -> bool) (n:nat), x <= y -> dicho_lb x y P n <= dicho_up x y P n.",
            "VernacStartTheoremProof",
            "c6b2e7e276c1f34deccaac406af024bdac10ac6b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
            "VernacExtend",
            "c64e5d3909965502d943be8f9000d46151f19486"
        ],
        [
            "unfold Rdiv; apply Rmult_le_reg_l with 2.",
            "VernacExtend",
            "7606483ed61ba69faf47ffdae61002a9126f90fc"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "pattern 2 at 1; rewrite Rmult_comm.",
            "VernacExtend",
            "88c04225f0da0ba15136c3da0ebe2ae0cf1a20c3"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
            "VernacExtend",
            "4578ae178cd451c29991181c9039fccaadaa7a0a"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "rewrite double.",
            "VernacExtend",
            "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv; apply Rmult_le_reg_l with 2.",
            "VernacExtend",
            "7606483ed61ba69faf47ffdae61002a9126f90fc"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "rewrite Rmult_comm.",
            "VernacExtend",
            "fd520335d31c715c2f686e2bdc0b380c493b04c0"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
            "VernacExtend",
            "4578ae178cd451c29991181c9039fccaadaa7a0a"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "rewrite double.",
            "VernacExtend",
            "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
        ],
        [
            "rewrite <- (Rplus_comm (Dichotomy_ub x y P n)).",
            "VernacExtend",
            "5dc6a96ba785f9bff06dea68067a9acf7e4c5a8e"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_lb_growing : forall (x y:R) (P:R -> bool), x <= y -> Un_growing (dicho_lb x y P).",
            "VernacStartTheoremProof",
            "8bc059075c7ff64f0b27e983601b7062d1065b3d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Un_growing.",
            "VernacExtend",
            "bb82a49c6eee9f82a3c0d5b17d8a842d5e9abb49"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
            "VernacExtend",
            "c64e5d3909965502d943be8f9000d46151f19486"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "unfold Rdiv; apply Rmult_le_reg_l with 2.",
            "VernacExtend",
            "7606483ed61ba69faf47ffdae61002a9126f90fc"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "pattern 2 at 1; rewrite Rmult_comm.",
            "VernacExtend",
            "88c04225f0da0ba15136c3da0ebe2ae0cf1a20c3"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
            "VernacExtend",
            "4578ae178cd451c29991181c9039fccaadaa7a0a"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "rewrite double.",
            "VernacExtend",
            "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "replace (Dichotomy_ub x y P n) with (dicho_up x y P n); [ apply dicho_comp; assumption | reflexivity ].",
            "VernacExtend",
            "31a17a233002ef4cf5518a5432bc961d7316f943"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_up_decreasing : forall (x y:R) (P:R -> bool), x <= y -> Un_decreasing (dicho_up x y P).",
            "VernacStartTheoremProof",
            "e084ae8933ec0ec0cc336b2110d642a6c90633fd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Un_decreasing.",
            "VernacExtend",
            "69f68a5a934c77be8a4c69b1ddfd7c2b437ccda6"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
            "VernacExtend",
            "c64e5d3909965502d943be8f9000d46151f19486"
        ],
        [
            "unfold Rdiv; apply Rmult_le_reg_l with 2.",
            "VernacExtend",
            "7606483ed61ba69faf47ffdae61002a9126f90fc"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "rewrite Rmult_comm.",
            "VernacExtend",
            "fd520335d31c715c2f686e2bdc0b380c493b04c0"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
            "VernacExtend",
            "4578ae178cd451c29991181c9039fccaadaa7a0a"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "rewrite double.",
            "VernacExtend",
            "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
        ],
        [
            "replace (Dichotomy_ub x y P n) with (dicho_up x y P n); [ idtac | reflexivity ].",
            "VernacExtend",
            "91e54e4fcff54f53c157e326dac4a26634f4628b"
        ],
        [
            "replace (Dichotomy_lb x y P n) with (dicho_lb x y P n); [ idtac | reflexivity ].",
            "VernacExtend",
            "1929acf848d0ccbb76680583f651147c7037e7f5"
        ],
        [
            "rewrite <- (Rplus_comm (dicho_up x y P n)).",
            "VernacExtend",
            "b0418409b186c4fa6fb221f2a45b0a1050951a55"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "apply dicho_comp; assumption.",
            "VernacExtend",
            "ead536c0a780780e2d9b1ae5617d726dba95194b"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_lb_maj_y : forall (x y:R) (P:R -> bool), x <= y -> forall n:nat, dicho_lb x y P n <= y.",
            "VernacStartTheoremProof",
            "cf79e9aaea1e100d91a98ab38759925fb5655267"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
            "VernacExtend",
            "c64e5d3909965502d943be8f9000d46151f19486"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv; apply Rmult_le_reg_l with 2.",
            "VernacExtend",
            "7606483ed61ba69faf47ffdae61002a9126f90fc"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "rewrite Rmult_comm.",
            "VernacExtend",
            "fd520335d31c715c2f686e2bdc0b380c493b04c0"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ rewrite Rmult_1_r | discrR ].",
            "VernacExtend",
            "604949df2965253839eaecfae1626e51448e6b97"
        ],
        [
            "rewrite double; apply Rplus_le_compat.",
            "VernacExtend",
            "db1f4d73c5ec0d17fd9546fceecbb195a4eb5a48"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "pattern y at 2; replace y with (Dichotomy_ub x y P 0); [ idtac | reflexivity ].",
            "VernacExtend",
            "12195ce3903d8d6defbb5a3b7f623890c56ff0a0"
        ],
        [
            "apply decreasing_prop.",
            "VernacExtend",
            "5a9c3554aa6cc6b3db23c9311827c40fe7fa48a8"
        ],
        [
            "assert (H0 := dicho_up_decreasing x y P H).",
            "VernacExtend",
            "4c81cf707408e46fbc6aba628ab03040ae943e61"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_lb_maj : forall (x y:R) (P:R -> bool), x <= y -> has_ub (dicho_lb x y P).",
            "VernacStartTheoremProof",
            "20c3f01bf1548dab329f74f0ca79c48b6301abf1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (forall n:nat, dicho_lb x y P n <= y).",
            "VernacExtend",
            "76315fd196e291ce139d55a46b582b1f1a43c99f"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold has_ub.",
            "VernacExtend",
            "ceb32c40b15ce73c7b54080c037d097378cdbabb"
        ],
        [
            "unfold bound.",
            "VernacExtend",
            "59942e148dddd0d48f677cd1bd2ebe8e3f69ae85"
        ],
        [
            "exists y.",
            "VernacExtend",
            "1c06cb2466f48b6def24e74ddeda9956981c0a0a"
        ],
        [
            "unfold is_upper_bound.",
            "VernacExtend",
            "8f2f4c45e0301f8635f36bde586c5301c04c8245"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "rewrite H2; apply H0.",
            "VernacExtend",
            "e5aac3fae5fd790d7ab5c7ce8d2983d77619ad33"
        ],
        [
            "apply dicho_lb_maj_y; assumption.",
            "VernacExtend",
            "4d87b4e2546791727e614a5424c10d373cda4b2d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_up_min_x : forall (x y:R) (P:R -> bool), x <= y -> forall n:nat, x <= dicho_up x y P n.",
            "VernacStartTheoremProof",
            "a76622251398e3b3d5f05306ad1f68cf38f5ca2d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
            "VernacExtend",
            "c64e5d3909965502d943be8f9000d46151f19486"
        ],
        [
            "unfold Rdiv; apply Rmult_le_reg_l with 2.",
            "VernacExtend",
            "7606483ed61ba69faf47ffdae61002a9126f90fc"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "pattern 2 at 1; rewrite Rmult_comm.",
            "VernacExtend",
            "88c04225f0da0ba15136c3da0ebe2ae0cf1a20c3"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ rewrite Rmult_1_r | discrR ].",
            "VernacExtend",
            "604949df2965253839eaecfae1626e51448e6b97"
        ],
        [
            "rewrite double; apply Rplus_le_compat.",
            "VernacExtend",
            "db1f4d73c5ec0d17fd9546fceecbb195a4eb5a48"
        ],
        [
            "pattern x at 1; replace x with (Dichotomy_lb x y P 0); [ idtac | reflexivity ].",
            "VernacExtend",
            "2983620935cd71627cd482f522b7f31865796473"
        ],
        [
            "apply tech9.",
            "VernacExtend",
            "9e7450a2f6b4a56b55973921834e6e2904b3b80a"
        ],
        [
            "assert (H0 := dicho_lb_growing x y P H).",
            "VernacExtend",
            "3a8ba95837f3efd41d3588ebb0eeb243dc7570d6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_up_min : forall (x y:R) (P:R -> bool), x <= y -> has_lb (dicho_up x y P).",
            "VernacStartTheoremProof",
            "b24dc3ce69ef377180082270ccc0ad78e3d1cf50"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (forall n:nat, x <= dicho_up x y P n).",
            "VernacExtend",
            "69074b072b94dc3cdaaa5369cf2ff3e864745e34"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold has_lb.",
            "VernacExtend",
            "0bca23eb1d0714abb7864d93abc374efb6546481"
        ],
        [
            "unfold bound.",
            "VernacExtend",
            "59942e148dddd0d48f677cd1bd2ebe8e3f69ae85"
        ],
        [
            "exists (- x).",
            "VernacExtend",
            "08defb1588400a64e2b32a242cb38df0df66eff8"
        ],
        [
            "unfold is_upper_bound.",
            "VernacExtend",
            "8f2f4c45e0301f8635f36bde586c5301c04c8245"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "unfold opp_seq.",
            "VernacExtend",
            "71519d198ca4edf2d134115411d2ee1870568a91"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "apply dicho_up_min_x; assumption.",
            "VernacExtend",
            "1bccc623f537468e98ebdc0120d45d4f2f850146"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_lb_cv : forall (x y:R) (P:R -> bool), x <= y -> { l:R | Un_cv (dicho_lb x y P) l }.",
            "VernacStartTheoremProof",
            "9b6db0b490478ffa7014b2171dd6d610852857db"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply growing_cv.",
            "VernacExtend",
            "e20e5f8467bce8c3a237abdf7a77cf38c2d1f804"
        ],
        [
            "apply dicho_lb_growing; assumption.",
            "VernacExtend",
            "85fbbd87557610cb77a9c86f3ce5a52886c11c7a"
        ],
        [
            "apply dicho_lb_maj; assumption.",
            "VernacExtend",
            "2abdf5bf58032d2068385902d7b144bdbcb16a85"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_up_cv : forall (x y:R) (P:R -> bool), x <= y -> { l:R | Un_cv (dicho_up x y P) l }.",
            "VernacStartTheoremProof",
            "894635da70e02ea19113e488a1762d58f754de81"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply decreasing_cv.",
            "VernacExtend",
            "8dd04c05aace3951240559f529507b3396663df8"
        ],
        [
            "apply dicho_up_decreasing; assumption.",
            "VernacExtend",
            "1edb1b795bef16ab8a05ef3898ec5f4f86665e45"
        ],
        [
            "apply dicho_up_min; assumption.",
            "VernacExtend",
            "44f7e2c08cdb537c8d74052cb8c262a192928d64"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_lb_dicho_up : forall (x y:R) (P:R -> bool) (n:nat), x <= y -> dicho_up x y P n - dicho_lb x y P n = (y - x) / 2 ^ n.",
            "VernacStartTheoremProof",
            "968c9525eaddc628a7e02d8ccfe6735e68a5dc26"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold Rdiv; rewrite Rinv_1; ring.",
            "VernacExtend",
            "d7efc13b2cbc27b04019df8d936ef86ffc88edcd"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
            "VernacExtend",
            "c64e5d3909965502d943be8f9000d46151f19486"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "replace ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) * / 2 - Dichotomy_lb x y P n) with ((dicho_up x y P n - dicho_lb x y P n) / 2).",
            "VernacExtend",
            "5c8304c077d787e0b75432f137cf1d15200f1ed7"
        ],
        [
            "unfold Rdiv; rewrite Hrecn.",
            "VernacExtend",
            "62d9dcff0b3ea6e3d80c380d7c074b9dd7326148"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite Rinv_mult_distr.",
            "VernacExtend",
            "55666fd2776d160fb1bfd9d38a2833e66927f366"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "apply pow_nonzero; discrR.",
            "VernacExtend",
            "174877181c67a09e2e68285a2475567f220a254e"
        ],
        [
            "pattern (Dichotomy_lb x y P n) at 2; rewrite (double_var (Dichotomy_lb x y P n)); unfold dicho_up, dicho_lb, Rminus, Rdiv; ring.",
            "VernacExtend",
            "b1af5507265e3ac21a1d589a1ceb1a69c093f11f"
        ],
        [
            "replace (Dichotomy_ub x y P n - (Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2) with ((dicho_up x y P n - dicho_lb x y P n) / 2).",
            "VernacExtend",
            "52bd40cd6eabb392f8eac83c190e9c7bc1f3806e"
        ],
        [
            "unfold Rdiv; rewrite Hrecn.",
            "VernacExtend",
            "62d9dcff0b3ea6e3d80c380d7c074b9dd7326148"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite Rinv_mult_distr.",
            "VernacExtend",
            "55666fd2776d160fb1bfd9d38a2833e66927f366"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "apply pow_nonzero; discrR.",
            "VernacExtend",
            "174877181c67a09e2e68285a2475567f220a254e"
        ],
        [
            "pattern (Dichotomy_ub x y P n) at 1; rewrite (double_var (Dichotomy_ub x y P n)); unfold dicho_up, dicho_lb, Rminus, Rdiv; ring.",
            "VernacExtend",
            "bae8254e19c981a97af5d72a694361f9df07e6f9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pow_2_n (n:nat) := 2 ^ n.",
            "VernacDefinition",
            "9cc0de14c50330a6e8690a4c218b33241390a84c"
        ],
        [
            "Lemma pow_2_n_neq_R0 : forall n:nat, pow_2_n n <> 0.",
            "VernacStartTheoremProof",
            "40b1394b9dd0bc919366ed65b77d03d269826978"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold pow_2_n.",
            "VernacExtend",
            "29d5206c018e0cfec323b484e6556914284b290e"
        ],
        [
            "apply pow_nonzero.",
            "VernacExtend",
            "282744fa14f20635385d7e1ac0d1a961c143f970"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pow_2_n_growing : Un_growing pow_2_n.",
            "VernacStartTheoremProof",
            "ce06df4f8034471879f54309f7acd386767737ce"
        ],
        [
            "unfold Un_growing.",
            "VernacExtend",
            "bb82a49c6eee9f82a3c0d5b17d8a842d5e9abb49"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "replace (S n) with (n + 1)%nat; [ unfold pow_2_n; rewrite pow_add | ring ].",
            "VernacExtend",
            "3cac65dcb174e81015fb4999c3d575f1b69cc709"
        ],
        [
            "pattern (2 ^ n) at 1; rewrite <- Rmult_1_r.",
            "VernacExtend",
            "84a35af3a47ae5a3fe1876c7281ebdf35bb13d54"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "left; apply pow_lt; prove_sup0.",
            "VernacExtend",
            "7a1cdef40e05913ff100082e5c769cb263e1e6bc"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "pattern 1 at 1; rewrite <- Rplus_0_r; apply Rplus_le_compat_l; left; apply Rlt_0_1.",
            "VernacExtend",
            "fb2ea3c1633f411ee3ed2c926774667563a169f8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pow_2_n_infty : cv_infty pow_2_n.",
            "VernacStartTheoremProof",
            "04f0a5dd4f580a0b316057d4181719ba4d13776c"
        ],
        [
            "cut (forall N:nat, INR N <= 2 ^ N).",
            "VernacExtend",
            "3736623b4350d76427a257cfa67075cde075677f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold cv_infty.",
            "VernacExtend",
            "a5e18dc9ed2c960b7d0e9b000453ff35de082067"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct (total_order_T 0 M) as [[Hlt|<-]|Hgt].",
            "VernacExtend",
            "24fd2d505b23d91978f856269ff8a7c3ac753152"
        ],
        [
            "set (N := up M).",
            "VernacExtend",
            "6444cf1bdc39cf02e73d67896e7b12ca0987a405"
        ],
        [
            "cut (0 <= N)%Z.",
            "VernacExtend",
            "2eab488200cf5682394b412d786715950ea29dc6"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (IZN N H0); intros N0 H1.",
            "VernacExtend",
            "54b68431ddc3cf3b94271b10a6704b74580c25ac"
        ],
        [
            "exists N0.",
            "VernacExtend",
            "a4680772e3795b8c9a5b7bfd599c610f93f6185b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Rlt_le_trans with (INR N0).",
            "VernacExtend",
            "26ba78cd92cf955af13cb665a82e82a6c94b24b7"
        ],
        [
            "rewrite INR_IZR_INZ.",
            "VernacExtend",
            "8058c7a6913f85d26af3a54acc61c387d0a04933"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "unfold N.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "assert (H3 := archimed M).",
            "VernacExtend",
            "8c3f90798d96f672e25814136c44603e808fcafc"
        ],
        [
            "elim H3; intros; assumption.",
            "VernacExtend",
            "f02fb1b822404aba5ff1b686b4c857f74184021e"
        ],
        [
            "apply Rle_trans with (pow_2_n N0).",
            "VernacExtend",
            "97ded1ac81df07afd16d3e92a4274465fbacb055"
        ],
        [
            "unfold pow_2_n; apply H.",
            "VernacExtend",
            "6400a412aa93ca37485fa000760e913965080e07"
        ],
        [
            "apply Rge_le.",
            "VernacExtend",
            "eae8ed3f063c0c64fc52ba03563e73be950936a6"
        ],
        [
            "apply growing_prop.",
            "VernacExtend",
            "903110c99596f545a8de253be6ad2a3b4f14a745"
        ],
        [
            "apply pow_2_n_growing.",
            "VernacExtend",
            "df0a56c7c43137b7adba46b1f8402cd6298b3f2b"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply le_IZR.",
            "VernacExtend",
            "b9b46c6b2f4d4157bed90857db2b9c3ba33486ad"
        ],
        [
            "unfold N.",
            "VernacExtend",
            "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "assert (H0 := archimed M); elim H0; intros.",
            "VernacExtend",
            "825d0f2550bfa6b61c7f726cb262578fefcf0f62"
        ],
        [
            "left; apply Rlt_trans with M; assumption.",
            "VernacExtend",
            "4768b99b7412108f2fe45957fb60808e394d0126"
        ],
        [
            "exists 0%nat; intros.",
            "VernacExtend",
            "9f406775453fa10dd464f05a32d849b36e740518"
        ],
        [
            "unfold pow_2_n; apply pow_lt; prove_sup0.",
            "VernacExtend",
            "affe5bfc63b7b9c102f866268f74d326bedef29f"
        ],
        [
            "exists 0%nat; intros.",
            "VernacExtend",
            "9f406775453fa10dd464f05a32d849b36e740518"
        ],
        [
            "apply Rlt_trans with 0.",
            "VernacExtend",
            "e7bc3d716eb3bc1bf5114b110153540e6a861842"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold pow_2_n; apply pow_lt; prove_sup0.",
            "VernacExtend",
            "affe5bfc63b7b9c102f866268f74d326bedef29f"
        ],
        [
            "simple induction N.",
            "VernacExtend",
            "7826c534e174ed32414d4f01d9ebb4dd53d20f59"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "left; apply Rlt_0_1.",
            "VernacExtend",
            "4038dd3f68ab1cd8921ed1c273f77fae982c62c1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pattern (S n) at 2; replace (S n) with (n + 1)%nat; [ idtac | ring ].",
            "VernacExtend",
            "3d3a4a54c45154fe3dd65dafd03c8529b3d9368c"
        ],
        [
            "rewrite S_INR; rewrite pow_add.",
            "VernacExtend",
            "1104663662b82c973a242c79b41d926a657e4df3"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "apply Rle_trans with (2 ^ n).",
            "VernacExtend",
            "0d5774eb2050c40a765cb287a5f8f04bf68f13b6"
        ],
        [
            "rewrite <- (Rplus_comm 1).",
            "VernacExtend",
            "919534b7a31c20574531b7d8e5e44c432ec75771"
        ],
        [
            "rewrite <- (Rmult_1_r (INR n)).",
            "VernacExtend",
            "18f4ed423ccc0c3c6f33b030705e8f9a927135a3"
        ],
        [
            "apply (poly n 1).",
            "VernacExtend",
            "0d58c0d414bac5dba51f5832c0424f623b784e6c"
        ],
        [
            "apply Rlt_0_1.",
            "VernacExtend",
            "c3f675388bf844e0740197fd71afa66e5eef091d"
        ],
        [
            "pattern (2 ^ n) at 1; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "616a5163988151abcc12330ddcd18060d866774b"
        ],
        [
            "rewrite <- (Rmult_comm 2).",
            "VernacExtend",
            "ec1b6f591db64e627c4aad283471619dcbe50a75"
        ],
        [
            "rewrite double.",
            "VernacExtend",
            "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
        ],
        [
            "apply Rplus_le_compat_l.",
            "VernacExtend",
            "3af9ea371eb281cf0e58041faab020bb6798a832"
        ],
        [
            "left; apply pow_lt; prove_sup0.",
            "VernacExtend",
            "7a1cdef40e05913ff100082e5c769cb263e1e6bc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cv_dicho : forall (x y l1 l2:R) (P:R -> bool), x <= y -> Un_cv (dicho_lb x y P) l1 -> Un_cv (dicho_up x y P) l2 -> l1 = l2.",
            "VernacStartTheoremProof",
            "b360b024a578cc36f136689756cdf532cade8a1e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H2 := CV_minus _ _ _ _ H0 H1).",
            "VernacExtend",
            "bcf053f541c655e42c2c295313349bc914efdd16"
        ],
        [
            "cut (Un_cv (fun i:nat => dicho_lb x y P i - dicho_up x y P i) 0).",
            "VernacExtend",
            "25eb98c0e8cc05c186b835f966a032c5ea9b3a08"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H4 := UL_sequence _ _ _ H2 H3).",
            "VernacExtend",
            "257b8a5e5e21898b7f70cf40517fc2eeb7526cb6"
        ],
        [
            "symmetry ; apply Rminus_diag_uniq_sym; assumption.",
            "VernacExtend",
            "34c2499f6c138a770bc146aa76f8400753ea788c"
        ],
        [
            "unfold Un_cv; unfold R_dist.",
            "VernacExtend",
            "af861a65ba3ecd32bcb7a3d0693f2792bd8cb8a4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H4 := cv_infty_cv_R0 pow_2_n pow_2_n_neq_R0 pow_2_n_infty).",
            "VernacExtend",
            "cc3154c30b7466e46d13de7fff1c9660b21c6e33"
        ],
        [
            "destruct (total_order_T x y) as [[ Hlt | -> ]|Hgt].",
            "VernacExtend",
            "2d2916e53df51b827cc16451e5d73f3b6d678b6d"
        ],
        [
            "unfold Un_cv in H4; unfold R_dist in H4.",
            "VernacExtend",
            "759a1ee4b391393ac4ac20d6dc2935c482cfd64b"
        ],
        [
            "cut (0 < y - x).",
            "VernacExtend",
            "1ab1d466c014e4bfdc313a0a0aa1110acb6d490b"
        ],
        [
            "intro Hyp.",
            "VernacExtend",
            "405fde68b6462b2273630290b90437ccd35606f7"
        ],
        [
            "cut (0 < eps / (y - x)).",
            "VernacExtend",
            "a6b5480f7e328f1cceb55c79f3253103b068a4e8"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (H4 (eps / (y - x)) H5); intros N H6.",
            "VernacExtend",
            "38931f919d6d9f35e2ed07f75a0c2ac7568e9b74"
        ],
        [
            "exists N; intros.",
            "VernacExtend",
            "cfd63f1f7fafabc1d063c17632530a627ae99922"
        ],
        [
            "replace (dicho_lb x y P n - dicho_up x y P n - 0) with (dicho_lb x y P n - dicho_up x y P n); [ idtac | ring ].",
            "VernacExtend",
            "f5e09a3fd3febe0d260acdbf0c1a478d97c779ef"
        ],
        [
            "rewrite <- Rabs_Ropp.",
            "VernacExtend",
            "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
        ],
        [
            "rewrite Ropp_minus_distr'.",
            "VernacExtend",
            "f595d68cd20a95eb1a7ae9edfb6f2cd45f285ee3"
        ],
        [
            "rewrite dicho_lb_dicho_up.",
            "VernacExtend",
            "043975674312e79b5b49fd0639a1836b94e1c359"
        ],
        [
            "unfold Rdiv; rewrite Rabs_mult.",
            "VernacExtend",
            "ffb5e4297bd1945ec8a2777fcbcdf2c5e3b93bce"
        ],
        [
            "rewrite (Rabs_right (y - x)).",
            "VernacExtend",
            "f4693597a1edfef94b896df30d733db375cda667"
        ],
        [
            "apply Rmult_lt_reg_l with (/ (y - x)).",
            "VernacExtend",
            "d934efeafe95c7935c0ad7f790f276ad33304310"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "eccb067dc9e836ad48bf16c61cd308004f5d6712"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "replace (/ 2 ^ n) with (/ 2 ^ n - 0); [ unfold pow_2_n, Rdiv in H6; rewrite <- (Rmult_comm eps); apply H6; assumption | ring ].",
            "VernacExtend",
            "113875ba45e6da492b03bf1bac10b5f9faeffde3"
        ],
        [
            "red; intro; rewrite H8 in Hyp; elim (Rlt_irrefl _ Hyp).",
            "VernacExtend",
            "e4fcd5030561471d6af1b2cad812b29c66cbab7d"
        ],
        [
            "apply Rle_ge.",
            "VernacExtend",
            "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
        ],
        [
            "apply Rplus_le_reg_l with x; rewrite Rplus_0_r.",
            "VernacExtend",
            "52faf44392c7fb137b7cc2632e1e31c701a698c8"
        ],
        [
            "replace (x + (y - x)) with y; [ assumption | ring ].",
            "VernacExtend",
            "17e4d6169252288e789ba9a61b66fcf58eb132c0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; assumption ].",
            "VernacExtend",
            "94406d251efdbc60409aaa78c38bd0b607071036"
        ],
        [
            "apply Rplus_lt_reg_l with x; rewrite Rplus_0_r.",
            "VernacExtend",
            "93d8747421e3ec871422f529a50a5bbdb5406ca0"
        ],
        [
            "replace (x + (y - x)) with y; [ assumption | ring ].",
            "VernacExtend",
            "17e4d6169252288e789ba9a61b66fcf58eb132c0"
        ],
        [
            "exists 0%nat; intros.",
            "VernacExtend",
            "9f406775453fa10dd464f05a32d849b36e740518"
        ],
        [
            "replace (dicho_lb y y P n - dicho_up y y P n - 0) with (dicho_lb y y P n - dicho_up y y P n); [ idtac | ring ].",
            "VernacExtend",
            "f9488778878fa3c4c730bb60234615dd283b0705"
        ],
        [
            "rewrite <- Rabs_Ropp.",
            "VernacExtend",
            "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
        ],
        [
            "rewrite Ropp_minus_distr'.",
            "VernacExtend",
            "f595d68cd20a95eb1a7ae9edfb6f2cd45f285ee3"
        ],
        [
            "rewrite dicho_lb_dicho_up.",
            "VernacExtend",
            "043975674312e79b5b49fd0639a1836b94e1c359"
        ],
        [
            "unfold Rminus, Rdiv; rewrite Rplus_opp_r; rewrite Rmult_0_l; rewrite Rabs_R0; assumption.",
            "VernacExtend",
            "afa352c0686060d9df09964c47b964c969dab086"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
            "VernacExtend",
            "76db159a1634a6baa37b0f6d47b562c7c16945da"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cond_positivity (x:R) : bool := match Rle_dec 0 x with | left _ => true | right _ => false end.",
            "VernacDefinition",
            "7c8d39f3195e576da5ff514caf1f34d9a432914a"
        ],
        [
            "Lemma continuity_seq : forall (f:R -> R) (Un:nat -> R) (l:R), continuity_pt f l -> Un_cv Un l -> Un_cv (fun i:nat => f (Un i)) (f l).",
            "VernacStartTheoremProof",
            "4204d3fc3b29de5b01cc6258ee2eaa90a1d29982"
        ],
        [
            "unfold continuity_pt, Un_cv; unfold continue_in.",
            "VernacExtend",
            "18b5820286a4b7a8c12719758d0172841c1ed1a4"
        ],
        [
            "unfold limit1_in.",
            "VernacExtend",
            "ce7ab0935c3a5d7a35437d9fe3504b1e6905f79d"
        ],
        [
            "unfold limit_in.",
            "VernacExtend",
            "3350bee32e818c7b5f36ae78ba60d5c375c28a89"
        ],
        [
            "unfold dist.",
            "VernacExtend",
            "565c2bae3077fd0bceaedfaf7a8cf6285d052353"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "unfold R_dist.",
            "VernacExtend",
            "9d14879a55d02ad54565968e31b64da7aeb66d97"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (H eps H1); intros alp H2.",
            "VernacExtend",
            "1e1adec75874f8f848a406339af1cdcf14e57648"
        ],
        [
            "elim H2; intros.",
            "VernacExtend",
            "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
        ],
        [
            "elim (H0 alp H3); intros N H5.",
            "VernacExtend",
            "bffd692e87b61d9475f9f881388effc98806fa51"
        ],
        [
            "exists N; intros.",
            "VernacExtend",
            "cfd63f1f7fafabc1d063c17632530a627ae99922"
        ],
        [
            "case (Req_dec (Un n) l); intro.",
            "VernacExtend",
            "db79dedbcef47eed70346a1079837bde1010c56e"
        ],
        [
            "rewrite H7; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
            "VernacExtend",
            "09e894f1902e6e7f44f1f0a3316e9242bbe0faee"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold D_x, no_cond.",
            "VernacExtend",
            "abf922a23fd977fc0650bb6c40e8f5a3a9fb7f07"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply (not_eq_sym (A:=R)); assumption.",
            "VernacExtend",
            "86dfb53d08f7d134967f97a76eb926318b566544"
        ],
        [
            "apply H5; assumption.",
            "VernacExtend",
            "8f860832491462a0a9db7bd7c081da8cdc789cad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_lb_car : forall (x y:R) (P:R -> bool) (n:nat), P x = false -> P (dicho_lb x y P n) = false.",
            "VernacStartTheoremProof",
            "9fdd58c9186a577c41c9ed66e5a5a5a3724459be"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (sumbool_of_bool (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2))) as [Heq|Heq].",
            "VernacExtend",
            "d4079ecad8d24d921b0a075e7fc24d56ced92aa6"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite Heq.",
            "VernacExtend",
            "b7499625fc2b45a0798969f6886262f98cfbb890"
        ],
        [
            "unfold dicho_lb in Hrecn; assumption.",
            "VernacExtend",
            "88c71365865256080e94af0b490e5be9e9fd4ce3"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite Heq.",
            "VernacExtend",
            "b7499625fc2b45a0798969f6886262f98cfbb890"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma dicho_up_car : forall (x y:R) (P:R -> bool) (n:nat), P y = true -> P (dicho_up x y P n) = true.",
            "VernacStartTheoremProof",
            "e4d0a1ac12f24d8067c2a8f219ab4ab3311a7284"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (sumbool_of_bool (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2))) as [Heq|Heq].",
            "VernacExtend",
            "d4079ecad8d24d921b0a075e7fc24d56ced92aa6"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite Heq.",
            "VernacExtend",
            "b7499625fc2b45a0798969f6886262f98cfbb890"
        ],
        [
            "unfold dicho_lb in Hrecn; assumption.",
            "VernacExtend",
            "88c71365865256080e94af0b490e5be9e9fd4ce3"
        ],
        [
            "+",
            "VernacBullet",
            "3ddfc0515f916e562bacf863647e0107cb15aa13"
        ],
        [
            "rewrite Heq.",
            "VernacExtend",
            "b7499625fc2b45a0798969f6886262f98cfbb890"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cv_pow_half : forall a, Un_cv (fun n => a/2^n) 0.",
            "VernacStartTheoremProof",
            "03c5735c468b171c03ba58012a54efdd504216bf"
        ],
        [
            "intros a; unfold Rdiv; replace 0 with (a * 0) by ring.",
            "VernacExtend",
            "2f4bae9a1c8ab519a73e716d6c47a84e75e5f65d"
        ],
        [
            "apply CV_mult.",
            "VernacExtend",
            "7df85077b85eadac24b572b1d2ba1d223ec90eca"
        ],
        [
            "intros eps ep; exists 0%nat; rewrite R_dist_eq; intros n _; assumption.",
            "VernacExtend",
            "54a5a7d6c611f628eb44e91597879757d30e0b0a"
        ],
        [
            "exact (cv_infty_cv_R0 pow_2_n pow_2_n_neq_R0 pow_2_n_infty).",
            "VernacExtend",
            "7558aec40987d33020349efc188c6b0082475a73"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma IVT : forall (f:R -> R) (x y:R), continuity f -> x < y -> f x < 0 -> 0 < f y -> { z:R | x <= z <= y /\\ f z = 0 }.",
            "VernacStartTheoremProof",
            "dd82f1230078b1a1c3ba3ad12c69f772e82299c4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (x <= y) by (left; assumption).",
            "VernacExtend",
            "778e6c26c5c7848890ee02da70772fa22c00ced8"
        ],
        [
            "destruct (dicho_lb_cv x y (fun z:R => cond_positivity (f z)) H3) as (x1,p0).",
            "VernacExtend",
            "ca8e950e2d8803127ad1f4f0e6b8e288c7ee9308"
        ],
        [
            "destruct (dicho_up_cv x y (fun z:R => cond_positivity (f z)) H3) as (x0,p).",
            "VernacExtend",
            "45ba4e10a207d75050b1c5d580fd256928e3f0ea"
        ],
        [
            "assert (H4 := cv_dicho _ _ _ _ _ H3 p0 p).",
            "VernacExtend",
            "80b7d6771d87bca16d694c429d7bd242400ecdf2"
        ],
        [
            "rewrite H4 in p0.",
            "VernacExtend",
            "819e611699223dbbd2216aa26c348eae8efaa65b"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with (dicho_lb x y (fun z:R => cond_positivity (f z)) 0).",
            "VernacExtend",
            "be5c1aca34b6efd32abf1108ece1d191e15aac7e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "apply growing_ineq.",
            "VernacExtend",
            "714b677d9b8de67abdaec4b69605474cf818896d"
        ],
        [
            "apply dicho_lb_growing; assumption.",
            "VernacExtend",
            "85fbbd87557610cb77a9c86f3ce5a52886c11c7a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_trans with (dicho_up x y (fun z:R => cond_positivity (f z)) 0).",
            "VernacExtend",
            "8e2d5462e31c19ca1eb2ed1fe0f8d717cffa09bd"
        ],
        [
            "apply decreasing_ineq.",
            "VernacExtend",
            "f70e88e40d0ff07d62a94e461b1dd4e8f9e856e0"
        ],
        [
            "apply dicho_up_decreasing; assumption.",
            "VernacExtend",
            "1edb1b795bef16ab8a05ef3898ec5f4f86665e45"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "set (Vn := fun n:nat => dicho_lb x y (fun z:R => cond_positivity (f z)) n).",
            "VernacExtend",
            "53b99749f3fbbbe2784304f914fbfd0eaccebc16"
        ],
        [
            "set (Wn := fun n:nat => dicho_up x y (fun z:R => cond_positivity (f z)) n).",
            "VernacExtend",
            "81b111054f8f1024f30fe18187cb95dcb4798687"
        ],
        [
            "cut ((forall n:nat, f (Vn n) <= 0) -> f x0 <= 0).",
            "VernacExtend",
            "a1dea0df618ace53eaa6344993b910c8cf4b22cc"
        ],
        [
            "cut ((forall n:nat, 0 <= f (Wn n)) -> 0 <= f x0).",
            "VernacExtend",
            "7359d0d78330f3f07341eaddb03729d7bc956058"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (forall n:nat, f (Vn n) <= 0).",
            "VernacExtend",
            "f6fb3ec043b6dd1b3832b1a2244d0b32a593198e"
        ],
        [
            "cut (forall n:nat, 0 <= f (Wn n)).",
            "VernacExtend",
            "a34166762d19a67759939874482b28c923f31b8a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H9 := H6 H8).",
            "VernacExtend",
            "751caa1b1949beddf48c2c9e65f078511e3aa7ce"
        ],
        [
            "assert (H10 := H5 H7).",
            "VernacExtend",
            "9cff55f32581ea1c696531f0f9a06340a82d886d"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold Wn.",
            "VernacExtend",
            "5484c9f9f163d4152f79a42c70a9497175dbed5b"
        ],
        [
            "cut (forall z:R, cond_positivity z = true <-> 0 <= z).",
            "VernacExtend",
            "2915a5f89143bd3d627c40846ee75cfb0c7931fa"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H8 := dicho_up_car x y (fun z:R => cond_positivity (f z)) n).",
            "VernacExtend",
            "5e080d7dcb6d8afa9d3cd193bab5f49848d7d507"
        ],
        [
            "elim (H7 (f (dicho_up x y (fun z:R => cond_positivity (f z)) n))); intros.",
            "VernacExtend",
            "aa53a29edd1515ad2a3932db50461e65bc57fa9e"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "apply H8.",
            "VernacExtend",
            "2014720df0411c2963f20792fe424080d05f44aa"
        ],
        [
            "elim (H7 (f y)); intros.",
            "VernacExtend",
            "1228404ea7aa2f8919e59445ce6030a39c4f86fb"
        ],
        [
            "apply H12.",
            "VernacExtend",
            "5a745b26a30edb1cd58baf290f56d389ba5cf959"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold cond_positivity.",
            "VernacExtend",
            "f5b411afc0a5e4fcab47ee21bc146b77ba14a760"
        ],
        [
            "case (Rle_dec 0 z) as [Hle|Hnle].",
            "VernacExtend",
            "4fd62d3dafcdcf97fcf5d1565da9ec1636c7ef77"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro; assumption.",
            "VernacExtend",
            "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
        ],
        [
            "intro; reflexivity.",
            "VernacExtend",
            "dc2d3bdaf5fe0de88334762a176f5b2d84487862"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro feqt;discriminate feqt.",
            "VernacExtend",
            "d93ce505ef755eb96a49389e26333d4d512fe332"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "contradiction.",
            "VernacExtend",
            "9b6a5c45e1144cbbccd544effb2a97082518704a"
        ],
        [
            "unfold Vn.",
            "VernacExtend",
            "1dd0030463a130debb17b61468523e237c4d4b31"
        ],
        [
            "cut (forall z:R, cond_positivity z = false <-> z < 0).",
            "VernacExtend",
            "f975cf4b92ec51fda1a92cad1eb4e3584cd9598f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H8 := dicho_lb_car x y (fun z:R => cond_positivity (f z)) n).",
            "VernacExtend",
            "b03916d948d173d7a8230d8d2ae11fcc2fe6a523"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "elim (H7 (f (dicho_lb x y (fun z:R => cond_positivity (f z)) n))); intros.",
            "VernacExtend",
            "37855fa0c47aa0a1e0cafdc8d002ce0cd553d90d"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "apply H8.",
            "VernacExtend",
            "2014720df0411c2963f20792fe424080d05f44aa"
        ],
        [
            "elim (H7 (f x)); intros.",
            "VernacExtend",
            "9618fae7d42a5e4ede0f4dc68411cb039ec6427e"
        ],
        [
            "apply H12.",
            "VernacExtend",
            "5a745b26a30edb1cd58baf290f56d389ba5cf959"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold cond_positivity.",
            "VernacExtend",
            "f5b411afc0a5e4fcab47ee21bc146b77ba14a760"
        ],
        [
            "case (Rle_dec 0 z) as [Hle|Hnle].",
            "VernacExtend",
            "4fd62d3dafcdcf97fcf5d1565da9ec1636c7ef77"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro feqt; discriminate feqt.",
            "VernacExtend",
            "d93ce505ef755eb96a49389e26333d4d512fe332"
        ],
        [
            "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle H7)).",
            "VernacExtend",
            "591eb022aa00abf7dc0dbb5384300d780a66412e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro; auto with real.",
            "VernacExtend",
            "b2ed16b62664ad0304e1f5d05697ba9f02acad03"
        ],
        [
            "intro; reflexivity.",
            "VernacExtend",
            "dc2d3bdaf5fe0de88334762a176f5b2d84487862"
        ],
        [
            "cut (Un_cv Wn x0).",
            "VernacExtend",
            "098e61430148344cf3de56dd80d43dfa97ccdafd"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H7 := continuity_seq f Wn x0 (H x0) H5).",
            "VernacExtend",
            "f57e4ce48691294f881f85cd4674399f05216fae"
        ],
        [
            "destruct (total_order_T 0 (f x0)) as [[Hlt|<-]|Hgt].",
            "VernacExtend",
            "50cf822fbe440251d5d72db815975fbfc96b8248"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "unfold Un_cv in H7; unfold R_dist in H7.",
            "VernacExtend",
            "9776e854057e49ed840a26fd8cfcb77537d3c542"
        ],
        [
            "cut (0 < - f x0).",
            "VernacExtend",
            "3eb292ea41c2801d2cfbe3e8906f1f51815d11d4"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (H7 (- f x0) H8); intros.",
            "VernacExtend",
            "0b08d99f7ef5a48e907cd4c01f9e0cd00c7beca2"
        ],
        [
            "cut (x2 >= x2)%nat; [ intro | unfold ge; apply le_n ].",
            "VernacExtend",
            "9d5d47d11098e4e39b4a851b138a3472df417387"
        ],
        [
            "assert (H11 := H9 x2 H10).",
            "VernacExtend",
            "3689ebce046e1ce95f44d091185a16b5a3888bef"
        ],
        [
            "rewrite Rabs_right in H11.",
            "VernacExtend",
            "144e693152c8c0a16c30b04ac66155c2831223fd"
        ],
        [
            "pattern (- f x0) at 1 in H11; rewrite <- Rplus_0_r in H11.",
            "VernacExtend",
            "ed849f46fd10776f9808b4fd379edf7039bf4c65"
        ],
        [
            "unfold Rminus in H11; rewrite (Rplus_comm (f (Wn x2))) in H11.",
            "VernacExtend",
            "a9e73d5df964427c5fce04bf494e12ac13531f8c"
        ],
        [
            "assert (H12 := Rplus_lt_reg_l _ _ _ H11).",
            "VernacExtend",
            "365df9ca6409683824912eceaaa9abfff8aa9c19"
        ],
        [
            "assert (H13 := H6 x2).",
            "VernacExtend",
            "f304ea6ea59ab9edebd8b5b9b93fa8e0c1aafd01"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H13 H12)).",
            "VernacExtend",
            "c7a8e625b6517edad594eef9785aa45d5e63640a"
        ],
        [
            "apply Rle_ge; left; unfold Rminus; apply Rplus_le_lt_0_compat.",
            "VernacExtend",
            "fc320cd48c45288d24386e640e6c9dbb071e75e6"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "exact H8.",
            "VernacExtend",
            "125096764f05c2e6b59a11140e6c3ad0b07b1f9e"
        ],
        [
            "apply Ropp_0_gt_lt_contravar; assumption.",
            "VernacExtend",
            "44c1529c7f8ab9cf2edf01ae1727eaf3cc83d329"
        ],
        [
            "unfold Wn; assumption.",
            "VernacExtend",
            "f39383ef8f877fe307b6dc4a2ec08eacfdbc5d3a"
        ],
        [
            "cut (Un_cv Vn x0).",
            "VernacExtend",
            "e7cb789ec521f1c3fc632cf263e825b2f9731212"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H7 := continuity_seq f Vn x0 (H x0) H5).",
            "VernacExtend",
            "f862fbdb5022529f7612a155a0fa2cc9ff9a6cca"
        ],
        [
            "destruct (total_order_T 0 (f x0)) as [[Hlt|<-]|Hgt].",
            "VernacExtend",
            "50cf822fbe440251d5d72db815975fbfc96b8248"
        ],
        [
            "unfold Un_cv in H7; unfold R_dist in H7.",
            "VernacExtend",
            "9776e854057e49ed840a26fd8cfcb77537d3c542"
        ],
        [
            "elim (H7 (f x0) Hlt); intros.",
            "VernacExtend",
            "780778e990a1baba29ff50ce129aaeba3576a528"
        ],
        [
            "cut (x2 >= x2)%nat; [ intro | unfold ge; apply le_n ].",
            "VernacExtend",
            "9d5d47d11098e4e39b4a851b138a3472df417387"
        ],
        [
            "assert (H10 := H8 x2 H9).",
            "VernacExtend",
            "d5500d58f3d647a6ba8a2cd57d954add11bb0a0c"
        ],
        [
            "rewrite Rabs_left in H10.",
            "VernacExtend",
            "14240077d5d0707ff1832e8e7663c78fc55bc673"
        ],
        [
            "pattern (f x0) at 2 in H10; rewrite <- Rplus_0_r in H10.",
            "VernacExtend",
            "d2423523019853efef8b697eaf583c1db9c9175a"
        ],
        [
            "rewrite Ropp_minus_distr' in H10.",
            "VernacExtend",
            "4e1b9bc4e3a3f1a1969bfa40086e2bfda02081bc"
        ],
        [
            "unfold Rminus in H10.",
            "VernacExtend",
            "77311f9fa35fb02c5b6ec220e504567453252063"
        ],
        [
            "assert (H11 := Rplus_lt_reg_l _ _ _ H10).",
            "VernacExtend",
            "80861435817a891c0537fa9eda348a991ef75e72"
        ],
        [
            "assert (H12 := H6 x2).",
            "VernacExtend",
            "d06ebb336971dc23196f3c973a47ed6391571067"
        ],
        [
            "cut (0 < f (Vn x2)).",
            "VernacExtend",
            "48786e720162926cc888da836a3da01ca2d3937a"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H13 H12)).",
            "VernacExtend",
            "abef24b80847029d3dcda2f5362d7d67e8b85af9"
        ],
        [
            "rewrite <- (Ropp_involutive (f (Vn x2))).",
            "VernacExtend",
            "3521ec98856061d4b6093f13d499984823eddaf9"
        ],
        [
            "apply Ropp_0_gt_lt_contravar; assumption.",
            "VernacExtend",
            "44c1529c7f8ab9cf2edf01ae1727eaf3cc83d329"
        ],
        [
            "apply Rplus_lt_reg_l with (f x0 - f (Vn x2)).",
            "VernacExtend",
            "605c5f184f936589733cc93384edfab06824e444"
        ],
        [
            "rewrite Rplus_0_r; replace (f x0 - f (Vn x2) + (f (Vn x2) - f x0)) with 0; [ unfold Rminus; apply Rplus_lt_le_0_compat | ring ].",
            "VernacExtend",
            "7985f4d41da9c7aa64199a4394f48fab964da766"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Ropp_0_ge_le_contravar; apply Rle_ge; apply H6.",
            "VernacExtend",
            "4bc3a81b9e77ee90d7c1ecc7ff04aa967662684f"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "unfold Vn; assumption.",
            "VernacExtend",
            "e2dc6aa16e8bac10fa3f23df119129d60b493bd0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma IVT_cor : forall (f:R -> R) (x y:R), continuity f -> x <= y -> f x * f y <= 0 -> { z:R | x <= z <= y /\\ f z = 0 }.",
            "VernacStartTheoremProof",
            "c3e9ff9da2171a27cc77f577fb022346421db1e8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (total_order_T 0 (f x)) as [[Hltx|Heqx]|Hgtx].",
            "VernacExtend",
            "7bb6fc0f160b342269d0ae5ede0a3aa0e9b51a8f"
        ],
        [
            "destruct (total_order_T 0 (f y)) as [[Hlty|Heqy]|Hgty].",
            "VernacExtend",
            "a5b96bd2977d4d7f8ba531616aef95311ea67938"
        ],
        [
            "cut (0 < f x * f y); [ intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 H2)) | apply Rmult_lt_0_compat; assumption ].",
            "VernacExtend",
            "6351671a71e5aab5e6585996d4918c6a41e0c3bb"
        ],
        [
            "exists y.",
            "VernacExtend",
            "1c06cb2466f48b6def24e74ddeda9956981c0a0a"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "split; [ assumption | right; reflexivity ].",
            "VernacExtend",
            "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
        ],
        [
            "symmetry ; exact Heqy.",
            "VernacExtend",
            "0016014bb5d8daf61991a6aa728f7711c7a75c71"
        ],
        [
            "cut (x < y).",
            "VernacExtend",
            "6c6411c16220ba0869c7b7f288b4232e5f90a4af"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H3 := IVT (- f)%F x y (continuity_opp f H) H2).",
            "VernacExtend",
            "1da30e717a996cfe12ae19645ffb920d89a6a8ac"
        ],
        [
            "cut ((- f)%F x < 0).",
            "VernacExtend",
            "6a14574ddbedb89ca2e9bc492074f1655e9b3374"
        ],
        [
            "cut (0 < (- f)%F y).",
            "VernacExtend",
            "7569d1a0c34ebfdd050e9979377287091b67b8ce"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (H3 H5 H4) as (x0,[]).",
            "VernacExtend",
            "64848efd53f5104767ddfd0733dbf67ba40a5d30"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold opp_fct in H7.",
            "VernacExtend",
            "5ab948addc1c8eb85b8499ef167f08d1837935d9"
        ],
        [
            "rewrite <- (Ropp_involutive (f x0)).",
            "VernacExtend",
            "9774b009b2cc6ac4cd14fe7e147962793527518e"
        ],
        [
            "apply Ropp_eq_0_compat; assumption.",
            "VernacExtend",
            "699618a211255e5caeecf292d6b0d871c76fd9f8"
        ],
        [
            "unfold opp_fct; apply Ropp_0_gt_lt_contravar; assumption.",
            "VernacExtend",
            "a2e79271e270e172dcc32ae8a197940877f70423"
        ],
        [
            "unfold opp_fct.",
            "VernacExtend",
            "4e63c1953428e7d557cffe0058417d26d5bb9bf7"
        ],
        [
            "apply Rplus_lt_reg_l with (f x); rewrite Rplus_opp_r; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "5534f2ab3776190317d6cf3331670324baa07479"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H2 in Hltx.",
            "VernacExtend",
            "f10f5502f9f8634fbc3a2c18b1c3cbbced2927d1"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_trans _ _ _ Hgty Hltx)).",
            "VernacExtend",
            "5d8e39c0b94fe5503818164e735b588c7b82d325"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "split; [ right; reflexivity | assumption ].",
            "VernacExtend",
            "3e8d5ea4153788a4b3b4f71e65238c3c1dabd9c8"
        ],
        [
            "symmetry ; assumption.",
            "VernacExtend",
            "936f544fa969baad9c600ccc844230fa4d067c8b"
        ],
        [
            "destruct (total_order_T 0 (f y)) as [[Hlty|Heqy]|Hgty].",
            "VernacExtend",
            "a5b96bd2977d4d7f8ba531616aef95311ea67938"
        ],
        [
            "cut (x < y).",
            "VernacExtend",
            "6c6411c16220ba0869c7b7f288b4232e5f90a4af"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply IVT; assumption.",
            "VernacExtend",
            "421d2289504f229fad5574b98a1c03a9d3854331"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H2 in Hgtx.",
            "VernacExtend",
            "3a3d85d2ea6bfa63a54b5da7f36d5c4aea68d034"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_trans _ _ _ Hlty Hgtx)).",
            "VernacExtend",
            "ab63fce4e4a5aee6867ccb29e8984d229e5d8b0a"
        ],
        [
            "exists y.",
            "VernacExtend",
            "1c06cb2466f48b6def24e74ddeda9956981c0a0a"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "split; [ assumption | right; reflexivity ].",
            "VernacExtend",
            "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
        ],
        [
            "symmetry ; assumption.",
            "VernacExtend",
            "936f544fa969baad9c600ccc844230fa4d067c8b"
        ],
        [
            "cut (0 < f x * f y).",
            "VernacExtend",
            "54807a3c3f1f9c692c0fcb9ce0462bbb001aa62a"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H2 H1)).",
            "VernacExtend",
            "d4f375d8d005f3a260ed94543228eefae5fb46d5"
        ],
        [
            "rewrite <- Rmult_opp_opp; apply Rmult_lt_0_compat; apply Ropp_0_gt_lt_contravar; assumption.",
            "VernacExtend",
            "1d46a9a91951ddc9b44cd87dc60bd4b3b4433663"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqrt_exists : forall y:R, 0 <= y -> { z:R | 0 <= z /\\ y = Rsqr z }.",
            "VernacStartTheoremProof",
            "beb637ff07e567e33132737592b8aaea789ced5a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "set (f := fun x:R => Rsqr x - y).",
            "VernacExtend",
            "8b01c1968eb3691db83cb8877b5f43ceb084e8c0"
        ],
        [
            "cut (f 0 <= 0).",
            "VernacExtend",
            "becb99352507839981676dac48ceec038db7a1a6"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "cut (continuity f).",
            "VernacExtend",
            "783fe01df63d0447f62267751ec5c58652527ca2"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct (total_order_T y 1) as [[Hlt| -> ]|Hgt].",
            "VernacExtend",
            "3f1b41b0b54e52f4d0b880538629bd1b07b077eb"
        ],
        [
            "cut (0 <= f 1).",
            "VernacExtend",
            "50cf54e2c5f5f0acb242045f3832e0eee8d30ac5"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "cut (f 0 * f 1 <= 0).",
            "VernacExtend",
            "f52485de12df1702fdddd6f35a5d617fc1d55890"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (X := IVT_cor f 0 1 H1 (Rlt_le _ _ Rlt_0_1) H3).",
            "VernacExtend",
            "d60a9ff37ec3af6ca76b3c4171cb9bda3d40938c"
        ],
        [
            "elim X; intros t H4.",
            "VernacExtend",
            "3d62fd86a0f99d6df7477545394c131e89225ee4"
        ],
        [
            "exists t.",
            "VernacExtend",
            "1970ed3dcf3aed959b3c5a6207f3f37122ce8608"
        ],
        [
            "elim H4; intros.",
            "VernacExtend",
            "ef88f175449d4af46e0685700665ce0cdf3e5695"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "elim H5; intros; assumption.",
            "VernacExtend",
            "e3759bfc7109dba24b94887055d32bb02045fe9b"
        ],
        [
            "unfold f in H6.",
            "VernacExtend",
            "a737fee3ed834b8ddc23196a3d58b7f80f7bb820"
        ],
        [
            "apply Rminus_diag_uniq_sym; exact H6.",
            "VernacExtend",
            "6773d6211c4a2ae9e2beeb7d703406008d0987dc"
        ],
        [
            "rewrite Rmult_comm; pattern 0 at 2; rewrite <- (Rmult_0_r (f 1)).",
            "VernacExtend",
            "edcbd2e92e2051f5db4988ce7fd738c3b7da9af3"
        ],
        [
            "apply Rmult_le_compat_l; assumption.",
            "VernacExtend",
            "c1d10d7ba22f8cceb21d711464ab91c1d514e68d"
        ],
        [
            "unfold f.",
            "VernacExtend",
            "54a386f4161710b69df4a2025df24a14e842ecf2"
        ],
        [
            "rewrite Rsqr_1.",
            "VernacExtend",
            "8b4cdcf64b71654bed8bc6664a5580484e7140b9"
        ],
        [
            "apply Rplus_le_reg_l with y.",
            "VernacExtend",
            "1a00f6d08821d1775665132ac8811e0c258cb846"
        ],
        [
            "rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus; rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; left; assumption.",
            "VernacExtend",
            "cc53d22176bb777c79053f1d5b6f89be33b02f49"
        ],
        [
            "exists 1.",
            "VernacExtend",
            "18eb310858be5acae7304d0d9ed33063568db310"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "left; apply Rlt_0_1.",
            "VernacExtend",
            "4038dd3f68ab1cd8921ed1c273f77fae982c62c1"
        ],
        [
            "symmetry; apply Rsqr_1.",
            "VernacExtend",
            "0542658db04a63d45809af2438c41cb3f42934d1"
        ],
        [
            "cut (0 <= f y).",
            "VernacExtend",
            "3502b67b949487b23f8d492cf83d098c4d2c58e4"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "cut (f 0 * f y <= 0).",
            "VernacExtend",
            "127cc7658480ae08aaf6e0b926f2642ff4e1f730"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (X := IVT_cor f 0 y H1 H H3).",
            "VernacExtend",
            "fba6184310589996d3f93154de548e7ec7a19287"
        ],
        [
            "elim X; intros t H4.",
            "VernacExtend",
            "3d62fd86a0f99d6df7477545394c131e89225ee4"
        ],
        [
            "exists t.",
            "VernacExtend",
            "1970ed3dcf3aed959b3c5a6207f3f37122ce8608"
        ],
        [
            "elim H4; intros.",
            "VernacExtend",
            "ef88f175449d4af46e0685700665ce0cdf3e5695"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "elim H5; intros; assumption.",
            "VernacExtend",
            "e3759bfc7109dba24b94887055d32bb02045fe9b"
        ],
        [
            "unfold f in H6.",
            "VernacExtend",
            "a737fee3ed834b8ddc23196a3d58b7f80f7bb820"
        ],
        [
            "apply Rminus_diag_uniq_sym; exact H6.",
            "VernacExtend",
            "6773d6211c4a2ae9e2beeb7d703406008d0987dc"
        ],
        [
            "rewrite Rmult_comm; pattern 0 at 2; rewrite <- (Rmult_0_r (f y)).",
            "VernacExtend",
            "d0b4107918ae8df0283599ae6c271d901d468683"
        ],
        [
            "apply Rmult_le_compat_l; assumption.",
            "VernacExtend",
            "c1d10d7ba22f8cceb21d711464ab91c1d514e68d"
        ],
        [
            "unfold f.",
            "VernacExtend",
            "54a386f4161710b69df4a2025df24a14e842ecf2"
        ],
        [
            "apply Rplus_le_reg_l with y.",
            "VernacExtend",
            "1a00f6d08821d1775665132ac8811e0c258cb846"
        ],
        [
            "rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus; rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r.",
            "VernacExtend",
            "9904d035ac660de2ded2bce907abe059b7186bb2"
        ],
        [
            "pattern y at 1; rewrite <- Rmult_1_r.",
            "VernacExtend",
            "0f0b8c121feb2bae72cbdee8c8918d0a2c030cdc"
        ],
        [
            "unfold Rsqr; apply Rmult_le_compat_l.",
            "VernacExtend",
            "8c1a6605fc9bc8f027c6ec71a01fd51c1db0c748"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "left; exact Hgt.",
            "VernacExtend",
            "412fde393de66dbc13a62a8909e63b93108d8aaa"
        ],
        [
            "replace f with (Rsqr - fct_cte y)%F.",
            "VernacExtend",
            "ef00762c3e3aa1b9ad794fc5b06c22671584bcef"
        ],
        [
            "apply continuity_minus.",
            "VernacExtend",
            "773a87a4ce092a9d28ea73bb1905f2d601106576"
        ],
        [
            "apply derivable_continuous; apply derivable_Rsqr.",
            "VernacExtend",
            "13101d8fe99c0b539ca155837b863d96fe68c862"
        ],
        [
            "apply derivable_continuous; apply derivable_const.",
            "VernacExtend",
            "15d65af1f17802e15ee6d59229f36e288f880c8a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold f; rewrite Rsqr_0.",
            "VernacExtend",
            "fc921f613395c31fe96b680f95fea0421eb37b81"
        ],
        [
            "unfold Rminus; rewrite Rplus_0_l.",
            "VernacExtend",
            "bcb768dd3c3aa3bdb8dbfd1b3deebe91f8ee8c59"
        ],
        [
            "apply Rge_le.",
            "VernacExtend",
            "eae8ed3f063c0c64fc52ba03563e73be950936a6"
        ],
        [
            "apply Ropp_0_le_ge_contravar; assumption.",
            "VernacExtend",
            "70fb7377754fb4a9713993e67ca34c867eb04cd1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition Rsqrt (y:nonnegreal) : R := let (a,_) := Rsqrt_exists (nonneg y) (cond_nonneg y) in a.",
            "VernacDefinition",
            "ef06dde38de2e9d39eed17bf86566dc9c3b1b734"
        ],
        [
            "Lemma Rsqrt_positivity : forall x:nonnegreal, 0 <= Rsqrt x.",
            "VernacStartTheoremProof",
            "15cb747561ed8d5fe267994b62bc2c30000a84f2"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "destruct (Rsqrt_exists (nonneg x) (cond_nonneg x)) as (x0 & H1 & H2).",
            "VernacExtend",
            "868df5da47a3d94b7b3a1857ded043426266808d"
        ],
        [
            "cut (x0 = Rsqrt x).",
            "VernacExtend",
            "c698f70fa364921aca0ce573e4aca7745f4b263c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- H; assumption.",
            "VernacExtend",
            "a97c9ef724ad863a1649a87e1183b8c29f2d0f87"
        ],
        [
            "unfold Rsqrt.",
            "VernacExtend",
            "46ac5bf9becc674ac3651132a10bad4894e28828"
        ],
        [
            "case (Rsqrt_exists x (cond_nonneg x)) as (?,[]).",
            "VernacExtend",
            "b6e68375ce0688749154c393305e94513b8d18ee"
        ],
        [
            "apply Rsqr_inj.",
            "VernacExtend",
            "7bdfb7b89c00cd6f3819fc1496b24bee0d9b32ea"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite <- H0, <- H2; reflexivity.",
            "VernacExtend",
            "8206ed7c2c26964b454549bd14c9cf4d581e1f2b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rsqrt_Rsqrt : forall x:nonnegreal, Rsqrt x * Rsqrt x = x.",
            "VernacStartTheoremProof",
            "67f6e38664d2ea6332f2162fb64a9fddb6ca7e19"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (Rsqrt_exists (nonneg x) (cond_nonneg x)) as (x0 & H1 & H2).",
            "VernacExtend",
            "868df5da47a3d94b7b3a1857ded043426266808d"
        ],
        [
            "cut (x0 = Rsqrt x).",
            "VernacExtend",
            "c698f70fa364921aca0ce573e4aca7745f4b263c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- H.",
            "VernacExtend",
            "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
        ],
        [
            "rewrite H2; reflexivity.",
            "VernacExtend",
            "9c790f3e50b805b4cc946f2fcb63d8cdc82863fa"
        ],
        [
            "unfold Rsqrt.",
            "VernacExtend",
            "46ac5bf9becc674ac3651132a10bad4894e28828"
        ],
        [
            "case (Rsqrt_exists x (cond_nonneg x)) as (x1 & ? & ?).",
            "VernacExtend",
            "7acef50e5d8f0ef5ab77a30c9d2b23431a33703e"
        ],
        [
            "apply Rsqr_inj.",
            "VernacExtend",
            "7bdfb7b89c00cd6f3819fc1496b24bee0d9b32ea"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite <- H0, <- H2; reflexivity.",
            "VernacExtend",
            "8206ed7c2c26964b454549bd14c9cf4d581e1f2b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "dicho_comp",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "simpl; assumption.",
                        "VernacExtend",
                        "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
                        "VernacExtend",
                        "c64e5d3909965502d943be8f9000d46151f19486"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_le_reg_l with 2.",
                        "VernacExtend",
                        "7606483ed61ba69faf47ffdae61002a9126f90fc"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "pattern 2 at 1; rewrite Rmult_comm.",
                        "VernacExtend",
                        "88c04225f0da0ba15136c3da0ebe2ae0cf1a20c3"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
                        "VernacExtend",
                        "4578ae178cd451c29991181c9039fccaadaa7a0a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "rewrite double.",
                        "VernacExtend",
                        "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_le_reg_l with 2.",
                        "VernacExtend",
                        "7606483ed61ba69faf47ffdae61002a9126f90fc"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm.",
                        "VernacExtend",
                        "fd520335d31c715c2f686e2bdc0b380c493b04c0"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
                        "VernacExtend",
                        "4578ae178cd451c29991181c9039fccaadaa7a0a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "rewrite double.",
                        "VernacExtend",
                        "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rplus_comm (Dichotomy_ub x y P n)).",
                        "VernacExtend",
                        "5dc6a96ba785f9bff06dea68067a9acf7e4c5a8e"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_lb_growing",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Un_growing.",
                        "VernacExtend",
                        "bb82a49c6eee9f82a3c0d5b17d8a842d5e9abb49"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
                        "VernacExtend",
                        "c64e5d3909965502d943be8f9000d46151f19486"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_le_reg_l with 2.",
                        "VernacExtend",
                        "7606483ed61ba69faf47ffdae61002a9126f90fc"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "pattern 2 at 1; rewrite Rmult_comm.",
                        "VernacExtend",
                        "88c04225f0da0ba15136c3da0ebe2ae0cf1a20c3"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
                        "VernacExtend",
                        "4578ae178cd451c29991181c9039fccaadaa7a0a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "rewrite double.",
                        "VernacExtend",
                        "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "replace (Dichotomy_ub x y P n) with (dicho_up x y P n); [ apply dicho_comp; assumption | reflexivity ].",
                        "VernacExtend",
                        "31a17a233002ef4cf5518a5432bc961d7316f943"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_up_decreasing",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Un_decreasing.",
                        "VernacExtend",
                        "69f68a5a934c77be8a4c69b1ddfd7c2b437ccda6"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
                        "VernacExtend",
                        "c64e5d3909965502d943be8f9000d46151f19486"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_le_reg_l with 2.",
                        "VernacExtend",
                        "7606483ed61ba69faf47ffdae61002a9126f90fc"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm.",
                        "VernacExtend",
                        "fd520335d31c715c2f686e2bdc0b380c493b04c0"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
                        "VernacExtend",
                        "4578ae178cd451c29991181c9039fccaadaa7a0a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "rewrite double.",
                        "VernacExtend",
                        "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
                    ]
                },
                {
                    "command": [
                        "replace (Dichotomy_ub x y P n) with (dicho_up x y P n); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "91e54e4fcff54f53c157e326dac4a26634f4628b"
                    ]
                },
                {
                    "command": [
                        "replace (Dichotomy_lb x y P n) with (dicho_lb x y P n); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "1929acf848d0ccbb76680583f651147c7037e7f5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rplus_comm (dicho_up x y P n)).",
                        "VernacExtend",
                        "b0418409b186c4fa6fb221f2a45b0a1050951a55"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "apply dicho_comp; assumption.",
                        "VernacExtend",
                        "ead536c0a780780e2d9b1ae5617d726dba95194b"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_lb_maj_y",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "simpl; assumption.",
                        "VernacExtend",
                        "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
                        "VernacExtend",
                        "c64e5d3909965502d943be8f9000d46151f19486"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_le_reg_l with 2.",
                        "VernacExtend",
                        "7606483ed61ba69faf47ffdae61002a9126f90fc"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm.",
                        "VernacExtend",
                        "fd520335d31c715c2f686e2bdc0b380c493b04c0"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ rewrite Rmult_1_r | discrR ].",
                        "VernacExtend",
                        "604949df2965253839eaecfae1626e51448e6b97"
                    ]
                },
                {
                    "command": [
                        "rewrite double; apply Rplus_le_compat.",
                        "VernacExtend",
                        "db1f4d73c5ec0d17fd9546fceecbb195a4eb5a48"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "pattern y at 2; replace y with (Dichotomy_ub x y P 0); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "12195ce3903d8d6defbb5a3b7f623890c56ff0a0"
                    ]
                },
                {
                    "command": [
                        "apply decreasing_prop.",
                        "VernacExtend",
                        "5a9c3554aa6cc6b3db23c9311827c40fe7fa48a8"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := dicho_up_decreasing x y P H).",
                        "VernacExtend",
                        "4c81cf707408e46fbc6aba628ab03040ae943e61"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply le_O_n.",
                        "VernacExtend",
                        "7fa25714b3e362fc6548cec817a7c173238f4970"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_lb_maj",
            "line_nb": 87,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cut (forall n:nat, dicho_lb x y P n <= y).",
                        "VernacExtend",
                        "76315fd196e291ce139d55a46b582b1f1a43c99f"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold has_ub.",
                        "VernacExtend",
                        "ceb32c40b15ce73c7b54080c037d097378cdbabb"
                    ]
                },
                {
                    "command": [
                        "unfold bound.",
                        "VernacExtend",
                        "59942e148dddd0d48f677cd1bd2ebe8e3f69ae85"
                    ]
                },
                {
                    "command": [
                        "exists y.",
                        "VernacExtend",
                        "1c06cb2466f48b6def24e74ddeda9956981c0a0a"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound.",
                        "VernacExtend",
                        "8f2f4c45e0301f8635f36bde586c5301c04c8245"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; apply H0.",
                        "VernacExtend",
                        "e5aac3fae5fd790d7ab5c7ce8d2983d77619ad33"
                    ]
                },
                {
                    "command": [
                        "apply dicho_lb_maj_y; assumption.",
                        "VernacExtend",
                        "4d87b4e2546791727e614a5424c10d373cda4b2d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_up_min_x",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "simpl; assumption.",
                        "VernacExtend",
                        "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
                        "VernacExtend",
                        "c64e5d3909965502d943be8f9000d46151f19486"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_le_reg_l with 2.",
                        "VernacExtend",
                        "7606483ed61ba69faf47ffdae61002a9126f90fc"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "pattern 2 at 1; rewrite Rmult_comm.",
                        "VernacExtend",
                        "88c04225f0da0ba15136c3da0ebe2ae0cf1a20c3"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ rewrite Rmult_1_r | discrR ].",
                        "VernacExtend",
                        "604949df2965253839eaecfae1626e51448e6b97"
                    ]
                },
                {
                    "command": [
                        "rewrite double; apply Rplus_le_compat.",
                        "VernacExtend",
                        "db1f4d73c5ec0d17fd9546fceecbb195a4eb5a48"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1; replace x with (Dichotomy_lb x y P 0); [ idtac | reflexivity ].",
                        "VernacExtend",
                        "2983620935cd71627cd482f522b7f31865796473"
                    ]
                },
                {
                    "command": [
                        "apply tech9.",
                        "VernacExtend",
                        "9e7450a2f6b4a56b55973921834e6e2904b3b80a"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := dicho_lb_growing x y P H).",
                        "VernacExtend",
                        "3a8ba95837f3efd41d3588ebb0eeb243dc7570d6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply le_O_n.",
                        "VernacExtend",
                        "7fa25714b3e362fc6548cec817a7c173238f4970"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_up_min",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cut (forall n:nat, x <= dicho_up x y P n).",
                        "VernacExtend",
                        "69074b072b94dc3cdaaa5369cf2ff3e864745e34"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold has_lb.",
                        "VernacExtend",
                        "0bca23eb1d0714abb7864d93abc374efb6546481"
                    ]
                },
                {
                    "command": [
                        "unfold bound.",
                        "VernacExtend",
                        "59942e148dddd0d48f677cd1bd2ebe8e3f69ae85"
                    ]
                },
                {
                    "command": [
                        "exists (- x).",
                        "VernacExtend",
                        "08defb1588400a64e2b32a242cb38df0df66eff8"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound.",
                        "VernacExtend",
                        "8f2f4c45e0301f8635f36bde586c5301c04c8245"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "unfold opp_seq.",
                        "VernacExtend",
                        "71519d198ca4edf2d134115411d2ee1870568a91"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "apply dicho_up_min_x; assumption.",
                        "VernacExtend",
                        "1bccc623f537468e98ebdc0120d45d4f2f850146"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_lb_cv",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply growing_cv.",
                        "VernacExtend",
                        "e20e5f8467bce8c3a237abdf7a77cf38c2d1f804"
                    ]
                },
                {
                    "command": [
                        "apply dicho_lb_growing; assumption.",
                        "VernacExtend",
                        "85fbbd87557610cb77a9c86f3ce5a52886c11c7a"
                    ]
                },
                {
                    "command": [
                        "apply dicho_lb_maj; assumption.",
                        "VernacExtend",
                        "2abdf5bf58032d2068385902d7b144bdbcb16a85"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_up_cv",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply decreasing_cv.",
                        "VernacExtend",
                        "8dd04c05aace3951240559f529507b3396663df8"
                    ]
                },
                {
                    "command": [
                        "apply dicho_up_decreasing; assumption.",
                        "VernacExtend",
                        "1edb1b795bef16ab8a05ef3898ec5f4f86665e45"
                    ]
                },
                {
                    "command": [
                        "apply dicho_up_min; assumption.",
                        "VernacExtend",
                        "44f7e2c08cdb537c8d74052cb8c262a192928d64"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_lb_dicho_up",
            "line_nb": 147,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rinv_1; ring.",
                        "VernacExtend",
                        "d7efc13b2cbc27b04019df8d936ef86ffc88edcd"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "case (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2)).",
                        "VernacExtend",
                        "c64e5d3909965502d943be8f9000d46151f19486"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "replace ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) * / 2 - Dichotomy_lb x y P n) with ((dicho_up x y P n - dicho_lb x y P n) / 2).",
                        "VernacExtend",
                        "5c8304c077d787e0b75432f137cf1d15200f1ed7"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Hrecn.",
                        "VernacExtend",
                        "62d9dcff0b3ea6e3d80c380d7c074b9dd7326148"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "55666fd2776d160fb1bfd9d38a2833e66927f366"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "apply pow_nonzero; discrR.",
                        "VernacExtend",
                        "174877181c67a09e2e68285a2475567f220a254e"
                    ]
                },
                {
                    "command": [
                        "pattern (Dichotomy_lb x y P n) at 2; rewrite (double_var (Dichotomy_lb x y P n)); unfold dicho_up, dicho_lb, Rminus, Rdiv; ring.",
                        "VernacExtend",
                        "b1af5507265e3ac21a1d589a1ceb1a69c093f11f"
                    ]
                },
                {
                    "command": [
                        "replace (Dichotomy_ub x y P n - (Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2) with ((dicho_up x y P n - dicho_lb x y P n) / 2).",
                        "VernacExtend",
                        "52bd40cd6eabb392f8eac83c190e9c7bc1f3806e"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Hrecn.",
                        "VernacExtend",
                        "62d9dcff0b3ea6e3d80c380d7c074b9dd7326148"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "55666fd2776d160fb1bfd9d38a2833e66927f366"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "apply pow_nonzero; discrR.",
                        "VernacExtend",
                        "174877181c67a09e2e68285a2475567f220a254e"
                    ]
                },
                {
                    "command": [
                        "pattern (Dichotomy_ub x y P n) at 1; rewrite (double_var (Dichotomy_ub x y P n)); unfold dicho_up, dicho_lb, Rminus, Rdiv; ring.",
                        "VernacExtend",
                        "bae8254e19c981a97af5d72a694361f9df07e6f9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pow_2_n_neq_R0",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold pow_2_n.",
                        "VernacExtend",
                        "29d5206c018e0cfec323b484e6556914284b290e"
                    ]
                },
                {
                    "command": [
                        "apply pow_nonzero.",
                        "VernacExtend",
                        "282744fa14f20635385d7e1ac0d1a961c143f970"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pow_2_n_growing",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "unfold Un_growing.",
                        "VernacExtend",
                        "bb82a49c6eee9f82a3c0d5b17d8a842d5e9abb49"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "replace (S n) with (n + 1)%nat; [ unfold pow_2_n; rewrite pow_add | ring ].",
                        "VernacExtend",
                        "3cac65dcb174e81015fb4999c3d575f1b69cc709"
                    ]
                },
                {
                    "command": [
                        "pattern (2 ^ n) at 1; rewrite <- Rmult_1_r.",
                        "VernacExtend",
                        "84a35af3a47ae5a3fe1876c7281ebdf35bb13d54"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "left; apply pow_lt; prove_sup0.",
                        "VernacExtend",
                        "7a1cdef40e05913ff100082e5c769cb263e1e6bc"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "pattern 1 at 1; rewrite <- Rplus_0_r; apply Rplus_le_compat_l; left; apply Rlt_0_1.",
                        "VernacExtend",
                        "fb2ea3c1633f411ee3ed2c926774667563a169f8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pow_2_n_infty",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "cut (forall N:nat, INR N <= 2 ^ N).",
                        "VernacExtend",
                        "3736623b4350d76427a257cfa67075cde075677f"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold cv_infty.",
                        "VernacExtend",
                        "a5e18dc9ed2c960b7d0e9b000453ff35de082067"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T 0 M) as [[Hlt|<-]|Hgt].",
                        "VernacExtend",
                        "24fd2d505b23d91978f856269ff8a7c3ac753152"
                    ]
                },
                {
                    "command": [
                        "set (N := up M).",
                        "VernacExtend",
                        "6444cf1bdc39cf02e73d67896e7b12ca0987a405"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= N)%Z.",
                        "VernacExtend",
                        "2eab488200cf5682394b412d786715950ea29dc6"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "elim (IZN N H0); intros N0 H1.",
                        "VernacExtend",
                        "54b68431ddc3cf3b94271b10a6704b74580c25ac"
                    ]
                },
                {
                    "command": [
                        "exists N0.",
                        "VernacExtend",
                        "a4680772e3795b8c9a5b7bfd599c610f93f6185b"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (INR N0).",
                        "VernacExtend",
                        "26ba78cd92cf955af13cb665a82e82a6c94b24b7"
                    ]
                },
                {
                    "command": [
                        "rewrite INR_IZR_INZ.",
                        "VernacExtend",
                        "8058c7a6913f85d26af3a54acc61c387d0a04933"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "unfold N.",
                        "VernacExtend",
                        "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := archimed M).",
                        "VernacExtend",
                        "8c3f90798d96f672e25814136c44603e808fcafc"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros; assumption.",
                        "VernacExtend",
                        "f02fb1b822404aba5ff1b686b4c857f74184021e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (pow_2_n N0).",
                        "VernacExtend",
                        "97ded1ac81df07afd16d3e92a4274465fbacb055"
                    ]
                },
                {
                    "command": [
                        "unfold pow_2_n; apply H.",
                        "VernacExtend",
                        "6400a412aa93ca37485fa000760e913965080e07"
                    ]
                },
                {
                    "command": [
                        "apply Rge_le.",
                        "VernacExtend",
                        "eae8ed3f063c0c64fc52ba03563e73be950936a6"
                    ]
                },
                {
                    "command": [
                        "apply growing_prop.",
                        "VernacExtend",
                        "903110c99596f545a8de253be6ad2a3b4f14a745"
                    ]
                },
                {
                    "command": [
                        "apply pow_2_n_growing.",
                        "VernacExtend",
                        "df0a56c7c43137b7adba46b1f8402cd6298b3f2b"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR.",
                        "VernacExtend",
                        "b9b46c6b2f4d4157bed90857db2b9c3ba33486ad"
                    ]
                },
                {
                    "command": [
                        "unfold N.",
                        "VernacExtend",
                        "e84969bf3a012f2b02bd8ab89f79f6e0b53e6b71"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := archimed M); elim H0; intros.",
                        "VernacExtend",
                        "825d0f2550bfa6b61c7f726cb262578fefcf0f62"
                    ]
                },
                {
                    "command": [
                        "left; apply Rlt_trans with M; assumption.",
                        "VernacExtend",
                        "4768b99b7412108f2fe45957fb60808e394d0126"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat; intros.",
                        "VernacExtend",
                        "9f406775453fa10dd464f05a32d849b36e740518"
                    ]
                },
                {
                    "command": [
                        "unfold pow_2_n; apply pow_lt; prove_sup0.",
                        "VernacExtend",
                        "affe5bfc63b7b9c102f866268f74d326bedef29f"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat; intros.",
                        "VernacExtend",
                        "9f406775453fa10dd464f05a32d849b36e740518"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with 0.",
                        "VernacExtend",
                        "e7bc3d716eb3bc1bf5114b110153540e6a861842"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold pow_2_n; apply pow_lt; prove_sup0.",
                        "VernacExtend",
                        "affe5bfc63b7b9c102f866268f74d326bedef29f"
                    ]
                },
                {
                    "command": [
                        "simple induction N.",
                        "VernacExtend",
                        "7826c534e174ed32414d4f01d9ebb4dd53d20f59"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "left; apply Rlt_0_1.",
                        "VernacExtend",
                        "4038dd3f68ab1cd8921ed1c273f77fae982c62c1"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "pattern (S n) at 2; replace (S n) with (n + 1)%nat; [ idtac | ring ].",
                        "VernacExtend",
                        "3d3a4a54c45154fe3dd65dafd03c8529b3d9368c"
                    ]
                },
                {
                    "command": [
                        "rewrite S_INR; rewrite pow_add.",
                        "VernacExtend",
                        "1104663662b82c973a242c79b41d926a657e4df3"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (2 ^ n).",
                        "VernacExtend",
                        "0d5774eb2050c40a765cb287a5f8f04bf68f13b6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rplus_comm 1).",
                        "VernacExtend",
                        "919534b7a31c20574531b7d8e5e44c432ec75771"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_1_r (INR n)).",
                        "VernacExtend",
                        "18f4ed423ccc0c3c6f33b030705e8f9a927135a3"
                    ]
                },
                {
                    "command": [
                        "apply (poly n 1).",
                        "VernacExtend",
                        "0d58c0d414bac5dba51f5832c0424f623b784e6c"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_0_1.",
                        "VernacExtend",
                        "c3f675388bf844e0740197fd71afa66e5eef091d"
                    ]
                },
                {
                    "command": [
                        "pattern (2 ^ n) at 1; rewrite <- Rplus_0_r.",
                        "VernacExtend",
                        "616a5163988151abcc12330ddcd18060d866774b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_comm 2).",
                        "VernacExtend",
                        "ec1b6f591db64e627c4aad283471619dcbe50a75"
                    ]
                },
                {
                    "command": [
                        "rewrite double.",
                        "VernacExtend",
                        "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "3af9ea371eb281cf0e58041faab020bb6798a832"
                    ]
                },
                {
                    "command": [
                        "left; apply pow_lt; prove_sup0.",
                        "VernacExtend",
                        "7a1cdef40e05913ff100082e5c769cb263e1e6bc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cv_dicho",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := CV_minus _ _ _ _ H0 H1).",
                        "VernacExtend",
                        "bcf053f541c655e42c2c295313349bc914efdd16"
                    ]
                },
                {
                    "command": [
                        "cut (Un_cv (fun i:nat => dicho_lb x y P i - dicho_up x y P i) 0).",
                        "VernacExtend",
                        "25eb98c0e8cc05c186b835f966a032c5ea9b3a08"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := UL_sequence _ _ _ H2 H3).",
                        "VernacExtend",
                        "257b8a5e5e21898b7f70cf40517fc2eeb7526cb6"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rminus_diag_uniq_sym; assumption.",
                        "VernacExtend",
                        "34c2499f6c138a770bc146aa76f8400753ea788c"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist.",
                        "VernacExtend",
                        "af861a65ba3ecd32bcb7a3d0693f2792bd8cb8a4"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := cv_infty_cv_R0 pow_2_n pow_2_n_neq_R0 pow_2_n_infty).",
                        "VernacExtend",
                        "cc3154c30b7466e46d13de7fff1c9660b21c6e33"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T x y) as [[ Hlt | -> ]|Hgt].",
                        "VernacExtend",
                        "2d2916e53df51b827cc16451e5d73f3b6d678b6d"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv in H4; unfold R_dist in H4.",
                        "VernacExtend",
                        "759a1ee4b391393ac4ac20d6dc2935c482cfd64b"
                    ]
                },
                {
                    "command": [
                        "cut (0 < y - x).",
                        "VernacExtend",
                        "1ab1d466c014e4bfdc313a0a0aa1110acb6d490b"
                    ]
                },
                {
                    "command": [
                        "intro Hyp.",
                        "VernacExtend",
                        "405fde68b6462b2273630290b90437ccd35606f7"
                    ]
                },
                {
                    "command": [
                        "cut (0 < eps / (y - x)).",
                        "VernacExtend",
                        "a6b5480f7e328f1cceb55c79f3253103b068a4e8"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "elim (H4 (eps / (y - x)) H5); intros N H6.",
                        "VernacExtend",
                        "38931f919d6d9f35e2ed07f75a0c2ac7568e9b74"
                    ]
                },
                {
                    "command": [
                        "exists N; intros.",
                        "VernacExtend",
                        "cfd63f1f7fafabc1d063c17632530a627ae99922"
                    ]
                },
                {
                    "command": [
                        "replace (dicho_lb x y P n - dicho_up x y P n - 0) with (dicho_lb x y P n - dicho_up x y P n); [ idtac | ring ].",
                        "VernacExtend",
                        "f5e09a3fd3febe0d260acdbf0c1a478d97c779ef"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp.",
                        "VernacExtend",
                        "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_minus_distr'.",
                        "VernacExtend",
                        "f595d68cd20a95eb1a7ae9edfb6f2cd45f285ee3"
                    ]
                },
                {
                    "command": [
                        "rewrite dicho_lb_dicho_up.",
                        "VernacExtend",
                        "043975674312e79b5b49fd0639a1836b94e1c359"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rabs_mult.",
                        "VernacExtend",
                        "ffb5e4297bd1945ec8a2777fcbcdf2c5e3b93bce"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rabs_right (y - x)).",
                        "VernacExtend",
                        "f4693597a1edfef94b896df30d733db375cda667"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (/ (y - x)).",
                        "VernacExtend",
                        "d934efeafe95c7935c0ad7f790f276ad33304310"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "eccb067dc9e836ad48bf16c61cd308004f5d6712"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "replace (/ 2 ^ n) with (/ 2 ^ n - 0); [ unfold pow_2_n, Rdiv in H6; rewrite <- (Rmult_comm eps); apply H6; assumption | ring ].",
                        "VernacExtend",
                        "113875ba45e6da492b03bf1bac10b5f9faeffde3"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H8 in Hyp; elim (Rlt_irrefl _ Hyp).",
                        "VernacExtend",
                        "e4fcd5030561471d6af1b2cad812b29c66cbab7d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge.",
                        "VernacExtend",
                        "a688ebddf90443508c57e22ba16f7fa0da42ef9a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with x; rewrite Rplus_0_r.",
                        "VernacExtend",
                        "52faf44392c7fb137b7cc2632e1e31c701a698c8"
                    ]
                },
                {
                    "command": [
                        "replace (x + (y - x)) with y; [ assumption | ring ].",
                        "VernacExtend",
                        "17e4d6169252288e789ba9a61b66fcf58eb132c0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; assumption ].",
                        "VernacExtend",
                        "94406d251efdbc60409aaa78c38bd0b607071036"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with x; rewrite Rplus_0_r.",
                        "VernacExtend",
                        "93d8747421e3ec871422f529a50a5bbdb5406ca0"
                    ]
                },
                {
                    "command": [
                        "replace (x + (y - x)) with y; [ assumption | ring ].",
                        "VernacExtend",
                        "17e4d6169252288e789ba9a61b66fcf58eb132c0"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat; intros.",
                        "VernacExtend",
                        "9f406775453fa10dd464f05a32d849b36e740518"
                    ]
                },
                {
                    "command": [
                        "replace (dicho_lb y y P n - dicho_up y y P n - 0) with (dicho_lb y y P n - dicho_up y y P n); [ idtac | ring ].",
                        "VernacExtend",
                        "f9488778878fa3c4c730bb60234615dd283b0705"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp.",
                        "VernacExtend",
                        "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_minus_distr'.",
                        "VernacExtend",
                        "f595d68cd20a95eb1a7ae9edfb6f2cd45f285ee3"
                    ]
                },
                {
                    "command": [
                        "rewrite dicho_lb_dicho_up.",
                        "VernacExtend",
                        "043975674312e79b5b49fd0639a1836b94e1c359"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus, Rdiv; rewrite Rplus_opp_r; rewrite Rmult_0_l; rewrite Rabs_R0; assumption.",
                        "VernacExtend",
                        "afa352c0686060d9df09964c47b964c969dab086"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgt)).",
                        "VernacExtend",
                        "76db159a1634a6baa37b0f6d47b562c7c16945da"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_seq",
            "line_nb": 291,
            "steps": [
                {
                    "command": [
                        "unfold continuity_pt, Un_cv; unfold continue_in.",
                        "VernacExtend",
                        "18b5820286a4b7a8c12719758d0172841c1ed1a4"
                    ]
                },
                {
                    "command": [
                        "unfold limit1_in.",
                        "VernacExtend",
                        "ce7ab0935c3a5d7a35437d9fe3504b1e6905f79d"
                    ]
                },
                {
                    "command": [
                        "unfold limit_in.",
                        "VernacExtend",
                        "3350bee32e818c7b5f36ae78ba60d5c375c28a89"
                    ]
                },
                {
                    "command": [
                        "unfold dist.",
                        "VernacExtend",
                        "565c2bae3077fd0bceaedfaf7a8cf6285d052353"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist.",
                        "VernacExtend",
                        "9d14879a55d02ad54565968e31b64da7aeb66d97"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (H eps H1); intros alp H2.",
                        "VernacExtend",
                        "1e1adec75874f8f848a406339af1cdcf14e57648"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros.",
                        "VernacExtend",
                        "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
                    ]
                },
                {
                    "command": [
                        "elim (H0 alp H3); intros N H5.",
                        "VernacExtend",
                        "bffd692e87b61d9475f9f881388effc98806fa51"
                    ]
                },
                {
                    "command": [
                        "exists N; intros.",
                        "VernacExtend",
                        "cfd63f1f7fafabc1d063c17632530a627ae99922"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec (Un n) l); intro.",
                        "VernacExtend",
                        "db79dedbcef47eed70346a1079837bde1010c56e"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
                        "VernacExtend",
                        "09e894f1902e6e7f44f1f0a3316e9242bbe0faee"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold D_x, no_cond.",
                        "VernacExtend",
                        "abf922a23fd977fc0650bb6c40e8f5a3a9fb7f07"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply (not_eq_sym (A:=R)); assumption.",
                        "VernacExtend",
                        "86dfb53d08f7d134967f97a76eb926318b566544"
                    ]
                },
                {
                    "command": [
                        "apply H5; assumption.",
                        "VernacExtend",
                        "8f860832491462a0a9db7bd7c081da8cdc789cad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "dicho_up_car",
            "line_nb": 328,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (sumbool_of_bool (P ((Dichotomy_lb x y P n + Dichotomy_ub x y P n) / 2))) as [Heq|Heq].",
                        "VernacExtend",
                        "d4079ecad8d24d921b0a075e7fc24d56ced92aa6"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq.",
                        "VernacExtend",
                        "b7499625fc2b45a0798969f6886262f98cfbb890"
                    ]
                },
                {
                    "command": [
                        "unfold dicho_lb in Hrecn; assumption.",
                        "VernacExtend",
                        "88c71365865256080e94af0b490e5be9e9fd4ce3"
                    ]
                },
                {
                    "command": [
                        "+",
                        "VernacBullet",
                        "3ddfc0515f916e562bacf863647e0107cb15aa13"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq.",
                        "VernacExtend",
                        "b7499625fc2b45a0798969f6886262f98cfbb890"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cv_pow_half",
            "line_nb": 343,
            "steps": [
                {
                    "command": [
                        "intros a; unfold Rdiv; replace 0 with (a * 0) by ring.",
                        "VernacExtend",
                        "2f4bae9a1c8ab519a73e716d6c47a84e75e5f65d"
                    ]
                },
                {
                    "command": [
                        "apply CV_mult.",
                        "VernacExtend",
                        "7df85077b85eadac24b572b1d2ba1d223ec90eca"
                    ]
                },
                {
                    "command": [
                        "intros eps ep; exists 0%nat; rewrite R_dist_eq; intros n _; assumption.",
                        "VernacExtend",
                        "54a5a7d6c611f628eb44e91597879757d30e0b0a"
                    ]
                },
                {
                    "command": [
                        "exact (cv_infty_cv_R0 pow_2_n pow_2_n_neq_R0 pow_2_n_infty).",
                        "VernacExtend",
                        "7558aec40987d33020349efc188c6b0082475a73"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "IVT",
            "line_nb": 349,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (x <= y) by (left; assumption).",
                        "VernacExtend",
                        "778e6c26c5c7848890ee02da70772fa22c00ced8"
                    ]
                },
                {
                    "command": [
                        "destruct (dicho_lb_cv x y (fun z:R => cond_positivity (f z)) H3) as (x1,p0).",
                        "VernacExtend",
                        "ca8e950e2d8803127ad1f4f0e6b8e288c7ee9308"
                    ]
                },
                {
                    "command": [
                        "destruct (dicho_up_cv x y (fun z:R => cond_positivity (f z)) H3) as (x0,p).",
                        "VernacExtend",
                        "45ba4e10a207d75050b1c5d580fd256928e3f0ea"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := cv_dicho _ _ _ _ _ H3 p0 p).",
                        "VernacExtend",
                        "80b7d6771d87bca16d694c429d7bd242400ecdf2"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in p0.",
                        "VernacExtend",
                        "819e611699223dbbd2216aa26c348eae8efaa65b"
                    ]
                },
                {
                    "command": [
                        "exists x0.",
                        "VernacExtend",
                        "9cf0657053433e90b28a795544f893f4a0f1ace3"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (dicho_lb x y (fun z:R => cond_positivity (f z)) 0).",
                        "VernacExtend",
                        "be5c1aca34b6efd32abf1108ece1d191e15aac7e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "apply growing_ineq.",
                        "VernacExtend",
                        "714b677d9b8de67abdaec4b69605474cf818896d"
                    ]
                },
                {
                    "command": [
                        "apply dicho_lb_growing; assumption.",
                        "VernacExtend",
                        "85fbbd87557610cb77a9c86f3ce5a52886c11c7a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (dicho_up x y (fun z:R => cond_positivity (f z)) 0).",
                        "VernacExtend",
                        "8e2d5462e31c19ca1eb2ed1fe0f8d717cffa09bd"
                    ]
                },
                {
                    "command": [
                        "apply decreasing_ineq.",
                        "VernacExtend",
                        "f70e88e40d0ff07d62a94e461b1dd4e8f9e856e0"
                    ]
                },
                {
                    "command": [
                        "apply dicho_up_decreasing; assumption.",
                        "VernacExtend",
                        "1edb1b795bef16ab8a05ef3898ec5f4f86665e45"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "set (Vn := fun n:nat => dicho_lb x y (fun z:R => cond_positivity (f z)) n).",
                        "VernacExtend",
                        "53b99749f3fbbbe2784304f914fbfd0eaccebc16"
                    ]
                },
                {
                    "command": [
                        "set (Wn := fun n:nat => dicho_up x y (fun z:R => cond_positivity (f z)) n).",
                        "VernacExtend",
                        "81b111054f8f1024f30fe18187cb95dcb4798687"
                    ]
                },
                {
                    "command": [
                        "cut ((forall n:nat, f (Vn n) <= 0) -> f x0 <= 0).",
                        "VernacExtend",
                        "a1dea0df618ace53eaa6344993b910c8cf4b22cc"
                    ]
                },
                {
                    "command": [
                        "cut ((forall n:nat, 0 <= f (Wn n)) -> 0 <= f x0).",
                        "VernacExtend",
                        "7359d0d78330f3f07341eaddb03729d7bc956058"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cut (forall n:nat, f (Vn n) <= 0).",
                        "VernacExtend",
                        "f6fb3ec043b6dd1b3832b1a2244d0b32a593198e"
                    ]
                },
                {
                    "command": [
                        "cut (forall n:nat, 0 <= f (Wn n)).",
                        "VernacExtend",
                        "a34166762d19a67759939874482b28c923f31b8a"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H9 := H6 H8).",
                        "VernacExtend",
                        "751caa1b1949beddf48c2c9e65f078511e3aa7ce"
                    ]
                },
                {
                    "command": [
                        "assert (H10 := H5 H7).",
                        "VernacExtend",
                        "9cff55f32581ea1c696531f0f9a06340a82d886d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold Wn.",
                        "VernacExtend",
                        "5484c9f9f163d4152f79a42c70a9497175dbed5b"
                    ]
                },
                {
                    "command": [
                        "cut (forall z:R, cond_positivity z = true <-> 0 <= z).",
                        "VernacExtend",
                        "2915a5f89143bd3d627c40846ee75cfb0c7931fa"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := dicho_up_car x y (fun z:R => cond_positivity (f z)) n).",
                        "VernacExtend",
                        "5e080d7dcb6d8afa9d3cd193bab5f49848d7d507"
                    ]
                },
                {
                    "command": [
                        "elim (H7 (f (dicho_up x y (fun z:R => cond_positivity (f z)) n))); intros.",
                        "VernacExtend",
                        "aa53a29edd1515ad2a3932db50461e65bc57fa9e"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "apply H8.",
                        "VernacExtend",
                        "2014720df0411c2963f20792fe424080d05f44aa"
                    ]
                },
                {
                    "command": [
                        "elim (H7 (f y)); intros.",
                        "VernacExtend",
                        "1228404ea7aa2f8919e59445ce6030a39c4f86fb"
                    ]
                },
                {
                    "command": [
                        "apply H12.",
                        "VernacExtend",
                        "5a745b26a30edb1cd58baf290f56d389ba5cf959"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold cond_positivity.",
                        "VernacExtend",
                        "f5b411afc0a5e4fcab47ee21bc146b77ba14a760"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec 0 z) as [Hle|Hnle].",
                        "VernacExtend",
                        "4fd62d3dafcdcf97fcf5d1565da9ec1636c7ef77"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intro; assumption.",
                        "VernacExtend",
                        "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
                    ]
                },
                {
                    "command": [
                        "intro; reflexivity.",
                        "VernacExtend",
                        "dc2d3bdaf5fe0de88334762a176f5b2d84487862"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intro feqt;discriminate feqt.",
                        "VernacExtend",
                        "d93ce505ef755eb96a49389e26333d4d512fe332"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "contradiction.",
                        "VernacExtend",
                        "9b6a5c45e1144cbbccd544effb2a97082518704a"
                    ]
                },
                {
                    "command": [
                        "unfold Vn.",
                        "VernacExtend",
                        "1dd0030463a130debb17b61468523e237c4d4b31"
                    ]
                },
                {
                    "command": [
                        "cut (forall z:R, cond_positivity z = false <-> z < 0).",
                        "VernacExtend",
                        "f975cf4b92ec51fda1a92cad1eb4e3584cd9598f"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := dicho_lb_car x y (fun z:R => cond_positivity (f z)) n).",
                        "VernacExtend",
                        "b03916d948d173d7a8230d8d2ae11fcc2fe6a523"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "elim (H7 (f (dicho_lb x y (fun z:R => cond_positivity (f z)) n))); intros.",
                        "VernacExtend",
                        "37855fa0c47aa0a1e0cafdc8d002ce0cd553d90d"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "apply H8.",
                        "VernacExtend",
                        "2014720df0411c2963f20792fe424080d05f44aa"
                    ]
                },
                {
                    "command": [
                        "elim (H7 (f x)); intros.",
                        "VernacExtend",
                        "9618fae7d42a5e4ede0f4dc68411cb039ec6427e"
                    ]
                },
                {
                    "command": [
                        "apply H12.",
                        "VernacExtend",
                        "5a745b26a30edb1cd58baf290f56d389ba5cf959"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold cond_positivity.",
                        "VernacExtend",
                        "f5b411afc0a5e4fcab47ee21bc146b77ba14a760"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec 0 z) as [Hle|Hnle].",
                        "VernacExtend",
                        "4fd62d3dafcdcf97fcf5d1565da9ec1636c7ef77"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intro feqt; discriminate feqt.",
                        "VernacExtend",
                        "d93ce505ef755eb96a49389e26333d4d512fe332"
                    ]
                },
                {
                    "command": [
                        "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle H7)).",
                        "VernacExtend",
                        "591eb022aa00abf7dc0dbb5384300d780a66412e"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intro; auto with real.",
                        "VernacExtend",
                        "b2ed16b62664ad0304e1f5d05697ba9f02acad03"
                    ]
                },
                {
                    "command": [
                        "intro; reflexivity.",
                        "VernacExtend",
                        "dc2d3bdaf5fe0de88334762a176f5b2d84487862"
                    ]
                },
                {
                    "command": [
                        "cut (Un_cv Wn x0).",
                        "VernacExtend",
                        "098e61430148344cf3de56dd80d43dfa97ccdafd"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := continuity_seq f Wn x0 (H x0) H5).",
                        "VernacExtend",
                        "f57e4ce48691294f881f85cd4674399f05216fae"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T 0 (f x0)) as [[Hlt|<-]|Hgt].",
                        "VernacExtend",
                        "50cf822fbe440251d5d72db815975fbfc96b8248"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv in H7; unfold R_dist in H7.",
                        "VernacExtend",
                        "9776e854057e49ed840a26fd8cfcb77537d3c542"
                    ]
                },
                {
                    "command": [
                        "cut (0 < - f x0).",
                        "VernacExtend",
                        "3eb292ea41c2801d2cfbe3e8906f1f51815d11d4"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "elim (H7 (- f x0) H8); intros.",
                        "VernacExtend",
                        "0b08d99f7ef5a48e907cd4c01f9e0cd00c7beca2"
                    ]
                },
                {
                    "command": [
                        "cut (x2 >= x2)%nat; [ intro | unfold ge; apply le_n ].",
                        "VernacExtend",
                        "9d5d47d11098e4e39b4a851b138a3472df417387"
                    ]
                },
                {
                    "command": [
                        "assert (H11 := H9 x2 H10).",
                        "VernacExtend",
                        "3689ebce046e1ce95f44d091185a16b5a3888bef"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right in H11.",
                        "VernacExtend",
                        "144e693152c8c0a16c30b04ac66155c2831223fd"
                    ]
                },
                {
                    "command": [
                        "pattern (- f x0) at 1 in H11; rewrite <- Rplus_0_r in H11.",
                        "VernacExtend",
                        "ed849f46fd10776f9808b4fd379edf7039bf4c65"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in H11; rewrite (Rplus_comm (f (Wn x2))) in H11.",
                        "VernacExtend",
                        "a9e73d5df964427c5fce04bf494e12ac13531f8c"
                    ]
                },
                {
                    "command": [
                        "assert (H12 := Rplus_lt_reg_l _ _ _ H11).",
                        "VernacExtend",
                        "365df9ca6409683824912eceaaa9abfff8aa9c19"
                    ]
                },
                {
                    "command": [
                        "assert (H13 := H6 x2).",
                        "VernacExtend",
                        "f304ea6ea59ab9edebd8b5b9b93fa8e0c1aafd01"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H13 H12)).",
                        "VernacExtend",
                        "c7a8e625b6517edad594eef9785aa45d5e63640a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; left; unfold Rminus; apply Rplus_le_lt_0_compat.",
                        "VernacExtend",
                        "fc320cd48c45288d24386e640e6c9dbb071e75e6"
                    ]
                },
                {
                    "command": [
                        "apply H6.",
                        "VernacExtend",
                        "b0314bbdc776869d305067ca471096a36fa958c1"
                    ]
                },
                {
                    "command": [
                        "exact H8.",
                        "VernacExtend",
                        "125096764f05c2e6b59a11140e6c3ad0b07b1f9e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_0_gt_lt_contravar; assumption.",
                        "VernacExtend",
                        "44c1529c7f8ab9cf2edf01ae1727eaf3cc83d329"
                    ]
                },
                {
                    "command": [
                        "unfold Wn; assumption.",
                        "VernacExtend",
                        "f39383ef8f877fe307b6dc4a2ec08eacfdbc5d3a"
                    ]
                },
                {
                    "command": [
                        "cut (Un_cv Vn x0).",
                        "VernacExtend",
                        "e7cb789ec521f1c3fc632cf263e825b2f9731212"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := continuity_seq f Vn x0 (H x0) H5).",
                        "VernacExtend",
                        "f862fbdb5022529f7612a155a0fa2cc9ff9a6cca"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T 0 (f x0)) as [[Hlt|<-]|Hgt].",
                        "VernacExtend",
                        "50cf822fbe440251d5d72db815975fbfc96b8248"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv in H7; unfold R_dist in H7.",
                        "VernacExtend",
                        "9776e854057e49ed840a26fd8cfcb77537d3c542"
                    ]
                },
                {
                    "command": [
                        "elim (H7 (f x0) Hlt); intros.",
                        "VernacExtend",
                        "780778e990a1baba29ff50ce129aaeba3576a528"
                    ]
                },
                {
                    "command": [
                        "cut (x2 >= x2)%nat; [ intro | unfold ge; apply le_n ].",
                        "VernacExtend",
                        "9d5d47d11098e4e39b4a851b138a3472df417387"
                    ]
                },
                {
                    "command": [
                        "assert (H10 := H8 x2 H9).",
                        "VernacExtend",
                        "d5500d58f3d647a6ba8a2cd57d954add11bb0a0c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_left in H10.",
                        "VernacExtend",
                        "14240077d5d0707ff1832e8e7663c78fc55bc673"
                    ]
                },
                {
                    "command": [
                        "pattern (f x0) at 2 in H10; rewrite <- Rplus_0_r in H10.",
                        "VernacExtend",
                        "d2423523019853efef8b697eaf583c1db9c9175a"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_minus_distr' in H10.",
                        "VernacExtend",
                        "4e1b9bc4e3a3f1a1969bfa40086e2bfda02081bc"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus in H10.",
                        "VernacExtend",
                        "77311f9fa35fb02c5b6ec220e504567453252063"
                    ]
                },
                {
                    "command": [
                        "assert (H11 := Rplus_lt_reg_l _ _ _ H10).",
                        "VernacExtend",
                        "80861435817a891c0537fa9eda348a991ef75e72"
                    ]
                },
                {
                    "command": [
                        "assert (H12 := H6 x2).",
                        "VernacExtend",
                        "d06ebb336971dc23196f3c973a47ed6391571067"
                    ]
                },
                {
                    "command": [
                        "cut (0 < f (Vn x2)).",
                        "VernacExtend",
                        "48786e720162926cc888da836a3da01ca2d3937a"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H13 H12)).",
                        "VernacExtend",
                        "abef24b80847029d3dcda2f5362d7d67e8b85af9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (f (Vn x2))).",
                        "VernacExtend",
                        "3521ec98856061d4b6093f13d499984823eddaf9"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_0_gt_lt_contravar; assumption.",
                        "VernacExtend",
                        "44c1529c7f8ab9cf2edf01ae1727eaf3cc83d329"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (f x0 - f (Vn x2)).",
                        "VernacExtend",
                        "605c5f184f936589733cc93384edfab06824e444"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (f x0 - f (Vn x2) + (f (Vn x2) - f x0)) with 0; [ unfold Rminus; apply Rplus_lt_le_0_compat | ring ].",
                        "VernacExtend",
                        "7985f4d41da9c7aa64199a4394f48fab964da766"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_0_ge_le_contravar; apply Rle_ge; apply H6.",
                        "VernacExtend",
                        "4bc3a81b9e77ee90d7c1ecc7ff04aa967662684f"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "unfold Vn; assumption.",
                        "VernacExtend",
                        "e2dc6aa16e8bac10fa3f23df119129d60b493bd0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "IVT_cor",
            "line_nb": 472,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T 0 (f x)) as [[Hltx|Heqx]|Hgtx].",
                        "VernacExtend",
                        "7bb6fc0f160b342269d0ae5ede0a3aa0e9b51a8f"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T 0 (f y)) as [[Hlty|Heqy]|Hgty].",
                        "VernacExtend",
                        "a5b96bd2977d4d7f8ba531616aef95311ea67938"
                    ]
                },
                {
                    "command": [
                        "cut (0 < f x * f y); [ intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H1 H2)) | apply Rmult_lt_0_compat; assumption ].",
                        "VernacExtend",
                        "6351671a71e5aab5e6585996d4918c6a41e0c3bb"
                    ]
                },
                {
                    "command": [
                        "exists y.",
                        "VernacExtend",
                        "1c06cb2466f48b6def24e74ddeda9956981c0a0a"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | right; reflexivity ].",
                        "VernacExtend",
                        "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
                    ]
                },
                {
                    "command": [
                        "symmetry ; exact Heqy.",
                        "VernacExtend",
                        "0016014bb5d8daf61991a6aa728f7711c7a75c71"
                    ]
                },
                {
                    "command": [
                        "cut (x < y).",
                        "VernacExtend",
                        "6c6411c16220ba0869c7b7f288b4232e5f90a4af"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := IVT (- f)%F x y (continuity_opp f H) H2).",
                        "VernacExtend",
                        "1da30e717a996cfe12ae19645ffb920d89a6a8ac"
                    ]
                },
                {
                    "command": [
                        "cut ((- f)%F x < 0).",
                        "VernacExtend",
                        "6a14574ddbedb89ca2e9bc492074f1655e9b3374"
                    ]
                },
                {
                    "command": [
                        "cut (0 < (- f)%F y).",
                        "VernacExtend",
                        "7569d1a0c34ebfdd050e9979377287091b67b8ce"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (H3 H5 H4) as (x0,[]).",
                        "VernacExtend",
                        "64848efd53f5104767ddfd0733dbf67ba40a5d30"
                    ]
                },
                {
                    "command": [
                        "exists x0.",
                        "VernacExtend",
                        "9cf0657053433e90b28a795544f893f4a0f1ace3"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold opp_fct in H7.",
                        "VernacExtend",
                        "5ab948addc1c8eb85b8499ef167f08d1837935d9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (f x0)).",
                        "VernacExtend",
                        "9774b009b2cc6ac4cd14fe7e147962793527518e"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_eq_0_compat; assumption.",
                        "VernacExtend",
                        "699618a211255e5caeecf292d6b0d871c76fd9f8"
                    ]
                },
                {
                    "command": [
                        "unfold opp_fct; apply Ropp_0_gt_lt_contravar; assumption.",
                        "VernacExtend",
                        "a2e79271e270e172dcc32ae8a197940877f70423"
                    ]
                },
                {
                    "command": [
                        "unfold opp_fct.",
                        "VernacExtend",
                        "4e63c1953428e7d557cffe0058417d26d5bb9bf7"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (f x); rewrite Rplus_opp_r; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "5534f2ab3776190317d6cf3331670324baa07479"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite H2 in Hltx.",
                        "VernacExtend",
                        "f10f5502f9f8634fbc3a2c18b1c3cbbced2927d1"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rlt_trans _ _ _ Hgty Hltx)).",
                        "VernacExtend",
                        "5d8e39c0b94fe5503818164e735b588c7b82d325"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | assumption ].",
                        "VernacExtend",
                        "3e8d5ea4153788a4b3b4f71e65238c3c1dabd9c8"
                    ]
                },
                {
                    "command": [
                        "symmetry ; assumption.",
                        "VernacExtend",
                        "936f544fa969baad9c600ccc844230fa4d067c8b"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T 0 (f y)) as [[Hlty|Heqy]|Hgty].",
                        "VernacExtend",
                        "a5b96bd2977d4d7f8ba531616aef95311ea67938"
                    ]
                },
                {
                    "command": [
                        "cut (x < y).",
                        "VernacExtend",
                        "6c6411c16220ba0869c7b7f288b4232e5f90a4af"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply IVT; assumption.",
                        "VernacExtend",
                        "421d2289504f229fad5574b98a1c03a9d3854331"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite H2 in Hgtx.",
                        "VernacExtend",
                        "3a3d85d2ea6bfa63a54b5da7f36d5c4aea68d034"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rlt_trans _ _ _ Hlty Hgtx)).",
                        "VernacExtend",
                        "ab63fce4e4a5aee6867ccb29e8984d229e5d8b0a"
                    ]
                },
                {
                    "command": [
                        "exists y.",
                        "VernacExtend",
                        "1c06cb2466f48b6def24e74ddeda9956981c0a0a"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | right; reflexivity ].",
                        "VernacExtend",
                        "cb5c87d2e3688102fb3e45b211dc38cc2cfcc64d"
                    ]
                },
                {
                    "command": [
                        "symmetry ; assumption.",
                        "VernacExtend",
                        "936f544fa969baad9c600ccc844230fa4d067c8b"
                    ]
                },
                {
                    "command": [
                        "cut (0 < f x * f y).",
                        "VernacExtend",
                        "54807a3c3f1f9c692c0fcb9ce0462bbb001aa62a"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H2 H1)).",
                        "VernacExtend",
                        "d4f375d8d005f3a260ed94543228eefae5fb46d5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_opp_opp; apply Rmult_lt_0_compat; apply Ropp_0_gt_lt_contravar; assumption.",
                        "VernacExtend",
                        "1d46a9a91951ddc9b44cd87dc60bd4b3b4433663"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqrt_exists",
            "line_nb": 522,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "set (f := fun x:R => Rsqr x - y).",
                        "VernacExtend",
                        "8b01c1968eb3691db83cb8877b5f43ceb084e8c0"
                    ]
                },
                {
                    "command": [
                        "cut (f 0 <= 0).",
                        "VernacExtend",
                        "becb99352507839981676dac48ceec038db7a1a6"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "cut (continuity f).",
                        "VernacExtend",
                        "783fe01df63d0447f62267751ec5c58652527ca2"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T y 1) as [[Hlt| -> ]|Hgt].",
                        "VernacExtend",
                        "3f1b41b0b54e52f4d0b880538629bd1b07b077eb"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= f 1).",
                        "VernacExtend",
                        "50cf54e2c5f5f0acb242045f3832e0eee8d30ac5"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "cut (f 0 * f 1 <= 0).",
                        "VernacExtend",
                        "f52485de12df1702fdddd6f35a5d617fc1d55890"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (X := IVT_cor f 0 1 H1 (Rlt_le _ _ Rlt_0_1) H3).",
                        "VernacExtend",
                        "d60a9ff37ec3af6ca76b3c4171cb9bda3d40938c"
                    ]
                },
                {
                    "command": [
                        "elim X; intros t H4.",
                        "VernacExtend",
                        "3d62fd86a0f99d6df7477545394c131e89225ee4"
                    ]
                },
                {
                    "command": [
                        "exists t.",
                        "VernacExtend",
                        "1970ed3dcf3aed959b3c5a6207f3f37122ce8608"
                    ]
                },
                {
                    "command": [
                        "elim H4; intros.",
                        "VernacExtend",
                        "ef88f175449d4af46e0685700665ce0cdf3e5695"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros; assumption.",
                        "VernacExtend",
                        "e3759bfc7109dba24b94887055d32bb02045fe9b"
                    ]
                },
                {
                    "command": [
                        "unfold f in H6.",
                        "VernacExtend",
                        "a737fee3ed834b8ddc23196a3d58b7f80f7bb820"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_diag_uniq_sym; exact H6.",
                        "VernacExtend",
                        "6773d6211c4a2ae9e2beeb7d703406008d0987dc"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm; pattern 0 at 2; rewrite <- (Rmult_0_r (f 1)).",
                        "VernacExtend",
                        "edcbd2e92e2051f5db4988ce7fd738c3b7da9af3"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l; assumption.",
                        "VernacExtend",
                        "c1d10d7ba22f8cceb21d711464ab91c1d514e68d"
                    ]
                },
                {
                    "command": [
                        "unfold f.",
                        "VernacExtend",
                        "54a386f4161710b69df4a2025df24a14e842ecf2"
                    ]
                },
                {
                    "command": [
                        "rewrite Rsqr_1.",
                        "VernacExtend",
                        "8b4cdcf64b71654bed8bc6664a5580484e7140b9"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with y.",
                        "VernacExtend",
                        "1a00f6d08821d1775665132ac8811e0c258cb846"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus; rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; left; assumption.",
                        "VernacExtend",
                        "cc53d22176bb777c79053f1d5b6f89be33b02f49"
                    ]
                },
                {
                    "command": [
                        "exists 1.",
                        "VernacExtend",
                        "18eb310858be5acae7304d0d9ed33063568db310"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "left; apply Rlt_0_1.",
                        "VernacExtend",
                        "4038dd3f68ab1cd8921ed1c273f77fae982c62c1"
                    ]
                },
                {
                    "command": [
                        "symmetry; apply Rsqr_1.",
                        "VernacExtend",
                        "0542658db04a63d45809af2438c41cb3f42934d1"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= f y).",
                        "VernacExtend",
                        "3502b67b949487b23f8d492cf83d098c4d2c58e4"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "cut (f 0 * f y <= 0).",
                        "VernacExtend",
                        "127cc7658480ae08aaf6e0b926f2642ff4e1f730"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (X := IVT_cor f 0 y H1 H H3).",
                        "VernacExtend",
                        "fba6184310589996d3f93154de548e7ec7a19287"
                    ]
                },
                {
                    "command": [
                        "elim X; intros t H4.",
                        "VernacExtend",
                        "3d62fd86a0f99d6df7477545394c131e89225ee4"
                    ]
                },
                {
                    "command": [
                        "exists t.",
                        "VernacExtend",
                        "1970ed3dcf3aed959b3c5a6207f3f37122ce8608"
                    ]
                },
                {
                    "command": [
                        "elim H4; intros.",
                        "VernacExtend",
                        "ef88f175449d4af46e0685700665ce0cdf3e5695"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros; assumption.",
                        "VernacExtend",
                        "e3759bfc7109dba24b94887055d32bb02045fe9b"
                    ]
                },
                {
                    "command": [
                        "unfold f in H6.",
                        "VernacExtend",
                        "a737fee3ed834b8ddc23196a3d58b7f80f7bb820"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_diag_uniq_sym; exact H6.",
                        "VernacExtend",
                        "6773d6211c4a2ae9e2beeb7d703406008d0987dc"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm; pattern 0 at 2; rewrite <- (Rmult_0_r (f y)).",
                        "VernacExtend",
                        "d0b4107918ae8df0283599ae6c271d901d468683"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l; assumption.",
                        "VernacExtend",
                        "c1d10d7ba22f8cceb21d711464ab91c1d514e68d"
                    ]
                },
                {
                    "command": [
                        "unfold f.",
                        "VernacExtend",
                        "54a386f4161710b69df4a2025df24a14e842ecf2"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with y.",
                        "VernacExtend",
                        "1a00f6d08821d1775665132ac8811e0c258cb846"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; rewrite Rplus_comm; unfold Rminus; rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r.",
                        "VernacExtend",
                        "9904d035ac660de2ded2bce907abe059b7186bb2"
                    ]
                },
                {
                    "command": [
                        "pattern y at 1; rewrite <- Rmult_1_r.",
                        "VernacExtend",
                        "0f0b8c121feb2bae72cbdee8c8918d0a2c030cdc"
                    ]
                },
                {
                    "command": [
                        "unfold Rsqr; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "8c1a6605fc9bc8f027c6ec71a01fd51c1db0c748"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "left; exact Hgt.",
                        "VernacExtend",
                        "412fde393de66dbc13a62a8909e63b93108d8aaa"
                    ]
                },
                {
                    "command": [
                        "replace f with (Rsqr - fct_cte y)%F.",
                        "VernacExtend",
                        "ef00762c3e3aa1b9ad794fc5b06c22671584bcef"
                    ]
                },
                {
                    "command": [
                        "apply continuity_minus.",
                        "VernacExtend",
                        "773a87a4ce092a9d28ea73bb1905f2d601106576"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous; apply derivable_Rsqr.",
                        "VernacExtend",
                        "13101d8fe99c0b539ca155837b863d96fe68c862"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous; apply derivable_const.",
                        "VernacExtend",
                        "15d65af1f17802e15ee6d59229f36e288f880c8a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold f; rewrite Rsqr_0.",
                        "VernacExtend",
                        "fc921f613395c31fe96b680f95fea0421eb37b81"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_0_l.",
                        "VernacExtend",
                        "bcb768dd3c3aa3bdb8dbfd1b3deebe91f8ee8c59"
                    ]
                },
                {
                    "command": [
                        "apply Rge_le.",
                        "VernacExtend",
                        "eae8ed3f063c0c64fc52ba03563e73be950936a6"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_0_le_ge_contravar; assumption.",
                        "VernacExtend",
                        "70fb7377754fb4a9713993e67ca34c867eb04cd1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqrt_positivity",
            "line_nb": 584,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "destruct (Rsqrt_exists (nonneg x) (cond_nonneg x)) as (x0 & H1 & H2).",
                        "VernacExtend",
                        "868df5da47a3d94b7b3a1857ded043426266808d"
                    ]
                },
                {
                    "command": [
                        "cut (x0 = Rsqrt x).",
                        "VernacExtend",
                        "c698f70fa364921aca0ce573e4aca7745f4b263c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H; assumption.",
                        "VernacExtend",
                        "a97c9ef724ad863a1649a87e1183b8c29f2d0f87"
                    ]
                },
                {
                    "command": [
                        "unfold Rsqrt.",
                        "VernacExtend",
                        "46ac5bf9becc674ac3651132a10bad4894e28828"
                    ]
                },
                {
                    "command": [
                        "case (Rsqrt_exists x (cond_nonneg x)) as (?,[]).",
                        "VernacExtend",
                        "b6e68375ce0688749154c393305e94513b8d18ee"
                    ]
                },
                {
                    "command": [
                        "apply Rsqr_inj.",
                        "VernacExtend",
                        "7bdfb7b89c00cd6f3819fc1496b24bee0d9b32ea"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0, <- H2; reflexivity.",
                        "VernacExtend",
                        "8206ed7c2c26964b454549bd14c9cf4d581e1f2b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsqrt_Rsqrt",
            "line_nb": 597,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (Rsqrt_exists (nonneg x) (cond_nonneg x)) as (x0 & H1 & H2).",
                        "VernacExtend",
                        "868df5da47a3d94b7b3a1857ded043426266808d"
                    ]
                },
                {
                    "command": [
                        "cut (x0 = Rsqrt x).",
                        "VernacExtend",
                        "c698f70fa364921aca0ce573e4aca7745f4b263c"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H.",
                        "VernacExtend",
                        "95b84807b4afb2ef79b7cc04a1c91a4e3a502e47"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; reflexivity.",
                        "VernacExtend",
                        "9c790f3e50b805b4cc946f2fcb63d8cdc82863fa"
                    ]
                },
                {
                    "command": [
                        "unfold Rsqrt.",
                        "VernacExtend",
                        "46ac5bf9becc674ac3651132a10bad4894e28828"
                    ]
                },
                {
                    "command": [
                        "case (Rsqrt_exists x (cond_nonneg x)) as (x1 & ? & ?).",
                        "VernacExtend",
                        "7acef50e5d8f0ef5ab77a30c9d2b23431a33703e"
                    ]
                },
                {
                    "command": [
                        "apply Rsqr_inj.",
                        "VernacExtend",
                        "7bdfb7b89c00cd6f3819fc1496b24bee0d9b32ea"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0, <- H2; reflexivity.",
                        "VernacExtend",
                        "8206ed7c2c26964b454549bd14c9cf4d581e1f2b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}