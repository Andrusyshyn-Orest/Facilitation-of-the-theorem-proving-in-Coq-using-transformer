{
    "filename": "theories/Reals/Ranalysis1.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Export Rlimit.",
            "VernacRequire",
            "a503caf04b03a4b2dc7aa051bbecf873e22e4853"
        ],
        [
            "Require Export Rderiv.",
            "VernacRequire",
            "c5c1fa968b4a6ee240c76609a0def451b2cab9b9"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Implicit Type f : R -> R.",
            "VernacReserve",
            "7c5974d9f4da511db186372f103c8b50ca378e15"
        ],
        [
            "Definition plus_fct f1 f2 (x:R) : R := f1 x + f2 x.",
            "VernacDefinition",
            "083b4cc6aa3895a54bf6b2e0c022c5a52f47d221"
        ],
        [
            "Definition opp_fct f (x:R) : R := - f x.",
            "VernacDefinition",
            "439b463641aff5334086627397444ba8017e7f5c"
        ],
        [
            "Definition mult_fct f1 f2 (x:R) : R := f1 x * f2 x.",
            "VernacDefinition",
            "9624cd2bc7d59821d65e3866e6d7e8b4a90c90e7"
        ],
        [
            "Definition mult_real_fct (a:R) f (x:R) : R := a * f x.",
            "VernacDefinition",
            "8368d34b38b6733685cfb7c18d9f5b6c26dea894"
        ],
        [
            "Definition minus_fct f1 f2 (x:R) : R := f1 x - f2 x.",
            "VernacDefinition",
            "9d875f868dc2733ecc412101c326fc7147d79636"
        ],
        [
            "Definition div_fct f1 f2 (x:R) : R := f1 x / f2 x.",
            "VernacDefinition",
            "c30e16f47f091c8e7ff4a40cb9c4d77b9c496a74"
        ],
        [
            "Definition div_real_fct (a:R) f (x:R) : R := a / f x.",
            "VernacDefinition",
            "023c2efc589f2d27dce58113b90fa13e82317e00"
        ],
        [
            "Definition comp f1 f2 (x:R) : R := f1 (f2 x).",
            "VernacDefinition",
            "26ba7b4e8f87abd10aacfffe370560d1a1188147"
        ],
        [
            "Definition inv_fct f (x:R) : R := / f x.",
            "VernacDefinition",
            "87c2b7c89494405dcdf8535734673cac85c6f904"
        ],
        [
            "Delimit Scope Rfun_scope with F.",
            "VernacDelimiters",
            "27114d6783043406b757998052990bc57f952dca"
        ],
        [
            "Arguments plus_fct (f1 f2)%F x%R.",
            "VernacArguments",
            "eff7c42b5cef25964089d2afeacaf93882357bc0"
        ],
        [
            "Arguments mult_fct (f1 f2)%F x%R.",
            "VernacArguments",
            "5cb41cd9a9d742258bc7cc54b1a9ec5e9f48635f"
        ],
        [
            "Arguments minus_fct (f1 f2)%F x%R.",
            "VernacArguments",
            "f60a9a9de1fe933d249c52c3d4cfabcd94149a6c"
        ],
        [
            "Arguments div_fct (f1 f2)%F x%R.",
            "VernacArguments",
            "748283852b82b62a70e3e5f27930ba4010735874"
        ],
        [
            "Arguments inv_fct f%F x%R.",
            "VernacArguments",
            "1ab11af98dc585f9caad1e946d5ffa96a48f87fc"
        ],
        [
            "Arguments opp_fct f%F x%R.",
            "VernacArguments",
            "97592134a1d002621a46b74e90b87897becb0b74"
        ],
        [
            "Arguments mult_real_fct a%R f%F x%R.",
            "VernacArguments",
            "e0188d5723bd9fc63ec05ecb86bc71705682034c"
        ],
        [
            "Arguments div_real_fct a%R f%F x%R.",
            "VernacArguments",
            "a1ddd8a0dd3574df996478329e881cf4a023a151"
        ],
        [
            "Arguments comp (f1 f2)%F x%R.",
            "VernacArguments",
            "5ab233081b8a18f3209a95ed1af3c4aca09b229e"
        ],
        [
            "Infix \"+\" := plus_fct : Rfun_scope.",
            "VernacInfix",
            "f1e56e85b29a8c9dcd4db034ae39531fe1905a97"
        ],
        [
            "Notation \"- x\" := (opp_fct x) : Rfun_scope.",
            "VernacNotation",
            "abd397da346afbaf3e406d15c723930c256a6d3b"
        ],
        [
            "Infix \"*\" := mult_fct : Rfun_scope.",
            "VernacInfix",
            "47ad65adbd1f61bff0eb094f684dee7ccbea8171"
        ],
        [
            "Infix \"-\" := minus_fct : Rfun_scope.",
            "VernacInfix",
            "8603c75e88094c1b8a29f0fae3f26af4e023e59a"
        ],
        [
            "Infix \"/\" := div_fct : Rfun_scope.",
            "VernacInfix",
            "cff90354b10e6960e4b69342d0a5da02dbf0008e"
        ],
        [
            "Local Notation \"f1 'o' f2\" := (comp f1 f2) (at level 20, right associativity) : Rfun_scope.",
            "VernacNotation",
            "f7ebccc23af5fef2a771e5f80c1dedee57057b0a"
        ],
        [
            "Notation \"/ x\" := (inv_fct x) : Rfun_scope.",
            "VernacNotation",
            "0ea5b6a88b5fb59726ba7e685c23609211101d5d"
        ],
        [
            "Definition fct_cte (a x:R) : R := a.",
            "VernacDefinition",
            "abb9799c3dffd037da58f23ad5bc225d66e53fb8"
        ],
        [
            "Definition id (x:R) := x.",
            "VernacDefinition",
            "271e58c320e62c1ec976758252e3faf646e35d94"
        ],
        [
            "Definition increasing f : Prop := forall x y:R, x <= y -> f x <= f y.",
            "VernacDefinition",
            "e1ebda5de5b74b3e9fc4d9559e567612e4b846ba"
        ],
        [
            "Definition decreasing f : Prop := forall x y:R, x <= y -> f y <= f x.",
            "VernacDefinition",
            "d7412dec64cd65afb9d3f22260ebd444a4c6f797"
        ],
        [
            "Definition strict_increasing f : Prop := forall x y:R, x < y -> f x < f y.",
            "VernacDefinition",
            "1d080e8eaf56d6030a564d687238394c75b04032"
        ],
        [
            "Definition strict_decreasing f : Prop := forall x y:R, x < y -> f y < f x.",
            "VernacDefinition",
            "d28ff8f0484a12e22d41d01e08e6fbe0cc19ec02"
        ],
        [
            "Definition constant f : Prop := forall x y:R, f x = f y.",
            "VernacDefinition",
            "282b0f11a5a4c1a9cb0641d4f2ae3c60fcee9604"
        ],
        [
            "Definition no_cond (x:R) : Prop := True.",
            "VernacDefinition",
            "72207548196c0f4ded2a20189bfaac5d055e6a8e"
        ],
        [
            "Definition constant_D_eq f (D:R -> Prop) (c:R) : Prop := forall x:R, D x -> f x = c.",
            "VernacDefinition",
            "7059743fab667fc47bb3002be58543d82fdaf145"
        ],
        [
            "Definition continuity_pt f (x0:R) : Prop := continue_in f no_cond x0.",
            "VernacDefinition",
            "ec7b8b07d532be27dd6929d095667a1e844d4763"
        ],
        [
            "Definition continuity f : Prop := forall x:R, continuity_pt f x.",
            "VernacDefinition",
            "225e28a6f3e088d9013b955c18e791337ddf76a3"
        ],
        [
            "Arguments continuity_pt f%F x0%R.",
            "VernacArguments",
            "1ca276dc4acf9dcf27c10502d4a951f63e335326"
        ],
        [
            "Arguments continuity f%F.",
            "VernacArguments",
            "5d805a9d7f7cf11e1af2ec7123af4f387970e47e"
        ],
        [
            "Lemma continuity_pt_locally_ext : forall f g a x, 0 < a -> (forall y, R_dist y x < a -> f y = g y) -> continuity_pt f x -> continuity_pt g x.",
            "VernacStartTheoremProof",
            "90a624a826958b32d84fbf55342e2eb7f90817d2"
        ],
        [
            "intros f g a x a0 q cf eps ep.",
            "VernacExtend",
            "3b6264e8e019c88b3b9474413c53e4e47802a2e0"
        ],
        [
            "destruct (cf eps ep) as [a' [a'p Pa']].",
            "VernacExtend",
            "d261904ab5668c65829c0e258d5b83290dbd95d1"
        ],
        [
            "exists (Rmin a a'); split.",
            "VernacExtend",
            "0c9b0207a7b32d681836198e74af72d7ccf1507d"
        ],
        [
            "unfold Rmin; destruct (Rle_dec a a').",
            "VernacExtend",
            "b37841eae40fcf7dd84b5317979e636dc325527d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros y cy; rewrite <- !q.",
            "VernacExtend",
            "4c9da3b8216f06137c72cc8bb89bb90d8300e2f3"
        ],
        [
            "apply Pa'.",
            "VernacExtend",
            "f38bf9c4d06b62a13f5ced1a1d6c7c6e5b20b5e8"
        ],
        [
            "split;[| apply Rlt_le_trans with (Rmin a a');[ | apply Rmin_r]];tauto.",
            "VernacExtend",
            "08325806b0a94956ee99691280a6c426f031c6d9"
        ],
        [
            "rewrite R_dist_eq; assumption.",
            "VernacExtend",
            "631996c2c86a781de949b7774f334aeaca295632"
        ],
        [
            "apply Rlt_le_trans with (Rmin a a');[ | apply Rmin_l]; tauto.",
            "VernacExtend",
            "afb24f250e365cf6b552633886dad59f1daf063d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_plus : forall f1 f2 (x0:R), continuity_pt f1 x0 -> continuity_pt f2 x0 -> continuity_pt (f1 + f2) x0.",
            "VernacStartTheoremProof",
            "3164a35ecbb1dc585dc73a185b6d405ceec80b2f"
        ],
        [
            "unfold continuity_pt, plus_fct; unfold continue_in; intros; apply limit_plus; assumption.",
            "VernacExtend",
            "1a1928cb7f2c6d1948751a92ac425903d5568ddc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_opp : forall f (x0:R), continuity_pt f x0 -> continuity_pt (- f) x0.",
            "VernacStartTheoremProof",
            "4db50f572244230254f4a9a5ed59f0793eca8a86"
        ],
        [
            "unfold continuity_pt, opp_fct; unfold continue_in; intros; apply limit_Ropp; assumption.",
            "VernacExtend",
            "3fd006b8be66860b0c87ccb78b3cbdec41e64ee5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_minus : forall f1 f2 (x0:R), continuity_pt f1 x0 -> continuity_pt f2 x0 -> continuity_pt (f1 - f2) x0.",
            "VernacStartTheoremProof",
            "529ddcec8bef684465e6a3f84b0e918cf6a911dc"
        ],
        [
            "unfold continuity_pt, minus_fct; unfold continue_in; intros; apply limit_minus; assumption.",
            "VernacExtend",
            "b92a99ed51cc5d5358b38be19e4e78223ef6dae8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_mult : forall f1 f2 (x0:R), continuity_pt f1 x0 -> continuity_pt f2 x0 -> continuity_pt (f1 * f2) x0.",
            "VernacStartTheoremProof",
            "698ce4bf35fee9d3a02a31aaf42b37ae6ddc3469"
        ],
        [
            "unfold continuity_pt, mult_fct; unfold continue_in; intros; apply limit_mul; assumption.",
            "VernacExtend",
            "2103945cfe233ab658aaea9813e206ccab9256c2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_const : forall f (x0:R), constant f -> continuity_pt f x0.",
            "VernacStartTheoremProof",
            "4befe29439f5d11d9988300ae5cd9e8e26396bce"
        ],
        [
            "unfold constant, continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; intros; exists 1; split; [ apply Rlt_0_1 | intros; generalize (H x x0); intro; rewrite H2; simpl; rewrite R_dist_eq; assumption ].",
            "VernacExtend",
            "6572a68c278bf0cba5b8d04d36b6a1960eb47dd6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_scal : forall f (a x0:R), continuity_pt f x0 -> continuity_pt (mult_real_fct a f) x0.",
            "VernacStartTheoremProof",
            "967841a83056f6a16e1c2ca501902585c932df22"
        ],
        [
            "unfold continuity_pt, mult_real_fct; unfold continue_in; intros; apply (limit_mul (fun x:R => a) f (D_x no_cond x0) a (f x0) x0).",
            "VernacExtend",
            "2f6d2a6cec85863d9085eb44b8449ab02416bbba"
        ],
        [
            "unfold limit1_in; unfold limit_in; intros; exists 1; split.",
            "VernacExtend",
            "00d55b5352f1222b04c2830d5d55246c6f8a1cdc"
        ],
        [
            "apply Rlt_0_1.",
            "VernacExtend",
            "c3f675388bf844e0740197fd71afa66e5eef091d"
        ],
        [
            "intros; rewrite R_dist_eq; assumption.",
            "VernacExtend",
            "5fe690c14c46cd4f4315513d587705f25789638a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_inv : forall f (x0:R), continuity_pt f x0 -> f x0 <> 0 -> continuity_pt (/ f) x0.",
            "VernacStartTheoremProof",
            "d58a676be6bab14525fa0e7db0f466253b92759f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "replace (/ f)%F with (fun x:R => / f x).",
            "VernacExtend",
            "df2d91aac464c67b579023f4f63016f281a95abe"
        ],
        [
            "unfold continuity_pt; unfold continue_in; intros; apply limit_inv; assumption.",
            "VernacExtend",
            "6084c2a6b7e5ff8b85b226b80ce918d7b47660a9"
        ],
        [
            "unfold inv_fct; reflexivity.",
            "VernacExtend",
            "4013fb81e1f655e4170114a147d900070c7e5b97"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma div_eq_inv : forall f1 f2, (f1 / f2)%F = (f1 * / f2)%F.",
            "VernacStartTheoremProof",
            "4473cb7618b4e20edfea9bb310f47d45d1cb5428"
        ],
        [
            "intros; reflexivity.",
            "VernacExtend",
            "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_div : forall f1 f2 (x0:R), continuity_pt f1 x0 -> continuity_pt f2 x0 -> f2 x0 <> 0 -> continuity_pt (f1 / f2) x0.",
            "VernacStartTheoremProof",
            "c0b1539b955727d139df92681186e520b65c7a3e"
        ],
        [
            "intros; rewrite (div_eq_inv f1 f2); apply continuity_pt_mult; [ assumption | apply continuity_pt_inv; assumption ].",
            "VernacExtend",
            "c62beb88e8ad1470037083a9e11f3d68d25abc97"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_comp : forall f1 f2 (x:R), continuity_pt f1 x -> continuity_pt f2 (f1 x) -> continuity_pt (f2 o f1) x.",
            "VernacStartTheoremProof",
            "ff50c94edd19b60d9573d4c3d325a0bc28a80f7a"
        ],
        [
            "unfold continuity_pt; unfold continue_in; intros; unfold comp.",
            "VernacExtend",
            "e55cec522020b541cbaf57ef72d15342afcec754"
        ],
        [
            "cut (limit1_in (fun x0:R => f2 (f1 x0)) (Dgf (D_x no_cond x) (D_x no_cond (f1 x)) f1) ( f2 (f1 x)) x -> limit1_in (fun x0:R => f2 (f1 x0)) (D_x no_cond x) (f2 (f1 x)) x).",
            "VernacExtend",
            "4c694b814ddac639292b27fc28e79807a19c525a"
        ],
        [
            "intro; apply H1.",
            "VernacExtend",
            "868e99754cb1ff2431f4fb10ad32d6ab65a5563a"
        ],
        [
            "eapply limit_comp.",
            "VernacExtend",
            "2a68c6b4f58672734417a1786e0924172cb3c08b"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "bb4f45a45f58bff9b46b6beb4fe1e11070439c16"
        ],
        [
            "assert (H3 := H1 eps H2).",
            "VernacExtend",
            "1d872bb7223517d7237d7485c161449d891e0d8a"
        ],
        [
            "elim H3; intros.",
            "VernacExtend",
            "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "elim H4; intros; assumption.",
            "VernacExtend",
            "90e235a0da22f1f5e1da81b7ceef5bdc1f316203"
        ],
        [
            "intros; case (Req_dec (f1 x) (f1 x1)); intro.",
            "VernacExtend",
            "a89704d100e02d177bc1772a48f8b95edb3ef8ad"
        ],
        [
            "rewrite H6; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
            "VernacExtend",
            "11977271ce925598f61aec9be47c51a495f1334d"
        ],
        [
            "elim H4; intros; apply H8.",
            "VernacExtend",
            "29fe9889edb5f9e6fb4b9a49bd238499a521f66e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold Dgf, D_x, no_cond.",
            "VernacExtend",
            "eaaf81f9f315e97491d8a0a479a4197d7669aa41"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "elim H5; unfold D_x, no_cond; intros.",
            "VernacExtend",
            "3e21dd751fd98f9f7989574dfc5636bf129e9508"
        ],
        [
            "elim H9; intros; assumption.",
            "VernacExtend",
            "8fe07a35a5ab7cf96f2efb2baff6e494f333a6ed"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H5; intros; assumption.",
            "VernacExtend",
            "e3759bfc7109dba24b94887055d32bb02045fe9b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_plus : forall f1 f2, continuity f1 -> continuity f2 -> continuity (f1 + f2).",
            "VernacStartTheoremProof",
            "bdd3a838d563feeb538429510061055c17956a0b"
        ],
        [
            "unfold continuity; intros; apply (continuity_pt_plus f1 f2 x (H x) (H0 x)).",
            "VernacExtend",
            "8d8549f2476608f77c1d76a333ee79055f3147c3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_opp : forall f, continuity f -> continuity (- f).",
            "VernacStartTheoremProof",
            "b378a700d67551d368486309ac9dc2070df5b450"
        ],
        [
            "unfold continuity; intros; apply (continuity_pt_opp f x (H x)).",
            "VernacExtend",
            "1385ea3f1b6a057cdc95c91389effbb4a34830f8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_minus : forall f1 f2, continuity f1 -> continuity f2 -> continuity (f1 - f2).",
            "VernacStartTheoremProof",
            "e003c576aa2f907ffb2ed978071f0487164bc63d"
        ],
        [
            "unfold continuity; intros; apply (continuity_pt_minus f1 f2 x (H x) (H0 x)).",
            "VernacExtend",
            "985a11400c023677f32467a54eb77a97e03942a2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_mult : forall f1 f2, continuity f1 -> continuity f2 -> continuity (f1 * f2).",
            "VernacStartTheoremProof",
            "5ab37e1c9905e59f9bb2f244e083674f68dde14e"
        ],
        [
            "unfold continuity; intros; apply (continuity_pt_mult f1 f2 x (H x) (H0 x)).",
            "VernacExtend",
            "d1be5fc58f7d97a2e0e821842b9cf12f54de73d4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_const : forall f, constant f -> continuity f.",
            "VernacStartTheoremProof",
            "3f165cd3886deeb5d64e604ab53ede147c77110e"
        ],
        [
            "unfold continuity; intros; apply (continuity_pt_const f x H).",
            "VernacExtend",
            "3ace22bf7ca3c846ca8b0da2b673aba1b31e3993"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_scal : forall f (a:R), continuity f -> continuity (mult_real_fct a f).",
            "VernacStartTheoremProof",
            "4393f3d20160210b3bc4da8912681f80b10368a4"
        ],
        [
            "unfold continuity; intros; apply (continuity_pt_scal f a x (H x)).",
            "VernacExtend",
            "610443dbdbe81b67bf42e2e17e22ed6df34e3d0c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_inv : forall f, continuity f -> (forall x:R, f x <> 0) -> continuity (/ f).",
            "VernacStartTheoremProof",
            "8cc3c0e02c78bb96d24ea61bc8e2e03fdff8689c"
        ],
        [
            "unfold continuity; intros; apply (continuity_pt_inv f x (H x) (H0 x)).",
            "VernacExtend",
            "d0cd1c77a178178ad88c8460b51784f5704eda4d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_div : forall f1 f2, continuity f1 -> continuity f2 -> (forall x:R, f2 x <> 0) -> continuity (f1 / f2).",
            "VernacStartTheoremProof",
            "110bb3c834d8b566223bdd7b77cc5e9024ddb85a"
        ],
        [
            "unfold continuity; intros; apply (continuity_pt_div f1 f2 x (H x) (H0 x) (H1 x)).",
            "VernacExtend",
            "5ee77b94a06e74bbd0d9cf7ecb2da9e93884a211"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_comp : forall f1 f2, continuity f1 -> continuity f2 -> continuity (f2 o f1).",
            "VernacStartTheoremProof",
            "dc6fd51db90a90a56a38c8c91bf37ab49c62b2f4"
        ],
        [
            "unfold continuity; intros.",
            "VernacExtend",
            "47679c88013a07b3d6315ca9804ca8f8d80897ad"
        ],
        [
            "apply (continuity_pt_comp f1 f2 x (H x) (H0 (f1 x))).",
            "VernacExtend",
            "0cc4fe47fa48c7caa794f511e165cef974fc73a5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition derivable_pt_lim f (x l:R) : Prop := forall eps:R, 0 < eps -> exists delta : posreal, (forall h:R, h <> 0 -> Rabs h < delta -> Rabs ((f (x + h) - f x) / h - l) < eps).",
            "VernacDefinition",
            "b4c85a2ec2b522eeec88eae94de00c3985959095"
        ],
        [
            "Definition derivable_pt_abs f (x l:R) : Prop := derivable_pt_lim f x l.",
            "VernacDefinition",
            "9955a33e0f16a7a3675af9dd3bc6ba138e8c512e"
        ],
        [
            "Definition derivable_pt f (x:R) := { l:R | derivable_pt_abs f x l }.",
            "VernacDefinition",
            "1c05be21b40f87e97c739f7510a40e3ebbb72989"
        ],
        [
            "Definition derivable f := forall x:R, derivable_pt f x.",
            "VernacDefinition",
            "cc13459ba619a2b01809619d1daa9f25ae2f7fd6"
        ],
        [
            "Definition derive_pt f (x:R) (pr:derivable_pt f x) := proj1_sig pr.",
            "VernacDefinition",
            "a5d84dffdb77649aa5ae0646d75eca4e9c3d3e64"
        ],
        [
            "Definition derive f (pr:derivable f) (x:R) := derive_pt f x (pr x).",
            "VernacDefinition",
            "5e98e461dec9a7ece5be9974cf3c881853c52565"
        ],
        [
            "Arguments derivable_pt_lim f%F x%R l.",
            "VernacArguments",
            "f1665b54cd41ba519012aea93e91bf3e7e36577f"
        ],
        [
            "Arguments derivable_pt_abs f%F (x l)%R.",
            "VernacArguments",
            "5492627568c0a45cb2985310affa90c24636e97e"
        ],
        [
            "Arguments derivable_pt f%F x%R.",
            "VernacArguments",
            "26ba57fafce6628b367ae68bfeb9843368c693ab"
        ],
        [
            "Arguments derivable f%F.",
            "VernacArguments",
            "f45941cf408bd76507fe6e12e0cd32ee7054413d"
        ],
        [
            "Arguments derive_pt f%F x%R pr.",
            "VernacArguments",
            "8af90e0f36e73d12fbd7acb8efc79aa23439ac49"
        ],
        [
            "Arguments derive f%F pr x.",
            "VernacArguments",
            "5c14116a9eb59f33bde271d32be5b836f26a1e9e"
        ],
        [
            "Definition antiderivative f (g:R -> R) (a b:R) : Prop := (forall x:R, a <= x <= b -> exists pr : derivable_pt g x, f x = derive_pt g x pr) /\\ a <= b.",
            "VernacDefinition",
            "01c3375d38e1e6bb4ee51a082e9484241ffe3d38"
        ],
        [
            "Record Differential : Type := mkDifferential {d1 :> R -> R; cond_diff : derivable d1}.",
            "VernacInductive",
            "02748039c489c7466dec676e3cd6acca6d8b4227"
        ],
        [
            "Record Differential_D2 : Type := mkDifferential_D2 {d2 :> R -> R; cond_D1 : derivable d2; cond_D2 : derivable (derive d2 cond_D1)}.",
            "VernacInductive",
            "d12f7fc003943aa58131fc1b16162c18f3bc1dbb"
        ],
        [
            "Lemma uniqueness_step1 : forall f (x l1 l2:R), limit1_in (fun h:R => (f (x + h) - f x) / h) (fun h:R => h <> 0) l1 0 -> limit1_in (fun h:R => (f (x + h) - f x) / h) (fun h:R => h <> 0) l2 0 -> l1 = l2.",
            "VernacStartTheoremProof",
            "4ddfc32690fa359dce7748b53b3f4ff36ee1fb28"
        ],
        [
            "intros; apply (single_limit (fun h:R => (f (x + h) - f x) / h) ( fun h:R => h <> 0) l1 l2 0); try assumption.",
            "VernacExtend",
            "d446ed32abacc5ae024fa9ebf70f97aed03f940d"
        ],
        [
            "unfold adhDa; intros; exists (alp / 2).",
            "VernacExtend",
            "7b508db4e1ea869116f7763c99548d854eb1f879"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold Rdiv; apply prod_neq_R0.",
            "VernacExtend",
            "bae86043f3acfd4aeb1f77f1138e1172ace3c7fa"
        ],
        [
            "red; intro; rewrite H2 in H1; elim (Rlt_irrefl _ H1).",
            "VernacExtend",
            "64fe6d34236201414331067ed348849de713e577"
        ],
        [
            "apply Rinv_neq_0_compat; discrR.",
            "VernacExtend",
            "c996ce35ba9924ff499f316d0fb3eaf573a9e988"
        ],
        [
            "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; unfold Rdiv; rewrite Rabs_mult.",
            "VernacExtend",
            "fd79a01bbba996ab895ef01db553f8b49052b9ab"
        ],
        [
            "replace (Rabs (/ 2)) with (/ 2).",
            "VernacExtend",
            "20eeef2676e4ba91be4e2187f28c2b1664927a3f"
        ],
        [
            "replace (Rabs alp) with alp.",
            "VernacExtend",
            "5bc9a2bab68932ebe7d40473a560e76f2eb0dc1b"
        ],
        [
            "apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "6631f3c2df4cb853b13a1c15d269a9146336e287"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "rewrite (Rmult_comm 2); rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ]; rewrite Rmult_1_r; rewrite double; pattern alp at 1; replace alp with (alp + 0); [ idtac | ring ]; apply Rplus_lt_compat_l; assumption.",
            "VernacExtend",
            "0a68e55d5fbf72d07a548a76dbbf7c218793f91e"
        ],
        [
            "symmetry ; apply Rabs_right; left; assumption.",
            "VernacExtend",
            "4f64dc679edf75d96b4c21eeb39e369799902dd4"
        ],
        [
            "symmetry ; apply Rabs_right; left; change (0 < / 2); apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "03e17509786404a0f3f03ddc87c21adba7d9e0ea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniqueness_step2 : forall f (x l:R), derivable_pt_lim f x l -> limit1_in (fun h:R => (f (x + h) - f x) / h) (fun h:R => h <> 0) l 0.",
            "VernacStartTheoremProof",
            "4dfe51636144e1b5d6bd027f2c9aa9e5963e3985"
        ],
        [
            "unfold derivable_pt_lim; intros; unfold limit1_in; unfold limit_in; intros.",
            "VernacExtend",
            "838cadc4c12431d75559dc1674de0899a8ccd534"
        ],
        [
            "assert (H1 := H eps H0).",
            "VernacExtend",
            "d355ee43d5a7265cddec2908e04c0367aa91c8b0"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "exists (pos x0).",
            "VernacExtend",
            "19ab76a7d05b59b3dd4d11dad53e6f3c7fb43261"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (cond_pos x0).",
            "VernacExtend",
            "1e3a506cf99e477b1cbdba4e16b4eacb1cd879fd"
        ],
        [
            "simpl; unfold R_dist; intros.",
            "VernacExtend",
            "dada14496a58e7798a19c2870ff26ac9f0275130"
        ],
        [
            "elim H3; intros.",
            "VernacExtend",
            "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
        ],
        [
            "apply H2; [ assumption | unfold Rminus in H5; rewrite Ropp_0 in H5; rewrite Rplus_0_r in H5; assumption ].",
            "VernacExtend",
            "2d97d4de2c61a0c5c33e949655f8f09c1baa3730"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniqueness_step3 : forall f (x l:R), limit1_in (fun h:R => (f (x + h) - f x) / h) (fun h:R => h <> 0) l 0 -> derivable_pt_lim f x l.",
            "VernacStartTheoremProof",
            "fd5d713afaeac50dff487728be8f4a844812bfaa"
        ],
        [
            "unfold limit1_in, derivable_pt_lim; unfold limit_in; unfold dist; simpl; intros.",
            "VernacExtend",
            "dac3bcfcb10fcebd6cdeaf4bc9100c5acfed489e"
        ],
        [
            "elim (H eps H0).",
            "VernacExtend",
            "8fff80bfe5ca0b4602770eee58977ebff598cdc5"
        ],
        [
            "intros; elim H1; intros.",
            "VernacExtend",
            "2f377cb4b82600aab4e81ad22310ada1d2fe8450"
        ],
        [
            "exists (mkposreal x0 H2).",
            "VernacExtend",
            "18fa7bdacd2ea51a29a36d571ac6f55362d5b6bb"
        ],
        [
            "simpl; intros; unfold R_dist in H3; apply (H3 h).",
            "VernacExtend",
            "b4c9c71a0d03a8ba96ceaca31cb9437bc84deea2"
        ],
        [
            "split; [ assumption | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; assumption ].",
            "VernacExtend",
            "048aa139e6b0cf37b72ef4c21831e135c2a31801"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma uniqueness_limite : forall f (x l1 l2:R), derivable_pt_lim f x l1 -> derivable_pt_lim f x l2 -> l1 = l2.",
            "VernacStartTheoremProof",
            "f1e944dcf3d71f732862e7bce00a10ca9e419b10"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H1 := uniqueness_step2 _ _ _ H).",
            "VernacExtend",
            "ac94b1432eff2c08d23f49860c295bf0e34f032f"
        ],
        [
            "assert (H2 := uniqueness_step2 _ _ _ H0).",
            "VernacExtend",
            "ce94224542808fb2abea2e9a71d14918aadec51e"
        ],
        [
            "assert (H3 := uniqueness_step1 _ _ _ _ H1 H2).",
            "VernacExtend",
            "368ac5dd93766ad433822f67da35a4740df55e38"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_eq : forall f (x l:R) (pr:derivable_pt f x), derive_pt f x pr = l <-> derivable_pt_lim f x l.",
            "VernacStartTheoremProof",
            "5ccd12924f3b8a623d6dc4e625e5d39244be6f65"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "intro; assert (H1 := proj2_sig pr); unfold derive_pt in H; rewrite H in H1; assumption.",
            "VernacExtend",
            "80cf157a61ce179c963816b582fbb9848e038413"
        ],
        [
            "intro; assert (H1 := proj2_sig pr); unfold derivable_pt_abs in H1.",
            "VernacExtend",
            "cc217eb7b6a532e5fe715dd180cb76d76fc112a9"
        ],
        [
            "assert (H2 := uniqueness_limite _ _ _ _ H H1).",
            "VernacExtend",
            "8181123e69a58f06b6748aaec3b54788c2cbd861"
        ],
        [
            "unfold derive_pt; unfold derivable_pt_abs.",
            "VernacExtend",
            "ef3c3921f9fd0fd7f9068b8dae0a17417cb20083"
        ],
        [
            "symmetry ; assumption.",
            "VernacExtend",
            "936f544fa969baad9c600ccc844230fa4d067c8b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_eq_0 : forall f (x l:R) (pr:derivable_pt f x), derivable_pt_lim f x l -> derive_pt f x pr = l.",
            "VernacStartTheoremProof",
            "0ee18eb1b7c0eb933ac8060ed765615dd2ce11ef"
        ],
        [
            "intros; elim (derive_pt_eq f x l pr); intros.",
            "VernacExtend",
            "ae3d59f294ca38b1f0d9d2159b357ff133810c66"
        ],
        [
            "apply (H1 H).",
            "VernacExtend",
            "d8f755a11b5635f15b9b3f14728779e77faaa2bf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_eq_1 : forall f (x l:R) (pr:derivable_pt f x), derive_pt f x pr = l -> derivable_pt_lim f x l.",
            "VernacStartTheoremProof",
            "c960110a5685abe7cbec1c4a04c76321e04c1c00"
        ],
        [
            "intros; elim (derive_pt_eq f x l pr); intros.",
            "VernacExtend",
            "ae3d59f294ca38b1f0d9d2159b357ff133810c66"
        ],
        [
            "apply (H0 H).",
            "VernacExtend",
            "6643a0ec43965d56ffe2cea5143aa863819df700"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_D_in : forall f (df:R -> R) (x:R) (pr:derivable_pt f x), D_in f df no_cond x <-> derive_pt f x pr = df x.",
            "VernacStartTheoremProof",
            "67c5578c564abfe91425e050b3ee0d8ce70d3901"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "unfold D_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "313af54ad8092f82644a417f448e0b72326ae060"
        ],
        [
            "apply derive_pt_eq_0.",
            "VernacExtend",
            "51058b8a093c0f27b9e5415ebebae2ac17b3e5a3"
        ],
        [
            "unfold derivable_pt_lim.",
            "VernacExtend",
            "66f7b70d68baaf84b30d333ccfa3519d0545510b"
        ],
        [
            "intros; elim (H eps H0); intros alpha H1; elim H1; intros; exists (mkposreal alpha H2); intros; generalize (H3 (x + h)); intro; cut (x + h - x = h); [ intro; cut (D_x no_cond x (x + h) /\\ Rabs (x + h - x) < alpha); [ intro; generalize (H6 H8); rewrite H7; intro; assumption | split; [ unfold D_x; split; [ unfold no_cond; trivial | apply Rminus_not_eq_right; rewrite H7; assumption ] | rewrite H7; assumption ] ] | ring ].",
            "VernacExtend",
            "fc6e21eda1c883e849b0a4960d4097f3d0d891cd"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H0 := derive_pt_eq_1 f x (df x) pr H).",
            "VernacExtend",
            "f10f0c2fbe6f5f3cbad363320209bbc417edf063"
        ],
        [
            "unfold D_in; unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "b5e0c57aa1382d9c2ca47202c4436e3d26e64d3c"
        ],
        [
            "elim (H0 eps H1); intros alpha H2; exists (pos alpha); split.",
            "VernacExtend",
            "397e91a4ef7d54d353f47a12ae2abd566ab17105"
        ],
        [
            "apply (cond_pos alpha).",
            "VernacExtend",
            "1d96d7d2c6f7284e79979e58f9450e62ea45344d"
        ],
        [
            "intros; elim H3; intros; unfold D_x in H4; elim H4; intros; cut (x0 - x <> 0).",
            "VernacExtend",
            "e6d3d6853ca22bfce9010d5ec7db8db1e7ddbf15"
        ],
        [
            "intro; generalize (H2 (x0 - x) H8 H5); replace (x + (x0 - x)) with x0.",
            "VernacExtend",
            "023dcfc9d8be125cc8e08d766f8fa992593d27d5"
        ],
        [
            "intro; assumption.",
            "VernacExtend",
            "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_D_in : forall f (df:R -> R) (x:R), D_in f df no_cond x <-> derivable_pt_lim f x (df x).",
            "VernacStartTheoremProof",
            "25ff435096d0f6e8a02da12cc6f01b2b7dcd37e1"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "unfold D_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "313af54ad8092f82644a417f448e0b72326ae060"
        ],
        [
            "unfold derivable_pt_lim.",
            "VernacExtend",
            "66f7b70d68baaf84b30d333ccfa3519d0545510b"
        ],
        [
            "intros; elim (H eps H0); intros alpha H1; elim H1; intros; exists (mkposreal alpha H2); intros; generalize (H3 (x + h)); intro; cut (x + h - x = h); [ intro; cut (D_x no_cond x (x + h) /\\ Rabs (x + h - x) < alpha); [ intro; generalize (H6 H8); rewrite H7; intro; assumption | split; [ unfold D_x; split; [ unfold no_cond; trivial | apply Rminus_not_eq_right; rewrite H7; assumption ] | rewrite H7; assumption ] ] | ring ].",
            "VernacExtend",
            "fc6e21eda1c883e849b0a4960d4097f3d0d891cd"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold derivable_pt_lim in H.",
            "VernacExtend",
            "392ab34469381f535cdf0ab5f9aab3894ae57c27"
        ],
        [
            "unfold D_in; unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "b5e0c57aa1382d9c2ca47202c4436e3d26e64d3c"
        ],
        [
            "elim (H eps H0); intros alpha H2; exists (pos alpha); split.",
            "VernacExtend",
            "5ca7a6650044a41714ae6a19609e58fff308c58a"
        ],
        [
            "apply (cond_pos alpha).",
            "VernacExtend",
            "1d96d7d2c6f7284e79979e58f9450e62ea45344d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim H1; intros; unfold D_x in H3; elim H3; intros; cut (x0 - x <> 0).",
            "VernacExtend",
            "bc2e859866bfde83d1fef6d1e82eeaaafa8eb5db"
        ],
        [
            "intro; generalize (H2 (x0 - x) H7 H4); replace (x + (x0 - x)) with x0.",
            "VernacExtend",
            "d3611e181737c6ae83e0aa07f90bec4be06de040"
        ],
        [
            "intro; assumption.",
            "VernacExtend",
            "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_ext : forall f g x l, (forall z, f z = g z) -> derivable_pt_lim f x l -> derivable_pt_lim g x l.",
            "VernacStartTheoremProof",
            "48fd46a7d0b3b09405bd7a3e000a336c9bab6604"
        ],
        [
            "intros f g x l fg df e ep; destruct (df e ep) as [d pd]; exists d; intros h; rewrite <- !fg; apply pd.",
            "VernacExtend",
            "3c9e75232dc59bafa405ca5c5b25c5eaa5135cef"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_locally_ext : forall f g x a b l, a < x < b -> (forall z, a < z < b -> f z = g z) -> derivable_pt_lim f x l -> derivable_pt_lim g x l.",
            "VernacStartTheoremProof",
            "3c859a6db19d59be339407356ae68e36d4e2fe74"
        ],
        [
            "intros f g x a b l axb fg df e ep.",
            "VernacExtend",
            "93b59d422b4a4e38c01a741213cd85b456348667"
        ],
        [
            "destruct (df e ep) as [d pd].",
            "VernacExtend",
            "583ea1e4a0bc468dfb929b4902b3000964d2ab9b"
        ],
        [
            "assert (d'h : 0 < Rmin d (Rmin (b - x) (x - a))).",
            "VernacExtend",
            "c1d7c1ed3e2a603b1b85f5311d87d2cacfabd622"
        ],
        [
            "apply Rmin_pos;[apply cond_pos | apply Rmin_pos; apply Rlt_Rminus; tauto].",
            "VernacExtend",
            "12461887afdb188089ce50b08e7b3fe91c6be572"
        ],
        [
            "exists (mkposreal _ d'h); simpl; intros h hn0 cmp.",
            "VernacExtend",
            "18ee1d0aeee0d6dc35b3dc5d72d6eb01c889e872"
        ],
        [
            "rewrite <- !fg;[ |assumption | ].",
            "VernacExtend",
            "ed9a2782e3b74aeca5ffd7478cf5d5f48edd3ae1"
        ],
        [
            "apply pd;[assumption |].",
            "VernacExtend",
            "1848e37c08255533dc7cd74e39d90606cf1d9149"
        ],
        [
            "apply Rlt_le_trans with (1 := cmp), Rmin_l.",
            "VernacExtend",
            "24b710646b1b381b9aa3a2c6b825ff3aa91c7fa7"
        ],
        [
            "assert (-h < x - a).",
            "VernacExtend",
            "898ded5d6005988f3ee038eff7d10a402451ef7c"
        ],
        [
            "apply Rle_lt_trans with (1 := Rle_abs _).",
            "VernacExtend",
            "135a8d900205d7b612754e3cd7bd2bca409d80e3"
        ],
        [
            "rewrite Rabs_Ropp; apply Rlt_le_trans with (1 := cmp).",
            "VernacExtend",
            "a9ae7d7b63c38defaabc9896fc22608d667fb4ac"
        ],
        [
            "rewrite Rmin_assoc; apply Rmin_r.",
            "VernacExtend",
            "42a03a84e6a576c13ad590883305548b3e8c47b2"
        ],
        [
            "assert (h < b - x).",
            "VernacExtend",
            "ee0ea9cfaddd076bf2c003fb361e5169c90db93e"
        ],
        [
            "apply Rle_lt_trans with (1 := Rle_abs _).",
            "VernacExtend",
            "135a8d900205d7b612754e3cd7bd2bca409d80e3"
        ],
        [
            "apply Rlt_le_trans with (1 := cmp).",
            "VernacExtend",
            "ad0e678acd40a4a277f9d98e0f548c25bbfc0cbf"
        ],
        [
            "rewrite Rmin_comm, <- Rmin_assoc; apply Rmin_l.",
            "VernacExtend",
            "534a9514786650a4f2227846da7e9eb4fd9c67ae"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (Rplus_lt_reg_l (- h)).",
            "VernacExtend",
            "af5944e396a2c2d24b3f1a162bf9f287497fc1f1"
        ],
        [
            "replace ((-h) + (x + h)) with x by ring.",
            "VernacExtend",
            "23590db609b34c942539e8eb743b8149b0fe49fb"
        ],
        [
            "apply (Rplus_lt_reg_r (- a)).",
            "VernacExtend",
            "97b6db467f6ef848fa541aea7ec69dc5d1160bce"
        ],
        [
            "replace (((-h) + a) + - a) with (-h) by ring.",
            "VernacExtend",
            "8ffa247af623ec75d6c3b901d1d007102dd8f54f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply (Rplus_lt_reg_r (- x)).",
            "VernacExtend",
            "ebfcdfca314b6c525c3fcc373bb6e3f359bfdee3"
        ],
        [
            "replace (x + h + - x) with h by ring.",
            "VernacExtend",
            "8fc07929e3dac779f83dc4fa262462e681a61f9a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_derive : forall f (x:R) (pr:derivable_pt f x), exists l : R, derive_pt f x pr = l.",
            "VernacStartTheoremProof",
            "03d2b284bf3674668ab5ec59ef57d046fd828501"
        ],
        [
            "intros; exists (proj1_sig pr).",
            "VernacExtend",
            "6c9bb0f8ca856a35dcd9efc1383f7b84c80e90e5"
        ],
        [
            "unfold derive_pt; reflexivity.",
            "VernacExtend",
            "a3123895a1a98d84200a40bf063cb2a0e2a6c5cd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem derivable_continuous_pt : forall f (x:R), derivable_pt f x -> continuity_pt f x.",
            "VernacStartTheoremProof",
            "91d66353415c1b337d62ecf55fa34330ad7b2eb9"
        ],
        [
            "intros f x X.",
            "VernacExtend",
            "eccd5dd1bde8ea75cef0aa63dff73505d3538c2e"
        ],
        [
            "generalize (derivable_derive f x X); intro.",
            "VernacExtend",
            "f4e311b7668bf84d88e1eb54dbcb953cdcb57ce7"
        ],
        [
            "elim H; intros l H1.",
            "VernacExtend",
            "a975dceb01479bd701979ffbe8416bfde6055936"
        ],
        [
            "cut (l = fct_cte l x).",
            "VernacExtend",
            "07cbfaca222a053be914eb855e354e6a6ec562ac"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "rewrite H0 in H1.",
            "VernacExtend",
            "45eb32137302b214d582b77378332f104f8e1d7f"
        ],
        [
            "generalize (derive_pt_D_in f (fct_cte l) x); intro.",
            "VernacExtend",
            "de93aabc3131aba994cf0580a6332b84a469eb3d"
        ],
        [
            "elim (H2 X); intros.",
            "VernacExtend",
            "acdfd1896cdc651fcb7142e7ca6009da3f8d8c63"
        ],
        [
            "generalize (H4 H1); intro.",
            "VernacExtend",
            "5d03b79940213ab31af3399a16c34d62e4af733d"
        ],
        [
            "unfold continuity_pt.",
            "VernacExtend",
            "35305842039756f847b033762621e4514695de74"
        ],
        [
            "apply (cont_deriv f (fct_cte l) no_cond x H5).",
            "VernacExtend",
            "7ea907ad6771bea2f144700d4b1a035812b8c18e"
        ],
        [
            "unfold fct_cte; reflexivity.",
            "VernacExtend",
            "52f08012e8cfeeb38b4c66eb6a4de86103c2dec5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem derivable_continuous : forall f, derivable f -> continuity f.",
            "VernacStartTheoremProof",
            "19da788d0920c7c629628e118ecceeb469c9382f"
        ],
        [
            "unfold derivable, continuity; intros f X x.",
            "VernacExtend",
            "e611a5bbb3e4dce32469b07df3a86292dda8a7d2"
        ],
        [
            "apply (derivable_continuous_pt f x (X x)).",
            "VernacExtend",
            "e43e7451b8700caf9bf7d860a7a597431d9c0c97"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_plus : forall f1 f2 (x l1 l2:R), derivable_pt_lim f1 x l1 -> derivable_pt_lim f2 x l2 -> derivable_pt_lim (f1 + f2) x (l1 + l2).",
            "VernacStartTheoremProof",
            "ce4f7b5177a8e036f8c652311d7c29c16cddc7c6"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply uniqueness_step3.",
            "VernacExtend",
            "1521ad231ccc76e88cb07342ff526d4628e47cac"
        ],
        [
            "assert (H1 := uniqueness_step2 _ _ _ H).",
            "VernacExtend",
            "ac94b1432eff2c08d23f49860c295bf0e34f032f"
        ],
        [
            "assert (H2 := uniqueness_step2 _ _ _ H0).",
            "VernacExtend",
            "ce94224542808fb2abea2e9a71d14918aadec51e"
        ],
        [
            "unfold plus_fct.",
            "VernacExtend",
            "d2a6d40fd3bfa9c22c62eddf786caa8691870eed"
        ],
        [
            "cut (forall h:R, (f1 (x + h) + f2 (x + h) - (f1 x + f2 x)) / h = (f1 (x + h) - f1 x) / h + (f2 (x + h) - f2 x) / h).",
            "VernacExtend",
            "56a6711e2c0b6715cb22b43cb3a53c77cfbf5cb8"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "generalize (limit_plus (fun h':R => (f1 (x + h') - f1 x) / h') (fun h':R => (f2 (x + h') - f2 x) / h') (fun h:R => h <> 0) l1 l2 0 H1 H2).",
            "VernacExtend",
            "54a47241d24b45805ed9e451fe7dc69ac5d7ef37"
        ],
        [
            "unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "bb4f45a45f58bff9b46b6beb4fe1e11070439c16"
        ],
        [
            "elim (H4 eps H5); intros.",
            "VernacExtend",
            "5d8471e911ff3af6c08bf9a2b94ab62272aaea18"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "elim H6; intros.",
            "VernacExtend",
            "adada1ad2ce0ef6f5f04088c4ecd9bfe31ad7784"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros; rewrite H3; apply H8; assumption.",
            "VernacExtend",
            "32f864ec6850e5016e5aaafe8697b5eaeb32b315"
        ],
        [
            "intro; unfold Rdiv; ring.",
            "VernacExtend",
            "7e05755b6f19b3780f1f69c5388b48eecfb9dd81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_opp : forall f (x l:R), derivable_pt_lim f x l -> derivable_pt_lim (- f) x (- l).",
            "VernacStartTheoremProof",
            "8433d65f68d84512340f245cd44621a497efb570"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply uniqueness_step3.",
            "VernacExtend",
            "1521ad231ccc76e88cb07342ff526d4628e47cac"
        ],
        [
            "assert (H1 := uniqueness_step2 _ _ _ H).",
            "VernacExtend",
            "ac94b1432eff2c08d23f49860c295bf0e34f032f"
        ],
        [
            "unfold opp_fct.",
            "VernacExtend",
            "4e63c1953428e7d557cffe0058417d26d5bb9bf7"
        ],
        [
            "cut (forall h:R, (- f (x + h) - - f x) / h = - ((f (x + h) - f x) / h)).",
            "VernacExtend",
            "686a3760e6ca9b5c774a7996e748c14310837506"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "generalize (limit_Ropp (fun h:R => (f (x + h) - f x) / h) (fun h:R => h <> 0) l 0 H1).",
            "VernacExtend",
            "8f98c2259102743d69a465a73dff9a96f2462925"
        ],
        [
            "unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "bb4f45a45f58bff9b46b6beb4fe1e11070439c16"
        ],
        [
            "elim (H2 eps H3); intros.",
            "VernacExtend",
            "cc3a52c21713e09c97835712f96b853de8eb0c67"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "elim H4; intros.",
            "VernacExtend",
            "ef88f175449d4af46e0685700665ce0cdf3e5695"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros; rewrite H0; apply H6; assumption.",
            "VernacExtend",
            "dd0e1233a3aeeab45d3a3aaf1b99d29b55b801a5"
        ],
        [
            "intro; unfold Rdiv; ring.",
            "VernacExtend",
            "7e05755b6f19b3780f1f69c5388b48eecfb9dd81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_minus : forall f1 f2 (x l1 l2:R), derivable_pt_lim f1 x l1 -> derivable_pt_lim f2 x l2 -> derivable_pt_lim (f1 - f2) x (l1 - l2).",
            "VernacStartTheoremProof",
            "ab358a00035bdc06f6f64a2f7f73655c5be654fb"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply uniqueness_step3.",
            "VernacExtend",
            "1521ad231ccc76e88cb07342ff526d4628e47cac"
        ],
        [
            "assert (H1 := uniqueness_step2 _ _ _ H).",
            "VernacExtend",
            "ac94b1432eff2c08d23f49860c295bf0e34f032f"
        ],
        [
            "assert (H2 := uniqueness_step2 _ _ _ H0).",
            "VernacExtend",
            "ce94224542808fb2abea2e9a71d14918aadec51e"
        ],
        [
            "unfold minus_fct.",
            "VernacExtend",
            "45dcad0dac1527c6c568cd1c0fbd2511edca9a10"
        ],
        [
            "cut (forall h:R, (f1 (x + h) - f1 x) / h - (f2 (x + h) - f2 x) / h = (f1 (x + h) - f2 (x + h) - (f1 x - f2 x)) / h).",
            "VernacExtend",
            "b24f67932a640d6c487e7fbcb2a58867613afbdd"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "generalize (limit_minus (fun h':R => (f1 (x + h') - f1 x) / h') (fun h':R => (f2 (x + h') - f2 x) / h') (fun h:R => h <> 0) l1 l2 0 H1 H2).",
            "VernacExtend",
            "d438746e2c82d4db1ead3f8542ab2d439ecd7476"
        ],
        [
            "unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "bb4f45a45f58bff9b46b6beb4fe1e11070439c16"
        ],
        [
            "elim (H4 eps H5); intros.",
            "VernacExtend",
            "5d8471e911ff3af6c08bf9a2b94ab62272aaea18"
        ],
        [
            "exists x0.",
            "VernacExtend",
            "9cf0657053433e90b28a795544f893f4a0f1ace3"
        ],
        [
            "elim H6; intros.",
            "VernacExtend",
            "adada1ad2ce0ef6f5f04088c4ecd9bfe31ad7784"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros; rewrite <- H3; apply H8; assumption.",
            "VernacExtend",
            "eff3ff6a6ec87c85099f799152257e31f1cd4b4d"
        ],
        [
            "intro; unfold Rdiv; ring.",
            "VernacExtend",
            "7e05755b6f19b3780f1f69c5388b48eecfb9dd81"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_mult : forall f1 f2 (x l1 l2:R), derivable_pt_lim f1 x l1 -> derivable_pt_lim f2 x l2 -> derivable_pt_lim (f1 * f2) x (l1 * f2 x + f1 x * l2).",
            "VernacStartTheoremProof",
            "9fffc64adecb7de588bbbf8313353d1128a5a8e8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H1 := derivable_pt_lim_D_in f1 (fun y:R => l1) x).",
            "VernacExtend",
            "31e7a73dd165f8c76bbf24147c17c64e84fce1eb"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "assert (H4 := H3 H).",
            "VernacExtend",
            "69e7c2e9fae312c7bcf6548c70023bc1855a304f"
        ],
        [
            "assert (H5 := derivable_pt_lim_D_in f2 (fun y:R => l2) x).",
            "VernacExtend",
            "5255273c7a999eda5c456dba3f8738ae9d0c684e"
        ],
        [
            "elim H5; intros.",
            "VernacExtend",
            "f57064d2371d46c709230830a90015bd814391ac"
        ],
        [
            "assert (H8 := H7 H0).",
            "VernacExtend",
            "eabe5a2d9c7b3235f1f64af41da48bda078d6cda"
        ],
        [
            "clear H1 H2 H3 H5 H6 H7.",
            "VernacExtend",
            "45d521df46aa3de0f71df83b24fe34622d822b86"
        ],
        [
            "assert (H1 := derivable_pt_lim_D_in (f1 * f2)%F (fun y:R => l1 * f2 x + f1 x * l2) x).",
            "VernacExtend",
            "ab61764348d8bd0ed0ed279e300443f501a130fb"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "clear H1 H3.",
            "VernacExtend",
            "3f711329078af8b17636a96ed468e2b13c5ce5a1"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "unfold mult_fct.",
            "VernacExtend",
            "21226c98c53a08398c840d0d6601e35f89a93dbc"
        ],
        [
            "apply (Dmult no_cond (fun y:R => l1) (fun y:R => l2) f1 f2 x); assumption.",
            "VernacExtend",
            "98882a60353d9bc2a9b59788bc6de86460584944"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_const : forall a x:R, derivable_pt_lim (fct_cte a) x 0.",
            "VernacStartTheoremProof",
            "c6ef5dbfe8e1b629051fd7bf0c6b8cfdf78e3406"
        ],
        [
            "intros; unfold fct_cte, derivable_pt_lim.",
            "VernacExtend",
            "10e641b6b41296e2298fccac844a94c9b35888b2"
        ],
        [
            "intros; exists (mkposreal 1 Rlt_0_1); intros; unfold Rminus; rewrite Rplus_opp_r; unfold Rdiv; rewrite Rmult_0_l; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
            "VernacExtend",
            "1c6cda481c504338ab5add906b724d812268bbfb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_scal : forall f (a x l:R), derivable_pt_lim f x l -> derivable_pt_lim (mult_real_fct a f) x (a * l).",
            "VernacStartTheoremProof",
            "a19d24dbde40e88908ca6b30556d7509a734d12e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H0 := derivable_pt_lim_const a x).",
            "VernacExtend",
            "025e96149bf4a39a0c5cf8af0c50d4d95c92bbb6"
        ],
        [
            "replace (mult_real_fct a f) with (fct_cte a * f)%F.",
            "VernacExtend",
            "73eb9ca03094b5183e04a67c40dcc631361f98d8"
        ],
        [
            "replace (a * l) with (0 * f x + a * l); [ idtac | ring ].",
            "VernacExtend",
            "8516357f5a5c715e4a5d1e1b2572d2b1bf88b58e"
        ],
        [
            "apply (derivable_pt_lim_mult (fct_cte a) f x 0 l); assumption.",
            "VernacExtend",
            "bca64cce0c603946c4d66b731101afe0647dba5c"
        ],
        [
            "unfold mult_real_fct, mult_fct, fct_cte; reflexivity.",
            "VernacExtend",
            "96704b4ecb0ea9dd515bdb371513f39395267754"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_div_scal : forall f x l a, derivable_pt_lim f x l -> derivable_pt_lim (fun y => f y / a) x (l / a).",
            "VernacStartTheoremProof",
            "bcf9a308ad1fd502bffa9dc7a9b156afa2baeeb5"
        ],
        [
            "intros f x l a df; apply (derivable_pt_lim_ext (fun y => /a * f y)).",
            "VernacExtend",
            "f86caff3de52268abb29fc412a3d033ece30e8c0"
        ],
        [
            "intros z; rewrite Rmult_comm; reflexivity.",
            "VernacExtend",
            "a898e56556eab45d296e50dfa641ab23df216e31"
        ],
        [
            "unfold Rdiv; rewrite Rmult_comm; apply derivable_pt_lim_scal; assumption.",
            "VernacExtend",
            "5b3b9780b697475829b34e890f62fab991caa4df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_scal_right : forall f x l a, derivable_pt_lim f x l -> derivable_pt_lim (fun y => f y * a) x (l * a).",
            "VernacStartTheoremProof",
            "3d3e3a89e1baa7237fd7c38bba1a660a8c476af2"
        ],
        [
            "intros f x l a df; apply (derivable_pt_lim_ext (fun y => a * f y)).",
            "VernacExtend",
            "a03f0dd5310862846d36c1b01955c87e13c0cb7d"
        ],
        [
            "intros z; rewrite Rmult_comm; reflexivity.",
            "VernacExtend",
            "a898e56556eab45d296e50dfa641ab23df216e31"
        ],
        [
            "unfold Rdiv; rewrite Rmult_comm; apply derivable_pt_lim_scal; assumption.",
            "VernacExtend",
            "5b3b9780b697475829b34e890f62fab991caa4df"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_id : forall x:R, derivable_pt_lim id x 1.",
            "VernacStartTheoremProof",
            "d5242d29c0ae213cad8d85488e0a6d741ac93ada"
        ],
        [
            "intro; unfold derivable_pt_lim.",
            "VernacExtend",
            "445a8767335bb877354b1eb4e573ca6f8783fcf7"
        ],
        [
            "intros eps Heps; exists (mkposreal eps Heps); intros h H1 H2; unfold id; replace ((x + h - x) / h - 1) with 0.",
            "VernacExtend",
            "5d63c4d0ae9d72e5769a0a4a324afa78e8e38c5e"
        ],
        [
            "rewrite Rabs_R0; apply Rle_lt_trans with (Rabs h).",
            "VernacExtend",
            "996607b720fe7d3693954b2e27f534a2fe79e1e3"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rminus; rewrite Rplus_assoc; rewrite (Rplus_comm x); rewrite Rplus_assoc.",
            "VernacExtend",
            "88db20b80b7f08df4e53ff7236c42e80d430e04d"
        ],
        [
            "rewrite Rplus_opp_l; rewrite Rplus_0_r; unfold Rdiv; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "4e6855f65e5d47d0d0b85682d3b7180e64438656"
        ],
        [
            "symmetry ; apply Rplus_opp_r.",
            "VernacExtend",
            "b76d8141cd8993429fd108a1b577570fa91e2427"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_Rsqr : forall x:R, derivable_pt_lim Rsqr x (2 * x).",
            "VernacStartTheoremProof",
            "96e7b03f35596ab0041165dc4d8faa2294902e36"
        ],
        [
            "intro; unfold derivable_pt_lim.",
            "VernacExtend",
            "445a8767335bb877354b1eb4e573ca6f8783fcf7"
        ],
        [
            "unfold Rsqr; intros eps Heps; exists (mkposreal eps Heps); intros h H1 H2; replace (((x + h) * (x + h) - x * x) / h - 2 * x) with h.",
            "VernacExtend",
            "939a79e6ceebbfeb754bc8d3bf451726065d1c4e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace ((x + h) * (x + h) - x * x) with (2 * x * h + h * h); [ idtac | ring ].",
            "VernacExtend",
            "eb8022c1954265e87ef17563471ec72df56ad738"
        ],
        [
            "unfold Rdiv; rewrite Rmult_plus_distr_r.",
            "VernacExtend",
            "b5a3d276f2b7f2ece835f2571ecc98adadf55c9a"
        ],
        [
            "repeat rewrite Rmult_assoc.",
            "VernacExtend",
            "9a62b3359051e53192153e7bfe542316dbd712a8"
        ],
        [
            "repeat rewrite <- Rinv_r_sym; [ idtac | assumption ].",
            "VernacExtend",
            "99788be632dda8a3b72f531eeac8f8a4dea840fe"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_comp : forall f1 f2 (x l1 l2:R), derivable_pt_lim f1 x l1 -> derivable_pt_lim f2 (f1 x) l2 -> derivable_pt_lim (f2 o f1) x (l2 * l1).",
            "VernacStartTheoremProof",
            "8ed9661ae2e52199c6d741b220907a143edf10fb"
        ],
        [
            "intros; assert (H1 := derivable_pt_lim_D_in f1 (fun y:R => l1) x).",
            "VernacExtend",
            "83f785ceebc8fc61e767c82a6de244c4a7aa79af"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "assert (H4 := H3 H).",
            "VernacExtend",
            "69e7c2e9fae312c7bcf6548c70023bc1855a304f"
        ],
        [
            "assert (H5 := derivable_pt_lim_D_in f2 (fun y:R => l2) (f1 x)).",
            "VernacExtend",
            "1960089b6607de1cc8ed62500a02e47c4df7b488"
        ],
        [
            "elim H5; intros.",
            "VernacExtend",
            "f57064d2371d46c709230830a90015bd814391ac"
        ],
        [
            "assert (H8 := H7 H0).",
            "VernacExtend",
            "eabe5a2d9c7b3235f1f64af41da48bda078d6cda"
        ],
        [
            "clear H1 H2 H3 H5 H6 H7.",
            "VernacExtend",
            "45d521df46aa3de0f71df83b24fe34622d822b86"
        ],
        [
            "assert (H1 := derivable_pt_lim_D_in (f2 o f1)%F (fun y:R => l2 * l1) x).",
            "VernacExtend",
            "1fa4f9fe892f4a74730ef84679e34a179b6eab19"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "clear H1 H3; apply H2.",
            "VernacExtend",
            "05ea238b9f6a4a07871c794178abeceece2c5bd4"
        ],
        [
            "unfold comp; cut (D_in (fun x0:R => f2 (f1 x0)) (fun y:R => l2 * l1) (Dgf no_cond no_cond f1) x -> D_in (fun x0:R => f2 (f1 x0)) (fun y:R => l2 * l1) no_cond x).",
            "VernacExtend",
            "60efdd1f7d092209471538a42ec27fb7e5596697"
        ],
        [
            "intro; apply H1.",
            "VernacExtend",
            "868e99754cb1ff2431f4fb10ad32d6ab65a5563a"
        ],
        [
            "rewrite Rmult_comm; apply (Dcomp no_cond no_cond (fun y:R => l1) (fun y:R => l2) f1 f2 x); assumption.",
            "VernacExtend",
            "42e43e2f4670880923cfd638da0bec2c6e2f79f4"
        ],
        [
            "unfold Dgf, D_in, no_cond; unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "2675d40e7022de5bbe50baecc0c70ac60e301c10"
        ],
        [
            "elim (H1 eps H3); intros.",
            "VernacExtend",
            "5d3d26e5ef945cbd5ee0ff5fdb2e51426c6f4608"
        ],
        [
            "exists x0; intros; split.",
            "VernacExtend",
            "13b19f798d5baeadf18249dcf713160b0c4b28a7"
        ],
        [
            "elim H5; intros; assumption.",
            "VernacExtend",
            "e3759bfc7109dba24b94887055d32bb02045fe9b"
        ],
        [
            "intros; elim H5; intros; apply H9; split.",
            "VernacExtend",
            "c4df0830f787e888527f5050554eaf1ec5ecaf05"
        ],
        [
            "unfold D_x; split.",
            "VernacExtend",
            "dc5d57a38d678104af9755be17a91e30c46fd5bc"
        ],
        [
            "split; trivial.",
            "VernacExtend",
            "51e6eaa57561ac50797e703222408862cfba3b15"
        ],
        [
            "elim H6; intros; unfold D_x in H10; elim H10; intros; assumption.",
            "VernacExtend",
            "349e0aac861496290269c29a3cfe36d2b4484628"
        ],
        [
            "elim H6; intros; assumption.",
            "VernacExtend",
            "122301c7b52cc3d82121b3b8e2c71abbf9195eec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_plus : forall f1 f2 (x:R), derivable_pt f1 x -> derivable_pt f2 x -> derivable_pt (f1 + f2) x.",
            "VernacStartTheoremProof",
            "b003e2baca1c577af10843087097a724c86273c4"
        ],
        [
            "unfold derivable_pt; intros f1 f2 x X X0.",
            "VernacExtend",
            "0dd69a8982f65422188c099a29fd0a229c6f9d3b"
        ],
        [
            "elim X; intros.",
            "VernacExtend",
            "3dbd54ccc1b79786f689975657c25979c4151773"
        ],
        [
            "elim X0; intros.",
            "VernacExtend",
            "699e01937d2b5e40882bae3010b0f1a72f2e3f82"
        ],
        [
            "exists (x0 + x1).",
            "VernacExtend",
            "1ef94e2539c221c87ffabc1a4daa8fc85f13c925"
        ],
        [
            "apply derivable_pt_lim_plus; assumption.",
            "VernacExtend",
            "22fda35fffe3d3d87a2590de3f00da06735b894f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_opp : forall f (x:R), derivable_pt f x -> derivable_pt (- f) x.",
            "VernacStartTheoremProof",
            "2b4baf7b2cd0f613f07e0c80b96ae8ef62064a21"
        ],
        [
            "unfold derivable_pt; intros f x X.",
            "VernacExtend",
            "3dc7a10222c1d417d6d26ba2164c0ec008c34445"
        ],
        [
            "elim X; intros.",
            "VernacExtend",
            "3dbd54ccc1b79786f689975657c25979c4151773"
        ],
        [
            "exists (- x0).",
            "VernacExtend",
            "6443fae240fd1b9f656e0a006dbef4e18be0c224"
        ],
        [
            "apply derivable_pt_lim_opp; assumption.",
            "VernacExtend",
            "f3b413c1268d8a62bb01bfe0cd677e3b5c8ae99f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_minus : forall f1 f2 (x:R), derivable_pt f1 x -> derivable_pt f2 x -> derivable_pt (f1 - f2) x.",
            "VernacStartTheoremProof",
            "4a0089baba4a2c3ac33835d0959e2ca761375dc5"
        ],
        [
            "unfold derivable_pt; intros f1 f2 x X X0.",
            "VernacExtend",
            "0dd69a8982f65422188c099a29fd0a229c6f9d3b"
        ],
        [
            "elim X; intros.",
            "VernacExtend",
            "3dbd54ccc1b79786f689975657c25979c4151773"
        ],
        [
            "elim X0; intros.",
            "VernacExtend",
            "699e01937d2b5e40882bae3010b0f1a72f2e3f82"
        ],
        [
            "exists (x0 - x1).",
            "VernacExtend",
            "adfe16005ea3900c9c68c9efa62ff494413ef701"
        ],
        [
            "apply derivable_pt_lim_minus; assumption.",
            "VernacExtend",
            "b789408c7b674a3362cc9b6fd4daf5e76cf78bbb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_mult : forall f1 f2 (x:R), derivable_pt f1 x -> derivable_pt f2 x -> derivable_pt (f1 * f2) x.",
            "VernacStartTheoremProof",
            "38f71848472b7ad4a85af756e81ecbbb3ab2cfba"
        ],
        [
            "unfold derivable_pt; intros f1 f2 x X X0.",
            "VernacExtend",
            "0dd69a8982f65422188c099a29fd0a229c6f9d3b"
        ],
        [
            "elim X; intros.",
            "VernacExtend",
            "3dbd54ccc1b79786f689975657c25979c4151773"
        ],
        [
            "elim X0; intros.",
            "VernacExtend",
            "699e01937d2b5e40882bae3010b0f1a72f2e3f82"
        ],
        [
            "exists (x0 * f2 x + f1 x * x1).",
            "VernacExtend",
            "46ce65eea7d8185db10938c55d31cf477913fbe5"
        ],
        [
            "apply derivable_pt_lim_mult; assumption.",
            "VernacExtend",
            "9de728abf4be05577be0bb3f4199d9badc31b7ec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_const : forall a x:R, derivable_pt (fct_cte a) x.",
            "VernacStartTheoremProof",
            "11ece7e3750a68b295def416fe2990a039dacc4d"
        ],
        [
            "intros; unfold derivable_pt.",
            "VernacExtend",
            "67520fffb7b7e2a2eecabe08940912e9603e48d7"
        ],
        [
            "exists 0.",
            "VernacExtend",
            "b12b8acd7a1526ef0683513a127984e4864502d9"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_scal : forall f (a x:R), derivable_pt f x -> derivable_pt (mult_real_fct a f) x.",
            "VernacStartTheoremProof",
            "661bc1f1089a4a9afcb4cb710ebbeaa36a91c0d8"
        ],
        [
            "unfold derivable_pt; intros f1 a x X.",
            "VernacExtend",
            "cc196eb391fef91bc4935de4d5339690d01ddc5e"
        ],
        [
            "elim X; intros.",
            "VernacExtend",
            "3dbd54ccc1b79786f689975657c25979c4151773"
        ],
        [
            "exists (a * x0).",
            "VernacExtend",
            "87484a3cb1eada1896f4d475e7bcb90814fe389e"
        ],
        [
            "apply derivable_pt_lim_scal; assumption.",
            "VernacExtend",
            "e9ed9212dcd79a38d3c31575cdcf0e68bb264e6e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_id : forall x:R, derivable_pt id x.",
            "VernacStartTheoremProof",
            "807d0fe9bf28be3fde2ac417fd408e4b35cfe46a"
        ],
        [
            "unfold derivable_pt; intro.",
            "VernacExtend",
            "8b6a9c15f0b1c8462f93b4cfc8a8d4b253743770"
        ],
        [
            "exists 1.",
            "VernacExtend",
            "18eb310858be5acae7304d0d9ed33063568db310"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_Rsqr : forall x:R, derivable_pt Rsqr x.",
            "VernacStartTheoremProof",
            "5efdec550890e77b81dba9fd26a3d2df5adbd86e"
        ],
        [
            "unfold derivable_pt; intro; exists (2 * x).",
            "VernacExtend",
            "264442f912f5476e1766bed7adf27b47eb8f7dde"
        ],
        [
            "apply derivable_pt_lim_Rsqr.",
            "VernacExtend",
            "319d97570f6cf6a18b574d87df4d6e9228fbaba7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_comp : forall f1 f2 (x:R), derivable_pt f1 x -> derivable_pt f2 (f1 x) -> derivable_pt (f2 o f1) x.",
            "VernacStartTheoremProof",
            "ab572c9eea4d3b44d24dfd890728330b4e46376c"
        ],
        [
            "unfold derivable_pt; intros f1 f2 x X X0.",
            "VernacExtend",
            "0dd69a8982f65422188c099a29fd0a229c6f9d3b"
        ],
        [
            "elim X; intros.",
            "VernacExtend",
            "3dbd54ccc1b79786f689975657c25979c4151773"
        ],
        [
            "elim X0; intros.",
            "VernacExtend",
            "699e01937d2b5e40882bae3010b0f1a72f2e3f82"
        ],
        [
            "exists (x1 * x0).",
            "VernacExtend",
            "279286d1f38d53fc40e9d1b25678421456e6bd36"
        ],
        [
            "apply derivable_pt_lim_comp; assumption.",
            "VernacExtend",
            "bed37338aa91786ee40cabdad8632f7d3ac05ef9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_plus : forall f1 f2, derivable f1 -> derivable f2 -> derivable (f1 + f2).",
            "VernacStartTheoremProof",
            "bc92410c2fa877353aa4f75775477c4823416a05"
        ],
        [
            "unfold derivable; intros f1 f2 X X0 x.",
            "VernacExtend",
            "b5cdafe78362380553d764157d21e5d3e13518c8"
        ],
        [
            "apply (derivable_pt_plus _ _ x (X _) (X0 _)).",
            "VernacExtend",
            "e39bcf5645e9a644ab166b1ba19d75a14bf1881f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_opp : forall f, derivable f -> derivable (- f).",
            "VernacStartTheoremProof",
            "d511f89c36fe670286893e892d75ef822c82807f"
        ],
        [
            "unfold derivable; intros f X x.",
            "VernacExtend",
            "92b27ed656ff9db9fc022920cb923dd68c8a7234"
        ],
        [
            "apply (derivable_pt_opp _ x (X _)).",
            "VernacExtend",
            "180395d8b589f356725dcefea59f57029dddaee8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_minus : forall f1 f2, derivable f1 -> derivable f2 -> derivable (f1 - f2).",
            "VernacStartTheoremProof",
            "04f744e3865da17c877b245ee4cf5e7d34616af6"
        ],
        [
            "unfold derivable; intros f1 f2 X X0 x.",
            "VernacExtend",
            "b5cdafe78362380553d764157d21e5d3e13518c8"
        ],
        [
            "apply (derivable_pt_minus _ _ x (X _) (X0 _)).",
            "VernacExtend",
            "abcb8bad9ffabad680e7d1b7f80a90419741f604"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_mult : forall f1 f2, derivable f1 -> derivable f2 -> derivable (f1 * f2).",
            "VernacStartTheoremProof",
            "4c9367ecf1484705115f1dad17d2cbf97abfdec4"
        ],
        [
            "unfold derivable; intros f1 f2 X X0 x.",
            "VernacExtend",
            "b5cdafe78362380553d764157d21e5d3e13518c8"
        ],
        [
            "apply (derivable_pt_mult _ _ x (X _) (X0 _)).",
            "VernacExtend",
            "8a57a50d21455838fb5ce91c16c3ac78ab532cf9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_const : forall a:R, derivable (fct_cte a).",
            "VernacStartTheoremProof",
            "9305fbf0697e5bbc4c72a93701fbf915e8074b98"
        ],
        [
            "unfold derivable; intros.",
            "VernacExtend",
            "5612f4bcaa09282c0afa54b522bac42d49853983"
        ],
        [
            "apply derivable_pt_const.",
            "VernacExtend",
            "5f79fec976d4bf9b10f4ae3f2bf89e7653fa9cab"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_scal : forall f (a:R), derivable f -> derivable (mult_real_fct a f).",
            "VernacStartTheoremProof",
            "7dfd9ec4e12729b7345a1dd3ae85535550325c25"
        ],
        [
            "unfold derivable; intros f a X x.",
            "VernacExtend",
            "8ae1ba379295bc70eafc59cb622ec2d94c3dc88b"
        ],
        [
            "apply (derivable_pt_scal _ a x (X _)).",
            "VernacExtend",
            "55c2e9ff021823d96dcdb4390219c2291e37cda7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_id : derivable id.",
            "VernacStartTheoremProof",
            "85342fc790d50b3360cb35935435afcb116d474d"
        ],
        [
            "unfold derivable; intro; apply derivable_pt_id.",
            "VernacExtend",
            "448206191e858a7fbe072a147acf023c16c5b43a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_Rsqr : derivable Rsqr.",
            "VernacStartTheoremProof",
            "ec0912f314e509e56d40844948ac0dcb12e6ce18"
        ],
        [
            "unfold derivable; intro; apply derivable_pt_Rsqr.",
            "VernacExtend",
            "27ae95d739039409032ad6bc1220582bbdd7111b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_comp : forall f1 f2, derivable f1 -> derivable f2 -> derivable (f2 o f1).",
            "VernacStartTheoremProof",
            "8d7a55790fb3faa1e59aa8d5a352cdb616c176d5"
        ],
        [
            "unfold derivable; intros f1 f2 X X0 x.",
            "VernacExtend",
            "b5cdafe78362380553d764157d21e5d3e13518c8"
        ],
        [
            "apply (derivable_pt_comp _ _ x (X _) (X0 _)).",
            "VernacExtend",
            "2548e3054dbd99c04a01f3c7ba8806bb7373ffce"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_plus : forall f1 f2 (x:R) (pr1:derivable_pt f1 x) (pr2:derivable_pt f2 x), derive_pt (f1 + f2) x (derivable_pt_plus _ _ _ pr1 pr2) = derive_pt f1 x pr1 + derive_pt f2 x pr2.",
            "VernacStartTheoremProof",
            "c0d4a894a0b7a2d5c5a8234f41ab915347013e2f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H := derivable_derive f1 x pr1).",
            "VernacExtend",
            "9f7b922d459d0c252f20bc06d2486ecc47aed25a"
        ],
        [
            "assert (H0 := derivable_derive f2 x pr2).",
            "VernacExtend",
            "b318102ca285f09f47c0e3069e52e710f38a279b"
        ],
        [
            "assert (H1 := derivable_derive (f1 + f2)%F x (derivable_pt_plus _ _ _ pr1 pr2)).",
            "VernacExtend",
            "f8e7a6f1ecc56e3937dbfdbdf40bc80895084ac1"
        ],
        [
            "elim H; clear H; intros l1 H.",
            "VernacExtend",
            "b951087a9f5cb94960e7ccf62794d3a9fd647373"
        ],
        [
            "elim H0; clear H0; intros l2 H0.",
            "VernacExtend",
            "c2ebd845da26e14746baf428f69d1c4a77114cc2"
        ],
        [
            "elim H1; clear H1; intros l H1.",
            "VernacExtend",
            "37433732dd36b95403b1a317429455f2a92c3b9a"
        ],
        [
            "rewrite H; rewrite H0; apply derive_pt_eq_0.",
            "VernacExtend",
            "675dc0117d5783681af370ce1cdc394456c24857"
        ],
        [
            "assert (H3 := proj2_sig pr1).",
            "VernacExtend",
            "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
        ],
        [
            "unfold derive_pt in H; rewrite H in H3.",
            "VernacExtend",
            "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
        ],
        [
            "assert (H4 := proj2_sig pr2).",
            "VernacExtend",
            "53b3ff7671713d84210941b961202c7c699e7207"
        ],
        [
            "unfold derive_pt in H0; rewrite H0 in H4.",
            "VernacExtend",
            "c92d5d18e1357796181d771141ff5157e85e4911"
        ],
        [
            "apply derivable_pt_lim_plus; assumption.",
            "VernacExtend",
            "22fda35fffe3d3d87a2590de3f00da06735b894f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_opp : forall f (x:R) (pr1:derivable_pt f x), derive_pt (- f) x (derivable_pt_opp _ _ pr1) = - derive_pt f x pr1.",
            "VernacStartTheoremProof",
            "2159b689d0bd45aee959ba20f992418576b2a78c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H := derivable_derive f x pr1).",
            "VernacExtend",
            "cae3365f792699a889e3278a794f1b85a2407b98"
        ],
        [
            "assert (H0 := derivable_derive (- f)%F x (derivable_pt_opp _ _ pr1)).",
            "VernacExtend",
            "423bbc5bdfa1b18c90665596207c71f50f84203f"
        ],
        [
            "elim H; clear H; intros l1 H.",
            "VernacExtend",
            "b951087a9f5cb94960e7ccf62794d3a9fd647373"
        ],
        [
            "elim H0; clear H0; intros l2 H0.",
            "VernacExtend",
            "c2ebd845da26e14746baf428f69d1c4a77114cc2"
        ],
        [
            "rewrite H; apply derive_pt_eq_0.",
            "VernacExtend",
            "c6a4d85e0cd644763ce9acf0674548272bf92f79"
        ],
        [
            "assert (H3 := proj2_sig pr1).",
            "VernacExtend",
            "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
        ],
        [
            "unfold derive_pt in H; rewrite H in H3.",
            "VernacExtend",
            "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
        ],
        [
            "apply derivable_pt_lim_opp; assumption.",
            "VernacExtend",
            "f3b413c1268d8a62bb01bfe0cd677e3b5c8ae99f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_minus : forall f1 f2 (x:R) (pr1:derivable_pt f1 x) (pr2:derivable_pt f2 x), derive_pt (f1 - f2) x (derivable_pt_minus _ _ _ pr1 pr2) = derive_pt f1 x pr1 - derive_pt f2 x pr2.",
            "VernacStartTheoremProof",
            "64d3d9c89b6a99d4417c0ad8e0531d5b682d8162"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H := derivable_derive f1 x pr1).",
            "VernacExtend",
            "9f7b922d459d0c252f20bc06d2486ecc47aed25a"
        ],
        [
            "assert (H0 := derivable_derive f2 x pr2).",
            "VernacExtend",
            "b318102ca285f09f47c0e3069e52e710f38a279b"
        ],
        [
            "assert (H1 := derivable_derive (f1 - f2)%F x (derivable_pt_minus _ _ _ pr1 pr2)).",
            "VernacExtend",
            "ab18193d7884f8ca97e8003a7d7de4500efab0b7"
        ],
        [
            "elim H; clear H; intros l1 H.",
            "VernacExtend",
            "b951087a9f5cb94960e7ccf62794d3a9fd647373"
        ],
        [
            "elim H0; clear H0; intros l2 H0.",
            "VernacExtend",
            "c2ebd845da26e14746baf428f69d1c4a77114cc2"
        ],
        [
            "elim H1; clear H1; intros l H1.",
            "VernacExtend",
            "37433732dd36b95403b1a317429455f2a92c3b9a"
        ],
        [
            "rewrite H; rewrite H0; apply derive_pt_eq_0.",
            "VernacExtend",
            "675dc0117d5783681af370ce1cdc394456c24857"
        ],
        [
            "assert (H3 := proj2_sig pr1).",
            "VernacExtend",
            "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
        ],
        [
            "unfold derive_pt in H; rewrite H in H3.",
            "VernacExtend",
            "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
        ],
        [
            "assert (H4 := proj2_sig pr2).",
            "VernacExtend",
            "53b3ff7671713d84210941b961202c7c699e7207"
        ],
        [
            "unfold derive_pt in H0; rewrite H0 in H4.",
            "VernacExtend",
            "c92d5d18e1357796181d771141ff5157e85e4911"
        ],
        [
            "apply derivable_pt_lim_minus; assumption.",
            "VernacExtend",
            "b789408c7b674a3362cc9b6fd4daf5e76cf78bbb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_mult : forall f1 f2 (x:R) (pr1:derivable_pt f1 x) (pr2:derivable_pt f2 x), derive_pt (f1 * f2) x (derivable_pt_mult _ _ _ pr1 pr2) = derive_pt f1 x pr1 * f2 x + f1 x * derive_pt f2 x pr2.",
            "VernacStartTheoremProof",
            "8b75fd07a1f979739819fe03e6a8505343b343c3"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H := derivable_derive f1 x pr1).",
            "VernacExtend",
            "9f7b922d459d0c252f20bc06d2486ecc47aed25a"
        ],
        [
            "assert (H0 := derivable_derive f2 x pr2).",
            "VernacExtend",
            "b318102ca285f09f47c0e3069e52e710f38a279b"
        ],
        [
            "assert (H1 := derivable_derive (f1 * f2)%F x (derivable_pt_mult _ _ _ pr1 pr2)).",
            "VernacExtend",
            "68e9470d4fe39353bdfcce5b32137814a5a532e5"
        ],
        [
            "elim H; clear H; intros l1 H.",
            "VernacExtend",
            "b951087a9f5cb94960e7ccf62794d3a9fd647373"
        ],
        [
            "elim H0; clear H0; intros l2 H0.",
            "VernacExtend",
            "c2ebd845da26e14746baf428f69d1c4a77114cc2"
        ],
        [
            "elim H1; clear H1; intros l H1.",
            "VernacExtend",
            "37433732dd36b95403b1a317429455f2a92c3b9a"
        ],
        [
            "rewrite H; rewrite H0; apply derive_pt_eq_0.",
            "VernacExtend",
            "675dc0117d5783681af370ce1cdc394456c24857"
        ],
        [
            "assert (H3 := proj2_sig pr1).",
            "VernacExtend",
            "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
        ],
        [
            "unfold derive_pt in H; rewrite H in H3.",
            "VernacExtend",
            "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
        ],
        [
            "assert (H4 := proj2_sig pr2).",
            "VernacExtend",
            "53b3ff7671713d84210941b961202c7c699e7207"
        ],
        [
            "unfold derive_pt in H0; rewrite H0 in H4.",
            "VernacExtend",
            "c92d5d18e1357796181d771141ff5157e85e4911"
        ],
        [
            "apply derivable_pt_lim_mult; assumption.",
            "VernacExtend",
            "9de728abf4be05577be0bb3f4199d9badc31b7ec"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_const : forall a x:R, derive_pt (fct_cte a) x (derivable_pt_const a x) = 0.",
            "VernacStartTheoremProof",
            "3e7597c2bebd55cecb6fd535fd9fa76a4c4a1d54"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply derive_pt_eq_0.",
            "VernacExtend",
            "51058b8a093c0f27b9e5415ebebae2ac17b3e5a3"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_scal : forall f (a x:R) (pr:derivable_pt f x), derive_pt (mult_real_fct a f) x (derivable_pt_scal _ _ _ pr) = a * derive_pt f x pr.",
            "VernacStartTheoremProof",
            "e0b4408185f8c7d937ed45b14bdb6efb971e2831"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H := derivable_derive f x pr).",
            "VernacExtend",
            "b575b7f995253acba7b17df9ed57dd108dd9192f"
        ],
        [
            "assert (H0 := derivable_derive (mult_real_fct a f) x (derivable_pt_scal _ _ _ pr)).",
            "VernacExtend",
            "f589544c22d2f70e7bd839d8cb424a7dadbb433b"
        ],
        [
            "elim H; clear H; intros l1 H.",
            "VernacExtend",
            "b951087a9f5cb94960e7ccf62794d3a9fd647373"
        ],
        [
            "elim H0; clear H0; intros l2 H0.",
            "VernacExtend",
            "c2ebd845da26e14746baf428f69d1c4a77114cc2"
        ],
        [
            "rewrite H; apply derive_pt_eq_0.",
            "VernacExtend",
            "c6a4d85e0cd644763ce9acf0674548272bf92f79"
        ],
        [
            "assert (H3 := proj2_sig pr).",
            "VernacExtend",
            "91d1f5bad422cdaa8d723344f02033beac17176a"
        ],
        [
            "unfold derive_pt in H; rewrite H in H3.",
            "VernacExtend",
            "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
        ],
        [
            "apply derivable_pt_lim_scal; assumption.",
            "VernacExtend",
            "e9ed9212dcd79a38d3c31575cdcf0e68bb264e6e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_id : forall x:R, derive_pt id x (derivable_pt_id _) = 1.",
            "VernacStartTheoremProof",
            "cca90b0406ab48aef323b78d470c5f6735ee4f4c"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply derive_pt_eq_0.",
            "VernacExtend",
            "51058b8a093c0f27b9e5415ebebae2ac17b3e5a3"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_Rsqr : forall x:R, derive_pt Rsqr x (derivable_pt_Rsqr _) = 2 * x.",
            "VernacStartTheoremProof",
            "5ca5875b1ee52327da4f1886da2effc899075b68"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply derive_pt_eq_0.",
            "VernacExtend",
            "51058b8a093c0f27b9e5415ebebae2ac17b3e5a3"
        ],
        [
            "apply derivable_pt_lim_Rsqr.",
            "VernacExtend",
            "319d97570f6cf6a18b574d87df4d6e9228fbaba7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_comp : forall f1 f2 (x:R) (pr1:derivable_pt f1 x) (pr2:derivable_pt f2 (f1 x)), derive_pt (f2 o f1) x (derivable_pt_comp _ _ _ pr1 pr2) = derive_pt f2 (f1 x) pr2 * derive_pt f1 x pr1.",
            "VernacStartTheoremProof",
            "749d166fbc7fbc4ea09b36c05dbbc6f19b8233c5"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H := derivable_derive f1 x pr1).",
            "VernacExtend",
            "9f7b922d459d0c252f20bc06d2486ecc47aed25a"
        ],
        [
            "assert (H0 := derivable_derive f2 (f1 x) pr2).",
            "VernacExtend",
            "fbc21bdb40d762458383b48ffa3d2a6424fe90ef"
        ],
        [
            "assert (H1 := derivable_derive (f2 o f1)%F x (derivable_pt_comp _ _ _ pr1 pr2)).",
            "VernacExtend",
            "52ee0e5984c8a2c6891fcecaba9a389b8a4093bb"
        ],
        [
            "elim H; clear H; intros l1 H.",
            "VernacExtend",
            "b951087a9f5cb94960e7ccf62794d3a9fd647373"
        ],
        [
            "elim H0; clear H0; intros l2 H0.",
            "VernacExtend",
            "c2ebd845da26e14746baf428f69d1c4a77114cc2"
        ],
        [
            "elim H1; clear H1; intros l H1.",
            "VernacExtend",
            "37433732dd36b95403b1a317429455f2a92c3b9a"
        ],
        [
            "rewrite H; rewrite H0; apply derive_pt_eq_0.",
            "VernacExtend",
            "675dc0117d5783681af370ce1cdc394456c24857"
        ],
        [
            "assert (H3 := proj2_sig pr1).",
            "VernacExtend",
            "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
        ],
        [
            "unfold derive_pt in H; rewrite H in H3.",
            "VernacExtend",
            "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
        ],
        [
            "assert (H4 := proj2_sig pr2).",
            "VernacExtend",
            "53b3ff7671713d84210941b961202c7c699e7207"
        ],
        [
            "unfold derive_pt in H0; rewrite H0 in H4.",
            "VernacExtend",
            "c92d5d18e1357796181d771141ff5157e85e4911"
        ],
        [
            "apply derivable_pt_lim_comp; assumption.",
            "VernacExtend",
            "bed37338aa91786ee40cabdad8632f7d3ac05ef9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition pow_fct (n:nat) (y:R) : R := y ^ n.",
            "VernacDefinition",
            "0dbd029c2a828f7e7e300fa96441ce636ed5f08b"
        ],
        [
            "Lemma derivable_pt_lim_pow_pos : forall (x:R) (n:nat), (0 < n)%nat -> derivable_pt_lim (fun y:R => y ^ n) x (INR n * x ^ pred n).",
            "VernacStartTheoremProof",
            "e63937f60a92de77f745a3fbff34d51107e7a7a4"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "elim (lt_irrefl _ H).",
            "VernacExtend",
            "fc90b77317c333bc64634f7cf1eecc8648bc7dc4"
        ],
        [
            "cut (n = 0%nat \\/ (0 < n)%nat).",
            "VernacExtend",
            "bc4602b483382c20ecea21651c0546b27b5e2434"
        ],
        [
            "intro; elim H0; intro.",
            "VernacExtend",
            "80080ee26acf8bd4a9a5fd9e7b831121caff4c52"
        ],
        [
            "rewrite H1; simpl.",
            "VernacExtend",
            "cd46409972a195bc054cea7510a01cb2adb85092"
        ],
        [
            "replace (fun y:R => y * 1) with (id * fct_cte 1)%F.",
            "VernacExtend",
            "5da6cd14d8b5ac12fc4ac113bcfaac9f77e4d84d"
        ],
        [
            "replace (1 * 1) with (1 * fct_cte 1 x + id x * 0).",
            "VernacExtend",
            "4e445d43a75d72adc2985090a42cc8aaa0e816b9"
        ],
        [
            "apply derivable_pt_lim_mult.",
            "VernacExtend",
            "64536e67d0a57e66974da34af7c38ef32d200d37"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "apply derivable_pt_lim_const.",
            "VernacExtend",
            "960938bb384eb6666a08df49ec2457c0f743a285"
        ],
        [
            "unfold fct_cte, id; ring.",
            "VernacExtend",
            "26b16ece9afca14ebc74da7aea471ac7ca876c96"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "replace (fun y:R => y ^ S n) with (fun y:R => y * y ^ n).",
            "VernacExtend",
            "7b649665100bf0a8881c5a7e8cba4d987b15310f"
        ],
        [
            "replace (pred (S n)) with n; [ idtac | reflexivity ].",
            "VernacExtend",
            "d2f13b0a44ef29c70c90e08994f960d4a0ad000c"
        ],
        [
            "replace (fun y:R => y * y ^ n) with (id * (fun y:R => y ^ n))%F.",
            "VernacExtend",
            "972d096c93c7daa63dd854643c6d6aced6cacc51"
        ],
        [
            "set (f := fun y:R => y ^ n).",
            "VernacExtend",
            "1b40d01900467c5843f6cf1bfbce27ded4f57442"
        ],
        [
            "replace (INR (S n) * x ^ n) with (1 * f x + id x * (INR n * x ^ pred n)).",
            "VernacExtend",
            "5efcdbfa2f7bda1eaad13a480eff3a5a24b4f84a"
        ],
        [
            "apply derivable_pt_lim_mult.",
            "VernacExtend",
            "64536e67d0a57e66974da34af7c38ef32d200d37"
        ],
        [
            "apply derivable_pt_lim_id.",
            "VernacExtend",
            "eefa66208b1c7b1195a98db883611b02fd29636c"
        ],
        [
            "unfold f; apply Hrecn; assumption.",
            "VernacExtend",
            "d1d4e0343ec1a9a38a691bac4c0a2a08239c5fc9"
        ],
        [
            "unfold f.",
            "VernacExtend",
            "54a386f4161710b69df4a2025df24a14e842ecf2"
        ],
        [
            "pattern n at 1 5; replace n with (S (pred n)).",
            "VernacExtend",
            "7b203afbc9e415a6b0f19dd2ebf9d9b2fa952203"
        ],
        [
            "unfold id; rewrite S_INR; simpl.",
            "VernacExtend",
            "817c0ae1f8e3922a1ed5c2329c2c485150088ab0"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "symmetry ; apply S_pred with 0%nat; assumption.",
            "VernacExtend",
            "07c00048f97977d2afec3560fb2e41ccdd392a6f"
        ],
        [
            "unfold mult_fct, id; reflexivity.",
            "VernacExtend",
            "61171671e4b7da209f5ade326bc749d1e35abe39"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "left; reflexivity.",
            "VernacExtend",
            "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "apply lt_le_trans with 1%nat.",
            "VernacExtend",
            "abc85192d5734af335bb5ee8dc96c9bf7d453d77"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_lim_pow : forall (x:R) (n:nat), derivable_pt_lim (fun y:R => y ^ n) x (INR n * x ^ pred n).",
            "VernacStartTheoremProof",
            "35ad1666bd2f0ad85d3212432265a6cfa937448b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Rmult_0_l.",
            "VernacExtend",
            "198c4e4c2aa27e6987cc5bebc1444c8d76760541"
        ],
        [
            "replace (fun _:R => 1) with (fct_cte 1); [ apply derivable_pt_lim_const | reflexivity ].",
            "VernacExtend",
            "d404c79117cc067d22eb055d53c9e91bcd64550d"
        ],
        [
            "apply derivable_pt_lim_pow_pos.",
            "VernacExtend",
            "9848b59ed8033cfc2adef2dae059fea6490c5886"
        ],
        [
            "apply lt_O_Sn.",
            "VernacExtend",
            "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pt_pow : forall (n:nat) (x:R), derivable_pt (fun y:R => y ^ n) x.",
            "VernacStartTheoremProof",
            "000db9cd1584101fe5d5218500e420b37098fadf"
        ],
        [
            "intros; unfold derivable_pt.",
            "VernacExtend",
            "67520fffb7b7e2a2eecabe08940912e9603e48d7"
        ],
        [
            "exists (INR n * x ^ pred n).",
            "VernacExtend",
            "19a914054eae912457e793b74eacac760717abcc"
        ],
        [
            "apply derivable_pt_lim_pow.",
            "VernacExtend",
            "9bbe3c9d12dbbc63415b9b2003584896ab11f729"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derivable_pow : forall n:nat, derivable (fun y:R => y ^ n).",
            "VernacStartTheoremProof",
            "97bb2f933331fa23098924155d79099092493094"
        ],
        [
            "intro; unfold derivable; intro; apply derivable_pt_pow.",
            "VernacExtend",
            "d50e74b4e37c497984cb7ea2db1013bc9500c387"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma derive_pt_pow : forall (n:nat) (x:R), derive_pt (fun y:R => y ^ n) x (derivable_pt_pow n x) = INR n * x ^ pred n.",
            "VernacStartTheoremProof",
            "dfe534b90f627d3c44416ebe5cdd616af802518a"
        ],
        [
            "intros; apply derive_pt_eq_0.",
            "VernacExtend",
            "91c679ec7d99977724de101d3ecc0b067a010cf2"
        ],
        [
            "apply derivable_pt_lim_pow.",
            "VernacExtend",
            "9bbe3c9d12dbbc63415b9b2003584896ab11f729"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma pr_nu : forall f (x:R) (pr1 pr2:derivable_pt f x), derive_pt f x pr1 = derive_pt f x pr2.",
            "VernacStartTheoremProof",
            "3c0aab4c15ff74cee56804bc755753daf6eb2fa5"
        ],
        [
            "intros f x (x0,H0) (x1,H1).",
            "VernacExtend",
            "db076e26b216197190ce370db7318aadca5534b3"
        ],
        [
            "apply (uniqueness_limite f x x0 x1 H0 H1).",
            "VernacExtend",
            "dde430122234b68cf08ed0cb1adf5d9abc9d70f5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem deriv_maximum : forall f (a b c:R) (pr:derivable_pt f c), a < c -> c < b -> (forall x:R, a < x -> x < b -> f x <= f c) -> derive_pt f c pr = 0.",
            "VernacStartTheoremProof",
            "400ae74e666fd257c9d02f0dde3588bad5cc292e"
        ],
        [
            "intros; case (Rtotal_order 0 (derive_pt f c pr)); intro.",
            "VernacExtend",
            "18edd90fc0345df80b4e18168c12bcdf1e1d823a"
        ],
        [
            "assert (H3 := derivable_derive f c pr).",
            "VernacExtend",
            "559edd882d680e9c1cd8a43f1d8b95a3a12112f7"
        ],
        [
            "elim H3; intros l H4; rewrite H4 in H2.",
            "VernacExtend",
            "4fa1798679e6e91a64c629b89c06926b25ef35e8"
        ],
        [
            "assert (H5 := derive_pt_eq_1 f c l pr H4).",
            "VernacExtend",
            "d1864978c18a380eb2a5b6b953c7177f6227339f"
        ],
        [
            "cut (0 < l / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
            "VernacExtend",
            "88fdd2af79b25b2734e2d5a43f8c9799af5dbd48"
        ],
        [
            "elim (H5 (l / 2) H6); intros delta H7.",
            "VernacExtend",
            "5151af7f8be0423bd980c1d5ad94b62709604e3a"
        ],
        [
            "cut (0 < (b - c) / 2).",
            "VernacExtend",
            "96d18519ef2801f94346e7fc187864da059cb068"
        ],
        [
            "intro; cut (Rmin (delta / 2) ((b - c) / 2) <> 0).",
            "VernacExtend",
            "cec0626400b4966670971bd6a96c49f164e797d8"
        ],
        [
            "intro; cut (Rabs (Rmin (delta / 2) ((b - c) / 2)) < delta).",
            "VernacExtend",
            "f1d4e3166d37d5173fa4c10c612c80d19b6debd7"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H11 := H7 (Rmin (delta / 2) ((b - c) / 2)) H9 H10).",
            "VernacExtend",
            "d19736493a3869522f9c09d906c71075567d6003"
        ],
        [
            "cut (0 < Rmin (delta / 2) ((b - c) / 2)).",
            "VernacExtend",
            "abdb4fe827e8b1f771e0707211746363f3b68cee"
        ],
        [
            "intro; cut (a < c + Rmin (delta / 2) ((b - c) / 2)).",
            "VernacExtend",
            "0843eda43bd0c559b64edf356608ec995f3d0c30"
        ],
        [
            "intro; cut (c + Rmin (delta / 2) ((b - c) / 2) < b).",
            "VernacExtend",
            "9333b31a99091890fe827d476238b212008403fe"
        ],
        [
            "intro; assert (H15 := H1 (c + Rmin (delta / 2) ((b - c) / 2)) H13 H14).",
            "VernacExtend",
            "974f14e525fe1ba124d61c688ef54648beb46548"
        ],
        [
            "cut ((f (c + Rmin (delta / 2) ((b - c) / 2)) - f c) / Rmin (delta / 2) ((b - c) / 2) <= 0).",
            "VernacExtend",
            "17a085e67462a6d64fed0fafc315263c14a841ea"
        ],
        [
            "intro; cut (- l < 0).",
            "VernacExtend",
            "ae678b4b6185fae73a6050df24c5bf1f2b6c061d"
        ],
        [
            "intro; unfold Rminus in H11.",
            "VernacExtend",
            "c201685212ece90d94390d8f40c578645b749647"
        ],
        [
            "cut ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l < 0).",
            "VernacExtend",
            "de0c63226320a241dfe46bf9ea258b0f3d08aa63"
        ],
        [
            "intro; cut (Rabs ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l) < l / 2).",
            "VernacExtend",
            "d8b31103251ecb89de9a5f0a5c4f834bffb85492"
        ],
        [
            "unfold Rabs; case (Rcase_abs ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l)) as [Hlt|Hge].",
            "VernacExtend",
            "5128f6a154589ad3bf03fd847fa86d42dd687600"
        ],
        [
            "replace (- ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l)) with (l + - ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2))).",
            "VernacExtend",
            "b8ac8bdf1f9b2c9bbb06234962107ac81b059160"
        ],
        [
            "intro; generalize (Rplus_lt_compat_l (- l) (l + - ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2))) (l / 2) H19); repeat rewrite <- Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_l; replace (- l + l / 2) with (- (l / 2)).",
            "VernacExtend",
            "3f2993b739b3bc234ab5fb83edd5ce7bdc32ea65"
        ],
        [
            "intro; generalize (Ropp_lt_gt_contravar (- ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2))) (- (l / 2)) H20); repeat rewrite Ropp_involutive; intro; generalize (Rlt_trans 0 (l / 2) ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2)) H6 H21); intro; elim (Rlt_irrefl 0 (Rlt_le_trans 0 ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2)) 0 H22 H16)).",
            "VernacExtend",
            "a95d79aff2dd8c2cdd01b067a4b30044279848d5"
        ],
        [
            "pattern l at 2; rewrite double_var.",
            "VernacExtend",
            "0ad7573928f6c2ce422da4a84efbe210f925228d"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H20 := Rge_le ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l) 0 Hge).",
            "VernacExtend",
            "b2028b066096755223493b3b3953ae3d96134afd"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H20 H18)).",
            "VernacExtend",
            "1756284dcac8f4b88be319bee7107ce2a1e16bf2"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite <- Ropp_0; replace ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l) with (- (l + - ((f (c + Rmin (delta / 2) ((b + - c) / 2)) - f c) / Rmin (delta / 2) ((b + - c) / 2)))).",
            "VernacExtend",
            "dffa17c387e0cd6290786fb79ea185516bf6b9f5"
        ],
        [
            "apply Ropp_gt_lt_contravar; change (0 < l + - ((f (c + Rmin (delta / 2) ((b + - c) / 2)) - f c) / Rmin (delta / 2) ((b + - c) / 2))); apply Rplus_lt_le_0_compat; [ assumption | rewrite <- Ropp_0; apply Ropp_ge_le_contravar; apply Rle_ge; assumption ].",
            "VernacExtend",
            "7543c4e8d0ff09addb0a204c2b8d78e9aa46d3e4"
        ],
        [
            "unfold Rminus; ring.",
            "VernacExtend",
            "880becd939de31b18b774541a6720e27e1fd9908"
        ],
        [
            "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
            "VernacExtend",
            "4ce8e866b38a86eeaa291d3f36269de10621fe4f"
        ],
        [
            "replace ((f (c + Rmin (delta / 2) ((b - c) / 2)) - f c) / Rmin (delta / 2) ((b - c) / 2)) with (- ((f c - f (c + Rmin (delta / 2) ((b - c) / 2))) / Rmin (delta / 2) ((b - c) / 2))).",
            "VernacExtend",
            "0c0856c6b17899d4402ae8f874248758d1fd59e0"
        ],
        [
            "rewrite <- Ropp_0; apply Ropp_ge_le_contravar; apply Rle_ge; unfold Rdiv; apply Rmult_le_pos; [ generalize (Rplus_le_compat_r (- f (c + Rmin (delta * / 2) ((b - c) * / 2))) (f (c + Rmin (delta * / 2) ((b - c) * / 2))) ( f c) H15); rewrite Rplus_opp_r; intro; assumption | left; apply Rinv_0_lt_compat; assumption ].",
            "VernacExtend",
            "0e11423f524c513709ad53b0f3f6fc2a5dadeb51"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite <- Ropp_mult_distr_l_reverse.",
            "VernacExtend",
            "e7c61948f76e0a8897e51bfab935c33e66508906"
        ],
        [
            "repeat rewrite <- (Rmult_comm (/ Rmin (delta * / 2) ((b - c) * / 2))).",
            "VernacExtend",
            "7f54b5f70616934478bd9cccb6cdcb936d8d56ee"
        ],
        [
            "apply Rmult_eq_reg_l with (Rmin (delta * / 2) ((b - c) * / 2)).",
            "VernacExtend",
            "c6ae3ff3ab860cae421429844b8c5965d240fe71"
        ],
        [
            "repeat rewrite <- Rmult_assoc.",
            "VernacExtend",
            "645aebe2c3685a4f868a05a2372130cedecea85e"
        ],
        [
            "rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "2ca74255a63c294f9442d956f32a2e3784636efb"
        ],
        [
            "repeat rewrite Rmult_1_l.",
            "VernacExtend",
            "1630e1bea06aaf17ad0fe64800abe3ae2135c9f4"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "red; intro.",
            "VernacExtend",
            "12e00b6ab6f8834b6f81959ca42843abaa311f37"
        ],
        [
            "unfold Rdiv in H12; rewrite H16 in H12; elim (Rlt_irrefl 0 H12).",
            "VernacExtend",
            "c90015c647fe6f33458dc6add4dd179dc8389760"
        ],
        [
            "red; intro.",
            "VernacExtend",
            "12e00b6ab6f8834b6f81959ca42843abaa311f37"
        ],
        [
            "unfold Rdiv in H12; rewrite H16 in H12; elim (Rlt_irrefl 0 H12).",
            "VernacExtend",
            "c90015c647fe6f33458dc6add4dd179dc8389760"
        ],
        [
            "assert (H14 := Rmin_r (delta / 2) ((b - c) / 2)).",
            "VernacExtend",
            "967c797f3b6d93e6dadf6ba5188c39fe4694343b"
        ],
        [
            "assert (H15 := Rplus_le_compat_l c (Rmin (delta / 2) ((b - c) / 2)) ((b - c) / 2) H14).",
            "VernacExtend",
            "1a3da1ecf787764bad760254426d247003f7d254"
        ],
        [
            "apply Rle_lt_trans with (c + (b - c) / 2).",
            "VernacExtend",
            "56df49fb2dd8e1534d43ff49062d0958f2c25c9a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "6631f3c2df4cb853b13a1c15d269a9146336e287"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "replace (2 * (c + (b - c) / 2)) with (c + b).",
            "VernacExtend",
            "8d5e17e93e6d57f2d136fe56a714553f62140de0"
        ],
        [
            "replace (2 * b) with (b + b).",
            "VernacExtend",
            "af40b5aa71f1528f1e656b02114d44a81f843409"
        ],
        [
            "apply Rplus_lt_compat_r; assumption.",
            "VernacExtend",
            "b6b08b5181f1b0b9ee205993955ce6aebb0b4a20"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold Rdiv; rewrite Rmult_plus_distr_l.",
            "VernacExtend",
            "5c75b295464bcf67e350ab21b1a1b743b50f45ae"
        ],
        [
            "repeat rewrite (Rmult_comm 2).",
            "VernacExtend",
            "51ec0a96050573a8575d57b17353dd2c8abb4f5c"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "7f630b736ed225dea43b09c6ef0119a691020de4"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "apply Rlt_trans with c.",
            "VernacExtend",
            "f0d99091b0bb5d60cce8dde7f3e0cd0addb819e0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "pattern c at 1; rewrite <- (Rplus_0_r c); apply Rplus_lt_compat_l; assumption.",
            "VernacExtend",
            "9261017e1732a3582dbd301ccba8df7958567bd4"
        ],
        [
            "cut (0 < delta / 2).",
            "VernacExtend",
            "c42dbc23bf14a73a183740853ffaa461226fd714"
        ],
        [
            "intro; apply (Rmin_stable_in_posreal (mkposreal (delta / 2) H12) (mkposreal ((b - c) / 2) H8)).",
            "VernacExtend",
            "5ef5be498a08cf786737344dab62791e39eafc97"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "890260abc6df9bffcdd1734d1136fd85613241e8"
        ],
        [
            "unfold Rabs; case (Rcase_abs (Rmin (delta / 2) ((b - c) / 2))) as [Hlt|Hge].",
            "VernacExtend",
            "7b130131cf9ce06a70edd489985311ed1f12e55b"
        ],
        [
            "cut (0 < delta / 2).",
            "VernacExtend",
            "c42dbc23bf14a73a183740853ffaa461226fd714"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "generalize (Rmin_stable_in_posreal (mkposreal (delta / 2) H10) (mkposreal ((b - c) / 2) H8)); simpl; intro; elim (Rlt_irrefl 0 (Rlt_trans 0 (Rmin (delta / 2) ((b - c) / 2)) 0 H11 Hlt)).",
            "VernacExtend",
            "4d6d5ee2421cdada5f4f1b48769fd60a9ec0ae3d"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "890260abc6df9bffcdd1734d1136fd85613241e8"
        ],
        [
            "apply Rle_lt_trans with (delta / 2).",
            "VernacExtend",
            "b34fabde788e5922c08d07d86b34b4e120b07600"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "f4c0b06c2efd971a65fcd955cb283b1e333171b1"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "7c9a8333d70aa1f1e94bdb6f7bfc6755acfdb888"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "replace (2 * delta) with (delta + delta).",
            "VernacExtend",
            "a83a71db5e68baaa94887a68af4cee4d2c2b1431"
        ],
        [
            "pattern delta at 2; rewrite <- (Rplus_0_r delta); apply Rplus_lt_compat_l.",
            "VernacExtend",
            "e35b3b98606bc72cd3e9c485e961941173b0f9d9"
        ],
        [
            "rewrite Rplus_0_r; apply (cond_pos delta).",
            "VernacExtend",
            "c61bdd0ab6462eeb9c29d0ff9e0c90c8c760a50b"
        ],
        [
            "symmetry ; apply double.",
            "VernacExtend",
            "5e3aacb0652c175cb202dff2f768bb76b5673982"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "cut (0 < delta / 2).",
            "VernacExtend",
            "c42dbc23bf14a73a183740853ffaa461226fd714"
        ],
        [
            "intro; generalize (Rmin_stable_in_posreal (mkposreal (delta / 2) H9) (mkposreal ((b - c) / 2) H8)); simpl; intro; red; intro; rewrite H11 in H10; elim (Rlt_irrefl 0 H10).",
            "VernacExtend",
            "a858e1782b7f3dd1ab01a2c38e0891b4d1ff7628"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "890260abc6df9bffcdd1734d1136fd85613241e8"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7122edbd68559f255bfed03dc640472ed14eb4ef"
        ],
        [
            "generalize (Rplus_lt_compat_r (- c) c b H0); rewrite Rplus_opp_r; intro; assumption.",
            "VernacExtend",
            "37502f8af371ff5257369be30ab732606f930ab1"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "ee74bd033c1031a79ef440e1d41037d5c9648214"
        ],
        [
            "elim H2; intro.",
            "VernacExtend",
            "939c927788b9492b13127156d1f300437fdf7754"
        ],
        [
            "symmetry ; assumption.",
            "VernacExtend",
            "936f544fa969baad9c600ccc844230fa4d067c8b"
        ],
        [
            "generalize (derivable_derive f c pr); intro; elim H4; intros l H5.",
            "VernacExtend",
            "979575520850f5f00166ce9a4b8f122b5e260cd5"
        ],
        [
            "rewrite H5 in H3; generalize (derive_pt_eq_1 f c l pr H5); intro; cut (0 < - (l / 2)).",
            "VernacExtend",
            "e38774dac698521b50e34e4e4d2789a33671e39d"
        ],
        [
            "intro; elim (H6 (- (l / 2)) H7); intros delta H9.",
            "VernacExtend",
            "a5bad0ed88b5605b73ec02a1305d939ccee52666"
        ],
        [
            "cut (0 < (c - a) / 2).",
            "VernacExtend",
            "14cb3b135c73ec2bc6664b40319a1a8c1a815f9f"
        ],
        [
            "intro; cut (Rmax (- (delta / 2)) ((a - c) / 2) < 0).",
            "VernacExtend",
            "2fe698d519479c1b80046086696b0341744fbf05"
        ],
        [
            "intro; cut (Rmax (- (delta / 2)) ((a - c) / 2) <> 0).",
            "VernacExtend",
            "3c9d855294f820973cafa4d46d28be4ad53de63a"
        ],
        [
            "intro; cut (Rabs (Rmax (- (delta / 2)) ((a - c) / 2)) < delta).",
            "VernacExtend",
            "b277fe29e0d5c8648a91e71b8761ff3d0e0b9e88"
        ],
        [
            "intro; generalize (H9 (Rmax (- (delta / 2)) ((a - c) / 2)) H11 H12); intro; cut (a < c + Rmax (- (delta / 2)) ((a - c) / 2)).",
            "VernacExtend",
            "37af90667b635320cea9adaaedc34bbd9019299b"
        ],
        [
            "cut (c + Rmax (- (delta / 2)) ((a - c) / 2) < b).",
            "VernacExtend",
            "3817c0afd64625597449f71c380643b5c02f3d72"
        ],
        [
            "intros; generalize (H1 (c + Rmax (- (delta / 2)) ((a - c) / 2)) H15 H14); intro; cut (0 <= (f (c + Rmax (- (delta / 2)) ((a - c) / 2)) - f c) / Rmax (- (delta / 2)) ((a - c) / 2)).",
            "VernacExtend",
            "c3bb4bfa169879031939099a38730d14bc6dce9f"
        ],
        [
            "intro; cut (0 < - l).",
            "VernacExtend",
            "b6a9e865b6ddac943a2ca308cdc6681a926c4fd3"
        ],
        [
            "intro; unfold Rminus in H13; cut (0 < (f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l).",
            "VernacExtend",
            "88c8fbcbe703083ede76f62e72477d39ff65bdce"
        ],
        [
            "intro; cut (Rabs ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l) < - (l / 2)).",
            "VernacExtend",
            "81548311a92debff10488bb477cb29797920366b"
        ],
        [
            "unfold Rabs; case (Rcase_abs ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l)) as [Hlt|Hge].",
            "VernacExtend",
            "85aa94a468a62d9a830a3addd8b91b68dadd1e45"
        ],
        [
            "elim (Rlt_irrefl 0 (Rlt_trans 0 ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l) 0 H19 Hlt)).",
            "VernacExtend",
            "169665f45ecc2a57a170cc8c6b8c1409675ee0dd"
        ],
        [
            "intros; generalize (Rplus_lt_compat_r l ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l) ( - (l / 2)) H20); repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; replace (- (l / 2) + l) with (l / 2).",
            "VernacExtend",
            "1623afbc3bd26e61ff4e157b4f1b748286340845"
        ],
        [
            "cut (l / 2 < 0).",
            "VernacExtend",
            "413b3357b0a567c75d7abb4c62287eff25675c61"
        ],
        [
            "intros; generalize (Rlt_trans ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2)) (l / 2) 0 H22 H21); intro; elim (Rlt_irrefl 0 (Rle_lt_trans 0 ((f (c + Rmax (- (delta / 2)) ((a - c) / 2)) - f c) / Rmax (- (delta / 2)) ((a - c) / 2)) 0 H17 H23)).",
            "VernacExtend",
            "c30e3b459444b32ff2cd782778c704d7b33175ce"
        ],
        [
            "rewrite <- (Ropp_involutive (l / 2)); rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
            "VernacExtend",
            "0d1b4c36506e0a3fcd729328b4beac6dc1404914"
        ],
        [
            "pattern l at 3; rewrite double_var.",
            "VernacExtend",
            "d25254082c5ffe1044ba1bed05f1a15d645f0aa5"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rplus_le_lt_0_compat; assumption.",
            "VernacExtend",
            "a756a4239a91ecfcccef61148f8aec2eff203ba0"
        ],
        [
            "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
            "VernacExtend",
            "4ce8e866b38a86eeaa291d3f36269de10621fe4f"
        ],
        [
            "unfold Rdiv; replace ((f (c + Rmax (- (delta * / 2)) ((a - c) * / 2)) - f c) * / Rmax (- (delta * / 2)) ((a - c) * / 2)) with (- (f (c + Rmax (- (delta * / 2)) ((a - c) * / 2)) - f c) * / - Rmax (- (delta * / 2)) ((a - c) * / 2)).",
            "VernacExtend",
            "07649bb5755097788aa63e5595b781f40586f6a8"
        ],
        [
            "apply Rmult_le_pos.",
            "VernacExtend",
            "e03207c3cef85471384dc0906485b056bc83a80a"
        ],
        [
            "generalize (Rplus_le_compat_l (- f (c + Rmax (- (delta * / 2)) ((a - c) * / 2))) (f (c + Rmax (- (delta * / 2)) ((a - c) * / 2))) ( f c) H16); rewrite Rplus_opp_l; replace (- (f (c + Rmax (- (delta * / 2)) ((a - c) * / 2)) - f c)) with (- f (c + Rmax (- (delta * / 2)) ((a - c) * / 2)) + f c).",
            "VernacExtend",
            "a449746d02d53fc5e2a149088d4fed98ed551a4a"
        ],
        [
            "intro; assumption.",
            "VernacExtend",
            "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "left; apply Rinv_0_lt_compat; rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
            "VernacExtend",
            "1b18ed3dc1eaad4443d22888383d865010c43063"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite <- Ropp_inv_permute.",
            "VernacExtend",
            "85f530bfe968b6a9d6a9139b5c5c7f74c68047b7"
        ],
        [
            "rewrite Rmult_opp_opp.",
            "VernacExtend",
            "7d92dd2d71e9025f38fc1d03db09a956c7840545"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold Rdiv in H11; assumption.",
            "VernacExtend",
            "a68fa18faf04c6058f979b9e40360b46249db96c"
        ],
        [
            "generalize (Rplus_lt_compat_l c (Rmax (- (delta / 2)) ((a - c) / 2)) 0 H10); rewrite Rplus_0_r; intro; apply Rlt_trans with c; assumption.",
            "VernacExtend",
            "bac50cb898bd49e708d7173bdbafad6c0395573c"
        ],
        [
            "generalize (RmaxLess2 (- (delta / 2)) ((a - c) / 2)); intro; generalize (Rplus_le_compat_l c ((a - c) / 2) (Rmax (- (delta / 2)) ((a - c) / 2)) H14); intro; apply Rlt_le_trans with (c + (a - c) / 2).",
            "VernacExtend",
            "05df34cdb8dba46a5491919371b3e2f3ce16112f"
        ],
        [
            "apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "6631f3c2df4cb853b13a1c15d269a9146336e287"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "replace (2 * (c + (a - c) / 2)) with (a + c).",
            "VernacExtend",
            "04359ee2a8f2cea9e3ee094e883423a6dcb2c9e3"
        ],
        [
            "rewrite double.",
            "VernacExtend",
            "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
        ],
        [
            "apply Rplus_lt_compat_l; assumption.",
            "VernacExtend",
            "44ce99cd422bdcc117c49c3d0f1b9cfdbe5e3579"
        ],
        [
            "field; discrR.",
            "VernacExtend",
            "9bac396fe1d6cdfa36e145ead0fbef5efb169aa0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rabs; case (Rcase_abs (Rmax (- (delta / 2)) ((a - c) / 2))) as [Hlt|Hge].",
            "VernacExtend",
            "e6f61f557d67ff66833cff70626bbca071937352"
        ],
        [
            "generalize (RmaxLess1 (- (delta / 2)) ((a - c) / 2)); intro; generalize (Ropp_le_ge_contravar (- (delta / 2)) (Rmax (- (delta / 2)) ((a - c) / 2)) H12); rewrite Ropp_involutive; intro; generalize (Rge_le (delta / 2) (- Rmax (- (delta / 2)) ((a - c) / 2)) H13); intro; apply Rle_lt_trans with (delta / 2).",
            "VernacExtend",
            "b0c349e7b22a03637681f1ed1d1577b93bc0fa59"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "6631f3c2df4cb853b13a1c15d269a9146336e287"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "bb110d8377e3622749fa8b2b4653e0680d3ab799"
        ],
        [
            "rewrite Rmult_1_l; rewrite double.",
            "VernacExtend",
            "9c26c13cbbf5c8312ae7ea7321291c39e7a50be4"
        ],
        [
            "pattern delta at 2; rewrite <- (Rplus_0_r delta); apply Rplus_lt_compat_l; rewrite Rplus_0_r; apply (cond_pos delta).",
            "VernacExtend",
            "c9258becc5f3b2b9ce12718d7716209a35a23310"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "cut (- (delta / 2) < 0).",
            "VernacExtend",
            "77750fa92156db0f1ce3ed21e939b64433d358a5"
        ],
        [
            "cut ((a - c) / 2 < 0).",
            "VernacExtend",
            "d9354372252ef0d759624e758d3e6868b731e6da"
        ],
        [
            "intros; generalize (Rmax_stable_in_negreal (mknegreal (- (delta / 2)) H13) (mknegreal ((a - c) / 2) H12)); simpl; intro; generalize (Rge_le (Rmax (- (delta / 2)) ((a - c) / 2)) 0 Hge); intro; elim (Rlt_irrefl 0 (Rle_lt_trans 0 (Rmax (- (delta / 2)) ((a - c) / 2)) 0 H15 H14)).",
            "VernacExtend",
            "f0fd35a2491e59a0c8481a1865d90b3ba6091d20"
        ],
        [
            "rewrite <- Ropp_0; rewrite <- (Ropp_involutive ((a - c) / 2)); apply Ropp_lt_gt_contravar; replace (- ((a - c) / 2)) with ((c - a) / 2).",
            "VernacExtend",
            "9ee1abb063693abe70eee5296e683210dd261867"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite <- Ropp_mult_distr_l_reverse.",
            "VernacExtend",
            "e7c61948f76e0a8897e51bfab935c33e66508906"
        ],
        [
            "rewrite (Ropp_minus_distr a c).",
            "VernacExtend",
            "e9b7f830a2a58889b933ce25077a41530812f807"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | assert (Hyp : 0 < 2); [ prove_sup0 | apply (Rinv_0_lt_compat 2 Hyp) ] ].",
            "VernacExtend",
            "7fb8d366da910ebd2484499415fabf50fdfdbf13"
        ],
        [
            "red; intro; rewrite H11 in H10; elim (Rlt_irrefl 0 H10).",
            "VernacExtend",
            "8308c93c040fd6dba6e345d2ab8d095fef74be75"
        ],
        [
            "cut ((a - c) / 2 < 0).",
            "VernacExtend",
            "d9354372252ef0d759624e758d3e6868b731e6da"
        ],
        [
            "intro; cut (- (delta / 2) < 0).",
            "VernacExtend",
            "ea691c2aa3f4c9724ec9d6fc690e7f6c17ec3b45"
        ],
        [
            "intro; apply (Rmax_stable_in_negreal (mknegreal (- (delta / 2)) H11) (mknegreal ((a - c) / 2) H10)).",
            "VernacExtend",
            "843aa1569c8f1a642cb527b13dfdcb47d97d7a1c"
        ],
        [
            "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | assert (Hyp : 0 < 2); [ prove_sup0 | apply (Rinv_0_lt_compat 2 Hyp) ] ].",
            "VernacExtend",
            "7fb8d366da910ebd2484499415fabf50fdfdbf13"
        ],
        [
            "rewrite <- Ropp_0; rewrite <- (Ropp_involutive ((a - c) / 2)); apply Ropp_lt_gt_contravar; replace (- ((a - c) / 2)) with ((c - a) / 2).",
            "VernacExtend",
            "9ee1abb063693abe70eee5296e683210dd261867"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "rewrite <- Ropp_mult_distr_l_reverse.",
            "VernacExtend",
            "e7c61948f76e0a8897e51bfab935c33e66508906"
        ],
        [
            "rewrite (Ropp_minus_distr a c).",
            "VernacExtend",
            "e9b7f830a2a58889b933ce25077a41530812f807"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ generalize (Rplus_lt_compat_r (- a) a c H); rewrite Rplus_opp_r; intro; assumption | assert (Hyp : 0 < 2); [ prove_sup0 | apply (Rinv_0_lt_compat 2 Hyp) ] ].",
            "VernacExtend",
            "6bd2ca91dd00fc99f0f6ed7c0bff312de172aeb2"
        ],
        [
            "replace (- (l / 2)) with (- l / 2).",
            "VernacExtend",
            "cc4e79b4d00542850d85b246e87f7a5e316b8872"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7122edbd68559f255bfed03dc640472ed14eb4ef"
        ],
        [
            "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
            "VernacExtend",
            "4ce8e866b38a86eeaa291d3f36269de10621fe4f"
        ],
        [
            "assert (Hyp : 0 < 2); [ prove_sup0 | apply (Rinv_0_lt_compat 2 Hyp) ].",
            "VernacExtend",
            "f410ff860a5062fbd5fed15971cf944ae494af95"
        ],
        [
            "unfold Rdiv; apply Ropp_mult_distr_l_reverse.",
            "VernacExtend",
            "ff882b46e678c061b278b53af8cd983e85ab819d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem deriv_minimum : forall f (a b c:R) (pr:derivable_pt f c), a < c -> c < b -> (forall x:R, a < x -> x < b -> f c <= f x) -> derive_pt f c pr = 0.",
            "VernacStartTheoremProof",
            "d225c458cd90e3ff432ea7505168d773ce5fff69"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite <- (Ropp_involutive (derive_pt f c pr)).",
            "VernacExtend",
            "d4cfa461c3dbe0236aa8219aeeaa621237e652a8"
        ],
        [
            "apply Ropp_eq_0_compat.",
            "VernacExtend",
            "26da1541d7252cef7db26f46fbcdebdbd617517f"
        ],
        [
            "rewrite <- (derive_pt_opp f c pr).",
            "VernacExtend",
            "638551ec3922d474d0e2159dc4f9c3fc32ee7d01"
        ],
        [
            "cut (forall x:R, a < x -> x < b -> (- f)%F x <= (- f)%F c).",
            "VernacExtend",
            "9c85308e09aff02eafbd1c311fda0c25097ad3d2"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "apply (deriv_maximum (- f)%F a b c (derivable_pt_opp _ _ pr) H H0 H2).",
            "VernacExtend",
            "c26713ea4361516df12dbd9437922fb9bc299115"
        ],
        [
            "intros; unfold opp_fct; apply Ropp_ge_le_contravar; apply Rle_ge.",
            "VernacExtend",
            "8d59d085f14d20d9d041e3e1ddcdb033a3cb712a"
        ],
        [
            "apply (H1 x H2 H3).",
            "VernacExtend",
            "907758b6d780846fdb61bd62717579cb08dbcf3d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem deriv_constant2 : forall f (a b c:R) (pr:derivable_pt f c), a < c -> c < b -> (forall x:R, a < x -> x < b -> f x = f c) -> derive_pt f c pr = 0.",
            "VernacStartTheoremProof",
            "a2b743fe297da7b67b4c943f49814e47fbf76460"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "eapply deriv_maximum with a b; try assumption.",
            "VernacExtend",
            "f90f031cb7ca8e34e3ca8e525784c25f5280f793"
        ],
        [
            "intros; right; apply (H1 x H2 H3).",
            "VernacExtend",
            "7b911771623f42d3d91dd10e7c60c4b0f8458fbf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma nonneg_derivative_0 : forall f (pr:derivable f), increasing f -> forall x:R, 0 <= derive_pt f x (pr x).",
            "VernacStartTheoremProof",
            "b4a1885b09d48c9d632ef9049592a4fab605e654"
        ],
        [
            "intros; unfold increasing in H.",
            "VernacExtend",
            "59a769ac742ac3835ed6b4e4cc929f370c127cea"
        ],
        [
            "assert (H0 := derivable_derive f x (pr x)).",
            "VernacExtend",
            "3c6c9bef4b33a66fa92aba273f72650d7700921c"
        ],
        [
            "elim H0; intros l H1.",
            "VernacExtend",
            "37bf896cb9a879ad2c7bd4216da9003167fcae37"
        ],
        [
            "rewrite H1; case (Rtotal_order 0 l); intro.",
            "VernacExtend",
            "cfc6700157784ef8c7609935f3d6f9474f370ff3"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "elim H2; intro.",
            "VernacExtend",
            "939c927788b9492b13127156d1f300437fdf7754"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "assert (H4 := derive_pt_eq_1 f x l (pr x) H1).",
            "VernacExtend",
            "66962c214886d10c3af0676f40beea17f67747e4"
        ],
        [
            "cut (0 < - (l / 2)).",
            "VernacExtend",
            "5f1a79d281923393bf954a07bca76c0b9a72a8e3"
        ],
        [
            "intro; elim (H4 (- (l / 2)) H5); intros delta H6.",
            "VernacExtend",
            "43ca7ebaeb462a315621bafefdc616d84ccce204"
        ],
        [
            "cut (delta / 2 <> 0 /\\ 0 < delta / 2 /\\ Rabs (delta / 2) < delta).",
            "VernacExtend",
            "dc93e8ebbf1c15c9c92f9804c42c4c6d991388a3"
        ],
        [
            "intro; decompose [and] H7; intros; generalize (H6 (delta / 2) H8 H11); cut (0 <= (f (x + delta / 2) - f x) / (delta / 2)).",
            "VernacExtend",
            "3060acbdc0d5632051481105aee25fc6a1aec4df"
        ],
        [
            "intro; cut (0 <= (f (x + delta / 2) - f x) / (delta / 2) - l).",
            "VernacExtend",
            "c85992549ed45d6e9cad260e32cdab6f92bad516"
        ],
        [
            "intro; unfold Rabs; case (Rcase_abs ((f (x + delta / 2) - f x) / (delta / 2) - l)) as [Hlt|Hge].",
            "VernacExtend",
            "584328107c55fcb026a415b908b1e87625572c9c"
        ],
        [
            "elim (Rlt_irrefl 0 (Rle_lt_trans 0 ((f (x + delta / 2) - f x) / (delta / 2) - l) 0 H12 Hlt)).",
            "VernacExtend",
            "3b702e213ce5d269373551c909fc53c9843ec4ac"
        ],
        [
            "intros; generalize (Rplus_lt_compat_r l ((f (x + delta / 2) - f x) / (delta / 2) - l) (- (l / 2)) H13); unfold Rminus; replace (- (l / 2) + l) with (l / 2).",
            "VernacExtend",
            "8df0c1710ce078569f161b0e630ab0dbc6736cf8"
        ],
        [
            "rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; intro; generalize (Rle_lt_trans 0 ((f (x + delta / 2) - f x) / (delta / 2)) (l / 2) H9 H14); intro; cut (l / 2 < 0).",
            "VernacExtend",
            "4babe3f5c92fb671fbc810bc4cf83c8c3b6c7c1d"
        ],
        [
            "intro; elim (Rlt_irrefl 0 (Rlt_trans 0 (l / 2) 0 H15 H16)).",
            "VernacExtend",
            "940353f0c8dda84c27639ea1f4a3aa0ed43f3bae"
        ],
        [
            "rewrite <- Ropp_0 in H5; generalize (Ropp_lt_gt_contravar (-0) (- (l / 2)) H5); repeat rewrite Ropp_involutive; intro; assumption.",
            "VernacExtend",
            "bd430cba93349fd080cc3631f6bfb2296d291f6c"
        ],
        [
            "pattern l at 3; rewrite double_var.",
            "VernacExtend",
            "d25254082c5ffe1044ba1bed05f1a15d645f0aa5"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold Rminus; apply Rplus_le_le_0_compat.",
            "VernacExtend",
            "a303364a66b7ba53d740436c4e4cfccc9cdcdaad"
        ],
        [
            "unfold Rdiv; apply Rmult_le_pos.",
            "VernacExtend",
            "9295075fac998a2bbf6d97082250072803a082bc"
        ],
        [
            "cut (x <= x + delta * / 2).",
            "VernacExtend",
            "19afe99b4dd833c0689a099556ed3668dd2b0bbf"
        ],
        [
            "intro; generalize (H x (x + delta * / 2) H12); intro; generalize (Rplus_le_compat_l (- f x) (f x) (f (x + delta * / 2)) H13); rewrite Rplus_opp_l; rewrite Rplus_comm; intro; assumption.",
            "VernacExtend",
            "a3a38dad05cae357ece83bae2b4b3804841e88ea"
        ],
        [
            "pattern x at 1; rewrite <- (Rplus_0_r x); apply Rplus_le_compat_l; left; assumption.",
            "VernacExtend",
            "65711c3487505b5e7b1ee2746f7a5504ceb933c0"
        ],
        [
            "left; apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "2e3d876dd359094724551bd2f774f9c4a6bc3f60"
        ],
        [
            "left; rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
            "VernacExtend",
            "852e5654073876c3ded1ea475e59cfa4fa8b255f"
        ],
        [
            "unfold Rdiv; apply Rmult_le_pos.",
            "VernacExtend",
            "9295075fac998a2bbf6d97082250072803a082bc"
        ],
        [
            "cut (x <= x + delta * / 2).",
            "VernacExtend",
            "19afe99b4dd833c0689a099556ed3668dd2b0bbf"
        ],
        [
            "intro; generalize (H x (x + delta * / 2) H9); intro; generalize (Rplus_le_compat_l (- f x) (f x) (f (x + delta * / 2)) H12); rewrite Rplus_opp_l; rewrite Rplus_comm; intro; assumption.",
            "VernacExtend",
            "f0499cd8fd996853e0840348f44afe1bc255fdc1"
        ],
        [
            "pattern x at 1; rewrite <- (Rplus_0_r x); apply Rplus_le_compat_l; left; assumption.",
            "VernacExtend",
            "65711c3487505b5e7b1ee2746f7a5504ceb933c0"
        ],
        [
            "left; apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "2e3d876dd359094724551bd2f774f9c4a6bc3f60"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold Rdiv; apply prod_neq_R0.",
            "VernacExtend",
            "bae86043f3acfd4aeb1f77f1138e1172ace3c7fa"
        ],
        [
            "generalize (cond_pos delta); intro; red; intro H9; rewrite H9 in H7; elim (Rlt_irrefl 0 H7).",
            "VernacExtend",
            "e8c3bfe5636326ac2c2c0e51d76ffab8c27b761c"
        ],
        [
            "apply Rinv_neq_0_compat; discrR.",
            "VernacExtend",
            "c996ce35ba9924ff499f316d0fb3eaf573a9e988"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "890260abc6df9bffcdd1734d1136fd85613241e8"
        ],
        [
            "replace (Rabs (delta / 2)) with (delta / 2).",
            "VernacExtend",
            "449c20af558c63311a40e632a7fce2889583b845"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "f4c0b06c2efd971a65fcd955cb283b1e333171b1"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "rewrite (Rmult_comm 2).",
            "VernacExtend",
            "fa06fc35a43a455b406d76e181d26b3606a0680c"
        ],
        [
            "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
            "VernacExtend",
            "4578ae178cd451c29991181c9039fccaadaa7a0a"
        ],
        [
            "rewrite Rmult_1_r.",
            "VernacExtend",
            "d41d18f77f80ae8595148d0386b68549f3d406cf"
        ],
        [
            "rewrite double.",
            "VernacExtend",
            "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
        ],
        [
            "pattern (pos delta) at 1; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "8bc9bf63a3ced569dea47acb51153c4c18e8e7b1"
        ],
        [
            "apply Rplus_lt_compat_l; apply (cond_pos delta).",
            "VernacExtend",
            "def4b5e6c5dd34c187b066aeaf8c3c36e8489fa0"
        ],
        [
            "symmetry ; apply Rabs_right.",
            "VernacExtend",
            "35e08d5b9b235ad55baa5e8e8a7b81c9cb6b73e6"
        ],
        [
            "left; change (0 < delta / 2); unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "91fccbcd323094829301be2f0ca2a938c3d6217e"
        ],
        [
            "unfold Rdiv; rewrite <- Ropp_mult_distr_l_reverse; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "58bf381a3af6832966c06a155795205f75f800b5"
        ],
        [
            "apply Rplus_lt_reg_l with l.",
            "VernacExtend",
            "59f76e8e454b396a55b0ece9ce2063364048b9a2"
        ],
        [
            "unfold Rminus; rewrite Rplus_opp_r; rewrite Rplus_0_r; assumption.",
            "VernacExtend",
            "7beceacec59a5ebe8c40b58501ffa59e1f2eaad4"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "ee74bd033c1031a79ef440e1d41037d5c9648214"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "continuity_pt_locally_ext",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros f g a x a0 q cf eps ep.",
                        "VernacExtend",
                        "3b6264e8e019c88b3b9474413c53e4e47802a2e0"
                    ]
                },
                {
                    "command": [
                        "destruct (cf eps ep) as [a' [a'p Pa']].",
                        "VernacExtend",
                        "d261904ab5668c65829c0e258d5b83290dbd95d1"
                    ]
                },
                {
                    "command": [
                        "exists (Rmin a a'); split.",
                        "VernacExtend",
                        "0c9b0207a7b32d681836198e74af72d7ccf1507d"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; destruct (Rle_dec a a').",
                        "VernacExtend",
                        "b37841eae40fcf7dd84b5317979e636dc325527d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros y cy; rewrite <- !q.",
                        "VernacExtend",
                        "4c9da3b8216f06137c72cc8bb89bb90d8300e2f3"
                    ]
                },
                {
                    "command": [
                        "apply Pa'.",
                        "VernacExtend",
                        "f38bf9c4d06b62a13f5ced1a1d6c7c6e5b20b5e8"
                    ]
                },
                {
                    "command": [
                        "split;[| apply Rlt_le_trans with (Rmin a a');[ | apply Rmin_r]];tauto.",
                        "VernacExtend",
                        "08325806b0a94956ee99691280a6c426f031c6d9"
                    ]
                },
                {
                    "command": [
                        "rewrite R_dist_eq; assumption.",
                        "VernacExtend",
                        "631996c2c86a781de949b7774f334aeaca295632"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rmin a a');[ | apply Rmin_l]; tauto.",
                        "VernacExtend",
                        "afb24f250e365cf6b552633886dad59f1daf063d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_plus",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "unfold continuity_pt, plus_fct; unfold continue_in; intros; apply limit_plus; assumption.",
                        "VernacExtend",
                        "1a1928cb7f2c6d1948751a92ac425903d5568ddc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_opp",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "unfold continuity_pt, opp_fct; unfold continue_in; intros; apply limit_Ropp; assumption.",
                        "VernacExtend",
                        "3fd006b8be66860b0c87ccb78b3cbdec41e64ee5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_minus",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "unfold continuity_pt, minus_fct; unfold continue_in; intros; apply limit_minus; assumption.",
                        "VernacExtend",
                        "b92a99ed51cc5d5358b38be19e4e78223ef6dae8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_mult",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "unfold continuity_pt, mult_fct; unfold continue_in; intros; apply limit_mul; assumption.",
                        "VernacExtend",
                        "2103945cfe233ab658aaea9813e206ccab9256c2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_const",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "unfold constant, continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; intros; exists 1; split; [ apply Rlt_0_1 | intros; generalize (H x x0); intro; rewrite H2; simpl; rewrite R_dist_eq; assumption ].",
                        "VernacExtend",
                        "6572a68c278bf0cba5b8d04d36b6a1960eb47dd6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_scal",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "unfold continuity_pt, mult_real_fct; unfold continue_in; intros; apply (limit_mul (fun x:R => a) f (D_x no_cond x0) a (f x0) x0).",
                        "VernacExtend",
                        "2f6d2a6cec85863d9085eb44b8449ab02416bbba"
                    ]
                },
                {
                    "command": [
                        "unfold limit1_in; unfold limit_in; intros; exists 1; split.",
                        "VernacExtend",
                        "00d55b5352f1222b04c2830d5d55246c6f8a1cdc"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_0_1.",
                        "VernacExtend",
                        "c3f675388bf844e0740197fd71afa66e5eef091d"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite R_dist_eq; assumption.",
                        "VernacExtend",
                        "5fe690c14c46cd4f4315513d587705f25789638a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_inv",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "replace (/ f)%F with (fun x:R => / f x).",
                        "VernacExtend",
                        "df2d91aac464c67b579023f4f63016f281a95abe"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt; unfold continue_in; intros; apply limit_inv; assumption.",
                        "VernacExtend",
                        "6084c2a6b7e5ff8b85b226b80ce918d7b47660a9"
                    ]
                },
                {
                    "command": [
                        "unfold inv_fct; reflexivity.",
                        "VernacExtend",
                        "4013fb81e1f655e4170114a147d900070c7e5b97"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "div_eq_inv",
            "line_nb": 86,
            "steps": [
                {
                    "command": [
                        "intros; reflexivity.",
                        "VernacExtend",
                        "c20cfa06d7b692e82c145d2df3bde4c2fe4eb461"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_div",
            "line_nb": 89,
            "steps": [
                {
                    "command": [
                        "intros; rewrite (div_eq_inv f1 f2); apply continuity_pt_mult; [ assumption | apply continuity_pt_inv; assumption ].",
                        "VernacExtend",
                        "c62beb88e8ad1470037083a9e11f3d68d25abc97"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_plus",
            "line_nb": 120,
            "steps": [
                {
                    "command": [
                        "unfold continuity; intros; apply (continuity_pt_plus f1 f2 x (H x) (H0 x)).",
                        "VernacExtend",
                        "8d8549f2476608f77c1d76a333ee79055f3147c3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_opp",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "unfold continuity; intros; apply (continuity_pt_opp f x (H x)).",
                        "VernacExtend",
                        "1385ea3f1b6a057cdc95c91389effbb4a34830f8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_minus",
            "line_nb": 126,
            "steps": [
                {
                    "command": [
                        "unfold continuity; intros; apply (continuity_pt_minus f1 f2 x (H x) (H0 x)).",
                        "VernacExtend",
                        "985a11400c023677f32467a54eb77a97e03942a2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_mult",
            "line_nb": 129,
            "steps": [
                {
                    "command": [
                        "unfold continuity; intros; apply (continuity_pt_mult f1 f2 x (H x) (H0 x)).",
                        "VernacExtend",
                        "d1be5fc58f7d97a2e0e821842b9cf12f54de73d4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_const",
            "line_nb": 132,
            "steps": [
                {
                    "command": [
                        "unfold continuity; intros; apply (continuity_pt_const f x H).",
                        "VernacExtend",
                        "3ace22bf7ca3c846ca8b0da2b673aba1b31e3993"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_scal",
            "line_nb": 135,
            "steps": [
                {
                    "command": [
                        "unfold continuity; intros; apply (continuity_pt_scal f a x (H x)).",
                        "VernacExtend",
                        "610443dbdbe81b67bf42e2e17e22ed6df34e3d0c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_inv",
            "line_nb": 138,
            "steps": [
                {
                    "command": [
                        "unfold continuity; intros; apply (continuity_pt_inv f x (H x) (H0 x)).",
                        "VernacExtend",
                        "d0cd1c77a178178ad88c8460b51784f5704eda4d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_div",
            "line_nb": 141,
            "steps": [
                {
                    "command": [
                        "unfold continuity; intros; apply (continuity_pt_div f1 f2 x (H x) (H0 x) (H1 x)).",
                        "VernacExtend",
                        "5ee77b94a06e74bbd0d9cf7ecb2da9e93884a211"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_comp",
            "line_nb": 144,
            "steps": [
                {
                    "command": [
                        "unfold continuity; intros.",
                        "VernacExtend",
                        "47679c88013a07b3d6315ca9804ca8f8d80897ad"
                    ]
                },
                {
                    "command": [
                        "apply (continuity_pt_comp f1 f2 x (H x) (H0 (f1 x))).",
                        "VernacExtend",
                        "0cc4fe47fa48c7caa794f511e165cef974fc73a5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniqueness_step1",
            "line_nb": 163,
            "steps": [
                {
                    "command": [
                        "intros; apply (single_limit (fun h:R => (f (x + h) - f x) / h) ( fun h:R => h <> 0) l1 l2 0); try assumption.",
                        "VernacExtend",
                        "d446ed32abacc5ae024fa9ebf70f97aed03f940d"
                    ]
                },
                {
                    "command": [
                        "unfold adhDa; intros; exists (alp / 2).",
                        "VernacExtend",
                        "7b508db4e1ea869116f7763c99548d854eb1f879"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply prod_neq_R0.",
                        "VernacExtend",
                        "bae86043f3acfd4aeb1f77f1138e1172ace3c7fa"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H2 in H1; elim (Rlt_irrefl _ H1).",
                        "VernacExtend",
                        "64fe6d34236201414331067ed348849de713e577"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; discrR.",
                        "VernacExtend",
                        "c996ce35ba9924ff499f316d0fb3eaf573a9e988"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; unfold Rdiv; rewrite Rabs_mult.",
                        "VernacExtend",
                        "fd79a01bbba996ab895ef01db553f8b49052b9ab"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (/ 2)) with (/ 2).",
                        "VernacExtend",
                        "20eeef2676e4ba91be4e2187f28c2b1664927a3f"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs alp) with alp.",
                        "VernacExtend",
                        "5bc9a2bab68932ebe7d40473a560e76f2eb0dc1b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "6631f3c2df4cb853b13a1c15d269a9146336e287"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm 2); rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ]; rewrite Rmult_1_r; rewrite double; pattern alp at 1; replace alp with (alp + 0); [ idtac | ring ]; apply Rplus_lt_compat_l; assumption.",
                        "VernacExtend",
                        "0a68e55d5fbf72d07a548a76dbbf7c218793f91e"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; assumption.",
                        "VernacExtend",
                        "4f64dc679edf75d96b4c21eeb39e369799902dd4"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; change (0 < / 2); apply Rinv_0_lt_compat; prove_sup0.",
                        "VernacExtend",
                        "03e17509786404a0f3f03ddc87c21adba7d9e0ea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniqueness_step2",
            "line_nb": 179,
            "steps": [
                {
                    "command": [
                        "unfold derivable_pt_lim; intros; unfold limit1_in; unfold limit_in; intros.",
                        "VernacExtend",
                        "838cadc4c12431d75559dc1674de0899a8ccd534"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := H eps H0).",
                        "VernacExtend",
                        "d355ee43d5a7265cddec2908e04c0367aa91c8b0"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "exists (pos x0).",
                        "VernacExtend",
                        "19ab76a7d05b59b3dd4d11dad53e6f3c7fb43261"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (cond_pos x0).",
                        "VernacExtend",
                        "1e3a506cf99e477b1cbdba4e16b4eacb1cd879fd"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "dada14496a58e7798a19c2870ff26ac9f0275130"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros.",
                        "VernacExtend",
                        "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
                    ]
                },
                {
                    "command": [
                        "apply H2; [ assumption | unfold Rminus in H5; rewrite Ropp_0 in H5; rewrite Rplus_0_r in H5; assumption ].",
                        "VernacExtend",
                        "2d97d4de2c61a0c5c33e949655f8f09c1baa3730"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniqueness_step3",
            "line_nb": 190,
            "steps": [
                {
                    "command": [
                        "unfold limit1_in, derivable_pt_lim; unfold limit_in; unfold dist; simpl; intros.",
                        "VernacExtend",
                        "dac3bcfcb10fcebd6cdeaf4bc9100c5acfed489e"
                    ]
                },
                {
                    "command": [
                        "elim (H eps H0).",
                        "VernacExtend",
                        "8fff80bfe5ca0b4602770eee58977ebff598cdc5"
                    ]
                },
                {
                    "command": [
                        "intros; elim H1; intros.",
                        "VernacExtend",
                        "2f377cb4b82600aab4e81ad22310ada1d2fe8450"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal x0 H2).",
                        "VernacExtend",
                        "18fa7bdacd2ea51a29a36d571ac6f55362d5b6bb"
                    ]
                },
                {
                    "command": [
                        "simpl; intros; unfold R_dist in H3; apply (H3 h).",
                        "VernacExtend",
                        "b4c9c71a0d03a8ba96ceaca31cb9437bc84deea2"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; assumption ].",
                        "VernacExtend",
                        "048aa139e6b0cf37b72ef4c21831e135c2a31801"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "uniqueness_limite",
            "line_nb": 198,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := uniqueness_step2 _ _ _ H).",
                        "VernacExtend",
                        "ac94b1432eff2c08d23f49860c295bf0e34f032f"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := uniqueness_step2 _ _ _ H0).",
                        "VernacExtend",
                        "ce94224542808fb2abea2e9a71d14918aadec51e"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := uniqueness_step1 _ _ _ _ H1 H2).",
                        "VernacExtend",
                        "368ac5dd93766ad433822f67da35a4740df55e38"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_eq",
            "line_nb": 205,
            "steps": [
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H1 := proj2_sig pr); unfold derive_pt in H; rewrite H in H1; assumption.",
                        "VernacExtend",
                        "80cf157a61ce179c963816b582fbb9848e038413"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H1 := proj2_sig pr); unfold derivable_pt_abs in H1.",
                        "VernacExtend",
                        "cc217eb7b6a532e5fe715dd180cb76d76fc112a9"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := uniqueness_limite _ _ _ _ H H1).",
                        "VernacExtend",
                        "8181123e69a58f06b6748aaec3b54788c2cbd861"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt; unfold derivable_pt_abs.",
                        "VernacExtend",
                        "ef3c3921f9fd0fd7f9068b8dae0a17417cb20083"
                    ]
                },
                {
                    "command": [
                        "symmetry ; assumption.",
                        "VernacExtend",
                        "936f544fa969baad9c600ccc844230fa4d067c8b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_eq_0",
            "line_nb": 213,
            "steps": [
                {
                    "command": [
                        "intros; elim (derive_pt_eq f x l pr); intros.",
                        "VernacExtend",
                        "ae3d59f294ca38b1f0d9d2159b357ff133810c66"
                    ]
                },
                {
                    "command": [
                        "apply (H1 H).",
                        "VernacExtend",
                        "d8f755a11b5635f15b9b3f14728779e77faaa2bf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_eq_1",
            "line_nb": 217,
            "steps": [
                {
                    "command": [
                        "intros; elim (derive_pt_eq f x l pr); intros.",
                        "VernacExtend",
                        "ae3d59f294ca38b1f0d9d2159b357ff133810c66"
                    ]
                },
                {
                    "command": [
                        "apply (H0 H).",
                        "VernacExtend",
                        "6643a0ec43965d56ffe2cea5143aa863819df700"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_D_in",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "unfold D_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "313af54ad8092f82644a417f448e0b72326ae060"
                    ]
                },
                {
                    "command": [
                        "apply derive_pt_eq_0.",
                        "VernacExtend",
                        "51058b8a093c0f27b9e5415ebebae2ac17b3e5a3"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_lim.",
                        "VernacExtend",
                        "66f7b70d68baaf84b30d333ccfa3519d0545510b"
                    ]
                },
                {
                    "command": [
                        "intros; elim (H eps H0); intros alpha H1; elim H1; intros; exists (mkposreal alpha H2); intros; generalize (H3 (x + h)); intro; cut (x + h - x = h); [ intro; cut (D_x no_cond x (x + h) /\\ Rabs (x + h - x) < alpha); [ intro; generalize (H6 H8); rewrite H7; intro; assumption | split; [ unfold D_x; split; [ unfold no_cond; trivial | apply Rminus_not_eq_right; rewrite H7; assumption ] | rewrite H7; assumption ] ] | ring ].",
                        "VernacExtend",
                        "fc6e21eda1c883e849b0a4960d4097f3d0d891cd"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derive_pt_eq_1 f x (df x) pr H).",
                        "VernacExtend",
                        "f10f0c2fbe6f5f3cbad363320209bbc417edf063"
                    ]
                },
                {
                    "command": [
                        "unfold D_in; unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "b5e0c57aa1382d9c2ca47202c4436e3d26e64d3c"
                    ]
                },
                {
                    "command": [
                        "elim (H0 eps H1); intros alpha H2; exists (pos alpha); split.",
                        "VernacExtend",
                        "397e91a4ef7d54d353f47a12ae2abd566ab17105"
                    ]
                },
                {
                    "command": [
                        "apply (cond_pos alpha).",
                        "VernacExtend",
                        "1d96d7d2c6f7284e79979e58f9450e62ea45344d"
                    ]
                },
                {
                    "command": [
                        "intros; elim H3; intros; unfold D_x in H4; elim H4; intros; cut (x0 - x <> 0).",
                        "VernacExtend",
                        "e6d3d6853ca22bfce9010d5ec7db8db1e7ddbf15"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (H2 (x0 - x) H8 H5); replace (x + (x0 - x)) with x0.",
                        "VernacExtend",
                        "023dcfc9d8be125cc8e08d766f8fa992593d27d5"
                    ]
                },
                {
                    "command": [
                        "intro; assumption.",
                        "VernacExtend",
                        "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_D_in",
            "line_nb": 238,
            "steps": [
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "unfold D_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "313af54ad8092f82644a417f448e0b72326ae060"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_lim.",
                        "VernacExtend",
                        "66f7b70d68baaf84b30d333ccfa3519d0545510b"
                    ]
                },
                {
                    "command": [
                        "intros; elim (H eps H0); intros alpha H1; elim H1; intros; exists (mkposreal alpha H2); intros; generalize (H3 (x + h)); intro; cut (x + h - x = h); [ intro; cut (D_x no_cond x (x + h) /\\ Rabs (x + h - x) < alpha); [ intro; generalize (H6 H8); rewrite H7; intro; assumption | split; [ unfold D_x; split; [ unfold no_cond; trivial | apply Rminus_not_eq_right; rewrite H7; assumption ] | rewrite H7; assumption ] ] | ring ].",
                        "VernacExtend",
                        "fc6e21eda1c883e849b0a4960d4097f3d0d891cd"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold derivable_pt_lim in H.",
                        "VernacExtend",
                        "392ab34469381f535cdf0ab5f9aab3894ae57c27"
                    ]
                },
                {
                    "command": [
                        "unfold D_in; unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "b5e0c57aa1382d9c2ca47202c4436e3d26e64d3c"
                    ]
                },
                {
                    "command": [
                        "elim (H eps H0); intros alpha H2; exists (pos alpha); split.",
                        "VernacExtend",
                        "5ca7a6650044a41714ae6a19609e58fff308c58a"
                    ]
                },
                {
                    "command": [
                        "apply (cond_pos alpha).",
                        "VernacExtend",
                        "1d96d7d2c6f7284e79979e58f9450e62ea45344d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros; unfold D_x in H3; elim H3; intros; cut (x0 - x <> 0).",
                        "VernacExtend",
                        "bc2e859866bfde83d1fef6d1e82eeaaafa8eb5db"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (H2 (x0 - x) H7 H4); replace (x + (x0 - x)) with x0.",
                        "VernacExtend",
                        "d3611e181737c6ae83e0aa07f90bec4be06de040"
                    ]
                },
                {
                    "command": [
                        "intro; assumption.",
                        "VernacExtend",
                        "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_ext",
            "line_nb": 255,
            "steps": [
                {
                    "command": [
                        "intros f g x l fg df e ep; destruct (df e ep) as [d pd]; exists d; intros h; rewrite <- !fg; apply pd.",
                        "VernacExtend",
                        "3c9e75232dc59bafa405ca5c5b25c5eaa5135cef"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_locally_ext",
            "line_nb": 258,
            "steps": [
                {
                    "command": [
                        "intros f g x a b l axb fg df e ep.",
                        "VernacExtend",
                        "93b59d422b4a4e38c01a741213cd85b456348667"
                    ]
                },
                {
                    "command": [
                        "destruct (df e ep) as [d pd].",
                        "VernacExtend",
                        "583ea1e4a0bc468dfb929b4902b3000964d2ab9b"
                    ]
                },
                {
                    "command": [
                        "assert (d'h : 0 < Rmin d (Rmin (b - x) (x - a))).",
                        "VernacExtend",
                        "c1d7c1ed3e2a603b1b85f5311d87d2cacfabd622"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_pos;[apply cond_pos | apply Rmin_pos; apply Rlt_Rminus; tauto].",
                        "VernacExtend",
                        "12461887afdb188089ce50b08e7b3fe91c6be572"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ d'h); simpl; intros h hn0 cmp.",
                        "VernacExtend",
                        "18ee1d0aeee0d6dc35b3dc5d72d6eb01c889e872"
                    ]
                },
                {
                    "command": [
                        "rewrite <- !fg;[ |assumption | ].",
                        "VernacExtend",
                        "ed9a2782e3b74aeca5ffd7478cf5d5f48edd3ae1"
                    ]
                },
                {
                    "command": [
                        "apply pd;[assumption |].",
                        "VernacExtend",
                        "1848e37c08255533dc7cd74e39d90606cf1d9149"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := cmp), Rmin_l.",
                        "VernacExtend",
                        "24b710646b1b381b9aa3a2c6b825ff3aa91c7fa7"
                    ]
                },
                {
                    "command": [
                        "assert (-h < x - a).",
                        "VernacExtend",
                        "898ded5d6005988f3ee038eff7d10a402451ef7c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := Rle_abs _).",
                        "VernacExtend",
                        "135a8d900205d7b612754e3cd7bd2bca409d80e3"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Ropp; apply Rlt_le_trans with (1 := cmp).",
                        "VernacExtend",
                        "a9ae7d7b63c38defaabc9896fc22608d667fb4ac"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmin_assoc; apply Rmin_r.",
                        "VernacExtend",
                        "42a03a84e6a576c13ad590883305548b3e8c47b2"
                    ]
                },
                {
                    "command": [
                        "assert (h < b - x).",
                        "VernacExtend",
                        "ee0ea9cfaddd076bf2c003fb361e5169c90db93e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := Rle_abs _).",
                        "VernacExtend",
                        "135a8d900205d7b612754e3cd7bd2bca409d80e3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (1 := cmp).",
                        "VernacExtend",
                        "ad0e678acd40a4a277f9d98e0f548c25bbfc0cbf"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmin_comm, <- Rmin_assoc; apply Rmin_l.",
                        "VernacExtend",
                        "534a9514786650a4f2227846da7e9eb4fd9c67ae"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (Rplus_lt_reg_l (- h)).",
                        "VernacExtend",
                        "af5944e396a2c2d24b3f1a162bf9f287497fc1f1"
                    ]
                },
                {
                    "command": [
                        "replace ((-h) + (x + h)) with x by ring.",
                        "VernacExtend",
                        "23590db609b34c942539e8eb743b8149b0fe49fb"
                    ]
                },
                {
                    "command": [
                        "apply (Rplus_lt_reg_r (- a)).",
                        "VernacExtend",
                        "97b6db467f6ef848fa541aea7ec69dc5d1160bce"
                    ]
                },
                {
                    "command": [
                        "replace (((-h) + a) + - a) with (-h) by ring.",
                        "VernacExtend",
                        "8ffa247af623ec75d6c3b901d1d007102dd8f54f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply (Rplus_lt_reg_r (- x)).",
                        "VernacExtend",
                        "ebfcdfca314b6c525c3fcc373bb6e3f359bfdee3"
                    ]
                },
                {
                    "command": [
                        "replace (x + h + - x) with h by ring.",
                        "VernacExtend",
                        "8fc07929e3dac779f83dc4fa262462e681a61f9a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_derive",
            "line_nb": 285,
            "steps": [
                {
                    "command": [
                        "intros; exists (proj1_sig pr).",
                        "VernacExtend",
                        "6c9bb0f8ca856a35dcd9efc1383f7b84c80e90e5"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt; reflexivity.",
                        "VernacExtend",
                        "a3123895a1a98d84200a40bf063cb2a0e2a6c5cd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_continuous_pt",
            "line_nb": 289,
            "steps": [
                {
                    "command": [
                        "intros f x X.",
                        "VernacExtend",
                        "eccd5dd1bde8ea75cef0aa63dff73505d3538c2e"
                    ]
                },
                {
                    "command": [
                        "generalize (derivable_derive f x X); intro.",
                        "VernacExtend",
                        "f4e311b7668bf84d88e1eb54dbcb953cdcb57ce7"
                    ]
                },
                {
                    "command": [
                        "elim H; intros l H1.",
                        "VernacExtend",
                        "a975dceb01479bd701979ffbe8416bfde6055936"
                    ]
                },
                {
                    "command": [
                        "cut (l = fct_cte l x).",
                        "VernacExtend",
                        "07cbfaca222a053be914eb855e354e6a6ec562ac"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "rewrite H0 in H1.",
                        "VernacExtend",
                        "45eb32137302b214d582b77378332f104f8e1d7f"
                    ]
                },
                {
                    "command": [
                        "generalize (derive_pt_D_in f (fct_cte l) x); intro.",
                        "VernacExtend",
                        "de93aabc3131aba994cf0580a6332b84a469eb3d"
                    ]
                },
                {
                    "command": [
                        "elim (H2 X); intros.",
                        "VernacExtend",
                        "acdfd1896cdc651fcb7142e7ca6009da3f8d8c63"
                    ]
                },
                {
                    "command": [
                        "generalize (H4 H1); intro.",
                        "VernacExtend",
                        "5d03b79940213ab31af3399a16c34d62e4af733d"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt.",
                        "VernacExtend",
                        "35305842039756f847b033762621e4514695de74"
                    ]
                },
                {
                    "command": [
                        "apply (cont_deriv f (fct_cte l) no_cond x H5).",
                        "VernacExtend",
                        "7ea907ad6771bea2f144700d4b1a035812b8c18e"
                    ]
                },
                {
                    "command": [
                        "unfold fct_cte; reflexivity.",
                        "VernacExtend",
                        "52f08012e8cfeeb38b4c66eb6a4de86103c2dec5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_continuous",
            "line_nb": 303,
            "steps": [
                {
                    "command": [
                        "unfold derivable, continuity; intros f X x.",
                        "VernacExtend",
                        "e611a5bbb3e4dce32469b07df3a86292dda8a7d2"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_continuous_pt f x (X x)).",
                        "VernacExtend",
                        "e43e7451b8700caf9bf7d860a7a597431d9c0c97"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_plus",
            "line_nb": 307,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply uniqueness_step3.",
                        "VernacExtend",
                        "1521ad231ccc76e88cb07342ff526d4628e47cac"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := uniqueness_step2 _ _ _ H).",
                        "VernacExtend",
                        "ac94b1432eff2c08d23f49860c295bf0e34f032f"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := uniqueness_step2 _ _ _ H0).",
                        "VernacExtend",
                        "ce94224542808fb2abea2e9a71d14918aadec51e"
                    ]
                },
                {
                    "command": [
                        "unfold plus_fct.",
                        "VernacExtend",
                        "d2a6d40fd3bfa9c22c62eddf786caa8691870eed"
                    ]
                },
                {
                    "command": [
                        "cut (forall h:R, (f1 (x + h) + f2 (x + h) - (f1 x + f2 x)) / h = (f1 (x + h) - f1 x) / h + (f2 (x + h) - f2 x) / h).",
                        "VernacExtend",
                        "56a6711e2c0b6715cb22b43cb3a53c77cfbf5cb8"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "generalize (limit_plus (fun h':R => (f1 (x + h') - f1 x) / h') (fun h':R => (f2 (x + h') - f2 x) / h') (fun h:R => h <> 0) l1 l2 0 H1 H2).",
                        "VernacExtend",
                        "54a47241d24b45805ed9e451fe7dc69ac5d7ef37"
                    ]
                },
                {
                    "command": [
                        "unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "bb4f45a45f58bff9b46b6beb4fe1e11070439c16"
                    ]
                },
                {
                    "command": [
                        "elim (H4 eps H5); intros.",
                        "VernacExtend",
                        "5d8471e911ff3af6c08bf9a2b94ab62272aaea18"
                    ]
                },
                {
                    "command": [
                        "exists x0.",
                        "VernacExtend",
                        "9cf0657053433e90b28a795544f893f4a0f1ace3"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros.",
                        "VernacExtend",
                        "adada1ad2ce0ef6f5f04088c4ecd9bfe31ad7784"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H3; apply H8; assumption.",
                        "VernacExtend",
                        "32f864ec6850e5016e5aaafe8697b5eaeb32b315"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Rdiv; ring.",
                        "VernacExtend",
                        "7e05755b6f19b3780f1f69c5388b48eecfb9dd81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_opp",
            "line_nb": 325,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply uniqueness_step3.",
                        "VernacExtend",
                        "1521ad231ccc76e88cb07342ff526d4628e47cac"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := uniqueness_step2 _ _ _ H).",
                        "VernacExtend",
                        "ac94b1432eff2c08d23f49860c295bf0e34f032f"
                    ]
                },
                {
                    "command": [
                        "unfold opp_fct.",
                        "VernacExtend",
                        "4e63c1953428e7d557cffe0058417d26d5bb9bf7"
                    ]
                },
                {
                    "command": [
                        "cut (forall h:R, (- f (x + h) - - f x) / h = - ((f (x + h) - f x) / h)).",
                        "VernacExtend",
                        "686a3760e6ca9b5c774a7996e748c14310837506"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "generalize (limit_Ropp (fun h:R => (f (x + h) - f x) / h) (fun h:R => h <> 0) l 0 H1).",
                        "VernacExtend",
                        "8f98c2259102743d69a465a73dff9a96f2462925"
                    ]
                },
                {
                    "command": [
                        "unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "bb4f45a45f58bff9b46b6beb4fe1e11070439c16"
                    ]
                },
                {
                    "command": [
                        "elim (H2 eps H3); intros.",
                        "VernacExtend",
                        "cc3a52c21713e09c97835712f96b853de8eb0c67"
                    ]
                },
                {
                    "command": [
                        "exists x0.",
                        "VernacExtend",
                        "9cf0657053433e90b28a795544f893f4a0f1ace3"
                    ]
                },
                {
                    "command": [
                        "elim H4; intros.",
                        "VernacExtend",
                        "ef88f175449d4af46e0685700665ce0cdf3e5695"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H0; apply H6; assumption.",
                        "VernacExtend",
                        "dd0e1233a3aeeab45d3a3aaf1b99d29b55b801a5"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Rdiv; ring.",
                        "VernacExtend",
                        "7e05755b6f19b3780f1f69c5388b48eecfb9dd81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_minus",
            "line_nb": 342,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply uniqueness_step3.",
                        "VernacExtend",
                        "1521ad231ccc76e88cb07342ff526d4628e47cac"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := uniqueness_step2 _ _ _ H).",
                        "VernacExtend",
                        "ac94b1432eff2c08d23f49860c295bf0e34f032f"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := uniqueness_step2 _ _ _ H0).",
                        "VernacExtend",
                        "ce94224542808fb2abea2e9a71d14918aadec51e"
                    ]
                },
                {
                    "command": [
                        "unfold minus_fct.",
                        "VernacExtend",
                        "45dcad0dac1527c6c568cd1c0fbd2511edca9a10"
                    ]
                },
                {
                    "command": [
                        "cut (forall h:R, (f1 (x + h) - f1 x) / h - (f2 (x + h) - f2 x) / h = (f1 (x + h) - f2 (x + h) - (f1 x - f2 x)) / h).",
                        "VernacExtend",
                        "b24f67932a640d6c487e7fbcb2a58867613afbdd"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "generalize (limit_minus (fun h':R => (f1 (x + h') - f1 x) / h') (fun h':R => (f2 (x + h') - f2 x) / h') (fun h:R => h <> 0) l1 l2 0 H1 H2).",
                        "VernacExtend",
                        "d438746e2c82d4db1ead3f8542ab2d439ecd7476"
                    ]
                },
                {
                    "command": [
                        "unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "bb4f45a45f58bff9b46b6beb4fe1e11070439c16"
                    ]
                },
                {
                    "command": [
                        "elim (H4 eps H5); intros.",
                        "VernacExtend",
                        "5d8471e911ff3af6c08bf9a2b94ab62272aaea18"
                    ]
                },
                {
                    "command": [
                        "exists x0.",
                        "VernacExtend",
                        "9cf0657053433e90b28a795544f893f4a0f1ace3"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros.",
                        "VernacExtend",
                        "adada1ad2ce0ef6f5f04088c4ecd9bfe31ad7784"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite <- H3; apply H8; assumption.",
                        "VernacExtend",
                        "eff3ff6a6ec87c85099f799152257e31f1cd4b4d"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Rdiv; ring.",
                        "VernacExtend",
                        "7e05755b6f19b3780f1f69c5388b48eecfb9dd81"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_mult",
            "line_nb": 360,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := derivable_pt_lim_D_in f1 (fun y:R => l1) x).",
                        "VernacExtend",
                        "31e7a73dd165f8c76bbf24147c17c64e84fce1eb"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := H3 H).",
                        "VernacExtend",
                        "69e7c2e9fae312c7bcf6548c70023bc1855a304f"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := derivable_pt_lim_D_in f2 (fun y:R => l2) x).",
                        "VernacExtend",
                        "5255273c7a999eda5c456dba3f8738ae9d0c684e"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros.",
                        "VernacExtend",
                        "f57064d2371d46c709230830a90015bd814391ac"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := H7 H0).",
                        "VernacExtend",
                        "eabe5a2d9c7b3235f1f64af41da48bda078d6cda"
                    ]
                },
                {
                    "command": [
                        "clear H1 H2 H3 H5 H6 H7.",
                        "VernacExtend",
                        "45d521df46aa3de0f71df83b24fe34622d822b86"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := derivable_pt_lim_D_in (f1 * f2)%F (fun y:R => l1 * f2 x + f1 x * l2) x).",
                        "VernacExtend",
                        "ab61764348d8bd0ed0ed279e300443f501a130fb"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "clear H1 H3.",
                        "VernacExtend",
                        "3f711329078af8b17636a96ed468e2b13c5ce5a1"
                    ]
                },
                {
                    "command": [
                        "apply H2.",
                        "VernacExtend",
                        "17101978526a14fb5ad41816224a2fc35cc3d256"
                    ]
                },
                {
                    "command": [
                        "unfold mult_fct.",
                        "VernacExtend",
                        "21226c98c53a08398c840d0d6601e35f89a93dbc"
                    ]
                },
                {
                    "command": [
                        "apply (Dmult no_cond (fun y:R => l1) (fun y:R => l2) f1 f2 x); assumption.",
                        "VernacExtend",
                        "98882a60353d9bc2a9b59788bc6de86460584944"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_const",
            "line_nb": 376,
            "steps": [
                {
                    "command": [
                        "intros; unfold fct_cte, derivable_pt_lim.",
                        "VernacExtend",
                        "10e641b6b41296e2298fccac844a94c9b35888b2"
                    ]
                },
                {
                    "command": [
                        "intros; exists (mkposreal 1 Rlt_0_1); intros; unfold Rminus; rewrite Rplus_opp_r; unfold Rdiv; rewrite Rmult_0_l; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
                        "VernacExtend",
                        "1c6cda481c504338ab5add906b724d812268bbfb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_scal",
            "line_nb": 380,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_pt_lim_const a x).",
                        "VernacExtend",
                        "025e96149bf4a39a0c5cf8af0c50d4d95c92bbb6"
                    ]
                },
                {
                    "command": [
                        "replace (mult_real_fct a f) with (fct_cte a * f)%F.",
                        "VernacExtend",
                        "73eb9ca03094b5183e04a67c40dcc631361f98d8"
                    ]
                },
                {
                    "command": [
                        "replace (a * l) with (0 * f x + a * l); [ idtac | ring ].",
                        "VernacExtend",
                        "8516357f5a5c715e4a5d1e1b2572d2b1bf88b58e"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_lim_mult (fct_cte a) f x 0 l); assumption.",
                        "VernacExtend",
                        "bca64cce0c603946c4d66b731101afe0647dba5c"
                    ]
                },
                {
                    "command": [
                        "unfold mult_real_fct, mult_fct, fct_cte; reflexivity.",
                        "VernacExtend",
                        "96704b4ecb0ea9dd515bdb371513f39395267754"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_div_scal",
            "line_nb": 388,
            "steps": [
                {
                    "command": [
                        "intros f x l a df; apply (derivable_pt_lim_ext (fun y => /a * f y)).",
                        "VernacExtend",
                        "f86caff3de52268abb29fc412a3d033ece30e8c0"
                    ]
                },
                {
                    "command": [
                        "intros z; rewrite Rmult_comm; reflexivity.",
                        "VernacExtend",
                        "a898e56556eab45d296e50dfa641ab23df216e31"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rmult_comm; apply derivable_pt_lim_scal; assumption.",
                        "VernacExtend",
                        "5b3b9780b697475829b34e890f62fab991caa4df"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_scal_right",
            "line_nb": 393,
            "steps": [
                {
                    "command": [
                        "intros f x l a df; apply (derivable_pt_lim_ext (fun y => a * f y)).",
                        "VernacExtend",
                        "a03f0dd5310862846d36c1b01955c87e13c0cb7d"
                    ]
                },
                {
                    "command": [
                        "intros z; rewrite Rmult_comm; reflexivity.",
                        "VernacExtend",
                        "a898e56556eab45d296e50dfa641ab23df216e31"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rmult_comm; apply derivable_pt_lim_scal; assumption.",
                        "VernacExtend",
                        "5b3b9780b697475829b34e890f62fab991caa4df"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_id",
            "line_nb": 398,
            "steps": [
                {
                    "command": [
                        "intro; unfold derivable_pt_lim.",
                        "VernacExtend",
                        "445a8767335bb877354b1eb4e573ca6f8783fcf7"
                    ]
                },
                {
                    "command": [
                        "intros eps Heps; exists (mkposreal eps Heps); intros h H1 H2; unfold id; replace ((x + h - x) / h - 1) with 0.",
                        "VernacExtend",
                        "5d63c4d0ae9d72e5769a0a4a324afa78e8e38c5e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_R0; apply Rle_lt_trans with (Rabs h).",
                        "VernacExtend",
                        "996607b720fe7d3693954b2e27f534a2fe79e1e3"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_assoc; rewrite (Rplus_comm x); rewrite Rplus_assoc.",
                        "VernacExtend",
                        "88db20b80b7f08df4e53ff7236c42e80d430e04d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_opp_l; rewrite Rplus_0_r; unfold Rdiv; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "4e6855f65e5d47d0d0b85682d3b7180e64438656"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rplus_opp_r.",
                        "VernacExtend",
                        "b76d8141cd8993429fd108a1b577570fa91e2427"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_Rsqr",
            "line_nb": 409,
            "steps": [
                {
                    "command": [
                        "intro; unfold derivable_pt_lim.",
                        "VernacExtend",
                        "445a8767335bb877354b1eb4e573ca6f8783fcf7"
                    ]
                },
                {
                    "command": [
                        "unfold Rsqr; intros eps Heps; exists (mkposreal eps Heps); intros h H1 H2; replace (((x + h) * (x + h) - x * x) / h - 2 * x) with h.",
                        "VernacExtend",
                        "939a79e6ceebbfeb754bc8d3bf451726065d1c4e"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace ((x + h) * (x + h) - x * x) with (2 * x * h + h * h); [ idtac | ring ].",
                        "VernacExtend",
                        "eb8022c1954265e87ef17563471ec72df56ad738"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rmult_plus_distr_r.",
                        "VernacExtend",
                        "b5a3d276f2b7f2ece835f2571ecc98adadf55c9a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rmult_assoc.",
                        "VernacExtend",
                        "9a62b3359051e53192153e7bfe542316dbd712a8"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rinv_r_sym; [ idtac | assumption ].",
                        "VernacExtend",
                        "99788be632dda8a3b72f531eeac8f8a4dea840fe"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_comp",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "intros; assert (H1 := derivable_pt_lim_D_in f1 (fun y:R => l1) x).",
                        "VernacExtend",
                        "83f785ceebc8fc61e767c82a6de244c4a7aa79af"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := H3 H).",
                        "VernacExtend",
                        "69e7c2e9fae312c7bcf6548c70023bc1855a304f"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := derivable_pt_lim_D_in f2 (fun y:R => l2) (f1 x)).",
                        "VernacExtend",
                        "1960089b6607de1cc8ed62500a02e47c4df7b488"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros.",
                        "VernacExtend",
                        "f57064d2371d46c709230830a90015bd814391ac"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := H7 H0).",
                        "VernacExtend",
                        "eabe5a2d9c7b3235f1f64af41da48bda078d6cda"
                    ]
                },
                {
                    "command": [
                        "clear H1 H2 H3 H5 H6 H7.",
                        "VernacExtend",
                        "45d521df46aa3de0f71df83b24fe34622d822b86"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := derivable_pt_lim_D_in (f2 o f1)%F (fun y:R => l2 * l1) x).",
                        "VernacExtend",
                        "1fa4f9fe892f4a74730ef84679e34a179b6eab19"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "clear H1 H3; apply H2.",
                        "VernacExtend",
                        "05ea238b9f6a4a07871c794178abeceece2c5bd4"
                    ]
                },
                {
                    "command": [
                        "unfold comp; cut (D_in (fun x0:R => f2 (f1 x0)) (fun y:R => l2 * l1) (Dgf no_cond no_cond f1) x -> D_in (fun x0:R => f2 (f1 x0)) (fun y:R => l2 * l1) no_cond x).",
                        "VernacExtend",
                        "60efdd1f7d092209471538a42ec27fb7e5596697"
                    ]
                },
                {
                    "command": [
                        "intro; apply H1.",
                        "VernacExtend",
                        "868e99754cb1ff2431f4fb10ad32d6ab65a5563a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm; apply (Dcomp no_cond no_cond (fun y:R => l1) (fun y:R => l2) f1 f2 x); assumption.",
                        "VernacExtend",
                        "42e43e2f4670880923cfd638da0bec2c6e2f79f4"
                    ]
                },
                {
                    "command": [
                        "unfold Dgf, D_in, no_cond; unfold limit1_in; unfold limit_in; unfold dist; simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "2675d40e7022de5bbe50baecc0c70ac60e301c10"
                    ]
                },
                {
                    "command": [
                        "elim (H1 eps H3); intros.",
                        "VernacExtend",
                        "5d3d26e5ef945cbd5ee0ff5fdb2e51426c6f4608"
                    ]
                },
                {
                    "command": [
                        "exists x0; intros; split.",
                        "VernacExtend",
                        "13b19f798d5baeadf18249dcf713160b0c4b28a7"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros; assumption.",
                        "VernacExtend",
                        "e3759bfc7109dba24b94887055d32bb02045fe9b"
                    ]
                },
                {
                    "command": [
                        "intros; elim H5; intros; apply H9; split.",
                        "VernacExtend",
                        "c4df0830f787e888527f5050554eaf1ec5ecaf05"
                    ]
                },
                {
                    "command": [
                        "unfold D_x; split.",
                        "VernacExtend",
                        "dc5d57a38d678104af9755be17a91e30c46fd5bc"
                    ]
                },
                {
                    "command": [
                        "split; trivial.",
                        "VernacExtend",
                        "51e6eaa57561ac50797e703222408862cfba3b15"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; unfold D_x in H10; elim H10; intros; assumption.",
                        "VernacExtend",
                        "349e0aac861496290269c29a3cfe36d2b4484628"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros; assumption.",
                        "VernacExtend",
                        "122301c7b52cc3d82121b3b8e2c71abbf9195eec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_plus",
            "line_nb": 443,
            "steps": [
                {
                    "command": [
                        "unfold derivable_pt; intros f1 f2 x X X0.",
                        "VernacExtend",
                        "0dd69a8982f65422188c099a29fd0a229c6f9d3b"
                    ]
                },
                {
                    "command": [
                        "elim X; intros.",
                        "VernacExtend",
                        "3dbd54ccc1b79786f689975657c25979c4151773"
                    ]
                },
                {
                    "command": [
                        "elim X0; intros.",
                        "VernacExtend",
                        "699e01937d2b5e40882bae3010b0f1a72f2e3f82"
                    ]
                },
                {
                    "command": [
                        "exists (x0 + x1).",
                        "VernacExtend",
                        "1ef94e2539c221c87ffabc1a4daa8fc85f13c925"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_plus; assumption.",
                        "VernacExtend",
                        "22fda35fffe3d3d87a2590de3f00da06735b894f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_opp",
            "line_nb": 450,
            "steps": [
                {
                    "command": [
                        "unfold derivable_pt; intros f x X.",
                        "VernacExtend",
                        "3dc7a10222c1d417d6d26ba2164c0ec008c34445"
                    ]
                },
                {
                    "command": [
                        "elim X; intros.",
                        "VernacExtend",
                        "3dbd54ccc1b79786f689975657c25979c4151773"
                    ]
                },
                {
                    "command": [
                        "exists (- x0).",
                        "VernacExtend",
                        "6443fae240fd1b9f656e0a006dbef4e18be0c224"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_opp; assumption.",
                        "VernacExtend",
                        "f3b413c1268d8a62bb01bfe0cd677e3b5c8ae99f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_minus",
            "line_nb": 456,
            "steps": [
                {
                    "command": [
                        "unfold derivable_pt; intros f1 f2 x X X0.",
                        "VernacExtend",
                        "0dd69a8982f65422188c099a29fd0a229c6f9d3b"
                    ]
                },
                {
                    "command": [
                        "elim X; intros.",
                        "VernacExtend",
                        "3dbd54ccc1b79786f689975657c25979c4151773"
                    ]
                },
                {
                    "command": [
                        "elim X0; intros.",
                        "VernacExtend",
                        "699e01937d2b5e40882bae3010b0f1a72f2e3f82"
                    ]
                },
                {
                    "command": [
                        "exists (x0 - x1).",
                        "VernacExtend",
                        "adfe16005ea3900c9c68c9efa62ff494413ef701"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_minus; assumption.",
                        "VernacExtend",
                        "b789408c7b674a3362cc9b6fd4daf5e76cf78bbb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_mult",
            "line_nb": 463,
            "steps": [
                {
                    "command": [
                        "unfold derivable_pt; intros f1 f2 x X X0.",
                        "VernacExtend",
                        "0dd69a8982f65422188c099a29fd0a229c6f9d3b"
                    ]
                },
                {
                    "command": [
                        "elim X; intros.",
                        "VernacExtend",
                        "3dbd54ccc1b79786f689975657c25979c4151773"
                    ]
                },
                {
                    "command": [
                        "elim X0; intros.",
                        "VernacExtend",
                        "699e01937d2b5e40882bae3010b0f1a72f2e3f82"
                    ]
                },
                {
                    "command": [
                        "exists (x0 * f2 x + f1 x * x1).",
                        "VernacExtend",
                        "46ce65eea7d8185db10938c55d31cf477913fbe5"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_mult; assumption.",
                        "VernacExtend",
                        "9de728abf4be05577be0bb3f4199d9badc31b7ec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_const",
            "line_nb": 470,
            "steps": [
                {
                    "command": [
                        "intros; unfold derivable_pt.",
                        "VernacExtend",
                        "67520fffb7b7e2a2eecabe08940912e9603e48d7"
                    ]
                },
                {
                    "command": [
                        "exists 0.",
                        "VernacExtend",
                        "b12b8acd7a1526ef0683513a127984e4864502d9"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_const.",
                        "VernacExtend",
                        "960938bb384eb6666a08df49ec2457c0f743a285"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_scal",
            "line_nb": 475,
            "steps": [
                {
                    "command": [
                        "unfold derivable_pt; intros f1 a x X.",
                        "VernacExtend",
                        "cc196eb391fef91bc4935de4d5339690d01ddc5e"
                    ]
                },
                {
                    "command": [
                        "elim X; intros.",
                        "VernacExtend",
                        "3dbd54ccc1b79786f689975657c25979c4151773"
                    ]
                },
                {
                    "command": [
                        "exists (a * x0).",
                        "VernacExtend",
                        "87484a3cb1eada1896f4d475e7bcb90814fe389e"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_scal; assumption.",
                        "VernacExtend",
                        "e9ed9212dcd79a38d3c31575cdcf0e68bb264e6e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_id",
            "line_nb": 481,
            "steps": [
                {
                    "command": [
                        "unfold derivable_pt; intro.",
                        "VernacExtend",
                        "8b6a9c15f0b1c8462f93b4cfc8a8d4b253743770"
                    ]
                },
                {
                    "command": [
                        "exists 1.",
                        "VernacExtend",
                        "18eb310858be5acae7304d0d9ed33063568db310"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_id.",
                        "VernacExtend",
                        "eefa66208b1c7b1195a98db883611b02fd29636c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_Rsqr",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "unfold derivable_pt; intro; exists (2 * x).",
                        "VernacExtend",
                        "264442f912f5476e1766bed7adf27b47eb8f7dde"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_Rsqr.",
                        "VernacExtend",
                        "319d97570f6cf6a18b574d87df4d6e9228fbaba7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_comp",
            "line_nb": 490,
            "steps": [
                {
                    "command": [
                        "unfold derivable_pt; intros f1 f2 x X X0.",
                        "VernacExtend",
                        "0dd69a8982f65422188c099a29fd0a229c6f9d3b"
                    ]
                },
                {
                    "command": [
                        "elim X; intros.",
                        "VernacExtend",
                        "3dbd54ccc1b79786f689975657c25979c4151773"
                    ]
                },
                {
                    "command": [
                        "elim X0; intros.",
                        "VernacExtend",
                        "699e01937d2b5e40882bae3010b0f1a72f2e3f82"
                    ]
                },
                {
                    "command": [
                        "exists (x1 * x0).",
                        "VernacExtend",
                        "279286d1f38d53fc40e9d1b25678421456e6bd36"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_comp; assumption.",
                        "VernacExtend",
                        "bed37338aa91786ee40cabdad8632f7d3ac05ef9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_plus",
            "line_nb": 497,
            "steps": [
                {
                    "command": [
                        "unfold derivable; intros f1 f2 X X0 x.",
                        "VernacExtend",
                        "b5cdafe78362380553d764157d21e5d3e13518c8"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_plus _ _ x (X _) (X0 _)).",
                        "VernacExtend",
                        "e39bcf5645e9a644ab166b1ba19d75a14bf1881f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_opp",
            "line_nb": 501,
            "steps": [
                {
                    "command": [
                        "unfold derivable; intros f X x.",
                        "VernacExtend",
                        "92b27ed656ff9db9fc022920cb923dd68c8a7234"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_opp _ x (X _)).",
                        "VernacExtend",
                        "180395d8b589f356725dcefea59f57029dddaee8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_minus",
            "line_nb": 505,
            "steps": [
                {
                    "command": [
                        "unfold derivable; intros f1 f2 X X0 x.",
                        "VernacExtend",
                        "b5cdafe78362380553d764157d21e5d3e13518c8"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_minus _ _ x (X _) (X0 _)).",
                        "VernacExtend",
                        "abcb8bad9ffabad680e7d1b7f80a90419741f604"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_mult",
            "line_nb": 509,
            "steps": [
                {
                    "command": [
                        "unfold derivable; intros f1 f2 X X0 x.",
                        "VernacExtend",
                        "b5cdafe78362380553d764157d21e5d3e13518c8"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_mult _ _ x (X _) (X0 _)).",
                        "VernacExtend",
                        "8a57a50d21455838fb5ce91c16c3ac78ab532cf9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_const",
            "line_nb": 513,
            "steps": [
                {
                    "command": [
                        "unfold derivable; intros.",
                        "VernacExtend",
                        "5612f4bcaa09282c0afa54b522bac42d49853983"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_const.",
                        "VernacExtend",
                        "5f79fec976d4bf9b10f4ae3f2bf89e7653fa9cab"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_scal",
            "line_nb": 517,
            "steps": [
                {
                    "command": [
                        "unfold derivable; intros f a X x.",
                        "VernacExtend",
                        "8ae1ba379295bc70eafc59cb622ec2d94c3dc88b"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_scal _ a x (X _)).",
                        "VernacExtend",
                        "55c2e9ff021823d96dcdb4390219c2291e37cda7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_id",
            "line_nb": 521,
            "steps": [
                {
                    "command": [
                        "unfold derivable; intro; apply derivable_pt_id.",
                        "VernacExtend",
                        "448206191e858a7fbe072a147acf023c16c5b43a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_Rsqr",
            "line_nb": 524,
            "steps": [
                {
                    "command": [
                        "unfold derivable; intro; apply derivable_pt_Rsqr.",
                        "VernacExtend",
                        "27ae95d739039409032ad6bc1220582bbdd7111b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_comp",
            "line_nb": 527,
            "steps": [
                {
                    "command": [
                        "unfold derivable; intros f1 f2 X X0 x.",
                        "VernacExtend",
                        "b5cdafe78362380553d764157d21e5d3e13518c8"
                    ]
                },
                {
                    "command": [
                        "apply (derivable_pt_comp _ _ x (X _) (X0 _)).",
                        "VernacExtend",
                        "2548e3054dbd99c04a01f3c7ba8806bb7373ffce"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_plus",
            "line_nb": 531,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H := derivable_derive f1 x pr1).",
                        "VernacExtend",
                        "9f7b922d459d0c252f20bc06d2486ecc47aed25a"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_derive f2 x pr2).",
                        "VernacExtend",
                        "b318102ca285f09f47c0e3069e52e710f38a279b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := derivable_derive (f1 + f2)%F x (derivable_pt_plus _ _ _ pr1 pr2)).",
                        "VernacExtend",
                        "f8e7a6f1ecc56e3937dbfdbdf40bc80895084ac1"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros l1 H.",
                        "VernacExtend",
                        "b951087a9f5cb94960e7ccf62794d3a9fd647373"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros l2 H0.",
                        "VernacExtend",
                        "c2ebd845da26e14746baf428f69d1c4a77114cc2"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intros l H1.",
                        "VernacExtend",
                        "37433732dd36b95403b1a317429455f2a92c3b9a"
                    ]
                },
                {
                    "command": [
                        "rewrite H; rewrite H0; apply derive_pt_eq_0.",
                        "VernacExtend",
                        "675dc0117d5783681af370ce1cdc394456c24857"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := proj2_sig pr1).",
                        "VernacExtend",
                        "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H; rewrite H in H3.",
                        "VernacExtend",
                        "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := proj2_sig pr2).",
                        "VernacExtend",
                        "53b3ff7671713d84210941b961202c7c699e7207"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H0; rewrite H0 in H4.",
                        "VernacExtend",
                        "c92d5d18e1357796181d771141ff5157e85e4911"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_plus; assumption.",
                        "VernacExtend",
                        "22fda35fffe3d3d87a2590de3f00da06735b894f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_opp",
            "line_nb": 546,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H := derivable_derive f x pr1).",
                        "VernacExtend",
                        "cae3365f792699a889e3278a794f1b85a2407b98"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_derive (- f)%F x (derivable_pt_opp _ _ pr1)).",
                        "VernacExtend",
                        "423bbc5bdfa1b18c90665596207c71f50f84203f"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros l1 H.",
                        "VernacExtend",
                        "b951087a9f5cb94960e7ccf62794d3a9fd647373"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros l2 H0.",
                        "VernacExtend",
                        "c2ebd845da26e14746baf428f69d1c4a77114cc2"
                    ]
                },
                {
                    "command": [
                        "rewrite H; apply derive_pt_eq_0.",
                        "VernacExtend",
                        "c6a4d85e0cd644763ce9acf0674548272bf92f79"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := proj2_sig pr1).",
                        "VernacExtend",
                        "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H; rewrite H in H3.",
                        "VernacExtend",
                        "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_opp; assumption.",
                        "VernacExtend",
                        "f3b413c1268d8a62bb01bfe0cd677e3b5c8ae99f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_minus",
            "line_nb": 557,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H := derivable_derive f1 x pr1).",
                        "VernacExtend",
                        "9f7b922d459d0c252f20bc06d2486ecc47aed25a"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_derive f2 x pr2).",
                        "VernacExtend",
                        "b318102ca285f09f47c0e3069e52e710f38a279b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := derivable_derive (f1 - f2)%F x (derivable_pt_minus _ _ _ pr1 pr2)).",
                        "VernacExtend",
                        "ab18193d7884f8ca97e8003a7d7de4500efab0b7"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros l1 H.",
                        "VernacExtend",
                        "b951087a9f5cb94960e7ccf62794d3a9fd647373"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros l2 H0.",
                        "VernacExtend",
                        "c2ebd845da26e14746baf428f69d1c4a77114cc2"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intros l H1.",
                        "VernacExtend",
                        "37433732dd36b95403b1a317429455f2a92c3b9a"
                    ]
                },
                {
                    "command": [
                        "rewrite H; rewrite H0; apply derive_pt_eq_0.",
                        "VernacExtend",
                        "675dc0117d5783681af370ce1cdc394456c24857"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := proj2_sig pr1).",
                        "VernacExtend",
                        "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H; rewrite H in H3.",
                        "VernacExtend",
                        "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := proj2_sig pr2).",
                        "VernacExtend",
                        "53b3ff7671713d84210941b961202c7c699e7207"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H0; rewrite H0 in H4.",
                        "VernacExtend",
                        "c92d5d18e1357796181d771141ff5157e85e4911"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_minus; assumption.",
                        "VernacExtend",
                        "b789408c7b674a3362cc9b6fd4daf5e76cf78bbb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_mult",
            "line_nb": 572,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H := derivable_derive f1 x pr1).",
                        "VernacExtend",
                        "9f7b922d459d0c252f20bc06d2486ecc47aed25a"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_derive f2 x pr2).",
                        "VernacExtend",
                        "b318102ca285f09f47c0e3069e52e710f38a279b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := derivable_derive (f1 * f2)%F x (derivable_pt_mult _ _ _ pr1 pr2)).",
                        "VernacExtend",
                        "68e9470d4fe39353bdfcce5b32137814a5a532e5"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros l1 H.",
                        "VernacExtend",
                        "b951087a9f5cb94960e7ccf62794d3a9fd647373"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros l2 H0.",
                        "VernacExtend",
                        "c2ebd845da26e14746baf428f69d1c4a77114cc2"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intros l H1.",
                        "VernacExtend",
                        "37433732dd36b95403b1a317429455f2a92c3b9a"
                    ]
                },
                {
                    "command": [
                        "rewrite H; rewrite H0; apply derive_pt_eq_0.",
                        "VernacExtend",
                        "675dc0117d5783681af370ce1cdc394456c24857"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := proj2_sig pr1).",
                        "VernacExtend",
                        "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H; rewrite H in H3.",
                        "VernacExtend",
                        "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := proj2_sig pr2).",
                        "VernacExtend",
                        "53b3ff7671713d84210941b961202c7c699e7207"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H0; rewrite H0 in H4.",
                        "VernacExtend",
                        "c92d5d18e1357796181d771141ff5157e85e4911"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_mult; assumption.",
                        "VernacExtend",
                        "9de728abf4be05577be0bb3f4199d9badc31b7ec"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_const",
            "line_nb": 587,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply derive_pt_eq_0.",
                        "VernacExtend",
                        "51058b8a093c0f27b9e5415ebebae2ac17b3e5a3"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_const.",
                        "VernacExtend",
                        "960938bb384eb6666a08df49ec2457c0f743a285"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_scal",
            "line_nb": 592,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H := derivable_derive f x pr).",
                        "VernacExtend",
                        "b575b7f995253acba7b17df9ed57dd108dd9192f"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_derive (mult_real_fct a f) x (derivable_pt_scal _ _ _ pr)).",
                        "VernacExtend",
                        "f589544c22d2f70e7bd839d8cb424a7dadbb433b"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros l1 H.",
                        "VernacExtend",
                        "b951087a9f5cb94960e7ccf62794d3a9fd647373"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros l2 H0.",
                        "VernacExtend",
                        "c2ebd845da26e14746baf428f69d1c4a77114cc2"
                    ]
                },
                {
                    "command": [
                        "rewrite H; apply derive_pt_eq_0.",
                        "VernacExtend",
                        "c6a4d85e0cd644763ce9acf0674548272bf92f79"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := proj2_sig pr).",
                        "VernacExtend",
                        "91d1f5bad422cdaa8d723344f02033beac17176a"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H; rewrite H in H3.",
                        "VernacExtend",
                        "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_scal; assumption.",
                        "VernacExtend",
                        "e9ed9212dcd79a38d3c31575cdcf0e68bb264e6e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_id",
            "line_nb": 603,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply derive_pt_eq_0.",
                        "VernacExtend",
                        "51058b8a093c0f27b9e5415ebebae2ac17b3e5a3"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_id.",
                        "VernacExtend",
                        "eefa66208b1c7b1195a98db883611b02fd29636c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_Rsqr",
            "line_nb": 608,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply derive_pt_eq_0.",
                        "VernacExtend",
                        "51058b8a093c0f27b9e5415ebebae2ac17b3e5a3"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_Rsqr.",
                        "VernacExtend",
                        "319d97570f6cf6a18b574d87df4d6e9228fbaba7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_comp",
            "line_nb": 613,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H := derivable_derive f1 x pr1).",
                        "VernacExtend",
                        "9f7b922d459d0c252f20bc06d2486ecc47aed25a"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_derive f2 (f1 x) pr2).",
                        "VernacExtend",
                        "fbc21bdb40d762458383b48ffa3d2a6424fe90ef"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := derivable_derive (f2 o f1)%F x (derivable_pt_comp _ _ _ pr1 pr2)).",
                        "VernacExtend",
                        "52ee0e5984c8a2c6891fcecaba9a389b8a4093bb"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros l1 H.",
                        "VernacExtend",
                        "b951087a9f5cb94960e7ccf62794d3a9fd647373"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros l2 H0.",
                        "VernacExtend",
                        "c2ebd845da26e14746baf428f69d1c4a77114cc2"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intros l H1.",
                        "VernacExtend",
                        "37433732dd36b95403b1a317429455f2a92c3b9a"
                    ]
                },
                {
                    "command": [
                        "rewrite H; rewrite H0; apply derive_pt_eq_0.",
                        "VernacExtend",
                        "675dc0117d5783681af370ce1cdc394456c24857"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := proj2_sig pr1).",
                        "VernacExtend",
                        "62ff1ad8ef6504e421f685ad90b7d14c1f8a728b"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H; rewrite H in H3.",
                        "VernacExtend",
                        "094dab74c6a7dfed767f261bbcfa360bbc5112d0"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := proj2_sig pr2).",
                        "VernacExtend",
                        "53b3ff7671713d84210941b961202c7c699e7207"
                    ]
                },
                {
                    "command": [
                        "unfold derive_pt in H0; rewrite H0 in H4.",
                        "VernacExtend",
                        "c92d5d18e1357796181d771141ff5157e85e4911"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_comp; assumption.",
                        "VernacExtend",
                        "bed37338aa91786ee40cabdad8632f7d3ac05ef9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_pow_pos",
            "line_nb": 629,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "elim (lt_irrefl _ H).",
                        "VernacExtend",
                        "fc90b77317c333bc64634f7cf1eecc8648bc7dc4"
                    ]
                },
                {
                    "command": [
                        "cut (n = 0%nat \\/ (0 < n)%nat).",
                        "VernacExtend",
                        "bc4602b483382c20ecea21651c0546b27b5e2434"
                    ]
                },
                {
                    "command": [
                        "intro; elim H0; intro.",
                        "VernacExtend",
                        "80080ee26acf8bd4a9a5fd9e7b831121caff4c52"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; simpl.",
                        "VernacExtend",
                        "cd46409972a195bc054cea7510a01cb2adb85092"
                    ]
                },
                {
                    "command": [
                        "replace (fun y:R => y * 1) with (id * fct_cte 1)%F.",
                        "VernacExtend",
                        "5da6cd14d8b5ac12fc4ac113bcfaac9f77e4d84d"
                    ]
                },
                {
                    "command": [
                        "replace (1 * 1) with (1 * fct_cte 1 x + id x * 0).",
                        "VernacExtend",
                        "4e445d43a75d72adc2985090a42cc8aaa0e816b9"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_mult.",
                        "VernacExtend",
                        "64536e67d0a57e66974da34af7c38ef32d200d37"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_id.",
                        "VernacExtend",
                        "eefa66208b1c7b1195a98db883611b02fd29636c"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_const.",
                        "VernacExtend",
                        "960938bb384eb6666a08df49ec2457c0f743a285"
                    ]
                },
                {
                    "command": [
                        "unfold fct_cte, id; ring.",
                        "VernacExtend",
                        "26b16ece9afca14ebc74da7aea471ac7ca876c96"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "replace (fun y:R => y ^ S n) with (fun y:R => y * y ^ n).",
                        "VernacExtend",
                        "7b649665100bf0a8881c5a7e8cba4d987b15310f"
                    ]
                },
                {
                    "command": [
                        "replace (pred (S n)) with n; [ idtac | reflexivity ].",
                        "VernacExtend",
                        "d2f13b0a44ef29c70c90e08994f960d4a0ad000c"
                    ]
                },
                {
                    "command": [
                        "replace (fun y:R => y * y ^ n) with (id * (fun y:R => y ^ n))%F.",
                        "VernacExtend",
                        "972d096c93c7daa63dd854643c6d6aced6cacc51"
                    ]
                },
                {
                    "command": [
                        "set (f := fun y:R => y ^ n).",
                        "VernacExtend",
                        "1b40d01900467c5843f6cf1bfbce27ded4f57442"
                    ]
                },
                {
                    "command": [
                        "replace (INR (S n) * x ^ n) with (1 * f x + id x * (INR n * x ^ pred n)).",
                        "VernacExtend",
                        "5efcdbfa2f7bda1eaad13a480eff3a5a24b4f84a"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_mult.",
                        "VernacExtend",
                        "64536e67d0a57e66974da34af7c38ef32d200d37"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_id.",
                        "VernacExtend",
                        "eefa66208b1c7b1195a98db883611b02fd29636c"
                    ]
                },
                {
                    "command": [
                        "unfold f; apply Hrecn; assumption.",
                        "VernacExtend",
                        "d1d4e0343ec1a9a38a691bac4c0a2a08239c5fc9"
                    ]
                },
                {
                    "command": [
                        "unfold f.",
                        "VernacExtend",
                        "54a386f4161710b69df4a2025df24a14e842ecf2"
                    ]
                },
                {
                    "command": [
                        "pattern n at 1 5; replace n with (S (pred n)).",
                        "VernacExtend",
                        "7b203afbc9e415a6b0f19dd2ebf9d9b2fa952203"
                    ]
                },
                {
                    "command": [
                        "unfold id; rewrite S_INR; simpl.",
                        "VernacExtend",
                        "817c0ae1f8e3922a1ed5c2329c2c485150088ab0"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply S_pred with 0%nat; assumption.",
                        "VernacExtend",
                        "07c00048f97977d2afec3560fb2e41ccdd392a6f"
                    ]
                },
                {
                    "command": [
                        "unfold mult_fct, id; reflexivity.",
                        "VernacExtend",
                        "61171671e4b7da209f5ade326bc749d1e35abe39"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "left; reflexivity.",
                        "VernacExtend",
                        "b22b9a8d01b3b9178248bbef70a162f2f1e6ee81"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "apply lt_le_trans with 1%nat.",
                        "VernacExtend",
                        "abc85192d5734af335bb5ee8dc96c9bf7d453d77"
                    ]
                },
                {
                    "command": [
                        "apply lt_O_Sn.",
                        "VernacExtend",
                        "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_lim_pow",
            "line_nb": 665,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_0_l.",
                        "VernacExtend",
                        "198c4e4c2aa27e6987cc5bebc1444c8d76760541"
                    ]
                },
                {
                    "command": [
                        "replace (fun _:R => 1) with (fct_cte 1); [ apply derivable_pt_lim_const | reflexivity ].",
                        "VernacExtend",
                        "d404c79117cc067d22eb055d53c9e91bcd64550d"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_pow_pos.",
                        "VernacExtend",
                        "9848b59ed8033cfc2adef2dae059fea6490c5886"
                    ]
                },
                {
                    "command": [
                        "apply lt_O_Sn.",
                        "VernacExtend",
                        "227f4ac630f07060fd7f3ffc8bcfa421aedc8a90"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pt_pow",
            "line_nb": 674,
            "steps": [
                {
                    "command": [
                        "intros; unfold derivable_pt.",
                        "VernacExtend",
                        "67520fffb7b7e2a2eecabe08940912e9603e48d7"
                    ]
                },
                {
                    "command": [
                        "exists (INR n * x ^ pred n).",
                        "VernacExtend",
                        "19a914054eae912457e793b74eacac760717abcc"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_pow.",
                        "VernacExtend",
                        "9bbe3c9d12dbbc63415b9b2003584896ab11f729"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derivable_pow",
            "line_nb": 679,
            "steps": [
                {
                    "command": [
                        "intro; unfold derivable; intro; apply derivable_pt_pow.",
                        "VernacExtend",
                        "d50e74b4e37c497984cb7ea2db1013bc9500c387"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "derive_pt_pow",
            "line_nb": 682,
            "steps": [
                {
                    "command": [
                        "intros; apply derive_pt_eq_0.",
                        "VernacExtend",
                        "91c679ec7d99977724de101d3ecc0b067a010cf2"
                    ]
                },
                {
                    "command": [
                        "apply derivable_pt_lim_pow.",
                        "VernacExtend",
                        "9bbe3c9d12dbbc63415b9b2003584896ab11f729"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "pr_nu",
            "line_nb": 686,
            "steps": [
                {
                    "command": [
                        "intros f x (x0,H0) (x1,H1).",
                        "VernacExtend",
                        "db076e26b216197190ce370db7318aadca5534b3"
                    ]
                },
                {
                    "command": [
                        "apply (uniqueness_limite f x x0 x1 H0 H1).",
                        "VernacExtend",
                        "dde430122234b68cf08ed0cb1adf5d9abc9d70f5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "deriv_maximum",
            "line_nb": 690,
            "steps": [
                {
                    "command": [
                        "intros; case (Rtotal_order 0 (derive_pt f c pr)); intro.",
                        "VernacExtend",
                        "18edd90fc0345df80b4e18168c12bcdf1e1d823a"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := derivable_derive f c pr).",
                        "VernacExtend",
                        "559edd882d680e9c1cd8a43f1d8b95a3a12112f7"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros l H4; rewrite H4 in H2.",
                        "VernacExtend",
                        "4fa1798679e6e91a64c629b89c06926b25ef35e8"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := derive_pt_eq_1 f c l pr H4).",
                        "VernacExtend",
                        "d1864978c18a380eb2a5b6b953c7177f6227339f"
                    ]
                },
                {
                    "command": [
                        "cut (0 < l / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
                        "VernacExtend",
                        "88fdd2af79b25b2734e2d5a43f8c9799af5dbd48"
                    ]
                },
                {
                    "command": [
                        "elim (H5 (l / 2) H6); intros delta H7.",
                        "VernacExtend",
                        "5151af7f8be0423bd980c1d5ad94b62709604e3a"
                    ]
                },
                {
                    "command": [
                        "cut (0 < (b - c) / 2).",
                        "VernacExtend",
                        "96d18519ef2801f94346e7fc187864da059cb068"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Rmin (delta / 2) ((b - c) / 2) <> 0).",
                        "VernacExtend",
                        "cec0626400b4966670971bd6a96c49f164e797d8"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Rabs (Rmin (delta / 2) ((b - c) / 2)) < delta).",
                        "VernacExtend",
                        "f1d4e3166d37d5173fa4c10c612c80d19b6debd7"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (H11 := H7 (Rmin (delta / 2) ((b - c) / 2)) H9 H10).",
                        "VernacExtend",
                        "d19736493a3869522f9c09d906c71075567d6003"
                    ]
                },
                {
                    "command": [
                        "cut (0 < Rmin (delta / 2) ((b - c) / 2)).",
                        "VernacExtend",
                        "abdb4fe827e8b1f771e0707211746363f3b68cee"
                    ]
                },
                {
                    "command": [
                        "intro; cut (a < c + Rmin (delta / 2) ((b - c) / 2)).",
                        "VernacExtend",
                        "0843eda43bd0c559b64edf356608ec995f3d0c30"
                    ]
                },
                {
                    "command": [
                        "intro; cut (c + Rmin (delta / 2) ((b - c) / 2) < b).",
                        "VernacExtend",
                        "9333b31a99091890fe827d476238b212008403fe"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H15 := H1 (c + Rmin (delta / 2) ((b - c) / 2)) H13 H14).",
                        "VernacExtend",
                        "974f14e525fe1ba124d61c688ef54648beb46548"
                    ]
                },
                {
                    "command": [
                        "cut ((f (c + Rmin (delta / 2) ((b - c) / 2)) - f c) / Rmin (delta / 2) ((b - c) / 2) <= 0).",
                        "VernacExtend",
                        "17a085e67462a6d64fed0fafc315263c14a841ea"
                    ]
                },
                {
                    "command": [
                        "intro; cut (- l < 0).",
                        "VernacExtend",
                        "ae678b4b6185fae73a6050df24c5bf1f2b6c061d"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Rminus in H11.",
                        "VernacExtend",
                        "c201685212ece90d94390d8f40c578645b749647"
                    ]
                },
                {
                    "command": [
                        "cut ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l < 0).",
                        "VernacExtend",
                        "de0c63226320a241dfe46bf9ea258b0f3d08aa63"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Rabs ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l) < l / 2).",
                        "VernacExtend",
                        "d8b31103251ecb89de9a5f0a5c4f834bffb85492"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs; case (Rcase_abs ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l)) as [Hlt|Hge].",
                        "VernacExtend",
                        "5128f6a154589ad3bf03fd847fa86d42dd687600"
                    ]
                },
                {
                    "command": [
                        "replace (- ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l)) with (l + - ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2))).",
                        "VernacExtend",
                        "b8ac8bdf1f9b2c9bbb06234962107ac81b059160"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (Rplus_lt_compat_l (- l) (l + - ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2))) (l / 2) H19); repeat rewrite <- Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_l; replace (- l + l / 2) with (- (l / 2)).",
                        "VernacExtend",
                        "3f2993b739b3bc234ab5fb83edd5ce7bdc32ea65"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (Ropp_lt_gt_contravar (- ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2))) (- (l / 2)) H20); repeat rewrite Ropp_involutive; intro; generalize (Rlt_trans 0 (l / 2) ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2)) H6 H21); intro; elim (Rlt_irrefl 0 (Rlt_le_trans 0 ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2)) 0 H22 H16)).",
                        "VernacExtend",
                        "a95d79aff2dd8c2cdd01b067a4b30044279848d5"
                    ]
                },
                {
                    "command": [
                        "pattern l at 2; rewrite double_var.",
                        "VernacExtend",
                        "0ad7573928f6c2ce422da4a84efbe210f925228d"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (H20 := Rge_le ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l) 0 Hge).",
                        "VernacExtend",
                        "b2028b066096755223493b3b3953ae3d96134afd"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H20 H18)).",
                        "VernacExtend",
                        "1756284dcac8f4b88be319bee7107ce2a1e16bf2"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0; replace ((f (c + Rmin (delta / 2) ((b + - c) / 2)) + - f c) / Rmin (delta / 2) ((b + - c) / 2) + - l) with (- (l + - ((f (c + Rmin (delta / 2) ((b + - c) / 2)) - f c) / Rmin (delta / 2) ((b + - c) / 2)))).",
                        "VernacExtend",
                        "dffa17c387e0cd6290786fb79ea185516bf6b9f5"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_gt_lt_contravar; change (0 < l + - ((f (c + Rmin (delta / 2) ((b + - c) / 2)) - f c) / Rmin (delta / 2) ((b + - c) / 2))); apply Rplus_lt_le_0_compat; [ assumption | rewrite <- Ropp_0; apply Ropp_ge_le_contravar; apply Rle_ge; assumption ].",
                        "VernacExtend",
                        "7543c4e8d0ff09addb0a204c2b8d78e9aa46d3e4"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; ring.",
                        "VernacExtend",
                        "880becd939de31b18b774541a6720e27e1fd9908"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
                        "VernacExtend",
                        "4ce8e866b38a86eeaa291d3f36269de10621fe4f"
                    ]
                },
                {
                    "command": [
                        "replace ((f (c + Rmin (delta / 2) ((b - c) / 2)) - f c) / Rmin (delta / 2) ((b - c) / 2)) with (- ((f c - f (c + Rmin (delta / 2) ((b - c) / 2))) / Rmin (delta / 2) ((b - c) / 2))).",
                        "VernacExtend",
                        "0c0856c6b17899d4402ae8f874248758d1fd59e0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0; apply Ropp_ge_le_contravar; apply Rle_ge; unfold Rdiv; apply Rmult_le_pos; [ generalize (Rplus_le_compat_r (- f (c + Rmin (delta * / 2) ((b - c) * / 2))) (f (c + Rmin (delta * / 2) ((b - c) * / 2))) ( f c) H15); rewrite Rplus_opp_r; intro; assumption | left; apply Rinv_0_lt_compat; assumption ].",
                        "VernacExtend",
                        "0e11423f524c513709ad53b0f3f6fc2a5dadeb51"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_mult_distr_l_reverse.",
                        "VernacExtend",
                        "e7c61948f76e0a8897e51bfab935c33e66508906"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- (Rmult_comm (/ Rmin (delta * / 2) ((b - c) * / 2))).",
                        "VernacExtend",
                        "7f54b5f70616934478bd9cccb6cdcb936d8d56ee"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with (Rmin (delta * / 2) ((b - c) * / 2)).",
                        "VernacExtend",
                        "c6ae3ff3ab860cae421429844b8c5965d240fe71"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rmult_assoc.",
                        "VernacExtend",
                        "645aebe2c3685a4f868a05a2372130cedecea85e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "2ca74255a63c294f9442d956f32a2e3784636efb"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1630e1bea06aaf17ad0fe64800abe3ae2135c9f4"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "red; intro.",
                        "VernacExtend",
                        "12e00b6ab6f8834b6f81959ca42843abaa311f37"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv in H12; rewrite H16 in H12; elim (Rlt_irrefl 0 H12).",
                        "VernacExtend",
                        "c90015c647fe6f33458dc6add4dd179dc8389760"
                    ]
                },
                {
                    "command": [
                        "red; intro.",
                        "VernacExtend",
                        "12e00b6ab6f8834b6f81959ca42843abaa311f37"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv in H12; rewrite H16 in H12; elim (Rlt_irrefl 0 H12).",
                        "VernacExtend",
                        "c90015c647fe6f33458dc6add4dd179dc8389760"
                    ]
                },
                {
                    "command": [
                        "assert (H14 := Rmin_r (delta / 2) ((b - c) / 2)).",
                        "VernacExtend",
                        "967c797f3b6d93e6dadf6ba5188c39fe4694343b"
                    ]
                },
                {
                    "command": [
                        "assert (H15 := Rplus_le_compat_l c (Rmin (delta / 2) ((b - c) / 2)) ((b - c) / 2) H14).",
                        "VernacExtend",
                        "1a3da1ecf787764bad760254426d247003f7d254"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (c + (b - c) / 2).",
                        "VernacExtend",
                        "56df49fb2dd8e1534d43ff49062d0958f2c25c9a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "6631f3c2df4cb853b13a1c15d269a9146336e287"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (c + (b - c) / 2)) with (c + b).",
                        "VernacExtend",
                        "8d5e17e93e6d57f2d136fe56a714553f62140de0"
                    ]
                },
                {
                    "command": [
                        "replace (2 * b) with (b + b).",
                        "VernacExtend",
                        "af40b5aa71f1528f1e656b02114d44a81f843409"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r; assumption.",
                        "VernacExtend",
                        "b6b08b5181f1b0b9ee205993955ce6aebb0b4a20"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rmult_plus_distr_l.",
                        "VernacExtend",
                        "5c75b295464bcf67e350ab21b1a1b743b50f45ae"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite (Rmult_comm 2).",
                        "VernacExtend",
                        "51ec0a96050573a8575d57b17353dd2c8abb4f5c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "7f630b736ed225dea43b09c6ef0119a691020de4"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with c.",
                        "VernacExtend",
                        "f0d99091b0bb5d60cce8dde7f3e0cd0addb819e0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "pattern c at 1; rewrite <- (Rplus_0_r c); apply Rplus_lt_compat_l; assumption.",
                        "VernacExtend",
                        "9261017e1732a3582dbd301ccba8df7958567bd4"
                    ]
                },
                {
                    "command": [
                        "cut (0 < delta / 2).",
                        "VernacExtend",
                        "c42dbc23bf14a73a183740853ffaa461226fd714"
                    ]
                },
                {
                    "command": [
                        "intro; apply (Rmin_stable_in_posreal (mkposreal (delta / 2) H12) (mkposreal ((b - c) / 2) H8)).",
                        "VernacExtend",
                        "5ef5be498a08cf786737344dab62791e39eafc97"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "890260abc6df9bffcdd1734d1136fd85613241e8"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs; case (Rcase_abs (Rmin (delta / 2) ((b - c) / 2))) as [Hlt|Hge].",
                        "VernacExtend",
                        "7b130131cf9ce06a70edd489985311ed1f12e55b"
                    ]
                },
                {
                    "command": [
                        "cut (0 < delta / 2).",
                        "VernacExtend",
                        "c42dbc23bf14a73a183740853ffaa461226fd714"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "generalize (Rmin_stable_in_posreal (mkposreal (delta / 2) H10) (mkposreal ((b - c) / 2) H8)); simpl; intro; elim (Rlt_irrefl 0 (Rlt_trans 0 (Rmin (delta / 2) ((b - c) / 2)) 0 H11 Hlt)).",
                        "VernacExtend",
                        "4d6d5ee2421cdada5f4f1b48769fd60a9ec0ae3d"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "890260abc6df9bffcdd1734d1136fd85613241e8"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (delta / 2).",
                        "VernacExtend",
                        "b34fabde788e5922c08d07d86b34b4e120b07600"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "f4c0b06c2efd971a65fcd955cb283b1e333171b1"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "7c9a8333d70aa1f1e94bdb6f7bfc6755acfdb888"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "replace (2 * delta) with (delta + delta).",
                        "VernacExtend",
                        "a83a71db5e68baaa94887a68af4cee4d2c2b1431"
                    ]
                },
                {
                    "command": [
                        "pattern delta at 2; rewrite <- (Rplus_0_r delta); apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "e35b3b98606bc72cd3e9c485e961941173b0f9d9"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; apply (cond_pos delta).",
                        "VernacExtend",
                        "c61bdd0ab6462eeb9c29d0ff9e0c90c8c760a50b"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply double.",
                        "VernacExtend",
                        "5e3aacb0652c175cb202dff2f768bb76b5673982"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "cut (0 < delta / 2).",
                        "VernacExtend",
                        "c42dbc23bf14a73a183740853ffaa461226fd714"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (Rmin_stable_in_posreal (mkposreal (delta / 2) H9) (mkposreal ((b - c) / 2) H8)); simpl; intro; red; intro; rewrite H11 in H10; elim (Rlt_irrefl 0 H10).",
                        "VernacExtend",
                        "a858e1782b7f3dd1ab01a2c38e0891b4d1ff7628"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "890260abc6df9bffcdd1734d1136fd85613241e8"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7122edbd68559f255bfed03dc640472ed14eb4ef"
                    ]
                },
                {
                    "command": [
                        "generalize (Rplus_lt_compat_r (- c) c b H0); rewrite Rplus_opp_r; intro; assumption.",
                        "VernacExtend",
                        "37502f8af371ff5257369be30ab732606f930ab1"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup0.",
                        "VernacExtend",
                        "ee74bd033c1031a79ef440e1d41037d5c9648214"
                    ]
                },
                {
                    "command": [
                        "elim H2; intro.",
                        "VernacExtend",
                        "939c927788b9492b13127156d1f300437fdf7754"
                    ]
                },
                {
                    "command": [
                        "symmetry ; assumption.",
                        "VernacExtend",
                        "936f544fa969baad9c600ccc844230fa4d067c8b"
                    ]
                },
                {
                    "command": [
                        "generalize (derivable_derive f c pr); intro; elim H4; intros l H5.",
                        "VernacExtend",
                        "979575520850f5f00166ce9a4b8f122b5e260cd5"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H3; generalize (derive_pt_eq_1 f c l pr H5); intro; cut (0 < - (l / 2)).",
                        "VernacExtend",
                        "e38774dac698521b50e34e4e4d2789a33671e39d"
                    ]
                },
                {
                    "command": [
                        "intro; elim (H6 (- (l / 2)) H7); intros delta H9.",
                        "VernacExtend",
                        "a5bad0ed88b5605b73ec02a1305d939ccee52666"
                    ]
                },
                {
                    "command": [
                        "cut (0 < (c - a) / 2).",
                        "VernacExtend",
                        "14cb3b135c73ec2bc6664b40319a1a8c1a815f9f"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Rmax (- (delta / 2)) ((a - c) / 2) < 0).",
                        "VernacExtend",
                        "2fe698d519479c1b80046086696b0341744fbf05"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Rmax (- (delta / 2)) ((a - c) / 2) <> 0).",
                        "VernacExtend",
                        "3c9d855294f820973cafa4d46d28be4ad53de63a"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Rabs (Rmax (- (delta / 2)) ((a - c) / 2)) < delta).",
                        "VernacExtend",
                        "b277fe29e0d5c8648a91e71b8761ff3d0e0b9e88"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (H9 (Rmax (- (delta / 2)) ((a - c) / 2)) H11 H12); intro; cut (a < c + Rmax (- (delta / 2)) ((a - c) / 2)).",
                        "VernacExtend",
                        "37af90667b635320cea9adaaedc34bbd9019299b"
                    ]
                },
                {
                    "command": [
                        "cut (c + Rmax (- (delta / 2)) ((a - c) / 2) < b).",
                        "VernacExtend",
                        "3817c0afd64625597449f71c380643b5c02f3d72"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (H1 (c + Rmax (- (delta / 2)) ((a - c) / 2)) H15 H14); intro; cut (0 <= (f (c + Rmax (- (delta / 2)) ((a - c) / 2)) - f c) / Rmax (- (delta / 2)) ((a - c) / 2)).",
                        "VernacExtend",
                        "c3bb4bfa169879031939099a38730d14bc6dce9f"
                    ]
                },
                {
                    "command": [
                        "intro; cut (0 < - l).",
                        "VernacExtend",
                        "b6a9e865b6ddac943a2ca308cdc6681a926c4fd3"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Rminus in H13; cut (0 < (f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l).",
                        "VernacExtend",
                        "88c8fbcbe703083ede76f62e72477d39ff65bdce"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Rabs ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l) < - (l / 2)).",
                        "VernacExtend",
                        "81548311a92debff10488bb477cb29797920366b"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs; case (Rcase_abs ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l)) as [Hlt|Hge].",
                        "VernacExtend",
                        "85aa94a468a62d9a830a3addd8b91b68dadd1e45"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl 0 (Rlt_trans 0 ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l) 0 H19 Hlt)).",
                        "VernacExtend",
                        "169665f45ecc2a57a170cc8c6b8c1409675ee0dd"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (Rplus_lt_compat_r l ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2) + - l) ( - (l / 2)) H20); repeat rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; replace (- (l / 2) + l) with (l / 2).",
                        "VernacExtend",
                        "1623afbc3bd26e61ff4e157b4f1b748286340845"
                    ]
                },
                {
                    "command": [
                        "cut (l / 2 < 0).",
                        "VernacExtend",
                        "413b3357b0a567c75d7abb4c62287eff25675c61"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (Rlt_trans ((f (c + Rmax (- (delta / 2)) ((a + - c) / 2)) + - f c) / Rmax (- (delta / 2)) ((a + - c) / 2)) (l / 2) 0 H22 H21); intro; elim (Rlt_irrefl 0 (Rle_lt_trans 0 ((f (c + Rmax (- (delta / 2)) ((a - c) / 2)) - f c) / Rmax (- (delta / 2)) ((a - c) / 2)) 0 H17 H23)).",
                        "VernacExtend",
                        "c30e3b459444b32ff2cd782778c704d7b33175ce"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (l / 2)); rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
                        "VernacExtend",
                        "0d1b4c36506e0a3fcd729328b4beac6dc1404914"
                    ]
                },
                {
                    "command": [
                        "pattern l at 3; rewrite double_var.",
                        "VernacExtend",
                        "d25254082c5ffe1044ba1bed05f1a15d645f0aa5"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat; assumption.",
                        "VernacExtend",
                        "a756a4239a91ecfcccef61148f8aec2eff203ba0"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
                        "VernacExtend",
                        "4ce8e866b38a86eeaa291d3f36269de10621fe4f"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; replace ((f (c + Rmax (- (delta * / 2)) ((a - c) * / 2)) - f c) * / Rmax (- (delta * / 2)) ((a - c) * / 2)) with (- (f (c + Rmax (- (delta * / 2)) ((a - c) * / 2)) - f c) * / - Rmax (- (delta * / 2)) ((a - c) * / 2)).",
                        "VernacExtend",
                        "07649bb5755097788aa63e5595b781f40586f6a8"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_pos.",
                        "VernacExtend",
                        "e03207c3cef85471384dc0906485b056bc83a80a"
                    ]
                },
                {
                    "command": [
                        "generalize (Rplus_le_compat_l (- f (c + Rmax (- (delta * / 2)) ((a - c) * / 2))) (f (c + Rmax (- (delta * / 2)) ((a - c) * / 2))) ( f c) H16); rewrite Rplus_opp_l; replace (- (f (c + Rmax (- (delta * / 2)) ((a - c) * / 2)) - f c)) with (- f (c + Rmax (- (delta * / 2)) ((a - c) * / 2)) + f c).",
                        "VernacExtend",
                        "a449746d02d53fc5e2a149088d4fed98ed551a4a"
                    ]
                },
                {
                    "command": [
                        "intro; assumption.",
                        "VernacExtend",
                        "551ec2015f4dd20223b70c4f4cd79f05302e6cf6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "left; apply Rinv_0_lt_compat; rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
                        "VernacExtend",
                        "1b18ed3dc1eaad4443d22888383d865010c43063"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_inv_permute.",
                        "VernacExtend",
                        "85f530bfe968b6a9d6a9139b5c5c7f74c68047b7"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_opp_opp.",
                        "VernacExtend",
                        "7d92dd2d71e9025f38fc1d03db09a956c7840545"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv in H11; assumption.",
                        "VernacExtend",
                        "a68fa18faf04c6058f979b9e40360b46249db96c"
                    ]
                },
                {
                    "command": [
                        "generalize (Rplus_lt_compat_l c (Rmax (- (delta / 2)) ((a - c) / 2)) 0 H10); rewrite Rplus_0_r; intro; apply Rlt_trans with c; assumption.",
                        "VernacExtend",
                        "bac50cb898bd49e708d7173bdbafad6c0395573c"
                    ]
                },
                {
                    "command": [
                        "generalize (RmaxLess2 (- (delta / 2)) ((a - c) / 2)); intro; generalize (Rplus_le_compat_l c ((a - c) / 2) (Rmax (- (delta / 2)) ((a - c) / 2)) H14); intro; apply Rlt_le_trans with (c + (a - c) / 2).",
                        "VernacExtend",
                        "05df34cdb8dba46a5491919371b3e2f3ce16112f"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "6631f3c2df4cb853b13a1c15d269a9146336e287"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (c + (a - c) / 2)) with (a + c).",
                        "VernacExtend",
                        "04359ee2a8f2cea9e3ee094e883423a6dcb2c9e3"
                    ]
                },
                {
                    "command": [
                        "rewrite double.",
                        "VernacExtend",
                        "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l; assumption.",
                        "VernacExtend",
                        "44ce99cd422bdcc117c49c3d0f1b9cfdbe5e3579"
                    ]
                },
                {
                    "command": [
                        "field; discrR.",
                        "VernacExtend",
                        "9bac396fe1d6cdfa36e145ead0fbef5efb169aa0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs; case (Rcase_abs (Rmax (- (delta / 2)) ((a - c) / 2))) as [Hlt|Hge].",
                        "VernacExtend",
                        "e6f61f557d67ff66833cff70626bbca071937352"
                    ]
                },
                {
                    "command": [
                        "generalize (RmaxLess1 (- (delta / 2)) ((a - c) / 2)); intro; generalize (Ropp_le_ge_contravar (- (delta / 2)) (Rmax (- (delta / 2)) ((a - c) / 2)) H12); rewrite Ropp_involutive; intro; generalize (Rge_le (delta / 2) (- Rmax (- (delta / 2)) ((a - c) / 2)) H13); intro; apply Rle_lt_trans with (delta / 2).",
                        "VernacExtend",
                        "b0c349e7b22a03637681f1ed1d1577b93bc0fa59"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "6631f3c2df4cb853b13a1c15d269a9146336e287"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "bb110d8377e3622749fa8b2b4653e0680d3ab799"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; rewrite double.",
                        "VernacExtend",
                        "9c26c13cbbf5c8312ae7ea7321291c39e7a50be4"
                    ]
                },
                {
                    "command": [
                        "pattern delta at 2; rewrite <- (Rplus_0_r delta); apply Rplus_lt_compat_l; rewrite Rplus_0_r; apply (cond_pos delta).",
                        "VernacExtend",
                        "c9258becc5f3b2b9ce12718d7716209a35a23310"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "cut (- (delta / 2) < 0).",
                        "VernacExtend",
                        "77750fa92156db0f1ce3ed21e939b64433d358a5"
                    ]
                },
                {
                    "command": [
                        "cut ((a - c) / 2 < 0).",
                        "VernacExtend",
                        "d9354372252ef0d759624e758d3e6868b731e6da"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (Rmax_stable_in_negreal (mknegreal (- (delta / 2)) H13) (mknegreal ((a - c) / 2) H12)); simpl; intro; generalize (Rge_le (Rmax (- (delta / 2)) ((a - c) / 2)) 0 Hge); intro; elim (Rlt_irrefl 0 (Rle_lt_trans 0 (Rmax (- (delta / 2)) ((a - c) / 2)) 0 H15 H14)).",
                        "VernacExtend",
                        "f0fd35a2491e59a0c8481a1865d90b3ba6091d20"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0; rewrite <- (Ropp_involutive ((a - c) / 2)); apply Ropp_lt_gt_contravar; replace (- ((a - c) / 2)) with ((c - a) / 2).",
                        "VernacExtend",
                        "9ee1abb063693abe70eee5296e683210dd261867"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_mult_distr_l_reverse.",
                        "VernacExtend",
                        "e7c61948f76e0a8897e51bfab935c33e66508906"
                    ]
                },
                {
                    "command": [
                        "rewrite (Ropp_minus_distr a c).",
                        "VernacExtend",
                        "e9b7f830a2a58889b933ce25077a41530812f807"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | assert (Hyp : 0 < 2); [ prove_sup0 | apply (Rinv_0_lt_compat 2 Hyp) ] ].",
                        "VernacExtend",
                        "7fb8d366da910ebd2484499415fabf50fdfdbf13"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H11 in H10; elim (Rlt_irrefl 0 H10).",
                        "VernacExtend",
                        "8308c93c040fd6dba6e345d2ab8d095fef74be75"
                    ]
                },
                {
                    "command": [
                        "cut ((a - c) / 2 < 0).",
                        "VernacExtend",
                        "d9354372252ef0d759624e758d3e6868b731e6da"
                    ]
                },
                {
                    "command": [
                        "intro; cut (- (delta / 2) < 0).",
                        "VernacExtend",
                        "ea691c2aa3f4c9724ec9d6fc690e7f6c17ec3b45"
                    ]
                },
                {
                    "command": [
                        "intro; apply (Rmax_stable_in_negreal (mknegreal (- (delta / 2)) H11) (mknegreal ((a - c) / 2) H10)).",
                        "VernacExtend",
                        "843aa1569c8f1a642cb527b13dfdcb47d97d7a1c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | assert (Hyp : 0 < 2); [ prove_sup0 | apply (Rinv_0_lt_compat 2 Hyp) ] ].",
                        "VernacExtend",
                        "7fb8d366da910ebd2484499415fabf50fdfdbf13"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0; rewrite <- (Ropp_involutive ((a - c) / 2)); apply Ropp_lt_gt_contravar; replace (- ((a - c) / 2)) with ((c - a) / 2).",
                        "VernacExtend",
                        "9ee1abb063693abe70eee5296e683210dd261867"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_mult_distr_l_reverse.",
                        "VernacExtend",
                        "e7c61948f76e0a8897e51bfab935c33e66508906"
                    ]
                },
                {
                    "command": [
                        "rewrite (Ropp_minus_distr a c).",
                        "VernacExtend",
                        "e9b7f830a2a58889b933ce25077a41530812f807"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ generalize (Rplus_lt_compat_r (- a) a c H); rewrite Rplus_opp_r; intro; assumption | assert (Hyp : 0 < 2); [ prove_sup0 | apply (Rinv_0_lt_compat 2 Hyp) ] ].",
                        "VernacExtend",
                        "6bd2ca91dd00fc99f0f6ed7c0bff312de172aeb2"
                    ]
                },
                {
                    "command": [
                        "replace (- (l / 2)) with (- l / 2).",
                        "VernacExtend",
                        "cc4e79b4d00542850d85b246e87f7a5e316b8872"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7122edbd68559f255bfed03dc640472ed14eb4ef"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
                        "VernacExtend",
                        "4ce8e866b38a86eeaa291d3f36269de10621fe4f"
                    ]
                },
                {
                    "command": [
                        "assert (Hyp : 0 < 2); [ prove_sup0 | apply (Rinv_0_lt_compat 2 Hyp) ].",
                        "VernacExtend",
                        "f410ff860a5062fbd5fed15971cf944ae494af95"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Ropp_mult_distr_l_reverse.",
                        "VernacExtend",
                        "ff882b46e678c061b278b53af8cd983e85ab819d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "deriv_minimum",
            "line_nb": 867,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (derive_pt f c pr)).",
                        "VernacExtend",
                        "d4cfa461c3dbe0236aa8219aeeaa621237e652a8"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_eq_0_compat.",
                        "VernacExtend",
                        "26da1541d7252cef7db26f46fbcdebdbd617517f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (derive_pt_opp f c pr).",
                        "VernacExtend",
                        "638551ec3922d474d0e2159dc4f9c3fc32ee7d01"
                    ]
                },
                {
                    "command": [
                        "cut (forall x:R, a < x -> x < b -> (- f)%F x <= (- f)%F c).",
                        "VernacExtend",
                        "9c85308e09aff02eafbd1c311fda0c25097ad3d2"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "apply (deriv_maximum (- f)%F a b c (derivable_pt_opp _ _ pr) H H0 H2).",
                        "VernacExtend",
                        "c26713ea4361516df12dbd9437922fb9bc299115"
                    ]
                },
                {
                    "command": [
                        "intros; unfold opp_fct; apply Ropp_ge_le_contravar; apply Rle_ge.",
                        "VernacExtend",
                        "8d59d085f14d20d9d041e3e1ddcdb033a3cb712a"
                    ]
                },
                {
                    "command": [
                        "apply (H1 x H2 H3).",
                        "VernacExtend",
                        "907758b6d780846fdb61bd62717579cb08dbcf3d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "deriv_constant2",
            "line_nb": 878,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "eapply deriv_maximum with a b; try assumption.",
                        "VernacExtend",
                        "f90f031cb7ca8e34e3ca8e525784c25f5280f793"
                    ]
                },
                {
                    "command": [
                        "intros; right; apply (H1 x H2 H3).",
                        "VernacExtend",
                        "7b911771623f42d3d91dd10e7c60c4b0f8458fbf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "nonneg_derivative_0",
            "line_nb": 883,
            "steps": [
                {
                    "command": [
                        "intros; unfold increasing in H.",
                        "VernacExtend",
                        "59a769ac742ac3835ed6b4e4cc929f370c127cea"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := derivable_derive f x (pr x)).",
                        "VernacExtend",
                        "3c6c9bef4b33a66fa92aba273f72650d7700921c"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros l H1.",
                        "VernacExtend",
                        "37bf896cb9a879ad2c7bd4216da9003167fcae37"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; case (Rtotal_order 0 l); intro.",
                        "VernacExtend",
                        "cfc6700157784ef8c7609935f3d6f9474f370ff3"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "elim H2; intro.",
                        "VernacExtend",
                        "939c927788b9492b13127156d1f300437fdf7754"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := derive_pt_eq_1 f x l (pr x) H1).",
                        "VernacExtend",
                        "66962c214886d10c3af0676f40beea17f67747e4"
                    ]
                },
                {
                    "command": [
                        "cut (0 < - (l / 2)).",
                        "VernacExtend",
                        "5f1a79d281923393bf954a07bca76c0b9a72a8e3"
                    ]
                },
                {
                    "command": [
                        "intro; elim (H4 (- (l / 2)) H5); intros delta H6.",
                        "VernacExtend",
                        "43ca7ebaeb462a315621bafefdc616d84ccce204"
                    ]
                },
                {
                    "command": [
                        "cut (delta / 2 <> 0 /\\ 0 < delta / 2 /\\ Rabs (delta / 2) < delta).",
                        "VernacExtend",
                        "dc93e8ebbf1c15c9c92f9804c42c4c6d991388a3"
                    ]
                },
                {
                    "command": [
                        "intro; decompose [and] H7; intros; generalize (H6 (delta / 2) H8 H11); cut (0 <= (f (x + delta / 2) - f x) / (delta / 2)).",
                        "VernacExtend",
                        "3060acbdc0d5632051481105aee25fc6a1aec4df"
                    ]
                },
                {
                    "command": [
                        "intro; cut (0 <= (f (x + delta / 2) - f x) / (delta / 2) - l).",
                        "VernacExtend",
                        "c85992549ed45d6e9cad260e32cdab6f92bad516"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Rabs; case (Rcase_abs ((f (x + delta / 2) - f x) / (delta / 2) - l)) as [Hlt|Hge].",
                        "VernacExtend",
                        "584328107c55fcb026a415b908b1e87625572c9c"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl 0 (Rle_lt_trans 0 ((f (x + delta / 2) - f x) / (delta / 2) - l) 0 H12 Hlt)).",
                        "VernacExtend",
                        "3b702e213ce5d269373551c909fc53c9843ec4ac"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (Rplus_lt_compat_r l ((f (x + delta / 2) - f x) / (delta / 2) - l) (- (l / 2)) H13); unfold Rminus; replace (- (l / 2) + l) with (l / 2).",
                        "VernacExtend",
                        "8df0c1710ce078569f161b0e630ab0dbc6736cf8"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc; rewrite Rplus_opp_l; rewrite Rplus_0_r; intro; generalize (Rle_lt_trans 0 ((f (x + delta / 2) - f x) / (delta / 2)) (l / 2) H9 H14); intro; cut (l / 2 < 0).",
                        "VernacExtend",
                        "4babe3f5c92fb671fbc810bc4cf83c8c3b6c7c1d"
                    ]
                },
                {
                    "command": [
                        "intro; elim (Rlt_irrefl 0 (Rlt_trans 0 (l / 2) 0 H15 H16)).",
                        "VernacExtend",
                        "940353f0c8dda84c27639ea1f4a3aa0ed43f3bae"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_0 in H5; generalize (Ropp_lt_gt_contravar (-0) (- (l / 2)) H5); repeat rewrite Ropp_involutive; intro; assumption.",
                        "VernacExtend",
                        "bd430cba93349fd080cc3631f6bfb2296d291f6c"
                    ]
                },
                {
                    "command": [
                        "pattern l at 3; rewrite double_var.",
                        "VernacExtend",
                        "d25254082c5ffe1044ba1bed05f1a15d645f0aa5"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_le_le_0_compat.",
                        "VernacExtend",
                        "a303364a66b7ba53d740436c4e4cfccc9cdcdaad"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_le_pos.",
                        "VernacExtend",
                        "9295075fac998a2bbf6d97082250072803a082bc"
                    ]
                },
                {
                    "command": [
                        "cut (x <= x + delta * / 2).",
                        "VernacExtend",
                        "19afe99b4dd833c0689a099556ed3668dd2b0bbf"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (H x (x + delta * / 2) H12); intro; generalize (Rplus_le_compat_l (- f x) (f x) (f (x + delta * / 2)) H13); rewrite Rplus_opp_l; rewrite Rplus_comm; intro; assumption.",
                        "VernacExtend",
                        "a3a38dad05cae357ece83bae2b4b3804841e88ea"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1; rewrite <- (Rplus_0_r x); apply Rplus_le_compat_l; left; assumption.",
                        "VernacExtend",
                        "65711c3487505b5e7b1ee2746f7a5504ceb933c0"
                    ]
                },
                {
                    "command": [
                        "left; apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "2e3d876dd359094724551bd2f774f9c4a6bc3f60"
                    ]
                },
                {
                    "command": [
                        "left; rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; assumption.",
                        "VernacExtend",
                        "852e5654073876c3ded1ea475e59cfa4fa8b255f"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_le_pos.",
                        "VernacExtend",
                        "9295075fac998a2bbf6d97082250072803a082bc"
                    ]
                },
                {
                    "command": [
                        "cut (x <= x + delta * / 2).",
                        "VernacExtend",
                        "19afe99b4dd833c0689a099556ed3668dd2b0bbf"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (H x (x + delta * / 2) H9); intro; generalize (Rplus_le_compat_l (- f x) (f x) (f (x + delta * / 2)) H12); rewrite Rplus_opp_l; rewrite Rplus_comm; intro; assumption.",
                        "VernacExtend",
                        "f0499cd8fd996853e0840348f44afe1bc255fdc1"
                    ]
                },
                {
                    "command": [
                        "pattern x at 1; rewrite <- (Rplus_0_r x); apply Rplus_le_compat_l; left; assumption.",
                        "VernacExtend",
                        "65711c3487505b5e7b1ee2746f7a5504ceb933c0"
                    ]
                },
                {
                    "command": [
                        "left; apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "2e3d876dd359094724551bd2f774f9c4a6bc3f60"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply prod_neq_R0.",
                        "VernacExtend",
                        "bae86043f3acfd4aeb1f77f1138e1172ace3c7fa"
                    ]
                },
                {
                    "command": [
                        "generalize (cond_pos delta); intro; red; intro H9; rewrite H9 in H7; elim (Rlt_irrefl 0 H7).",
                        "VernacExtend",
                        "e8c3bfe5636326ac2c2c0e51d76ffab8c27b761c"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; discrR.",
                        "VernacExtend",
                        "c996ce35ba9924ff499f316d0fb3eaf573a9e988"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "890260abc6df9bffcdd1734d1136fd85613241e8"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (delta / 2)) with (delta / 2).",
                        "VernacExtend",
                        "449c20af558c63311a40e632a7fce2889583b845"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "f4c0b06c2efd971a65fcd955cb283b1e333171b1"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm 2).",
                        "VernacExtend",
                        "fa06fc35a43a455b406d76e181d26b3606a0680c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ].",
                        "VernacExtend",
                        "4578ae178cd451c29991181c9039fccaadaa7a0a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r.",
                        "VernacExtend",
                        "d41d18f77f80ae8595148d0386b68549f3d406cf"
                    ]
                },
                {
                    "command": [
                        "rewrite double.",
                        "VernacExtend",
                        "bf3d788cec3d878eab6cdc9ff253b77596bd7876"
                    ]
                },
                {
                    "command": [
                        "pattern (pos delta) at 1; rewrite <- Rplus_0_r.",
                        "VernacExtend",
                        "8bc9bf63a3ced569dea47acb51153c4c18e8e7b1"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l; apply (cond_pos delta).",
                        "VernacExtend",
                        "def4b5e6c5dd34c187b066aeaf8c3c36e8489fa0"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right.",
                        "VernacExtend",
                        "35e08d5b9b235ad55baa5e8e8a7b81c9cb6b73e6"
                    ]
                },
                {
                    "command": [
                        "left; change (0 < delta / 2); unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos delta) | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "91fccbcd323094829301be2f0ca2a938c3d6217e"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite <- Ropp_mult_distr_l_reverse; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "58bf381a3af6832966c06a155795205f75f800b5"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with l.",
                        "VernacExtend",
                        "59f76e8e454b396a55b0ece9ce2063364048b9a2"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_opp_r; rewrite Rplus_0_r; assumption.",
                        "VernacExtend",
                        "7beceacec59a5ebe8c40b58501ffa59e1f2eaad4"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup0.",
                        "VernacExtend",
                        "ee74bd033c1031a79ef440e1d41037d5c9648214"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}