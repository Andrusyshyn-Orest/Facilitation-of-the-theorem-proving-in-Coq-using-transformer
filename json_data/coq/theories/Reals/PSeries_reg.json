{
    "filename": "theories/Reals/PSeries_reg.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import SeqSeries.",
            "VernacRequire",
            "379ec54d32465fe6d151cce8474fb7ff733028bb"
        ],
        [
            "Require Import Ranalysis1.",
            "VernacRequire",
            "b7df6cdb101f6571d1192419ca4168ab43a628dd"
        ],
        [
            "Require Import MVT.",
            "VernacRequire",
            "73bac10bab2a56b9f15ce01267ed6660a5edd073"
        ],
        [
            "Require Import Max.",
            "VernacRequire",
            "163f8b04f9c5ff0ff8fe9ce4c762873ab613a3fa"
        ],
        [
            "Require Import Even.",
            "VernacRequire",
            "69da947c62598dadd17a168638c6bce04a4d0bdf"
        ],
        [
            "Require Import Lra.",
            "VernacRequire",
            "6dd90563c90485cd5a8a8b957af14c96d3b4cbc1"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Definition Boule (x:R) (r:posreal) (y:R) : Prop := Rabs (y - x) < r.",
            "VernacDefinition",
            "f73fba972f1e7991a35cc5ecdc48e5aab444cff1"
        ],
        [
            "Lemma Boule_convex : forall c d x y z, Boule c d x -> Boule c d y -> x <= z <= y -> Boule c d z.",
            "VernacStartTheoremProof",
            "6b2ffa3b9a4662aa38235578d47d7eebb9f38af8"
        ],
        [
            "intros c d x y z bx b_y intz.",
            "VernacExtend",
            "196602ae0f9f5ef7a7b4941e204b7a8a96399edc"
        ],
        [
            "unfold Boule in bx, b_y; apply Rabs_def2 in bx; apply Rabs_def2 in b_y; apply Rabs_def1; [apply Rle_lt_trans with (y - c);[apply Rplus_le_compat_r|]| apply Rlt_le_trans with (x - c);[|apply Rplus_le_compat_r]];tauto.",
            "VernacExtend",
            "416fc80240fa715779234dd51f4c051b3afcc22c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition boule_of_interval x y (h : x < y) : {c :R & {r : posreal | c - r = x /\\ c + r = y}}.",
            "VernacDefinition",
            "be440206db00415b6ac1fe6b23c44b6fd1dacd0a"
        ],
        [
            "exists ((x + y)/2).",
            "VernacExtend",
            "199fd18289465bc125b35e29ebedb3631ad9cb46"
        ],
        [
            "assert (radius : 0 < (y - x)/2).",
            "VernacExtend",
            "2bf4eb5d8b622d8ddbbb5ecef490800e7a412c60"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7122edbd68559f255bfed03dc640472ed14eb4ef"
        ],
        [
            "apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
        ],
        [
            "now apply Rinv_0_lt_compat, Rlt_0_2.",
            "VernacExtend",
            "5df8e7bd0a76486880a9b90cf206d4ce4bf31bef"
        ],
        [
            "exists (mkposreal _ radius).",
            "VernacExtend",
            "55468f166be6c828f771e10c010c432221061c34"
        ],
        [
            "simpl; split; unfold Rdiv; field.",
            "VernacExtend",
            "ff028d6099a4a6d2ec5103b3761e73416bc6cf30"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition boule_in_interval x y z (h : x < z < y) : {c : R & {r | Boule c r z /\\ x < c - r /\\ c + r < y}}.",
            "VernacDefinition",
            "74e126ddfe21317f1c0212bd78a498c9397aaf9e"
        ],
        [
            "assert (cmp : x * /2 + z * /2 < z * /2 + y * /2).",
            "VernacExtend",
            "4bee8e7fec1315ffbb51ea27712cc761e76b66e3"
        ],
        [
            "destruct h as [h1 h2].",
            "VernacExtend",
            "2cb07a10abb28ef408f7365f7181eeaac7c1c4a4"
        ],
        [
            "rewrite Rplus_comm; apply Rplus_lt_compat_l, Rmult_lt_compat_r.",
            "VernacExtend",
            "d29ac2e5be58b7a1ac3d20a5ae7f6055dc98d8ae"
        ],
        [
            "apply Rinv_0_lt_compat, Rlt_0_2.",
            "VernacExtend",
            "3abccb6f76a72b816de9995e74c7f953b6cff456"
        ],
        [
            "apply Rlt_trans with z; assumption.",
            "VernacExtend",
            "df1772ec8a7b0e615c6df252c51cf3c8c039f50d"
        ],
        [
            "destruct (boule_of_interval _ _ cmp) as [c [r [P1 P2]]].",
            "VernacExtend",
            "fb568ec4972df2fa0798d0c9fbfb77f1614cdcd2"
        ],
        [
            "assert (0 < /2) by (apply Rinv_0_lt_compat, Rlt_0_2).",
            "VernacExtend",
            "fce8bf6be09f6f72433888e65c43cfa4ae52fd9e"
        ],
        [
            "exists c, r; split.",
            "VernacExtend",
            "19a841a4b22c702430d429e3b9a4de22745ab3be"
        ],
        [
            "destruct h; unfold Boule; simpl; apply Rabs_def1.",
            "VernacExtend",
            "a866ed4657d5e6af486397a66eeb54b1b8d89780"
        ],
        [
            "apply Rplus_lt_reg_l with c; rewrite P2; replace (c + (z - c)) with (z * / 2 + z * / 2) by field.",
            "VernacExtend",
            "bbf04932a96e7e332f6e0bbd0276e66032b9be75"
        ],
        [
            "apply Rplus_lt_compat_l, Rmult_lt_compat_r;assumption.",
            "VernacExtend",
            "691c3ac8c4b5e0dd1d0fd79b45ce274522b9872f"
        ],
        [
            "apply Rplus_lt_reg_l with c; change (c + - r) with (c - r); rewrite P1; replace (c + (z - c)) with (z * / 2 + z * / 2) by field.",
            "VernacExtend",
            "b3ccc91a7a1e6d11f212a100614c3d0ee6e473a6"
        ],
        [
            "apply Rplus_lt_compat_r, Rmult_lt_compat_r;assumption.",
            "VernacExtend",
            "2ec582cb7d9183c6dc38e6fcab52ca54349d910e"
        ],
        [
            "destruct h; split.",
            "VernacExtend",
            "f6e883a21be43e567cd4d91f5de1b04b4791639f"
        ],
        [
            "replace x with (x * / 2 + x * / 2) by field; rewrite P1.",
            "VernacExtend",
            "17ecac505f77a47f58650a0f89444e1049fab746"
        ],
        [
            "apply Rplus_lt_compat_l, Rmult_lt_compat_r;assumption.",
            "VernacExtend",
            "691c3ac8c4b5e0dd1d0fd79b45ce274522b9872f"
        ],
        [
            "replace y with (y * / 2 + y * /2) by field; rewrite P2.",
            "VernacExtend",
            "2ce57a85fdcdb29809ddbde3f901af8cf5a08172"
        ],
        [
            "apply Rplus_lt_compat_r, Rmult_lt_compat_r;assumption.",
            "VernacExtend",
            "2ec582cb7d9183c6dc38e6fcab52ca54349d910e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Ball_in_inter : forall c1 c2 r1 r2 x, Boule c1 r1 x -> Boule c2 r2 x -> {r3 : posreal | forall y, Boule x r3 y -> Boule c1 r1 y /\\ Boule c2 r2 y}.",
            "VernacStartTheoremProof",
            "c8f161f7e2fff3b824236e867f3d33fdcda19d10"
        ],
        [
            "intros c1 c2 [r1 r1p] [r2 r2p] x; unfold Boule; simpl; intros in1 in2.",
            "VernacExtend",
            "df9643cae7fd218c01373bd843f3dbf152da9508"
        ],
        [
            "assert (Rmax (c1 - r1)(c2 - r2) < x).",
            "VernacExtend",
            "ac5302d09163024273f93ce952580add1d78a399"
        ],
        [
            "apply Rmax_lub_lt;[revert in1 | revert in2]; intros h; apply Rabs_def2 in h; destruct h as [_ u]; apply (fun h => Rplus_lt_reg_r _ _ _ (Rle_lt_trans _ _ _ h u)), Req_le; ring.",
            "VernacExtend",
            "f7813c2a7966b451349e0eb1b6ad9fa81638606e"
        ],
        [
            "assert (x < Rmin (c1 + r1) (c2 + r2)).",
            "VernacExtend",
            "4aadfe91d94ed6313f08c815cffe97f02b765b31"
        ],
        [
            "apply Rmin_glb_lt;[revert in1 | revert in2]; intros h; apply Rabs_def2 in h; destruct h as [u _]; apply (fun h => Rplus_lt_reg_r _ _ _ (Rlt_le_trans _ _ _ u h)), Req_le; ring.",
            "VernacExtend",
            "b4be6f55c0f69e1161859008bd532877a221983d"
        ],
        [
            "assert (t: 0 < Rmin (x - Rmax (c1 - r1) (c2 - r2)) (Rmin (c1 + r1) (c2 + r2) - x)).",
            "VernacExtend",
            "12076225f205755b54090cfd5c5853efe712b08b"
        ],
        [
            "apply Rmin_glb_lt; apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "6cd0b6fd064d1c93b160e880393d702fb1725764"
        ],
        [
            "exists (mkposreal _ t).",
            "VernacExtend",
            "0485d4df9a9bda0788124070109497cfb5c41fca"
        ],
        [
            "apply Rabs_def2 in in1; destruct in1.",
            "VernacExtend",
            "951b47a6c3eb06b12ce05f48b8608ea45b18dbd2"
        ],
        [
            "apply Rabs_def2 in in2; destruct in2.",
            "VernacExtend",
            "90603f466910d7226f80303c45424fed95be26e5"
        ],
        [
            "assert (c1 - r1 <= Rmax (c1 - r1) (c2 - r2)) by apply Rmax_l.",
            "VernacExtend",
            "12c06a0508c5a0cc04f3ac9558f6799ed8f43f62"
        ],
        [
            "assert (c2 - r2 <= Rmax (c1 - r1) (c2 - r2)) by apply Rmax_r.",
            "VernacExtend",
            "a420dea2fc013ee706e0f95b3f74cfcae23e2945"
        ],
        [
            "assert (Rmin (c1 + r1) (c2 + r2) <= c1 + r1) by apply Rmin_l.",
            "VernacExtend",
            "2449aa2a51c77700a6428aea48ccd6b56a252ce4"
        ],
        [
            "assert (Rmin (c1 + r1) (c2 + r2) <= c2 + r2) by apply Rmin_r.",
            "VernacExtend",
            "d5c07aba09f8ec3d0ca213be7f0cbf718a6a810a"
        ],
        [
            "assert (Rmin (x - Rmax (c1 - r1) (c2 - r2)) (Rmin (c1 + r1) (c2 + r2) - x) <= x - Rmax (c1 - r1) (c2 - r2)) by apply Rmin_l.",
            "VernacExtend",
            "f6e681f35d1b34776a738364014d9a474f1d4c76"
        ],
        [
            "assert (Rmin (x - Rmax (c1 - r1) (c2 - r2)) (Rmin (c1 + r1) (c2 + r2) - x) <= Rmin (c1 + r1) (c2 + r2) - x) by apply Rmin_r.",
            "VernacExtend",
            "cba18f83bc9db139666e8530c84894d75f27ec59"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "intros y h; apply Rabs_def2 in h; destruct h as [h h'].",
            "VernacExtend",
            "169e97f4d091b6e3a91dfabf1c0359cf1bc4c65a"
        ],
        [
            "apply Rmin_Rgt in h; destruct h as [cmp1 cmp2].",
            "VernacExtend",
            "084a45b53baadf9036e4f14e95fbb56cf7786690"
        ],
        [
            "apply Rplus_lt_reg_r in cmp2; apply Rmin_Rgt in cmp2.",
            "VernacExtend",
            "a8181da8914313adcde04e7458f7d4d096a97b9b"
        ],
        [
            "rewrite Ropp_Rmin, Ropp_minus_distr in h'.",
            "VernacExtend",
            "438b79dbfff1b48e109418b7c462d43b3a696a8f"
        ],
        [
            "apply Rmax_Rlt in h'; destruct h' as [cmp3 cmp4]; apply Rplus_lt_reg_r in cmp3; apply Rmax_Rlt in cmp3; split; apply Rabs_def1.",
            "VernacExtend",
            "6fa3ed49a020b66c8a13a93299da25fd2aea6c34"
        ],
        [
            "apply (fun h => Rplus_lt_reg_l _ _ _ (Rle_lt_trans _ _ _ h (proj1 cmp2))), Req_le; ring.",
            "VernacExtend",
            "3a201c0ad8ac935e54f3a6ff64c32dfe32a1835a"
        ],
        [
            "apply (fun h => Rplus_lt_reg_l _ _ _ (Rlt_le_trans _ _ _ (proj1 cmp3) h)), Req_le; ring.",
            "VernacExtend",
            "ba3f49e851a9eac0d2d2af781ee879c364900e6f"
        ],
        [
            "apply (fun h => Rplus_lt_reg_l _ _ _ (Rle_lt_trans _ _ _ h (proj2 cmp2))), Req_le; ring.",
            "VernacExtend",
            "118e6c206e59f35e50936a096bfed23cde08cb83"
        ],
        [
            "apply (fun h => Rplus_lt_reg_l _ _ _ (Rlt_le_trans _ _ _ (proj2 cmp3) h)), Req_le; ring.",
            "VernacExtend",
            "641378651f427fd83a33fb57176efaefb0aad7f1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Boule_center : forall x r, Boule x r x.",
            "VernacStartTheoremProof",
            "08b3a2e943955800f2d33c7c872326659214f435"
        ],
        [
            "intros x [r rpos]; unfold Boule, Rminus; simpl; rewrite Rplus_opp_r.",
            "VernacExtend",
            "295a202fc2da828bf0d2a1a8c146d24aa54a00ea"
        ],
        [
            "rewrite Rabs_pos_eq;[assumption | apply Rle_refl].",
            "VernacExtend",
            "e5546c32b3eaa138ea2e0252047f0b48d61eda13"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition CVU (fn:nat -> R -> R) (f:R -> R) (x:R) (r:posreal) : Prop := forall eps:R, 0 < eps -> exists N : nat, (forall (n:nat) (y:R), (N <= n)%nat -> Boule x r y -> Rabs (f y - fn n y) < eps).",
            "VernacDefinition",
            "116e527e0e11e0be81e77c14df98e9d2cc0d447e"
        ],
        [
            "Definition CVN_r (fn:nat -> R -> R) (r:posreal) : Type := { An:nat -> R & { l:R | Un_cv (fun n:nat => sum_f_R0 (fun k:nat => Rabs (An k)) n) l /\\ (forall (n:nat) (y:R), Boule 0 r y -> Rabs (fn n y) <= An n) } }.",
            "VernacDefinition",
            "2fe2cf5a7f5a0a322bb32e6c51709fb6e068ad52"
        ],
        [
            "Definition CVN_R (fn:nat -> R -> R) : Type := forall r:posreal, CVN_r fn r.",
            "VernacDefinition",
            "f7ac46f274a3cba7b965aaedb1e4bf05adcb8ecf"
        ],
        [
            "Definition SFL (fn:nat -> R -> R) (cv:forall x:R, { l:R | Un_cv (fun N:nat => SP fn N x) l }) (y:R) : R := let (a,_) := cv y in a.",
            "VernacDefinition",
            "e51112db52c56c5a345cfd1fb9cb75ee17744936"
        ],
        [
            "Lemma CVN_CVU : forall (fn:nat -> R -> R) (cv:forall x:R, {l:R | Un_cv (fun N:nat => SP fn N x) l }) (r:posreal), CVN_r fn r -> CVU (fun n:nat => SP fn n) (SFL fn cv) 0 r.",
            "VernacStartTheoremProof",
            "9df1c2f6de5f705f054fed0639f12a3b9b8ba9ab"
        ],
        [
            "intros; unfold CVU; intros.",
            "VernacExtend",
            "005d543581889f8bdb077d4357d7ac5d1c297f1e"
        ],
        [
            "unfold CVN_r in X.",
            "VernacExtend",
            "586fd91a44318004b2e3f92aa3a37a0b783f2a31"
        ],
        [
            "elim X; intros An X0.",
            "VernacExtend",
            "e662af7657feb7758579a9809b8b34544ffd93e6"
        ],
        [
            "elim X0; intros s H0.",
            "VernacExtend",
            "6a9caac90d2e229641daac56db80780b28a597ab"
        ],
        [
            "elim H0; intros.",
            "VernacExtend",
            "6b83f392a470a8cdaa118e532bc445a009dec854"
        ],
        [
            "cut (Un_cv (fun n:nat => sum_f_R0 (fun k:nat => Rabs (An k)) n - s) 0).",
            "VernacExtend",
            "96ebc1180ee1e01e0d62224613430cf17150bf95"
        ],
        [
            "intro; unfold Un_cv in H3.",
            "VernacExtend",
            "f2f10908dd5a2d93cc01ac8e90d6c1b5e55e5382"
        ],
        [
            "elim (H3 eps H); intros N0 H4.",
            "VernacExtend",
            "1a1ae84064cc0cd4a16813b9aeeb8fabf52766b1"
        ],
        [
            "exists N0; intros.",
            "VernacExtend",
            "e5b9decd3fd5f06277bf4eeacb6fae2a2f851d31"
        ],
        [
            "apply Rle_lt_trans with (Rabs (sum_f_R0 (fun k:nat => Rabs (An k)) n - s)).",
            "VernacExtend",
            "013780ac2f4210977935bb226df5e1c3f94d88ab"
        ],
        [
            "rewrite <- (Rabs_Ropp (sum_f_R0 (fun k:nat => Rabs (An k)) n - s)); rewrite Ropp_minus_distr'; rewrite (Rabs_right (s - sum_f_R0 (fun k:nat => Rabs (An k)) n)).",
            "VernacExtend",
            "eab0496167c158a6e8dbf3e36fab63831856aada"
        ],
        [
            "eapply sum_maj1.",
            "VernacExtend",
            "2fda2922d4fe3b5269575122e84931f9e0a3b107"
        ],
        [
            "unfold SFL; case (cv y); intro.",
            "VernacExtend",
            "0595ec7905b24c08079f91796729048b853e11e4"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "intro; elim H0; intros.",
            "VernacExtend",
            "374db79e6482fec65548ecf30bf5c4735e72248c"
        ],
        [
            "rewrite (Rabs_right (An n0)).",
            "VernacExtend",
            "aba7af33be5927d1ae67ac1d6cdbaa27a4fd3f48"
        ],
        [
            "apply H8; apply H6.",
            "VernacExtend",
            "b76eb8edc85dbf00c149c175e2e41b8d3432057b"
        ],
        [
            "apply Rle_ge; apply Rle_trans with (Rabs (fn n0 y)).",
            "VernacExtend",
            "7f34cf4102ca4852297baac5730c470c8e5322fe"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply H8; apply H6.",
            "VernacExtend",
            "b76eb8edc85dbf00c149c175e2e41b8d3432057b"
        ],
        [
            "apply Rle_ge; apply Rplus_le_reg_l with (sum_f_R0 (fun k:nat => Rabs (An k)) n).",
            "VernacExtend",
            "26379be19139ed513005d58c61a9abacb54b1b2b"
        ],
        [
            "rewrite Rplus_0_r; unfold Rminus; rewrite (Rplus_comm s); rewrite <- Rplus_assoc; rewrite Rplus_opp_r; rewrite Rplus_0_l; apply sum_incr.",
            "VernacExtend",
            "3dc761729cfd8f1818388ae226097046a1b4cddc"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "intro; apply Rabs_pos.",
            "VernacExtend",
            "c22a03ac2101c9e1f8bb586345faaee764de726c"
        ],
        [
            "unfold R_dist in H4; unfold Rminus in H4; rewrite Ropp_0 in H4.",
            "VernacExtend",
            "c054a66b0e73e8a5b663aba4f0bb7140a5aae1c6"
        ],
        [
            "assert (H7 := H4 n H5).",
            "VernacExtend",
            "d16d08155001a83ae8a864bd5dd82982481bef6f"
        ],
        [
            "rewrite Rplus_0_r in H7; apply H7.",
            "VernacExtend",
            "06fa04c1991ce7b9a919f1ab27a15e1375a6b900"
        ],
        [
            "unfold Un_cv in H1; unfold Un_cv; intros.",
            "VernacExtend",
            "2589728012db7b1337e6ba78a57b750f2841429d"
        ],
        [
            "elim (H1 _ H3); intros.",
            "VernacExtend",
            "c9372bd0a3017fa9613d1e3ee7df742c8ac62dca"
        ],
        [
            "exists x; intros.",
            "VernacExtend",
            "630f24a2d635df94b063a62023a90567ef134b19"
        ],
        [
            "unfold R_dist; unfold R_dist in H4.",
            "VernacExtend",
            "5ab0db6c67500d6e1b1e6ed3ce5015b19d016576"
        ],
        [
            "rewrite Rminus_0_r; apply H4; assumption.",
            "VernacExtend",
            "143709351d2b10a1ea715adda69cf2a2406aae8a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CVU_continuity : forall (fn:nat -> R -> R) (f:R -> R) (x:R) (r:posreal), CVU fn f x r -> (forall (n:nat) (y:R), Boule x r y -> continuity_pt (fn n) y) -> forall y:R, Boule x r y -> continuity_pt f y.",
            "VernacStartTheoremProof",
            "1247917ed1a37d3c750f122d1143f764c4bb62b7"
        ],
        [
            "intros; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros.",
            "VernacExtend",
            "2a872ff6d81bcc988b1e5378650e2389752b7396"
        ],
        [
            "unfold CVU in H.",
            "VernacExtend",
            "e9e488088032a2c916a3371411ddb1756f7be19c"
        ],
        [
            "cut (0 < eps / 3); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
            "VernacExtend",
            "312bf6b7dc28d2d480ba78632e5e5b4d2e3c2235"
        ],
        [
            "elim (H _ H3); intros N0 H4.",
            "VernacExtend",
            "f8e3f53984ddda4467631fc8c3d8d3b844e8b8f6"
        ],
        [
            "assert (H5 := H0 N0 y H1).",
            "VernacExtend",
            "c50f0a70ee14d8308693f3dccd4aac3b7dbd6f80"
        ],
        [
            "cut (exists del : posreal, (forall h:R, Rabs h < del -> Boule x r (y + h))).",
            "VernacExtend",
            "5e4612e73e1482f56dd16ee68380054dc75682b3"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim H6; intros del1 H7.",
            "VernacExtend",
            "e40c390a25483fc22be9d0b074900a455ea57181"
        ],
        [
            "unfold continuity_pt in H5; unfold continue_in in H5; unfold limit1_in in H5; unfold limit_in in H5; simpl in H5; unfold R_dist in H5.",
            "VernacExtend",
            "c060dc7ae17c453beb452502480df99249219987"
        ],
        [
            "elim (H5 _ H3); intros del2 H8.",
            "VernacExtend",
            "09b370a32445e52de1632b156066ca3ace90f65f"
        ],
        [
            "set (del := Rmin del1 del2).",
            "VernacExtend",
            "f13986be7a13bcd30f1f6f4f3e03e1cb2a89a488"
        ],
        [
            "exists del; intros.",
            "VernacExtend",
            "960e294536a0fd870669b0ce0582074331ea58a5"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold del; unfold Rmin; case (Rle_dec del1 del2); intro.",
            "VernacExtend",
            "0c523b6d64596ce205f3b39b7283ec1024880b2a"
        ],
        [
            "apply (cond_pos del1).",
            "VernacExtend",
            "f21d5a1f3d89787a1bde51b4be0e63b7d67ba1c5"
        ],
        [
            "elim H8; intros; assumption.",
            "VernacExtend",
            "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
        ],
        [
            "intros; apply Rle_lt_trans with (Rabs (f x0 - fn N0 x0) + Rabs (fn N0 x0 - f y)).",
            "VernacExtend",
            "41dd50d97fc9bb1ad9e2764c5f12d5e2617f18bd"
        ],
        [
            "replace (f x0 - f y) with (f x0 - fn N0 x0 + (fn N0 x0 - f y)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "b09d1f575755c3263a277c261468f0354e817598"
        ],
        [
            "apply Rle_lt_trans with (Rabs (f x0 - fn N0 x0) + Rabs (fn N0 x0 - fn N0 y) + Rabs (fn N0 y - f y)).",
            "VernacExtend",
            "884d3d4986d29ca41dcc1113210768fd5a0b35ca"
        ],
        [
            "rewrite Rplus_assoc; apply Rplus_le_compat_l.",
            "VernacExtend",
            "acf8e5b51c9d2f8867cbf11b3788dea7e7c86e41"
        ],
        [
            "replace (fn N0 x0 - f y) with (fn N0 x0 - fn N0 y + (fn N0 y - f y)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "1a249025c8980fe511ce31f8bb561d4fb4f23fdf"
        ],
        [
            "replace eps with (eps / 3 + eps / 3 + eps / 3).",
            "VernacExtend",
            "6797ce7dc3530593281c08e040087e79daac0049"
        ],
        [
            "repeat apply Rplus_lt_compat.",
            "VernacExtend",
            "57c369d5b309a04c5472ef7f32c33977152ecb0c"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "replace x0 with (y + (x0 - y)); [ idtac | ring ]; apply H7.",
            "VernacExtend",
            "2b0afebb3cd1e5aa386d38d08d956564ba6dd318"
        ],
        [
            "elim H9; intros.",
            "VernacExtend",
            "12334c97f44957e9c5cef0f3af9bfd7eaf28bd49"
        ],
        [
            "apply Rlt_le_trans with del.",
            "VernacExtend",
            "3a420d4df043bed756c5f541b7e1c7da58a7eb00"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold del; apply Rmin_l.",
            "VernacExtend",
            "46c0bfc6c0d150fb8634f72c6e90b5099e5e8470"
        ],
        [
            "elim H8; intros.",
            "VernacExtend",
            "54bacf1a2e9fa49626cbb57c551336659e39bf7a"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "elim H9; intros; assumption.",
            "VernacExtend",
            "8fe07a35a5ab7cf96f2efb2baff6e494f333a6ed"
        ],
        [
            "elim H9; intros; apply Rlt_le_trans with del.",
            "VernacExtend",
            "d70afb135caaec4362e1c9e51038d5157678acde"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold del; apply Rmin_r.",
            "VernacExtend",
            "c536207438a9729d0133d46b830f0dafa947b49a"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr'; apply H4.",
            "VernacExtend",
            "8302017f27b4a12f82b324697f029854650d405f"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmult_eq_reg_l with 3.",
            "VernacExtend",
            "99af9ad8772a05fbe3433014121663ee4d111378"
        ],
        [
            "do 2 rewrite Rmult_plus_distr_l; unfold Rdiv; rewrite <- Rmult_assoc; rewrite Rinv_r_simpl_m.",
            "VernacExtend",
            "ef2dbda4ec327b03368ce5a2e813f494910e297c"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "cut (0 < r - Rabs (x - y)).",
            "VernacExtend",
            "4e9e0504b29e18b0f4b0f52789afa6c3551ed452"
        ],
        [
            "intro; exists (mkposreal _ H6).",
            "VernacExtend",
            "3196d76ec32646537fcce1cf62792519c857c1b1"
        ],
        [
            "simpl; intros.",
            "VernacExtend",
            "429a59199da524088af55673600740ccc58db31e"
        ],
        [
            "unfold Boule; replace (y + h - x) with (h + (y - x)); [ idtac | ring ]; apply Rle_lt_trans with (Rabs h + Rabs (y - x)).",
            "VernacExtend",
            "36ed9812982293ad97fcfd544ffb36c62e75b0a2"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "apply Rplus_lt_reg_l with (- Rabs (x - y)).",
            "VernacExtend",
            "25a8715f4499600d21335f8229e71c9ba653a5a9"
        ],
        [
            "rewrite <- (Rabs_Ropp (y - x)); rewrite Ropp_minus_distr'.",
            "VernacExtend",
            "c7617f2fd821d3b2bce13f05b4c40da0ee24b117"
        ],
        [
            "replace (- Rabs (x - y) + r) with (r - Rabs (x - y)).",
            "VernacExtend",
            "dd26dc216d3599acf5a3e54e0f0b067b047228f5"
        ],
        [
            "replace (- Rabs (x - y) + (Rabs h + Rabs (x - y))) with (Rabs h).",
            "VernacExtend",
            "f74880af19a6471baa4d8791151395c5002b4436"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold Boule in H1; rewrite <- (Rabs_Ropp (x - y)); rewrite Ropp_minus_distr'; apply Rplus_lt_reg_l with (Rabs (y - x)).",
            "VernacExtend",
            "64690cbf7ee73be5c2ac15c0604d39ee9cd0afcd"
        ],
        [
            "rewrite Rplus_0_r; replace (Rabs (y - x) + (r - Rabs (y - x))) with (pos r); [ apply H1 | ring ].",
            "VernacExtend",
            "5b90db1f69eca6e9a2e6c416792d73f13873e922"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_pt_finite_SF : forall (fn:nat -> R -> R) (N:nat) (x:R), (forall n:nat, (n <= N)%nat -> continuity_pt (fn n) x) -> continuity_pt (fun y:R => sum_f_R0 (fun k:nat => fn k y) N) x.",
            "VernacStartTheoremProof",
            "7540c463c23ed0f9f992a3c1231db74206c94a4e"
        ],
        [
            "intros; induction N as [| N HrecN].",
            "VernacExtend",
            "176c4a7e299087f2a01baed2bde05aa27663e10d"
        ],
        [
            "simpl; apply (H 0%nat); apply le_n.",
            "VernacExtend",
            "6c5e2bbbb5105d2a0a23e2adbf27f564d585eb93"
        ],
        [
            "simpl; replace (fun y:R => sum_f_R0 (fun k:nat => fn k y) N + fn (S N) y) with ((fun y:R => sum_f_R0 (fun k:nat => fn k y) N) + (fun y:R => fn (S N) y))%F; [ idtac | reflexivity ].",
            "VernacExtend",
            "75ca76084bdfd4f28d71116e29fc26f9e3799397"
        ],
        [
            "apply continuity_pt_plus.",
            "VernacExtend",
            "a6988b4dccb2d67c113df6f4855fc8f9f3dc6065"
        ],
        [
            "apply HrecN.",
            "VernacExtend",
            "ec9b348a0961f8ea4434987bb268364b3d8f639c"
        ],
        [
            "intros; apply H.",
            "VernacExtend",
            "b7bca165a275b11a76ba06a5f07157259bedeabd"
        ],
        [
            "apply le_trans with N; [ assumption | apply le_n_Sn ].",
            "VernacExtend",
            "1aa48b0d1a3194c938aec0991fe7680aebe1ee08"
        ],
        [
            "apply (H (S N)); apply le_n.",
            "VernacExtend",
            "5ad13f3105b961b342b586ae6f33a43a9760510a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SFL_continuity_pt : forall (fn:nat -> R -> R) (cv:forall x:R, { l:R | Un_cv (fun N:nat => SP fn N x) l }) (r:posreal), CVN_r fn r -> (forall (n:nat) (y:R), Boule 0 r y -> continuity_pt (fn n) y) -> forall y:R, Boule 0 r y -> continuity_pt (SFL fn cv) y.",
            "VernacStartTheoremProof",
            "9cc856bac3fe7c10ea0175afb9a3b39cae0fbb08"
        ],
        [
            "intros; eapply CVU_continuity.",
            "VernacExtend",
            "50f566225b33dadc373ed1b7fb223bc577e35b3b"
        ],
        [
            "apply CVN_CVU.",
            "VernacExtend",
            "00141a1a3391d104268862d741ed640d517c181e"
        ],
        [
            "apply X.",
            "VernacExtend",
            "1a06263bf241d2c272a11be0f0a1522334cc2c93"
        ],
        [
            "intros; unfold SP; apply continuity_pt_finite_SF.",
            "VernacExtend",
            "f5d323a1bac761cb83423dde362ebe8562dd6b60"
        ],
        [
            "intros; apply H.",
            "VernacExtend",
            "b7bca165a275b11a76ba06a5f07157259bedeabd"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma SFL_continuity : forall (fn:nat -> R -> R) (cv:forall x:R, { l:R | Un_cv (fun N:nat => SP fn N x) l }), CVN_R fn -> (forall n:nat, continuity (fn n)) -> continuity (SFL fn cv).",
            "VernacStartTheoremProof",
            "b617811ca7040bd346a1e6cf4df8ef4d30725746"
        ],
        [
            "intros; unfold continuity; intro.",
            "VernacExtend",
            "e438fc1f32fb0c2d5d1c3ff2805457f90c2eb402"
        ],
        [
            "cut (0 < Rabs x + 1); [ intro | apply Rplus_le_lt_0_compat; [ apply Rabs_pos | apply Rlt_0_1 ] ].",
            "VernacExtend",
            "9344837f1013586e855e1dccbc5e148991d19a16"
        ],
        [
            "cut (Boule 0 (mkposreal _ H0) x).",
            "VernacExtend",
            "49733544f214f9bda812647e42fa14e63313dfe3"
        ],
        [
            "intro; eapply SFL_continuity_pt with (mkposreal _ H0).",
            "VernacExtend",
            "48addebd189e833aebb8e518326338e72746d15c"
        ],
        [
            "apply X.",
            "VernacExtend",
            "1a06263bf241d2c272a11be0f0a1522334cc2c93"
        ],
        [
            "intros; apply (H n y).",
            "VernacExtend",
            "0776df60e8aa20c0603b03c861a0956f79dbee3f"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "unfold Boule; simpl; rewrite Rminus_0_r; pattern (Rabs x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1.",
            "VernacExtend",
            "a6a4fc8588fface863a39815e1ece8d863809d3f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CVN_R_CVS : forall fn:nat -> R -> R, CVN_R fn -> forall x:R, { l:R | Un_cv (fun N:nat => SP fn N x) l }.",
            "VernacStartTheoremProof",
            "52ae1c5bc84a4bf59862dbad02b6665847767bd9"
        ],
        [
            "intros; apply R_complete.",
            "VernacExtend",
            "62cbfa5754a768c85bd39b4cefd3504f9956492e"
        ],
        [
            "unfold SP; set (An := fun N:nat => fn N x).",
            "VernacExtend",
            "5e8af3f8d6e9aa8ff961f4098ec5fdb7c156ef10"
        ],
        [
            "change (Cauchy_crit_series An).",
            "VernacExtend",
            "1a351f75a1437d2064d62aab9266ed68c6cf8c8b"
        ],
        [
            "apply cauchy_abs.",
            "VernacExtend",
            "a1df9e931d188b753541aa8886a07c1f4b85af90"
        ],
        [
            "unfold Cauchy_crit_series; apply CV_Cauchy.",
            "VernacExtend",
            "b08acb7ded7bb133bffe7c7ad8821b828a31b269"
        ],
        [
            "unfold CVN_R in X; cut (0 < Rabs x + 1).",
            "VernacExtend",
            "296bbe7c1dfacb9eebfedbca021ceb2462ec687a"
        ],
        [
            "intro; assert (H0 := X (mkposreal _ H)).",
            "VernacExtend",
            "2edd653fa3779250a3f47310f40a1346fc1cf1b1"
        ],
        [
            "unfold CVN_r in H0; elim H0; intros Bn H1.",
            "VernacExtend",
            "e9789fd0181fad9e03f0508d2ee4dc8a9b576be0"
        ],
        [
            "elim H1; intros l H2.",
            "VernacExtend",
            "af0d57eef5b296e2db7251f0a9f02f89652bf1d4"
        ],
        [
            "elim H2; intros.",
            "VernacExtend",
            "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
        ],
        [
            "apply Rseries_CV_comp with Bn.",
            "VernacExtend",
            "9bffc74629e79faf17d39b9383eb4768dd0fa74a"
        ],
        [
            "intro; split.",
            "VernacExtend",
            "fab266bb307ddec4a6ab91d7f2efd84a9c1736ef"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "unfold An; apply H4; unfold Boule; simpl; rewrite Rminus_0_r.",
            "VernacExtend",
            "58f7f9f9c0d4f7cfb5fbcf22bcf574558605eb4f"
        ],
        [
            "pattern (Rabs x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1.",
            "VernacExtend",
            "2d374f096d21d1ef7c9fa65b1ec2c767ec0c6448"
        ],
        [
            "exists l.",
            "VernacExtend",
            "9ca96dacfce153d20a69dd7ea7c7254236074950"
        ],
        [
            "cut (forall n:nat, 0 <= Bn n).",
            "VernacExtend",
            "773b636633f7520bb8a3ec4248c664c1dea92c73"
        ],
        [
            "intro; unfold Un_cv in H3; unfold Un_cv; intros.",
            "VernacExtend",
            "c8d98f871d51eb57e0e9537a6311ce71abf2d08d"
        ],
        [
            "elim (H3 _ H6); intros.",
            "VernacExtend",
            "12551d730ddc9437e6c9c6a880d2126abe89ca57"
        ],
        [
            "exists x0; intros.",
            "VernacExtend",
            "5bc9f78cbd3bd0b9d5ad70bca80ff875ab1656fa"
        ],
        [
            "replace (sum_f_R0 Bn n) with (sum_f_R0 (fun k:nat => Rabs (Bn k)) n).",
            "VernacExtend",
            "b1547886ecb32a6686d44d487af5290a0ad7a446"
        ],
        [
            "apply H7; assumption.",
            "VernacExtend",
            "5fe9a2981bc9efdad06860c6328e07e091570990"
        ],
        [
            "apply sum_eq; intros; apply Rabs_right; apply Rle_ge; apply H5.",
            "VernacExtend",
            "fd6198c2bec19a45ee9f9221b6cca0360ada096b"
        ],
        [
            "intro; apply Rle_trans with (Rabs (An n)).",
            "VernacExtend",
            "4de224f39997aef2d6f2514d347bc0c437e9424a"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "unfold An; apply H4; unfold Boule; simpl; rewrite Rminus_0_r; pattern (Rabs x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1.",
            "VernacExtend",
            "55e3de5fd191fcc45ef2d96bc3b24191e1a9efa0"
        ],
        [
            "apply Rplus_le_lt_0_compat; [ apply Rabs_pos | apply Rlt_0_1 ].",
            "VernacExtend",
            "1443ea4329ef42a3fc983dc5c15eb757020f4332"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CVU_cv : forall f g c d, CVU f g c d -> forall x, Boule c d x -> Un_cv (fun n => f n x) (g x).",
            "VernacStartTheoremProof",
            "9dda96891205bd5954881d786ead7ea06d1422f2"
        ],
        [
            "intros f g c d cvu x bx eps ep; destruct (cvu eps ep) as [N Pn].",
            "VernacExtend",
            "17f9ee2e8e37d4cc8973ff8fdb68cdeea64a77a7"
        ],
        [
            "exists N; intros n nN; rewrite R_dist_sym; apply Pn; assumption.",
            "VernacExtend",
            "e0a383a2665acfc95575da77f12496b224ba0ab6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CVU_ext_lim : forall f g1 g2 c d, CVU f g1 c d -> (forall x, Boule c d x -> g1 x = g2 x) -> CVU f g2 c d.",
            "VernacStartTheoremProof",
            "29faa63577494d0e70b41897cfd1e61f369cd69f"
        ],
        [
            "intros f g1 g2 c d cvu q eps ep; destruct (cvu _ ep) as [N Pn].",
            "VernacExtend",
            "f010395101b0ceb1075c022529eecbc6d13c2628"
        ],
        [
            "exists N; intros; rewrite <- q; auto.",
            "VernacExtend",
            "861ca360816252a6111539830f901235cfb5691d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CVU_derivable : forall f f' g g' c d, CVU f' g' c d -> (forall x, Boule c d x -> Un_cv (fun n => f n x) (g x)) -> (forall n x, Boule c d x -> derivable_pt_lim (f n) x (f' n x)) -> forall x, Boule c d x -> derivable_pt_lim g x (g' x).",
            "VernacStartTheoremProof",
            "04df26080af8903ed08a1d786bc7df3b8839b00a"
        ],
        [
            "intros f f' g g' c d cvu cvp dff' x bx.",
            "VernacExtend",
            "ffb3f5b5b23d4a314ce519d73eed294bc13dfad9"
        ],
        [
            "set (rho_ := fun n y => if Req_EM_T y x then f' n x else ((f n y - f n x)/ (y - x))).",
            "VernacExtend",
            "06fa3974c3b3f6661084f9335a9ba0efb0384ce5"
        ],
        [
            "set (rho := fun y => if Req_EM_T y x then g' x else (g y - g x)/(y - x)).",
            "VernacExtend",
            "e9c0f57f588f8311c131be524a0096d5f49d4b8c"
        ],
        [
            "assert (ctrho : forall n z, Boule c d z -> continuity_pt (rho_ n) z).",
            "VernacExtend",
            "0d1a533040f4f4fdb63ee327091e4bf1b8f9baa5"
        ],
        [
            "intros n z bz.",
            "VernacExtend",
            "5f95ac9e73b813e779d57a148c5d5c6b31503849"
        ],
        [
            "destruct (Req_EM_T x z) as [xz | xnz].",
            "VernacExtend",
            "89a47b0aebba8c3d60a38001fc3dd393b936e707"
        ],
        [
            "rewrite <- xz.",
            "VernacExtend",
            "a8e17c58c1ef2975d7882a39c758fe3d4d4b2ac1"
        ],
        [
            "intros eps' ep'.",
            "VernacExtend",
            "08b75ab0fd6b53af7da3e825e0d0aaf3ab301fa3"
        ],
        [
            "destruct (dff' n x bx eps' ep') as [alp Pa].",
            "VernacExtend",
            "332c0f0bfe143e58565f3b5e2ce2d20fd840664a"
        ],
        [
            "exists (pos alp);split;[apply cond_pos | ].",
            "VernacExtend",
            "a5ae188ed6e157d8d52640954c033b5f1ffcaa30"
        ],
        [
            "intros z'; unfold rho_, D_x, dist, R_met; simpl; intros [[_ xnz'] dxz'].",
            "VernacExtend",
            "0e6f24e14dbff41efcaae9c5ef89b0ce2529f77b"
        ],
        [
            "destruct (Req_EM_T z' x) as [abs | _].",
            "VernacExtend",
            "1c559be5ce86af9d9976e01e41fea08d5aebf0cc"
        ],
        [
            "case xnz'; symmetry; exact abs.",
            "VernacExtend",
            "0c06d9357b381ea6c42cba60da25b7b4ae9835dc"
        ],
        [
            "destruct (Req_EM_T x x) as [_ | abs];[ | case abs; reflexivity].",
            "VernacExtend",
            "b1469f42518f5980cc3b117ebc720ffe00c9d9de"
        ],
        [
            "pattern z' at 1; replace z' with (x + (z' - x)) by ring.",
            "VernacExtend",
            "1e810e12d60ab0d3b443e856f7c27ed8b0eb0959"
        ],
        [
            "apply Pa;[intros h; case xnz'; replace z' with (z' - x + x) by ring; rewrite h, Rplus_0_l; reflexivity | exact dxz'].",
            "VernacExtend",
            "11588df2be52dd6ae52b0193f7de58e25245416f"
        ],
        [
            "destruct (Ball_in_inter c c d d z bz bz) as [delta Pd].",
            "VernacExtend",
            "8b7b3bfb99c56aaf9f2e533d1b4962f1107e100a"
        ],
        [
            "assert (dz : 0 < Rmin delta (Rabs (z - x))).",
            "VernacExtend",
            "d6f790d992c4337570caaffe7fa6070dbd742a3a"
        ],
        [
            "now apply Rmin_glb_lt;[apply cond_pos | apply Rabs_pos_lt; intros zx0; case xnz; replace z with (z - x + x) by ring; rewrite zx0, Rplus_0_l].",
            "VernacExtend",
            "77f3ba5af332160b26f512fee47bb6a01a70d1a9"
        ],
        [
            "assert (t' : forall y : R, R_dist y z < Rmin delta (Rabs (z - x)) -> (fun z : R => (f n z - f n x) / (z - x)) y = rho_ n y).",
            "VernacExtend",
            "887158214057f11ff634c558f75a9ba75cce62d0"
        ],
        [
            "intros y dyz; unfold rho_; destruct (Req_EM_T y x) as [xy | xny].",
            "VernacExtend",
            "8d8b2618e4c620d461b50b9db87a3249bb71a078"
        ],
        [
            "rewrite xy in dyz.",
            "VernacExtend",
            "7fb800f4dd53a9661bc7a2bb6a162854e1a9f130"
        ],
        [
            "destruct (Rle_dec delta (Rabs (z - x))).",
            "VernacExtend",
            "23634119da0566b7d35a25c4ba557f68212b3d45"
        ],
        [
            "rewrite Rmin_left, R_dist_sym in dyz; unfold R_dist in dyz; lra.",
            "VernacExtend",
            "5f41e70889fb9ed65f9bca2c43ea8b86dfcd74a0"
        ],
        [
            "rewrite Rmin_right, R_dist_sym in dyz; unfold R_dist in dyz; [case (Rlt_irrefl _ dyz) |apply Rlt_le, Rnot_le_gt; assumption].",
            "VernacExtend",
            "6b788bed2342bbda39f957bcb2b0bcf8546cd839"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply (continuity_pt_locally_ext (fun z => (f n z - f n x)/(z - x)) (rho_ n) _ z dz t'); clear t'.",
            "VernacExtend",
            "ed05b35382f15e6f718352f8b013f288b29f7770"
        ],
        [
            "apply continuity_pt_div.",
            "VernacExtend",
            "896110b0ac58a7a541de566d6a745a821b98996d"
        ],
        [
            "apply continuity_pt_minus.",
            "VernacExtend",
            "ee124f243d9a30e1165f89a65c2280f21b3b2888"
        ],
        [
            "apply derivable_continuous_pt; eapply exist; apply dff'; assumption.",
            "VernacExtend",
            "a8c8032307ed87cb9c294edfca463f15d5cc69c0"
        ],
        [
            "apply continuity_pt_const; intro; intro; reflexivity.",
            "VernacExtend",
            "9ea232f6776d0bd7506ed38241146981fe56ea4b"
        ],
        [
            "apply continuity_pt_minus; [apply derivable_continuous_pt; exists 1; apply derivable_pt_lim_id | apply continuity_pt_const; intro; reflexivity].",
            "VernacExtend",
            "52f749d3c9df94fb9dcd90c08c9cb6444b0e8385"
        ],
        [
            "intros zx0; case xnz; replace z with (z - x + x) by ring.",
            "VernacExtend",
            "cf17899cdf036705c5fa9be73c921d6025f9fb98"
        ],
        [
            "rewrite zx0, Rplus_0_l; reflexivity.",
            "VernacExtend",
            "01a9b55b1b4a813f8757818c0a768530b1f88f50"
        ],
        [
            "assert (CVU rho_ rho c d ).",
            "VernacExtend",
            "08c4b501efe18177e2238dcbfc19798f4bea272d"
        ],
        [
            "intros eps ep.",
            "VernacExtend",
            "af89a53f4fae9477ea82d9a2bc893f64250db095"
        ],
        [
            "assert (ep8 : 0 < eps/8).",
            "VernacExtend",
            "97d919a04c136e043abfdccd54c899a3f91868ba"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "destruct (cvu _ ep8) as [N Pn1].",
            "VernacExtend",
            "f5fd423dbdc2f1c458438e0363ac11bdea64e21f"
        ],
        [
            "assert (cauchy1 : forall n p, (N <= n)%nat -> (N <= p)%nat -> forall z, Boule c d z -> Rabs (f' n z - f' p z) < eps/4).",
            "VernacExtend",
            "ffde9333eb41fe2003d8f054cd5a2765e589eb37"
        ],
        [
            "intros n p nN pN z bz; replace (eps/4) with (eps/8 + eps/8) by field.",
            "VernacExtend",
            "ea47848f72486b3c9f8ea515dd1751df7e8ddb26"
        ],
        [
            "rewrite <- Rabs_Ropp.",
            "VernacExtend",
            "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
        ],
        [
            "replace (-(f' n z - f' p z)) with (g' z - f' n z - (g' z - f' p z)) by ring.",
            "VernacExtend",
            "0affbdb0f0be009876ffea101b80bab7ab3483d7"
        ],
        [
            "apply Rle_lt_trans with (1 := Rabs_triang _ _); rewrite Rabs_Ropp.",
            "VernacExtend",
            "d866873ef74f79ae22a2bd8a74853edc8cf587cc"
        ],
        [
            "apply Rplus_lt_compat; apply Pn1; assumption.",
            "VernacExtend",
            "54414c3611ff873ff170231439926259e9743f14"
        ],
        [
            "assert (step_2 : forall n p, (N <= n)%nat -> (N <= p)%nat -> forall y, Boule c d y -> x <> y -> Rabs ((f n y - f n x)/(y - x) - (f p y - f p x)/(y - x)) < eps/4).",
            "VernacExtend",
            "b39fd93e7fd38053af7baba86fb374a19db66abb"
        ],
        [
            "intros n p nN pN y b_y xny.",
            "VernacExtend",
            "8349d0f8f4382d9d96237d1c8408e55cd858d3f7"
        ],
        [
            "assert (mm0 : (Rmin x y = x /\\ Rmax x y = y) \\/ (Rmin x y = y /\\ Rmax x y = x)).",
            "VernacExtend",
            "9614029e3f34d5454733006d763ed83cfad4a9a0"
        ],
        [
            "destruct (Rle_dec x y) as [H | H].",
            "VernacExtend",
            "56bcba1398d424ed2da0b56e74206f5910d6f10c"
        ],
        [
            "rewrite Rmin_left, Rmax_right.",
            "VernacExtend",
            "de83f07b721f83b99ce8e0efbf13eecf3f7f3750"
        ],
        [
            "left; split; reflexivity.",
            "VernacExtend",
            "96b087a55c5e788c9f1c69c91eadf924612c4503"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite Rmin_right, Rmax_left.",
            "VernacExtend",
            "88fa0325f2952d91497c7d444bf50c2b097a8540"
        ],
        [
            "right; split; reflexivity.",
            "VernacExtend",
            "4c3f2ff3e2fde2fc36517ed2792a0eafe1fab171"
        ],
        [
            "apply Rlt_le, Rnot_le_gt; assumption.",
            "VernacExtend",
            "585e360c8864555040345dbaf6ef875fe08d62af"
        ],
        [
            "apply Rlt_le, Rnot_le_gt; assumption.",
            "VernacExtend",
            "585e360c8864555040345dbaf6ef875fe08d62af"
        ],
        [
            "assert (mm : Rmin x y < Rmax x y).",
            "VernacExtend",
            "7bc2fdab8a26ba4e2c839965d2254986d92601d1"
        ],
        [
            "destruct mm0 as [[q1 q2] | [q1 q2]]; generalize (Rminmax x y); rewrite q1, q2.",
            "VernacExtend",
            "df60ee8011be2cd248606bf5ba9d99ef20de40b7"
        ],
        [
            "intros h; destruct h;[ assumption| contradiction].",
            "VernacExtend",
            "184065ab273403414e38c13ef29c332c38cff01a"
        ],
        [
            "intros h; destruct h as [h | h];[assumption | rewrite h in xny; case xny; reflexivity].",
            "VernacExtend",
            "49afeff83bec309eef1cdff9467227fa782428fd"
        ],
        [
            "assert (dm : forall z, Rmin x y <= z <= Rmax x y -> derivable_pt_lim (fun x => f n x - f p x) z (f' n z - f' p z)).",
            "VernacExtend",
            "0aa3c34e0fedfb9a54f3a0d33747cfbbcc2dafb9"
        ],
        [
            "intros z intz; apply derivable_pt_lim_minus.",
            "VernacExtend",
            "37a558a9a1719c3a04d94ce441ebed219f6b65a4"
        ],
        [
            "apply dff'; apply Boule_convex with (Rmin x y) (Rmax x y); destruct mm0 as [[q1 q2] | [q1 q2]]; revert intz; rewrite ?q1, ?q2; intros; try assumption.",
            "VernacExtend",
            "e0042abfa18421db62d5babc361a002dedb0ff13"
        ],
        [
            "apply dff'; apply Boule_convex with (Rmin x y) (Rmax x y); destruct mm0 as [[q1 q2] | [q1 q2]]; revert intz; rewrite ?q1, ?q2; intros; try assumption.",
            "VernacExtend",
            "e0042abfa18421db62d5babc361a002dedb0ff13"
        ],
        [
            "replace ((f n y - f n x) / (y - x) - (f p y - f p x) / (y - x)) with (((f n y - f p y) - (f n x - f p x))/(y - x)) by (field; intros yx0; case xny; replace y with (y - x + x) by ring; rewrite yx0, Rplus_0_l; reflexivity).",
            "VernacExtend",
            "905aa498a3db25be1e0918daf82f5163e3768241"
        ],
        [
            "destruct (MVT_cor2 (fun x => f n x - f p x) (fun x => f' n x - f' p x) (Rmin x y) (Rmax x y) mm dm) as [z [Pz inz]].",
            "VernacExtend",
            "09112cfeccdceb808e65ca81bbdde47de44ab5d2"
        ],
        [
            "destruct mm0 as [[q1 q2] | [q1 q2]].",
            "VernacExtend",
            "d8e65e422a5fe743947f929328d15b518cbe35af"
        ],
        [
            "replace ((f n y - f p y - (f n x - f p x))/(y - x)) with ((f n (Rmax x y) - f p (Rmax x y) - (f n (Rmin x y) - f p (Rmin x y)))/ (Rmax x y - Rmin x y)) by (rewrite q1, q2; reflexivity).",
            "VernacExtend",
            "29371aafee9ce5d950799812b19f43dff146ed86"
        ],
        [
            "unfold Rdiv; rewrite Pz, Rmult_assoc, Rinv_r, Rmult_1_r.",
            "VernacExtend",
            "bbd13333116658f296b3d8e164efc4f200c75485"
        ],
        [
            "apply cauchy1; auto.",
            "VernacExtend",
            "867a2771472a135a54ff19be4dd6330b75ecedde"
        ],
        [
            "apply Boule_convex with (Rmin x y) (Rmax x y); revert inz; rewrite ?q1, ?q2; intros; try assumption.",
            "VernacExtend",
            "fb46159e1b18ea97f23b54d3b791053e461c3da3"
        ],
        [
            "split; apply Rlt_le; tauto.",
            "VernacExtend",
            "1b18243a168365999319d644c7607c33fb728e30"
        ],
        [
            "rewrite q1, q2; apply Rminus_eq_contra, not_eq_sym; assumption.",
            "VernacExtend",
            "05f098dafaa9944b0dba6359ef5c65517d9b666d"
        ],
        [
            "replace ((f n y - f p y - (f n x - f p x))/(y - x)) with ((f n (Rmax x y) - f p (Rmax x y) - (f n (Rmin x y) - f p (Rmin x y)))/ (Rmax x y - Rmin x y)).",
            "VernacExtend",
            "6151a27eca977b4f4e220bc57673affc54ebdebe"
        ],
        [
            "unfold Rdiv; rewrite Pz, Rmult_assoc, Rinv_r, Rmult_1_r.",
            "VernacExtend",
            "bbd13333116658f296b3d8e164efc4f200c75485"
        ],
        [
            "apply cauchy1; auto.",
            "VernacExtend",
            "867a2771472a135a54ff19be4dd6330b75ecedde"
        ],
        [
            "apply Boule_convex with (Rmin x y) (Rmax x y); revert inz; rewrite ?q1, ?q2; intros; try assumption; split; apply Rlt_le; tauto.",
            "VernacExtend",
            "eebbe85b0848beb72e740496128a98228a649122"
        ],
        [
            "rewrite q1, q2; apply Rminus_eq_contra; assumption.",
            "VernacExtend",
            "a80c8a901e2105c4c244a7c9db76e2490129d326"
        ],
        [
            "rewrite q1, q2; field; split; apply Rminus_eq_contra;[apply not_eq_sym |]; assumption.",
            "VernacExtend",
            "dc2883f56c5f6e73a4bef0c82b8a69cae5f8b9a4"
        ],
        [
            "assert (unif_ac : forall n p, (N <= n)%nat -> (N <= p)%nat -> forall y, Boule c d y -> Rabs (rho_ n y - rho_ p y) <= eps/2).",
            "VernacExtend",
            "5db1660840dd487dee03ec3d4406ed43261d9140"
        ],
        [
            "intros n p nN pN y b_y.",
            "VernacExtend",
            "14b33291e8e1ea104eeb50fb4983ed6a768ca6e6"
        ],
        [
            "destruct (Req_dec x y) as [xy | xny].",
            "VernacExtend",
            "2262aab0fd0c66a06dcf294037f39767f1ff82fb"
        ],
        [
            "destruct (Ball_in_inter c c d d x bx bx) as [delta Pdelta].",
            "VernacExtend",
            "49283acb165e329b6837304053a492e81a14f433"
        ],
        [
            "destruct (ctrho n y b_y _ ep8) as [d' [dp Pd]].",
            "VernacExtend",
            "a79540e873f69ce41061b8d78487f30eb506d5e6"
        ],
        [
            "destruct (ctrho p y b_y _ ep8) as [d2 [dp2 Pd2]].",
            "VernacExtend",
            "0ce2b0d0f27699b5b89af0c163a03ffc3f78774e"
        ],
        [
            "assert (mmpos : 0 < (Rmin (Rmin d' d2) delta)/2).",
            "VernacExtend",
            "c94661a9b3cec0915101482d11b2b6e446568530"
        ],
        [
            "apply Rmult_lt_0_compat; repeat apply Rmin_glb_lt; try assumption.",
            "VernacExtend",
            "7fa7a40083e95b14d9e355d937ccfbbc13b5e50a"
        ],
        [
            "apply cond_pos.",
            "VernacExtend",
            "8ddb865849694c081c727a4dcd01494f171e402e"
        ],
        [
            "apply Rinv_0_lt_compat, Rlt_0_2.",
            "VernacExtend",
            "3abccb6f76a72b816de9995e74c7f953b6cff456"
        ],
        [
            "apply Rle_trans with (1 := R_dist_tri _ _ (rho_ n (y + Rmin (Rmin d' d2) delta/2))).",
            "VernacExtend",
            "c1a490a2e6199c7e2d46e1c79f34d9b9c01e6e9a"
        ],
        [
            "replace (eps/2) with (eps/8 + (eps/4 + eps/8)) by field.",
            "VernacExtend",
            "487deeec5cb70cda15bb0e1c15c0e41701a20743"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "rewrite R_dist_sym; apply Rlt_le, Pd;split;[split;[exact I | ] | ].",
            "VernacExtend",
            "b39081914f600686ebfefafba34b1732e45fe083"
        ],
        [
            "apply Rminus_not_eq_right; rewrite Rplus_comm; unfold Rminus; rewrite Rplus_assoc, Rplus_opp_r, Rplus_0_r; apply Rgt_not_eq; assumption.",
            "VernacExtend",
            "46c9c6685efd2f3fa2482db18a5061ed8ec299d9"
        ],
        [
            "simpl; unfold R_dist.",
            "VernacExtend",
            "db555dffbb2c35caa3c9a6f63cd610fa717cc3be"
        ],
        [
            "unfold Rminus; rewrite (Rplus_comm y), Rplus_assoc, Rplus_opp_r, Rplus_0_r.",
            "VernacExtend",
            "88c7326b94c87645ee22abee0d0d39cdea165977"
        ],
        [
            "rewrite Rabs_pos_eq;[ |apply Rlt_le; assumption ].",
            "VernacExtend",
            "643918f836ee1571d9a32bfb03f067e34be464d1"
        ],
        [
            "apply Rlt_le_trans with (Rmin (Rmin d' d2) delta);[lra | ].",
            "VernacExtend",
            "3dc5156e9b3d03d8554e93cd387c285168515713"
        ],
        [
            "apply Rle_trans with (Rmin d' d2); apply Rmin_l.",
            "VernacExtend",
            "9f4070b87034ea74fd516fd8f5c5c2fc1d6da585"
        ],
        [
            "apply Rle_trans with (1 := R_dist_tri _ _ (rho_ p (y + Rmin (Rmin d' d2) delta/2))).",
            "VernacExtend",
            "c418a3fae52058e1068011e9a766d2f2af886b9b"
        ],
        [
            "apply Rplus_le_compat.",
            "VernacExtend",
            "7a69898b466991bee51047e3a2fc51c3b80fbd93"
        ],
        [
            "apply Rlt_le.",
            "VernacExtend",
            "cdc4280500779f23bae235b94c24a4b2ea2921fe"
        ],
        [
            "replace (rho_ n (y + Rmin (Rmin d' d2) delta / 2)) with ((f n (y + Rmin (Rmin d' d2) delta / 2) - f n x)/ ((y + Rmin (Rmin d' d2) delta / 2) - x)).",
            "VernacExtend",
            "f85f530c4a90861b3c374db06f8183274f2db1e4"
        ],
        [
            "replace (rho_ p (y + Rmin (Rmin d' d2) delta / 2)) with ((f p (y + Rmin (Rmin d' d2) delta / 2) - f p x)/ ((y + Rmin (Rmin d' d2) delta / 2) - x)).",
            "VernacExtend",
            "600919e601876d6abec9369c433380f7c4a65c29"
        ],
        [
            "apply step_2; auto; try lra.",
            "VernacExtend",
            "5a237dfdaa5266aae1447fe6b8a2b8c503f90a86"
        ],
        [
            "assert (0 < pos delta) by (apply cond_pos).",
            "VernacExtend",
            "8abe9d723d7d7fc15251bfbd02b36313b3702083"
        ],
        [
            "apply Boule_convex with y (y + delta/2).",
            "VernacExtend",
            "98ae7c709b0fe40768015480012ecaca3ec8bd3d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "destruct (Pdelta (y + delta/2)); auto.",
            "VernacExtend",
            "1268a182c18af34a98bf2ff85a4b146aef54c7c8"
        ],
        [
            "rewrite xy; unfold Boule; rewrite Rabs_pos_eq; try lra; auto.",
            "VernacExtend",
            "f69cddb914ae3eb951cc22f2f325021128b33d19"
        ],
        [
            "split; try lra.",
            "VernacExtend",
            "7ba13547e186928295636e92886323a6c212e095"
        ],
        [
            "apply Rplus_le_compat_l, Rmult_le_compat_r;[ | apply Rmin_r].",
            "VernacExtend",
            "68b1822a2c8e1f267163b8152a652777fae64832"
        ],
        [
            "now apply Rlt_le, Rinv_0_lt_compat, Rlt_0_2.",
            "VernacExtend",
            "6275c73e6c3cdc02e07cb973aa6676c25d527ba1"
        ],
        [
            "unfold rho_.",
            "VernacExtend",
            "82162097cdd1bca6955dd8e9179642425f35402f"
        ],
        [
            "destruct (Req_EM_T (y + Rmin (Rmin d' d2) delta/2) x) as [ymx | ymnx].",
            "VernacExtend",
            "f00c325a675fcc00f000bbc997a68695e325a6a0"
        ],
        [
            "case (RIneq.Rle_not_lt _ _ (Req_le _ _ ymx)); lra.",
            "VernacExtend",
            "25fbce70e55cbbe461c57e51fdee70b83203545d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold rho_.",
            "VernacExtend",
            "82162097cdd1bca6955dd8e9179642425f35402f"
        ],
        [
            "destruct (Req_EM_T (y + Rmin (Rmin d' d2) delta / 2) x) as [ymx | ymnx].",
            "VernacExtend",
            "f00c325a675fcc00f000bbc997a68695e325a6a0"
        ],
        [
            "case (RIneq.Rle_not_lt _ _ (Req_le _ _ ymx)); lra.",
            "VernacExtend",
            "25fbce70e55cbbe461c57e51fdee70b83203545d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply Rlt_le, Pd2; split;[split;[exact I | apply Rlt_not_eq; lra] | ].",
            "VernacExtend",
            "41c00076f1c462748f6ac23b312532d54b147f94"
        ],
        [
            "simpl; unfold R_dist.",
            "VernacExtend",
            "db555dffbb2c35caa3c9a6f63cd610fa717cc3be"
        ],
        [
            "unfold Rminus; rewrite (Rplus_comm y), Rplus_assoc, Rplus_opp_r, Rplus_0_r.",
            "VernacExtend",
            "88c7326b94c87645ee22abee0d0d39cdea165977"
        ],
        [
            "rewrite Rabs_pos_eq;[ | lra].",
            "VernacExtend",
            "097ce552febbb447dfb52d1e6ccf6f04c7f19972"
        ],
        [
            "apply Rlt_le_trans with (Rmin (Rmin d' d2) delta); [lra |].",
            "VernacExtend",
            "3dc5156e9b3d03d8554e93cd387c285168515713"
        ],
        [
            "apply Rle_trans with (Rmin d' d2).",
            "VernacExtend",
            "93e7512332452eacc7c43548c8a1acc5234b1001"
        ],
        [
            "solve[apply Rmin_l].",
            "VernacExtend",
            "528e805c86452bae82dad4814c483a079d84e20e"
        ],
        [
            "solve[apply Rmin_r].",
            "VernacExtend",
            "2257a66676c6bf566132f4acc3c385622fc1d661"
        ],
        [
            "apply Rlt_le, Rlt_le_trans with (eps/4);[ | lra].",
            "VernacExtend",
            "5fd919978ccc6f5b0fd853b08c94e8a65dbe8e4e"
        ],
        [
            "unfold rho_; destruct (Req_EM_T y x); solve[auto].",
            "VernacExtend",
            "6d6a6dd3f2b39ddb9d67b80f4536623adfd8822c"
        ],
        [
            "assert (unif_ac' : forall p, (N <= p)%nat -> forall y, Boule c d y -> Rabs (rho y - rho_ p y) < eps).",
            "VernacExtend",
            "470c3025638ea8ea04050decb9010d742e64d141"
        ],
        [
            "assert (cvrho : forall y, Boule c d y -> Un_cv (fun n => rho_ n y) (rho y)).",
            "VernacExtend",
            "dbb2cade3cb5353bbc6d32dabac81cfc519e071b"
        ],
        [
            "intros y b_y; unfold rho_, rho; destruct (Req_EM_T y x).",
            "VernacExtend",
            "2b4fa4675b8c6536262c95ffe96abf6ecc4a1e6f"
        ],
        [
            "intros eps' ep'; destruct (cvu eps' ep') as [N2 Pn2].",
            "VernacExtend",
            "f3148618e304a8467e3bebec26c3d3b34f4fac93"
        ],
        [
            "exists N2; intros n nN2; rewrite R_dist_sym; apply Pn2; assumption.",
            "VernacExtend",
            "edf865eb7a11c315c9d7d14db3432bc7a9784ff5"
        ],
        [
            "apply CV_mult.",
            "VernacExtend",
            "7df85077b85eadac24b572b1d2ba1d223ec90eca"
        ],
        [
            "apply CV_minus.",
            "VernacExtend",
            "71174b3213db34f5ab2791b268b31365a99c86ae"
        ],
        [
            "apply cvp; assumption.",
            "VernacExtend",
            "7ae6746bb61074b2f73df6aa4545ef6890595400"
        ],
        [
            "apply cvp; assumption.",
            "VernacExtend",
            "7ae6746bb61074b2f73df6aa4545ef6890595400"
        ],
        [
            "intros eps' ep'; simpl; exists 0%nat; intros; rewrite R_dist_eq; assumption.",
            "VernacExtend",
            "106112c947a81ce23c3d1a59c31e11f058356a13"
        ],
        [
            "intros p pN y b_y.",
            "VernacExtend",
            "9eb6565a2bf99d9a3df9bd2743461c4d72edfa1a"
        ],
        [
            "replace eps with (eps/2 + eps/2) by field.",
            "VernacExtend",
            "ae28027106d70b55d71f9e3ff5279dcf42f407e1"
        ],
        [
            "assert (ep2 : 0 < eps/2) by lra.",
            "VernacExtend",
            "6465557a8236813ea493fd092e7efe8947f320da"
        ],
        [
            "destruct (cvrho y b_y _ ep2) as [N2 Pn2].",
            "VernacExtend",
            "d9257cab89fa75e6e76523abbcc8800c246e7e9c"
        ],
        [
            "apply Rle_lt_trans with (1 := R_dist_tri _ _ (rho_ (max N N2) y)).",
            "VernacExtend",
            "63dc2443cdb068179059fa8d2f5e52891676789c"
        ],
        [
            "apply Rplus_lt_le_compat.",
            "VernacExtend",
            "afaf4615762fcc18dc393fdad9acd883003f768d"
        ],
        [
            "solve[rewrite R_dist_sym; apply Pn2, Max.le_max_r].",
            "VernacExtend",
            "b67dcc7befed54d010f6e34234134566db48e8d0"
        ],
        [
            "apply unif_ac; auto; solve [apply Max.le_max_l].",
            "VernacExtend",
            "06faa9e0d67a3a00442798b3ad790f1a07f9af1e"
        ],
        [
            "exists N; intros; apply unif_ac'; solve[auto].",
            "VernacExtend",
            "15fcb4996dcd0b4fb8cf9ffa2a617fda4f1ce159"
        ],
        [
            "intros eps ep.",
            "VernacExtend",
            "af89a53f4fae9477ea82d9a2bc893f64250db095"
        ],
        [
            "destruct (CVU_continuity _ _ _ _ H ctrho x bx eps ep) as [delta [dp Pd]].",
            "VernacExtend",
            "d727569ed8452df3e876d0c76ff3fae5989372b0"
        ],
        [
            "exists (mkposreal _ dp); intros h hn0 dh.",
            "VernacExtend",
            "511ca13fc76af96a775a66de29e6fee1fb449dee"
        ],
        [
            "replace ((g (x + h) - g x) / h) with (rho (x + h)).",
            "VernacExtend",
            "b705323db82591de1305b0f1c511c839ca6df1e2"
        ],
        [
            "replace (g' x) with (rho x).",
            "VernacExtend",
            "1bd861c2e11790d69c2fcfe984242755a0a7c85b"
        ],
        [
            "apply Pd; unfold D_x, no_cond;split;[split;[solve[auto] | ] | ].",
            "VernacExtend",
            "84ddba6c44187d50ddfd428c68e9372abb9e038a"
        ],
        [
            "intros xxh; case hn0; replace h with (x + h - x) by ring; rewrite <- xxh; ring.",
            "VernacExtend",
            "69976d71390596fb6a67f0ead2cfd12308280ea6"
        ],
        [
            "simpl; unfold R_dist; replace (x + h - x) with h by ring; exact dh.",
            "VernacExtend",
            "0c7c0a3bac901abec507f7930532acfd6a292976"
        ],
        [
            "unfold rho; destruct (Req_EM_T x x) as [ _ | abs];[ | case abs]; reflexivity.",
            "VernacExtend",
            "4f1fbf0e84c8851a517d75a0acf5fe3db625ef25"
        ],
        [
            "unfold rho; destruct (Req_EM_T (x + h) x) as [abs | _];[ | ].",
            "VernacExtend",
            "fdbd93efc871c37832afde674aa18f7811c29861"
        ],
        [
            "case hn0; replace h with (x + h - x) by ring; rewrite abs; ring.",
            "VernacExtend",
            "f34cabd31f72a94f9dd477317ca5a36f05a3a315"
        ],
        [
            "replace (x + h - x) with h by ring; reflexivity.",
            "VernacExtend",
            "a2ada1f0e9d0825dc868848417c74ac043a21129"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "Boule_convex",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros c d x y z bx b_y intz.",
                        "VernacExtend",
                        "196602ae0f9f5ef7a7b4941e204b7a8a96399edc"
                    ]
                },
                {
                    "command": [
                        "unfold Boule in bx, b_y; apply Rabs_def2 in bx; apply Rabs_def2 in b_y; apply Rabs_def1; [apply Rle_lt_trans with (y - c);[apply Rplus_le_compat_r|]| apply Rlt_le_trans with (x - c);[|apply Rplus_le_compat_r]];tauto.",
                        "VernacExtend",
                        "416fc80240fa715779234dd51f4c051b3afcc22c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "boule_of_interval",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "exists ((x + y)/2).",
                        "VernacExtend",
                        "199fd18289465bc125b35e29ebedb3631ad9cb46"
                    ]
                },
                {
                    "command": [
                        "assert (radius : 0 < (y - x)/2).",
                        "VernacExtend",
                        "2bf4eb5d8b622d8ddbbb5ecef490800e7a412c60"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7122edbd68559f255bfed03dc640472ed14eb4ef"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Rminus; assumption.",
                        "VernacExtend",
                        "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
                    ]
                },
                {
                    "command": [
                        "now apply Rinv_0_lt_compat, Rlt_0_2.",
                        "VernacExtend",
                        "5df8e7bd0a76486880a9b90cf206d4ce4bf31bef"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ radius).",
                        "VernacExtend",
                        "55468f166be6c828f771e10c010c432221061c34"
                    ]
                },
                {
                    "command": [
                        "simpl; split; unfold Rdiv; field.",
                        "VernacExtend",
                        "ff028d6099a4a6d2ec5103b3761e73416bc6cf30"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "boule_in_interval",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "assert (cmp : x * /2 + z * /2 < z * /2 + y * /2).",
                        "VernacExtend",
                        "4bee8e7fec1315ffbb51ea27712cc761e76b66e3"
                    ]
                },
                {
                    "command": [
                        "destruct h as [h1 h2].",
                        "VernacExtend",
                        "2cb07a10abb28ef408f7365f7181eeaac7c1c4a4"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm; apply Rplus_lt_compat_l, Rmult_lt_compat_r.",
                        "VernacExtend",
                        "d29ac2e5be58b7a1ac3d20a5ae7f6055dc98d8ae"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat, Rlt_0_2.",
                        "VernacExtend",
                        "3abccb6f76a72b816de9995e74c7f953b6cff456"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with z; assumption.",
                        "VernacExtend",
                        "df1772ec8a7b0e615c6df252c51cf3c8c039f50d"
                    ]
                },
                {
                    "command": [
                        "destruct (boule_of_interval _ _ cmp) as [c [r [P1 P2]]].",
                        "VernacExtend",
                        "fb568ec4972df2fa0798d0c9fbfb77f1614cdcd2"
                    ]
                },
                {
                    "command": [
                        "assert (0 < /2) by (apply Rinv_0_lt_compat, Rlt_0_2).",
                        "VernacExtend",
                        "fce8bf6be09f6f72433888e65c43cfa4ae52fd9e"
                    ]
                },
                {
                    "command": [
                        "exists c, r; split.",
                        "VernacExtend",
                        "19a841a4b22c702430d429e3b9a4de22745ab3be"
                    ]
                },
                {
                    "command": [
                        "destruct h; unfold Boule; simpl; apply Rabs_def1.",
                        "VernacExtend",
                        "a866ed4657d5e6af486397a66eeb54b1b8d89780"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with c; rewrite P2; replace (c + (z - c)) with (z * / 2 + z * / 2) by field.",
                        "VernacExtend",
                        "bbf04932a96e7e332f6e0bbd0276e66032b9be75"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l, Rmult_lt_compat_r;assumption.",
                        "VernacExtend",
                        "691c3ac8c4b5e0dd1d0fd79b45ce274522b9872f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with c; change (c + - r) with (c - r); rewrite P1; replace (c + (z - c)) with (z * / 2 + z * / 2) by field.",
                        "VernacExtend",
                        "b3ccc91a7a1e6d11f212a100614c3d0ee6e473a6"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r, Rmult_lt_compat_r;assumption.",
                        "VernacExtend",
                        "2ec582cb7d9183c6dc38e6fcab52ca54349d910e"
                    ]
                },
                {
                    "command": [
                        "destruct h; split.",
                        "VernacExtend",
                        "f6e883a21be43e567cd4d91f5de1b04b4791639f"
                    ]
                },
                {
                    "command": [
                        "replace x with (x * / 2 + x * / 2) by field; rewrite P1.",
                        "VernacExtend",
                        "17ecac505f77a47f58650a0f89444e1049fab746"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l, Rmult_lt_compat_r;assumption.",
                        "VernacExtend",
                        "691c3ac8c4b5e0dd1d0fd79b45ce274522b9872f"
                    ]
                },
                {
                    "command": [
                        "replace y with (y * / 2 + y * /2) by field; rewrite P2.",
                        "VernacExtend",
                        "2ce57a85fdcdb29809ddbde3f901af8cf5a08172"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r, Rmult_lt_compat_r;assumption.",
                        "VernacExtend",
                        "2ec582cb7d9183c6dc38e6fcab52ca54349d910e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Ball_in_inter",
            "line_nb": 43,
            "steps": [
                {
                    "command": [
                        "intros c1 c2 [r1 r1p] [r2 r2p] x; unfold Boule; simpl; intros in1 in2.",
                        "VernacExtend",
                        "df9643cae7fd218c01373bd843f3dbf152da9508"
                    ]
                },
                {
                    "command": [
                        "assert (Rmax (c1 - r1)(c2 - r2) < x).",
                        "VernacExtend",
                        "ac5302d09163024273f93ce952580add1d78a399"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_lub_lt;[revert in1 | revert in2]; intros h; apply Rabs_def2 in h; destruct h as [_ u]; apply (fun h => Rplus_lt_reg_r _ _ _ (Rle_lt_trans _ _ _ h u)), Req_le; ring.",
                        "VernacExtend",
                        "f7813c2a7966b451349e0eb1b6ad9fa81638606e"
                    ]
                },
                {
                    "command": [
                        "assert (x < Rmin (c1 + r1) (c2 + r2)).",
                        "VernacExtend",
                        "4aadfe91d94ed6313f08c815cffe97f02b765b31"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_glb_lt;[revert in1 | revert in2]; intros h; apply Rabs_def2 in h; destruct h as [u _]; apply (fun h => Rplus_lt_reg_r _ _ _ (Rlt_le_trans _ _ _ u h)), Req_le; ring.",
                        "VernacExtend",
                        "b4be6f55c0f69e1161859008bd532877a221983d"
                    ]
                },
                {
                    "command": [
                        "assert (t: 0 < Rmin (x - Rmax (c1 - r1) (c2 - r2)) (Rmin (c1 + r1) (c2 + r2) - x)).",
                        "VernacExtend",
                        "12076225f205755b54090cfd5c5853efe712b08b"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_glb_lt; apply Rlt_Rminus; assumption.",
                        "VernacExtend",
                        "6cd0b6fd064d1c93b160e880393d702fb1725764"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ t).",
                        "VernacExtend",
                        "0485d4df9a9bda0788124070109497cfb5c41fca"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in in1; destruct in1.",
                        "VernacExtend",
                        "951b47a6c3eb06b12ce05f48b8608ea45b18dbd2"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_def2 in in2; destruct in2.",
                        "VernacExtend",
                        "90603f466910d7226f80303c45424fed95be26e5"
                    ]
                },
                {
                    "command": [
                        "assert (c1 - r1 <= Rmax (c1 - r1) (c2 - r2)) by apply Rmax_l.",
                        "VernacExtend",
                        "12c06a0508c5a0cc04f3ac9558f6799ed8f43f62"
                    ]
                },
                {
                    "command": [
                        "assert (c2 - r2 <= Rmax (c1 - r1) (c2 - r2)) by apply Rmax_r.",
                        "VernacExtend",
                        "a420dea2fc013ee706e0f95b3f74cfcae23e2945"
                    ]
                },
                {
                    "command": [
                        "assert (Rmin (c1 + r1) (c2 + r2) <= c1 + r1) by apply Rmin_l.",
                        "VernacExtend",
                        "2449aa2a51c77700a6428aea48ccd6b56a252ce4"
                    ]
                },
                {
                    "command": [
                        "assert (Rmin (c1 + r1) (c2 + r2) <= c2 + r2) by apply Rmin_r.",
                        "VernacExtend",
                        "d5c07aba09f8ec3d0ca213be7f0cbf718a6a810a"
                    ]
                },
                {
                    "command": [
                        "assert (Rmin (x - Rmax (c1 - r1) (c2 - r2)) (Rmin (c1 + r1) (c2 + r2) - x) <= x - Rmax (c1 - r1) (c2 - r2)) by apply Rmin_l.",
                        "VernacExtend",
                        "f6e681f35d1b34776a738364014d9a474f1d4c76"
                    ]
                },
                {
                    "command": [
                        "assert (Rmin (x - Rmax (c1 - r1) (c2 - r2)) (Rmin (c1 + r1) (c2 + r2) - x) <= Rmin (c1 + r1) (c2 + r2) - x) by apply Rmin_r.",
                        "VernacExtend",
                        "cba18f83bc9db139666e8530c84894d75f27ec59"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "intros y h; apply Rabs_def2 in h; destruct h as [h h'].",
                        "VernacExtend",
                        "169e97f4d091b6e3a91dfabf1c0359cf1bc4c65a"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_Rgt in h; destruct h as [cmp1 cmp2].",
                        "VernacExtend",
                        "084a45b53baadf9036e4f14e95fbb56cf7786690"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_r in cmp2; apply Rmin_Rgt in cmp2.",
                        "VernacExtend",
                        "a8181da8914313adcde04e7458f7d4d096a97b9b"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_Rmin, Ropp_minus_distr in h'.",
                        "VernacExtend",
                        "438b79dbfff1b48e109418b7c462d43b3a696a8f"
                    ]
                },
                {
                    "command": [
                        "apply Rmax_Rlt in h'; destruct h' as [cmp3 cmp4]; apply Rplus_lt_reg_r in cmp3; apply Rmax_Rlt in cmp3; split; apply Rabs_def1.",
                        "VernacExtend",
                        "6fa3ed49a020b66c8a13a93299da25fd2aea6c34"
                    ]
                },
                {
                    "command": [
                        "apply (fun h => Rplus_lt_reg_l _ _ _ (Rle_lt_trans _ _ _ h (proj1 cmp2))), Req_le; ring.",
                        "VernacExtend",
                        "3a201c0ad8ac935e54f3a6ff64c32dfe32a1835a"
                    ]
                },
                {
                    "command": [
                        "apply (fun h => Rplus_lt_reg_l _ _ _ (Rlt_le_trans _ _ _ (proj1 cmp3) h)), Req_le; ring.",
                        "VernacExtend",
                        "ba3f49e851a9eac0d2d2af781ee879c364900e6f"
                    ]
                },
                {
                    "command": [
                        "apply (fun h => Rplus_lt_reg_l _ _ _ (Rle_lt_trans _ _ _ h (proj2 cmp2))), Req_le; ring.",
                        "VernacExtend",
                        "118e6c206e59f35e50936a096bfed23cde08cb83"
                    ]
                },
                {
                    "command": [
                        "apply (fun h => Rplus_lt_reg_l _ _ _ (Rlt_le_trans _ _ _ (proj2 cmp3) h)), Req_le; ring.",
                        "VernacExtend",
                        "641378651f427fd83a33fb57176efaefb0aad7f1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Boule_center",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "intros x [r rpos]; unfold Boule, Rminus; simpl; rewrite Rplus_opp_r.",
                        "VernacExtend",
                        "295a202fc2da828bf0d2a1a8c146d24aa54a00ea"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_pos_eq;[assumption | apply Rle_refl].",
                        "VernacExtend",
                        "e5546c32b3eaa138ea2e0252047f0b48d61eda13"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CVN_CVU",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "intros; unfold CVU; intros.",
                        "VernacExtend",
                        "005d543581889f8bdb077d4357d7ac5d1c297f1e"
                    ]
                },
                {
                    "command": [
                        "unfold CVN_r in X.",
                        "VernacExtend",
                        "586fd91a44318004b2e3f92aa3a37a0b783f2a31"
                    ]
                },
                {
                    "command": [
                        "elim X; intros An X0.",
                        "VernacExtend",
                        "e662af7657feb7758579a9809b8b34544ffd93e6"
                    ]
                },
                {
                    "command": [
                        "elim X0; intros s H0.",
                        "VernacExtend",
                        "6a9caac90d2e229641daac56db80780b28a597ab"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros.",
                        "VernacExtend",
                        "6b83f392a470a8cdaa118e532bc445a009dec854"
                    ]
                },
                {
                    "command": [
                        "cut (Un_cv (fun n:nat => sum_f_R0 (fun k:nat => Rabs (An k)) n - s) 0).",
                        "VernacExtend",
                        "96ebc1180ee1e01e0d62224613430cf17150bf95"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Un_cv in H3.",
                        "VernacExtend",
                        "f2f10908dd5a2d93cc01ac8e90d6c1b5e55e5382"
                    ]
                },
                {
                    "command": [
                        "elim (H3 eps H); intros N0 H4.",
                        "VernacExtend",
                        "1a1ae84064cc0cd4a16813b9aeeb8fabf52766b1"
                    ]
                },
                {
                    "command": [
                        "exists N0; intros.",
                        "VernacExtend",
                        "e5b9decd3fd5f06277bf4eeacb6fae2a2f851d31"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (sum_f_R0 (fun k:nat => Rabs (An k)) n - s)).",
                        "VernacExtend",
                        "013780ac2f4210977935bb226df5e1c3f94d88ab"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_Ropp (sum_f_R0 (fun k:nat => Rabs (An k)) n - s)); rewrite Ropp_minus_distr'; rewrite (Rabs_right (s - sum_f_R0 (fun k:nat => Rabs (An k)) n)).",
                        "VernacExtend",
                        "eab0496167c158a6e8dbf3e36fab63831856aada"
                    ]
                },
                {
                    "command": [
                        "eapply sum_maj1.",
                        "VernacExtend",
                        "2fda2922d4fe3b5269575122e84931f9e0a3b107"
                    ]
                },
                {
                    "command": [
                        "unfold SFL; case (cv y); intro.",
                        "VernacExtend",
                        "0595ec7905b24c08079f91796729048b853e11e4"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "intro; elim H0; intros.",
                        "VernacExtend",
                        "374db79e6482fec65548ecf30bf5c4735e72248c"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rabs_right (An n0)).",
                        "VernacExtend",
                        "aba7af33be5927d1ae67ac1d6cdbaa27a4fd3f48"
                    ]
                },
                {
                    "command": [
                        "apply H8; apply H6.",
                        "VernacExtend",
                        "b76eb8edc85dbf00c149c175e2e41b8d3432057b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply Rle_trans with (Rabs (fn n0 y)).",
                        "VernacExtend",
                        "7f34cf4102ca4852297baac5730c470c8e5322fe"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "apply H8; apply H6.",
                        "VernacExtend",
                        "b76eb8edc85dbf00c149c175e2e41b8d3432057b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply Rplus_le_reg_l with (sum_f_R0 (fun k:nat => Rabs (An k)) n).",
                        "VernacExtend",
                        "26379be19139ed513005d58c61a9abacb54b1b2b"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; unfold Rminus; rewrite (Rplus_comm s); rewrite <- Rplus_assoc; rewrite Rplus_opp_r; rewrite Rplus_0_l; apply sum_incr.",
                        "VernacExtend",
                        "3dc761729cfd8f1818388ae226097046a1b4cddc"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "intro; apply Rabs_pos.",
                        "VernacExtend",
                        "c22a03ac2101c9e1f8bb586345faaee764de726c"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist in H4; unfold Rminus in H4; rewrite Ropp_0 in H4.",
                        "VernacExtend",
                        "c054a66b0e73e8a5b663aba4f0bb7140a5aae1c6"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := H4 n H5).",
                        "VernacExtend",
                        "d16d08155001a83ae8a864bd5dd82982481bef6f"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r in H7; apply H7.",
                        "VernacExtend",
                        "06fa04c1991ce7b9a919f1ab27a15e1375a6b900"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv in H1; unfold Un_cv; intros.",
                        "VernacExtend",
                        "2589728012db7b1337e6ba78a57b750f2841429d"
                    ]
                },
                {
                    "command": [
                        "elim (H1 _ H3); intros.",
                        "VernacExtend",
                        "c9372bd0a3017fa9613d1e3ee7df742c8ac62dca"
                    ]
                },
                {
                    "command": [
                        "exists x; intros.",
                        "VernacExtend",
                        "630f24a2d635df94b063a62023a90567ef134b19"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; unfold R_dist in H4.",
                        "VernacExtend",
                        "5ab0db6c67500d6e1b1e6ed3ce5015b19d016576"
                    ]
                },
                {
                    "command": [
                        "rewrite Rminus_0_r; apply H4; assumption.",
                        "VernacExtend",
                        "143709351d2b10a1ea715adda69cf2a2406aae8a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CVU_continuity",
            "line_nb": 114,
            "steps": [
                {
                    "command": [
                        "intros; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros.",
                        "VernacExtend",
                        "2a872ff6d81bcc988b1e5378650e2389752b7396"
                    ]
                },
                {
                    "command": [
                        "unfold CVU in H.",
                        "VernacExtend",
                        "e9e488088032a2c916a3371411ddb1756f7be19c"
                    ]
                },
                {
                    "command": [
                        "cut (0 < eps / 3); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
                        "VernacExtend",
                        "312bf6b7dc28d2d480ba78632e5e5b4d2e3c2235"
                    ]
                },
                {
                    "command": [
                        "elim (H _ H3); intros N0 H4.",
                        "VernacExtend",
                        "f8e3f53984ddda4467631fc8c3d8d3b844e8b8f6"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := H0 N0 y H1).",
                        "VernacExtend",
                        "c50f0a70ee14d8308693f3dccd4aac3b7dbd6f80"
                    ]
                },
                {
                    "command": [
                        "cut (exists del : posreal, (forall h:R, Rabs h < del -> Boule x r (y + h))).",
                        "VernacExtend",
                        "5e4612e73e1482f56dd16ee68380054dc75682b3"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "elim H6; intros del1 H7.",
                        "VernacExtend",
                        "e40c390a25483fc22be9d0b074900a455ea57181"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt in H5; unfold continue_in in H5; unfold limit1_in in H5; unfold limit_in in H5; simpl in H5; unfold R_dist in H5.",
                        "VernacExtend",
                        "c060dc7ae17c453beb452502480df99249219987"
                    ]
                },
                {
                    "command": [
                        "elim (H5 _ H3); intros del2 H8.",
                        "VernacExtend",
                        "09b370a32445e52de1632b156066ca3ace90f65f"
                    ]
                },
                {
                    "command": [
                        "set (del := Rmin del1 del2).",
                        "VernacExtend",
                        "f13986be7a13bcd30f1f6f4f3e03e1cb2a89a488"
                    ]
                },
                {
                    "command": [
                        "exists del; intros.",
                        "VernacExtend",
                        "960e294536a0fd870669b0ce0582074331ea58a5"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold del; unfold Rmin; case (Rle_dec del1 del2); intro.",
                        "VernacExtend",
                        "0c523b6d64596ce205f3b39b7283ec1024880b2a"
                    ]
                },
                {
                    "command": [
                        "apply (cond_pos del1).",
                        "VernacExtend",
                        "f21d5a1f3d89787a1bde51b4be0e63b7d67ba1c5"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; assumption.",
                        "VernacExtend",
                        "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
                    ]
                },
                {
                    "command": [
                        "intros; apply Rle_lt_trans with (Rabs (f x0 - fn N0 x0) + Rabs (fn N0 x0 - f y)).",
                        "VernacExtend",
                        "41dd50d97fc9bb1ad9e2764c5f12d5e2617f18bd"
                    ]
                },
                {
                    "command": [
                        "replace (f x0 - f y) with (f x0 - fn N0 x0 + (fn N0 x0 - f y)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "b09d1f575755c3263a277c261468f0354e817598"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (f x0 - fn N0 x0) + Rabs (fn N0 x0 - fn N0 y) + Rabs (fn N0 y - f y)).",
                        "VernacExtend",
                        "884d3d4986d29ca41dcc1113210768fd5a0b35ca"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc; apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "acf8e5b51c9d2f8867cbf11b3788dea7e7c86e41"
                    ]
                },
                {
                    "command": [
                        "replace (fn N0 x0 - f y) with (fn N0 x0 - fn N0 y + (fn N0 y - f y)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "1a249025c8980fe511ce31f8bb561d4fb4f23fdf"
                    ]
                },
                {
                    "command": [
                        "replace eps with (eps / 3 + eps / 3 + eps / 3).",
                        "VernacExtend",
                        "6797ce7dc3530593281c08e040087e79daac0049"
                    ]
                },
                {
                    "command": [
                        "repeat apply Rplus_lt_compat.",
                        "VernacExtend",
                        "57c369d5b309a04c5472ef7f32c33977152ecb0c"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "apply le_n.",
                        "VernacExtend",
                        "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
                    ]
                },
                {
                    "command": [
                        "replace x0 with (y + (x0 - y)); [ idtac | ring ]; apply H7.",
                        "VernacExtend",
                        "2b0afebb3cd1e5aa386d38d08d956564ba6dd318"
                    ]
                },
                {
                    "command": [
                        "elim H9; intros.",
                        "VernacExtend",
                        "12334c97f44957e9c5cef0f3af9bfd7eaf28bd49"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with del.",
                        "VernacExtend",
                        "3a420d4df043bed756c5f541b7e1c7da58a7eb00"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold del; apply Rmin_l.",
                        "VernacExtend",
                        "46c0bfc6c0d150fb8634f72c6e90b5099e5e8470"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros.",
                        "VernacExtend",
                        "54bacf1a2e9fa49626cbb57c551336659e39bf7a"
                    ]
                },
                {
                    "command": [
                        "apply H11.",
                        "VernacExtend",
                        "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "elim H9; intros; assumption.",
                        "VernacExtend",
                        "8fe07a35a5ab7cf96f2efb2baff6e494f333a6ed"
                    ]
                },
                {
                    "command": [
                        "elim H9; intros; apply Rlt_le_trans with del.",
                        "VernacExtend",
                        "d70afb135caaec4362e1c9e51038d5157678acde"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold del; apply Rmin_r.",
                        "VernacExtend",
                        "c536207438a9729d0133d46b830f0dafa947b49a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr'; apply H4.",
                        "VernacExtend",
                        "8302017f27b4a12f82b324697f029854650d405f"
                    ]
                },
                {
                    "command": [
                        "apply le_n.",
                        "VernacExtend",
                        "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_eq_reg_l with 3.",
                        "VernacExtend",
                        "99af9ad8772a05fbe3433014121663ee4d111378"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite Rmult_plus_distr_l; unfold Rdiv; rewrite <- Rmult_assoc; rewrite Rinv_r_simpl_m.",
                        "VernacExtend",
                        "ef2dbda4ec327b03368ce5a2e813f494910e297c"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "cut (0 < r - Rabs (x - y)).",
                        "VernacExtend",
                        "4e9e0504b29e18b0f4b0f52789afa6c3551ed452"
                    ]
                },
                {
                    "command": [
                        "intro; exists (mkposreal _ H6).",
                        "VernacExtend",
                        "3196d76ec32646537fcce1cf62792519c857c1b1"
                    ]
                },
                {
                    "command": [
                        "simpl; intros.",
                        "VernacExtend",
                        "429a59199da524088af55673600740ccc58db31e"
                    ]
                },
                {
                    "command": [
                        "unfold Boule; replace (y + h - x) with (h + (y - x)); [ idtac | ring ]; apply Rle_lt_trans with (Rabs h + Rabs (y - x)).",
                        "VernacExtend",
                        "36ed9812982293ad97fcfd544ffb36c62e75b0a2"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (- Rabs (x - y)).",
                        "VernacExtend",
                        "25a8715f4499600d21335f8229e71c9ba653a5a9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_Ropp (y - x)); rewrite Ropp_minus_distr'.",
                        "VernacExtend",
                        "c7617f2fd821d3b2bce13f05b4c40da0ee24b117"
                    ]
                },
                {
                    "command": [
                        "replace (- Rabs (x - y) + r) with (r - Rabs (x - y)).",
                        "VernacExtend",
                        "dd26dc216d3599acf5a3e54e0f0b067b047228f5"
                    ]
                },
                {
                    "command": [
                        "replace (- Rabs (x - y) + (Rabs h + Rabs (x - y))) with (Rabs h).",
                        "VernacExtend",
                        "f74880af19a6471baa4d8791151395c5002b4436"
                    ]
                },
                {
                    "command": [
                        "apply H7.",
                        "VernacExtend",
                        "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold Boule in H1; rewrite <- (Rabs_Ropp (x - y)); rewrite Ropp_minus_distr'; apply Rplus_lt_reg_l with (Rabs (y - x)).",
                        "VernacExtend",
                        "64690cbf7ee73be5c2ac15c0604d39ee9cd0afcd"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (Rabs (y - x) + (r - Rabs (y - x))) with (pos r); [ apply H1 | ring ].",
                        "VernacExtend",
                        "5b90db1f69eca6e9a2e6c416792d73f13873e922"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_pt_finite_SF",
            "line_nb": 175,
            "steps": [
                {
                    "command": [
                        "intros; induction N as [| N HrecN].",
                        "VernacExtend",
                        "176c4a7e299087f2a01baed2bde05aa27663e10d"
                    ]
                },
                {
                    "command": [
                        "simpl; apply (H 0%nat); apply le_n.",
                        "VernacExtend",
                        "6c5e2bbbb5105d2a0a23e2adbf27f564d585eb93"
                    ]
                },
                {
                    "command": [
                        "simpl; replace (fun y:R => sum_f_R0 (fun k:nat => fn k y) N + fn (S N) y) with ((fun y:R => sum_f_R0 (fun k:nat => fn k y) N) + (fun y:R => fn (S N) y))%F; [ idtac | reflexivity ].",
                        "VernacExtend",
                        "75ca76084bdfd4f28d71116e29fc26f9e3799397"
                    ]
                },
                {
                    "command": [
                        "apply continuity_pt_plus.",
                        "VernacExtend",
                        "a6988b4dccb2d67c113df6f4855fc8f9f3dc6065"
                    ]
                },
                {
                    "command": [
                        "apply HrecN.",
                        "VernacExtend",
                        "ec9b348a0961f8ea4434987bb268364b3d8f639c"
                    ]
                },
                {
                    "command": [
                        "intros; apply H.",
                        "VernacExtend",
                        "b7bca165a275b11a76ba06a5f07157259bedeabd"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with N; [ assumption | apply le_n_Sn ].",
                        "VernacExtend",
                        "1aa48b0d1a3194c938aec0991fe7680aebe1ee08"
                    ]
                },
                {
                    "command": [
                        "apply (H (S N)); apply le_n.",
                        "VernacExtend",
                        "5ad13f3105b961b342b586ae6f33a43a9760510a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "SFL_continuity",
            "line_nb": 194,
            "steps": [
                {
                    "command": [
                        "intros; unfold continuity; intro.",
                        "VernacExtend",
                        "e438fc1f32fb0c2d5d1c3ff2805457f90c2eb402"
                    ]
                },
                {
                    "command": [
                        "cut (0 < Rabs x + 1); [ intro | apply Rplus_le_lt_0_compat; [ apply Rabs_pos | apply Rlt_0_1 ] ].",
                        "VernacExtend",
                        "9344837f1013586e855e1dccbc5e148991d19a16"
                    ]
                },
                {
                    "command": [
                        "cut (Boule 0 (mkposreal _ H0) x).",
                        "VernacExtend",
                        "49733544f214f9bda812647e42fa14e63313dfe3"
                    ]
                },
                {
                    "command": [
                        "intro; eapply SFL_continuity_pt with (mkposreal _ H0).",
                        "VernacExtend",
                        "48addebd189e833aebb8e518326338e72746d15c"
                    ]
                },
                {
                    "command": [
                        "apply X.",
                        "VernacExtend",
                        "1a06263bf241d2c272a11be0f0a1522334cc2c93"
                    ]
                },
                {
                    "command": [
                        "intros; apply (H n y).",
                        "VernacExtend",
                        "0776df60e8aa20c0603b03c861a0956f79dbee3f"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "unfold Boule; simpl; rewrite Rminus_0_r; pattern (Rabs x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1.",
                        "VernacExtend",
                        "a6a4fc8588fface863a39815e1ece8d863809d3f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CVN_R_CVS",
            "line_nb": 204,
            "steps": [
                {
                    "command": [
                        "intros; apply R_complete.",
                        "VernacExtend",
                        "62cbfa5754a768c85bd39b4cefd3504f9956492e"
                    ]
                },
                {
                    "command": [
                        "unfold SP; set (An := fun N:nat => fn N x).",
                        "VernacExtend",
                        "5e8af3f8d6e9aa8ff961f4098ec5fdb7c156ef10"
                    ]
                },
                {
                    "command": [
                        "change (Cauchy_crit_series An).",
                        "VernacExtend",
                        "1a351f75a1437d2064d62aab9266ed68c6cf8c8b"
                    ]
                },
                {
                    "command": [
                        "apply cauchy_abs.",
                        "VernacExtend",
                        "a1df9e931d188b753541aa8886a07c1f4b85af90"
                    ]
                },
                {
                    "command": [
                        "unfold Cauchy_crit_series; apply CV_Cauchy.",
                        "VernacExtend",
                        "b08acb7ded7bb133bffe7c7ad8821b828a31b269"
                    ]
                },
                {
                    "command": [
                        "unfold CVN_R in X; cut (0 < Rabs x + 1).",
                        "VernacExtend",
                        "296bbe7c1dfacb9eebfedbca021ceb2462ec687a"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H0 := X (mkposreal _ H)).",
                        "VernacExtend",
                        "2edd653fa3779250a3f47310f40a1346fc1cf1b1"
                    ]
                },
                {
                    "command": [
                        "unfold CVN_r in H0; elim H0; intros Bn H1.",
                        "VernacExtend",
                        "e9789fd0181fad9e03f0508d2ee4dc8a9b576be0"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros l H2.",
                        "VernacExtend",
                        "af0d57eef5b296e2db7251f0a9f02f89652bf1d4"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros.",
                        "VernacExtend",
                        "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
                    ]
                },
                {
                    "command": [
                        "apply Rseries_CV_comp with Bn.",
                        "VernacExtend",
                        "9bffc74629e79faf17d39b9383eb4768dd0fa74a"
                    ]
                },
                {
                    "command": [
                        "intro; split.",
                        "VernacExtend",
                        "fab266bb307ddec4a6ab91d7f2efd84a9c1736ef"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "unfold An; apply H4; unfold Boule; simpl; rewrite Rminus_0_r.",
                        "VernacExtend",
                        "58f7f9f9c0d4f7cfb5fbcf22bcf574558605eb4f"
                    ]
                },
                {
                    "command": [
                        "pattern (Rabs x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1.",
                        "VernacExtend",
                        "2d374f096d21d1ef7c9fa65b1ec2c767ec0c6448"
                    ]
                },
                {
                    "command": [
                        "exists l.",
                        "VernacExtend",
                        "9ca96dacfce153d20a69dd7ea7c7254236074950"
                    ]
                },
                {
                    "command": [
                        "cut (forall n:nat, 0 <= Bn n).",
                        "VernacExtend",
                        "773b636633f7520bb8a3ec4248c664c1dea92c73"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Un_cv in H3; unfold Un_cv; intros.",
                        "VernacExtend",
                        "c8d98f871d51eb57e0e9537a6311ce71abf2d08d"
                    ]
                },
                {
                    "command": [
                        "elim (H3 _ H6); intros.",
                        "VernacExtend",
                        "12551d730ddc9437e6c9c6a880d2126abe89ca57"
                    ]
                },
                {
                    "command": [
                        "exists x0; intros.",
                        "VernacExtend",
                        "5bc9f78cbd3bd0b9d5ad70bca80ff875ab1656fa"
                    ]
                },
                {
                    "command": [
                        "replace (sum_f_R0 Bn n) with (sum_f_R0 (fun k:nat => Rabs (Bn k)) n).",
                        "VernacExtend",
                        "b1547886ecb32a6686d44d487af5290a0ad7a446"
                    ]
                },
                {
                    "command": [
                        "apply H7; assumption.",
                        "VernacExtend",
                        "5fe9a2981bc9efdad06860c6328e07e091570990"
                    ]
                },
                {
                    "command": [
                        "apply sum_eq; intros; apply Rabs_right; apply Rle_ge; apply H5.",
                        "VernacExtend",
                        "fd6198c2bec19a45ee9f9221b6cca0360ada096b"
                    ]
                },
                {
                    "command": [
                        "intro; apply Rle_trans with (Rabs (An n)).",
                        "VernacExtend",
                        "4de224f39997aef2d6f2514d347bc0c437e9424a"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "unfold An; apply H4; unfold Boule; simpl; rewrite Rminus_0_r; pattern (Rabs x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1.",
                        "VernacExtend",
                        "55e3de5fd191fcc45ef2d96bc3b24191e1a9efa0"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat; [ apply Rabs_pos | apply Rlt_0_1 ].",
                        "VernacExtend",
                        "1443ea4329ef42a3fc983dc5c15eb757020f4332"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CVU_cv",
            "line_nb": 233,
            "steps": [
                {
                    "command": [
                        "intros f g c d cvu x bx eps ep; destruct (cvu eps ep) as [N Pn].",
                        "VernacExtend",
                        "17f9ee2e8e37d4cc8973ff8fdb68cdeea64a77a7"
                    ]
                },
                {
                    "command": [
                        "exists N; intros n nN; rewrite R_dist_sym; apply Pn; assumption.",
                        "VernacExtend",
                        "e0a383a2665acfc95575da77f12496b224ba0ab6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CVU_ext_lim",
            "line_nb": 237,
            "steps": [
                {
                    "command": [
                        "intros f g1 g2 c d cvu q eps ep; destruct (cvu _ ep) as [N Pn].",
                        "VernacExtend",
                        "f010395101b0ceb1075c022529eecbc6d13c2628"
                    ]
                },
                {
                    "command": [
                        "exists N; intros; rewrite <- q; auto.",
                        "VernacExtend",
                        "861ca360816252a6111539830f901235cfb5691d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CVU_derivable",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "intros f f' g g' c d cvu cvp dff' x bx.",
                        "VernacExtend",
                        "ffb3f5b5b23d4a314ce519d73eed294bc13dfad9"
                    ]
                },
                {
                    "command": [
                        "set (rho_ := fun n y => if Req_EM_T y x then f' n x else ((f n y - f n x)/ (y - x))).",
                        "VernacExtend",
                        "06fa3974c3b3f6661084f9335a9ba0efb0384ce5"
                    ]
                },
                {
                    "command": [
                        "set (rho := fun y => if Req_EM_T y x then g' x else (g y - g x)/(y - x)).",
                        "VernacExtend",
                        "e9c0f57f588f8311c131be524a0096d5f49d4b8c"
                    ]
                },
                {
                    "command": [
                        "assert (ctrho : forall n z, Boule c d z -> continuity_pt (rho_ n) z).",
                        "VernacExtend",
                        "0d1a533040f4f4fdb63ee327091e4bf1b8f9baa5"
                    ]
                },
                {
                    "command": [
                        "intros n z bz.",
                        "VernacExtend",
                        "5f95ac9e73b813e779d57a148c5d5c6b31503849"
                    ]
                },
                {
                    "command": [
                        "destruct (Req_EM_T x z) as [xz | xnz].",
                        "VernacExtend",
                        "89a47b0aebba8c3d60a38001fc3dd393b936e707"
                    ]
                },
                {
                    "command": [
                        "rewrite <- xz.",
                        "VernacExtend",
                        "a8e17c58c1ef2975d7882a39c758fe3d4d4b2ac1"
                    ]
                },
                {
                    "command": [
                        "intros eps' ep'.",
                        "VernacExtend",
                        "08b75ab0fd6b53af7da3e825e0d0aaf3ab301fa3"
                    ]
                },
                {
                    "command": [
                        "destruct (dff' n x bx eps' ep') as [alp Pa].",
                        "VernacExtend",
                        "332c0f0bfe143e58565f3b5e2ce2d20fd840664a"
                    ]
                },
                {
                    "command": [
                        "exists (pos alp);split;[apply cond_pos | ].",
                        "VernacExtend",
                        "a5ae188ed6e157d8d52640954c033b5f1ffcaa30"
                    ]
                },
                {
                    "command": [
                        "intros z'; unfold rho_, D_x, dist, R_met; simpl; intros [[_ xnz'] dxz'].",
                        "VernacExtend",
                        "0e6f24e14dbff41efcaae9c5ef89b0ce2529f77b"
                    ]
                },
                {
                    "command": [
                        "destruct (Req_EM_T z' x) as [abs | _].",
                        "VernacExtend",
                        "1c559be5ce86af9d9976e01e41fea08d5aebf0cc"
                    ]
                },
                {
                    "command": [
                        "case xnz'; symmetry; exact abs.",
                        "VernacExtend",
                        "0c06d9357b381ea6c42cba60da25b7b4ae9835dc"
                    ]
                },
                {
                    "command": [
                        "destruct (Req_EM_T x x) as [_ | abs];[ | case abs; reflexivity].",
                        "VernacExtend",
                        "b1469f42518f5980cc3b117ebc720ffe00c9d9de"
                    ]
                },
                {
                    "command": [
                        "pattern z' at 1; replace z' with (x + (z' - x)) by ring.",
                        "VernacExtend",
                        "1e810e12d60ab0d3b443e856f7c27ed8b0eb0959"
                    ]
                },
                {
                    "command": [
                        "apply Pa;[intros h; case xnz'; replace z' with (z' - x + x) by ring; rewrite h, Rplus_0_l; reflexivity | exact dxz'].",
                        "VernacExtend",
                        "11588df2be52dd6ae52b0193f7de58e25245416f"
                    ]
                },
                {
                    "command": [
                        "destruct (Ball_in_inter c c d d z bz bz) as [delta Pd].",
                        "VernacExtend",
                        "8b7b3bfb99c56aaf9f2e533d1b4962f1107e100a"
                    ]
                },
                {
                    "command": [
                        "assert (dz : 0 < Rmin delta (Rabs (z - x))).",
                        "VernacExtend",
                        "d6f790d992c4337570caaffe7fa6070dbd742a3a"
                    ]
                },
                {
                    "command": [
                        "now apply Rmin_glb_lt;[apply cond_pos | apply Rabs_pos_lt; intros zx0; case xnz; replace z with (z - x + x) by ring; rewrite zx0, Rplus_0_l].",
                        "VernacExtend",
                        "77f3ba5af332160b26f512fee47bb6a01a70d1a9"
                    ]
                },
                {
                    "command": [
                        "assert (t' : forall y : R, R_dist y z < Rmin delta (Rabs (z - x)) -> (fun z : R => (f n z - f n x) / (z - x)) y = rho_ n y).",
                        "VernacExtend",
                        "887158214057f11ff634c558f75a9ba75cce62d0"
                    ]
                },
                {
                    "command": [
                        "intros y dyz; unfold rho_; destruct (Req_EM_T y x) as [xy | xny].",
                        "VernacExtend",
                        "8d8b2618e4c620d461b50b9db87a3249bb71a078"
                    ]
                },
                {
                    "command": [
                        "rewrite xy in dyz.",
                        "VernacExtend",
                        "7fb800f4dd53a9661bc7a2bb6a162854e1a9f130"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec delta (Rabs (z - x))).",
                        "VernacExtend",
                        "23634119da0566b7d35a25c4ba557f68212b3d45"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmin_left, R_dist_sym in dyz; unfold R_dist in dyz; lra.",
                        "VernacExtend",
                        "5f41e70889fb9ed65f9bca2c43ea8b86dfcd74a0"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmin_right, R_dist_sym in dyz; unfold R_dist in dyz; [case (Rlt_irrefl _ dyz) |apply Rlt_le, Rnot_le_gt; assumption].",
                        "VernacExtend",
                        "6b788bed2342bbda39f957bcb2b0bcf8546cd839"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply (continuity_pt_locally_ext (fun z => (f n z - f n x)/(z - x)) (rho_ n) _ z dz t'); clear t'.",
                        "VernacExtend",
                        "ed05b35382f15e6f718352f8b013f288b29f7770"
                    ]
                },
                {
                    "command": [
                        "apply continuity_pt_div.",
                        "VernacExtend",
                        "896110b0ac58a7a541de566d6a745a821b98996d"
                    ]
                },
                {
                    "command": [
                        "apply continuity_pt_minus.",
                        "VernacExtend",
                        "ee124f243d9a30e1165f89a65c2280f21b3b2888"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous_pt; eapply exist; apply dff'; assumption.",
                        "VernacExtend",
                        "a8c8032307ed87cb9c294edfca463f15d5cc69c0"
                    ]
                },
                {
                    "command": [
                        "apply continuity_pt_const; intro; intro; reflexivity.",
                        "VernacExtend",
                        "9ea232f6776d0bd7506ed38241146981fe56ea4b"
                    ]
                },
                {
                    "command": [
                        "apply continuity_pt_minus; [apply derivable_continuous_pt; exists 1; apply derivable_pt_lim_id | apply continuity_pt_const; intro; reflexivity].",
                        "VernacExtend",
                        "52f749d3c9df94fb9dcd90c08c9cb6444b0e8385"
                    ]
                },
                {
                    "command": [
                        "intros zx0; case xnz; replace z with (z - x + x) by ring.",
                        "VernacExtend",
                        "cf17899cdf036705c5fa9be73c921d6025f9fb98"
                    ]
                },
                {
                    "command": [
                        "rewrite zx0, Rplus_0_l; reflexivity.",
                        "VernacExtend",
                        "01a9b55b1b4a813f8757818c0a768530b1f88f50"
                    ]
                },
                {
                    "command": [
                        "assert (CVU rho_ rho c d ).",
                        "VernacExtend",
                        "08c4b501efe18177e2238dcbfc19798f4bea272d"
                    ]
                },
                {
                    "command": [
                        "intros eps ep.",
                        "VernacExtend",
                        "af89a53f4fae9477ea82d9a2bc893f64250db095"
                    ]
                },
                {
                    "command": [
                        "assert (ep8 : 0 < eps/8).",
                        "VernacExtend",
                        "97d919a04c136e043abfdccd54c899a3f91868ba"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "destruct (cvu _ ep8) as [N Pn1].",
                        "VernacExtend",
                        "f5fd423dbdc2f1c458438e0363ac11bdea64e21f"
                    ]
                },
                {
                    "command": [
                        "assert (cauchy1 : forall n p, (N <= n)%nat -> (N <= p)%nat -> forall z, Boule c d z -> Rabs (f' n z - f' p z) < eps/4).",
                        "VernacExtend",
                        "ffde9333eb41fe2003d8f054cd5a2765e589eb37"
                    ]
                },
                {
                    "command": [
                        "intros n p nN pN z bz; replace (eps/4) with (eps/8 + eps/8) by field.",
                        "VernacExtend",
                        "ea47848f72486b3c9f8ea515dd1751df7e8ddb26"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp.",
                        "VernacExtend",
                        "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
                    ]
                },
                {
                    "command": [
                        "replace (-(f' n z - f' p z)) with (g' z - f' n z - (g' z - f' p z)) by ring.",
                        "VernacExtend",
                        "0affbdb0f0be009876ffea101b80bab7ab3483d7"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := Rabs_triang _ _); rewrite Rabs_Ropp.",
                        "VernacExtend",
                        "d866873ef74f79ae22a2bd8a74853edc8cf587cc"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat; apply Pn1; assumption.",
                        "VernacExtend",
                        "54414c3611ff873ff170231439926259e9743f14"
                    ]
                },
                {
                    "command": [
                        "assert (step_2 : forall n p, (N <= n)%nat -> (N <= p)%nat -> forall y, Boule c d y -> x <> y -> Rabs ((f n y - f n x)/(y - x) - (f p y - f p x)/(y - x)) < eps/4).",
                        "VernacExtend",
                        "b39fd93e7fd38053af7baba86fb374a19db66abb"
                    ]
                },
                {
                    "command": [
                        "intros n p nN pN y b_y xny.",
                        "VernacExtend",
                        "8349d0f8f4382d9d96237d1c8408e55cd858d3f7"
                    ]
                },
                {
                    "command": [
                        "assert (mm0 : (Rmin x y = x /\\ Rmax x y = y) \\/ (Rmin x y = y /\\ Rmax x y = x)).",
                        "VernacExtend",
                        "9614029e3f34d5454733006d763ed83cfad4a9a0"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec x y) as [H | H].",
                        "VernacExtend",
                        "56bcba1398d424ed2da0b56e74206f5910d6f10c"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmin_left, Rmax_right.",
                        "VernacExtend",
                        "de83f07b721f83b99ce8e0efbf13eecf3f7f3750"
                    ]
                },
                {
                    "command": [
                        "left; split; reflexivity.",
                        "VernacExtend",
                        "96b087a55c5e788c9f1c69c91eadf924612c4503"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmin_right, Rmax_left.",
                        "VernacExtend",
                        "88fa0325f2952d91497c7d444bf50c2b097a8540"
                    ]
                },
                {
                    "command": [
                        "right; split; reflexivity.",
                        "VernacExtend",
                        "4c3f2ff3e2fde2fc36517ed2792a0eafe1fab171"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, Rnot_le_gt; assumption.",
                        "VernacExtend",
                        "585e360c8864555040345dbaf6ef875fe08d62af"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, Rnot_le_gt; assumption.",
                        "VernacExtend",
                        "585e360c8864555040345dbaf6ef875fe08d62af"
                    ]
                },
                {
                    "command": [
                        "assert (mm : Rmin x y < Rmax x y).",
                        "VernacExtend",
                        "7bc2fdab8a26ba4e2c839965d2254986d92601d1"
                    ]
                },
                {
                    "command": [
                        "destruct mm0 as [[q1 q2] | [q1 q2]]; generalize (Rminmax x y); rewrite q1, q2.",
                        "VernacExtend",
                        "df60ee8011be2cd248606bf5ba9d99ef20de40b7"
                    ]
                },
                {
                    "command": [
                        "intros h; destruct h;[ assumption| contradiction].",
                        "VernacExtend",
                        "184065ab273403414e38c13ef29c332c38cff01a"
                    ]
                },
                {
                    "command": [
                        "intros h; destruct h as [h | h];[assumption | rewrite h in xny; case xny; reflexivity].",
                        "VernacExtend",
                        "49afeff83bec309eef1cdff9467227fa782428fd"
                    ]
                },
                {
                    "command": [
                        "assert (dm : forall z, Rmin x y <= z <= Rmax x y -> derivable_pt_lim (fun x => f n x - f p x) z (f' n z - f' p z)).",
                        "VernacExtend",
                        "0aa3c34e0fedfb9a54f3a0d33747cfbbcc2dafb9"
                    ]
                },
                {
                    "command": [
                        "intros z intz; apply derivable_pt_lim_minus.",
                        "VernacExtend",
                        "37a558a9a1719c3a04d94ce441ebed219f6b65a4"
                    ]
                },
                {
                    "command": [
                        "apply dff'; apply Boule_convex with (Rmin x y) (Rmax x y); destruct mm0 as [[q1 q2] | [q1 q2]]; revert intz; rewrite ?q1, ?q2; intros; try assumption.",
                        "VernacExtend",
                        "e0042abfa18421db62d5babc361a002dedb0ff13"
                    ]
                },
                {
                    "command": [
                        "apply dff'; apply Boule_convex with (Rmin x y) (Rmax x y); destruct mm0 as [[q1 q2] | [q1 q2]]; revert intz; rewrite ?q1, ?q2; intros; try assumption.",
                        "VernacExtend",
                        "e0042abfa18421db62d5babc361a002dedb0ff13"
                    ]
                },
                {
                    "command": [
                        "replace ((f n y - f n x) / (y - x) - (f p y - f p x) / (y - x)) with (((f n y - f p y) - (f n x - f p x))/(y - x)) by (field; intros yx0; case xny; replace y with (y - x + x) by ring; rewrite yx0, Rplus_0_l; reflexivity).",
                        "VernacExtend",
                        "905aa498a3db25be1e0918daf82f5163e3768241"
                    ]
                },
                {
                    "command": [
                        "destruct (MVT_cor2 (fun x => f n x - f p x) (fun x => f' n x - f' p x) (Rmin x y) (Rmax x y) mm dm) as [z [Pz inz]].",
                        "VernacExtend",
                        "09112cfeccdceb808e65ca81bbdde47de44ab5d2"
                    ]
                },
                {
                    "command": [
                        "destruct mm0 as [[q1 q2] | [q1 q2]].",
                        "VernacExtend",
                        "d8e65e422a5fe743947f929328d15b518cbe35af"
                    ]
                },
                {
                    "command": [
                        "replace ((f n y - f p y - (f n x - f p x))/(y - x)) with ((f n (Rmax x y) - f p (Rmax x y) - (f n (Rmin x y) - f p (Rmin x y)))/ (Rmax x y - Rmin x y)) by (rewrite q1, q2; reflexivity).",
                        "VernacExtend",
                        "29371aafee9ce5d950799812b19f43dff146ed86"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Pz, Rmult_assoc, Rinv_r, Rmult_1_r.",
                        "VernacExtend",
                        "bbd13333116658f296b3d8e164efc4f200c75485"
                    ]
                },
                {
                    "command": [
                        "apply cauchy1; auto.",
                        "VernacExtend",
                        "867a2771472a135a54ff19be4dd6330b75ecedde"
                    ]
                },
                {
                    "command": [
                        "apply Boule_convex with (Rmin x y) (Rmax x y); revert inz; rewrite ?q1, ?q2; intros; try assumption.",
                        "VernacExtend",
                        "fb46159e1b18ea97f23b54d3b791053e461c3da3"
                    ]
                },
                {
                    "command": [
                        "split; apply Rlt_le; tauto.",
                        "VernacExtend",
                        "1b18243a168365999319d644c7607c33fb728e30"
                    ]
                },
                {
                    "command": [
                        "rewrite q1, q2; apply Rminus_eq_contra, not_eq_sym; assumption.",
                        "VernacExtend",
                        "05f098dafaa9944b0dba6359ef5c65517d9b666d"
                    ]
                },
                {
                    "command": [
                        "replace ((f n y - f p y - (f n x - f p x))/(y - x)) with ((f n (Rmax x y) - f p (Rmax x y) - (f n (Rmin x y) - f p (Rmin x y)))/ (Rmax x y - Rmin x y)).",
                        "VernacExtend",
                        "6151a27eca977b4f4e220bc57673affc54ebdebe"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Pz, Rmult_assoc, Rinv_r, Rmult_1_r.",
                        "VernacExtend",
                        "bbd13333116658f296b3d8e164efc4f200c75485"
                    ]
                },
                {
                    "command": [
                        "apply cauchy1; auto.",
                        "VernacExtend",
                        "867a2771472a135a54ff19be4dd6330b75ecedde"
                    ]
                },
                {
                    "command": [
                        "apply Boule_convex with (Rmin x y) (Rmax x y); revert inz; rewrite ?q1, ?q2; intros; try assumption; split; apply Rlt_le; tauto.",
                        "VernacExtend",
                        "eebbe85b0848beb72e740496128a98228a649122"
                    ]
                },
                {
                    "command": [
                        "rewrite q1, q2; apply Rminus_eq_contra; assumption.",
                        "VernacExtend",
                        "a80c8a901e2105c4c244a7c9db76e2490129d326"
                    ]
                },
                {
                    "command": [
                        "rewrite q1, q2; field; split; apply Rminus_eq_contra;[apply not_eq_sym |]; assumption.",
                        "VernacExtend",
                        "dc2883f56c5f6e73a4bef0c82b8a69cae5f8b9a4"
                    ]
                },
                {
                    "command": [
                        "assert (unif_ac : forall n p, (N <= n)%nat -> (N <= p)%nat -> forall y, Boule c d y -> Rabs (rho_ n y - rho_ p y) <= eps/2).",
                        "VernacExtend",
                        "5db1660840dd487dee03ec3d4406ed43261d9140"
                    ]
                },
                {
                    "command": [
                        "intros n p nN pN y b_y.",
                        "VernacExtend",
                        "14b33291e8e1ea104eeb50fb4983ed6a768ca6e6"
                    ]
                },
                {
                    "command": [
                        "destruct (Req_dec x y) as [xy | xny].",
                        "VernacExtend",
                        "2262aab0fd0c66a06dcf294037f39767f1ff82fb"
                    ]
                },
                {
                    "command": [
                        "destruct (Ball_in_inter c c d d x bx bx) as [delta Pdelta].",
                        "VernacExtend",
                        "49283acb165e329b6837304053a492e81a14f433"
                    ]
                },
                {
                    "command": [
                        "destruct (ctrho n y b_y _ ep8) as [d' [dp Pd]].",
                        "VernacExtend",
                        "a79540e873f69ce41061b8d78487f30eb506d5e6"
                    ]
                },
                {
                    "command": [
                        "destruct (ctrho p y b_y _ ep8) as [d2 [dp2 Pd2]].",
                        "VernacExtend",
                        "0ce2b0d0f27699b5b89af0c163a03ffc3f78774e"
                    ]
                },
                {
                    "command": [
                        "assert (mmpos : 0 < (Rmin (Rmin d' d2) delta)/2).",
                        "VernacExtend",
                        "c94661a9b3cec0915101482d11b2b6e446568530"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; repeat apply Rmin_glb_lt; try assumption.",
                        "VernacExtend",
                        "7fa7a40083e95b14d9e355d937ccfbbc13b5e50a"
                    ]
                },
                {
                    "command": [
                        "apply cond_pos.",
                        "VernacExtend",
                        "8ddb865849694c081c727a4dcd01494f171e402e"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat, Rlt_0_2.",
                        "VernacExtend",
                        "3abccb6f76a72b816de9995e74c7f953b6cff456"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := R_dist_tri _ _ (rho_ n (y + Rmin (Rmin d' d2) delta/2))).",
                        "VernacExtend",
                        "c1a490a2e6199c7e2d46e1c79f34d9b9c01e6e9a"
                    ]
                },
                {
                    "command": [
                        "replace (eps/2) with (eps/8 + (eps/4 + eps/8)) by field.",
                        "VernacExtend",
                        "487deeec5cb70cda15bb0e1c15c0e41701a20743"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat.",
                        "VernacExtend",
                        "7a69898b466991bee51047e3a2fc51c3b80fbd93"
                    ]
                },
                {
                    "command": [
                        "rewrite R_dist_sym; apply Rlt_le, Pd;split;[split;[exact I | ] | ].",
                        "VernacExtend",
                        "b39081914f600686ebfefafba34b1732e45fe083"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_not_eq_right; rewrite Rplus_comm; unfold Rminus; rewrite Rplus_assoc, Rplus_opp_r, Rplus_0_r; apply Rgt_not_eq; assumption.",
                        "VernacExtend",
                        "46c9c6685efd2f3fa2482db18a5061ed8ec299d9"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold R_dist.",
                        "VernacExtend",
                        "db555dffbb2c35caa3c9a6f63cd610fa717cc3be"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite (Rplus_comm y), Rplus_assoc, Rplus_opp_r, Rplus_0_r.",
                        "VernacExtend",
                        "88c7326b94c87645ee22abee0d0d39cdea165977"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_pos_eq;[ |apply Rlt_le; assumption ].",
                        "VernacExtend",
                        "643918f836ee1571d9a32bfb03f067e34be464d1"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rmin (Rmin d' d2) delta);[lra | ].",
                        "VernacExtend",
                        "3dc5156e9b3d03d8554e93cd387c285168515713"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rmin d' d2); apply Rmin_l.",
                        "VernacExtend",
                        "9f4070b87034ea74fd516fd8f5c5c2fc1d6da585"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (1 := R_dist_tri _ _ (rho_ p (y + Rmin (Rmin d' d2) delta/2))).",
                        "VernacExtend",
                        "c418a3fae52058e1068011e9a766d2f2af886b9b"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat.",
                        "VernacExtend",
                        "7a69898b466991bee51047e3a2fc51c3b80fbd93"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le.",
                        "VernacExtend",
                        "cdc4280500779f23bae235b94c24a4b2ea2921fe"
                    ]
                },
                {
                    "command": [
                        "replace (rho_ n (y + Rmin (Rmin d' d2) delta / 2)) with ((f n (y + Rmin (Rmin d' d2) delta / 2) - f n x)/ ((y + Rmin (Rmin d' d2) delta / 2) - x)).",
                        "VernacExtend",
                        "f85f530c4a90861b3c374db06f8183274f2db1e4"
                    ]
                },
                {
                    "command": [
                        "replace (rho_ p (y + Rmin (Rmin d' d2) delta / 2)) with ((f p (y + Rmin (Rmin d' d2) delta / 2) - f p x)/ ((y + Rmin (Rmin d' d2) delta / 2) - x)).",
                        "VernacExtend",
                        "600919e601876d6abec9369c433380f7c4a65c29"
                    ]
                },
                {
                    "command": [
                        "apply step_2; auto; try lra.",
                        "VernacExtend",
                        "5a237dfdaa5266aae1447fe6b8a2b8c503f90a86"
                    ]
                },
                {
                    "command": [
                        "assert (0 < pos delta) by (apply cond_pos).",
                        "VernacExtend",
                        "8abe9d723d7d7fc15251bfbd02b36313b3702083"
                    ]
                },
                {
                    "command": [
                        "apply Boule_convex with y (y + delta/2).",
                        "VernacExtend",
                        "98ae7c709b0fe40768015480012ecaca3ec8bd3d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "destruct (Pdelta (y + delta/2)); auto.",
                        "VernacExtend",
                        "1268a182c18af34a98bf2ff85a4b146aef54c7c8"
                    ]
                },
                {
                    "command": [
                        "rewrite xy; unfold Boule; rewrite Rabs_pos_eq; try lra; auto.",
                        "VernacExtend",
                        "f69cddb914ae3eb951cc22f2f325021128b33d19"
                    ]
                },
                {
                    "command": [
                        "split; try lra.",
                        "VernacExtend",
                        "7ba13547e186928295636e92886323a6c212e095"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l, Rmult_le_compat_r;[ | apply Rmin_r].",
                        "VernacExtend",
                        "68b1822a2c8e1f267163b8152a652777fae64832"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le, Rinv_0_lt_compat, Rlt_0_2.",
                        "VernacExtend",
                        "6275c73e6c3cdc02e07cb973aa6676c25d527ba1"
                    ]
                },
                {
                    "command": [
                        "unfold rho_.",
                        "VernacExtend",
                        "82162097cdd1bca6955dd8e9179642425f35402f"
                    ]
                },
                {
                    "command": [
                        "destruct (Req_EM_T (y + Rmin (Rmin d' d2) delta/2) x) as [ymx | ymnx].",
                        "VernacExtend",
                        "f00c325a675fcc00f000bbc997a68695e325a6a0"
                    ]
                },
                {
                    "command": [
                        "case (RIneq.Rle_not_lt _ _ (Req_le _ _ ymx)); lra.",
                        "VernacExtend",
                        "25fbce70e55cbbe461c57e51fdee70b83203545d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold rho_.",
                        "VernacExtend",
                        "82162097cdd1bca6955dd8e9179642425f35402f"
                    ]
                },
                {
                    "command": [
                        "destruct (Req_EM_T (y + Rmin (Rmin d' d2) delta / 2) x) as [ymx | ymnx].",
                        "VernacExtend",
                        "f00c325a675fcc00f000bbc997a68695e325a6a0"
                    ]
                },
                {
                    "command": [
                        "case (RIneq.Rle_not_lt _ _ (Req_le _ _ ymx)); lra.",
                        "VernacExtend",
                        "25fbce70e55cbbe461c57e51fdee70b83203545d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, Pd2; split;[split;[exact I | apply Rlt_not_eq; lra] | ].",
                        "VernacExtend",
                        "41c00076f1c462748f6ac23b312532d54b147f94"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold R_dist.",
                        "VernacExtend",
                        "db555dffbb2c35caa3c9a6f63cd610fa717cc3be"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite (Rplus_comm y), Rplus_assoc, Rplus_opp_r, Rplus_0_r.",
                        "VernacExtend",
                        "88c7326b94c87645ee22abee0d0d39cdea165977"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_pos_eq;[ | lra].",
                        "VernacExtend",
                        "097ce552febbb447dfb52d1e6ccf6f04c7f19972"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rmin (Rmin d' d2) delta); [lra |].",
                        "VernacExtend",
                        "3dc5156e9b3d03d8554e93cd387c285168515713"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rmin d' d2).",
                        "VernacExtend",
                        "93e7512332452eacc7c43548c8a1acc5234b1001"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rmin_l].",
                        "VernacExtend",
                        "528e805c86452bae82dad4814c483a079d84e20e"
                    ]
                },
                {
                    "command": [
                        "solve[apply Rmin_r].",
                        "VernacExtend",
                        "2257a66676c6bf566132f4acc3c385622fc1d661"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le, Rlt_le_trans with (eps/4);[ | lra].",
                        "VernacExtend",
                        "5fd919978ccc6f5b0fd853b08c94e8a65dbe8e4e"
                    ]
                },
                {
                    "command": [
                        "unfold rho_; destruct (Req_EM_T y x); solve[auto].",
                        "VernacExtend",
                        "6d6a6dd3f2b39ddb9d67b80f4536623adfd8822c"
                    ]
                },
                {
                    "command": [
                        "assert (unif_ac' : forall p, (N <= p)%nat -> forall y, Boule c d y -> Rabs (rho y - rho_ p y) < eps).",
                        "VernacExtend",
                        "470c3025638ea8ea04050decb9010d742e64d141"
                    ]
                },
                {
                    "command": [
                        "assert (cvrho : forall y, Boule c d y -> Un_cv (fun n => rho_ n y) (rho y)).",
                        "VernacExtend",
                        "dbb2cade3cb5353bbc6d32dabac81cfc519e071b"
                    ]
                },
                {
                    "command": [
                        "intros y b_y; unfold rho_, rho; destruct (Req_EM_T y x).",
                        "VernacExtend",
                        "2b4fa4675b8c6536262c95ffe96abf6ecc4a1e6f"
                    ]
                },
                {
                    "command": [
                        "intros eps' ep'; destruct (cvu eps' ep') as [N2 Pn2].",
                        "VernacExtend",
                        "f3148618e304a8467e3bebec26c3d3b34f4fac93"
                    ]
                },
                {
                    "command": [
                        "exists N2; intros n nN2; rewrite R_dist_sym; apply Pn2; assumption.",
                        "VernacExtend",
                        "edf865eb7a11c315c9d7d14db3432bc7a9784ff5"
                    ]
                },
                {
                    "command": [
                        "apply CV_mult.",
                        "VernacExtend",
                        "7df85077b85eadac24b572b1d2ba1d223ec90eca"
                    ]
                },
                {
                    "command": [
                        "apply CV_minus.",
                        "VernacExtend",
                        "71174b3213db34f5ab2791b268b31365a99c86ae"
                    ]
                },
                {
                    "command": [
                        "apply cvp; assumption.",
                        "VernacExtend",
                        "7ae6746bb61074b2f73df6aa4545ef6890595400"
                    ]
                },
                {
                    "command": [
                        "apply cvp; assumption.",
                        "VernacExtend",
                        "7ae6746bb61074b2f73df6aa4545ef6890595400"
                    ]
                },
                {
                    "command": [
                        "intros eps' ep'; simpl; exists 0%nat; intros; rewrite R_dist_eq; assumption.",
                        "VernacExtend",
                        "106112c947a81ce23c3d1a59c31e11f058356a13"
                    ]
                },
                {
                    "command": [
                        "intros p pN y b_y.",
                        "VernacExtend",
                        "9eb6565a2bf99d9a3df9bd2743461c4d72edfa1a"
                    ]
                },
                {
                    "command": [
                        "replace eps with (eps/2 + eps/2) by field.",
                        "VernacExtend",
                        "ae28027106d70b55d71f9e3ff5279dcf42f407e1"
                    ]
                },
                {
                    "command": [
                        "assert (ep2 : 0 < eps/2) by lra.",
                        "VernacExtend",
                        "6465557a8236813ea493fd092e7efe8947f320da"
                    ]
                },
                {
                    "command": [
                        "destruct (cvrho y b_y _ ep2) as [N2 Pn2].",
                        "VernacExtend",
                        "d9257cab89fa75e6e76523abbcc8800c246e7e9c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (1 := R_dist_tri _ _ (rho_ (max N N2) y)).",
                        "VernacExtend",
                        "63dc2443cdb068179059fa8d2f5e52891676789c"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_le_compat.",
                        "VernacExtend",
                        "afaf4615762fcc18dc393fdad9acd883003f768d"
                    ]
                },
                {
                    "command": [
                        "solve[rewrite R_dist_sym; apply Pn2, Max.le_max_r].",
                        "VernacExtend",
                        "b67dcc7befed54d010f6e34234134566db48e8d0"
                    ]
                },
                {
                    "command": [
                        "apply unif_ac; auto; solve [apply Max.le_max_l].",
                        "VernacExtend",
                        "06faa9e0d67a3a00442798b3ad790f1a07f9af1e"
                    ]
                },
                {
                    "command": [
                        "exists N; intros; apply unif_ac'; solve[auto].",
                        "VernacExtend",
                        "15fcb4996dcd0b4fb8cf9ffa2a617fda4f1ce159"
                    ]
                },
                {
                    "command": [
                        "intros eps ep.",
                        "VernacExtend",
                        "af89a53f4fae9477ea82d9a2bc893f64250db095"
                    ]
                },
                {
                    "command": [
                        "destruct (CVU_continuity _ _ _ _ H ctrho x bx eps ep) as [delta [dp Pd]].",
                        "VernacExtend",
                        "d727569ed8452df3e876d0c76ff3fae5989372b0"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal _ dp); intros h hn0 dh.",
                        "VernacExtend",
                        "511ca13fc76af96a775a66de29e6fee1fb449dee"
                    ]
                },
                {
                    "command": [
                        "replace ((g (x + h) - g x) / h) with (rho (x + h)).",
                        "VernacExtend",
                        "b705323db82591de1305b0f1c511c839ca6df1e2"
                    ]
                },
                {
                    "command": [
                        "replace (g' x) with (rho x).",
                        "VernacExtend",
                        "1bd861c2e11790d69c2fcfe984242755a0a7c85b"
                    ]
                },
                {
                    "command": [
                        "apply Pd; unfold D_x, no_cond;split;[split;[solve[auto] | ] | ].",
                        "VernacExtend",
                        "84ddba6c44187d50ddfd428c68e9372abb9e038a"
                    ]
                },
                {
                    "command": [
                        "intros xxh; case hn0; replace h with (x + h - x) by ring; rewrite <- xxh; ring.",
                        "VernacExtend",
                        "69976d71390596fb6a67f0ead2cfd12308280ea6"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold R_dist; replace (x + h - x) with h by ring; exact dh.",
                        "VernacExtend",
                        "0c7c0a3bac901abec507f7930532acfd6a292976"
                    ]
                },
                {
                    "command": [
                        "unfold rho; destruct (Req_EM_T x x) as [ _ | abs];[ | case abs]; reflexivity.",
                        "VernacExtend",
                        "4f1fbf0e84c8851a517d75a0acf5fe3db625ef25"
                    ]
                },
                {
                    "command": [
                        "unfold rho; destruct (Req_EM_T (x + h) x) as [abs | _];[ | ].",
                        "VernacExtend",
                        "fdbd93efc871c37832afde674aa18f7811c29861"
                    ]
                },
                {
                    "command": [
                        "case hn0; replace h with (x + h - x) by ring; rewrite abs; ring.",
                        "VernacExtend",
                        "f34cabd31f72a94f9dd477317ca5a36f05a3a315"
                    ]
                },
                {
                    "command": [
                        "replace (x + h - x) with h by ring; reflexivity.",
                        "VernacExtend",
                        "a2ada1f0e9d0825dc868848417c74ac043a21129"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}