{
    "filename": "theories/Reals/Ranalysis2.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Ranalysis1.",
            "VernacRequire",
            "b7df6cdb101f6571d1192419ca4168ab43a628dd"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Lemma formule : forall (x h l1 l2:R) (f1 f2:R -> R), h <> 0 -> f2 x <> 0 -> f2 (x + h) <> 0 -> (f1 (x + h) / f2 (x + h) - f1 x / f2 x) / h - (l1 * f2 x - l2 * f1 x) / Rsqr (f2 x) = / f2 (x + h) * ((f1 (x + h) - f1 x) / h - l1) + l1 / (f2 x * f2 (x + h)) * (f2 x - f2 (x + h)) - f1 x / (f2 x * f2 (x + h)) * ((f2 (x + h) - f2 x) / h - l2) + l2 * f1 x / (Rsqr (f2 x) * f2 (x + h)) * (f2 (x + h) - f2 x).",
            "VernacStartTheoremProof",
            "6d6e355ad558689b0ef0080e8b92b6693f355aff"
        ],
        [
            "intros; unfold Rdiv, Rminus, Rsqr.",
            "VernacExtend",
            "ad67836f5dc569e70a733ba05f825f1c533d0460"
        ],
        [
            "repeat rewrite Rmult_plus_distr_r; repeat rewrite Rmult_plus_distr_l; repeat rewrite Rinv_mult_distr; try assumption.",
            "VernacExtend",
            "390e950be9102e5beac2ec2e8ce1d3b574813603"
        ],
        [
            "replace (l1 * f2 x * (/ f2 x * / f2 x)) with (l1 * / f2 x * (f2 x * / f2 x)); [ idtac | ring ].",
            "VernacExtend",
            "bbce3e92c3df27728e350f1094493b6a6a87396b"
        ],
        [
            "replace (l1 * (/ f2 x * / f2 (x + h)) * f2 x) with (l1 * / f2 (x + h) * (f2 x * / f2 x)); [ idtac | ring ].",
            "VernacExtend",
            "d2e414f9a715939ca6ce5b78a68470fcf56312f2"
        ],
        [
            "replace (l1 * (/ f2 x * / f2 (x + h)) * - f2 (x + h)) with (- (l1 * / f2 x * (f2 (x + h) * / f2 (x + h)))); [ idtac | ring ].",
            "VernacExtend",
            "86d44685b726b2c0b7c669a06becbecea42eb66c"
        ],
        [
            "replace (f1 x * (/ f2 x * / f2 (x + h)) * (f2 (x + h) * / h)) with (f1 x * / f2 x * / h * (f2 (x + h) * / f2 (x + h))); [ idtac | ring ].",
            "VernacExtend",
            "e2c8c51a74631cf1f5bf74a735616a315aa03077"
        ],
        [
            "replace (f1 x * (/ f2 x * / f2 (x + h)) * (- f2 x * / h)) with (- (f1 x * / f2 (x + h) * / h * (f2 x * / f2 x))); [ idtac | ring ].",
            "VernacExtend",
            "2b314d5c0704cb12bcf71a29ec77e31053013825"
        ],
        [
            "replace (l2 * f1 x * (/ f2 x * / f2 x * / f2 (x + h)) * f2 (x + h)) with (l2 * f1 x * / f2 x * / f2 x * (f2 (x + h) * / f2 (x + h))); [ idtac | ring ].",
            "VernacExtend",
            "36d3e50de3d709f3de9ed98d30637759d0990fe2"
        ],
        [
            "replace (l2 * f1 x * (/ f2 x * / f2 x * / f2 (x + h)) * - f2 x) with (- (l2 * f1 x * / f2 x * / f2 (x + h) * (f2 x * / f2 x))); [ idtac | ring ].",
            "VernacExtend",
            "03dc169b24917a9d8b474e73b6e6e05b54ad5509"
        ],
        [
            "repeat rewrite <- Rinv_r_sym; try assumption || ring.",
            "VernacExtend",
            "1230af2e42d637e1680c05f8c32f559cf7a864ca"
        ],
        [
            "apply prod_neq_R0; assumption.",
            "VernacExtend",
            "680f594f854a1838d82542e91066d23de34b831d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation Rmin_pos := Rmin_pos (only parsing).",
            "VernacSyntacticDefinition",
            "e6aef772f915eb7f4e05d8e72d0408798763e002"
        ],
        [
            "Lemma maj_term1 : forall (x h eps l1 alp_f2:R) (eps_f2 alp_f1d:posreal) (f1 f2:R -> R), 0 < eps -> f2 x <> 0 -> f2 (x + h) <> 0 -> (forall h:R, h <> 0 -> Rabs h < alp_f1d -> Rabs ((f1 (x + h) - f1 x) / h - l1) < Rabs (eps * f2 x / 8)) -> (forall a:R, Rabs a < Rmin eps_f2 alp_f2 -> / Rabs (f2 (x + a)) < 2 / Rabs (f2 x)) -> h <> 0 -> Rabs h < alp_f1d -> Rabs h < Rmin eps_f2 alp_f2 -> Rabs (/ f2 (x + h) * ((f1 (x + h) - f1 x) / h - l1)) < eps / 4.",
            "VernacStartTheoremProof",
            "3916257cb165379e3ab071473246269278cd71da"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H7 := H3 h H6).",
            "VernacExtend",
            "328a5dde999588bd6f5f12485bdad17338d35ce1"
        ],
        [
            "assert (H8 := H2 h H4 H5).",
            "VernacExtend",
            "d99d65dc8857892453485fe7273001fbe2cbbcde"
        ],
        [
            "apply Rle_lt_trans with (2 / Rabs (f2 x) * Rabs ((f1 (x + h) - f1 x) / h - l1)).",
            "VernacExtend",
            "68e45621a2e9d4eb2d282e8f8e9c6978fce929f3"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "apply Rmult_le_compat_r.",
            "VernacExtend",
            "6c4c5a82dab802842919dd673f1978a3cb8cff73"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "rewrite Rabs_Rinv; [ left; exact H7 | assumption ].",
            "VernacExtend",
            "ba4e82ae1b3cc6f683fb7a45103505a8707a2e83"
        ],
        [
            "apply Rlt_le_trans with (2 / Rabs (f2 x) * Rabs (eps * f2 x / 8)).",
            "VernacExtend",
            "e0bbb7b5229116eef3c746ea3dc25d8508cec318"
        ],
        [
            "apply Rmult_lt_compat_l.",
            "VernacExtend",
            "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ prove_sup0 | apply Rinv_0_lt_compat; apply Rabs_pos_lt; assumption ].",
            "VernacExtend",
            "2181338511378ce5cd2453fa70f7243a8d086266"
        ],
        [
            "exact H8.",
            "VernacExtend",
            "125096764f05c2e6b59a11140e6c3ad0b07b1f9e"
        ],
        [
            "right; unfold Rdiv.",
            "VernacExtend",
            "120828648c310f22e50e80d8acbd6dd20a8aea1a"
        ],
        [
            "repeat rewrite Rabs_mult.",
            "VernacExtend",
            "d6b4933df484a8b55ce72214de61ad709dce9755"
        ],
        [
            "rewrite Rabs_Rinv; discrR.",
            "VernacExtend",
            "b9a6d3814023d62e8e1962943f467de7d5891a49"
        ],
        [
            "rewrite (Rabs_pos_eq 8) by now apply IZR_le.",
            "VernacExtend",
            "42536366d130158125c18b7f69f81ff9d1f74040"
        ],
        [
            "rewrite (Rabs_pos_eq eps).",
            "VernacExtend",
            "30f802c86ea9bdefd6dcf9931424b3932a45f109"
        ],
        [
            "field.",
            "VernacExtend",
            "93f44750d651d466b74a0cc63f88acb56273d533"
        ],
        [
            "now apply Rabs_no_R0.",
            "VernacExtend",
            "799535f6b2745ffc198f4b7b5a653816e4ede72a"
        ],
        [
            "now apply Rlt_le.",
            "VernacExtend",
            "3fa67bbd472123a7abc1f777aecc643fb3862e46"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maj_term2 : forall (x h eps l1 alp_f2 alp_f2t2:R) (eps_f2:posreal) (f2:R -> R), 0 < eps -> f2 x <> 0 -> f2 (x + h) <> 0 -> (forall a:R, Rabs a < alp_f2t2 -> Rabs (f2 (x + a) - f2 x) < Rabs (eps * Rsqr (f2 x) / (8 * l1))) -> (forall a:R, Rabs a < Rmin eps_f2 alp_f2 -> / Rabs (f2 (x + a)) < 2 / Rabs (f2 x)) -> h <> 0 -> Rabs h < alp_f2t2 -> Rabs h < Rmin eps_f2 alp_f2 -> l1 <> 0 -> Rabs (l1 / (f2 x * f2 (x + h)) * (f2 x - f2 (x + h))) < eps / 4.",
            "VernacStartTheoremProof",
            "f84eb757e583362207ef079422774fede2fe3c70"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H8 := H3 h H6).",
            "VernacExtend",
            "c17d32db62e10c12e87a14e075d13b00611c7061"
        ],
        [
            "assert (H9 := H2 h H5).",
            "VernacExtend",
            "ba64f23f3cba1967b095529473b60dea61b7e618"
        ],
        [
            "apply Rle_lt_trans with (Rabs (l1 / (f2 x * f2 (x + h))) * Rabs (eps * Rsqr (f2 x) / (8 * l1))).",
            "VernacExtend",
            "8bdbbb6451b007af23c5e40ff448ce51136f174b"
        ],
        [
            "rewrite Rabs_mult; apply Rmult_le_compat_l.",
            "VernacExtend",
            "6a5d508410f63d72ff7b81bb1e5b91a99e4a72b3"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "rewrite <- (Rabs_Ropp (f2 x - f2 (x + h))); rewrite Ropp_minus_distr.",
            "VernacExtend",
            "41606e2720bfff1c8c4e5a3faac03e029a8fdbd2"
        ],
        [
            "left; apply H9.",
            "VernacExtend",
            "e70fdb16a0d64e5df390c4ad96c298acdecaa617"
        ],
        [
            "apply Rlt_le_trans with (Rabs (2 * (l1 / (f2 x * f2 x))) * Rabs (eps * Rsqr (f2 x) / (8 * l1))).",
            "VernacExtend",
            "235d0b668833d7b1172084fdb15989af6b00e661"
        ],
        [
            "apply Rmult_lt_compat_r.",
            "VernacExtend",
            "e041593c57ec6470673cc705c01d215d230e0676"
        ],
        [
            "apply Rabs_pos_lt.",
            "VernacExtend",
            "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
        ],
        [
            "unfold Rdiv; unfold Rsqr; repeat apply prod_neq_R0; try assumption || discrR.",
            "VernacExtend",
            "fafe1e1edf5f85b3618ff10dd58051f5f4779a80"
        ],
        [
            "red; intro H10; rewrite H10 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "194e3131b64bc6bf0089d56f2b9755c7d519fb9a"
        ],
        [
            "apply Rinv_neq_0_compat; apply prod_neq_R0; try assumption || discrR.",
            "VernacExtend",
            "8a751a1cd0974fd9b958bed98e9c555d53760e51"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "repeat rewrite Rinv_mult_distr; try assumption.",
            "VernacExtend",
            "4ad8ceb0938933bf62affc6b7280c6e29caa1657"
        ],
        [
            "repeat rewrite Rabs_mult.",
            "VernacExtend",
            "d6b4933df484a8b55ce72214de61ad709dce9755"
        ],
        [
            "replace (Rabs 2) with 2.",
            "VernacExtend",
            "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
        ],
        [
            "rewrite (Rmult_comm 2).",
            "VernacExtend",
            "fa06fc35a43a455b406d76e181d26b3606a0680c"
        ],
        [
            "replace (Rabs l1 * (Rabs (/ f2 x) * Rabs (/ f2 x)) * 2) with (Rabs l1 * (Rabs (/ f2 x) * (Rabs (/ f2 x) * 2))); [ idtac | ring ].",
            "VernacExtend",
            "344eaab5bc504ec7e890db59ef4e6192c6e48488"
        ],
        [
            "repeat apply Rmult_lt_compat_l.",
            "VernacExtend",
            "6919e6a3b69996d4b31c47b68a682f919d9442d0"
        ],
        [
            "apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "apply Rabs_pos_lt; apply Rinv_neq_0_compat; assumption.",
            "VernacExtend",
            "d36aea9b35f37a9c7ac1fbb75decf0e395ba111b"
        ],
        [
            "repeat rewrite Rabs_Rinv; try assumption.",
            "VernacExtend",
            "21ed15039ef2db0797ebad8987f5af9c0ff4e73c"
        ],
        [
            "rewrite <- (Rmult_comm 2).",
            "VernacExtend",
            "ec1b6f591db64e627c4aad283471619dcbe50a75"
        ],
        [
            "unfold Rdiv in H8; exact H8.",
            "VernacExtend",
            "bb4a2891cb20f09478b35e9b58e17595f9ef2570"
        ],
        [
            "symmetry ; apply Rabs_right; left; prove_sup0.",
            "VernacExtend",
            "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "unfold Rsqr, Rdiv.",
            "VernacExtend",
            "50122c6b25949ced0c6a8fc6a4b5f3a074f33ff6"
        ],
        [
            "do 1 rewrite Rinv_mult_distr; try assumption || discrR.",
            "VernacExtend",
            "92004f96ae3e58c2cf125c2e519943a575877a5b"
        ],
        [
            "do 1 rewrite Rinv_mult_distr; try assumption || discrR.",
            "VernacExtend",
            "92004f96ae3e58c2cf125c2e519943a575877a5b"
        ],
        [
            "repeat rewrite Rabs_mult.",
            "VernacExtend",
            "d6b4933df484a8b55ce72214de61ad709dce9755"
        ],
        [
            "repeat rewrite Rabs_Rinv; try assumption || discrR.",
            "VernacExtend",
            "a2185cfa36252ae847746019c20a923676d69ea8"
        ],
        [
            "replace (Rabs eps) with eps.",
            "VernacExtend",
            "f8fe2d92b5f356bae8fdcb46b1204b5d85fe5a30"
        ],
        [
            "replace (Rabs 8) with 8.",
            "VernacExtend",
            "17efe0a7041568b141a9f71812fb6cc21f3faf93"
        ],
        [
            "replace (Rabs 2) with 2.",
            "VernacExtend",
            "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
        ],
        [
            "replace 8 with (4 * 2); [ idtac | ring ].",
            "VernacExtend",
            "350063e5e13bc86265e705c30d8be52e2d7d8978"
        ],
        [
            "rewrite Rinv_mult_distr; discrR.",
            "VernacExtend",
            "19b4ee50d7d8d925a55b3b36f1eb8d500b73efc8"
        ],
        [
            "replace (2 * (Rabs l1 * (/ Rabs (f2 x) * / Rabs (f2 x))) * (eps * (Rabs (f2 x) * Rabs (f2 x)) * (/ 4 * / 2 * / Rabs l1))) with (eps * / 4 * (Rabs l1 * / Rabs l1) * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (2 * / 2)); [ idtac | ring ].",
            "VernacExtend",
            "a1a8fe75f086f511d90b9593d875eb4fadc900f4"
        ],
        [
            "repeat rewrite <- Rinv_r_sym; try (apply Rabs_no_R0; assumption) || discrR.",
            "VernacExtend",
            "e06aa6c793b90e6bfcc13f99b8d5bef80829de78"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "symmetry ; apply Rabs_right; left; prove_sup0.",
            "VernacExtend",
            "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
        ],
        [
            "symmetry ; apply Rabs_right; left; prove_sup.",
            "VernacExtend",
            "007fad37928051bee05735624464ef6389f85727"
        ],
        [
            "symmetry ; apply Rabs_right; left; assumption.",
            "VernacExtend",
            "4f64dc679edf75d96b4c21eeb39e369799902dd4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maj_term3 : forall (x h eps l2 alp_f2:R) (eps_f2 alp_f2d:posreal) (f1 f2:R -> R), 0 < eps -> f2 x <> 0 -> f2 (x + h) <> 0 -> (forall h:R, h <> 0 -> Rabs h < alp_f2d -> Rabs ((f2 (x + h) - f2 x) / h - l2) < Rabs (Rsqr (f2 x) * eps / (8 * f1 x))) -> (forall a:R, Rabs a < Rmin eps_f2 alp_f2 -> / Rabs (f2 (x + a)) < 2 / Rabs (f2 x)) -> h <> 0 -> Rabs h < alp_f2d -> Rabs h < Rmin eps_f2 alp_f2 -> f1 x <> 0 -> Rabs (f1 x / (f2 x * f2 (x + h)) * ((f2 (x + h) - f2 x) / h - l2)) < eps / 4.",
            "VernacStartTheoremProof",
            "a252c1d9808c9d8a0c61fa434c54e36484580d19"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H8 := H2 h H4 H5).",
            "VernacExtend",
            "d99d65dc8857892453485fe7273001fbe2cbbcde"
        ],
        [
            "assert (H9 := H3 h H6).",
            "VernacExtend",
            "4cfc015ec3fe65b66dbba369a5546a744e8f747d"
        ],
        [
            "apply Rle_lt_trans with (Rabs (f1 x / (f2 x * f2 (x + h))) * Rabs (Rsqr (f2 x) * eps / (8 * f1 x))).",
            "VernacExtend",
            "ffc5212c0e47912e671825f08f6ceb868539e67d"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "left; apply H8.",
            "VernacExtend",
            "113bcc719ba4683fd876511aa549925172c4278b"
        ],
        [
            "apply Rlt_le_trans with (Rabs (2 * (f1 x / (f2 x * f2 x))) * Rabs (Rsqr (f2 x) * eps / (8 * f1 x))).",
            "VernacExtend",
            "4be81ede8424e28293da6bc4fadf2d86b36585f2"
        ],
        [
            "apply Rmult_lt_compat_r.",
            "VernacExtend",
            "e041593c57ec6470673cc705c01d215d230e0676"
        ],
        [
            "apply Rabs_pos_lt.",
            "VernacExtend",
            "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
        ],
        [
            "unfold Rdiv; unfold Rsqr; repeat apply prod_neq_R0; try assumption.",
            "VernacExtend",
            "fdcfc10355e703ffd2ff03c758d430877779591e"
        ],
        [
            "red; intro H10; rewrite H10 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "194e3131b64bc6bf0089d56f2b9755c7d519fb9a"
        ],
        [
            "apply Rinv_neq_0_compat; apply prod_neq_R0; discrR || assumption.",
            "VernacExtend",
            "a42ad6db487f5b7d2824bf5872e5f1cf2362bef6"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "repeat rewrite Rinv_mult_distr; try assumption.",
            "VernacExtend",
            "4ad8ceb0938933bf62affc6b7280c6e29caa1657"
        ],
        [
            "repeat rewrite Rabs_mult.",
            "VernacExtend",
            "d6b4933df484a8b55ce72214de61ad709dce9755"
        ],
        [
            "replace (Rabs 2) with 2.",
            "VernacExtend",
            "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
        ],
        [
            "rewrite (Rmult_comm 2).",
            "VernacExtend",
            "fa06fc35a43a455b406d76e181d26b3606a0680c"
        ],
        [
            "replace (Rabs (f1 x) * (Rabs (/ f2 x) * Rabs (/ f2 x)) * 2) with (Rabs (f1 x) * (Rabs (/ f2 x) * (Rabs (/ f2 x) * 2))); [ idtac | ring ].",
            "VernacExtend",
            "cc741355a064fd42fd35b305307ae6dc2d7ba319"
        ],
        [
            "repeat apply Rmult_lt_compat_l.",
            "VernacExtend",
            "6919e6a3b69996d4b31c47b68a682f919d9442d0"
        ],
        [
            "apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "apply Rabs_pos_lt; apply Rinv_neq_0_compat; assumption.",
            "VernacExtend",
            "d36aea9b35f37a9c7ac1fbb75decf0e395ba111b"
        ],
        [
            "repeat rewrite Rabs_Rinv; assumption || idtac.",
            "VernacExtend",
            "e2f53b5a2df468891ce74443278b59740d4bedcc"
        ],
        [
            "rewrite <- (Rmult_comm 2).",
            "VernacExtend",
            "ec1b6f591db64e627c4aad283471619dcbe50a75"
        ],
        [
            "unfold Rdiv in H9; exact H9.",
            "VernacExtend",
            "7dea2e4cdf4f0556a33af6e1fcf8d51479aeb017"
        ],
        [
            "symmetry ; apply Rabs_right; left; prove_sup0.",
            "VernacExtend",
            "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "unfold Rsqr, Rdiv.",
            "VernacExtend",
            "50122c6b25949ced0c6a8fc6a4b5f3a074f33ff6"
        ],
        [
            "rewrite Rinv_mult_distr; try assumption || discrR.",
            "VernacExtend",
            "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
        ],
        [
            "rewrite Rinv_mult_distr; try assumption || discrR.",
            "VernacExtend",
            "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
        ],
        [
            "repeat rewrite Rabs_mult.",
            "VernacExtend",
            "d6b4933df484a8b55ce72214de61ad709dce9755"
        ],
        [
            "repeat rewrite Rabs_Rinv; try assumption || discrR.",
            "VernacExtend",
            "a2185cfa36252ae847746019c20a923676d69ea8"
        ],
        [
            "replace (Rabs eps) with eps.",
            "VernacExtend",
            "f8fe2d92b5f356bae8fdcb46b1204b5d85fe5a30"
        ],
        [
            "replace (Rabs 8) with 8.",
            "VernacExtend",
            "17efe0a7041568b141a9f71812fb6cc21f3faf93"
        ],
        [
            "replace (Rabs 2) with 2.",
            "VernacExtend",
            "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
        ],
        [
            "replace 8 with (4 * 2); [ idtac | ring ].",
            "VernacExtend",
            "350063e5e13bc86265e705c30d8be52e2d7d8978"
        ],
        [
            "rewrite Rinv_mult_distr; discrR.",
            "VernacExtend",
            "19b4ee50d7d8d925a55b3b36f1eb8d500b73efc8"
        ],
        [
            "replace (2 * (Rabs (f1 x) * (/ Rabs (f2 x) * / Rabs (f2 x))) * (Rabs (f2 x) * Rabs (f2 x) * eps * (/ 4 * / 2 * / Rabs (f1 x)))) with (eps * / 4 * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f1 x) * / Rabs (f1 x)) * (2 * / 2)); [ idtac | ring ].",
            "VernacExtend",
            "424d3f8122b2e18ab8434a9e8fbf5486709126bc"
        ],
        [
            "repeat rewrite <- Rinv_r_sym; try discrR || (apply Rabs_no_R0; assumption).",
            "VernacExtend",
            "3035f6536c58d33402f16defb43d871e51b0e1f7"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "symmetry ; apply Rabs_right; left; prove_sup0.",
            "VernacExtend",
            "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
        ],
        [
            "symmetry ; apply Rabs_right; left; prove_sup.",
            "VernacExtend",
            "007fad37928051bee05735624464ef6389f85727"
        ],
        [
            "symmetry ; apply Rabs_right; left; assumption.",
            "VernacExtend",
            "4f64dc679edf75d96b4c21eeb39e369799902dd4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maj_term4 : forall (x h eps l2 alp_f2 alp_f2c:R) (eps_f2:posreal) (f1 f2:R -> R), 0 < eps -> f2 x <> 0 -> f2 (x + h) <> 0 -> (forall a:R, Rabs a < alp_f2c -> Rabs (f2 (x + a) - f2 x) < Rabs (Rsqr (f2 x) * f2 x * eps / (8 * f1 x * l2))) -> (forall a:R, Rabs a < Rmin eps_f2 alp_f2 -> / Rabs (f2 (x + a)) < 2 / Rabs (f2 x)) -> h <> 0 -> Rabs h < alp_f2c -> Rabs h < Rmin eps_f2 alp_f2 -> f1 x <> 0 -> l2 <> 0 -> Rabs (l2 * f1 x / (Rsqr (f2 x) * f2 (x + h)) * (f2 (x + h) - f2 x)) < eps / 4.",
            "VernacStartTheoremProof",
            "1873ae7b0deb8dc3b1fc37a054bc589214681a1b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H9 := H2 h H5).",
            "VernacExtend",
            "ba64f23f3cba1967b095529473b60dea61b7e618"
        ],
        [
            "assert (H10 := H3 h H6).",
            "VernacExtend",
            "1e41b4ea868eece74300909a209ab3159c5598f4"
        ],
        [
            "apply Rle_lt_trans with (Rabs (l2 * f1 x / (Rsqr (f2 x) * f2 (x + h))) * Rabs (Rsqr (f2 x) * f2 x * eps / (8 * f1 x * l2))).",
            "VernacExtend",
            "9f49e7e81310309b7a6c0dba9c79b4b32a3210d2"
        ],
        [
            "rewrite Rabs_mult.",
            "VernacExtend",
            "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "left; apply H9.",
            "VernacExtend",
            "e70fdb16a0d64e5df390c4ad96c298acdecaa617"
        ],
        [
            "apply Rlt_le_trans with (Rabs (2 * l2 * (f1 x / (Rsqr (f2 x) * f2 x))) * Rabs (Rsqr (f2 x) * f2 x * eps / (8 * f1 x * l2))).",
            "VernacExtend",
            "228bbeab1216aee076b305e72381ee50b5c161cd"
        ],
        [
            "apply Rmult_lt_compat_r.",
            "VernacExtend",
            "e041593c57ec6470673cc705c01d215d230e0676"
        ],
        [
            "apply Rabs_pos_lt.",
            "VernacExtend",
            "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
        ],
        [
            "unfold Rdiv; unfold Rsqr; repeat apply prod_neq_R0; assumption || idtac.",
            "VernacExtend",
            "f3ebc5f2a5a090de677452f7cd4a4911b344a3a6"
        ],
        [
            "red; intro H11; rewrite H11 in H; elim (Rlt_irrefl _ H).",
            "VernacExtend",
            "d732c2166f00c588ff6d2a7b760be6d935e96991"
        ],
        [
            "apply Rinv_neq_0_compat; apply prod_neq_R0.",
            "VernacExtend",
            "43d7be7ff06664cc04ed7a06451660c3c1fef7f9"
        ],
        [
            "apply prod_neq_R0.",
            "VernacExtend",
            "4e401b99cc3c24b61ca502aa7107071c427501ea"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv.",
            "VernacExtend",
            "d9820df68a5475147f48d29acf89824b27f71597"
        ],
        [
            "repeat rewrite Rinv_mult_distr; try assumption || (unfold Rsqr; apply prod_neq_R0; assumption).",
            "VernacExtend",
            "e078971bc8f3334b0b0cba260f2998e96b4d0607"
        ],
        [
            "repeat rewrite Rabs_mult.",
            "VernacExtend",
            "d6b4933df484a8b55ce72214de61ad709dce9755"
        ],
        [
            "replace (Rabs 2) with 2.",
            "VernacExtend",
            "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
        ],
        [
            "replace (2 * Rabs l2 * (Rabs (f1 x) * (Rabs (/ Rsqr (f2 x)) * Rabs (/ f2 x)))) with (Rabs l2 * (Rabs (f1 x) * (Rabs (/ Rsqr (f2 x)) * (Rabs (/ f2 x) * 2)))); [ idtac | ring ].",
            "VernacExtend",
            "4e6ab5d232ecaab4f6639d2024d542d41e8b83c0"
        ],
        [
            "replace (Rabs l2 * Rabs (f1 x) * (Rabs (/ Rsqr (f2 x)) * Rabs (/ f2 (x + h)))) with (Rabs l2 * (Rabs (f1 x) * (Rabs (/ Rsqr (f2 x)) * Rabs (/ f2 (x + h))))); [ idtac | ring ].",
            "VernacExtend",
            "0b9540788da6f2fcd80d5ea5e6f2447bae552aea"
        ],
        [
            "repeat apply Rmult_lt_compat_l.",
            "VernacExtend",
            "6919e6a3b69996d4b31c47b68a682f919d9442d0"
        ],
        [
            "apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "apply Rabs_pos_lt; apply Rinv_neq_0_compat; unfold Rsqr; apply prod_neq_R0; assumption.",
            "VernacExtend",
            "7ba5f3ae74d30db8668a1314ce599fee6b08f8aa"
        ],
        [
            "repeat rewrite Rabs_Rinv; [ idtac | assumption | assumption ].",
            "VernacExtend",
            "29acc0a37c0026e73daa542db3c2f2cab6fa1f98"
        ],
        [
            "rewrite <- (Rmult_comm 2).",
            "VernacExtend",
            "ec1b6f591db64e627c4aad283471619dcbe50a75"
        ],
        [
            "unfold Rdiv in H10; exact H10.",
            "VernacExtend",
            "249b6882081bb64e8143aba7c8ef363d19215531"
        ],
        [
            "symmetry ; apply Rabs_right; left; prove_sup0.",
            "VernacExtend",
            "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
        ],
        [
            "right; unfold Rsqr, Rdiv.",
            "VernacExtend",
            "0ac3c0e2fed2269fad9352bef4e985e3f2ae2d26"
        ],
        [
            "rewrite Rinv_mult_distr; try assumption || discrR.",
            "VernacExtend",
            "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
        ],
        [
            "rewrite Rinv_mult_distr; try assumption || discrR.",
            "VernacExtend",
            "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
        ],
        [
            "rewrite Rinv_mult_distr; try assumption || discrR.",
            "VernacExtend",
            "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
        ],
        [
            "rewrite Rinv_mult_distr; try assumption || discrR.",
            "VernacExtend",
            "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
        ],
        [
            "repeat rewrite Rabs_mult.",
            "VernacExtend",
            "d6b4933df484a8b55ce72214de61ad709dce9755"
        ],
        [
            "repeat rewrite Rabs_Rinv; try assumption || discrR.",
            "VernacExtend",
            "a2185cfa36252ae847746019c20a923676d69ea8"
        ],
        [
            "replace (Rabs eps) with eps.",
            "VernacExtend",
            "f8fe2d92b5f356bae8fdcb46b1204b5d85fe5a30"
        ],
        [
            "replace (Rabs 8) with 8.",
            "VernacExtend",
            "17efe0a7041568b141a9f71812fb6cc21f3faf93"
        ],
        [
            "replace (Rabs 2) with 2.",
            "VernacExtend",
            "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
        ],
        [
            "replace 8 with (4 * 2); [ idtac | ring ].",
            "VernacExtend",
            "350063e5e13bc86265e705c30d8be52e2d7d8978"
        ],
        [
            "rewrite Rinv_mult_distr; discrR.",
            "VernacExtend",
            "19b4ee50d7d8d925a55b3b36f1eb8d500b73efc8"
        ],
        [
            "replace (2 * Rabs l2 * (Rabs (f1 x) * (/ Rabs (f2 x) * / Rabs (f2 x) * / Rabs (f2 x))) * (Rabs (f2 x) * Rabs (f2 x) * Rabs (f2 x) * eps * (/ 4 * / 2 * / Rabs (f1 x) * / Rabs l2))) with (eps * / 4 * (Rabs l2 * / Rabs l2) * (Rabs (f1 x) * / Rabs (f1 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (2 * / 2)); [ idtac | ring ].",
            "VernacExtend",
            "4dd579933b02fddcd026c9efff003390b72b31db"
        ],
        [
            "repeat rewrite <- Rinv_r_sym; try discrR || (apply Rabs_no_R0; assumption).",
            "VernacExtend",
            "3035f6536c58d33402f16defb43d871e51b0e1f7"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "symmetry ; apply Rabs_right; left; prove_sup0.",
            "VernacExtend",
            "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
        ],
        [
            "symmetry ; apply Rabs_right; left; prove_sup.",
            "VernacExtend",
            "007fad37928051bee05735624464ef6389f85727"
        ],
        [
            "symmetry ; apply Rabs_right; left; assumption.",
            "VernacExtend",
            "4f64dc679edf75d96b4c21eeb39e369799902dd4"
        ],
        [
            "apply prod_neq_R0; assumption || discrR.",
            "VernacExtend",
            "9d4b099478b1028b5760d3e9947ce8bc5e5ec092"
        ],
        [
            "apply prod_neq_R0; assumption.",
            "VernacExtend",
            "680f594f854a1838d82542e91066d23de34b831d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma D_x_no_cond : forall x a:R, a <> 0 -> D_x no_cond x (x + a).",
            "VernacStartTheoremProof",
            "a40147cf8c65e22f81be4df0ca8536fe45dfcd51"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold D_x, no_cond.",
            "VernacExtend",
            "abf922a23fd977fc0650bb6c40e8f5a3a9fb7f07"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply Rminus_not_eq.",
            "VernacExtend",
            "0e42ebc61186a42bc171fa3af4f91325ee9862fc"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "rewrite Ropp_plus_distr.",
            "VernacExtend",
            "0658bf5be897ad7cda1a0e2a2d30180316272135"
        ],
        [
            "rewrite <- Rplus_assoc.",
            "VernacExtend",
            "0045c3c4dbcce7a3043f4f1fb681ccf7a8d6148e"
        ],
        [
            "rewrite Rplus_opp_r.",
            "VernacExtend",
            "0b42d27f90670486f4fe47560bedca46e1efb1ec"
        ],
        [
            "rewrite Rplus_0_l.",
            "VernacExtend",
            "b29625dd91809e03948728f9a3f640ec69c648c0"
        ],
        [
            "apply Ropp_neq_0_compat; assumption.",
            "VernacExtend",
            "a539604805abaeda5e27c6d280fe7b2b24f15b11"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rabs_4 : forall a b c d:R, Rabs (a + b + c + d) <= Rabs a + Rabs b + Rabs c + Rabs d.",
            "VernacStartTheoremProof",
            "ed519f2419b11a6dc1d8a7c487cea0fcbda8a0ab"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Rle_trans with (Rabs (a + b) + Rabs (c + d)).",
            "VernacExtend",
            "c2e8df53fa0c50fee15992cf4063e42aa920d767"
        ],
        [
            "replace (a + b + c + d) with (a + b + (c + d)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "4e12cb330ad0c9f4628fa15b9dba15ad829fd0f0"
        ],
        [
            "apply Rle_trans with (Rabs a + Rabs b + Rabs (c + d)).",
            "VernacExtend",
            "fb614218f9839feac5c4a22d0392e72b3462ae3e"
        ],
        [
            "apply Rplus_le_compat_r.",
            "VernacExtend",
            "5ca7acb5e67c7d7a5b6143fd11bc1e75c3e361e4"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "repeat rewrite Rplus_assoc; repeat apply Rplus_le_compat_l.",
            "VernacExtend",
            "533cce876e6ab9be878dca2dddd1391ff9e94437"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Rlt_4 : forall a b c d e f g h:R, a < b -> c < d -> e < f -> g < h -> a + c + e + g < b + d + f + h.",
            "VernacStartTheoremProof",
            "9cb1522162a51bfc021e0761df1f3437509ccec1"
        ],
        [
            "intros; apply Rlt_trans with (b + c + e + g).",
            "VernacExtend",
            "e35acc8287579fb7cb789b8e278da55f52d0e106"
        ],
        [
            "repeat apply Rplus_lt_compat_r; assumption.",
            "VernacExtend",
            "72e6186c8a5c50a493a3a806e138f90e3dc78814"
        ],
        [
            "repeat rewrite Rplus_assoc; apply Rplus_lt_compat_l.",
            "VernacExtend",
            "b99119b2cbb1f495a2d929b9cb93ee5dd1fe3b80"
        ],
        [
            "apply Rlt_trans with (d + e + g).",
            "VernacExtend",
            "72eb92e433815511c41f97e2748a136bf5df8664"
        ],
        [
            "rewrite Rplus_assoc; apply Rplus_lt_compat_r; assumption.",
            "VernacExtend",
            "8da7e7625989562cbe7278f416f73f755732a5cf"
        ],
        [
            "rewrite Rplus_assoc; apply Rplus_lt_compat_l; apply Rlt_trans with (f + g).",
            "VernacExtend",
            "2211edd38a6da711647c4d615562074b1af3cf9d"
        ],
        [
            "apply Rplus_lt_compat_r; assumption.",
            "VernacExtend",
            "b6b08b5181f1b0b9ee205993955ce6aebb0b4a20"
        ],
        [
            "apply Rplus_lt_compat_l; assumption.",
            "VernacExtend",
            "44ce99cd422bdcc117c49c3d0f1b9cfdbe5e3579"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation Rmin_2 := Rmin_glb_lt (only parsing).",
            "VernacSyntacticDefinition",
            "e1580aae03291bfb181ebe221656f94a9d71e54d"
        ],
        [
            "Lemma quadruple : forall x:R, 4 * x = x + x + x + x.",
            "VernacStartTheoremProof",
            "2038055e035f8359dc806c73a8a87c2c4ce175cd"
        ],
        [
            "intro; ring.",
            "VernacExtend",
            "a63cb55c0d6dc7f5f40d630fd18daddefae14d26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma quadruple_var : forall x:R, x = x / 4 + x / 4 + x / 4 + x / 4.",
            "VernacStartTheoremProof",
            "eb9f0a43a15234eaed841d87757bc26cf0e8aafe"
        ],
        [
            "intro; rewrite <- quadruple.",
            "VernacExtend",
            "d45ccf63072323f8fd70471dbf66a91e1c42de8d"
        ],
        [
            "unfold Rdiv; rewrite <- Rmult_assoc; rewrite Rinv_r_simpl_m; discrR.",
            "VernacExtend",
            "6157112e81a972d929b10b1b3574e6cfaa649584"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuous_neq_0 : forall (f:R -> R) (x0:R), continuity_pt f x0 -> f x0 <> 0 -> exists eps : posreal, (forall h:R, Rabs h < eps -> f (x0 + h) <> 0).",
            "VernacStartTheoremProof",
            "9214873397618b19d97a8677d14bae3fbefe36bd"
        ],
        [
            "intros; unfold continuity_pt in H; unfold continue_in in H; unfold limit1_in in H; unfold limit_in in H; elim (H (Rabs (f x0 / 2))).",
            "VernacExtend",
            "dd28fc2e1ecb4c34978853dacc556e0818f07701"
        ],
        [
            "intros; elim H1; intros.",
            "VernacExtend",
            "2f377cb4b82600aab4e81ad22310ada1d2fe8450"
        ],
        [
            "exists (mkposreal x H2).",
            "VernacExtend",
            "560a13c12a672ed7b64fc0bc6c75da85b39fbf69"
        ],
        [
            "intros; assert (H5 := H3 (x0 + h)).",
            "VernacExtend",
            "e1d0c614820301aa1ac25ac6fc6b5ac059c5246c"
        ],
        [
            "cut (dist R_met (x0 + h) x0 < x -> dist R_met (f (x0 + h)) (f x0) < Rabs (f x0 / 2)).",
            "VernacExtend",
            "5fe2939135dc397bc9415781a6d52b3fab563abf"
        ],
        [
            "unfold dist; simpl; unfold R_dist; replace (x0 + h - x0) with h.",
            "VernacExtend",
            "718bb034339fa92e88700c291596a2774d17f035"
        ],
        [
            "intros; assert (H7 := H6 H4).",
            "VernacExtend",
            "b9ef6ad2c1530cf101cc42aa60624e188fd3eb2c"
        ],
        [
            "red; intro.",
            "VernacExtend",
            "12e00b6ab6f8834b6f81959ca42843abaa311f37"
        ],
        [
            "rewrite H8 in H7; unfold Rminus in H7; rewrite Rplus_0_l in H7; rewrite Rabs_Ropp in H7; unfold Rdiv in H7; rewrite Rabs_mult in H7; pattern (Rabs (f x0)) at 1 in H7; rewrite <- Rmult_1_r in H7.",
            "VernacExtend",
            "bb21e22fb893e9588802600c98704ea14cac712d"
        ],
        [
            "cut (0 < Rabs (f x0)).",
            "VernacExtend",
            "695de6f3e343068ea856c065e7fc286953c01cd8"
        ],
        [
            "intro; assert (H10 := Rmult_lt_reg_l _ _ _ H9 H7).",
            "VernacExtend",
            "a5902c286b45337455a35c89f0dc2878f9a851f3"
        ],
        [
            "cut (Rabs (/ 2) = / 2).",
            "VernacExtend",
            "e908cb22a4490aa83b79b0b04f44685ec295653e"
        ],
        [
            "assert (Hyp : 0 < 2).",
            "VernacExtend",
            "9d7393875192f4b20ead598d4acf4946ceab5eff"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "intro; rewrite H11 in H10; assert (H12 := Rmult_lt_compat_l 2 _ _ Hyp H10); rewrite Rmult_1_r in H12; rewrite <- Rinv_r_sym in H12; [ idtac | discrR ].",
            "VernacExtend",
            "47e097311cad614ca24e824527299df42c6291f9"
        ],
        [
            "now apply lt_IZR in H12.",
            "VernacExtend",
            "5212caabd6a8515a88c041f852ff48045d91efd1"
        ],
        [
            "unfold Rabs; case (Rcase_abs (/ 2)) as [Hlt|Hge].",
            "VernacExtend",
            "b0bf43810c8af73d06b7539d22d293dc09c080dc"
        ],
        [
            "assert (Hyp : 0 < 2).",
            "VernacExtend",
            "9d7393875192f4b20ead598d4acf4946ceab5eff"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "assert (H11 := Rmult_lt_compat_l 2 _ _ Hyp Hlt); rewrite Rmult_0_r in H11; rewrite <- Rinv_r_sym in H11; [ idtac | discrR ].",
            "VernacExtend",
            "758c29822c273b8fdff46d08990d40ae29210dce"
        ],
        [
            "elim (Rlt_irrefl 0 (Rlt_trans _ _ _ Rlt_0_1 H11)).",
            "VernacExtend",
            "41d6fc1f3a25b92ec1bbe76f69047ee7288d663b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply (Rabs_pos_lt _ H0).",
            "VernacExtend",
            "4b19843f402572976680b0be5989f3620fd3910e"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "assert (H6 := Req_dec x0 (x0 + h)); elim H6; intro.",
            "VernacExtend",
            "6b3fc139edd3a44638d5478c6e7355b2ae8bdfcb"
        ],
        [
            "intro; rewrite <- H7.",
            "VernacExtend",
            "43570b0de75c8a32365a783a9cec1046887a86b4"
        ],
        [
            "unfold R_met, dist; unfold R_dist; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply Rabs_pos_lt.",
            "VernacExtend",
            "14d81fa3cd10ab9b811b81d93b64550aaa4895de"
        ],
        [
            "unfold Rdiv; apply prod_neq_R0; [ assumption | apply Rinv_neq_0_compat; discrR ].",
            "VernacExtend",
            "5c354a94a910d07e2521a36cead8ef086225045b"
        ],
        [
            "intro; apply H5.",
            "VernacExtend",
            "d357d1775a1deead2daaa6980cb732f6dbd28066"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold D_x, no_cond.",
            "VernacExtend",
            "abf922a23fd977fc0650bb6c40e8f5a3a9fb7f07"
        ],
        [
            "split; trivial || assumption.",
            "VernacExtend",
            "8e0a03f9295f5fc39ee8c419cd47b96f395fe62f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "change (0 < Rabs (f x0 / 2)).",
            "VernacExtend",
            "09ac2e33249fc0df366685ed21a6e8fcbeda914f"
        ],
        [
            "apply Rabs_pos_lt; unfold Rdiv; apply prod_neq_R0.",
            "VernacExtend",
            "de776502ec5b0781f10e3919fa3cb1fdb5a8599c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rinv_neq_0_compat; discrR.",
            "VernacExtend",
            "c996ce35ba9924ff499f316d0fb3eaf573a9e988"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "formule",
            "line_nb": 5,
            "steps": [
                {
                    "command": [
                        "intros; unfold Rdiv, Rminus, Rsqr.",
                        "VernacExtend",
                        "ad67836f5dc569e70a733ba05f825f1c533d0460"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rmult_plus_distr_r; repeat rewrite Rmult_plus_distr_l; repeat rewrite Rinv_mult_distr; try assumption.",
                        "VernacExtend",
                        "390e950be9102e5beac2ec2e8ce1d3b574813603"
                    ]
                },
                {
                    "command": [
                        "replace (l1 * f2 x * (/ f2 x * / f2 x)) with (l1 * / f2 x * (f2 x * / f2 x)); [ idtac | ring ].",
                        "VernacExtend",
                        "bbce3e92c3df27728e350f1094493b6a6a87396b"
                    ]
                },
                {
                    "command": [
                        "replace (l1 * (/ f2 x * / f2 (x + h)) * f2 x) with (l1 * / f2 (x + h) * (f2 x * / f2 x)); [ idtac | ring ].",
                        "VernacExtend",
                        "d2e414f9a715939ca6ce5b78a68470fcf56312f2"
                    ]
                },
                {
                    "command": [
                        "replace (l1 * (/ f2 x * / f2 (x + h)) * - f2 (x + h)) with (- (l1 * / f2 x * (f2 (x + h) * / f2 (x + h)))); [ idtac | ring ].",
                        "VernacExtend",
                        "86d44685b726b2c0b7c669a06becbecea42eb66c"
                    ]
                },
                {
                    "command": [
                        "replace (f1 x * (/ f2 x * / f2 (x + h)) * (f2 (x + h) * / h)) with (f1 x * / f2 x * / h * (f2 (x + h) * / f2 (x + h))); [ idtac | ring ].",
                        "VernacExtend",
                        "e2c8c51a74631cf1f5bf74a735616a315aa03077"
                    ]
                },
                {
                    "command": [
                        "replace (f1 x * (/ f2 x * / f2 (x + h)) * (- f2 x * / h)) with (- (f1 x * / f2 (x + h) * / h * (f2 x * / f2 x))); [ idtac | ring ].",
                        "VernacExtend",
                        "2b314d5c0704cb12bcf71a29ec77e31053013825"
                    ]
                },
                {
                    "command": [
                        "replace (l2 * f1 x * (/ f2 x * / f2 x * / f2 (x + h)) * f2 (x + h)) with (l2 * f1 x * / f2 x * / f2 x * (f2 (x + h) * / f2 (x + h))); [ idtac | ring ].",
                        "VernacExtend",
                        "36d3e50de3d709f3de9ed98d30637759d0990fe2"
                    ]
                },
                {
                    "command": [
                        "replace (l2 * f1 x * (/ f2 x * / f2 x * / f2 (x + h)) * - f2 x) with (- (l2 * f1 x * / f2 x * / f2 (x + h) * (f2 x * / f2 x))); [ idtac | ring ].",
                        "VernacExtend",
                        "03dc169b24917a9d8b474e73b6e6e05b54ad5509"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rinv_r_sym; try assumption || ring.",
                        "VernacExtend",
                        "1230af2e42d637e1680c05f8c32f559cf7a864ca"
                    ]
                },
                {
                    "command": [
                        "apply prod_neq_R0; assumption.",
                        "VernacExtend",
                        "680f594f854a1838d82542e91066d23de34b831d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maj_term1",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := H3 h H6).",
                        "VernacExtend",
                        "328a5dde999588bd6f5f12485bdad17338d35ce1"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := H2 h H4 H5).",
                        "VernacExtend",
                        "d99d65dc8857892453485fe7273001fbe2cbbcde"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (2 / Rabs (f2 x) * Rabs ((f1 (x + h) - f1 x) / h - l1)).",
                        "VernacExtend",
                        "68e45621a2e9d4eb2d282e8f8e9c6978fce929f3"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult.",
                        "VernacExtend",
                        "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_r.",
                        "VernacExtend",
                        "6c4c5a82dab802842919dd673f1978a3cb8cff73"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Rinv; [ left; exact H7 | assumption ].",
                        "VernacExtend",
                        "ba4e82ae1b3cc6f683fb7a45103505a8707a2e83"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (2 / Rabs (f2 x) * Rabs (eps * f2 x / 8)).",
                        "VernacExtend",
                        "e0bbb7b5229116eef3c746ea3dc25d8508cec318"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "e06ce02cd2654586097cfda8f116dd4fe6d6b2a8"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ prove_sup0 | apply Rinv_0_lt_compat; apply Rabs_pos_lt; assumption ].",
                        "VernacExtend",
                        "2181338511378ce5cd2453fa70f7243a8d086266"
                    ]
                },
                {
                    "command": [
                        "exact H8.",
                        "VernacExtend",
                        "125096764f05c2e6b59a11140e6c3ad0b07b1f9e"
                    ]
                },
                {
                    "command": [
                        "right; unfold Rdiv.",
                        "VernacExtend",
                        "120828648c310f22e50e80d8acbd6dd20a8aea1a"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_mult.",
                        "VernacExtend",
                        "d6b4933df484a8b55ce72214de61ad709dce9755"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_Rinv; discrR.",
                        "VernacExtend",
                        "b9a6d3814023d62e8e1962943f467de7d5891a49"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rabs_pos_eq 8) by now apply IZR_le.",
                        "VernacExtend",
                        "42536366d130158125c18b7f69f81ff9d1f74040"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rabs_pos_eq eps).",
                        "VernacExtend",
                        "30f802c86ea9bdefd6dcf9931424b3932a45f109"
                    ]
                },
                {
                    "command": [
                        "field.",
                        "VernacExtend",
                        "93f44750d651d466b74a0cc63f88acb56273d533"
                    ]
                },
                {
                    "command": [
                        "now apply Rabs_no_R0.",
                        "VernacExtend",
                        "799535f6b2745ffc198f4b7b5a653816e4ede72a"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le.",
                        "VernacExtend",
                        "3fa67bbd472123a7abc1f777aecc643fb3862e46"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maj_term2",
            "line_nb": 41,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := H3 h H6).",
                        "VernacExtend",
                        "c17d32db62e10c12e87a14e075d13b00611c7061"
                    ]
                },
                {
                    "command": [
                        "assert (H9 := H2 h H5).",
                        "VernacExtend",
                        "ba64f23f3cba1967b095529473b60dea61b7e618"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (l1 / (f2 x * f2 (x + h))) * Rabs (eps * Rsqr (f2 x) / (8 * l1))).",
                        "VernacExtend",
                        "8bdbbb6451b007af23c5e40ff448ce51136f174b"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "6a5d508410f63d72ff7b81bb1e5b91a99e4a72b3"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_Ropp (f2 x - f2 (x + h))); rewrite Ropp_minus_distr.",
                        "VernacExtend",
                        "41606e2720bfff1c8c4e5a3faac03e029a8fdbd2"
                    ]
                },
                {
                    "command": [
                        "left; apply H9.",
                        "VernacExtend",
                        "e70fdb16a0d64e5df390c4ad96c298acdecaa617"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rabs (2 * (l1 / (f2 x * f2 x))) * Rabs (eps * Rsqr (f2 x) / (8 * l1))).",
                        "VernacExtend",
                        "235d0b668833d7b1172084fdb15989af6b00e661"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_r.",
                        "VernacExtend",
                        "e041593c57ec6470673cc705c01d215d230e0676"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt.",
                        "VernacExtend",
                        "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; unfold Rsqr; repeat apply prod_neq_R0; try assumption || discrR.",
                        "VernacExtend",
                        "fafe1e1edf5f85b3618ff10dd58051f5f4779a80"
                    ]
                },
                {
                    "command": [
                        "red; intro H10; rewrite H10 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "194e3131b64bc6bf0089d56f2b9755c7d519fb9a"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; apply prod_neq_R0; try assumption || discrR.",
                        "VernacExtend",
                        "8a751a1cd0974fd9b958bed98e9c555d53760e51"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rinv_mult_distr; try assumption.",
                        "VernacExtend",
                        "4ad8ceb0938933bf62affc6b7280c6e29caa1657"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_mult.",
                        "VernacExtend",
                        "d6b4933df484a8b55ce72214de61ad709dce9755"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs 2) with 2.",
                        "VernacExtend",
                        "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm 2).",
                        "VernacExtend",
                        "fa06fc35a43a455b406d76e181d26b3606a0680c"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs l1 * (Rabs (/ f2 x) * Rabs (/ f2 x)) * 2) with (Rabs l1 * (Rabs (/ f2 x) * (Rabs (/ f2 x) * 2))); [ idtac | ring ].",
                        "VernacExtend",
                        "344eaab5bc504ec7e890db59ef4e6192c6e48488"
                    ]
                },
                {
                    "command": [
                        "repeat apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "6919e6a3b69996d4b31c47b68a682f919d9442d0"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; apply Rinv_neq_0_compat; assumption.",
                        "VernacExtend",
                        "d36aea9b35f37a9c7ac1fbb75decf0e395ba111b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_Rinv; try assumption.",
                        "VernacExtend",
                        "21ed15039ef2db0797ebad8987f5af9c0ff4e73c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_comm 2).",
                        "VernacExtend",
                        "ec1b6f591db64e627c4aad283471619dcbe50a75"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv in H8; exact H8.",
                        "VernacExtend",
                        "bb4a2891cb20f09478b35e9b58e17595f9ef2570"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; prove_sup0.",
                        "VernacExtend",
                        "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "unfold Rsqr, Rdiv.",
                        "VernacExtend",
                        "50122c6b25949ced0c6a8fc6a4b5f3a074f33ff6"
                    ]
                },
                {
                    "command": [
                        "do 1 rewrite Rinv_mult_distr; try assumption || discrR.",
                        "VernacExtend",
                        "92004f96ae3e58c2cf125c2e519943a575877a5b"
                    ]
                },
                {
                    "command": [
                        "do 1 rewrite Rinv_mult_distr; try assumption || discrR.",
                        "VernacExtend",
                        "92004f96ae3e58c2cf125c2e519943a575877a5b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_mult.",
                        "VernacExtend",
                        "d6b4933df484a8b55ce72214de61ad709dce9755"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_Rinv; try assumption || discrR.",
                        "VernacExtend",
                        "a2185cfa36252ae847746019c20a923676d69ea8"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs eps) with eps.",
                        "VernacExtend",
                        "f8fe2d92b5f356bae8fdcb46b1204b5d85fe5a30"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs 8) with 8.",
                        "VernacExtend",
                        "17efe0a7041568b141a9f71812fb6cc21f3faf93"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs 2) with 2.",
                        "VernacExtend",
                        "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
                    ]
                },
                {
                    "command": [
                        "replace 8 with (4 * 2); [ idtac | ring ].",
                        "VernacExtend",
                        "350063e5e13bc86265e705c30d8be52e2d7d8978"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; discrR.",
                        "VernacExtend",
                        "19b4ee50d7d8d925a55b3b36f1eb8d500b73efc8"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (Rabs l1 * (/ Rabs (f2 x) * / Rabs (f2 x))) * (eps * (Rabs (f2 x) * Rabs (f2 x)) * (/ 4 * / 2 * / Rabs l1))) with (eps * / 4 * (Rabs l1 * / Rabs l1) * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (2 * / 2)); [ idtac | ring ].",
                        "VernacExtend",
                        "a1a8fe75f086f511d90b9593d875eb4fadc900f4"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rinv_r_sym; try (apply Rabs_no_R0; assumption) || discrR.",
                        "VernacExtend",
                        "e06aa6c793b90e6bfcc13f99b8d5bef80829de78"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; prove_sup0.",
                        "VernacExtend",
                        "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; prove_sup.",
                        "VernacExtend",
                        "007fad37928051bee05735624464ef6389f85727"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; assumption.",
                        "VernacExtend",
                        "4f64dc679edf75d96b4c21eeb39e369799902dd4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maj_term3",
            "line_nb": 87,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := H2 h H4 H5).",
                        "VernacExtend",
                        "d99d65dc8857892453485fe7273001fbe2cbbcde"
                    ]
                },
                {
                    "command": [
                        "assert (H9 := H3 h H6).",
                        "VernacExtend",
                        "4cfc015ec3fe65b66dbba369a5546a744e8f747d"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (f1 x / (f2 x * f2 (x + h))) * Rabs (Rsqr (f2 x) * eps / (8 * f1 x))).",
                        "VernacExtend",
                        "ffc5212c0e47912e671825f08f6ceb868539e67d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult.",
                        "VernacExtend",
                        "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "left; apply H8.",
                        "VernacExtend",
                        "113bcc719ba4683fd876511aa549925172c4278b"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rabs (2 * (f1 x / (f2 x * f2 x))) * Rabs (Rsqr (f2 x) * eps / (8 * f1 x))).",
                        "VernacExtend",
                        "4be81ede8424e28293da6bc4fadf2d86b36585f2"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_r.",
                        "VernacExtend",
                        "e041593c57ec6470673cc705c01d215d230e0676"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt.",
                        "VernacExtend",
                        "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; unfold Rsqr; repeat apply prod_neq_R0; try assumption.",
                        "VernacExtend",
                        "fdcfc10355e703ffd2ff03c758d430877779591e"
                    ]
                },
                {
                    "command": [
                        "red; intro H10; rewrite H10 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "194e3131b64bc6bf0089d56f2b9755c7d519fb9a"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; apply prod_neq_R0; discrR || assumption.",
                        "VernacExtend",
                        "a42ad6db487f5b7d2824bf5872e5f1cf2362bef6"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rinv_mult_distr; try assumption.",
                        "VernacExtend",
                        "4ad8ceb0938933bf62affc6b7280c6e29caa1657"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_mult.",
                        "VernacExtend",
                        "d6b4933df484a8b55ce72214de61ad709dce9755"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs 2) with 2.",
                        "VernacExtend",
                        "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm 2).",
                        "VernacExtend",
                        "fa06fc35a43a455b406d76e181d26b3606a0680c"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (f1 x) * (Rabs (/ f2 x) * Rabs (/ f2 x)) * 2) with (Rabs (f1 x) * (Rabs (/ f2 x) * (Rabs (/ f2 x) * 2))); [ idtac | ring ].",
                        "VernacExtend",
                        "cc741355a064fd42fd35b305307ae6dc2d7ba319"
                    ]
                },
                {
                    "command": [
                        "repeat apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "6919e6a3b69996d4b31c47b68a682f919d9442d0"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; apply Rinv_neq_0_compat; assumption.",
                        "VernacExtend",
                        "d36aea9b35f37a9c7ac1fbb75decf0e395ba111b"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_Rinv; assumption || idtac.",
                        "VernacExtend",
                        "e2f53b5a2df468891ce74443278b59740d4bedcc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_comm 2).",
                        "VernacExtend",
                        "ec1b6f591db64e627c4aad283471619dcbe50a75"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv in H9; exact H9.",
                        "VernacExtend",
                        "7dea2e4cdf4f0556a33af6e1fcf8d51479aeb017"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; prove_sup0.",
                        "VernacExtend",
                        "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "unfold Rsqr, Rdiv.",
                        "VernacExtend",
                        "50122c6b25949ced0c6a8fc6a4b5f3a074f33ff6"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; try assumption || discrR.",
                        "VernacExtend",
                        "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; try assumption || discrR.",
                        "VernacExtend",
                        "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_mult.",
                        "VernacExtend",
                        "d6b4933df484a8b55ce72214de61ad709dce9755"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_Rinv; try assumption || discrR.",
                        "VernacExtend",
                        "a2185cfa36252ae847746019c20a923676d69ea8"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs eps) with eps.",
                        "VernacExtend",
                        "f8fe2d92b5f356bae8fdcb46b1204b5d85fe5a30"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs 8) with 8.",
                        "VernacExtend",
                        "17efe0a7041568b141a9f71812fb6cc21f3faf93"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs 2) with 2.",
                        "VernacExtend",
                        "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
                    ]
                },
                {
                    "command": [
                        "replace 8 with (4 * 2); [ idtac | ring ].",
                        "VernacExtend",
                        "350063e5e13bc86265e705c30d8be52e2d7d8978"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; discrR.",
                        "VernacExtend",
                        "19b4ee50d7d8d925a55b3b36f1eb8d500b73efc8"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (Rabs (f1 x) * (/ Rabs (f2 x) * / Rabs (f2 x))) * (Rabs (f2 x) * Rabs (f2 x) * eps * (/ 4 * / 2 * / Rabs (f1 x)))) with (eps * / 4 * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f1 x) * / Rabs (f1 x)) * (2 * / 2)); [ idtac | ring ].",
                        "VernacExtend",
                        "424d3f8122b2e18ab8434a9e8fbf5486709126bc"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rinv_r_sym; try discrR || (apply Rabs_no_R0; assumption).",
                        "VernacExtend",
                        "3035f6536c58d33402f16defb43d871e51b0e1f7"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; prove_sup0.",
                        "VernacExtend",
                        "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; prove_sup.",
                        "VernacExtend",
                        "007fad37928051bee05735624464ef6389f85727"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; assumption.",
                        "VernacExtend",
                        "4f64dc679edf75d96b4c21eeb39e369799902dd4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maj_term4",
            "line_nb": 133,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H9 := H2 h H5).",
                        "VernacExtend",
                        "ba64f23f3cba1967b095529473b60dea61b7e618"
                    ]
                },
                {
                    "command": [
                        "assert (H10 := H3 h H6).",
                        "VernacExtend",
                        "1e41b4ea868eece74300909a209ab3159c5598f4"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (l2 * f1 x / (Rsqr (f2 x) * f2 (x + h))) * Rabs (Rsqr (f2 x) * f2 x * eps / (8 * f1 x * l2))).",
                        "VernacExtend",
                        "9f49e7e81310309b7a6c0dba9c79b4b32a3210d2"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult.",
                        "VernacExtend",
                        "0a976c5fce10a63ed58fa2e07dd76a462e6697c3"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "left; apply H9.",
                        "VernacExtend",
                        "e70fdb16a0d64e5df390c4ad96c298acdecaa617"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rabs (2 * l2 * (f1 x / (Rsqr (f2 x) * f2 x))) * Rabs (Rsqr (f2 x) * f2 x * eps / (8 * f1 x * l2))).",
                        "VernacExtend",
                        "228bbeab1216aee076b305e72381ee50b5c161cd"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_compat_r.",
                        "VernacExtend",
                        "e041593c57ec6470673cc705c01d215d230e0676"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt.",
                        "VernacExtend",
                        "e7789cb0a3c08fb3fbbda456620a8022b26229ce"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; unfold Rsqr; repeat apply prod_neq_R0; assumption || idtac.",
                        "VernacExtend",
                        "f3ebc5f2a5a090de677452f7cd4a4911b344a3a6"
                    ]
                },
                {
                    "command": [
                        "red; intro H11; rewrite H11 in H; elim (Rlt_irrefl _ H).",
                        "VernacExtend",
                        "d732c2166f00c588ff6d2a7b760be6d935e96991"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; apply prod_neq_R0.",
                        "VernacExtend",
                        "43d7be7ff06664cc04ed7a06451660c3c1fef7f9"
                    ]
                },
                {
                    "command": [
                        "apply prod_neq_R0.",
                        "VernacExtend",
                        "4e401b99cc3c24b61ca502aa7107071c427501ea"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv.",
                        "VernacExtend",
                        "d9820df68a5475147f48d29acf89824b27f71597"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rinv_mult_distr; try assumption || (unfold Rsqr; apply prod_neq_R0; assumption).",
                        "VernacExtend",
                        "e078971bc8f3334b0b0cba260f2998e96b4d0607"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_mult.",
                        "VernacExtend",
                        "d6b4933df484a8b55ce72214de61ad709dce9755"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs 2) with 2.",
                        "VernacExtend",
                        "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
                    ]
                },
                {
                    "command": [
                        "replace (2 * Rabs l2 * (Rabs (f1 x) * (Rabs (/ Rsqr (f2 x)) * Rabs (/ f2 x)))) with (Rabs l2 * (Rabs (f1 x) * (Rabs (/ Rsqr (f2 x)) * (Rabs (/ f2 x) * 2)))); [ idtac | ring ].",
                        "VernacExtend",
                        "4e6ab5d232ecaab4f6639d2024d542d41e8b83c0"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs l2 * Rabs (f1 x) * (Rabs (/ Rsqr (f2 x)) * Rabs (/ f2 (x + h)))) with (Rabs l2 * (Rabs (f1 x) * (Rabs (/ Rsqr (f2 x)) * Rabs (/ f2 (x + h))))); [ idtac | ring ].",
                        "VernacExtend",
                        "0b9540788da6f2fcd80d5ea5e6f2447bae552aea"
                    ]
                },
                {
                    "command": [
                        "repeat apply Rmult_lt_compat_l.",
                        "VernacExtend",
                        "6919e6a3b69996d4b31c47b68a682f919d9442d0"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; apply Rinv_neq_0_compat; unfold Rsqr; apply prod_neq_R0; assumption.",
                        "VernacExtend",
                        "7ba5f3ae74d30db8668a1314ce599fee6b08f8aa"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_Rinv; [ idtac | assumption | assumption ].",
                        "VernacExtend",
                        "29acc0a37c0026e73daa542db3c2f2cab6fa1f98"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_comm 2).",
                        "VernacExtend",
                        "ec1b6f591db64e627c4aad283471619dcbe50a75"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv in H10; exact H10.",
                        "VernacExtend",
                        "249b6882081bb64e8143aba7c8ef363d19215531"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; prove_sup0.",
                        "VernacExtend",
                        "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
                    ]
                },
                {
                    "command": [
                        "right; unfold Rsqr, Rdiv.",
                        "VernacExtend",
                        "0ac3c0e2fed2269fad9352bef4e985e3f2ae2d26"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; try assumption || discrR.",
                        "VernacExtend",
                        "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; try assumption || discrR.",
                        "VernacExtend",
                        "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; try assumption || discrR.",
                        "VernacExtend",
                        "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; try assumption || discrR.",
                        "VernacExtend",
                        "74097afbe8fd909c0945fc0d3774ec7bcb04cf93"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_mult.",
                        "VernacExtend",
                        "d6b4933df484a8b55ce72214de61ad709dce9755"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_Rinv; try assumption || discrR.",
                        "VernacExtend",
                        "a2185cfa36252ae847746019c20a923676d69ea8"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs eps) with eps.",
                        "VernacExtend",
                        "f8fe2d92b5f356bae8fdcb46b1204b5d85fe5a30"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs 8) with 8.",
                        "VernacExtend",
                        "17efe0a7041568b141a9f71812fb6cc21f3faf93"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs 2) with 2.",
                        "VernacExtend",
                        "96381913f1b02d9cf9cece2095b20dd5b8f53c72"
                    ]
                },
                {
                    "command": [
                        "replace 8 with (4 * 2); [ idtac | ring ].",
                        "VernacExtend",
                        "350063e5e13bc86265e705c30d8be52e2d7d8978"
                    ]
                },
                {
                    "command": [
                        "rewrite Rinv_mult_distr; discrR.",
                        "VernacExtend",
                        "19b4ee50d7d8d925a55b3b36f1eb8d500b73efc8"
                    ]
                },
                {
                    "command": [
                        "replace (2 * Rabs l2 * (Rabs (f1 x) * (/ Rabs (f2 x) * / Rabs (f2 x) * / Rabs (f2 x))) * (Rabs (f2 x) * Rabs (f2 x) * Rabs (f2 x) * eps * (/ 4 * / 2 * / Rabs (f1 x) * / Rabs l2))) with (eps * / 4 * (Rabs l2 * / Rabs l2) * (Rabs (f1 x) * / Rabs (f1 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (Rabs (f2 x) * / Rabs (f2 x)) * (2 * / 2)); [ idtac | ring ].",
                        "VernacExtend",
                        "4dd579933b02fddcd026c9efff003390b72b31db"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite <- Rinv_r_sym; try discrR || (apply Rabs_no_R0; assumption).",
                        "VernacExtend",
                        "3035f6536c58d33402f16defb43d871e51b0e1f7"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; prove_sup0.",
                        "VernacExtend",
                        "34dbb347e01c29d7215669c837ab826d2ddb4ff1"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; prove_sup.",
                        "VernacExtend",
                        "007fad37928051bee05735624464ef6389f85727"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_right; left; assumption.",
                        "VernacExtend",
                        "4f64dc679edf75d96b4c21eeb39e369799902dd4"
                    ]
                },
                {
                    "command": [
                        "apply prod_neq_R0; assumption || discrR.",
                        "VernacExtend",
                        "9d4b099478b1028b5760d3e9947ce8bc5e5ec092"
                    ]
                },
                {
                    "command": [
                        "apply prod_neq_R0; assumption.",
                        "VernacExtend",
                        "680f594f854a1838d82542e91066d23de34b831d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "D_x_no_cond",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold D_x, no_cond.",
                        "VernacExtend",
                        "abf922a23fd977fc0650bb6c40e8f5a3a9fb7f07"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_not_eq.",
                        "VernacExtend",
                        "0e42ebc61186a42bc171fa3af4f91325ee9862fc"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus.",
                        "VernacExtend",
                        "be913ef3bb9103a3081d46d811769f83edb6f7a5"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_plus_distr.",
                        "VernacExtend",
                        "0658bf5be897ad7cda1a0e2a2d30180316272135"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rplus_assoc.",
                        "VernacExtend",
                        "0045c3c4dbcce7a3043f4f1fb681ccf7a8d6148e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_opp_r.",
                        "VernacExtend",
                        "0b42d27f90670486f4fe47560bedca46e1efb1ec"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_l.",
                        "VernacExtend",
                        "b29625dd91809e03948728f9a3f640ec69c648c0"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_neq_0_compat; assumption.",
                        "VernacExtend",
                        "a539604805abaeda5e27c6d280fe7b2b24f15b11"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rabs_4",
            "line_nb": 200,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs (a + b) + Rabs (c + d)).",
                        "VernacExtend",
                        "c2e8df53fa0c50fee15992cf4063e42aa920d767"
                    ]
                },
                {
                    "command": [
                        "replace (a + b + c + d) with (a + b + (c + d)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "4e12cb330ad0c9f4628fa15b9dba15ad829fd0f0"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs a + Rabs b + Rabs (c + d)).",
                        "VernacExtend",
                        "fb614218f9839feac5c4a22d0392e72b3462ae3e"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_r.",
                        "VernacExtend",
                        "5ca7acb5e67c7d7a5b6143fd11bc1e75c3e361e4"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rplus_assoc; repeat apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "533cce876e6ab9be878dca2dddd1391ff9e94437"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rlt_4",
            "line_nb": 210,
            "steps": [
                {
                    "command": [
                        "intros; apply Rlt_trans with (b + c + e + g).",
                        "VernacExtend",
                        "e35acc8287579fb7cb789b8e278da55f52d0e106"
                    ]
                },
                {
                    "command": [
                        "repeat apply Rplus_lt_compat_r; assumption.",
                        "VernacExtend",
                        "72e6186c8a5c50a493a3a806e138f90e3dc78814"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rplus_assoc; apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "b99119b2cbb1f495a2d929b9cb93ee5dd1fe3b80"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (d + e + g).",
                        "VernacExtend",
                        "72eb92e433815511c41f97e2748a136bf5df8664"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc; apply Rplus_lt_compat_r; assumption.",
                        "VernacExtend",
                        "8da7e7625989562cbe7278f416f73f755732a5cf"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc; apply Rplus_lt_compat_l; apply Rlt_trans with (f + g).",
                        "VernacExtend",
                        "2211edd38a6da711647c4d615562074b1af3cf9d"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_r; assumption.",
                        "VernacExtend",
                        "b6b08b5181f1b0b9ee205993955ce6aebb0b4a20"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l; assumption.",
                        "VernacExtend",
                        "44ce99cd422bdcc117c49c3d0f1b9cfdbe5e3579"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quadruple",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "intro; ring.",
                        "VernacExtend",
                        "a63cb55c0d6dc7f5f40d630fd18daddefae14d26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "quadruple_var",
            "line_nb": 224,
            "steps": [
                {
                    "command": [
                        "intro; rewrite <- quadruple.",
                        "VernacExtend",
                        "d45ccf63072323f8fd70471dbf66a91e1c42de8d"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite <- Rmult_assoc; rewrite Rinv_r_simpl_m; discrR.",
                        "VernacExtend",
                        "6157112e81a972d929b10b1b3574e6cfaa649584"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuous_neq_0",
            "line_nb": 229,
            "steps": [
                {
                    "command": [
                        "intros; unfold continuity_pt in H; unfold continue_in in H; unfold limit1_in in H; unfold limit_in in H; elim (H (Rabs (f x0 / 2))).",
                        "VernacExtend",
                        "dd28fc2e1ecb4c34978853dacc556e0818f07701"
                    ]
                },
                {
                    "command": [
                        "intros; elim H1; intros.",
                        "VernacExtend",
                        "2f377cb4b82600aab4e81ad22310ada1d2fe8450"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal x H2).",
                        "VernacExtend",
                        "560a13c12a672ed7b64fc0bc6c75da85b39fbf69"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H5 := H3 (x0 + h)).",
                        "VernacExtend",
                        "e1d0c614820301aa1ac25ac6fc6b5ac059c5246c"
                    ]
                },
                {
                    "command": [
                        "cut (dist R_met (x0 + h) x0 < x -> dist R_met (f (x0 + h)) (f x0) < Rabs (f x0 / 2)).",
                        "VernacExtend",
                        "5fe2939135dc397bc9415781a6d52b3fab563abf"
                    ]
                },
                {
                    "command": [
                        "unfold dist; simpl; unfold R_dist; replace (x0 + h - x0) with h.",
                        "VernacExtend",
                        "718bb034339fa92e88700c291596a2774d17f035"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H7 := H6 H4).",
                        "VernacExtend",
                        "b9ef6ad2c1530cf101cc42aa60624e188fd3eb2c"
                    ]
                },
                {
                    "command": [
                        "red; intro.",
                        "VernacExtend",
                        "12e00b6ab6f8834b6f81959ca42843abaa311f37"
                    ]
                },
                {
                    "command": [
                        "rewrite H8 in H7; unfold Rminus in H7; rewrite Rplus_0_l in H7; rewrite Rabs_Ropp in H7; unfold Rdiv in H7; rewrite Rabs_mult in H7; pattern (Rabs (f x0)) at 1 in H7; rewrite <- Rmult_1_r in H7.",
                        "VernacExtend",
                        "bb21e22fb893e9588802600c98704ea14cac712d"
                    ]
                },
                {
                    "command": [
                        "cut (0 < Rabs (f x0)).",
                        "VernacExtend",
                        "695de6f3e343068ea856c065e7fc286953c01cd8"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H10 := Rmult_lt_reg_l _ _ _ H9 H7).",
                        "VernacExtend",
                        "a5902c286b45337455a35c89f0dc2878f9a851f3"
                    ]
                },
                {
                    "command": [
                        "cut (Rabs (/ 2) = / 2).",
                        "VernacExtend",
                        "e908cb22a4490aa83b79b0b04f44685ec295653e"
                    ]
                },
                {
                    "command": [
                        "assert (Hyp : 0 < 2).",
                        "VernacExtend",
                        "9d7393875192f4b20ead598d4acf4946ceab5eff"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H11 in H10; assert (H12 := Rmult_lt_compat_l 2 _ _ Hyp H10); rewrite Rmult_1_r in H12; rewrite <- Rinv_r_sym in H12; [ idtac | discrR ].",
                        "VernacExtend",
                        "47e097311cad614ca24e824527299df42c6291f9"
                    ]
                },
                {
                    "command": [
                        "now apply lt_IZR in H12.",
                        "VernacExtend",
                        "5212caabd6a8515a88c041f852ff48045d91efd1"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs; case (Rcase_abs (/ 2)) as [Hlt|Hge].",
                        "VernacExtend",
                        "b0bf43810c8af73d06b7539d22d293dc09c080dc"
                    ]
                },
                {
                    "command": [
                        "assert (Hyp : 0 < 2).",
                        "VernacExtend",
                        "9d7393875192f4b20ead598d4acf4946ceab5eff"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "assert (H11 := Rmult_lt_compat_l 2 _ _ Hyp Hlt); rewrite Rmult_0_r in H11; rewrite <- Rinv_r_sym in H11; [ idtac | discrR ].",
                        "VernacExtend",
                        "758c29822c273b8fdff46d08990d40ae29210dce"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl 0 (Rlt_trans _ _ _ Rlt_0_1 H11)).",
                        "VernacExtend",
                        "41d6fc1f3a25b92ec1bbe76f69047ee7288d663b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply (Rabs_pos_lt _ H0).",
                        "VernacExtend",
                        "4b19843f402572976680b0be5989f3620fd3910e"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "assert (H6 := Req_dec x0 (x0 + h)); elim H6; intro.",
                        "VernacExtend",
                        "6b3fc139edd3a44638d5478c6e7355b2ae8bdfcb"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite <- H7.",
                        "VernacExtend",
                        "43570b0de75c8a32365a783a9cec1046887a86b4"
                    ]
                },
                {
                    "command": [
                        "unfold R_met, dist; unfold R_dist; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply Rabs_pos_lt.",
                        "VernacExtend",
                        "14d81fa3cd10ab9b811b81d93b64550aaa4895de"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply prod_neq_R0; [ assumption | apply Rinv_neq_0_compat; discrR ].",
                        "VernacExtend",
                        "5c354a94a910d07e2521a36cead8ef086225045b"
                    ]
                },
                {
                    "command": [
                        "intro; apply H5.",
                        "VernacExtend",
                        "d357d1775a1deead2daaa6980cb732f6dbd28066"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold D_x, no_cond.",
                        "VernacExtend",
                        "abf922a23fd977fc0650bb6c40e8f5a3a9fb7f07"
                    ]
                },
                {
                    "command": [
                        "split; trivial || assumption.",
                        "VernacExtend",
                        "8e0a03f9295f5fc39ee8c419cd47b96f395fe62f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "change (0 < Rabs (f x0 / 2)).",
                        "VernacExtend",
                        "09ac2e33249fc0df366685ed21a6e8fcbeda914f"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; unfold Rdiv; apply prod_neq_R0.",
                        "VernacExtend",
                        "de776502ec5b0781f10e3919fa3cb1fdb5a8599c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_neq_0_compat; discrR.",
                        "VernacExtend",
                        "c996ce35ba9924ff499f316d0fb3eaf573a9e988"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}