{
    "filename": "theories/Reals/Rsigma.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Rseries.",
            "VernacRequire",
            "7a432dd14e4529f426efb08dc0832c62a8dcc16b"
        ],
        [
            "Require Import PartSum.",
            "VernacRequire",
            "615de8ef0ed75bdb68bd5486514f11be1837ffd8"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Section Sigma.",
            "VernacBeginSection",
            "6f3889d07df5d48e2eda6ee4be3baec1ef84d670"
        ],
        [
            "Variable f : nat -> R.",
            "VernacAssumption",
            "d309c507474fce1c1024f78adddde295a5e9e6cb"
        ],
        [
            "Definition sigma (low high:nat) : R := sum_f_R0 (fun k:nat => f (low + k)) (high - low).",
            "VernacDefinition",
            "f47d428138fbdf43c6ed70c377c68b52987bd826"
        ],
        [
            "Theorem sigma_split : forall low high k:nat, (low <= k)%nat -> (k < high)%nat -> sigma low high = sigma low k + sigma (S k) high.",
            "VernacStartTheoremProof",
            "4f930dce9cf9e08c95eb7f55f92c00ca54a9edce"
        ],
        [
            "intros; induction k as [| k Hreck].",
            "VernacExtend",
            "270ac7ba854771117c5e8a8939f0918d49ccdd1f"
        ],
        [
            "cut (low = 0%nat).",
            "VernacExtend",
            "1f05f2c7c9712b8adcefbeac17bb0d8c68da137b"
        ],
        [
            "intro; rewrite H1; unfold sigma; rewrite <- minus_n_n; rewrite <- minus_n_O; simpl; replace (high - 1)%nat with (pred high).",
            "VernacExtend",
            "4a23c563e6cb20a4775a47c4dc2a751d3e455366"
        ],
        [
            "apply (decomp_sum (fun k:nat => f k)).",
            "VernacExtend",
            "a680b7edb001e3f10c5daf04980f8a12405c54f6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply pred_of_minus.",
            "VernacExtend",
            "384a710d0ee6f80814824792b87eabf513cd8cff"
        ],
        [
            "inversion H; reflexivity.",
            "VernacExtend",
            "1a066651c0edc0ab32b502692fe802b6440646b1"
        ],
        [
            "cut ((low <= k)%nat \\/ low = S k).",
            "VernacExtend",
            "dcafb8ff95eeda6eb186b4559a6f2fa385e5abe5"
        ],
        [
            "intro; elim H1; intro.",
            "VernacExtend",
            "1301c759b4c493230f305c8c6fd6d684c10b8bbc"
        ],
        [
            "replace (sigma low (S k)) with (sigma low k + f (S k)).",
            "VernacExtend",
            "69cb08d3890303657da09b8b363ced817abccc83"
        ],
        [
            "rewrite Rplus_assoc; replace (f (S k) + sigma (S (S k)) high) with (sigma (S k) high).",
            "VernacExtend",
            "45b572fb3e3a07f06b36512c17781a4740633616"
        ],
        [
            "apply Hreck.",
            "VernacExtend",
            "7512ea123ecf80433abc004f05821bbbf1b36446"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply lt_trans with (S k); [ apply lt_n_Sn | assumption ].",
            "VernacExtend",
            "ad0c74c8475e6ac7469d141045a14c0222fa4a90"
        ],
        [
            "unfold sigma; replace (high - S (S k))%nat with (pred (high - S k)).",
            "VernacExtend",
            "afc1929347078cb6e850f21a81d7a17307718f13"
        ],
        [
            "pattern (S k) at 3; replace (S k) with (S k + 0)%nat; [ idtac | ring ].",
            "VernacExtend",
            "1480d2214a3b906053188aeb4d80e14e711ab4d4"
        ],
        [
            "replace (sum_f_R0 (fun k0:nat => f (S (S k) + k0)) (pred (high - S k))) with (sum_f_R0 (fun k0:nat => f (S k + S k0)) (pred (high - S k))).",
            "VernacExtend",
            "4db05512bb7189c1ac77f174113d5163b4813145"
        ],
        [
            "apply (decomp_sum (fun i:nat => f (S k + i))).",
            "VernacExtend",
            "838cff523b454d19b690a9bda97df01eaa151b14"
        ],
        [
            "apply lt_minus_O_lt; assumption.",
            "VernacExtend",
            "9ff6ad634f32bd92b17f134ff2056a4d788be3e4"
        ],
        [
            "apply sum_eq; intros; replace (S k + S i)%nat with (S (S k) + i)%nat.",
            "VernacExtend",
            "7aa7f547fda1c1123504b11886a9ec905cf9b396"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "replace (high - S (S k))%nat with (high - S k - 1)%nat.",
            "VernacExtend",
            "df837f0e3e2f30826d3072d653ac0937d329ec88"
        ],
        [
            "apply pred_of_minus.",
            "VernacExtend",
            "384a710d0ee6f80814824792b87eabf513cd8cff"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "unfold sigma; replace (S k - low)%nat with (S (k - low)).",
            "VernacExtend",
            "359e0f5be912d1dd6934be7bedc5b7c21c486a91"
        ],
        [
            "pattern (S k) at 1; replace (S k) with (low + S (k - low))%nat.",
            "VernacExtend",
            "a203761e2be6431b4727d04454fb98e71a524537"
        ],
        [
            "symmetry ; apply (tech5 (fun i:nat => f (low + i))).",
            "VernacExtend",
            "0216f77d53062365a6db2817b0ea40402d49e294"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "rewrite <- H2; unfold sigma; rewrite <- minus_n_n; simpl; replace (high - S low)%nat with (pred (high - low)).",
            "VernacExtend",
            "20e45fac9feee687e6d35cf5449f97c0b6de0553"
        ],
        [
            "replace (sum_f_R0 (fun k0:nat => f (S (low + k0))) (pred (high - low))) with (sum_f_R0 (fun k0:nat => f (low + S k0)) (pred (high - low))).",
            "VernacExtend",
            "4711e98e22b702cc1761aa6c2c96f08fedbfd1c2"
        ],
        [
            "apply (decomp_sum (fun k0:nat => f (low + k0))).",
            "VernacExtend",
            "9b187eaa78c42ad812bc6827f4c258b5f4ef2689"
        ],
        [
            "apply lt_minus_O_lt.",
            "VernacExtend",
            "f64329ff0d34360bb6a3f379e924caa9d5f135a2"
        ],
        [
            "apply le_lt_trans with (S k); [ rewrite H2; apply le_n | assumption ].",
            "VernacExtend",
            "13d46e0d06d19123020b687aef899fc1195aacc1"
        ],
        [
            "apply sum_eq; intros; replace (S (low + i)) with (low + S i)%nat.",
            "VernacExtend",
            "230076431afab4d7ddeb24e1cbaa5e9f70772e59"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "inversion H; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "d22a863e214c9b4ec43425b09f4d2f2460e98603"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem sigma_diff : forall low high k:nat, (low <= k)%nat -> (k < high)%nat -> sigma low high - sigma low k = sigma (S k) high.",
            "VernacStartTheoremProof",
            "ced38c2dd9952ec18116cd3249b02720de90ef84"
        ],
        [
            "intros low high k H1 H2; symmetry ; rewrite (sigma_split H1 H2); ring.",
            "VernacExtend",
            "47abbb4d5e8e031ae06f9ce6a277e23c627d3c9a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem sigma_diff_neg : forall low high k:nat, (low <= k)%nat -> (k < high)%nat -> sigma low k - sigma low high = - sigma (S k) high.",
            "VernacStartTheoremProof",
            "dddce24e84153d7eebc274a3aba2f32915e75884"
        ],
        [
            "intros low high k H1 H2; rewrite (sigma_split H1 H2); ring.",
            "VernacExtend",
            "d118f9832291c98581854282dfd1846b8efcadfb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem sigma_first : forall low high:nat, (low < high)%nat -> sigma low high = f low + sigma (S low) high.",
            "VernacStartTheoremProof",
            "1133811d422644040263336aaea5321968f4020d"
        ],
        [
            "intros low high H1; generalize (lt_le_S low high H1); intro H2; generalize (lt_le_weak low high H1); intro H3; replace (f low) with (sigma low low).",
            "VernacExtend",
            "2be2b689f6b74ec2f9f981a36be6b0b5e3401501"
        ],
        [
            "apply sigma_split.",
            "VernacExtend",
            "6090050e4329c14e842ce69fba84c1148b5421c4"
        ],
        [
            "apply le_n.",
            "VernacExtend",
            "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold sigma; rewrite <- minus_n_n.",
            "VernacExtend",
            "69b0db222e353bb4afc0dcf9fe85cf941ab18016"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "replace (low + 0)%nat with low; [ reflexivity | ring ].",
            "VernacExtend",
            "fc611908222cf99126ae1ce4dde5bbd7855a9fde"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem sigma_last : forall low high:nat, (low < high)%nat -> sigma low high = f high + sigma low (pred high).",
            "VernacStartTheoremProof",
            "8ab85865d1cda7d80925ee42574f7e6ab5a50858"
        ],
        [
            "intros low high H1; generalize (lt_le_S low high H1); intro H2; generalize (lt_le_weak low high H1); intro H3; replace (f high) with (sigma high high).",
            "VernacExtend",
            "e0434fa4fcbbac8a28e14c3f98ba0eb0d55c3c25"
        ],
        [
            "rewrite Rplus_comm; cut (high = S (pred high)).",
            "VernacExtend",
            "236528216fa2dde87f1963dfed0eff459b35fa4a"
        ],
        [
            "intro; pattern high at 3; rewrite H.",
            "VernacExtend",
            "145d9c9abaf52e40ff574b708f1b65a899107444"
        ],
        [
            "apply sigma_split.",
            "VernacExtend",
            "6090050e4329c14e842ce69fba84c1148b5421c4"
        ],
        [
            "apply le_S_n; rewrite <- H; apply lt_le_S; assumption.",
            "VernacExtend",
            "f1e218293481f437e1a6b3203d4ac097279c74dc"
        ],
        [
            "apply lt_pred_n_n; apply le_lt_trans with low; [ apply le_O_n | assumption ].",
            "VernacExtend",
            "4f078cb892ae1f66568e7977f90361648f60372c"
        ],
        [
            "apply S_pred with 0%nat; apply le_lt_trans with low; [ apply le_O_n | assumption ].",
            "VernacExtend",
            "c00b9a87ea2f6019145adc116b0e203a0589e849"
        ],
        [
            "unfold sigma; rewrite <- minus_n_n; simpl; replace (high + 0)%nat with high; [ reflexivity | ring ].",
            "VernacExtend",
            "78371f81351568280ce4cf9b510598c19be55c24"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem sigma_eq_arg : forall low:nat, sigma low low = f low.",
            "VernacStartTheoremProof",
            "83187affd3fc9ec7f6a3e795af16473a53796f73"
        ],
        [
            "intro; unfold sigma; rewrite <- minus_n_n.",
            "VernacExtend",
            "8ae3988515c70605ca4c1dcff348f7809e4da39a"
        ],
        [
            "simpl; replace (low + 0)%nat with low; [ reflexivity | ring ].",
            "VernacExtend",
            "649590553a8e7d57d556706f6a21d65826775342"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Sigma.",
            "VernacEndSegment",
            "9e29a89cd3bb69939c9e9ffc2964486d52a6345b"
        ]
    ],
    "proofs": [
        {
            "name": "sigma_split",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros; induction k as [| k Hreck].",
                        "VernacExtend",
                        "270ac7ba854771117c5e8a8939f0918d49ccdd1f"
                    ]
                },
                {
                    "command": [
                        "cut (low = 0%nat).",
                        "VernacExtend",
                        "1f05f2c7c9712b8adcefbeac17bb0d8c68da137b"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H1; unfold sigma; rewrite <- minus_n_n; rewrite <- minus_n_O; simpl; replace (high - 1)%nat with (pred high).",
                        "VernacExtend",
                        "4a23c563e6cb20a4775a47c4dc2a751d3e455366"
                    ]
                },
                {
                    "command": [
                        "apply (decomp_sum (fun k:nat => f k)).",
                        "VernacExtend",
                        "a680b7edb001e3f10c5daf04980f8a12405c54f6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply pred_of_minus.",
                        "VernacExtend",
                        "384a710d0ee6f80814824792b87eabf513cd8cff"
                    ]
                },
                {
                    "command": [
                        "inversion H; reflexivity.",
                        "VernacExtend",
                        "1a066651c0edc0ab32b502692fe802b6440646b1"
                    ]
                },
                {
                    "command": [
                        "cut ((low <= k)%nat \\/ low = S k).",
                        "VernacExtend",
                        "dcafb8ff95eeda6eb186b4559a6f2fa385e5abe5"
                    ]
                },
                {
                    "command": [
                        "intro; elim H1; intro.",
                        "VernacExtend",
                        "1301c759b4c493230f305c8c6fd6d684c10b8bbc"
                    ]
                },
                {
                    "command": [
                        "replace (sigma low (S k)) with (sigma low k + f (S k)).",
                        "VernacExtend",
                        "69cb08d3890303657da09b8b363ced817abccc83"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_assoc; replace (f (S k) + sigma (S (S k)) high) with (sigma (S k) high).",
                        "VernacExtend",
                        "45b572fb3e3a07f06b36512c17781a4740633616"
                    ]
                },
                {
                    "command": [
                        "apply Hreck.",
                        "VernacExtend",
                        "7512ea123ecf80433abc004f05821bbbf1b36446"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply lt_trans with (S k); [ apply lt_n_Sn | assumption ].",
                        "VernacExtend",
                        "ad0c74c8475e6ac7469d141045a14c0222fa4a90"
                    ]
                },
                {
                    "command": [
                        "unfold sigma; replace (high - S (S k))%nat with (pred (high - S k)).",
                        "VernacExtend",
                        "afc1929347078cb6e850f21a81d7a17307718f13"
                    ]
                },
                {
                    "command": [
                        "pattern (S k) at 3; replace (S k) with (S k + 0)%nat; [ idtac | ring ].",
                        "VernacExtend",
                        "1480d2214a3b906053188aeb4d80e14e711ab4d4"
                    ]
                },
                {
                    "command": [
                        "replace (sum_f_R0 (fun k0:nat => f (S (S k) + k0)) (pred (high - S k))) with (sum_f_R0 (fun k0:nat => f (S k + S k0)) (pred (high - S k))).",
                        "VernacExtend",
                        "4db05512bb7189c1ac77f174113d5163b4813145"
                    ]
                },
                {
                    "command": [
                        "apply (decomp_sum (fun i:nat => f (S k + i))).",
                        "VernacExtend",
                        "838cff523b454d19b690a9bda97df01eaa151b14"
                    ]
                },
                {
                    "command": [
                        "apply lt_minus_O_lt; assumption.",
                        "VernacExtend",
                        "9ff6ad634f32bd92b17f134ff2056a4d788be3e4"
                    ]
                },
                {
                    "command": [
                        "apply sum_eq; intros; replace (S k + S i)%nat with (S (S k) + i)%nat.",
                        "VernacExtend",
                        "7aa7f547fda1c1123504b11886a9ec905cf9b396"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "replace (high - S (S k))%nat with (high - S k - 1)%nat.",
                        "VernacExtend",
                        "df837f0e3e2f30826d3072d653ac0937d329ec88"
                    ]
                },
                {
                    "command": [
                        "apply pred_of_minus.",
                        "VernacExtend",
                        "384a710d0ee6f80814824792b87eabf513cd8cff"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "unfold sigma; replace (S k - low)%nat with (S (k - low)).",
                        "VernacExtend",
                        "359e0f5be912d1dd6934be7bedc5b7c21c486a91"
                    ]
                },
                {
                    "command": [
                        "pattern (S k) at 1; replace (S k) with (low + S (k - low))%nat.",
                        "VernacExtend",
                        "a203761e2be6431b4727d04454fb98e71a524537"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply (tech5 (fun i:nat => f (low + i))).",
                        "VernacExtend",
                        "0216f77d53062365a6db2817b0ea40402d49e294"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2; unfold sigma; rewrite <- minus_n_n; simpl; replace (high - S low)%nat with (pred (high - low)).",
                        "VernacExtend",
                        "20e45fac9feee687e6d35cf5449f97c0b6de0553"
                    ]
                },
                {
                    "command": [
                        "replace (sum_f_R0 (fun k0:nat => f (S (low + k0))) (pred (high - low))) with (sum_f_R0 (fun k0:nat => f (low + S k0)) (pred (high - low))).",
                        "VernacExtend",
                        "4711e98e22b702cc1761aa6c2c96f08fedbfd1c2"
                    ]
                },
                {
                    "command": [
                        "apply (decomp_sum (fun k0:nat => f (low + k0))).",
                        "VernacExtend",
                        "9b187eaa78c42ad812bc6827f4c258b5f4ef2689"
                    ]
                },
                {
                    "command": [
                        "apply lt_minus_O_lt.",
                        "VernacExtend",
                        "f64329ff0d34360bb6a3f379e924caa9d5f135a2"
                    ]
                },
                {
                    "command": [
                        "apply le_lt_trans with (S k); [ rewrite H2; apply le_n | assumption ].",
                        "VernacExtend",
                        "13d46e0d06d19123020b687aef899fc1195aacc1"
                    ]
                },
                {
                    "command": [
                        "apply sum_eq; intros; replace (S (low + i)) with (low + S i)%nat.",
                        "VernacExtend",
                        "230076431afab4d7ddeb24e1cbaa5e9f70772e59"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "inversion H; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "d22a863e214c9b4ec43425b09f4d2f2460e98603"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sigma_diff",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "intros low high k H1 H2; symmetry ; rewrite (sigma_split H1 H2); ring.",
                        "VernacExtend",
                        "47abbb4d5e8e031ae06f9ce6a277e23c627d3c9a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sigma_diff_neg",
            "line_nb": 55,
            "steps": [
                {
                    "command": [
                        "intros low high k H1 H2; rewrite (sigma_split H1 H2); ring.",
                        "VernacExtend",
                        "d118f9832291c98581854282dfd1846b8efcadfb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sigma_first",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "intros low high H1; generalize (lt_le_S low high H1); intro H2; generalize (lt_le_weak low high H1); intro H3; replace (f low) with (sigma low low).",
                        "VernacExtend",
                        "2be2b689f6b74ec2f9f981a36be6b0b5e3401501"
                    ]
                },
                {
                    "command": [
                        "apply sigma_split.",
                        "VernacExtend",
                        "6090050e4329c14e842ce69fba84c1148b5421c4"
                    ]
                },
                {
                    "command": [
                        "apply le_n.",
                        "VernacExtend",
                        "cd4ea009ba050d55c0c5552f05ee5752a2fad9f9"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold sigma; rewrite <- minus_n_n.",
                        "VernacExtend",
                        "69b0db222e353bb4afc0dcf9fe85cf941ab18016"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "replace (low + 0)%nat with low; [ reflexivity | ring ].",
                        "VernacExtend",
                        "fc611908222cf99126ae1ce4dde5bbd7855a9fde"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sigma_last",
            "line_nb": 67,
            "steps": [
                {
                    "command": [
                        "intros low high H1; generalize (lt_le_S low high H1); intro H2; generalize (lt_le_weak low high H1); intro H3; replace (f high) with (sigma high high).",
                        "VernacExtend",
                        "e0434fa4fcbbac8a28e14c3f98ba0eb0d55c3c25"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_comm; cut (high = S (pred high)).",
                        "VernacExtend",
                        "236528216fa2dde87f1963dfed0eff459b35fa4a"
                    ]
                },
                {
                    "command": [
                        "intro; pattern high at 3; rewrite H.",
                        "VernacExtend",
                        "145d9c9abaf52e40ff574b708f1b65a899107444"
                    ]
                },
                {
                    "command": [
                        "apply sigma_split.",
                        "VernacExtend",
                        "6090050e4329c14e842ce69fba84c1148b5421c4"
                    ]
                },
                {
                    "command": [
                        "apply le_S_n; rewrite <- H; apply lt_le_S; assumption.",
                        "VernacExtend",
                        "f1e218293481f437e1a6b3203d4ac097279c74dc"
                    ]
                },
                {
                    "command": [
                        "apply lt_pred_n_n; apply le_lt_trans with low; [ apply le_O_n | assumption ].",
                        "VernacExtend",
                        "4f078cb892ae1f66568e7977f90361648f60372c"
                    ]
                },
                {
                    "command": [
                        "apply S_pred with 0%nat; apply le_lt_trans with low; [ apply le_O_n | assumption ].",
                        "VernacExtend",
                        "c00b9a87ea2f6019145adc116b0e203a0589e849"
                    ]
                },
                {
                    "command": [
                        "unfold sigma; rewrite <- minus_n_n; simpl; replace (high + 0)%nat with high; [ reflexivity | ring ].",
                        "VernacExtend",
                        "78371f81351568280ce4cf9b510598c19be55c24"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "sigma_eq_arg",
            "line_nb": 77,
            "steps": [
                {
                    "command": [
                        "intro; unfold sigma; rewrite <- minus_n_n.",
                        "VernacExtend",
                        "8ae3988515c70605ca4c1dcff348f7809e4da39a"
                    ]
                },
                {
                    "command": [
                        "simpl; replace (low + 0)%nat with low; [ reflexivity | ring ].",
                        "VernacExtend",
                        "649590553a8e7d57d556706f6a21d65826775342"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}