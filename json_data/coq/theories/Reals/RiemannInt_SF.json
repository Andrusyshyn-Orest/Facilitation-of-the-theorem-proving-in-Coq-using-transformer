{
    "filename": "theories/Reals/RiemannInt_SF.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Ranalysis_reg.",
            "VernacRequire",
            "4618d6bc6e973fd059d7ae3ba7a9096fc3aa83f2"
        ],
        [
            "Require Import Classical_Prop.",
            "VernacRequire",
            "4ea5121b46cb94a964b9761d1c61cca4c510f8d4"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Definition Nbound (I:nat -> Prop) : Prop := exists n : nat, (forall i:nat, I i -> (i <= n)%nat).",
            "VernacDefinition",
            "f2d5412f8648a13dff1e4944467c744a294d8002"
        ],
        [
            "Lemma IZN_var : forall z:Z, (0 <= z)%Z -> {n : nat | z = Z.of_nat n}.",
            "VernacStartTheoremProof",
            "1164d04acbcfe3de635352adfcf9b3473d5f024d"
        ],
        [
            "intros; apply Z_of_nat_complete_inf; assumption.",
            "VernacExtend",
            "6679fc8c9a1d226d6da8be94e5d2e1fde34f8d25"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Nzorn : forall I:nat -> Prop, (exists n : nat, I n) -> Nbound I -> { n:nat | I n /\\ (forall i:nat, I i -> (i <= n)%nat) }.",
            "VernacStartTheoremProof",
            "c105b98d232cfa421aa715d4da0571026f398516"
        ],
        [
            "intros I H H0; set (E := fun x:R => exists i : nat, I i /\\ INR i = x); assert (H1 : bound E).",
            "VernacExtend",
            "bc4f4e0b9b5ef45197155a801c851bede9a2cc6f"
        ],
        [
            "unfold Nbound in H0; elim H0; intros N H1; unfold bound; exists (INR N); unfold is_upper_bound; intros; unfold E in H2; elim H2; intros; elim H3; intros; rewrite <- H5; apply le_INR; apply H1; assumption.",
            "VernacExtend",
            "44b78f0d9fddf550208993b6652acebf2a956f66"
        ],
        [
            "assert (H2 : exists x : R, E x).",
            "VernacExtend",
            "99120bee9cba46b508ca6b8e87df6d203c973e5c"
        ],
        [
            "elim H; intros; exists (INR x); unfold E; exists x; split; [ assumption | reflexivity ].",
            "VernacExtend",
            "83ff0c2b4cec0a72d2427a0c22535a373210d5f5"
        ],
        [
            "destruct (completeness E H1 H2) as (x,(H4,H5)); unfold is_upper_bound in H4, H5; assert (H6 : 0 <= x).",
            "VernacExtend",
            "6858a5bde6319c410cea965ec05cfdebcad434a7"
        ],
        [
            "destruct H2 as (x0,H6).",
            "VernacExtend",
            "78056c59a328d2a1501455700fa8d4083051ecab"
        ],
        [
            "remember H6 as H7.",
            "VernacExtend",
            "1266eab334892d2e8f8fe55a33867e6c720aeeba"
        ],
        [
            "destruct H7 as (x1,(H8,H9)).",
            "VernacExtend",
            "58c36141269f8521a04d3c1ace48c3fdc6039742"
        ],
        [
            "apply Rle_trans with x0; [ rewrite <- H9; change (INR 0 <= INR x1); apply le_INR; apply le_O_n | apply H4; assumption ].",
            "VernacExtend",
            "915bd80303d7032878ef8ac3c571f50bfc95ba80"
        ],
        [
            "assert (H7 := archimed x); elim H7; clear H7; intros; assert (H9 : x <= IZR (up x) - 1).",
            "VernacExtend",
            "b8aead81e7fedc846476a0024362a03ee884561c"
        ],
        [
            "apply H5; intros x0 H9.",
            "VernacExtend",
            "b7932ee7c2e4c4a58d99a202e8575bd0be547fc5"
        ],
        [
            "assert (H10 := H4 _ H9); unfold E in H9; elim H9; intros x1 (H12,<-).",
            "VernacExtend",
            "7fd1fe4104d65ce52678643cee40b0046bdcc74f"
        ],
        [
            "apply Rplus_le_reg_l with 1; replace (1 + (IZR (up x) - 1)) with (IZR (up x)); [ idtac | ring ]; replace (1 + INR x1) with (INR (S x1)); [ idtac | rewrite S_INR; ring ].",
            "VernacExtend",
            "c39a3eb8555a6592a28ce5c2b30ca57b53891298"
        ],
        [
            "assert (H14 : (0 <= up x)%Z).",
            "VernacExtend",
            "e08d79530c4137203cab6c9986ac0695fa470acb"
        ],
        [
            "apply le_IZR; apply Rle_trans with x; [ apply H6 | left; assumption ].",
            "VernacExtend",
            "50177884c7a9dc5dc8f3400105b5342c48a56d0d"
        ],
        [
            "destruct (IZN _ H14) as (x2,H15).",
            "VernacExtend",
            "36b859733df566c9fb115da7e513708b6b7a2671"
        ],
        [
            "rewrite H15, <- INR_IZR_INZ; apply le_INR; apply lt_le_S.",
            "VernacExtend",
            "d37399e72bacff21413e9bfcc64be8f5f5dc4270"
        ],
        [
            "apply INR_lt; apply Rle_lt_trans with x; [ assumption | rewrite INR_IZR_INZ; rewrite <- H15; assumption ].",
            "VernacExtend",
            "a4d2b226a627331e7084caf6d2fed51a456572fb"
        ],
        [
            "assert (H10 : x = IZR (up x) - 1).",
            "VernacExtend",
            "14c4082373aadc8ed62a015f5d5eddeb6be0c39a"
        ],
        [
            "apply Rle_antisym; [ assumption | apply Rplus_le_reg_l with (- x + 1); replace (- x + 1 + (IZR (up x) - 1)) with (IZR (up x) - x); [ idtac | ring ]; replace (- x + 1 + x) with 1; [ assumption | ring ] ].",
            "VernacExtend",
            "04f4212666b3054f4b9a227fddc5932db2d728d9"
        ],
        [
            "assert (H11 : (0 <= up x)%Z).",
            "VernacExtend",
            "11003217761451e57c58642dcb59f2ae4e9286cd"
        ],
        [
            "apply le_IZR; apply Rle_trans with x; [ apply H6 | left; assumption ].",
            "VernacExtend",
            "50177884c7a9dc5dc8f3400105b5342c48a56d0d"
        ],
        [
            "assert (H12 := IZN_var H11); elim H12; clear H12; intros x0 H8; assert (H13 : E x).",
            "VernacExtend",
            "144254f6ce9b406ec8c1defd8f325fe1defe5987"
        ],
        [
            "elim (classic (E x)); intro; try assumption.",
            "VernacExtend",
            "4a0110ce7fae64a7d695209886d5c754eadf6a0e"
        ],
        [
            "cut (forall y:R, E y -> y <= x - 1).",
            "VernacExtend",
            "6e11477a36f1d7de810fbfc398e298c17d36ebc9"
        ],
        [
            "intro H13; assert (H14 := H5 _ H13); cut (x - 1 < x).",
            "VernacExtend",
            "19887e69bc1bff42ff687b4ebdf5fccc1d1cb3a6"
        ],
        [
            "intro H15; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H14 H15)).",
            "VernacExtend",
            "545ab85f25dfca1d8af228032a3590909819018c"
        ],
        [
            "apply Rminus_lt; replace (x - 1 - x) with (-1); [ idtac | ring ]; rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; apply Rlt_0_1.",
            "VernacExtend",
            "ced0d3731f5a314336456f958ee80e8aa9acd154"
        ],
        [
            "intros y H13; assert (H14 := H4 _ H13); elim H14; intro H15; unfold E in H13; elim H13; intros x1 H16; elim H16; intros H17 H18; apply Rplus_le_reg_l with 1.",
            "VernacExtend",
            "2946d539b1cb635c98a9ef328ef455e474e87d94"
        ],
        [
            "replace (1 + (x - 1)) with x; [ idtac | ring ]; rewrite <- H18; replace (1 + INR x1) with (INR (S x1)); [ idtac | rewrite S_INR; ring ].",
            "VernacExtend",
            "4810e309c01dbf74d7b03d02c62d447f73698e1e"
        ],
        [
            "cut (x = INR (pred x0)).",
            "VernacExtend",
            "72546c8d2f97b107c76390acc9bc6a9470619b71"
        ],
        [
            "intro H19; rewrite H19; apply le_INR; apply lt_le_S; apply INR_lt; rewrite H18; rewrite <- H19; assumption.",
            "VernacExtend",
            "aca2fb175a77e04fdb71a59a8741342c8bc71f9a"
        ],
        [
            "rewrite H10; rewrite H8; rewrite <- INR_IZR_INZ; rewrite <- (minus_INR _ 1).",
            "VernacExtend",
            "4d5ae00804f800e5e98ce523087a33a118ee66d9"
        ],
        [
            "apply f_equal; case x0; [ reflexivity | intro; apply sym_eq, minus_n_O ].",
            "VernacExtend",
            "2efc8f9209a9a45e929f1f4bef8cde99608e8870"
        ],
        [
            "induction x0 as [|x0 Hrecx0].",
            "VernacExtend",
            "83a82e166e3e047901699aa0b16df2b8f2c10687"
        ],
        [
            "rewrite H8 in H3.",
            "VernacExtend",
            "92121e6027d4f2d3073b05c17d7381d9c9743e71"
        ],
        [
            "rewrite <- INR_IZR_INZ in H3; simpl in H3.",
            "VernacExtend",
            "ec214a7d139c1e2bc13fc55a6ab6cf445cfbf795"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H6 H3)).",
            "VernacExtend",
            "d39580f8679abf88a6c5bd50d89d3e6b98b651b1"
        ],
        [
            "apply le_n_S; apply le_O_n.",
            "VernacExtend",
            "050503db28f4619447bc14e30d11ebbc6c4e00ae"
        ],
        [
            "rewrite H15 in H13; elim H12; assumption.",
            "VernacExtend",
            "4df7ce2254505351e3d6f83cb397dfe7107364fb"
        ],
        [
            "split with (pred x0); unfold E in H13; elim H13; intros; elim H12; intros; rewrite H10 in H15; rewrite H8 in H15; rewrite <- INR_IZR_INZ in H15; assert (H16 : INR x0 = INR x1 + 1).",
            "VernacExtend",
            "43b62f0010d8050a854bcc794d20072e6c7e188c"
        ],
        [
            "rewrite H15; ring.",
            "VernacExtend",
            "22a8584a18e3b361294c026792081e0f026e5816"
        ],
        [
            "rewrite <- S_INR in H16; assert (H17 := INR_eq _ _ H16); rewrite H17; simpl; split.",
            "VernacExtend",
            "752d24c9546c81586f2e7663823b27a092d3f927"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros; apply INR_le; rewrite H15; rewrite <- H15; elim H12; intros; rewrite H20; apply H4; unfold E; exists i; split; [ assumption | reflexivity ].",
            "VernacExtend",
            "f1fa2ee17a8db2246bb45c2f010f6cf72e6d8316"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition open_interval (a b x:R) : Prop := a < x < b.",
            "VernacDefinition",
            "b034c786b8b794fa7e060942f74a99fba95cf534"
        ],
        [
            "Definition co_interval (a b x:R) : Prop := a <= x < b.",
            "VernacDefinition",
            "fea1b08f5532ca014c39d6efdacde2b1c61fb89e"
        ],
        [
            "Definition adapted_couple (f:R -> R) (a b:R) (l lf:Rlist) : Prop := ordered_Rlist l /\\ pos_Rl l 0 = Rmin a b /\\ pos_Rl l (pred (Rlength l)) = Rmax a b /\\ Rlength l = S (Rlength lf) /\\ (forall i:nat, (i < pred (Rlength l))%nat -> constant_D_eq f (open_interval (pos_Rl l i) (pos_Rl l (S i))) (pos_Rl lf i)).",
            "VernacDefinition",
            "e2147dbf91c74416f3462a06bcba765cc927fd60"
        ],
        [
            "Definition adapted_couple_opt (f:R -> R) (a b:R) (l lf:Rlist) := adapted_couple f a b l lf /\\ (forall i:nat, (i < pred (Rlength lf))%nat -> pos_Rl lf i <> pos_Rl lf (S i) \\/ f (pos_Rl l (S i)) <> pos_Rl lf i) /\\ (forall i:nat, (i < pred (Rlength l))%nat -> pos_Rl l i <> pos_Rl l (S i)).",
            "VernacDefinition",
            "ed4ebad9b2fb2ccff059af1234c42fc797a2118e"
        ],
        [
            "Definition is_subdivision (f:R -> R) (a b:R) (l:Rlist) : Type := { l0:Rlist & adapted_couple f a b l l0 }.",
            "VernacDefinition",
            "6c4d434994ac943d25c5678ba1353eb3dc2e709d"
        ],
        [
            "Definition IsStepFun (f:R -> R) (a b:R) : Type := { l:Rlist & is_subdivision f a b l }.",
            "VernacDefinition",
            "fc828d9f4fd0bd0888b49cfb43e255e80dbca224"
        ],
        [
            "Record StepFun (a b:R) : Type := mkStepFun {fe :> R -> R; pre : IsStepFun fe a b}.",
            "VernacInductive",
            "b69e314e49b86c34a3337c2aafaea352f9c202df"
        ],
        [
            "Definition subdivision (a b:R) (f:StepFun a b) : Rlist := projT1 (pre f).",
            "VernacDefinition",
            "d0ed7482e8f068a748c7c602251200e5dba60ad2"
        ],
        [
            "Definition subdivision_val (a b:R) (f:StepFun a b) : Rlist := match projT2 (pre f) with | existT _ a b => a end.",
            "VernacDefinition",
            "aac31136510f3676a74f42e7da6c629bdb2555a9"
        ],
        [
            "Fixpoint Int_SF (l k:Rlist) : R := match l with | nil => 0 | cons a l' => match k with | nil => 0 | cons x nil => 0 | cons x (cons y k') => a * (y - x) + Int_SF l' (cons y k') end end.",
            "VernacFixpoint",
            "1aae3a0033afc28b88c0c58315fa6163e070ee4d"
        ],
        [
            "Definition RiemannInt_SF (a b:R) (f:StepFun a b) : R := match Rle_dec a b with | left _ => Int_SF (subdivision_val f) (subdivision f) | right _ => - Int_SF (subdivision_val f) (subdivision f) end.",
            "VernacDefinition",
            "06f62371b19e184c083880b5ec370ce2f2e7102c"
        ],
        [
            "Lemma StepFun_P1 : forall (a b:R) (f:StepFun a b), adapted_couple f a b (subdivision f) (subdivision_val f).",
            "VernacStartTheoremProof",
            "c672774757dcea959b6657c82996b836e4d4a15a"
        ],
        [
            "intros a b f; unfold subdivision_val; case (projT2 (pre f)) as (x,H); apply H.",
            "VernacExtend",
            "20f21837d836a119f96b01917ff15f0879cbdd8b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P2 : forall (a b:R) (f:R -> R) (l lf:Rlist), adapted_couple f a b l lf -> adapted_couple f b a l lf.",
            "VernacStartTheoremProof",
            "0a4d95cdb786b0d74b43737e47f9979e5140b496"
        ],
        [
            "unfold adapted_couple; intros; decompose [and] H; clear H; repeat split; try assumption.",
            "VernacExtend",
            "e958878d3818e66c23f3675e70b16f301051fe8e"
        ],
        [
            "rewrite H2; unfold Rmin; case (Rle_dec a b); intro; case (Rle_dec b a); intro; try reflexivity.",
            "VernacExtend",
            "d987c7b657a177761f31f6db25e3ef0794793d05"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "apply Rle_antisym; auto with real.",
            "VernacExtend",
            "74fbbdeb8a16e1ae52a9ca0ead3e3729b009b67a"
        ],
        [
            "rewrite H1; unfold Rmax; case (Rle_dec a b); intro; case (Rle_dec b a); intro; try reflexivity.",
            "VernacExtend",
            "6d12cca1e9a2b1c6ca27de4017d547fb3de3aadd"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "apply Rle_antisym; auto with real.",
            "VernacExtend",
            "74fbbdeb8a16e1ae52a9ca0ead3e3729b009b67a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P3 : forall a b c:R, a <= b -> adapted_couple (fct_cte c) a b (cons a (cons b nil)) (cons c nil).",
            "VernacStartTheoremProof",
            "22e996e9330679e3122a8d4bf77233d57fa4c3d2"
        ],
        [
            "intros; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "d1d9509dbe38a3046f2e6a8fcf1859044972c954"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H0; inversion H0; [ simpl; assumption | elim (le_Sn_O _ H2) ].",
            "VernacExtend",
            "fd2851e9efe36d9db6ca5cdf03c14e84fb7e1cb2"
        ],
        [
            "simpl; unfold Rmin; decide (Rle_dec a b) with H; reflexivity.",
            "VernacExtend",
            "a4fda8e02b4a9f10f58442ecbd9c2f991e904a7f"
        ],
        [
            "simpl; unfold Rmax; decide (Rle_dec a b) with H; reflexivity.",
            "VernacExtend",
            "19f36d97868bae3b4c49e334e0bfa1f96c903a00"
        ],
        [
            "unfold constant_D_eq, open_interval; intros; simpl in H0; inversion H0; [ reflexivity | elim (le_Sn_O _ H3) ].",
            "VernacExtend",
            "b5244d06db42fc7b6f57df686452bb18d56edf26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P4 : forall a b c:R, IsStepFun (fct_cte c) a b.",
            "VernacStartTheoremProof",
            "adc5fd793e4906533376d23be734fdb9356d4685"
        ],
        [
            "intros; unfold IsStepFun; destruct (Rle_dec a b) as [Hle|Hnle].",
            "VernacExtend",
            "7571f1b1df5affcb0932512db6d6c78bf0fbb082"
        ],
        [
            "apply existT with (cons a (cons b nil)); unfold is_subdivision; apply existT with (cons c nil); apply (StepFun_P3 c Hle).",
            "VernacExtend",
            "2eb251a0be03a963ea05925cb40b04d0f14f0ba3"
        ],
        [
            "apply existT with (cons b (cons a nil)); unfold is_subdivision; apply existT with (cons c nil); apply StepFun_P2; apply StepFun_P3; auto with real.",
            "VernacExtend",
            "9298bcd1a3cf4c189f146f36549ef941b4d14319"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P5 : forall (a b:R) (f:R -> R) (l:Rlist), is_subdivision f a b l -> is_subdivision f b a l.",
            "VernacStartTheoremProof",
            "f7d01c807b703c8f8173e397ec17ebae599b530a"
        ],
        [
            "destruct 1 as (x,(H0,(H1,(H2,(H3,H4))))); exists x; repeat split; try assumption.",
            "VernacExtend",
            "c0b4341d344b6674cb5e2433bcdaa4b188df904a"
        ],
        [
            "rewrite H1; apply Rmin_comm.",
            "VernacExtend",
            "5d8c7339f70659ea6a48c1fb4df7bfc82c2c4fde"
        ],
        [
            "rewrite H2; apply Rmax_comm.",
            "VernacExtend",
            "f9e71292e076d5db1803c88c523d73cf744f88c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P6 : forall (f:R -> R) (a b:R), IsStepFun f a b -> IsStepFun f b a.",
            "VernacStartTheoremProof",
            "cd74933df56bf856fe5dd2303a102475fe262a33"
        ],
        [
            "unfold IsStepFun; intros; elim X; intros; apply existT with x; apply StepFun_P5; assumption.",
            "VernacExtend",
            "15424728be5d084016d4af1ea02892223fffe896"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P7 : forall (a b r1 r2 r3:R) (f:R -> R) (l lf:Rlist), a <= b -> adapted_couple f a b (cons r1 (cons r2 l)) (cons r3 lf) -> adapted_couple f r2 b (cons r2 l) lf.",
            "VernacStartTheoremProof",
            "575fe24a7788f59dd9ce2a4d789034f8e76de210"
        ],
        [
            "unfold adapted_couple; intros; decompose [and] H0; clear H0; assert (H5 : Rmax a b = b).",
            "VernacExtend",
            "ab929f046dd03a819c73a92e306ae76342f714ae"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with H; reflexivity.",
            "VernacExtend",
            "a38044ef0a7a46792cf6035f8edfa2f15d360b04"
        ],
        [
            "assert (H7 : r2 <= b).",
            "VernacExtend",
            "4b328389740e12f4466b0f68f7dc3d195c9f4ec6"
        ],
        [
            "rewrite H5 in H2; rewrite <- H2; apply RList_P7; [ assumption | simpl; right; left; reflexivity ].",
            "VernacExtend",
            "dc70dd0962e7ad75114448235c480c77226729e7"
        ],
        [
            "repeat split.",
            "VernacExtend",
            "7968f2448e3e51b1de42f5c433248f4a827b4da2"
        ],
        [
            "apply RList_P4 with r1; assumption.",
            "VernacExtend",
            "f8f699252f556c73be950f01cbc3e3e84f0f8e81"
        ],
        [
            "rewrite H5 in H2; unfold Rmin; decide (Rle_dec r2 b) with H7; reflexivity.",
            "VernacExtend",
            "f1b7461701ffb57d11e5b1b4c99ea3e24c7923c2"
        ],
        [
            "unfold Rmax; decide (Rle_dec r2 b) with H7.",
            "VernacExtend",
            "e0b8bab563bf5c99445fbf9ce3609a54df167d19"
        ],
        [
            "rewrite H5 in H2; rewrite <- H2; reflexivity.",
            "VernacExtend",
            "c9622880f22c5e3ae1d0b3850189862c7b95afdf"
        ],
        [
            "simpl in H4; simpl; apply INR_eq; apply Rplus_eq_reg_l with 1; do 2 rewrite (Rplus_comm 1); do 2 rewrite <- S_INR; rewrite H4; reflexivity.",
            "VernacExtend",
            "0ba900bd5688d7b7d690426a5563a2b487470e00"
        ],
        [
            "intros; unfold constant_D_eq, open_interval; intros; unfold constant_D_eq, open_interval in H6; assert (H9 : (S i < pred (Rlength (cons r1 (cons r2 l))))%nat).",
            "VernacExtend",
            "fe356f9d4ad909269c6dd9ec24a4ba2aa79e00fa"
        ],
        [
            "simpl; simpl in H0; apply lt_n_S; assumption.",
            "VernacExtend",
            "90e664ae5d2092d8679f207bebdb6aa390708f1d"
        ],
        [
            "assert (H10 := H6 _ H9); apply H10; assumption.",
            "VernacExtend",
            "443c4800481f50592cc5583d0f9694c36cc1c587"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P8 : forall (f:R -> R) (l1 lf1:Rlist) (a b:R), adapted_couple f a b l1 lf1 -> a = b -> Int_SF lf1 l1 = 0.",
            "VernacStartTheoremProof",
            "eee2470ecffc7f239ff6b0c414fdb16a2098aa69"
        ],
        [
            "simple induction l1.",
            "VernacExtend",
            "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
        ],
        [
            "intros; induction lf1 as [| r lf1 Hreclf1]; reflexivity.",
            "VernacExtend",
            "77b165f0a902263a221471e9b1ecf1f2008d5878"
        ],
        [
            "simple induction r0.",
            "VernacExtend",
            "3cd54584b7d76a051ea25914c5484966487340a3"
        ],
        [
            "intros; induction lf1 as [| r1 lf1 Hreclf1].",
            "VernacExtend",
            "e55a70b5682491d029662ccd692257f85ac82174"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold adapted_couple in H0; decompose [and] H0; clear H0; simpl in H5; discriminate.",
            "VernacExtend",
            "e744618c44be9d71b1e1316fde0751abdf88004f"
        ],
        [
            "intros; induction lf1 as [| r3 lf1 Hreclf1].",
            "VernacExtend",
            "a019560d4bf009826f368e1042618207ee92d041"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl; cut (r = r1).",
            "VernacExtend",
            "5913d67e5ee0c326756008b0c29157547873dd56"
        ],
        [
            "intro; rewrite H3; rewrite (H0 lf1 r b).",
            "VernacExtend",
            "e20c0554f8e0589e718033e75dc9e1b236980cc5"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "rewrite H3; apply StepFun_P7 with a r r3; [ right; assumption | assumption ].",
            "VernacExtend",
            "70efbc70d99b33f7a154bee6c9c431e27f5fdca0"
        ],
        [
            "clear H H0 Hreclf1 r0; unfold adapted_couple in H1; decompose [and] H1; intros; simpl in H4; rewrite H4; unfold Rmin; case (Rle_dec a b); intro; [ assumption | reflexivity ].",
            "VernacExtend",
            "82472eb2b4fc0ebc9f505abaf47005c12a5b3ff8"
        ],
        [
            "unfold adapted_couple in H1; decompose [and] H1; intros; apply Rle_antisym.",
            "VernacExtend",
            "5b62ec984c27caba7a857d529a5dffc4393f7734"
        ],
        [
            "apply (H3 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "8a4eb40d0923960f1da5281ec4953e877eb50833"
        ],
        [
            "simpl in H5; rewrite H2 in H5; rewrite H5; replace (Rmin b b) with (Rmax a b); [ rewrite <- H4; apply RList_P7; [ assumption | simpl; right; left; reflexivity ] | unfold Rmin, Rmax; case (Rle_dec b b); case (Rle_dec a b); intros; try assumption || reflexivity ].",
            "VernacExtend",
            "5b558c51ab871680d5b383b68ad21dcea1c2e3be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P9 : forall (a b:R) (f:R -> R) (l lf:Rlist), adapted_couple f a b l lf -> a <> b -> (2 <= Rlength l)%nat.",
            "VernacStartTheoremProof",
            "e7ced013d33c61975fcc2081eb9087d300cefd79"
        ],
        [
            "intros; unfold adapted_couple in H; decompose [and] H; clear H; induction l as [| r l Hrecl]; [ simpl in H4; discriminate | induction l as [| r0 l Hrecl0]; [ simpl in H3; simpl in H2; generalize H3; generalize H2; unfold Rmin, Rmax; case (Rle_dec a b); intros; elim H0; rewrite <- H5; rewrite <- H7; reflexivity | simpl; do 2 apply le_n_S; apply le_O_n ] ].",
            "VernacExtend",
            "a87c01ea3780035a97a8f60b6033b598d3cbbae2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P10 : forall (f:R -> R) (l lf:Rlist) (a b:R), a <= b -> adapted_couple f a b l lf -> exists l' : Rlist, (exists lf' : Rlist, adapted_couple_opt f a b l' lf').",
            "VernacStartTheoremProof",
            "748be813e18cc3fa6ce6437f32d29deda276aa8e"
        ],
        [
            "simple induction l.",
            "VernacExtend",
            "baf54048118103088e518cfa16c3b5327b3c1c28"
        ],
        [
            "intros; unfold adapted_couple in H0; decompose [and] H0; simpl in H4; discriminate.",
            "VernacExtend",
            "d16508bc36a4b13b732d9b16c06ed6a42edbbac5"
        ],
        [
            "intros; case (Req_dec a b); intro.",
            "VernacExtend",
            "4d962706f09ea9fb8d64324daeae28a376a10344"
        ],
        [
            "exists (cons a nil); exists nil; unfold adapted_couple_opt; unfold adapted_couple; unfold ordered_Rlist; repeat split; try (intros; simpl in H3; elim (lt_n_O _ H3)).",
            "VernacExtend",
            "04683133e63f055da28ad4085911e99d2a36c6db"
        ],
        [
            "simpl; rewrite <- H2; unfold Rmin; case (Rle_dec a a); intro; reflexivity.",
            "VernacExtend",
            "85fcca9dc4ac13ffb6bd2e583efe9c6f7681b218"
        ],
        [
            "simpl; rewrite <- H2; unfold Rmax; case (Rle_dec a a); intro; reflexivity.",
            "VernacExtend",
            "4fa9a0145f6693959a009514cf42cb08acfde966"
        ],
        [
            "elim (RList_P20 _ (StepFun_P9 H1 H2)); intros t1 [t2 [t3 H3]]; induction lf as [| r1 lf Hreclf].",
            "VernacExtend",
            "92aa0eeb3278ee93ef454fd6ca171959a555a8af"
        ],
        [
            "unfold adapted_couple in H1; decompose [and] H1; rewrite H3 in H7; simpl in H7; discriminate.",
            "VernacExtend",
            "9976669c8e5af2dbae9557b0d7635a918a40278f"
        ],
        [
            "clear Hreclf; assert (H4 : adapted_couple f t2 b r0 lf).",
            "VernacExtend",
            "c409b7447e4aa65c0ba8e840161b4eebf60a2b95"
        ],
        [
            "rewrite H3 in H1; assert (H4 := RList_P21 _ _ H3); simpl in H4; rewrite H4; eapply StepFun_P7; [ apply H0 | apply H1 ].",
            "VernacExtend",
            "c1a7df9b7fc1d6393a1a75de04de0bc9cb72aef9"
        ],
        [
            "cut (t2 <= b).",
            "VernacExtend",
            "4de8e6bb6783c54141af717d2aa2aed40702c210"
        ],
        [
            "intro; assert (H6 := H _ _ _ H5 H4); case (Req_dec t1 t2); intro Hyp_eq.",
            "VernacExtend",
            "8873e2e637be427181159189769e63433b9c7db7"
        ],
        [
            "replace a with t2.",
            "VernacExtend",
            "30e648e5aaa6e8e0bbba37039a5f434e9f71307b"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "rewrite <- Hyp_eq; rewrite H3 in H1; unfold adapted_couple in H1; decompose [and] H1; clear H1; simpl in H9; rewrite H9; unfold Rmin; decide (Rle_dec a b) with H0; reflexivity.",
            "VernacExtend",
            "994a47985f382a2c50b2a5a3e308d5aa2e8e063e"
        ],
        [
            "elim H6; clear H6; intros l' [lf' H6]; case (Req_dec t2 b); intro.",
            "VernacExtend",
            "7fada929e6b52d12e75115837aab1d7a4bbee772"
        ],
        [
            "exists (cons a (cons b nil)); exists (cons r1 nil); unfold adapted_couple_opt; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "9d68f80e721a5ec99fb3121bdb87dc7250867832"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H8; inversion H8; [ simpl; assumption | elim (le_Sn_O _ H10) ].",
            "VernacExtend",
            "2340e8a020c513cc9c9ac0adbd5316e68689d5bb"
        ],
        [
            "simpl; unfold Rmin; decide (Rle_dec a b) with H0; reflexivity.",
            "VernacExtend",
            "75f16c5f7fdcead4971eb98f4ef39e32ad62e024"
        ],
        [
            "simpl; unfold Rmax; decide (Rle_dec a b) with H0; reflexivity.",
            "VernacExtend",
            "628d5940b54bb068b6ac0cee7e2c366d7961b021"
        ],
        [
            "intros; simpl in H8; inversion H8.",
            "VernacExtend",
            "3e6503290c5f17a7f7a07509b91b884b39e37ac7"
        ],
        [
            "unfold constant_D_eq, open_interval; intros; simpl; simpl in H9; rewrite H3 in H1; unfold adapted_couple in H1; decompose [and] H1; apply (H16 0%nat).",
            "VernacExtend",
            "403941686f43f0db17266fa80213e6ebd0fa7b71"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "unfold open_interval; simpl; rewrite H7; simpl in H13; rewrite H13; unfold Rmin; decide (Rle_dec a b) with H0; assumption.",
            "VernacExtend",
            "436d9eb391b8c62c536df58aa6bef1730f339ae8"
        ],
        [
            "elim (le_Sn_O _ H10).",
            "VernacExtend",
            "f43cd43fb6837d9151bc0ca604e251d8b9448999"
        ],
        [
            "intros; simpl in H8; elim (lt_n_O _ H8).",
            "VernacExtend",
            "b4a172447e86a18826038ce25b6f80f4062aad5d"
        ],
        [
            "intros; simpl in H8; inversion H8; [ simpl; assumption | elim (le_Sn_O _ H10) ].",
            "VernacExtend",
            "f7125f1fd2252a232a72b829165eaccd6db0faab"
        ],
        [
            "assert (Hyp_min : Rmin t2 b = t2).",
            "VernacExtend",
            "486f4508a449eed5fcf882a1a74d1ecdabd4a870"
        ],
        [
            "unfold Rmin; decide (Rle_dec t2 b) with H5; reflexivity.",
            "VernacExtend",
            "b5f3fc4384119810c0ff623eb99d0d8d7abf81a7"
        ],
        [
            "unfold adapted_couple in H6; elim H6; clear H6; intros; elim (RList_P20 _ (StepFun_P9 H6 H7)); intros s1 [s2 [s3 H9]]; induction lf' as [| r2 lf' Hreclf'].",
            "VernacExtend",
            "37bcdc9498f93bccb5c6910220db6b78150ba75b"
        ],
        [
            "unfold adapted_couple in H6; decompose [and] H6; rewrite H9 in H13; simpl in H13; discriminate.",
            "VernacExtend",
            "5921e525378d8d106d7b7b3673439dfd72ab88fe"
        ],
        [
            "clear Hreclf'; case (Req_dec r1 r2); intro.",
            "VernacExtend",
            "94b62d8359b8cace6c3d470aba354df3ae4d4766"
        ],
        [
            "case (Req_dec (f t2) r1); intro.",
            "VernacExtend",
            "1d200e0016855a2a4391768302439a490d86f187"
        ],
        [
            "exists (cons t1 (cons s2 s3)); exists (cons r1 lf'); rewrite H3 in H1; rewrite H9 in H6; unfold adapted_couple in H6, H1; decompose [and] H1; decompose [and] H6; clear H1 H6; unfold adapted_couple_opt; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "92ca9cf990fcde0044ddff07687f730ef2321d1b"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H1; induction i as [| i Hreci].",
            "VernacExtend",
            "7759d28eaffa30cde738736b393bc10ec9957765"
        ],
        [
            "simpl; apply Rle_trans with s1.",
            "VernacExtend",
            "07edd46124373075a9b97e49cb6c03b55f827705"
        ],
        [
            "replace s1 with t2.",
            "VernacExtend",
            "183bc6cb4e04bcf8dd21e619bcdcd2228843e1c3"
        ],
        [
            "apply (H12 0%nat).",
            "VernacExtend",
            "5ac17da0e4d327bcefe8326c6813131847ab8de9"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "simpl in H19; rewrite H19; symmetry ; apply Hyp_min.",
            "VernacExtend",
            "e077383cb5fd152e8815689ac21ce12ce0c59224"
        ],
        [
            "apply (H16 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "428c4aad4a0c590ebf5131574c2cf5ae9d45437a"
        ],
        [
            "change (pos_Rl (cons s2 s3) i <= pos_Rl (cons s2 s3) (S i)); apply (H16 (S i)); simpl; assumption.",
            "VernacExtend",
            "940c5b75ea8c5f604b91cc4be8fe839b8d5fbaa1"
        ],
        [
            "simpl; simpl in H14; rewrite H14; reflexivity.",
            "VernacExtend",
            "2b4770c63eac7ca864e23375f81b558b39c36eb8"
        ],
        [
            "simpl; simpl in H18; rewrite H18; unfold Rmax; decide (Rle_dec a b) with H0; decide (Rle_dec t2 b) with H5; reflexivity.",
            "VernacExtend",
            "03f59656eddce2a866dd5aa83b703864e1622531"
        ],
        [
            "simpl; simpl in H20; apply H20.",
            "VernacExtend",
            "0808aa006813035a9b8596c37002606acaf5d0d6"
        ],
        [
            "intros; simpl in H1; unfold constant_D_eq, open_interval; intros; induction i as [| i Hreci].",
            "VernacExtend",
            "db4514cca9d143eb929d83cb2d2777ae593ca40d"
        ],
        [
            "simpl; simpl in H6; destruct (total_order_T x t2) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "8e832f728d4a8d0f1cabed3a517dc842a1f4beee"
        ],
        [
            "apply (H17 0%nat); [ simpl; apply lt_O_Sn | unfold open_interval; simpl; elim H6; intros; split; assumption ].",
            "VernacExtend",
            "6f230da77c96d65c1475f1ab9867b278d0063e52"
        ],
        [
            "rewrite Heq; assumption.",
            "VernacExtend",
            "d4276998e75f405c1f9a5d5b84458d467ad412bc"
        ],
        [
            "rewrite H10; apply (H22 0%nat); [ simpl; apply lt_O_Sn | unfold open_interval; simpl; replace s1 with t2; [ elim H6; intros; split; assumption | simpl in H19; rewrite H19; rewrite Hyp_min; reflexivity ] ].",
            "VernacExtend",
            "521dee9b3293ac35ddad599d1c42f524f91f9fdd"
        ],
        [
            "simpl; simpl in H6; apply (H22 (S i)); [ simpl; assumption | unfold open_interval; simpl; apply H6 ].",
            "VernacExtend",
            "8b970b652a9a8c8d3ecdc0884c2ed8eff75bd72c"
        ],
        [
            "intros; simpl in H1; rewrite H10; change (pos_Rl (cons r2 lf') i <> pos_Rl (cons r2 lf') (S i) \\/ f (pos_Rl (cons s1 (cons s2 s3)) (S i)) <> pos_Rl (cons r2 lf') i) ; rewrite <- H9; elim H8; intros; apply H6; simpl; apply H1.",
            "VernacExtend",
            "62bfa34b8112a2283411e2a827e7e5543c39bc71"
        ],
        [
            "intros; induction i as [| i Hreci].",
            "VernacExtend",
            "c9adc63016258b96a0e1d467a9bcaf9fe9e89584"
        ],
        [
            "simpl; red; intro; elim Hyp_eq; apply Rle_antisym.",
            "VernacExtend",
            "e5f7c5f796d279a71a82577b931773ab8cd66338"
        ],
        [
            "apply (H12 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "b33054d0ad9d538defb5255f1e9fc6a916c966ac"
        ],
        [
            "rewrite <- Hyp_min; rewrite H6; simpl in H19; rewrite <- H19; apply (H16 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "856125cbad919f6ab7523911c43cf3f41fac0862"
        ],
        [
            "elim H8; intros; rewrite H9 in H21; apply (H21 (S i)); simpl; simpl in H1; apply H1.",
            "VernacExtend",
            "782d91c1d5a9aefb3520f515311bf9c3edb888a9"
        ],
        [
            "exists (cons t1 l'); exists (cons r1 (cons r2 lf')); rewrite H9 in H6; rewrite H3 in H1; unfold adapted_couple in H1, H6; decompose [and] H6; decompose [and] H1; clear H6 H1; unfold adapted_couple_opt; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "347a99da57282f7023556952cf5d9d85f0ba3cc8"
        ],
        [
            "rewrite H9; unfold ordered_Rlist; intros; simpl in H1; induction i as [| i Hreci].",
            "VernacExtend",
            "592a5799f69c07c1eeb5a4ba16b676847a502fbc"
        ],
        [
            "simpl; replace s1 with t2.",
            "VernacExtend",
            "d762f8699bb474546239d4f801d674fe7cd32381"
        ],
        [
            "apply (H16 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "428c4aad4a0c590ebf5131574c2cf5ae9d45437a"
        ],
        [
            "simpl in H14; rewrite H14; rewrite Hyp_min; reflexivity.",
            "VernacExtend",
            "3addbb533747cbad708efc86be59b85f1c4d0ab4"
        ],
        [
            "change (pos_Rl (cons s1 (cons s2 s3)) i <= pos_Rl (cons s1 (cons s2 s3)) (S i)) ; apply (H12 i); simpl; apply lt_S_n; assumption.",
            "VernacExtend",
            "a046af06c76e1f210b8fec6b51c6ba6d7e4f18c1"
        ],
        [
            "simpl; simpl in H19; apply H19.",
            "VernacExtend",
            "f6f77a8c32cf5bd167656cc79659d4d3eb54e2bf"
        ],
        [
            "rewrite H9; simpl; simpl in H13; rewrite H13; unfold Rmax; decide (Rle_dec t2 b) with H5; decide (Rle_dec a b) with H0; reflexivity.",
            "VernacExtend",
            "817418ae1521107d76a728d0694c3972fb74dca7"
        ],
        [
            "rewrite H9; simpl; simpl in H15; rewrite H15; reflexivity.",
            "VernacExtend",
            "351d242ba9217840b1c2d2177847b2c8ab2b93c7"
        ],
        [
            "intros; simpl in H1; unfold constant_D_eq, open_interval; intros; induction i as [| i Hreci].",
            "VernacExtend",
            "db4514cca9d143eb929d83cb2d2777ae593ca40d"
        ],
        [
            "simpl; rewrite H9 in H6; simpl in H6; apply (H22 0%nat).",
            "VernacExtend",
            "0dba4deccec5d3f6e7a5891be0544288775cb622"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "unfold open_interval; simpl.",
            "VernacExtend",
            "6654e93d6b5a532a0b5d681bfded40770c826d62"
        ],
        [
            "replace t2 with s1.",
            "VernacExtend",
            "1a440fa94400f48054d19a26b528c0eb5e8a7960"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H14; rewrite H14; rewrite Hyp_min; reflexivity.",
            "VernacExtend",
            "3addbb533747cbad708efc86be59b85f1c4d0ab4"
        ],
        [
            "change (f x = pos_Rl (cons r2 lf') i); clear Hreci; apply (H17 i).",
            "VernacExtend",
            "c99096c5c04a7b45a111c8d140f93dbe0577c17f"
        ],
        [
            "simpl; rewrite H9 in H1; simpl in H1; apply lt_S_n; apply H1.",
            "VernacExtend",
            "0cc1b26e34ebb0fa10bd08385f5bb2208d75fa2b"
        ],
        [
            "rewrite H9 in H6; unfold open_interval; apply H6.",
            "VernacExtend",
            "a3de6e1c419fa39fcab830d3b799a4d6794b3706"
        ],
        [
            "intros; simpl in H1; induction i as [| i Hreci].",
            "VernacExtend",
            "bd8c707a583d697fca6b0348f432c426513334b6"
        ],
        [
            "simpl; rewrite H9; right; simpl; replace s1 with t2.",
            "VernacExtend",
            "67707abd761e55cbf56eff53c063bcfdb217fe37"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H14; rewrite H14; rewrite Hyp_min; reflexivity.",
            "VernacExtend",
            "3addbb533747cbad708efc86be59b85f1c4d0ab4"
        ],
        [
            "elim H8; intros; apply (H6 i).",
            "VernacExtend",
            "382599a5fac1d9083b3bbc65dabb341fd8b20fe3"
        ],
        [
            "simpl; apply lt_S_n; apply H1.",
            "VernacExtend",
            "2d062bf2ceaffc9bc864f9fbb552012f44bbbe5a"
        ],
        [
            "intros; rewrite H9; induction i as [| i Hreci].",
            "VernacExtend",
            "f33464bfbab3b74a0ce318c799ad9244f9601182"
        ],
        [
            "simpl; red; intro; elim Hyp_eq; apply Rle_antisym.",
            "VernacExtend",
            "e5f7c5f796d279a71a82577b931773ab8cd66338"
        ],
        [
            "apply (H16 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "428c4aad4a0c590ebf5131574c2cf5ae9d45437a"
        ],
        [
            "rewrite <- Hyp_min; rewrite H6; simpl in H14; rewrite <- H14; right; reflexivity.",
            "VernacExtend",
            "4d7f0fc6d72f4c8e46f1bd52a928d90481f92847"
        ],
        [
            "elim H8; intros; rewrite <- H9; apply (H21 i); rewrite H9; rewrite H9 in H1; simpl; simpl in H1; apply lt_S_n; apply H1.",
            "VernacExtend",
            "f2cdb2e6052eede0b3c50306b3d76c8ccb2c794c"
        ],
        [
            "exists (cons t1 l'); exists (cons r1 (cons r2 lf')); rewrite H9 in H6; rewrite H3 in H1; unfold adapted_couple in H1, H6; decompose [and] H6; decompose [and] H1; clear H6 H1; unfold adapted_couple_opt; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "347a99da57282f7023556952cf5d9d85f0ba3cc8"
        ],
        [
            "rewrite H9; unfold ordered_Rlist; intros; simpl in H1; induction i as [| i Hreci].",
            "VernacExtend",
            "592a5799f69c07c1eeb5a4ba16b676847a502fbc"
        ],
        [
            "simpl; replace s1 with t2.",
            "VernacExtend",
            "d762f8699bb474546239d4f801d674fe7cd32381"
        ],
        [
            "apply (H15 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "814c83f6c34f399ed1835cbddb47c3e7b402db12"
        ],
        [
            "simpl in H13; rewrite H13; rewrite Hyp_min; reflexivity.",
            "VernacExtend",
            "66cc102cd2e8f70a5bfb383a0b749bb3c6680129"
        ],
        [
            "change (pos_Rl (cons s1 (cons s2 s3)) i <= pos_Rl (cons s1 (cons s2 s3)) (S i)) ; apply (H11 i); simpl; apply lt_S_n; assumption.",
            "VernacExtend",
            "ff29d0b3f699200975f0fd0f3f1806ba1fc2dc1e"
        ],
        [
            "simpl; simpl in H18; apply H18.",
            "VernacExtend",
            "39e97ed143d685b5316d885a4a7b029796a892a5"
        ],
        [
            "rewrite H9; simpl; simpl in H12; rewrite H12; unfold Rmax; decide (Rle_dec t2 b) with H5; decide (Rle_dec a b) with H0; reflexivity.",
            "VernacExtend",
            "0a11be01684d3872edc5a6ae0c54893c4c3c1655"
        ],
        [
            "rewrite H9; simpl; simpl in H14; rewrite H14; reflexivity.",
            "VernacExtend",
            "cba227839456d4c3629b4057ffa60ad1b6a3493b"
        ],
        [
            "intros; simpl in H1; unfold constant_D_eq, open_interval; intros; induction i as [| i Hreci].",
            "VernacExtend",
            "db4514cca9d143eb929d83cb2d2777ae593ca40d"
        ],
        [
            "simpl; rewrite H9 in H6; simpl in H6; apply (H21 0%nat).",
            "VernacExtend",
            "f02c7e31e36a913afe6e2fbb55eddc6c6dc36af4"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "unfold open_interval; simpl; replace t2 with s1.",
            "VernacExtend",
            "b5e42359cfef60ac668adcd3ce9287fccc8f78b9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H13; rewrite H13; rewrite Hyp_min; reflexivity.",
            "VernacExtend",
            "66cc102cd2e8f70a5bfb383a0b749bb3c6680129"
        ],
        [
            "change (f x = pos_Rl (cons r2 lf') i); clear Hreci; apply (H16 i).",
            "VernacExtend",
            "4708ca6313148e4f53e35636cd73d7dbe168a83f"
        ],
        [
            "simpl; rewrite H9 in H1; simpl in H1; apply lt_S_n; apply H1.",
            "VernacExtend",
            "0cc1b26e34ebb0fa10bd08385f5bb2208d75fa2b"
        ],
        [
            "rewrite H9 in H6; unfold open_interval; apply H6.",
            "VernacExtend",
            "a3de6e1c419fa39fcab830d3b799a4d6794b3706"
        ],
        [
            "intros; simpl in H1; induction i as [| i Hreci].",
            "VernacExtend",
            "bd8c707a583d697fca6b0348f432c426513334b6"
        ],
        [
            "simpl; left; assumption.",
            "VernacExtend",
            "3d5b25df5e593409b5cd5a97aa73c42d73c6749a"
        ],
        [
            "elim H8; intros; apply (H6 i).",
            "VernacExtend",
            "382599a5fac1d9083b3bbc65dabb341fd8b20fe3"
        ],
        [
            "simpl; apply lt_S_n; apply H1.",
            "VernacExtend",
            "2d062bf2ceaffc9bc864f9fbb552012f44bbbe5a"
        ],
        [
            "intros; rewrite H9; induction i as [| i Hreci].",
            "VernacExtend",
            "f33464bfbab3b74a0ce318c799ad9244f9601182"
        ],
        [
            "simpl; red; intro; elim Hyp_eq; apply Rle_antisym.",
            "VernacExtend",
            "e5f7c5f796d279a71a82577b931773ab8cd66338"
        ],
        [
            "apply (H15 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "814c83f6c34f399ed1835cbddb47c3e7b402db12"
        ],
        [
            "rewrite <- Hyp_min; rewrite H6; simpl in H13; rewrite <- H13; right; reflexivity.",
            "VernacExtend",
            "7ae49d8b2eed88cc9ecd3f579f8772644756dccc"
        ],
        [
            "elim H8; intros; rewrite <- H9; apply (H20 i); rewrite H9; rewrite H9 in H1; simpl; simpl in H1; apply lt_S_n; apply H1.",
            "VernacExtend",
            "b7ef1ec956bd84c6a70d79396772f0f26ad17b3a"
        ],
        [
            "rewrite H3 in H1; clear H4; unfold adapted_couple in H1; decompose [and] H1; clear H1; clear H H7 H9; cut (Rmax a b = b); [ intro; rewrite H in H5; rewrite <- H5; apply RList_P7; [ assumption | simpl; right; left; reflexivity ] | unfold Rmax; decide (Rle_dec a b) with H0; reflexivity ].",
            "VernacExtend",
            "cc5798c3bf67a6aa6ebfb21fee2d53455b8f4c7b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P11 : forall (a b r r1 r3 s1 s2 r4:R) (r2 lf1 s3 lf2:Rlist) (f:R -> R), a < b -> adapted_couple f a b (cons r (cons r1 r2)) (cons r3 lf1) -> adapted_couple_opt f a b (cons s1 (cons s2 s3)) (cons r4 lf2) -> r1 <= s2.",
            "VernacStartTheoremProof",
            "207c6c3484cf168b83db32a75ae70d23a0f57206"
        ],
        [
            "intros; unfold adapted_couple_opt in H1; elim H1; clear H1; intros; unfold adapted_couple in H0, H1; decompose [and] H0; decompose [and] H1; clear H0 H1; assert (H12 : r = s1).",
            "VernacExtend",
            "0de82507b1adda8317d21ee74ac4711f55b68253"
        ],
        [
            "simpl in H10; simpl in H5; rewrite H10; rewrite H5; reflexivity.",
            "VernacExtend",
            "3e96b65d1996fee02a0dea917d18d0b53ac28132"
        ],
        [
            "assert (H14 := H3 0%nat (lt_O_Sn _)); simpl in H14; elim H14; intro.",
            "VernacExtend",
            "cfaba5a11f8ba91f0db3d5a6ad63c1d01faf0e73"
        ],
        [
            "assert (H15 := H7 0%nat (lt_O_Sn _)); simpl in H15; elim H15; intro.",
            "VernacExtend",
            "59100bae718159773df082f06a3d19aaae549d7f"
        ],
        [
            "rewrite <- H12 in H1; destruct (Rle_dec r1 s2) as [Hle|Hnle]; try assumption.",
            "VernacExtend",
            "4a7d84de7c1d7b66f3b8d3a4360a738b465f8467"
        ],
        [
            "assert (H16 : s2 < r1); auto with real.",
            "VernacExtend",
            "27e22e4c0eb5e421aed51853297e217aea83cabb"
        ],
        [
            "induction s3 as [| r0 s3 Hrecs3].",
            "VernacExtend",
            "01a012a1560a830bfac3d6a1da27776095b17492"
        ],
        [
            "simpl in H9; rewrite H9 in H16; cut (r1 <= Rmax a b).",
            "VernacExtend",
            "9f412a72f030941b53dd2a0df69c06eff29a1588"
        ],
        [
            "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H17 H16)).",
            "VernacExtend",
            "e484444fe20b8172e3b43effb0a9ff420bf024ce"
        ],
        [
            "rewrite <- H4; apply RList_P7; [ assumption | simpl; right; left; reflexivity ].",
            "VernacExtend",
            "c4f209beeb86ce085c453f03ef593447845e2955"
        ],
        [
            "clear Hrecs3; induction lf2 as [| r5 lf2 Hreclf2].",
            "VernacExtend",
            "445d16dcf559d0bff305773e9747dc6495ea86d5"
        ],
        [
            "simpl in H11; discriminate.",
            "VernacExtend",
            "abb166ceb57b248f1360fb7426ffee9cc54d48dc"
        ],
        [
            "clear Hreclf2; assert (H17 : r3 = r4).",
            "VernacExtend",
            "330d2a03b643de54beef2bf4622b456768f44162"
        ],
        [
            "set (x := (r + s2) / 2); assert (H17 := H8 0%nat (lt_O_Sn _)); assert (H18 := H13 0%nat (lt_O_Sn _)); unfold constant_D_eq, open_interval in H17, H18; simpl in H17; simpl in H18; rewrite <- (H17 x).",
            "VernacExtend",
            "27b976f625f1bb4ff01c9deff7ac7e4a90e5699e"
        ],
        [
            "rewrite <- (H18 x).",
            "VernacExtend",
            "7ddf43e28f69fe92614c973df9f42a08be79f4e5"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite <- H12; unfold x; split.",
            "VernacExtend",
            "08e5c3961437d04bb8e26c0f7854c24b7def1941"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "35b716538dd20af83cfdc7d9e6694d744aa20b44"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm r); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "66cff5df57c18291b8eb39b98b00c50590125778"
        ],
        [
            "unfold x; split.",
            "VernacExtend",
            "2effb1e2038dff9a09ff42a63b04c85a3737e909"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "35b716538dd20af83cfdc7d9e6694d744aa20b44"
        ],
        [
            "apply Rlt_trans with s2; [ apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm r); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ] | assumption ].",
            "VernacExtend",
            "35db2aec47eded8ffbe393fa5c30f0edf91708d3"
        ],
        [
            "assert (H18 : f s2 = r3).",
            "VernacExtend",
            "3d3a12be1a405fd76a6e05866162e4de88e46e5d"
        ],
        [
            "apply (H8 0%nat); [ simpl; apply lt_O_Sn | unfold open_interval; simpl; split; assumption ].",
            "VernacExtend",
            "54348d3c9f42075ae78cafb2ac6d47ccf3ab0c31"
        ],
        [
            "assert (H19 : r3 = r5).",
            "VernacExtend",
            "811b4e8bf2a9fe81505fd5db2579ccde704d5270"
        ],
        [
            "assert (H19 := H7 1%nat); simpl in H19; assert (H20 := H19 (lt_n_S _ _ (lt_O_Sn _))); elim H20; intro.",
            "VernacExtend",
            "4d5f2ce861f3b432f73af88ea7e7fc56cacaa10a"
        ],
        [
            "set (x := (s2 + Rmin r1 r0) / 2); assert (H22 := H8 0%nat); assert (H23 := H13 1%nat); simpl in H22; simpl in H23; rewrite <- (H22 (lt_O_Sn _) x).",
            "VernacExtend",
            "979aff78af108a7bd72eeade0615bef4852c2bcc"
        ],
        [
            "rewrite <- (H23 (lt_n_S _ _ (lt_O_Sn _)) x).",
            "VernacExtend",
            "1664699851842769dc204ce19ca6bf2ed638a7f8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold open_interval; simpl; unfold x; split.",
            "VernacExtend",
            "31341cc2e34ba229ff69388b82865ae49f387fdc"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; unfold Rmin; case (Rle_dec r1 r0); intro; assumption | discrR ] ].",
            "VernacExtend",
            "92d4369ada9031774f0453ff5a89252122376f44"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rlt_le_trans with (r0 + Rmin r1 r0); [ do 2 rewrite <- (Rplus_comm (Rmin r1 r0)); apply Rplus_lt_compat_l; assumption | apply Rplus_le_compat_l; apply Rmin_r ] | discrR ] ].",
            "VernacExtend",
            "7200c7c01609374776e7721dc408cba22b021048"
        ],
        [
            "unfold open_interval; simpl; unfold x; split.",
            "VernacExtend",
            "31341cc2e34ba229ff69388b82865ae49f387fdc"
        ],
        [
            "apply Rlt_trans with s2; [ assumption | apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; unfold Rmin; case (Rle_dec r1 r0); intro; assumption | discrR ] ] ].",
            "VernacExtend",
            "873ef0e7a32dadf7646de1b6950ed4f07f2f158a"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rlt_le_trans with (r1 + Rmin r1 r0); [ do 2 rewrite <- (Rplus_comm (Rmin r1 r0)); apply Rplus_lt_compat_l; assumption | apply Rplus_le_compat_l; apply Rmin_l ] | discrR ] ].",
            "VernacExtend",
            "56663dd0f5b9e90aedebf64657f9a5182f6b1280"
        ],
        [
            "elim H2; clear H2; intros; assert (H23 := H22 1%nat); simpl in H23; assert (H24 := H23 (lt_n_S _ _ (lt_O_Sn _))); elim H24; assumption.",
            "VernacExtend",
            "1c34b9ddb05abcaefd768e202b6abdbd8eeb6ed7"
        ],
        [
            "elim H2; intros; assert (H22 := H20 0%nat); simpl in H22; assert (H23 := H22 (lt_O_Sn _)); elim H23; intro; [ elim H24; rewrite <- H17; rewrite <- H19; reflexivity | elim H24; rewrite <- H17; assumption ].",
            "VernacExtend",
            "558c22bab5e2b6c61de41f9aacccd242abf30b96"
        ],
        [
            "elim H2; clear H2; intros; assert (H17 := H16 0%nat); simpl in H17; elim (H17 (lt_O_Sn _)); assumption.",
            "VernacExtend",
            "8998ec726bc56f04afff40fd4c3ee71d39f03bf9"
        ],
        [
            "rewrite <- H0; rewrite H12; apply (H7 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "5cfd89e8f8abb11abefc89db2eb43a031b97d0b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P12 : forall (a b:R) (f:R -> R) (l lf:Rlist), adapted_couple_opt f a b l lf -> adapted_couple_opt f b a l lf.",
            "VernacStartTheoremProof",
            "9fa28d9c8eb76efca8d1ee1ef920b33a3c465b9e"
        ],
        [
            "unfold adapted_couple_opt; unfold adapted_couple; intros; decompose [and] H; clear H; repeat split; try assumption.",
            "VernacExtend",
            "c60e3c992dfa0b8823c5b0d1d7132147c5918d80"
        ],
        [
            "rewrite H0; unfold Rmin; case (Rle_dec a b); intro; case (Rle_dec b a); intro; try reflexivity.",
            "VernacExtend",
            "8314c42a88eb3b67fa39b0a19a17e809a2acc50f"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "apply Rle_antisym; auto with real.",
            "VernacExtend",
            "74fbbdeb8a16e1ae52a9ca0ead3e3729b009b67a"
        ],
        [
            "rewrite H3; unfold Rmax; case (Rle_dec a b); intro; case (Rle_dec b a); intro; try reflexivity.",
            "VernacExtend",
            "ecf29b3886ec6b6fb46b1ed484d0d4059b8f1957"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "apply Rle_antisym; auto with real.",
            "VernacExtend",
            "74fbbdeb8a16e1ae52a9ca0ead3e3729b009b67a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P13 : forall (a b r r1 r3 s1 s2 r4:R) (r2 lf1 s3 lf2:Rlist) (f:R -> R), a <> b -> adapted_couple f a b (cons r (cons r1 r2)) (cons r3 lf1) -> adapted_couple_opt f a b (cons s1 (cons s2 s3)) (cons r4 lf2) -> r1 <= s2.",
            "VernacStartTheoremProof",
            "3cce0c0fc9d0cb1d04bddbae61d488fe84453b76"
        ],
        [
            "intros; destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "55768aa47b4876037c49dc8f99dad72c397670b9"
        ],
        [
            "eapply StepFun_P11; [ apply Hlt | apply H0 | apply H1 ].",
            "VernacExtend",
            "58bdcad0444915a2401edd25e85179776f933ebe"
        ],
        [
            "elim H; assumption.",
            "VernacExtend",
            "208cbae6d4c505591733cd429d302ea8fd9c235a"
        ],
        [
            "eapply StepFun_P11; [ apply Hgt | apply StepFun_P2; apply H0 | apply StepFun_P12; apply H1 ].",
            "VernacExtend",
            "db1a75579b8959b1737f8afe745b6fc3ff5a3632"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P14 : forall (f:R -> R) (l1 l2 lf1 lf2:Rlist) (a b:R), a <= b -> adapted_couple f a b l1 lf1 -> adapted_couple_opt f a b l2 lf2 -> Int_SF lf1 l1 = Int_SF lf2 l2.",
            "VernacStartTheoremProof",
            "83c6d37d69ba5bc5b913bc8f0abdcdd1ce9a4149"
        ],
        [
            "simple induction l1.",
            "VernacExtend",
            "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
        ],
        [
            "intros l2 lf1 lf2 a b Hyp H H0; unfold adapted_couple in H; decompose [and] H; clear H H0 H2 H3 H1 H6; simpl in H4; discriminate.",
            "VernacExtend",
            "6d81e6c65d8b85d46536f13b509cddc1472d2bf4"
        ],
        [
            "simple induction r0.",
            "VernacExtend",
            "3cd54584b7d76a051ea25914c5484966487340a3"
        ],
        [
            "intros; case (Req_dec a b); intro.",
            "VernacExtend",
            "4d962706f09ea9fb8d64324daeae28a376a10344"
        ],
        [
            "unfold adapted_couple_opt in H2; elim H2; intros; rewrite (StepFun_P8 H4 H3); rewrite (StepFun_P8 H1 H3); reflexivity.",
            "VernacExtend",
            "66bfcdd6f0ad434bcf3364f1513ff717c7fae2ed"
        ],
        [
            "assert (H4 := StepFun_P9 H1 H3); simpl in H4; elim (le_Sn_O _ (le_S_n _ _ H4)).",
            "VernacExtend",
            "98cd1882944aab3c09d2ff08e5c14175618f3258"
        ],
        [
            "intros; clear H; unfold adapted_couple_opt in H3; elim H3; clear H3; intros; case (Req_dec a b); intro.",
            "VernacExtend",
            "b44f21c2cab20443d2f5f4040f4638eb7c07b630"
        ],
        [
            "rewrite (StepFun_P8 H2 H4); rewrite (StepFun_P8 H H4); reflexivity.",
            "VernacExtend",
            "a26c09cbf9c6cd84e51f898b564fd4b86b733a4d"
        ],
        [
            "assert (Hyp_min : Rmin a b = a).",
            "VernacExtend",
            "0243905eb1749d10988ba806083ea094f449722c"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with H1; reflexivity.",
            "VernacExtend",
            "e67fbfeae7f1b3296e6e070445eabb61a0e85154"
        ],
        [
            "assert (Hyp_max : Rmax a b = b).",
            "VernacExtend",
            "c470a417994be9feb24bc20dad3712277aa7086b"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with H1; reflexivity.",
            "VernacExtend",
            "0acb1062af573a0db40d1924ecfef3f2d286c759"
        ],
        [
            "elim (RList_P20 _ (StepFun_P9 H H4)); intros s1 [s2 [s3 H5]]; rewrite H5 in H; rewrite H5; induction lf1 as [| r3 lf1 Hreclf1].",
            "VernacExtend",
            "50b9dd781c43f3f1ab7451687392b3d67d847b03"
        ],
        [
            "unfold adapted_couple in H2; decompose [and] H2; clear H H2 H4 H5 H3 H6 H8 H7 H11; simpl in H9; discriminate.",
            "VernacExtend",
            "f7de3b0e208dc5ee72e236d062869159e8a59664"
        ],
        [
            "clear Hreclf1; induction lf2 as [| r4 lf2 Hreclf2].",
            "VernacExtend",
            "97eb1834b44c27b97c1ef425d8acd890c4c053fe"
        ],
        [
            "unfold adapted_couple in H; decompose [and] H; clear H H2 H4 H5 H3 H6 H8 H7 H11; simpl in H9; discriminate.",
            "VernacExtend",
            "fa9ef67b56d8e84e541b6d3b53bf4501fa743b27"
        ],
        [
            "clear Hreclf2; assert (H6 : r = s1).",
            "VernacExtend",
            "60dc6e3979300781b83dca8a17c8fc66509a401d"
        ],
        [
            "unfold adapted_couple in H, H2; decompose [and] H; decompose [and] H2; clear H H2; simpl in H13; simpl in H8; rewrite H13; rewrite H8; reflexivity.",
            "VernacExtend",
            "5e6266b59c919afaddfc34c6d227cf3776438799"
        ],
        [
            "assert (H7 : r3 = r4 \\/ r = r1).",
            "VernacExtend",
            "fa48404d9e01b3ad9bfc842c85463ad98ea19eb7"
        ],
        [
            "case (Req_dec r r1); intro.",
            "VernacExtend",
            "a547d8a6ccc3ff31cc5dac6cc1b5fd62215877fe"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "left; cut (r1 <= s2).",
            "VernacExtend",
            "82dc2d8100f0de9cd5b82c9c8a3825f645197c77"
        ],
        [
            "intro; unfold adapted_couple in H2, H; decompose [and] H; decompose [and] H2; clear H H2; set (x := (r + r1) / 2); assert (H18 := H14 0%nat); assert (H20 := H19 0%nat); unfold constant_D_eq, open_interval in H18, H20; simpl in H18; simpl in H20; rewrite <- (H18 (lt_O_Sn _) x).",
            "VernacExtend",
            "37f86cef041de36b27278a44523dc92fb4f8bb7a"
        ],
        [
            "rewrite <- (H20 (lt_O_Sn _) x).",
            "VernacExtend",
            "068311712fd024d1036e27a78ad9636defb78134"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assert (H21 := H13 0%nat (lt_O_Sn _)); simpl in H21; elim H21; intro; [ idtac | elim H7; assumption ]; unfold x; split.",
            "VernacExtend",
            "8ead9a2b62b0b347f86f50e9e3e9f0289c9873a9"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; apply H | discrR ] ].",
            "VernacExtend",
            "40ae74c58d23def79a9207757c829127cdf237ca"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite <- (Rplus_comm r1); rewrite double; apply Rplus_lt_compat_l; apply H | discrR ] ].",
            "VernacExtend",
            "b2038cb7652d5d2da4a7bccf47ebf43c1a40e4a7"
        ],
        [
            "rewrite <- H6; assert (H21 := H13 0%nat (lt_O_Sn _)); simpl in H21; elim H21; intro; [ idtac | elim H7; assumption ]; unfold x; split.",
            "VernacExtend",
            "ea0694c90708c6c84d16442298b625b3c3338517"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; apply H | discrR ] ].",
            "VernacExtend",
            "40ae74c58d23def79a9207757c829127cdf237ca"
        ],
        [
            "apply Rlt_le_trans with r1; [ apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite <- (Rplus_comm r1); rewrite double; apply Rplus_lt_compat_l; apply H | discrR ] ] | assumption ].",
            "VernacExtend",
            "4df76fa0446e3b7e9a6cb53af51fdcc2e837fda5"
        ],
        [
            "eapply StepFun_P13.",
            "VernacExtend",
            "4ead6a1198e04b8201d02c4176c2232594e5d785"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "unfold adapted_couple_opt; split.",
            "VernacExtend",
            "b514c53d08129ae7ccc903dacc4e9b868617a69c"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite H5 in H3; apply H3.",
            "VernacExtend",
            "9d14f16f7bb484c8c9ec518dbfdffefebfbc7a8c"
        ],
        [
            "assert (H8 : r1 <= s2).",
            "VernacExtend",
            "c5bda5d8c2406414effd4a1feab39e7d41b0cfd6"
        ],
        [
            "eapply StepFun_P13.",
            "VernacExtend",
            "4ead6a1198e04b8201d02c4176c2232594e5d785"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "unfold adapted_couple_opt; split.",
            "VernacExtend",
            "b514c53d08129ae7ccc903dacc4e9b868617a69c"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite H5 in H3; apply H3.",
            "VernacExtend",
            "9d14f16f7bb484c8c9ec518dbfdffefebfbc7a8c"
        ],
        [
            "elim H7; intro.",
            "VernacExtend",
            "070405caa108b888f9b7cdae90f17b6f92d6f351"
        ],
        [
            "simpl; elim H8; intro.",
            "VernacExtend",
            "9a7d241ea1f3ff3cce46c62dddc04052a2004a59"
        ],
        [
            "replace (r4 * (s2 - s1)) with (r3 * (r1 - r) + r3 * (s2 - r1)); [ idtac | rewrite H9; rewrite H6; ring ].",
            "VernacExtend",
            "394117d104f5507c06f393850f585a61c7a3137a"
        ],
        [
            "rewrite Rplus_assoc; apply Rplus_eq_compat_l; change (Int_SF lf1 (cons r1 r2) = Int_SF (cons r3 lf2) (cons r1 (cons s2 s3))) ; apply H0 with r1 b.",
            "VernacExtend",
            "343c380e1e68f68b4ca05b79712e44d8a729d0f2"
        ],
        [
            "unfold adapted_couple in H2; decompose [and] H2; clear H2; replace b with (Rmax a b).",
            "VernacExtend",
            "ea365866b30f7e15a9cad0efa628342be332e9c0"
        ],
        [
            "rewrite <- H12; apply RList_P7; [ assumption | simpl; right; left; reflexivity ].",
            "VernacExtend",
            "7597e383f5d3ef99c2b4f6a3c9afd1c21a4dd030"
        ],
        [
            "eapply StepFun_P7.",
            "VernacExtend",
            "33b9e829f78ebc0e6fda538d7b7d0b9c8da25cd6"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "unfold adapted_couple_opt; split.",
            "VernacExtend",
            "b514c53d08129ae7ccc903dacc4e9b868617a69c"
        ],
        [
            "apply StepFun_P7 with a a r3.",
            "VernacExtend",
            "96fecf8e7ea6f3872dd57beb74859724699324c7"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "unfold adapted_couple in H2, H; decompose [and] H2; decompose [and] H; clear H H2; assert (H20 : r = a).",
            "VernacExtend",
            "41db7c6f214cc9407770e65e2ec7feec0edad7c6"
        ],
        [
            "simpl in H13; rewrite H13; apply Hyp_min.",
            "VernacExtend",
            "558387d806e5f50771fb9da35b2f90d4afb3dccd"
        ],
        [
            "unfold adapted_couple; repeat split.",
            "VernacExtend",
            "dee488b658795c3af1007f2b0b4a6cde4366b22d"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H; induction i as [| i Hreci].",
            "VernacExtend",
            "234e72ada15437c8cf79e98c5be4032756839360"
        ],
        [
            "simpl; rewrite <- H20; apply (H11 0%nat).",
            "VernacExtend",
            "7855371659318c266543b17c659c09387eda265f"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "induction i as [| i Hreci0].",
            "VernacExtend",
            "7fad9718d13b31d7362564378666454b341f434e"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "change (pos_Rl (cons s2 s3) i <= pos_Rl (cons s2 s3) (S i)); apply (H15 (S i)); simpl; apply lt_S_n; assumption.",
            "VernacExtend",
            "cadc375c36e1873a199cd9e325784d1f75909241"
        ],
        [
            "simpl; symmetry ; apply Hyp_min.",
            "VernacExtend",
            "00dca91949da0a20fba82fbea83349db28d1835c"
        ],
        [
            "rewrite <- H17; reflexivity.",
            "VernacExtend",
            "76df8015736c32e78c6b074a69c41fe5f7558f7b"
        ],
        [
            "simpl in H19; simpl; rewrite H19; reflexivity.",
            "VernacExtend",
            "92f044b33905350cc759a76fc0bea6942bee5449"
        ],
        [
            "intros; simpl in H; unfold constant_D_eq, open_interval; intros; induction i as [| i Hreci].",
            "VernacExtend",
            "37544428ea3379ade4fee5e09e63ea8eb0e2730a"
        ],
        [
            "simpl; apply (H16 0%nat).",
            "VernacExtend",
            "18b3014f98578dcd1d3e4aca979a442bf2408a40"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "simpl in H2; rewrite <- H20 in H2; unfold open_interval; simpl; apply H2.",
            "VernacExtend",
            "73eb7643bce22e38a5892c81bf537227cfcf5cda"
        ],
        [
            "clear Hreci; induction i as [| i Hreci].",
            "VernacExtend",
            "2d7a4425fd94db60f320c3c71e0f39577d288a35"
        ],
        [
            "simpl; simpl in H2; rewrite H9; apply (H21 0%nat).",
            "VernacExtend",
            "71b53f5a3601842fa3934f76f7dc108797ef4d41"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "unfold open_interval; simpl; elim H2; intros; split.",
            "VernacExtend",
            "f2dff423b1508cbe9d8d78e17a370f276585edc8"
        ],
        [
            "apply Rle_lt_trans with r1; try assumption; rewrite <- H6; apply (H11 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "bfaba52c812e44abfcd2282b2649305e638a5c4e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "clear Hreci; simpl; apply (H21 (S i)).",
            "VernacExtend",
            "ec8edcbb1e88e4acea2a34789cbc4149626ee6d6"
        ],
        [
            "simpl; apply lt_S_n; assumption.",
            "VernacExtend",
            "3be1c0ea76eeb629587840639f44e5fec61613e5"
        ],
        [
            "unfold open_interval; apply H2.",
            "VernacExtend",
            "237ea5c2ed279393cb881af822a6de6df2d29127"
        ],
        [
            "elim H3; clear H3; intros; split.",
            "VernacExtend",
            "5dc24b95b4211b2a615c238df09f0d31458fa6d1"
        ],
        [
            "rewrite H9; change (forall i:nat, (i < pred (Rlength (cons r4 lf2)))%nat -> pos_Rl (cons r4 lf2) i <> pos_Rl (cons r4 lf2) (S i) \\/ f (pos_Rl (cons s1 (cons s2 s3)) (S i)) <> pos_Rl (cons r4 lf2) i) ; rewrite <- H5; apply H3.",
            "VernacExtend",
            "ec8c1f583d84a3ca3e49226f3789257e043e98e8"
        ],
        [
            "rewrite H5 in H11; intros; simpl in H12; induction i as [| i Hreci].",
            "VernacExtend",
            "dd1c60acf0662d35d74795899c0328a7be11986c"
        ],
        [
            "simpl; red; intro; rewrite H13 in H10; elim (Rlt_irrefl _ H10).",
            "VernacExtend",
            "1c0a3506886257373e9c222289246d97e534c6aa"
        ],
        [
            "clear Hreci; apply (H11 (S i)); simpl; apply H12.",
            "VernacExtend",
            "1c95ff35fcb77e158257797a6ab1b7e9f3b55ca5"
        ],
        [
            "rewrite H9; rewrite H10; rewrite H6; apply Rplus_eq_compat_l; rewrite <- H10; apply H0 with r1 b.",
            "VernacExtend",
            "82cf375687b74d3908c10cb936de0236ad50c1a7"
        ],
        [
            "unfold adapted_couple in H2; decompose [and] H2; clear H2; replace b with (Rmax a b).",
            "VernacExtend",
            "ea365866b30f7e15a9cad0efa628342be332e9c0"
        ],
        [
            "rewrite <- H12; apply RList_P7; [ assumption | simpl; right; left; reflexivity ].",
            "VernacExtend",
            "7597e383f5d3ef99c2b4f6a3c9afd1c21a4dd030"
        ],
        [
            "eapply StepFun_P7.",
            "VernacExtend",
            "33b9e829f78ebc0e6fda538d7b7d0b9c8da25cd6"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "unfold adapted_couple_opt; split.",
            "VernacExtend",
            "b514c53d08129ae7ccc903dacc4e9b868617a69c"
        ],
        [
            "apply StepFun_P7 with a a r3.",
            "VernacExtend",
            "96fecf8e7ea6f3872dd57beb74859724699324c7"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "unfold adapted_couple in H2, H; decompose [and] H2; decompose [and] H; clear H H2; assert (H20 : r = a).",
            "VernacExtend",
            "41db7c6f214cc9407770e65e2ec7feec0edad7c6"
        ],
        [
            "simpl in H13; rewrite H13; apply Hyp_min.",
            "VernacExtend",
            "558387d806e5f50771fb9da35b2f90d4afb3dccd"
        ],
        [
            "unfold adapted_couple; repeat split.",
            "VernacExtend",
            "dee488b658795c3af1007f2b0b4a6cde4366b22d"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H; induction i as [| i Hreci].",
            "VernacExtend",
            "234e72ada15437c8cf79e98c5be4032756839360"
        ],
        [
            "simpl; rewrite <- H20; apply (H11 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "83536cc38de501ad71de6368d44c4fc20c633ab8"
        ],
        [
            "rewrite H10; apply (H15 (S i)); simpl; assumption.",
            "VernacExtend",
            "9933251b2f6fc554f7c5b7b4a8fc3374548c3c1a"
        ],
        [
            "simpl; symmetry ; apply Hyp_min.",
            "VernacExtend",
            "00dca91949da0a20fba82fbea83349db28d1835c"
        ],
        [
            "rewrite <- H17; rewrite H10; reflexivity.",
            "VernacExtend",
            "a7f5cfc7476d1f215b0246611e61fcf7021aece2"
        ],
        [
            "simpl in H19; simpl; apply H19.",
            "VernacExtend",
            "66548736726405dfbde7668c8a529b2c30a7c8ba"
        ],
        [
            "intros; simpl in H; unfold constant_D_eq, open_interval; intros; induction i as [| i Hreci].",
            "VernacExtend",
            "37544428ea3379ade4fee5e09e63ea8eb0e2730a"
        ],
        [
            "simpl; apply (H16 0%nat).",
            "VernacExtend",
            "18b3014f98578dcd1d3e4aca979a442bf2408a40"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "simpl in H2; rewrite <- H20 in H2; unfold open_interval; simpl; apply H2.",
            "VernacExtend",
            "73eb7643bce22e38a5892c81bf537227cfcf5cda"
        ],
        [
            "clear Hreci; simpl; apply (H21 (S i)).",
            "VernacExtend",
            "ec8edcbb1e88e4acea2a34789cbc4149626ee6d6"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "rewrite <- H10; unfold open_interval; apply H2.",
            "VernacExtend",
            "05c48448c94103d8aa2f48127c890d2d81742876"
        ],
        [
            "elim H3; clear H3; intros; split.",
            "VernacExtend",
            "5dc24b95b4211b2a615c238df09f0d31458fa6d1"
        ],
        [
            "rewrite H5 in H3; intros; apply (H3 (S i)).",
            "VernacExtend",
            "fd8d8785ba83c27bc1d981a9d2f6e03f0e233820"
        ],
        [
            "simpl; replace (Rlength lf2) with (S (pred (Rlength lf2))).",
            "VernacExtend",
            "fc5179d46e471a5a699c1adbdec9257f41a660e5"
        ],
        [
            "apply lt_n_S; apply H12.",
            "VernacExtend",
            "1309581109e5bbe0f2c5ac274e09ae396700afec"
        ],
        [
            "symmetry ; apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H13 in H12; elim (lt_n_O _ H12).",
            "VernacExtend",
            "2068c0eb0b526bbf607104eb0bf609afc9c6d35e"
        ],
        [
            "intros; simpl in H12; rewrite H10; rewrite H5 in H11; apply (H11 (S i)); simpl; apply lt_n_S; apply H12.",
            "VernacExtend",
            "32fafe2afe1e680aee28a0ec76781e02c4eec9b0"
        ],
        [
            "simpl; rewrite H9; unfold Rminus; rewrite Rplus_opp_r; rewrite Rmult_0_r; rewrite Rplus_0_l; change (Int_SF lf1 (cons r1 r2) = Int_SF (cons r4 lf2) (cons s1 (cons s2 s3))) ; eapply H0.",
            "VernacExtend",
            "fd0aa1410918f9ec257aaac7d8f1372c5a04186d"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "2: rewrite H5 in H3; unfold adapted_couple_opt; split; assumption.",
            "VernacExtend",
            "374de633a315a34cedb6e8384b5a126adfb81076"
        ],
        [
            "assert (H10 : r = a).",
            "VernacExtend",
            "14ee8c06da776df939e9b2aad05b697d3c51fe84"
        ],
        [
            "unfold adapted_couple in H2; decompose [and] H2; clear H2; simpl in H12; rewrite H12; apply Hyp_min.",
            "VernacExtend",
            "228fb96652fce23c99200d63dc0c8b6e62fc5f07"
        ],
        [
            "rewrite <- H9; rewrite H10; apply StepFun_P7 with a r r3; [ apply H1 | pattern a at 2; rewrite <- H10; pattern r at 2; rewrite H9; apply H2 ].",
            "VernacExtend",
            "3a5c32d18c3048c30f9595b0682fcbccb19d372f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P15 : forall (f:R -> R) (l1 l2 lf1 lf2:Rlist) (a b:R), adapted_couple f a b l1 lf1 -> adapted_couple_opt f a b l2 lf2 -> Int_SF lf1 l1 = Int_SF lf2 l2.",
            "VernacStartTheoremProof",
            "610fe179604d377e83ee88dbb70374d383d3eaf2"
        ],
        [
            "intros; destruct (Rle_dec a b) as [Hle|Hnle]; [ apply (StepFun_P14 Hle H H0) | assert (H1 : b <= a); [ auto with real | eapply StepFun_P14; [ apply H1 | apply StepFun_P2; apply H | apply StepFun_P12; apply H0 ] ] ].",
            "VernacExtend",
            "1f2df9f87c6f80bc951c3ddef67b9b85e295c109"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P16 : forall (f:R -> R) (l lf:Rlist) (a b:R), adapted_couple f a b l lf -> exists l' : Rlist, (exists lf' : Rlist, adapted_couple_opt f a b l' lf').",
            "VernacStartTheoremProof",
            "20b8a0d8fe0fc6341289cc901df08c1868478510"
        ],
        [
            "intros; destruct (Rle_dec a b) as [Hle|Hnle]; [ apply (StepFun_P10 Hle H) | assert (H1 : b <= a); [ auto with real | assert (H2 := StepFun_P10 H1 (StepFun_P2 H)); elim H2; intros l' [lf' H3]; exists l'; exists lf'; apply StepFun_P12; assumption ] ].",
            "VernacExtend",
            "437c4a208bae77d9a1c7b71ed86ab7d89c4ded92"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P17 : forall (f:R -> R) (l1 l2 lf1 lf2:Rlist) (a b:R), adapted_couple f a b l1 lf1 -> adapted_couple f a b l2 lf2 -> Int_SF lf1 l1 = Int_SF lf2 l2.",
            "VernacStartTheoremProof",
            "a79e91829fb2b80bc2bab2c916f206133e030a08"
        ],
        [
            "intros; elim (StepFun_P16 H); intros l' [lf' H1]; rewrite (StepFun_P15 H H1); rewrite (StepFun_P15 H0 H1); reflexivity.",
            "VernacExtend",
            "9a04675bacecfbcd7cd510b0d0791eafa2cfaee6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P18 : forall a b c:R, RiemannInt_SF (mkStepFun (StepFun_P4 a b c)) = c * (b - a).",
            "VernacStartTheoremProof",
            "4eaee62746c23ad622aad439fa54d0578018a4c3"
        ],
        [
            "intros; unfold RiemannInt_SF; case (Rle_dec a b); intro.",
            "VernacExtend",
            "1b561ca7a7f16fd75bc6e2fe1c9d6bf5eb709bed"
        ],
        [
            "replace (Int_SF (subdivision_val (mkStepFun (StepFun_P4 a b c))) (subdivision (mkStepFun (StepFun_P4 a b c)))) with (Int_SF (cons c nil) (cons a (cons b nil))); [ simpl; ring | apply StepFun_P17 with (fct_cte c) a b; [ apply StepFun_P3; assumption | apply (StepFun_P1 (mkStepFun (StepFun_P4 a b c))) ] ].",
            "VernacExtend",
            "4f6bf0658a97efbe96a265a7c4bcc0a7e235b2a6"
        ],
        [
            "replace (Int_SF (subdivision_val (mkStepFun (StepFun_P4 a b c))) (subdivision (mkStepFun (StepFun_P4 a b c)))) with (Int_SF (cons c nil) (cons b (cons a nil))); [ simpl; ring | apply StepFun_P17 with (fct_cte c) a b; [ apply StepFun_P2; apply StepFun_P3; auto with real | apply (StepFun_P1 (mkStepFun (StepFun_P4 a b c))) ] ].",
            "VernacExtend",
            "f58b7cfbe2dfe8b268bb38effd8c1e58ad257528"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P19 : forall (l1:Rlist) (f g:R -> R) (l:R), Int_SF (FF l1 (fun x:R => f x + l * g x)) l1 = Int_SF (FF l1 f) l1 + l * Int_SF (FF l1 g) l1.",
            "VernacStartTheoremProof",
            "91fc324ed94ca9e119f9c218e87a191e845b59b0"
        ],
        [
            "intros; induction l1 as [| r l1 Hrecl1]; [ simpl; ring | induction l1 as [| r0 l1 Hrecl0]; simpl; [ ring | simpl in Hrecl1; rewrite Hrecl1; ring ] ].",
            "VernacExtend",
            "49e69caffaa7ede2af57962d3f362256353f6a31"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P20 : forall (l:Rlist) (f:R -> R), (0 < Rlength l)%nat -> Rlength l = S (Rlength (FF l f)).",
            "VernacStartTheoremProof",
            "12d5a76c2f3d7a1287109ce1b15c22b39781ba19"
        ],
        [
            "intros l f H; induction l; [ elim (lt_irrefl _ H) | simpl; rewrite RList_P18; rewrite RList_P14; reflexivity ].",
            "VernacExtend",
            "f1ca77fe85dfb166511fd73b657ea4b716c595ab"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P21 : forall (a b:R) (f:R -> R) (l:Rlist), is_subdivision f a b l -> adapted_couple f a b l (FF l f).",
            "VernacStartTheoremProof",
            "2a564640508467f078f21c37f6cc1d803390da39"
        ],
        [
            "intros * (x & H & H1 & H0 & H2 & H4).",
            "VernacExtend",
            "3cc6013815ae093fdcdf58a4f74c0eb39cfde76a"
        ],
        [
            "repeat split; try assumption.",
            "VernacExtend",
            "221a84919e803be5614ea6011742084cb77b34b6"
        ],
        [
            "apply StepFun_P20; rewrite H2; apply lt_O_Sn.",
            "VernacExtend",
            "8a9a44fd276ce5e9e35150b3c556164f13210ee9"
        ],
        [
            "intros; assert (H5 := H4 _ H3); unfold constant_D_eq, open_interval in H5; unfold constant_D_eq, open_interval; intros; induction l as [| r l Hrecl].",
            "VernacExtend",
            "60250f6903031aaf7f82829a4ff879f6a6494186"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "unfold FF; rewrite RList_P12.",
            "VernacExtend",
            "575bf513b3d8c4238cf390a90a192bc0ef10f457"
        ],
        [
            "simpl; change (f x0 = f (pos_Rl (mid_Rlist (cons r l) r) (S i))); rewrite RList_P13; try assumption; rewrite (H5 x0 H6); rewrite H5.",
            "VernacExtend",
            "1a4f2296f2196e6bb528e458f4cbfa25269c057e"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; elim H6; intros; apply Rlt_trans with x0; assumption | discrR ] ].",
            "VernacExtend",
            "e052ae203d773e40dd5378230cf7f63922bf7b06"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; rewrite (Rplus_comm (pos_Rl (cons r l) i)); apply Rplus_lt_compat_l; elim H6; intros; apply Rlt_trans with x0; assumption | discrR ] ].",
            "VernacExtend",
            "19b16d7897da0eb688a3a93246bd7bd921ccfb38"
        ],
        [
            "rewrite RList_P14; simpl in H3; apply H3.",
            "VernacExtend",
            "7878a4608a0ea69d6f5d7ee590401cf6165b63de"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P22 : forall (a b:R) (f g:R -> R) (lf lg:Rlist), a <= b -> is_subdivision f a b lf -> is_subdivision g a b lg -> is_subdivision f a b (cons_ORlist lf lg).",
            "VernacStartTheoremProof",
            "07c601ed4d92add1b6ece4ffdd31e28e51192f83"
        ],
        [
            "unfold is_subdivision; intros a b f g lf lg Hyp X X0; elim X; elim X0; clear X X0; intros lg0 p lf0 p0; assert (Hyp_min : Rmin a b = a).",
            "VernacExtend",
            "497edac2043a29f237d3fde2c44c2652db806254"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hyp; reflexivity.",
            "VernacExtend",
            "bbb26e2d82f221595c99bdec954b4094656d78c0"
        ],
        [
            "assert (Hyp_max : Rmax a b = b).",
            "VernacExtend",
            "c470a417994be9feb24bc20dad3712277aa7086b"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hyp; reflexivity.",
            "VernacExtend",
            "2fdad7a7f12df3b6f7fd85363d31da6b7459a437"
        ],
        [
            "apply existT with (FF (cons_ORlist lf lg) f); unfold adapted_couple in p, p0; decompose [and] p; decompose [and] p0; clear p p0; rewrite Hyp_min in H6; rewrite Hyp_min in H1; rewrite Hyp_max in H0; rewrite Hyp_max in H5; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "91d2b5177a1f13f72a455d59f21be04b48d52f22"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "rewrite Hyp_min; symmetry ; apply Rle_antisym.",
            "VernacExtend",
            "35e02c01d9e466f3e9f440f94493637737358516"
        ],
        [
            "induction lf as [| r lf Hreclf].",
            "VernacExtend",
            "6149c82bbdfc2d8e1b5d06fc76ea40b46caa71e5"
        ],
        [
            "simpl; right; symmetry ; assumption.",
            "VernacExtend",
            "bbe2937faf1394d0a97a5ccfad72e6e0b821f9b9"
        ],
        [
            "assert (H10 : In (pos_Rl (cons_ORlist (cons r lf) lg) 0) (cons_ORlist (cons r lf) lg)).",
            "VernacExtend",
            "5b6a76acc751340e47ad2cc6ddf53bdd7f93819c"
        ],
        [
            "elim (RList_P3 (cons_ORlist (cons r lf) lg) (pos_Rl (cons_ORlist (cons r lf) lg) 0)); intros _ H10; apply H10; exists 0%nat; split; [ reflexivity | rewrite RList_P11; simpl; apply lt_O_Sn ].",
            "VernacExtend",
            "987487b6cb7355ac11bc94c7706a613ae06d1d48"
        ],
        [
            "elim (RList_P9 (cons r lf) lg (pos_Rl (cons_ORlist (cons r lf) lg) 0)); intros H12 _; assert (H13 := H12 H10); elim H13; intro.",
            "VernacExtend",
            "e6adb0b3e9481ca69d4462bc50f3b14dd188fae4"
        ],
        [
            "elim (RList_P3 (cons r lf) (pos_Rl (cons_ORlist (cons r lf) lg) 0)); intros H11 _; assert (H14 := H11 H8); elim H14; intros; elim H15; clear H15; intros; rewrite H15; rewrite <- H6; elim (RList_P6 (cons r lf)); intros; apply H17; [ assumption | apply le_O_n | assumption ].",
            "VernacExtend",
            "f16c8b052d63c88dbb42c4b6b8c015b37e11f1cc"
        ],
        [
            "elim (RList_P3 lg (pos_Rl (cons_ORlist (cons r lf) lg) 0)); intros H11 _; assert (H14 := H11 H8); elim H14; intros; elim H15; clear H15; intros; rewrite H15; rewrite <- H1; elim (RList_P6 lg); intros; apply H17; [ assumption | apply le_O_n | assumption ].",
            "VernacExtend",
            "be08c43a8c33ccdd7f138d82f0a6ab0a00131f38"
        ],
        [
            "induction lf as [| r lf Hreclf].",
            "VernacExtend",
            "6149c82bbdfc2d8e1b5d06fc76ea40b46caa71e5"
        ],
        [
            "simpl; right; assumption.",
            "VernacExtend",
            "a8031ec86609226b9fbbdcd11c756beb70b5e141"
        ],
        [
            "assert (H8 : In a (cons_ORlist (cons r lf) lg)).",
            "VernacExtend",
            "e93836c4455fe1061a51fe26e6d3f50f0f0c8e4b"
        ],
        [
            "elim (RList_P9 (cons r lf) lg a); intros; apply H10; left; elim (RList_P3 (cons r lf) a); intros; apply H12; exists 0%nat; split; [ symmetry ; assumption | simpl; apply lt_O_Sn ].",
            "VernacExtend",
            "2cd8de4b1fd9c8eba54088fe81808304887a838f"
        ],
        [
            "apply RList_P5; [ apply RList_P2; assumption | assumption ].",
            "VernacExtend",
            "97a68c784e76247902b3d258339a2da6566b47af"
        ],
        [
            "rewrite Hyp_max; apply Rle_antisym.",
            "VernacExtend",
            "2808039e2b559ca8009f686d16fc229dc39cd5d2"
        ],
        [
            "induction lf as [| r lf Hreclf].",
            "VernacExtend",
            "6149c82bbdfc2d8e1b5d06fc76ea40b46caa71e5"
        ],
        [
            "simpl; right; assumption.",
            "VernacExtend",
            "a8031ec86609226b9fbbdcd11c756beb70b5e141"
        ],
        [
            "assert (H8 : In (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg)))) (cons_ORlist (cons r lf) lg)).",
            "VernacExtend",
            "449968397d81339215583bf01726d6a292733932"
        ],
        [
            "elim (RList_P3 (cons_ORlist (cons r lf) lg) (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg))))); intros _ H10; apply H10; exists (pred (Rlength (cons_ORlist (cons r lf) lg))); split; [ reflexivity | rewrite RList_P11; simpl; apply lt_n_Sn ].",
            "VernacExtend",
            "22ab163855d119f01bfadbf7ad2eeb12b59545ee"
        ],
        [
            "elim (RList_P9 (cons r lf) lg (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg))))); intros H10 _.",
            "VernacExtend",
            "f462dc2cbabb9a5e465326c8b43a34fe44f262e2"
        ],
        [
            "assert (H11 := H10 H8); elim H11; intro.",
            "VernacExtend",
            "f70443ad56b67e4a99657dcb7f3aa10e11bd3ac9"
        ],
        [
            "elim (RList_P3 (cons r lf) (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg))))); intros H13 _; assert (H14 := H13 H12); elim H14; intros; elim H15; clear H15; intros; rewrite H15; rewrite <- H5; elim (RList_P6 (cons r lf)); intros; apply H17; [ assumption | simpl; simpl in H14; apply lt_n_Sm_le; assumption | simpl; apply lt_n_Sn ].",
            "VernacExtend",
            "8f8946909678c95eed5a5e7f3fc7316645493946"
        ],
        [
            "elim (RList_P3 lg (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg))))); intros H13 _; assert (H14 := H13 H12); elim H14; intros; elim H15; clear H15; intros.",
            "VernacExtend",
            "8363a5c081074bad1adef8120240170ee3a5309e"
        ],
        [
            "rewrite H15; assert (H17 : Rlength lg = S (pred (Rlength lg))).",
            "VernacExtend",
            "10ac695bf9d720dacba54d250993e22431b49a0a"
        ],
        [
            "apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H17 in H16; elim (lt_n_O _ H16).",
            "VernacExtend",
            "ed893b518a5be5f84ca9299a2413036fd99beaab"
        ],
        [
            "rewrite <- H0; elim (RList_P6 lg); intros; apply H18; [ assumption | rewrite H17 in H16; apply lt_n_Sm_le; assumption | apply lt_pred_n_n; rewrite H17; apply lt_O_Sn ].",
            "VernacExtend",
            "3957b6bc1d1f73edeccfb96a0e8f4909540564b8"
        ],
        [
            "induction lf as [| r lf Hreclf].",
            "VernacExtend",
            "6149c82bbdfc2d8e1b5d06fc76ea40b46caa71e5"
        ],
        [
            "simpl; right; symmetry ; assumption.",
            "VernacExtend",
            "bbe2937faf1394d0a97a5ccfad72e6e0b821f9b9"
        ],
        [
            "assert (H8 : In b (cons_ORlist (cons r lf) lg)).",
            "VernacExtend",
            "8c6caaafe033a53c8f694e8467acecb14d5e8be1"
        ],
        [
            "elim (RList_P9 (cons r lf) lg b); intros; apply H10; left; elim (RList_P3 (cons r lf) b); intros; apply H12; exists (pred (Rlength (cons r lf))); split; [ symmetry ; assumption | simpl; apply lt_n_Sn ].",
            "VernacExtend",
            "c4cbd014432b780d437a2c4bbb5f640c42b84122"
        ],
        [
            "apply RList_P7; [ apply RList_P2; assumption | assumption ].",
            "VernacExtend",
            "61de751af2823d2a522ca9c6288ad0d42aa3a433"
        ],
        [
            "apply StepFun_P20; rewrite RList_P11; rewrite H2; rewrite H7; simpl; apply lt_O_Sn.",
            "VernacExtend",
            "16f5fe3c3882a6094fe0b24a768f31d32eb2dc59"
        ],
        [
            "intros; unfold constant_D_eq, open_interval; intros; cut (exists l : R, constant_D_eq f (open_interval (pos_Rl (cons_ORlist lf lg) i) (pos_Rl (cons_ORlist lf lg) (S i))) l).",
            "VernacExtend",
            "3b32244b2fcd169d5f9b127339ded05f1f24fd4b"
        ],
        [
            "intros; elim H11; clear H11; intros; assert (H12 := H11); assert (Hyp_cons : exists r : R, (exists r0 : Rlist, cons_ORlist lf lg = cons r r0)).",
            "VernacExtend",
            "7821a429e975e9d7ab4b1910a51637e7825e9ec6"
        ],
        [
            "apply RList_P19; red; intro; rewrite H13 in H8; elim (lt_n_O _ H8).",
            "VernacExtend",
            "d2842cf4dec6b84f3a6f4b0daf9bc13e5059a817"
        ],
        [
            "elim Hyp_cons; clear Hyp_cons; intros r [r0 Hyp_cons]; rewrite Hyp_cons; unfold FF; rewrite RList_P12.",
            "VernacExtend",
            "5f6da54c9ce712995c6881fea5420cf2aa334257"
        ],
        [
            "change (f x = f (pos_Rl (mid_Rlist (cons r r0) r) (S i))); rewrite <- Hyp_cons; rewrite RList_P13.",
            "VernacExtend",
            "f2ece283ce7a4a691749b1c7ebbaa11216bde2c3"
        ],
        [
            "assert (H13 := RList_P2 _ _ H _ H8); elim H13; intro.",
            "VernacExtend",
            "516fca61f00a1e7a3cd24f3b98e4efd28cdcf56f"
        ],
        [
            "unfold constant_D_eq, open_interval in H11, H12; rewrite (H11 x H10); assert (H15 : pos_Rl (cons_ORlist lf lg) i < (pos_Rl (cons_ORlist lf lg) i + pos_Rl (cons_ORlist lf lg) (S i)) / 2 < pos_Rl (cons_ORlist lf lg) (S i)).",
            "VernacExtend",
            "76fcaafc28b0d13e834b836d6e1d0852d09b911e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "35b716538dd20af83cfdc7d9e6694d744aa20b44"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; rewrite (Rplus_comm (pos_Rl (cons_ORlist lf lg) i)); apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "a371810b1989d3df868f72f70310b24fc72b0732"
        ],
        [
            "rewrite (H11 _ H15); reflexivity.",
            "VernacExtend",
            "d75177e2f872b5acaa9c431ef2cd7023fe58bb3a"
        ],
        [
            "elim H10; intros; rewrite H14 in H15; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H16 H15)).",
            "VernacExtend",
            "8fcf43647ad1b1062fbd9da8b44b8743143a2fec"
        ],
        [
            "apply H8.",
            "VernacExtend",
            "2014720df0411c2963f20792fe424080d05f44aa"
        ],
        [
            "rewrite RList_P14; rewrite Hyp_cons in H8; simpl in H8; apply H8.",
            "VernacExtend",
            "df4707cfa8708d47db1d0a6d6367436ead87bf23"
        ],
        [
            "assert (H11 : a < b).",
            "VernacExtend",
            "ddda989c55fbfe46e2b57a04a794b3b8c4b9e895"
        ],
        [
            "apply Rle_lt_trans with (pos_Rl (cons_ORlist lf lg) i).",
            "VernacExtend",
            "93ad667d535c36545d18140fd94249cd062a02db"
        ],
        [
            "rewrite <- H6; rewrite <- (RList_P15 lf lg).",
            "VernacExtend",
            "c8a4f742a9c1f03af8208bf9bc74e9b5167dba70"
        ],
        [
            "elim (RList_P6 (cons_ORlist lf lg)); intros; apply H11.",
            "VernacExtend",
            "14ddc08f96045747b595cf7bb6d1539a9ddbc8e3"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "apply lt_trans with (pred (Rlength (cons_ORlist lf lg))); [ assumption | apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H13 in H8; elim (lt_n_O _ H8) ].",
            "VernacExtend",
            "ebfa967ffc027078470c77756eda9c76c71c891e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H1; assumption.",
            "VernacExtend",
            "a180060008c5b8490d4218e0dc10b9c81648ffb3"
        ],
        [
            "apply Rlt_le_trans with (pos_Rl (cons_ORlist lf lg) (S i)).",
            "VernacExtend",
            "8d3ad6269ee31990375061ea51ee9f17ff75768f"
        ],
        [
            "elim H10; intros; apply Rlt_trans with x; assumption.",
            "VernacExtend",
            "301ee47bc2db5f1c7dc3a341bc2b05691fe37993"
        ],
        [
            "rewrite <- H5; rewrite <- (RList_P16 lf lg); try assumption.",
            "VernacExtend",
            "5bf86da9793a9efcb8ddfbd2b43e87a7954be8a8"
        ],
        [
            "elim (RList_P6 (cons_ORlist lf lg)); intros; apply H11.",
            "VernacExtend",
            "14ddc08f96045747b595cf7bb6d1539a9ddbc8e3"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "apply lt_n_Sm_le; apply lt_n_S; assumption.",
            "VernacExtend",
            "8948051b4a89e2b5da4b24dca045bd1007f6c7b2"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H13 in H8; elim (lt_n_O _ H8).",
            "VernacExtend",
            "69583036fbc85e9fcdfd1358a4371cc28bf901a0"
        ],
        [
            "rewrite H0; assumption.",
            "VernacExtend",
            "cf7550252536b17f18403494a618a701c9c9ed30"
        ],
        [
            "set (I := fun j:nat => pos_Rl lf j <= pos_Rl (cons_ORlist lf lg) i /\\ (j < Rlength lf)%nat); assert (H12 : Nbound I).",
            "VernacExtend",
            "5bbd97e6299eb9416608205eaafcdac68b76581d"
        ],
        [
            "unfold Nbound; exists (Rlength lf); intros; unfold I in H12; elim H12; intros; apply lt_le_weak; assumption.",
            "VernacExtend",
            "87de2ddea904c6b30d9041e9fef53d556f22d2eb"
        ],
        [
            "assert (H13 : exists n : nat, I n).",
            "VernacExtend",
            "e83e4a79e8841ec2f1c2812b3195b7f7b6382f64"
        ],
        [
            "exists 0%nat; unfold I; split.",
            "VernacExtend",
            "0c2219c6d6997bf4ee6d9f12d3f905a5ebc9bbf5"
        ],
        [
            "apply Rle_trans with (pos_Rl (cons_ORlist lf lg) 0).",
            "VernacExtend",
            "5bb491af9fa903a4013a449a52faf8d0977eda28"
        ],
        [
            "right; symmetry .",
            "VernacExtend",
            "281ccc7db10c0aed3bc7f1760d8b8bf0a8dafac3"
        ],
        [
            "apply RList_P15; try assumption; rewrite H1; assumption.",
            "VernacExtend",
            "41edc3f6e98af7366c6ae108c89069f65b022774"
        ],
        [
            "elim (RList_P6 (cons_ORlist lf lg)); intros; apply H13.",
            "VernacExtend",
            "5b7c6dd0741462911781b757eaf1ea5bca319435"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "apply lt_trans with (pred (Rlength (cons_ORlist lf lg))).",
            "VernacExtend",
            "555078e0041bf62ac3ef12fb92ea7fa191ec5157"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H15 in H8; elim (lt_n_O _ H8).",
            "VernacExtend",
            "6773c7eeb9439b9845fd39d9786427b72e4187a1"
        ],
        [
            "apply neq_O_lt; red; intro; rewrite <- H13 in H5; rewrite <- H6 in H11; rewrite <- H5 in H11; elim (Rlt_irrefl _ H11).",
            "VernacExtend",
            "3a2c455d3907ef5f38e1ebfc9a9a4a5ce6031a59"
        ],
        [
            "assert (H14 := Nzorn H13 H12); elim H14; clear H14; intros x0 H14; exists (pos_Rl lf0 x0); unfold constant_D_eq, open_interval; intros; assert (H16 := H9 x0); assert (H17 : (x0 < pred (Rlength lf))%nat).",
            "VernacExtend",
            "aec98a16fcc554be70c0d150ded4a1b141b185f5"
        ],
        [
            "elim H14; clear H14; intros; unfold I in H14; elim H14; clear H14; intros; apply lt_S_n; replace (S (pred (Rlength lf))) with (Rlength lf).",
            "VernacExtend",
            "8550f90f180a74ba19e38a8dbaac2f5b90b8e537"
        ],
        [
            "inversion H18.",
            "VernacExtend",
            "00808f2d139c678cdae48c4bc05996ee750dba43"
        ],
        [
            "2: apply lt_n_S; assumption.",
            "VernacExtend",
            "d27da2fe8fbdeafdafffd6c90ee0162941e0429a"
        ],
        [
            "cut (x0 = pred (Rlength lf)).",
            "VernacExtend",
            "d4cdf79f3a8c20a3f78a6dd740c0dc2ec7c11637"
        ],
        [
            "intro; rewrite H19 in H14; rewrite H5 in H14; cut (pos_Rl (cons_ORlist lf lg) i < b).",
            "VernacExtend",
            "eefd14671014f0b72ef7fc965026c2d22983be69"
        ],
        [
            "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H14 H21)).",
            "VernacExtend",
            "8bed1488fdce59fff393bc6402860517b823a7f8"
        ],
        [
            "apply Rlt_le_trans with (pos_Rl (cons_ORlist lf lg) (S i)).",
            "VernacExtend",
            "8d3ad6269ee31990375061ea51ee9f17ff75768f"
        ],
        [
            "elim H10; intros; apply Rlt_trans with x; assumption.",
            "VernacExtend",
            "301ee47bc2db5f1c7dc3a341bc2b05691fe37993"
        ],
        [
            "rewrite <- H5; apply Rle_trans with (pos_Rl (cons_ORlist lf lg) (pred (Rlength (cons_ORlist lf lg)))).",
            "VernacExtend",
            "ae543a3af848bc6803afca8677548e42b3f7b940"
        ],
        [
            "elim (RList_P6 (cons_ORlist lf lg)); intros; apply H21.",
            "VernacExtend",
            "3842f657851f96df689599df8b6b04486ad5165f"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "apply lt_n_Sm_le; apply lt_n_S; assumption.",
            "VernacExtend",
            "8948051b4a89e2b5da4b24dca045bd1007f6c7b2"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H23 in H8; elim (lt_n_O _ H8).",
            "VernacExtend",
            "58ed1077596e1a2af85148d896996b798c9a3460"
        ],
        [
            "right; apply RList_P16; try assumption; rewrite H0; assumption.",
            "VernacExtend",
            "c544ca9a7edf67d8d6b84e7c996159ad22045e50"
        ],
        [
            "rewrite <- H20; reflexivity.",
            "VernacExtend",
            "4826a5f04a538862025344732d26ed031722e965"
        ],
        [
            "apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H19 in H18; elim (lt_n_O _ H18).",
            "VernacExtend",
            "d72d9964f06d9df6d9d6687b17cca36a68dd5d79"
        ],
        [
            "assert (H18 := H16 H17); unfold constant_D_eq, open_interval in H18; rewrite (H18 x1).",
            "VernacExtend",
            "349820cc976d5f49ee0c0b90c936b660430a8e98"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "elim H15; clear H15; intros; elim H14; clear H14; intros; unfold I in H14; elim H14; clear H14; intros; split.",
            "VernacExtend",
            "961f55366b55507fcb5ced85c90dc293058977df"
        ],
        [
            "apply Rle_lt_trans with (pos_Rl (cons_ORlist lf lg) i); assumption.",
            "VernacExtend",
            "c40acb75708b70e8d373f377f1817fbcce723624"
        ],
        [
            "apply Rlt_le_trans with (pos_Rl (cons_ORlist lf lg) (S i)); try assumption.",
            "VernacExtend",
            "7180d540fae0ec6612f6e668386df700dbeb6c3d"
        ],
        [
            "assert (H22 : (S x0 < Rlength lf)%nat).",
            "VernacExtend",
            "c5f0ab86cf47e447716128532233caa78b64ec37"
        ],
        [
            "replace (Rlength lf) with (S (pred (Rlength lf))); [ apply lt_n_S; assumption | symmetry ; apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H22 in H21; elim (lt_n_O _ H21) ].",
            "VernacExtend",
            "65512575ea16106d7417bf9833983bb72c34ad2a"
        ],
        [
            "elim (Rle_dec (pos_Rl lf (S x0)) (pos_Rl (cons_ORlist lf lg) i)); intro a0.",
            "VernacExtend",
            "3f9558d4fe228805d3be122d18a74e9349375435"
        ],
        [
            "assert (H23 : (S x0 <= x0)%nat).",
            "VernacExtend",
            "014a76d019da1443343b666a5da76a2304831a67"
        ],
        [
            "apply H20; unfold I; split; assumption.",
            "VernacExtend",
            "ff568167b5d6b126a0b91a0f679846de74a1368e"
        ],
        [
            "elim (le_Sn_n _ H23).",
            "VernacExtend",
            "f72bbea24e3a2035ac8b47862f85747e7bc96fb7"
        ],
        [
            "assert (H23 : pos_Rl (cons_ORlist lf lg) i < pos_Rl lf (S x0)).",
            "VernacExtend",
            "729e6288f6f73ef566a7358d14d9984bf908722a"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "clear a0; apply RList_P17; try assumption.",
            "VernacExtend",
            "ab9a244ac8c6a5fcfdb6dab739e3cc674d9c5a2b"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "elim (RList_P9 lf lg (pos_Rl lf (S x0))); intros; apply H25; left; elim (RList_P3 lf (pos_Rl lf (S x0))); intros; apply H27; exists (S x0); split; [ reflexivity | apply H22 ].",
            "VernacExtend",
            "bc55c32c30159ac03c1a72eabb681ab949a9bbe2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P23 : forall (a b:R) (f g:R -> R) (lf lg:Rlist), is_subdivision f a b lf -> is_subdivision g a b lg -> is_subdivision f a b (cons_ORlist lf lg).",
            "VernacStartTheoremProof",
            "51e59f91b9f4ddf99fb5283a46fed129d352f71c"
        ],
        [
            "intros; case (Rle_dec a b); intro; [ apply StepFun_P22 with g; assumption | apply StepFun_P5; apply StepFun_P22 with g; [ auto with real | apply StepFun_P5; assumption | apply StepFun_P5; assumption ] ].",
            "VernacExtend",
            "3484fdbeb95ca60e551df915bed0f7c0dcc5c821"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P24 : forall (a b:R) (f g:R -> R) (lf lg:Rlist), a <= b -> is_subdivision f a b lf -> is_subdivision g a b lg -> is_subdivision g a b (cons_ORlist lf lg).",
            "VernacStartTheoremProof",
            "52653c8fff2cf5c5dc35826b3619a178a9ac26da"
        ],
        [
            "unfold is_subdivision; intros a b f g lf lg Hyp X X0; elim X; elim X0; clear X X0; intros lg0 p lf0 p0; assert (Hyp_min : Rmin a b = a).",
            "VernacExtend",
            "497edac2043a29f237d3fde2c44c2652db806254"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with Hyp; reflexivity.",
            "VernacExtend",
            "bbb26e2d82f221595c99bdec954b4094656d78c0"
        ],
        [
            "assert (Hyp_max : Rmax a b = b).",
            "VernacExtend",
            "c470a417994be9feb24bc20dad3712277aa7086b"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with Hyp; reflexivity.",
            "VernacExtend",
            "2fdad7a7f12df3b6f7fd85363d31da6b7459a437"
        ],
        [
            "apply existT with (FF (cons_ORlist lf lg) g); unfold adapted_couple in p, p0; decompose [and] p; decompose [and] p0; clear p p0; rewrite Hyp_min in H1; rewrite Hyp_min in H6; rewrite Hyp_max in H0; rewrite Hyp_max in H5; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "3e6280a7b5187bd8cd1790b4e623fc407f696cc4"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "rewrite Hyp_min; symmetry ; apply Rle_antisym.",
            "VernacExtend",
            "35e02c01d9e466f3e9f440f94493637737358516"
        ],
        [
            "induction lf as [| r lf Hreclf].",
            "VernacExtend",
            "6149c82bbdfc2d8e1b5d06fc76ea40b46caa71e5"
        ],
        [
            "simpl; right; symmetry ; assumption.",
            "VernacExtend",
            "bbe2937faf1394d0a97a5ccfad72e6e0b821f9b9"
        ],
        [
            "assert (H10 : In (pos_Rl (cons_ORlist (cons r lf) lg) 0) (cons_ORlist (cons r lf) lg)).",
            "VernacExtend",
            "5b6a76acc751340e47ad2cc6ddf53bdd7f93819c"
        ],
        [
            "elim (RList_P3 (cons_ORlist (cons r lf) lg) (pos_Rl (cons_ORlist (cons r lf) lg) 0)); intros _ H10; apply H10; exists 0%nat; split; [ reflexivity | rewrite RList_P11; simpl; apply lt_O_Sn ].",
            "VernacExtend",
            "987487b6cb7355ac11bc94c7706a613ae06d1d48"
        ],
        [
            "elim (RList_P9 (cons r lf) lg (pos_Rl (cons_ORlist (cons r lf) lg) 0)); intros H12 _; assert (H13 := H12 H10); elim H13; intro.",
            "VernacExtend",
            "e6adb0b3e9481ca69d4462bc50f3b14dd188fae4"
        ],
        [
            "elim (RList_P3 (cons r lf) (pos_Rl (cons_ORlist (cons r lf) lg) 0)); intros H11 _; assert (H14 := H11 H8); elim H14; intros; elim H15; clear H15; intros; rewrite H15; rewrite <- H6; elim (RList_P6 (cons r lf)); intros; apply H17; [ assumption | apply le_O_n | assumption ].",
            "VernacExtend",
            "f16c8b052d63c88dbb42c4b6b8c015b37e11f1cc"
        ],
        [
            "elim (RList_P3 lg (pos_Rl (cons_ORlist (cons r lf) lg) 0)); intros H11 _; assert (H14 := H11 H8); elim H14; intros; elim H15; clear H15; intros; rewrite H15; rewrite <- H1; elim (RList_P6 lg); intros; apply H17; [ assumption | apply le_O_n | assumption ].",
            "VernacExtend",
            "be08c43a8c33ccdd7f138d82f0a6ab0a00131f38"
        ],
        [
            "induction lf as [| r lf Hreclf].",
            "VernacExtend",
            "6149c82bbdfc2d8e1b5d06fc76ea40b46caa71e5"
        ],
        [
            "simpl; right; assumption.",
            "VernacExtend",
            "a8031ec86609226b9fbbdcd11c756beb70b5e141"
        ],
        [
            "assert (H8 : In a (cons_ORlist (cons r lf) lg)).",
            "VernacExtend",
            "e93836c4455fe1061a51fe26e6d3f50f0f0c8e4b"
        ],
        [
            "elim (RList_P9 (cons r lf) lg a); intros; apply H10; left; elim (RList_P3 (cons r lf) a); intros; apply H12; exists 0%nat; split; [ symmetry ; assumption | simpl; apply lt_O_Sn ].",
            "VernacExtend",
            "2cd8de4b1fd9c8eba54088fe81808304887a838f"
        ],
        [
            "apply RList_P5; [ apply RList_P2; assumption | assumption ].",
            "VernacExtend",
            "97a68c784e76247902b3d258339a2da6566b47af"
        ],
        [
            "rewrite Hyp_max; apply Rle_antisym.",
            "VernacExtend",
            "2808039e2b559ca8009f686d16fc229dc39cd5d2"
        ],
        [
            "induction lf as [| r lf Hreclf].",
            "VernacExtend",
            "6149c82bbdfc2d8e1b5d06fc76ea40b46caa71e5"
        ],
        [
            "simpl; right; assumption.",
            "VernacExtend",
            "a8031ec86609226b9fbbdcd11c756beb70b5e141"
        ],
        [
            "assert (H8 : In (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg)))) (cons_ORlist (cons r lf) lg)).",
            "VernacExtend",
            "449968397d81339215583bf01726d6a292733932"
        ],
        [
            "elim (RList_P3 (cons_ORlist (cons r lf) lg) (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg))))); intros _ H10; apply H10; exists (pred (Rlength (cons_ORlist (cons r lf) lg))); split; [ reflexivity | rewrite RList_P11; simpl; apply lt_n_Sn ].",
            "VernacExtend",
            "22ab163855d119f01bfadbf7ad2eeb12b59545ee"
        ],
        [
            "elim (RList_P9 (cons r lf) lg (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg))))); intros H10 _; assert (H11 := H10 H8); elim H11; intro.",
            "VernacExtend",
            "cb446f6496518d95e94197cb98afb075243acd3e"
        ],
        [
            "elim (RList_P3 (cons r lf) (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg))))); intros H13 _; assert (H14 := H13 H12); elim H14; intros; elim H15; clear H15; intros; rewrite H15; rewrite <- H5; elim (RList_P6 (cons r lf)); intros; apply H17; [ assumption | simpl; simpl in H14; apply lt_n_Sm_le; assumption | simpl; apply lt_n_Sn ].",
            "VernacExtend",
            "8f8946909678c95eed5a5e7f3fc7316645493946"
        ],
        [
            "elim (RList_P3 lg (pos_Rl (cons_ORlist (cons r lf) lg) (pred (Rlength (cons_ORlist (cons r lf) lg))))); intros H13 _; assert (H14 := H13 H12); elim H14; intros; elim H15; clear H15; intros; rewrite H15; assert (H17 : Rlength lg = S (pred (Rlength lg))).",
            "VernacExtend",
            "ca6ce3c2bb78d52adf931f541cb48b346c6af380"
        ],
        [
            "apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H17 in H16; elim (lt_n_O _ H16).",
            "VernacExtend",
            "ed893b518a5be5f84ca9299a2413036fd99beaab"
        ],
        [
            "rewrite <- H0; elim (RList_P6 lg); intros; apply H18; [ assumption | rewrite H17 in H16; apply lt_n_Sm_le; assumption | apply lt_pred_n_n; rewrite H17; apply lt_O_Sn ].",
            "VernacExtend",
            "3957b6bc1d1f73edeccfb96a0e8f4909540564b8"
        ],
        [
            "induction lf as [| r lf Hreclf].",
            "VernacExtend",
            "6149c82bbdfc2d8e1b5d06fc76ea40b46caa71e5"
        ],
        [
            "simpl; right; symmetry ; assumption.",
            "VernacExtend",
            "bbe2937faf1394d0a97a5ccfad72e6e0b821f9b9"
        ],
        [
            "assert (H8 : In b (cons_ORlist (cons r lf) lg)).",
            "VernacExtend",
            "8c6caaafe033a53c8f694e8467acecb14d5e8be1"
        ],
        [
            "elim (RList_P9 (cons r lf) lg b); intros; apply H10; left; elim (RList_P3 (cons r lf) b); intros; apply H12; exists (pred (Rlength (cons r lf))); split; [ symmetry ; assumption | simpl; apply lt_n_Sn ].",
            "VernacExtend",
            "c4cbd014432b780d437a2c4bbb5f640c42b84122"
        ],
        [
            "apply RList_P7; [ apply RList_P2; assumption | assumption ].",
            "VernacExtend",
            "61de751af2823d2a522ca9c6288ad0d42aa3a433"
        ],
        [
            "apply StepFun_P20; rewrite RList_P11; rewrite H7; rewrite H2; simpl; apply lt_O_Sn.",
            "VernacExtend",
            "5bbf970ba826f99bce2f973b0e7bb4e51aced1e3"
        ],
        [
            "unfold constant_D_eq, open_interval; intros; cut (exists l : R, constant_D_eq g (open_interval (pos_Rl (cons_ORlist lf lg) i) (pos_Rl (cons_ORlist lf lg) (S i))) l).",
            "VernacExtend",
            "233fd4cc40da3b5840b6df4276412eff0b7f040c"
        ],
        [
            "intros; elim H11; clear H11; intros; assert (H12 := H11); assert (Hyp_cons : exists r : R, (exists r0 : Rlist, cons_ORlist lf lg = cons r r0)).",
            "VernacExtend",
            "7821a429e975e9d7ab4b1910a51637e7825e9ec6"
        ],
        [
            "apply RList_P19; red; intro; rewrite H13 in H8; elim (lt_n_O _ H8).",
            "VernacExtend",
            "d2842cf4dec6b84f3a6f4b0daf9bc13e5059a817"
        ],
        [
            "elim Hyp_cons; clear Hyp_cons; intros r [r0 Hyp_cons]; rewrite Hyp_cons; unfold FF; rewrite RList_P12.",
            "VernacExtend",
            "5f6da54c9ce712995c6881fea5420cf2aa334257"
        ],
        [
            "change (g x = g (pos_Rl (mid_Rlist (cons r r0) r) (S i))); rewrite <- Hyp_cons; rewrite RList_P13.",
            "VernacExtend",
            "58fab2b711ec982acecc6981b4e793e848b800cf"
        ],
        [
            "assert (H13 := RList_P2 _ _ H _ H8); elim H13; intro.",
            "VernacExtend",
            "516fca61f00a1e7a3cd24f3b98e4efd28cdcf56f"
        ],
        [
            "unfold constant_D_eq, open_interval in H11, H12; rewrite (H11 x H10); assert (H15 : pos_Rl (cons_ORlist lf lg) i < (pos_Rl (cons_ORlist lf lg) i + pos_Rl (cons_ORlist lf lg) (S i)) / 2 < pos_Rl (cons_ORlist lf lg) (S i)).",
            "VernacExtend",
            "76fcaafc28b0d13e834b836d6e1d0852d09b911e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "35b716538dd20af83cfdc7d9e6694d744aa20b44"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; rewrite (Rplus_comm (pos_Rl (cons_ORlist lf lg) i)); apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "a371810b1989d3df868f72f70310b24fc72b0732"
        ],
        [
            "rewrite (H11 _ H15); reflexivity.",
            "VernacExtend",
            "d75177e2f872b5acaa9c431ef2cd7023fe58bb3a"
        ],
        [
            "elim H10; intros; rewrite H14 in H15; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H16 H15)).",
            "VernacExtend",
            "8fcf43647ad1b1062fbd9da8b44b8743143a2fec"
        ],
        [
            "apply H8.",
            "VernacExtend",
            "2014720df0411c2963f20792fe424080d05f44aa"
        ],
        [
            "rewrite RList_P14; rewrite Hyp_cons in H8; simpl in H8; apply H8.",
            "VernacExtend",
            "df4707cfa8708d47db1d0a6d6367436ead87bf23"
        ],
        [
            "assert (H11 : a < b).",
            "VernacExtend",
            "ddda989c55fbfe46e2b57a04a794b3b8c4b9e895"
        ],
        [
            "apply Rle_lt_trans with (pos_Rl (cons_ORlist lf lg) i).",
            "VernacExtend",
            "93ad667d535c36545d18140fd94249cd062a02db"
        ],
        [
            "rewrite <- H6; rewrite <- (RList_P15 lf lg); try assumption.",
            "VernacExtend",
            "292e671beabe0b9750fdcddd6b6fd2d2aeabba79"
        ],
        [
            "elim (RList_P6 (cons_ORlist lf lg)); intros; apply H11.",
            "VernacExtend",
            "14ddc08f96045747b595cf7bb6d1539a9ddbc8e3"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "apply lt_trans with (pred (Rlength (cons_ORlist lf lg))); [ assumption | apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H13 in H8; elim (lt_n_O _ H8) ].",
            "VernacExtend",
            "ebfa967ffc027078470c77756eda9c76c71c891e"
        ],
        [
            "rewrite H1; assumption.",
            "VernacExtend",
            "a180060008c5b8490d4218e0dc10b9c81648ffb3"
        ],
        [
            "apply Rlt_le_trans with (pos_Rl (cons_ORlist lf lg) (S i)).",
            "VernacExtend",
            "8d3ad6269ee31990375061ea51ee9f17ff75768f"
        ],
        [
            "elim H10; intros; apply Rlt_trans with x; assumption.",
            "VernacExtend",
            "301ee47bc2db5f1c7dc3a341bc2b05691fe37993"
        ],
        [
            "rewrite <- H5; rewrite <- (RList_P16 lf lg); try assumption.",
            "VernacExtend",
            "5bf86da9793a9efcb8ddfbd2b43e87a7954be8a8"
        ],
        [
            "elim (RList_P6 (cons_ORlist lf lg)); intros; apply H11.",
            "VernacExtend",
            "14ddc08f96045747b595cf7bb6d1539a9ddbc8e3"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "apply lt_n_Sm_le; apply lt_n_S; assumption.",
            "VernacExtend",
            "8948051b4a89e2b5da4b24dca045bd1007f6c7b2"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H13 in H8; elim (lt_n_O _ H8).",
            "VernacExtend",
            "69583036fbc85e9fcdfd1358a4371cc28bf901a0"
        ],
        [
            "rewrite H0; assumption.",
            "VernacExtend",
            "cf7550252536b17f18403494a618a701c9c9ed30"
        ],
        [
            "set (I := fun j:nat => pos_Rl lg j <= pos_Rl (cons_ORlist lf lg) i /\\ (j < Rlength lg)%nat); assert (H12 : Nbound I).",
            "VernacExtend",
            "01659bd1a6a2f5d56353f96fa5c02177e9727126"
        ],
        [
            "unfold Nbound; exists (Rlength lg); intros; unfold I in H12; elim H12; intros; apply lt_le_weak; assumption.",
            "VernacExtend",
            "791e196bde758397b00dd5de83ebb42def4d3c51"
        ],
        [
            "assert (H13 : exists n : nat, I n).",
            "VernacExtend",
            "e83e4a79e8841ec2f1c2812b3195b7f7b6382f64"
        ],
        [
            "exists 0%nat; unfold I; split.",
            "VernacExtend",
            "0c2219c6d6997bf4ee6d9f12d3f905a5ebc9bbf5"
        ],
        [
            "apply Rle_trans with (pos_Rl (cons_ORlist lf lg) 0).",
            "VernacExtend",
            "5bb491af9fa903a4013a449a52faf8d0977eda28"
        ],
        [
            "right; symmetry ; rewrite H1; rewrite <- H6; apply RList_P15; try assumption; rewrite H1; assumption.",
            "VernacExtend",
            "cb37d9cfb74a3856764996b87630edd78570d585"
        ],
        [
            "elim (RList_P6 (cons_ORlist lf lg)); intros; apply H13; [ apply RList_P2; assumption | apply le_O_n | apply lt_trans with (pred (Rlength (cons_ORlist lf lg))); [ assumption | apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H15 in H8; elim (lt_n_O _ H8) ] ].",
            "VernacExtend",
            "9dff1b3b1779e0571e0b6558eea58fc7a6b01349"
        ],
        [
            "apply neq_O_lt; red; intro; rewrite <- H13 in H0; rewrite <- H1 in H11; rewrite <- H0 in H11; elim (Rlt_irrefl _ H11).",
            "VernacExtend",
            "cfc1e9b6e2f85fbcbba6f907739cb1ef4bf734cd"
        ],
        [
            "assert (H14 := Nzorn H13 H12); elim H14; clear H14; intros x0 H14; exists (pos_Rl lg0 x0); unfold constant_D_eq, open_interval; intros; assert (H16 := H4 x0); assert (H17 : (x0 < pred (Rlength lg))%nat).",
            "VernacExtend",
            "f27fb5952adc034612f4f187b6f31abe2780aaa6"
        ],
        [
            "elim H14; clear H14; intros; unfold I in H14; elim H14; clear H14; intros; apply lt_S_n; replace (S (pred (Rlength lg))) with (Rlength lg).",
            "VernacExtend",
            "5795137a00277a59fb42af7f6ef087b35d01cea5"
        ],
        [
            "inversion H18.",
            "VernacExtend",
            "00808f2d139c678cdae48c4bc05996ee750dba43"
        ],
        [
            "2: apply lt_n_S; assumption.",
            "VernacExtend",
            "d27da2fe8fbdeafdafffd6c90ee0162941e0429a"
        ],
        [
            "cut (x0 = pred (Rlength lg)).",
            "VernacExtend",
            "0b6014165f1c1e242c48f59e9cdb3337edf761b2"
        ],
        [
            "intro; rewrite H19 in H14; rewrite H0 in H14; cut (pos_Rl (cons_ORlist lf lg) i < b).",
            "VernacExtend",
            "b424ee65dbedabe15a949aaa8f17dee241141fb3"
        ],
        [
            "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H14 H21)).",
            "VernacExtend",
            "8bed1488fdce59fff393bc6402860517b823a7f8"
        ],
        [
            "apply Rlt_le_trans with (pos_Rl (cons_ORlist lf lg) (S i)).",
            "VernacExtend",
            "8d3ad6269ee31990375061ea51ee9f17ff75768f"
        ],
        [
            "elim H10; intros; apply Rlt_trans with x; assumption.",
            "VernacExtend",
            "301ee47bc2db5f1c7dc3a341bc2b05691fe37993"
        ],
        [
            "rewrite <- H0; apply Rle_trans with (pos_Rl (cons_ORlist lf lg) (pred (Rlength (cons_ORlist lf lg)))).",
            "VernacExtend",
            "ddcad9a96bf224772aacf701c8f8b25f5d0fa20e"
        ],
        [
            "elim (RList_P6 (cons_ORlist lf lg)); intros; apply H21.",
            "VernacExtend",
            "3842f657851f96df689599df8b6b04486ad5165f"
        ],
        [
            "apply RList_P2; assumption.",
            "VernacExtend",
            "7a59ccfc5f597e810a834d7eb0c0b70e724ef6fc"
        ],
        [
            "apply lt_n_Sm_le; apply lt_n_S; assumption.",
            "VernacExtend",
            "8948051b4a89e2b5da4b24dca045bd1007f6c7b2"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H23 in H8; elim (lt_n_O _ H8).",
            "VernacExtend",
            "58ed1077596e1a2af85148d896996b798c9a3460"
        ],
        [
            "right; rewrite H0; rewrite <- H5; apply RList_P16; try assumption.",
            "VernacExtend",
            "4138fe45a04cbbf2e9ae73321e317a6f810a8b40"
        ],
        [
            "rewrite H0; assumption.",
            "VernacExtend",
            "cf7550252536b17f18403494a618a701c9c9ed30"
        ],
        [
            "rewrite <- H20; reflexivity.",
            "VernacExtend",
            "4826a5f04a538862025344732d26ed031722e965"
        ],
        [
            "apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H19 in H18; elim (lt_n_O _ H18).",
            "VernacExtend",
            "d72d9964f06d9df6d9d6687b17cca36a68dd5d79"
        ],
        [
            "assert (H18 := H16 H17); unfold constant_D_eq, open_interval in H18; rewrite (H18 x1).",
            "VernacExtend",
            "349820cc976d5f49ee0c0b90c936b660430a8e98"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "elim H15; clear H15; intros; elim H14; clear H14; intros; unfold I in H14; elim H14; clear H14; intros; split.",
            "VernacExtend",
            "961f55366b55507fcb5ced85c90dc293058977df"
        ],
        [
            "apply Rle_lt_trans with (pos_Rl (cons_ORlist lf lg) i); assumption.",
            "VernacExtend",
            "c40acb75708b70e8d373f377f1817fbcce723624"
        ],
        [
            "apply Rlt_le_trans with (pos_Rl (cons_ORlist lf lg) (S i)); try assumption.",
            "VernacExtend",
            "7180d540fae0ec6612f6e668386df700dbeb6c3d"
        ],
        [
            "assert (H22 : (S x0 < Rlength lg)%nat).",
            "VernacExtend",
            "d40a9e04d764abb1d99a220e9fea5345aece51e0"
        ],
        [
            "replace (Rlength lg) with (S (pred (Rlength lg))).",
            "VernacExtend",
            "e21e6f22216cceef12a8e4cc0fac4d4616875ec8"
        ],
        [
            "apply lt_n_S; assumption.",
            "VernacExtend",
            "38ef3ed0abee13dbc6e6b1aa6fcc165d558708ff"
        ],
        [
            "symmetry ; apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H22 in H21; elim (lt_n_O _ H21).",
            "VernacExtend",
            "e09a8b2f24ab1462dd45a12aa783f0dbb1f7057e"
        ],
        [
            "elim (Rle_dec (pos_Rl lg (S x0)) (pos_Rl (cons_ORlist lf lg) i)); intro a0.",
            "VernacExtend",
            "4e61849ee2b126a550421deaa2c387ce2c51a770"
        ],
        [
            "assert (H23 : (S x0 <= x0)%nat); [ apply H20; unfold I; split; assumption | elim (le_Sn_n _ H23) ].",
            "VernacExtend",
            "ee21b659ffac625cc78e1656f555f0b609b2100a"
        ],
        [
            "assert (H23 : pos_Rl (cons_ORlist lf lg) i < pos_Rl lg (S x0)).",
            "VernacExtend",
            "1a7967022636abdee229a31184ac5de65cb849c9"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "clear a0; apply RList_P17; try assumption; [ apply RList_P2; assumption | elim (RList_P9 lf lg (pos_Rl lg (S x0))); intros; apply H25; right; elim (RList_P3 lg (pos_Rl lg (S x0))); intros; apply H27; exists (S x0); split; [ reflexivity | apply H22 ] ].",
            "VernacExtend",
            "9d2bbafd6e9bb8aeeaa65c2fd2f8d7bbe4af388b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P25 : forall (a b:R) (f g:R -> R) (lf lg:Rlist), is_subdivision f a b lf -> is_subdivision g a b lg -> is_subdivision g a b (cons_ORlist lf lg).",
            "VernacStartTheoremProof",
            "e9264b1bae437b3c3bf954ba250209d85d1dced2"
        ],
        [
            "intros a b f g lf lg H H0; case (Rle_dec a b); intro; [ apply StepFun_P24 with f; assumption | apply StepFun_P5; apply StepFun_P24 with f; [ auto with real | apply StepFun_P5; assumption | apply StepFun_P5; assumption ] ].",
            "VernacExtend",
            "fb677439779654054e5e08cf1d08b19c777da8c2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P26 : forall (a b l:R) (f g:R -> R) (l1:Rlist), is_subdivision f a b l1 -> is_subdivision g a b l1 -> is_subdivision (fun x:R => f x + l * g x) a b l1.",
            "VernacStartTheoremProof",
            "5484a5b895ebbe520eb4277ea0cded5cab82f36d"
        ],
        [
            "intros a b l f g l1 (x0,(H0,(H1,(H2,(H3,H4))))) (x,(_,(_,(_,(_,H9))))).",
            "VernacExtend",
            "57c4bb854f2d9119d4d4aa7acd24f53bfad7df00"
        ],
        [
            "exists (FF l1 (fun x:R => f x + l * g x)); repeat split; try assumption.",
            "VernacExtend",
            "820cd8250703e578fc38e4323e71a1ed9bc83587"
        ],
        [
            "apply StepFun_P20; rewrite H3; auto with arith.",
            "VernacExtend",
            "fb96612c30960bb8fe36b1571d9f69432e22a2a1"
        ],
        [
            "intros i H8 x1 H10; unfold open_interval in H10, H9, H4; rewrite (H9 _ H8 _ H10); rewrite (H4 _ H8 _ H10); assert (H11 : l1 <> nil).",
            "VernacExtend",
            "ab907d049296eab789d9ed67fc873f70b07868d4"
        ],
        [
            "red; intro H11; rewrite H11 in H8; elim (lt_n_O _ H8).",
            "VernacExtend",
            "738063ffdc9d7be1270f06b2e74128b4e3ba10a9"
        ],
        [
            "destruct (RList_P19 _ H11) as (r,(r0,H12)); rewrite H12; unfold FF; change (pos_Rl x0 i + l * pos_Rl x i = pos_Rl (app_Rlist (mid_Rlist (cons r r0) r) (fun x2:R => f x2 + l * g x2)) (S i)); rewrite RList_P12.",
            "VernacExtend",
            "68b771cfc0201a2b4bde59452958de5d44f2c9c3"
        ],
        [
            "rewrite RList_P13.",
            "VernacExtend",
            "e51923c4eff4f02a7160f0f6ff97adb9c56cf2aa"
        ],
        [
            "rewrite <- H12; rewrite (H9 _ H8); try rewrite (H4 _ H8); reflexivity || (elim H10; clear H10; intros; split; [ apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; apply Rlt_trans with x1; assumption | discrR ] ] | apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; rewrite (Rplus_comm (pos_Rl l1 i)); apply Rplus_lt_compat_l; apply Rlt_trans with x1; assumption | discrR ] ] ]).",
            "VernacExtend",
            "5ebcdb58aff9758bc188808ff06658f6e2958054"
        ],
        [
            "rewrite <- H12; assumption.",
            "VernacExtend",
            "88ac94f05da3c391b5a354ee34ef3bc487185956"
        ],
        [
            "rewrite RList_P14; simpl; rewrite H12 in H8; simpl in H8; apply lt_n_S; apply H8.",
            "VernacExtend",
            "f9f074b8c25636c216fc93f056cb7c402cc4e4bf"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P27 : forall (a b l:R) (f g:R -> R) (lf lg:Rlist), is_subdivision f a b lf -> is_subdivision g a b lg -> is_subdivision (fun x:R => f x + l * g x) a b (cons_ORlist lf lg).",
            "VernacStartTheoremProof",
            "fcb3d8c4018cdd386067527c5ef528d5f50bd156"
        ],
        [
            "intros a b l f g lf lg H H0; apply StepFun_P26; [ apply StepFun_P23 with g; assumption | apply StepFun_P25 with f; assumption ].",
            "VernacExtend",
            "957113cafccc304fe338dffe5a120fc09eb6a96b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P28 : forall (a b l:R) (f g:StepFun a b), IsStepFun (fun x:R => f x + l * g x) a b.",
            "VernacStartTheoremProof",
            "62a88883694ea00e357fde826373bdaee5db1ead"
        ],
        [
            "intros a b l f g; unfold IsStepFun; assert (H := pre f); assert (H0 := pre g); unfold IsStepFun in H, H0; elim H; elim H0; intros; apply existT with (cons_ORlist x0 x); apply StepFun_P27; assumption.",
            "VernacExtend",
            "6ee716e8da5c64314042e7b5b0a16ed04c0790e7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P29 : forall (a b:R) (f:StepFun a b), is_subdivision f a b (subdivision f).",
            "VernacStartTheoremProof",
            "41615b31fb9906791cbb773d26934ff0a69ddca3"
        ],
        [
            "intros a b f; unfold is_subdivision; apply existT with (subdivision_val f); apply StepFun_P1.",
            "VernacExtend",
            "e5c8d57503f936220a825623423a6aa90be0ca28"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P30 : forall (a b l:R) (f g:StepFun a b), RiemannInt_SF (mkStepFun (StepFun_P28 l f g)) = RiemannInt_SF f + l * RiemannInt_SF g.",
            "VernacStartTheoremProof",
            "04f1d14c7003fcf410a20ef06e97e51dda1729d6"
        ],
        [
            "intros a b l f g; unfold RiemannInt_SF; case (Rle_dec a b); (intro; replace (Int_SF (subdivision_val (mkStepFun (StepFun_P28 l f g))) (subdivision (mkStepFun (StepFun_P28 l f g)))) with (Int_SF (FF (cons_ORlist (subdivision f) (subdivision g)) (fun x:R => f x + l * g x)) (cons_ORlist (subdivision f) (subdivision g))); [ rewrite StepFun_P19; replace (Int_SF (FF (cons_ORlist (subdivision f) (subdivision g)) f) (cons_ORlist (subdivision f) (subdivision g))) with (Int_SF (subdivision_val f) (subdivision f)); [ replace (Int_SF (FF (cons_ORlist (subdivision f) (subdivision g)) g) (cons_ORlist (subdivision f) (subdivision g))) with (Int_SF (subdivision_val g) (subdivision g)); [ ring | apply StepFun_P17 with (fe g) a b; [ apply StepFun_P1 | apply StepFun_P21; apply StepFun_P25 with (fe f); apply StepFun_P29 ] ] | apply StepFun_P17 with (fe f) a b; [ apply StepFun_P1 | apply StepFun_P21; apply StepFun_P23 with (fe g); apply StepFun_P29 ] ] | apply StepFun_P17 with (fun x:R => f x + l * g x) a b; [ apply StepFun_P21; apply StepFun_P27; apply StepFun_P29 | apply (StepFun_P1 (mkStepFun (StepFun_P28 l f g))) ] ]).",
            "VernacExtend",
            "546e5a63073444faffa4c2c21741387af1548045"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P31 : forall (a b:R) (f:R -> R) (l lf:Rlist), adapted_couple f a b l lf -> adapted_couple (fun x:R => Rabs (f x)) a b l (app_Rlist lf Rabs).",
            "VernacStartTheoremProof",
            "26b58cf554f79b495b44e03c490d9b5ae8301061"
        ],
        [
            "unfold adapted_couple; intros; decompose [and] H; clear H; repeat split; try assumption.",
            "VernacExtend",
            "e958878d3818e66c23f3675e70b16f301051fe8e"
        ],
        [
            "symmetry ; rewrite H3; rewrite RList_P18; reflexivity.",
            "VernacExtend",
            "b4cc38db1f386b33c99749dc722a95ee1805edce"
        ],
        [
            "intros; unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H5; intros; rewrite (H5 _ H _ H4); rewrite RList_P12; [ reflexivity | rewrite H3 in H; simpl in H; apply H ].",
            "VernacExtend",
            "ddc59d3971aca52470241469c4d9f716d2f64d7c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P32 : forall (a b:R) (f:StepFun a b), IsStepFun (fun x:R => Rabs (f x)) a b.",
            "VernacStartTheoremProof",
            "b6acd944fc45460f49966f98e4bd13bcb0ba016c"
        ],
        [
            "intros a b f; unfold IsStepFun; apply existT with (subdivision f); unfold is_subdivision; apply existT with (app_Rlist (subdivision_val f) Rabs); apply StepFun_P31; apply StepFun_P1.",
            "VernacExtend",
            "626661e2c89263c1b866923b8abbbf71a4a21b96"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P33 : forall l2 l1:Rlist, ordered_Rlist l1 -> Rabs (Int_SF l2 l1) <= Int_SF (app_Rlist l2 Rabs) l1.",
            "VernacStartTheoremProof",
            "aa67bd8136515d8c47145782dffbd5468e30ebf5"
        ],
        [
            "simple induction l2; intros.",
            "VernacExtend",
            "96a4cf574182b57d210463e79cc705cd35d5cf4e"
        ],
        [
            "simpl; rewrite Rabs_R0; right; reflexivity.",
            "VernacExtend",
            "c6fbe686b4e848350f7dd481f9d708287212cbc4"
        ],
        [
            "simpl; induction l1 as [| r1 l1 Hrecl1].",
            "VernacExtend",
            "31753cc3467fe52e81976cdac97d30e9fa125845"
        ],
        [
            "rewrite Rabs_R0; right; reflexivity.",
            "VernacExtend",
            "0947ed1e522f8fa81b5f34d31f8cf416f9f3447b"
        ],
        [
            "induction l1 as [| r2 l1 Hrecl0].",
            "VernacExtend",
            "0e374f8289fa1ec932cc35963cfee603beeacb7a"
        ],
        [
            "rewrite Rabs_R0; right; reflexivity.",
            "VernacExtend",
            "0947ed1e522f8fa81b5f34d31f8cf416f9f3447b"
        ],
        [
            "apply Rle_trans with (Rabs (r * (r2 - r1)) + Rabs (Int_SF r0 (cons r2 l1))).",
            "VernacExtend",
            "92033a6670bc541f710f5cc64c6e1f3d4d10986c"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "rewrite Rabs_mult; rewrite (Rabs_right (r2 - r1)); [ apply Rplus_le_compat_l; apply H; apply RList_P4 with r1; assumption | apply Rge_minus; apply Rle_ge; apply (H0 0%nat); simpl; apply lt_O_Sn ].",
            "VernacExtend",
            "ae078215ecb768f38cd24e414209ead9ff58e2ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P34 : forall (a b:R) (f:StepFun a b), a <= b -> Rabs (RiemannInt_SF f) <= RiemannInt_SF (mkStepFun (StepFun_P32 f)).",
            "VernacStartTheoremProof",
            "3d48cf38fb47de426956663e4fd856b3358a117d"
        ],
        [
            "intros; unfold RiemannInt_SF; decide (Rle_dec a b) with H.",
            "VernacExtend",
            "ba50cea05e612fec13811f2886373d93bb286050"
        ],
        [
            "replace (Int_SF (subdivision_val (mkStepFun (StepFun_P32 f))) (subdivision (mkStepFun (StepFun_P32 f)))) with (Int_SF (app_Rlist (subdivision_val f) Rabs) (subdivision f)).",
            "VernacExtend",
            "13642f3979cd826b328ab81f8e2d19eaa067543b"
        ],
        [
            "apply StepFun_P33; assert (H0 := StepFun_P29 f); unfold is_subdivision in H0; elim H0; intros; unfold adapted_couple in p; decompose [and] p; assumption.",
            "VernacExtend",
            "5c8850b1a8d8307db6c1b55af67a09a1a1aaa766"
        ],
        [
            "apply StepFun_P17 with (fun x:R => Rabs (f x)) a b; [ apply StepFun_P31; apply StepFun_P1 | apply (StepFun_P1 (mkStepFun (StepFun_P32 f))) ].",
            "VernacExtend",
            "dc4b08dac1ea645158bb3089c4c5e3e3a39e773d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P35 : forall (l:Rlist) (a b:R) (f g:R -> R), ordered_Rlist l -> pos_Rl l 0 = a -> pos_Rl l (pred (Rlength l)) = b -> (forall x:R, a < x < b -> f x <= g x) -> Int_SF (FF l f) l <= Int_SF (FF l g) l.",
            "VernacStartTheoremProof",
            "61a0e38b83777e7e9bb748dba52954744398c686"
        ],
        [
            "simple induction l; intros.",
            "VernacExtend",
            "c92eda0a002a1bcd4ae3135cde90a1434b04e226"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "simpl; induction r0 as [| r0 r1 Hrecr0].",
            "VernacExtend",
            "b972a244a26abe90d9231e2a9ea618604c85d7a3"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "simpl; apply Rplus_le_compat.",
            "VernacExtend",
            "e407a7b315105f1acb5c8e4701fce7955c674fdc"
        ],
        [
            "case (Req_dec r r0); intro.",
            "VernacExtend",
            "33e127f0fe6782924fcd7fde9ebbf6a1f5b2d5cf"
        ],
        [
            "rewrite H4; right; ring.",
            "VernacExtend",
            "05c5653093b8b549edcd711c1df57a22a1214a34"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (r0 - r)); apply Rmult_le_compat_l.",
            "VernacExtend",
            "84057d44f810911790b67d7e1311bc23c21e39a6"
        ],
        [
            "apply Rge_le; apply Rge_minus; apply Rle_ge; apply (H0 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "0f95c34d459f5a06fe4267800933d51ace12b2bb"
        ],
        [
            "apply H3; split.",
            "VernacExtend",
            "14ee8b762765c5a3d7361306b2caf70207874eea"
        ],
        [
            "apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "6631f3c2df4cb853b13a1c15d269a9146336e287"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "bb110d8377e3622749fa8b2b4653e0680d3ab799"
        ],
        [
            "assert (H5 : r = a).",
            "VernacExtend",
            "1e1ec05a5fbbaf1bd19bfe9721cee4d883e3511e"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "rewrite H5; rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l.",
            "VernacExtend",
            "2696bc9f26bef0aca003312bfd901b063409dc1e"
        ],
        [
            "assert (H6 := H0 0%nat (lt_O_Sn _)).",
            "VernacExtend",
            "8c1cc1b01347bf35604444be74685b2ea6fe4378"
        ],
        [
            "simpl in H6.",
            "VernacExtend",
            "a1cfe6bf72a31f34bf109464b9fb8288a8f3124d"
        ],
        [
            "elim H6; intro.",
            "VernacExtend",
            "e85bcbbf1e2e7245dba06fdc165dee137f165a99"
        ],
        [
            "rewrite H5 in H7; apply H7.",
            "VernacExtend",
            "9956f86089c577bfcc4bbc666152d2d892afe813"
        ],
        [
            "elim H4; assumption.",
            "VernacExtend",
            "8e800e8eaec7ed673de2698dd086f814106951d0"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "6631f3c2df4cb853b13a1c15d269a9146336e287"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "bb110d8377e3622749fa8b2b4653e0680d3ab799"
        ],
        [
            "rewrite Rmult_1_l; rewrite double; assert (H5 : r0 <= b).",
            "VernacExtend",
            "bcb0c54a83f4c069d39b7bb356f22620139f8d72"
        ],
        [
            "replace b with (pos_Rl (cons r (cons r0 r1)) (pred (Rlength (cons r (cons r0 r1))))).",
            "VernacExtend",
            "4acbc94d67e24a17dca2ecfc3c055d1d6733ffd0"
        ],
        [
            "replace r0 with (pos_Rl (cons r (cons r0 r1)) 1).",
            "VernacExtend",
            "d92e14716ebc927e74c6e6996dc3300059a711f2"
        ],
        [
            "elim (RList_P6 (cons r (cons r0 r1))); intros; apply H5.",
            "VernacExtend",
            "1f5395a35c75b627a6f7ed0ccfed654b41480eb7"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl; apply le_n_S.",
            "VernacExtend",
            "91d1564a4599db6accc8f469563ad971deafe5dd"
        ],
        [
            "apply le_O_n.",
            "VernacExtend",
            "7fa25714b3e362fc6548cec817a7c173238f4970"
        ],
        [
            "simpl; apply lt_n_Sn.",
            "VernacExtend",
            "4ca55d44d089295f1b850f173a407549e7957497"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply Rle_lt_trans with (r + b).",
            "VernacExtend",
            "89d6567b5fe51a6b77fd79a668829c93530885ba"
        ],
        [
            "apply Rplus_le_compat_l; assumption.",
            "VernacExtend",
            "ec726fd718e976f21a740f054870f0c6bcea3d34"
        ],
        [
            "rewrite (Rplus_comm r); apply Rplus_lt_compat_l.",
            "VernacExtend",
            "760aba645a87974907e3c78dc719e9adfbfcaf6d"
        ],
        [
            "apply Rlt_le_trans with r0.",
            "VernacExtend",
            "ca93e0cfc3cfd85b2ada96beda92a7a8df19b365"
        ],
        [
            "assert (H6 := H0 0%nat (lt_O_Sn _)).",
            "VernacExtend",
            "8c1cc1b01347bf35604444be74685b2ea6fe4378"
        ],
        [
            "simpl in H6.",
            "VernacExtend",
            "a1cfe6bf72a31f34bf109464b9fb8288a8f3124d"
        ],
        [
            "elim H6; intro.",
            "VernacExtend",
            "e85bcbbf1e2e7245dba06fdc165dee137f165a99"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "elim H4; assumption.",
            "VernacExtend",
            "8e800e8eaec7ed673de2698dd086f814106951d0"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "simpl in H; apply H with r0 b.",
            "VernacExtend",
            "23046c7b8574c155383325ca398d751ca8436211"
        ],
        [
            "apply RList_P4 with r; assumption.",
            "VernacExtend",
            "ca77f3aeb32c827a13d2dfeb653f84e922693df3"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite <- H2; reflexivity.",
            "VernacExtend",
            "31c7dad53485dfaa6f1ccfafc516be38e1c26314"
        ],
        [
            "intros; apply H3; elim H4; intros; split; try assumption.",
            "VernacExtend",
            "92a2fc496fb7c84e921890702576d55276bfc4bb"
        ],
        [
            "apply Rle_lt_trans with r0; try assumption.",
            "VernacExtend",
            "eee03810cf1b818784cbcd85cd91ce98e0e0bb0f"
        ],
        [
            "rewrite <- H1.",
            "VernacExtend",
            "b8b417d956609d1854d18921f25bc0ffae73a74e"
        ],
        [
            "simpl; apply (H0 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "413d01727a3ef310a0f2edcc95c75b69eb371049"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P36 : forall (a b:R) (f g:StepFun a b) (l:Rlist), a <= b -> is_subdivision f a b l -> is_subdivision g a b l -> (forall x:R, a < x < b -> f x <= g x) -> RiemannInt_SF f <= RiemannInt_SF g.",
            "VernacStartTheoremProof",
            "4b97d620d2a7df1528ace3fb210270243f929372"
        ],
        [
            "intros; unfold RiemannInt_SF; decide (Rle_dec a b) with H.",
            "VernacExtend",
            "ba50cea05e612fec13811f2886373d93bb286050"
        ],
        [
            "replace (Int_SF (subdivision_val f) (subdivision f)) with (Int_SF (FF l f) l).",
            "VernacExtend",
            "de1d5299bd4cf60f0a1712dfe818df521393b3b9"
        ],
        [
            "replace (Int_SF (subdivision_val g) (subdivision g)) with (Int_SF (FF l g) l).",
            "VernacExtend",
            "b4a8de079d157922f5436beaf7a220ff1e3eb890"
        ],
        [
            "unfold is_subdivision in X; elim X; clear X; intros; unfold adapted_couple in p; decompose [and] p; clear p; assert (H5 : Rmin a b = a); [ unfold Rmin; decide (Rle_dec a b) with H; reflexivity | assert (H7 : Rmax a b = b); [ unfold Rmax; decide (Rle_dec a b) with H; reflexivity | rewrite H5 in H3; rewrite H7 in H2; eapply StepFun_P35 with a b; assumption ] ].",
            "VernacExtend",
            "790e0af537ba3bf01cb741313498387fc02960d0"
        ],
        [
            "apply StepFun_P17 with (fe g) a b; [ apply StepFun_P21; assumption | apply StepFun_P1 ].",
            "VernacExtend",
            "26c99ea82147d0a66fb6f2e2e9377b564295ca2c"
        ],
        [
            "apply StepFun_P17 with (fe f) a b; [ apply StepFun_P21; assumption | apply StepFun_P1 ].",
            "VernacExtend",
            "58f688b467fbe35ef871377b98d59fe350dcfc7f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P37 : forall (a b:R) (f g:StepFun a b), a <= b -> (forall x:R, a < x < b -> f x <= g x) -> RiemannInt_SF f <= RiemannInt_SF g.",
            "VernacStartTheoremProof",
            "b1c8e4b8f004a290bdea236e31e8370e4608da6e"
        ],
        [
            "intros; eapply StepFun_P36; try assumption.",
            "VernacExtend",
            "78e4541235ea75553a608d442ec100b0b3be5887"
        ],
        [
            "eapply StepFun_P25; apply StepFun_P29.",
            "VernacExtend",
            "03e4895d64d87da8d975f97a91ce5240e3e683b7"
        ],
        [
            "eapply StepFun_P23; apply StepFun_P29.",
            "VernacExtend",
            "fa53d84994835b70bc3290ac8f6cfa97a5d79416"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P38 : forall (l:Rlist) (a b:R) (f:R -> R), ordered_Rlist l -> pos_Rl l 0 = a -> pos_Rl l (pred (Rlength l)) = b -> { g:StepFun a b | g b = f b /\\ (forall i:nat, (i < pred (Rlength l))%nat -> constant_D_eq g (co_interval (pos_Rl l i) (pos_Rl l (S i))) (f (pos_Rl l i))) }.",
            "VernacStartTheoremProof",
            "e07cd1d76ec9eee66cc110e47a1158ed4be08edf"
        ],
        [
            "intros l a b f; generalize a; clear a; induction l.",
            "VernacExtend",
            "63ecb374bb8d60d48ce3540f1516792a5db5bc8b"
        ],
        [
            "intros a H H0 H1; simpl in H0; simpl in H1; exists (mkStepFun (StepFun_P4 a b (f b))); split.",
            "VernacExtend",
            "e9ccd58bab9896431863f6cb7ca63d153c101bf8"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros; elim (lt_n_O _ H2).",
            "VernacExtend",
            "7eecc0600776b7b28e0419055ee5b33f159b5bcc"
        ],
        [
            "intros; destruct l as [| r1 l].",
            "VernacExtend",
            "af754b6bd41039e0a261ba7325067f6afc0d2852"
        ],
        [
            "simpl in H1; simpl in H0; exists (mkStepFun (StepFun_P4 a b (f b))); split.",
            "VernacExtend",
            "100ec0e600aedb3cd7c4c8d1997f6134fe450128"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros i H2; elim (lt_n_O _ H2).",
            "VernacExtend",
            "8d385b58c23cf93ed8598db1aa45f82bb4ee2ba4"
        ],
        [
            "intros; assert (H2 : ordered_Rlist (cons r1 l)).",
            "VernacExtend",
            "3613844afddf8b83d59c02f1822537df5b1a1de9"
        ],
        [
            "apply RList_P4 with r; assumption.",
            "VernacExtend",
            "ca77f3aeb32c827a13d2dfeb653f84e922693df3"
        ],
        [
            "assert (H3 : pos_Rl (cons r1 l) 0 = r1).",
            "VernacExtend",
            "e189d5a2b83e9a8a08e6638454bcafc19ffe1c3c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assert (H4 : pos_Rl (cons r1 l) (pred (Rlength (cons r1 l))) = b).",
            "VernacExtend",
            "43985cd90a34af79189381a9d04a159d58c736a7"
        ],
        [
            "rewrite <- H1; reflexivity.",
            "VernacExtend",
            "bed20c0e3a66409558a9463bfc5deafcd2d38489"
        ],
        [
            "elim (IHl r1 H2 H3 H4); intros g [H5 H6].",
            "VernacExtend",
            "416ad94e946512fde45b30fd2039fdd2eb027cdc"
        ],
        [
            "set (g' := fun x:R => match Rle_dec r1 x with | left _ => g x | right _ => f a end).",
            "VernacExtend",
            "4273d2a42ec93623592ea02abac2d452f3352c23"
        ],
        [
            "assert (H7 : r1 <= b).",
            "VernacExtend",
            "d419cf2e9f297a07fb6eca6fb2d849144682f22b"
        ],
        [
            "rewrite <- H4; apply RList_P7; [ assumption | left; reflexivity ].",
            "VernacExtend",
            "d111130ec41463c7427dbc31595f610a3e394bfd"
        ],
        [
            "assert (H8 : IsStepFun g' a b).",
            "VernacExtend",
            "89ce39dfd0e4bd0f6014a864f1e4fcf6bff0a207"
        ],
        [
            "unfold IsStepFun; assert (H8 := pre g); unfold IsStepFun in H8; elim H8; intros lg H9; unfold is_subdivision in H9; elim H9; clear H9; intros lg2 H9; split with (cons a lg); unfold is_subdivision; split with (cons (f a) lg2); unfold adapted_couple in H9; decompose [and] H9; clear H9; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "f89db9997b388c87ee42992b0545fd837d62142c"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H9; induction i as [| i Hreci].",
            "VernacExtend",
            "4de120b9ca59b6da090ba1e42d9ae8b1dc8c9314"
        ],
        [
            "simpl; rewrite H12; replace (Rmin r1 b) with r1.",
            "VernacExtend",
            "d5e61677a36d939247cc4ccda15fb5893cae1abe"
        ],
        [
            "simpl in H0; rewrite <- H0; apply (H 0%nat); simpl; apply lt_O_Sn.",
            "VernacExtend",
            "ff272f5dce59b34c0ad403c2ef76549ef37eec9d"
        ],
        [
            "unfold Rmin; decide (Rle_dec r1 b) with H7; reflexivity.",
            "VernacExtend",
            "e9e656ff3e669b91c0acd31b85527ba0e2bedace"
        ],
        [
            "apply (H10 i); apply lt_S_n.",
            "VernacExtend",
            "7f1721f3d46abe15ed9189f478d6a08d76033d23"
        ],
        [
            "replace (S (pred (Rlength lg))) with (Rlength lg).",
            "VernacExtend",
            "718985ed52270ad1635cb420b0253fc138db1d23"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "apply S_pred with 0%nat; apply neq_O_lt; intro; rewrite <- H14 in H9; elim (lt_n_O _ H9).",
            "VernacExtend",
            "dfa5a8b9ee5dbabeac898069a6e41031568641e6"
        ],
        [
            "simpl; assert (H14 : a <= b).",
            "VernacExtend",
            "f1c0c07ecc9696bfaf3b86cec5f553136b4c09eb"
        ],
        [
            "rewrite <- H1; simpl in H0; rewrite <- H0; apply RList_P7; [ assumption | left; reflexivity ].",
            "VernacExtend",
            "370e71a1a6425f7273f4eb8caa7b28130614b461"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with H14; reflexivity.",
            "VernacExtend",
            "949cec94aeec0444e854f3b411a0f3ef9d4342c7"
        ],
        [
            "assert (H14 : a <= b).",
            "VernacExtend",
            "e64a2cc536498dc307a150e121830fb5694cd247"
        ],
        [
            "rewrite <- H1; simpl in H0; rewrite <- H0; apply RList_P7; [ assumption | left; reflexivity ].",
            "VernacExtend",
            "370e71a1a6425f7273f4eb8caa7b28130614b461"
        ],
        [
            "replace (Rmax a b) with (Rmax r1 b).",
            "VernacExtend",
            "9bba2eeef469148e23c46ad17d6c1f77a30e51ef"
        ],
        [
            "rewrite <- H11; induction lg as [| r0 lg Hreclg].",
            "VernacExtend",
            "0a815dacb4e24c65a66467121601830c54868768"
        ],
        [
            "simpl in H13; discriminate.",
            "VernacExtend",
            "748d32489a8991107e36a044bf729733b02c0de2"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with H14; decide (Rle_dec r1 b) with H7; reflexivity.",
            "VernacExtend",
            "8419ddd0cfa444f188ec12fdbb090bc78dead842"
        ],
        [
            "simpl; rewrite H13; reflexivity.",
            "VernacExtend",
            "2cfd3c469c821eee0749cdcbc77cd54525fa0904"
        ],
        [
            "intros; simpl in H9; induction i as [| i Hreci].",
            "VernacExtend",
            "543a3a4183b653a42fe3262704c312c5ea243a79"
        ],
        [
            "unfold constant_D_eq, open_interval; simpl; intros; assert (H16 : Rmin r1 b = r1).",
            "VernacExtend",
            "bcebd20ea9be1603234cd62e69918477c59ccd75"
        ],
        [
            "unfold Rmin; decide (Rle_dec r1 b) with H7; reflexivity.",
            "VernacExtend",
            "e9e656ff3e669b91c0acd31b85527ba0e2bedace"
        ],
        [
            "rewrite H16 in H12; rewrite H12 in H14; elim H14; clear H14; intros _ H14; unfold g'; case (Rle_dec r1 x); intro r3.",
            "VernacExtend",
            "1d0c0121524ce5c4056e53f64eeb27d2bbaf905f"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ r3 H14)).",
            "VernacExtend",
            "fdde8bd66119acd4a61437a4f5787c6eccfe1771"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "change (constant_D_eq g' (open_interval (pos_Rl lg i) (pos_Rl lg (S i))) (pos_Rl lg2 i)); clear Hreci; assert (H16 := H15 i); assert (H17 : (i < pred (Rlength lg))%nat).",
            "VernacExtend",
            "e0081daa4b6724b331ba21b072fa94e998ab93ef"
        ],
        [
            "apply lt_S_n.",
            "VernacExtend",
            "0207638f6e9dea4c2a8a3945f23446b376d8318e"
        ],
        [
            "replace (S (pred (Rlength lg))) with (Rlength lg).",
            "VernacExtend",
            "718985ed52270ad1635cb420b0253fc138db1d23"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H14 in H9; elim (lt_n_O _ H9).",
            "VernacExtend",
            "ce8c9a9bf9983c466be9c0953cc5d536055f8177"
        ],
        [
            "assert (H18 := H16 H17); unfold constant_D_eq, open_interval in H18; unfold constant_D_eq, open_interval; intros; assert (H19 := H18 _ H14); rewrite <- H19; unfold g'; case (Rle_dec r1 x) as [|[]].",
            "VernacExtend",
            "38ea52f540ecd790e68774e19182eef88891569f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "replace r1 with (Rmin r1 b).",
            "VernacExtend",
            "24e1b7570d9906034e7eac4441d41be083a4a2da"
        ],
        [
            "rewrite <- H12; elim H14; clear H14; intros H14 _; left; apply Rle_lt_trans with (pos_Rl lg i); try assumption.",
            "VernacExtend",
            "0f2e5fecc88fb840a5cde1b3f591deadabff6447"
        ],
        [
            "apply RList_P5.",
            "VernacExtend",
            "6d664b6e37794dc60d51641f985ce1d0f4142239"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim (RList_P3 lg (pos_Rl lg i)); intros; apply H21; exists i; split.",
            "VernacExtend",
            "71ff405b3bee767e715f0307d4ff717b76151f02"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "apply lt_trans with (pred (Rlength lg)); try assumption.",
            "VernacExtend",
            "ef69ab5eb8bea97b2bcf84d34aba6fab307cd474"
        ],
        [
            "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H22 in H17; elim (lt_n_O _ H17).",
            "VernacExtend",
            "d8aa640b64afb2aabbbec6177d3f94bab2e36b66"
        ],
        [
            "unfold Rmin; decide (Rle_dec r1 b) with H7; reflexivity.",
            "VernacExtend",
            "e9e656ff3e669b91c0acd31b85527ba0e2bedace"
        ],
        [
            "exists (mkStepFun H8); split.",
            "VernacExtend",
            "6f279cd7163457acc16eafc6a156c2fba3afb5f5"
        ],
        [
            "simpl; unfold g'; decide (Rle_dec r1 b) with H7; assumption.",
            "VernacExtend",
            "ab73ef50ba02806a530a361e37746e3dd4619a80"
        ],
        [
            "intros; simpl in H9; induction i as [| i Hreci].",
            "VernacExtend",
            "543a3a4183b653a42fe3262704c312c5ea243a79"
        ],
        [
            "unfold constant_D_eq, co_interval; simpl; intros; simpl in H0; rewrite H0; elim H10; clear H10; intros; unfold g'; case (Rle_dec r1 x); intro r3.",
            "VernacExtend",
            "cf164ce1114233f220ad7d42fc88260cd80b153a"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ r3 H11)).",
            "VernacExtend",
            "797543edde9db254081b4ab58ef54b6e9d54cb1f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "clear Hreci; change (constant_D_eq (mkStepFun H8) (co_interval (pos_Rl (cons r1 l) i) (pos_Rl (cons r1 l) (S i))) (f (pos_Rl (cons r1 l) i))); assert (H10 := H6 i); assert (H11 : (i < pred (Rlength (cons r1 l)))%nat).",
            "VernacExtend",
            "9b91343a04081dac7f3d51968fc7fe98c6742348"
        ],
        [
            "simpl; apply lt_S_n; assumption.",
            "VernacExtend",
            "3be1c0ea76eeb629587840639f44e5fec61613e5"
        ],
        [
            "assert (H12 := H10 H11); unfold constant_D_eq, co_interval in H12; unfold constant_D_eq, co_interval; intros; rewrite <- (H12 _ H13); simpl; unfold g'; case (Rle_dec r1 x) as [|[]].",
            "VernacExtend",
            "c13ff83b629087ef05371fc63712a8d30671642f"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "elim H13; clear H13; intros; apply Rle_trans with (pos_Rl (cons r1 l) i); try assumption; change (pos_Rl (cons r1 l) 0 <= pos_Rl (cons r1 l) i); elim (RList_P6 (cons r1 l)); intros; apply H15; [ assumption | apply le_O_n | simpl; apply lt_trans with (Rlength l); [ apply lt_S_n; assumption | apply lt_n_Sn ] ].",
            "VernacExtend",
            "ddd74044be76f62e8d6125511356ed790e761c26"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P39 : forall (a b:R) (f:StepFun a b), RiemannInt_SF f = - RiemannInt_SF (mkStepFun (StepFun_P6 (pre f))).",
            "VernacStartTheoremProof",
            "6612f0c684881ecb4e38397f6bb612db3644bf16"
        ],
        [
            "intros; unfold RiemannInt_SF; case (Rle_dec a b); case (Rle_dec b a); intros.",
            "VernacExtend",
            "2ed2811f5506e0f2e099d7563177b13038cc2219"
        ],
        [
            "assert (H : adapted_couple f a b (subdivision f) (subdivision_val f)); [ apply StepFun_P1 | assert (H0 : adapted_couple (mkStepFun (StepFun_P6 (pre f))) b a (subdivision (mkStepFun (StepFun_P6 (pre f)))) (subdivision_val (mkStepFun (StepFun_P6 (pre f))))); [ apply StepFun_P1 | assert (H1 : a = b); [ apply Rle_antisym; assumption | rewrite (StepFun_P8 H H1); assert (H2 : b = a); [ symmetry ; apply H1 | rewrite (StepFun_P8 H0 H2); ring ] ] ] ].",
            "VernacExtend",
            "16df69a745bbe4167304bb7456274e1a10052582"
        ],
        [
            "rewrite Ropp_involutive; eapply StepFun_P17; [ apply StepFun_P1 | apply StepFun_P2; set (H := StepFun_P6 (pre f)); unfold IsStepFun in H; elim H; intros; unfold is_subdivision; elim p; intros; apply p0 ].",
            "VernacExtend",
            "fdc489f91d6a0c36643350dfefd2e85fdd3f6e17"
        ],
        [
            "apply Ropp_eq_compat; eapply StepFun_P17; [ apply StepFun_P1 | apply StepFun_P2; set (H := StepFun_P6 (pre f)); unfold IsStepFun in H; elim H; intros; unfold is_subdivision; elim p; intros; apply p0 ].",
            "VernacExtend",
            "1945b1e9307615b6130bbbd57482352cd56398f9"
        ],
        [
            "assert (H : a < b); [ auto with real | assert (H0 : b < a); [ auto with real | elim (Rlt_irrefl _ (Rlt_trans _ _ _ H H0)) ] ].",
            "VernacExtend",
            "d1de271d65d14d0e264df995416e0017bee8f2a6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P40 : forall (f:R -> R) (a b c:R) (l1 l2 lf1 lf2:Rlist), a < b -> b < c -> adapted_couple f a b l1 lf1 -> adapted_couple f b c l2 lf2 -> adapted_couple f a c (cons_Rlist l1 l2) (FF (cons_Rlist l1 l2) f).",
            "VernacStartTheoremProof",
            "96941babbab2aa4a8ddbccc7305925ebe9e26555"
        ],
        [
            "intros f a b c l1 l2 lf1 lf2 H H0 H1 H2; unfold adapted_couple in H1, H2; unfold adapted_couple; decompose [and] H1; decompose [and] H2; clear H1 H2; repeat split.",
            "VernacExtend",
            "ec61d758dca28f949386c870d5f594f1d9fbf6c3"
        ],
        [
            "apply RList_P25; try assumption.",
            "VernacExtend",
            "265ee0883e6f12ed1d5d00a7495a7ec46948489d"
        ],
        [
            "rewrite H10; rewrite H4; unfold Rmin, Rmax; case (Rle_dec a b) as [|[]]; case (Rle_dec b c) as [|[]]; (right; reflexivity) || (left; assumption).",
            "VernacExtend",
            "c0e9063cc4375c35e33bc72bacdd2d68c2fbf68c"
        ],
        [
            "rewrite RList_P22.",
            "VernacExtend",
            "0143477f78718293e2d26e1784bcb41a653ec3b0"
        ],
        [
            "rewrite H5; unfold Rmin, Rmax; case (Rle_dec a c) as [|[]]; case (Rle_dec a b) as [|[]]; [ reflexivity | left; assumption | apply Rle_trans with b; left; assumption | left; assumption ].",
            "VernacExtend",
            "0e3d26aa496cf636d79a6312bddfa8695376d1b3"
        ],
        [
            "red; intro; rewrite H1 in H6; discriminate.",
            "VernacExtend",
            "5c5810d776df2b57280d41e3e0a311da3e434266"
        ],
        [
            "rewrite RList_P24.",
            "VernacExtend",
            "e5f4a124d550ee173d66a375bd9a30c7fba618f3"
        ],
        [
            "rewrite H9; unfold Rmin, Rmax; case (Rle_dec a c) as [|[]]; case (Rle_dec b c) as [|[]]; [ reflexivity | left; assumption | apply Rle_trans with b; left; assumption | left; assumption ].",
            "VernacExtend",
            "370fba99ad006acfcdee166eccb6e6bcd62de495"
        ],
        [
            "red; intro; rewrite H1 in H11; discriminate.",
            "VernacExtend",
            "715c8463241cc4615c17dc778c0ccd7fea42aaaf"
        ],
        [
            "apply StepFun_P20.",
            "VernacExtend",
            "29688f3866b1088048c757f0fadbb23c96cddff3"
        ],
        [
            "rewrite RList_P23; apply neq_O_lt; red; intro.",
            "VernacExtend",
            "fa354d468506b1a5cb67b15d727a71f6fbed8c00"
        ],
        [
            "assert (H2 : (Rlength l1 + Rlength l2)%nat = 0%nat).",
            "VernacExtend",
            "15889de2d1b7a910355a704aeb5f90af0269f40d"
        ],
        [
            "symmetry ; apply H1.",
            "VernacExtend",
            "d1eba21d76ce89bf8bf6fc6f08548faf1912bc60"
        ],
        [
            "elim (plus_is_O _ _ H2); intros; rewrite H12 in H6; discriminate.",
            "VernacExtend",
            "0166b8cffdf4867626ab62104ab895a186957b42"
        ],
        [
            "unfold constant_D_eq, open_interval; intros; elim (le_or_lt (S (S i)) (Rlength l1)); intro.",
            "VernacExtend",
            "4224e91f4c5e76f837637b001c313e85e5e7dc37"
        ],
        [
            "assert (H14 : pos_Rl (cons_Rlist l1 l2) i = pos_Rl l1 i).",
            "VernacExtend",
            "cebd97486164b4367bab2d81070f4778f436da79"
        ],
        [
            "apply RList_P26; apply lt_S_n; apply le_lt_n_Sm; apply le_S_n; apply le_trans with (Rlength l1); [ assumption | apply le_n_Sn ].",
            "VernacExtend",
            "2ee242aa35b7761d27a01634730650aebea078e9"
        ],
        [
            "assert (H15 : pos_Rl (cons_Rlist l1 l2) (S i) = pos_Rl l1 (S i)).",
            "VernacExtend",
            "6a44e58994a7f7a722340bf889f65f8c0218ba14"
        ],
        [
            "apply RList_P26; apply lt_S_n; apply le_lt_n_Sm; assumption.",
            "VernacExtend",
            "41b21bcce7023e7ad18b8dcdd131553f9f12a16c"
        ],
        [
            "rewrite H14 in H2; rewrite H15 in H2; assert (H16 : (2 <= Rlength l1)%nat).",
            "VernacExtend",
            "7646ba035954cb1f5881f8a36b442e32940fb416"
        ],
        [
            "apply le_trans with (S (S i)); [ repeat apply le_n_S; apply le_O_n | assumption ].",
            "VernacExtend",
            "ec79146dbf92b69f0a15841aa0e42d228fa9a43b"
        ],
        [
            "elim (RList_P20 _ H16); intros r1 [r2 [r3 H17]]; rewrite H17; change (f x = pos_Rl (app_Rlist (mid_Rlist (cons_Rlist (cons r2 r3) l2) r1) f) i) ; rewrite RList_P12.",
            "VernacExtend",
            "9c92b04cea6e5e170d11a94da5bc4acaa800016c"
        ],
        [
            "induction i as [| i Hreci].",
            "VernacExtend",
            "359a77e440c9883a74d09392e658fa188fb9d6cd"
        ],
        [
            "simpl; assert (H18 := H8 0%nat); unfold constant_D_eq, open_interval in H18; assert (H19 : (0 < pred (Rlength l1))%nat).",
            "VernacExtend",
            "a1a656e15e7980970ae5f36da0e7539d78408012"
        ],
        [
            "rewrite H17; simpl; apply lt_O_Sn.",
            "VernacExtend",
            "22a3bf8c6d9cd671a0b741e10012ffdf0ee666d8"
        ],
        [
            "assert (H20 := H18 H19); repeat rewrite H20.",
            "VernacExtend",
            "db8804eaf7aa53c999c7e730457ea8188af7022c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assert (H21 : r1 <= r2).",
            "VernacExtend",
            "5333d06774675293c0688beef9f9cfaa8194dab4"
        ],
        [
            "rewrite H17 in H3; apply (H3 0%nat).",
            "VernacExtend",
            "86d296c86e7783d3fcd0289bd995babd0b143f94"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "elim H21; intro.",
            "VernacExtend",
            "78404a2603b011826eb8aafbecb9f119db9ef940"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "rewrite H17; simpl; apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "8e6697f21f543e522315c8da99d988d0c4fbcebc"
        ],
        [
            "rewrite H17; simpl; apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm r1); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "ffea440de2a2c407d655479f16833011583dad19"
        ],
        [
            "elim H2; intros; rewrite H17 in H23; rewrite H17 in H24; simpl in H24; simpl in H23; rewrite H22 in H23; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H23 H24)).",
            "VernacExtend",
            "8e6aced5fb3e1bc2c162beeee65154137aa1987d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "clear Hreci; rewrite RList_P13.",
            "VernacExtend",
            "5aece838c9ac94f3944ea80346cdc418b1bd2cf3"
        ],
        [
            "rewrite H17 in H14; rewrite H17 in H15; change (pos_Rl (cons_Rlist (cons r2 r3) l2) i = pos_Rl (cons r1 (cons r2 r3)) (S i)) in H14; rewrite H14; change (pos_Rl (cons_Rlist (cons r2 r3) l2) (S i) = pos_Rl (cons r1 (cons r2 r3)) (S (S i))) in H15; rewrite H15; assert (H18 := H8 (S i)); unfold constant_D_eq, open_interval in H18; assert (H19 : (S i < pred (Rlength l1))%nat).",
            "VernacExtend",
            "b1e75440200e8b7d7c9d947e171064789492d008"
        ],
        [
            "apply lt_pred; apply lt_S_n; apply le_lt_n_Sm; assumption.",
            "VernacExtend",
            "73c2d68381cbe92aaf0ef528521c74031922a90c"
        ],
        [
            "assert (H20 := H18 H19); repeat rewrite H20.",
            "VernacExtend",
            "db8804eaf7aa53c999c7e730457ea8188af7022c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite <- H17; assert (H21 : pos_Rl l1 (S i) <= pos_Rl l1 (S (S i))).",
            "VernacExtend",
            "03b2c6038c58dc9b60e91a4af1d7b6c710df0668"
        ],
        [
            "apply (H3 (S i)); apply lt_pred; apply lt_S_n; apply le_lt_n_Sm; assumption.",
            "VernacExtend",
            "f7a6ff9e50013df100044d39d247ff31c34b5b0c"
        ],
        [
            "elim H21; intro.",
            "VernacExtend",
            "78404a2603b011826eb8aafbecb9f119db9ef940"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "35b716538dd20af83cfdc7d9e6694d744aa20b44"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm (pos_Rl l1 (S i))); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "d0d514ccae2f78d83391d40be86781571c6cb786"
        ],
        [
            "elim H2; intros; rewrite H22 in H23; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H23 H24)).",
            "VernacExtend",
            "e677bcdddb89378edae15e19425a5e32cff0071f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl; rewrite H17 in H1; simpl in H1; apply lt_S_n; assumption.",
            "VernacExtend",
            "7c4decbc0d97fcedc31e831fa8635afca2a40f48"
        ],
        [
            "rewrite RList_P14; rewrite H17 in H1; simpl in H1; apply H1.",
            "VernacExtend",
            "39e2babbe5103e1771fe29515ade1f88a118ce14"
        ],
        [
            "inversion H12.",
            "VernacExtend",
            "d5ec1d67ecbf066a6575bda368738e1ad0dbbc60"
        ],
        [
            "assert (H16 : pos_Rl (cons_Rlist l1 l2) (S i) = b).",
            "VernacExtend",
            "4e69e9d9e9eb66fca0af9e2b5b0a3f85b14a643e"
        ],
        [
            "rewrite RList_P29.",
            "VernacExtend",
            "eeed5647eac33f4b871a5d3c3259dea714f4d768"
        ],
        [
            "rewrite H15; rewrite <- minus_n_n; rewrite H10; unfold Rmin; case (Rle_dec b c) as [|[]]; [ reflexivity | left; assumption ].",
            "VernacExtend",
            "662417f12405c78146f65e414e0057494e9bed95"
        ],
        [
            "rewrite H15; apply le_n.",
            "VernacExtend",
            "7c78c9d1e451b106543ea301992b3f227de36b7b"
        ],
        [
            "induction l1 as [| r l1 Hrecl1].",
            "VernacExtend",
            "f320953d90c1684fb218151b30f04e4f3994d4b3"
        ],
        [
            "simpl in H15; discriminate.",
            "VernacExtend",
            "7a2b26cabc763bbec5aac1ecb4b2bd797f47bc4d"
        ],
        [
            "clear Hrecl1; simpl in H1; simpl; apply lt_n_S; assumption.",
            "VernacExtend",
            "a3dd02d63b159c7a98b6b3026db192068b2e0b63"
        ],
        [
            "assert (H17 : pos_Rl (cons_Rlist l1 l2) i = b).",
            "VernacExtend",
            "b22c03a75ec2f3ad21fa4dd0f4ff7cde0d6e8bd6"
        ],
        [
            "rewrite RList_P26.",
            "VernacExtend",
            "1769ac0892144d338f9ac8f6d9de1b20b1fee809"
        ],
        [
            "replace i with (pred (Rlength l1)); [ rewrite H4; unfold Rmax; case (Rle_dec a b) as [|[]]; [ reflexivity | left; assumption ] | rewrite H15; reflexivity ].",
            "VernacExtend",
            "f5f51c6b8fd854a7c76968cf6c2edd1e4e09819e"
        ],
        [
            "rewrite H15; apply lt_n_Sn.",
            "VernacExtend",
            "b0e07e2d2f475ae91a0bd2e69549b370e71926c9"
        ],
        [
            "rewrite H16 in H2; rewrite H17 in H2; elim H2; intros; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H14 H18)).",
            "VernacExtend",
            "6db953ee82a5c6f191c0754c62c4d94befff7527"
        ],
        [
            "assert (H16 : pos_Rl (cons_Rlist l1 l2) i = pos_Rl l2 (i - Rlength l1)).",
            "VernacExtend",
            "6e328cda89b9db9d4c4366132e0f156cc5da96c3"
        ],
        [
            "apply RList_P29.",
            "VernacExtend",
            "d1ebed15d918a6f926b990d20c4420c0d307d288"
        ],
        [
            "apply le_S_n; assumption.",
            "VernacExtend",
            "2c06a98f9e6b11e386040498d910df6a7f70b17d"
        ],
        [
            "apply lt_le_trans with (pred (Rlength (cons_Rlist l1 l2))); [ assumption | apply le_pred_n ].",
            "VernacExtend",
            "78c74720aeaaf20d90d4a8d70b120c39b613c581"
        ],
        [
            "assert (H17 : pos_Rl (cons_Rlist l1 l2) (S i) = pos_Rl l2 (S (i - Rlength l1))).",
            "VernacExtend",
            "262f6304c0a178f9b662f42bc7c5b827822d28ba"
        ],
        [
            "replace (S (i - Rlength l1)) with (S i - Rlength l1)%nat.",
            "VernacExtend",
            "64d0911b450c3b4a367874342310900be2276857"
        ],
        [
            "apply RList_P29.",
            "VernacExtend",
            "d1ebed15d918a6f926b990d20c4420c0d307d288"
        ],
        [
            "apply le_S_n; apply le_trans with (S i); [ assumption | apply le_n_Sn ].",
            "VernacExtend",
            "fb25c7d0239db82e836da3c43daba993612bf0e8"
        ],
        [
            "induction l1 as [| r l1 Hrecl1].",
            "VernacExtend",
            "f320953d90c1684fb218151b30f04e4f3994d4b3"
        ],
        [
            "simpl in H6; discriminate.",
            "VernacExtend",
            "36f746926dd64bbe9345d7628ce3acb03c56562c"
        ],
        [
            "clear Hrecl1; simpl in H1; simpl; apply lt_n_S; assumption.",
            "VernacExtend",
            "a3dd02d63b159c7a98b6b3026db192068b2e0b63"
        ],
        [
            "symmetry ; apply minus_Sn_m; apply le_S_n; assumption.",
            "VernacExtend",
            "dbebb815fc64411a331c1d472c6990fa65b2bb28"
        ],
        [
            "assert (H18 : (2 <= Rlength l1)%nat).",
            "VernacExtend",
            "75157780d158d1f1a134c57927b071bf863bec22"
        ],
        [
            "clear f c l2 lf2 H0 H3 H8 H7 H10 H9 H11 H13 i H1 x H2 H12 m H14 H15 H16 H17; induction l1 as [| r l1 Hrecl1].",
            "VernacExtend",
            "72a111eea523827d88002987b690107403f499ec"
        ],
        [
            "discriminate.",
            "VernacExtend",
            "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
        ],
        [
            "clear Hrecl1; induction l1 as [| r0 l1 Hrecl1].",
            "VernacExtend",
            "96c33176d4c3f4be92c3d20d9ed538a898a5e3c2"
        ],
        [
            "simpl in H5; simpl in H4; assert (H0 : Rmin a b < Rmax a b).",
            "VernacExtend",
            "f0d766fc8b1ad04066d9ad34556a73780b5486d1"
        ],
        [
            "unfold Rmin, Rmax; case (Rle_dec a b) as [|[]]; [ assumption | left; assumption ].",
            "VernacExtend",
            "3894215fc7cd00078c166e12f8551e9ec33b0f03"
        ],
        [
            "rewrite <- H5 in H0; rewrite <- H4 in H0; elim (Rlt_irrefl _ H0).",
            "VernacExtend",
            "afe99a584ab6b2c1489586b0c16f86bdc58425f4"
        ],
        [
            "clear Hrecl1; simpl; repeat apply le_n_S; apply le_O_n.",
            "VernacExtend",
            "32e7cf4a37cd187ad5a2eb1c2704d4cd553593d1"
        ],
        [
            "elim (RList_P20 _ H18); intros r1 [r2 [r3 H19]]; rewrite H19; change (f x = pos_Rl (app_Rlist (mid_Rlist (cons_Rlist (cons r2 r3) l2) r1) f) i) ; rewrite RList_P12.",
            "VernacExtend",
            "5c8fc2f157fa074e5c6721bc789215f650a61337"
        ],
        [
            "induction i as [| i Hreci].",
            "VernacExtend",
            "359a77e440c9883a74d09392e658fa188fb9d6cd"
        ],
        [
            "assert (H20 := le_S_n _ _ H15); assert (H21 := le_trans _ _ _ H18 H20); elim (le_Sn_O _ H21).",
            "VernacExtend",
            "044dc3723981c1f915b7e6740b8e0ced0758d1bc"
        ],
        [
            "clear Hreci; rewrite RList_P13.",
            "VernacExtend",
            "5aece838c9ac94f3944ea80346cdc418b1bd2cf3"
        ],
        [
            "rewrite H19 in H16; rewrite H19 in H17; change (pos_Rl (cons_Rlist (cons r2 r3) l2) i = pos_Rl l2 (S i - Rlength (cons r1 (cons r2 r3)))) in H16; rewrite H16; change (pos_Rl (cons_Rlist (cons r2 r3) l2) (S i) = pos_Rl l2 (S (S i - Rlength (cons r1 (cons r2 r3))))) in H17; rewrite H17; assert (H20 := H13 (S i - Rlength l1)%nat); unfold constant_D_eq, open_interval in H20; assert (H21 : (S i - Rlength l1 < pred (Rlength l2))%nat).",
            "VernacExtend",
            "451255ee8933bda3861a956adac7cca7caa606d7"
        ],
        [
            "apply lt_pred; rewrite minus_Sn_m.",
            "VernacExtend",
            "a7c3939df794f54ee7b746e0e0e18e617f446842"
        ],
        [
            "apply plus_lt_reg_l with (Rlength l1); rewrite <- le_plus_minus.",
            "VernacExtend",
            "2de8a996caf63ef66ba95b5e7f06d58fb45af4b5"
        ],
        [
            "rewrite H19 in H1; simpl in H1; rewrite H19; simpl; rewrite RList_P23 in H1; apply lt_n_S; assumption.",
            "VernacExtend",
            "8840432006d1b3d4d3e8ad6df64a4bcd49bd4086"
        ],
        [
            "apply le_trans with (S i); [ apply le_S_n; assumption | apply le_n_Sn ].",
            "VernacExtend",
            "b599f63278700575e2723f3bf649837b63bdf6e6"
        ],
        [
            "apply le_S_n; assumption.",
            "VernacExtend",
            "2c06a98f9e6b11e386040498d910df6a7f70b17d"
        ],
        [
            "assert (H22 := H20 H21); repeat rewrite H22.",
            "VernacExtend",
            "5917b685565b8daf6cf98bebb9485a5024fcd1bf"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite <- H19; assert (H23 : pos_Rl l2 (S i - Rlength l1) <= pos_Rl l2 (S (S i - Rlength l1))).",
            "VernacExtend",
            "6c70b5324dd90d36a4ebe250a270f1c78666b293"
        ],
        [
            "apply H7; apply lt_pred.",
            "VernacExtend",
            "7f56206ebacaf09775759d883f242173a14f8309"
        ],
        [
            "rewrite minus_Sn_m.",
            "VernacExtend",
            "0e21ccba499520e200b98b25d59dc96e608d701d"
        ],
        [
            "apply plus_lt_reg_l with (Rlength l1); rewrite <- le_plus_minus.",
            "VernacExtend",
            "2de8a996caf63ef66ba95b5e7f06d58fb45af4b5"
        ],
        [
            "rewrite H19 in H1; simpl in H1; rewrite H19; simpl; rewrite RList_P23 in H1; apply lt_n_S; assumption.",
            "VernacExtend",
            "8840432006d1b3d4d3e8ad6df64a4bcd49bd4086"
        ],
        [
            "apply le_trans with (S i); [ apply le_S_n; assumption | apply le_n_Sn ].",
            "VernacExtend",
            "b599f63278700575e2723f3bf649837b63bdf6e6"
        ],
        [
            "apply le_S_n; assumption.",
            "VernacExtend",
            "2c06a98f9e6b11e386040498d910df6a7f70b17d"
        ],
        [
            "elim H23; intro.",
            "VernacExtend",
            "356145d595665d4e741cde4b437619d20f6cf261"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "35b716538dd20af83cfdc7d9e6694d744aa20b44"
        ],
        [
            "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm (pos_Rl l2 (S i - Rlength l1))); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
            "VernacExtend",
            "1917a41b7328694b6ebd706e08ec84fa759b9d80"
        ],
        [
            "rewrite <- H19 in H16; rewrite <- H19 in H17; elim H2; intros; rewrite H19 in H25; rewrite H19 in H26; simpl in H25; simpl in H16; rewrite H16 in H25; simpl in H26; simpl in H17; rewrite H17 in H26; simpl in H24; rewrite H24 in H25; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H25 H26)).",
            "VernacExtend",
            "44a053997c01ad94c72094e1e1b586c542df3718"
        ],
        [
            "assert (H23 : pos_Rl (cons_Rlist l1 l2) (S i) = pos_Rl l2 (S i - Rlength l1)).",
            "VernacExtend",
            "1845c4c20bb9252da628371da57d09ce6f81f4bb"
        ],
        [
            "rewrite H19; simpl; simpl in H16; apply H16.",
            "VernacExtend",
            "c363d42c272a554f479071050dfedf11dbb3ce75"
        ],
        [
            "assert (H24 : pos_Rl (cons_Rlist l1 l2) (S (S i)) = pos_Rl l2 (S (S i - Rlength l1))).",
            "VernacExtend",
            "e8d557e5db2947a6564064b7f43f58f91d58a505"
        ],
        [
            "rewrite H19; simpl; simpl in H17; apply H17.",
            "VernacExtend",
            "52d49e5978745813f7b3fc117749eafd2a024004"
        ],
        [
            "rewrite <- H23; rewrite <- H24; assumption.",
            "VernacExtend",
            "8adc22db9311de5abde6f5e20dc0a9c5598a3299"
        ],
        [
            "simpl; rewrite H19 in H1; simpl in H1; apply lt_S_n; assumption.",
            "VernacExtend",
            "316c373c89232711383edeb200133e0aa2f43d56"
        ],
        [
            "rewrite RList_P14; rewrite H19 in H1; simpl in H1; simpl; apply H1.",
            "VernacExtend",
            "e6c3976175a30ed5455ac998e68e7c221fdc4583"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P41 : forall (f:R -> R) (a b c:R), a <= b -> b <= c -> IsStepFun f a b -> IsStepFun f b c -> IsStepFun f a c.",
            "VernacStartTheoremProof",
            "594a0b7f7f77ccf84df0704aaba10e982372a07c"
        ],
        [
            "intros f a b c H H0 (l1,(lf1,H1)) (l2,(lf2,H2)); destruct (total_order_T a b) as [[Hltab|Hab]|Hgtab].",
            "VernacExtend",
            "91bd25077fa5efbf8aa7b47d7eafdf1ec18d3994"
        ],
        [
            "destruct (total_order_T b c) as [[Hltbc|Hbc]|Hgtbc].",
            "VernacExtend",
            "332b50f4888c87d4f475303678d28f4f6c91a6f2"
        ],
        [
            "exists (cons_Rlist l1 l2); exists (FF (cons_Rlist l1 l2) f); apply StepFun_P40 with b lf1 lf2; assumption.",
            "VernacExtend",
            "10ae826c103ea93c0d0900ef9138b72f39c6b9bf"
        ],
        [
            "exists l1; exists lf1; rewrite Hbc in H1; assumption.",
            "VernacExtend",
            "643f1b586150d864e9ab25f4ef2a8d52c006aaa2"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hgtbc)).",
            "VernacExtend",
            "dbd429f2989f92224357d3c58329ca4f90bdcebe"
        ],
        [
            "exists l2; exists lf2; rewrite <- Hab in H2; assumption.",
            "VernacExtend",
            "8c8f944c19defb95a02f6582784897bf6455bd00"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgtab)).",
            "VernacExtend",
            "b426153eb07961963dcfe560e9b5f75c9e635d3a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P42 : forall (l1 l2:Rlist) (f:R -> R), pos_Rl l1 (pred (Rlength l1)) = pos_Rl l2 0 -> Int_SF (FF (cons_Rlist l1 l2) f) (cons_Rlist l1 l2) = Int_SF (FF l1 f) l1 + Int_SF (FF l2 f) l2.",
            "VernacStartTheoremProof",
            "e7fd95d7c07e552012cc8c865fe61c38ee806135"
        ],
        [
            "intros l1 l2 f; induction l1 as [| r l1 IHl1]; intros H; [ simpl; ring | destruct l1 as [| r0 r1]; [ simpl in H; simpl; destruct l2 as [| r0 r1]; [ simpl; ring | simpl; simpl in H; rewrite H; ring ] | simpl; rewrite Rplus_assoc; apply Rplus_eq_compat_l; apply IHl1; rewrite <- H; reflexivity ] ].",
            "VernacExtend",
            "95ef9d7314625acc2bcfac1a8a78c63fd07d0760"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P43 : forall (f:R -> R) (a b c:R) (pr1:IsStepFun f a b) (pr2:IsStepFun f b c) (pr3:IsStepFun f a c), RiemannInt_SF (mkStepFun pr1) + RiemannInt_SF (mkStepFun pr2) = RiemannInt_SF (mkStepFun pr3).",
            "VernacStartTheoremProof",
            "d81ae3dd88faf3bbca9afdedb5e845fbbf3749f4"
        ],
        [
            "intros f; intros.",
            "VernacExtend",
            "3e0a9d87175ee0b508590620662aa5494c764f76"
        ],
        [
            "pose proof pr1 as (l1,(lf1,H1)).",
            "VernacExtend",
            "fc045896d950ce8850eec137af6b61964433b323"
        ],
        [
            "pose proof pr2 as (l2,(lf2,H2)).",
            "VernacExtend",
            "56cb72bea04d460ab263c377d4556e0d3730a74b"
        ],
        [
            "pose proof pr3 as (l3,(lf3,H3)).",
            "VernacExtend",
            "e6a6008f96ebf836bc8ec7e14a106de08a73bc6c"
        ],
        [
            "replace (RiemannInt_SF (mkStepFun pr1)) with match Rle_dec a b with | left _ => Int_SF lf1 l1 | right _ => - Int_SF lf1 l1 end.",
            "VernacExtend",
            "f591efe698f77902eb115350857e8306e4323b09"
        ],
        [
            "replace (RiemannInt_SF (mkStepFun pr2)) with match Rle_dec b c with | left _ => Int_SF lf2 l2 | right _ => - Int_SF lf2 l2 end.",
            "VernacExtend",
            "bdd5f00db88120c8d0053a2278b2587ca3d1282d"
        ],
        [
            "replace (RiemannInt_SF (mkStepFun pr3)) with match Rle_dec a c with | left _ => Int_SF lf3 l3 | right _ => - Int_SF lf3 l3 end.",
            "VernacExtend",
            "1015d07250195991c2a155bdfc59b5447d97ce95"
        ],
        [
            "case (Rle_dec a b) as [Hle|Hnle]; case (Rle_dec b c) as [Hle'|Hnle']; case (Rle_dec a c) as [Hle''|Hnle''].",
            "VernacExtend",
            "69dd4fc2d98754231c8c7963d664c7508960cb35"
        ],
        [
            "elim Hle; intro.",
            "VernacExtend",
            "bd6ba96a80e86581fe4fd04d41049bc00329f95c"
        ],
        [
            "elim Hle'; intro.",
            "VernacExtend",
            "de120ad3c13e3af5153a2d4bc0a8975780689b77"
        ],
        [
            "replace (Int_SF lf3 l3) with (Int_SF (FF (cons_Rlist l1 l2) f) (cons_Rlist l1 l2)).",
            "VernacExtend",
            "80a985b6ab1f1940090cf41e471fa95d8c485c79"
        ],
        [
            "replace (Int_SF lf1 l1) with (Int_SF (FF l1 f) l1).",
            "VernacExtend",
            "5bd5ac1f381dcc335cd982b6373663d0cf388c04"
        ],
        [
            "replace (Int_SF lf2 l2) with (Int_SF (FF l2 f) l2).",
            "VernacExtend",
            "0b965d3e694c0b1f00c96e1faa161652609c508c"
        ],
        [
            "symmetry ; apply StepFun_P42.",
            "VernacExtend",
            "dfa2f057c921f92b9b9c33f05125334c0d7fc8be"
        ],
        [
            "unfold adapted_couple in H1, H2; decompose [and] H1; decompose [and] H2; clear H1 H2; rewrite H11; rewrite H5; unfold Rmax, Rmin; decide (Rle_dec a b) with Hle; decide (Rle_dec b c) with Hle'; reflexivity.",
            "VernacExtend",
            "8cfa22ebb35879679ebd73f2ec16585eec1824f8"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf2; apply H2; assumption | assumption ].",
            "VernacExtend",
            "8ec023b79b240e29ccd55d0d0eb6c72696f55f6d"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf1; apply H1 | assumption ].",
            "VernacExtend",
            "7143019af88ac886d308c17711a6e199077eb11a"
        ],
        [
            "eapply StepFun_P17; [ apply (StepFun_P40 H H0 H1 H2) | apply H3 ].",
            "VernacExtend",
            "a9007995b0b5aaabd69e2b42a33ac937e9648ba1"
        ],
        [
            "replace (Int_SF lf2 l2) with 0.",
            "VernacExtend",
            "3262e261b8a89b434b9850027c2eb1dee94f6c20"
        ],
        [
            "rewrite Rplus_0_r; eapply StepFun_P17; [ apply H1 | rewrite <- H0 in H3; apply H3 ].",
            "VernacExtend",
            "3a513d47318d786b85545b5f4dfc316470f113a6"
        ],
        [
            "symmetry ; eapply StepFun_P8; [ apply H2 | assumption ].",
            "VernacExtend",
            "8aa701359aca844e97a92a3a88d6e4a7e43e3eda"
        ],
        [
            "replace (Int_SF lf1 l1) with 0.",
            "VernacExtend",
            "e23f3c0957eea2af6bcb7e95e77b1aa3552b40d8"
        ],
        [
            "rewrite Rplus_0_l; eapply StepFun_P17; [ apply H2 | rewrite H in H3; apply H3 ].",
            "VernacExtend",
            "9893461994814aa470cf3376fa9abd428da41222"
        ],
        [
            "symmetry ; eapply StepFun_P8; [ apply H1 | assumption ].",
            "VernacExtend",
            "9c9a0cbf715b6de0f5ea0a75ab0f71411811b355"
        ],
        [
            "elim Hnle''; apply Rle_trans with b; assumption.",
            "VernacExtend",
            "60a4fb5140c48a51d7998839c3f44a73169b9eec"
        ],
        [
            "apply Rplus_eq_reg_l with (Int_SF lf2 l2); replace (Int_SF lf2 l2 + (Int_SF lf1 l1 + - Int_SF lf2 l2)) with (Int_SF lf1 l1); [ idtac | ring ].",
            "VernacExtend",
            "c2ae56c6036f152ba64489de63f656bf5dc4b39d"
        ],
        [
            "assert (H : c < b).",
            "VernacExtend",
            "4b14753b3fd3122bfdf02e638de52194b0a8c263"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "elim Hle''; intro.",
            "VernacExtend",
            "b32400cd687d61840fa420f8027f8aa7215d67b3"
        ],
        [
            "rewrite Rplus_comm; replace (Int_SF lf1 l1) with (Int_SF (FF (cons_Rlist l3 l2) f) (cons_Rlist l3 l2)).",
            "VernacExtend",
            "63d1f8a4234f8d40a278eb06937e5d2e6a3269eb"
        ],
        [
            "replace (Int_SF lf3 l3) with (Int_SF (FF l3 f) l3).",
            "VernacExtend",
            "9d9e68421a99b31e62bd95d6a4e7590844f25da5"
        ],
        [
            "replace (Int_SF lf2 l2) with (Int_SF (FF l2 f) l2).",
            "VernacExtend",
            "0b965d3e694c0b1f00c96e1faa161652609c508c"
        ],
        [
            "apply StepFun_P42.",
            "VernacExtend",
            "736cca4112b90c8355fb32fd6407dba971657db0"
        ],
        [
            "unfold adapted_couple in H2, H3; decompose [and] H2; decompose [and] H3; clear H3 H2; rewrite H10; rewrite H6; unfold Rmax, Rmin.",
            "VernacExtend",
            "0980d369f08d082cc0061f953bc9959dd88e8286"
        ],
        [
            "decide (Rle_dec a c) with Hle''; decide (Rle_dec b c) with Hnle'; reflexivity.",
            "VernacExtend",
            "e2a0061d1bc2b1392b5ffc4af2207bce89ba0427"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf2; apply H2 | assumption ].",
            "VernacExtend",
            "f0633818b718288a8c28e60490fe691f59f5db2d"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf3; apply H3 | assumption ].",
            "VernacExtend",
            "496c5fc9c1ba1d607d9ae4dfe1b90fb6f6b8d0a9"
        ],
        [
            "eapply StepFun_P17; [ apply (StepFun_P40 H0 H H3 (StepFun_P2 H2)) | apply H1 ].",
            "VernacExtend",
            "1ca385073a7aea17595a25a4921f790697fb3b5b"
        ],
        [
            "replace (Int_SF lf3 l3) with 0.",
            "VernacExtend",
            "ca57f54bc91c12914e9856227095aff29a04337b"
        ],
        [
            "rewrite Rplus_0_r; eapply StepFun_P17; [ apply H1 | apply StepFun_P2; rewrite <- H0 in H2; apply H2 ].",
            "VernacExtend",
            "2ee2b422a7518e97ad3b429b3a28d22852723451"
        ],
        [
            "symmetry ; eapply StepFun_P8; [ apply H3 | assumption ].",
            "VernacExtend",
            "905d0bcebeb129764266b88433b204a6c48b0941"
        ],
        [
            "replace (Int_SF lf2 l2) with (Int_SF lf3 l3 + Int_SF lf1 l1).",
            "VernacExtend",
            "6bf6bf14284353c43655bce56e8e7d5dd60ab29b"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "elim Hle; intro.",
            "VernacExtend",
            "bd6ba96a80e86581fe4fd04d41049bc00329f95c"
        ],
        [
            "replace (Int_SF lf2 l2) with (Int_SF (FF (cons_Rlist l3 l1) f) (cons_Rlist l3 l1)).",
            "VernacExtend",
            "9a3293fb32530833f2675c3f0c3b90a95b9e7e9a"
        ],
        [
            "replace (Int_SF lf3 l3) with (Int_SF (FF l3 f) l3).",
            "VernacExtend",
            "9d9e68421a99b31e62bd95d6a4e7590844f25da5"
        ],
        [
            "replace (Int_SF lf1 l1) with (Int_SF (FF l1 f) l1).",
            "VernacExtend",
            "5bd5ac1f381dcc335cd982b6373663d0cf388c04"
        ],
        [
            "symmetry ; apply StepFun_P42.",
            "VernacExtend",
            "dfa2f057c921f92b9b9c33f05125334c0d7fc8be"
        ],
        [
            "unfold adapted_couple in H1, H3; decompose [and] H1; decompose [and] H3; clear H3 H1; rewrite H9; rewrite H5; unfold Rmax, Rmin; decide (Rle_dec a c) with Hnle''; decide (Rle_dec a b) with Hle; reflexivity.",
            "VernacExtend",
            "543ace918c5076a57609f839da475ec65eb1d39b"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf1; apply H1 | assumption ].",
            "VernacExtend",
            "7143019af88ac886d308c17711a6e199077eb11a"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf3; apply H3 | assumption ].",
            "VernacExtend",
            "496c5fc9c1ba1d607d9ae4dfe1b90fb6f6b8d0a9"
        ],
        [
            "eapply StepFun_P17.",
            "VernacExtend",
            "b0ae4e909c1434ad21f11892d0d66ba0919a1fa6"
        ],
        [
            "assert (H0 : c < a).",
            "VernacExtend",
            "4dd70bf8db0c6a45967faa995171da02b98db23d"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "apply (StepFun_P40 H0 H (StepFun_P2 H3) H1).",
            "VernacExtend",
            "55ca43c27494df46add6604706d2a784d32c0937"
        ],
        [
            "apply StepFun_P2; apply H2.",
            "VernacExtend",
            "470f47f4819f3fb3757992647c592320d2c1d32f"
        ],
        [
            "replace (Int_SF lf1 l1) with 0.",
            "VernacExtend",
            "e23f3c0957eea2af6bcb7e95e77b1aa3552b40d8"
        ],
        [
            "rewrite Rplus_0_r; eapply StepFun_P17; [ apply H3 | rewrite <- H in H2; apply H2 ].",
            "VernacExtend",
            "4ef09c4c697a11edd5b4eb762c58e71b315fb94e"
        ],
        [
            "symmetry ; eapply StepFun_P8; [ apply H1 | assumption ].",
            "VernacExtend",
            "9c9a0cbf715b6de0f5ea0a75ab0f71411811b355"
        ],
        [
            "assert (H : b < a).",
            "VernacExtend",
            "3991f7460279f505ac2fb93a767c8fcaf203c296"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "replace (Int_SF lf2 l2) with (Int_SF lf3 l3 + Int_SF lf1 l1).",
            "VernacExtend",
            "6bf6bf14284353c43655bce56e8e7d5dd60ab29b"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "rewrite Rplus_comm; elim Hle''; intro.",
            "VernacExtend",
            "8f7e57750a9f56bfaaeb1843dfd64aab5849b373"
        ],
        [
            "replace (Int_SF lf2 l2) with (Int_SF (FF (cons_Rlist l1 l3) f) (cons_Rlist l1 l3)).",
            "VernacExtend",
            "03415c8c0ba82802bef5723e3b8b814124c8946c"
        ],
        [
            "replace (Int_SF lf3 l3) with (Int_SF (FF l3 f) l3).",
            "VernacExtend",
            "9d9e68421a99b31e62bd95d6a4e7590844f25da5"
        ],
        [
            "replace (Int_SF lf1 l1) with (Int_SF (FF l1 f) l1).",
            "VernacExtend",
            "5bd5ac1f381dcc335cd982b6373663d0cf388c04"
        ],
        [
            "symmetry ; apply StepFun_P42.",
            "VernacExtend",
            "dfa2f057c921f92b9b9c33f05125334c0d7fc8be"
        ],
        [
            "unfold adapted_couple in H1, H3; decompose [and] H1; decompose [and] H3; clear H3 H1; rewrite H11; rewrite H5; unfold Rmax, Rmin; decide (Rle_dec a c) with Hle''; decide (Rle_dec a b) with Hnle; reflexivity.",
            "VernacExtend",
            "8fea69ff4a82757e3ac9aae252364ee453cab37c"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf1; apply H1 | assumption ].",
            "VernacExtend",
            "7143019af88ac886d308c17711a6e199077eb11a"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf3; apply H3 | assumption ].",
            "VernacExtend",
            "496c5fc9c1ba1d607d9ae4dfe1b90fb6f6b8d0a9"
        ],
        [
            "eapply StepFun_P17.",
            "VernacExtend",
            "b0ae4e909c1434ad21f11892d0d66ba0919a1fa6"
        ],
        [
            "apply (StepFun_P40 H H0 (StepFun_P2 H1) H3).",
            "VernacExtend",
            "319bcc3a9151c3371a1cd88e43e11803c9622603"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "replace (Int_SF lf3 l3) with 0.",
            "VernacExtend",
            "ca57f54bc91c12914e9856227095aff29a04337b"
        ],
        [
            "rewrite Rplus_0_r; eapply StepFun_P17; [ apply H1 | rewrite <- H0 in H2; apply StepFun_P2; apply H2 ].",
            "VernacExtend",
            "07a861121b83e8a6c362e02c35f7e05323ed1715"
        ],
        [
            "symmetry ; eapply StepFun_P8; [ apply H3 | assumption ].",
            "VernacExtend",
            "905d0bcebeb129764266b88433b204a6c48b0941"
        ],
        [
            "assert (H : c < a).",
            "VernacExtend",
            "565f37a70b773c219850f004bdb6921faa7c9fda"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "replace (Int_SF lf1 l1) with (Int_SF lf2 l2 + Int_SF lf3 l3).",
            "VernacExtend",
            "7f5d7bf6fb1997e498d0118f6b8aa41d7b32e870"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "elim Hle'; intro.",
            "VernacExtend",
            "de120ad3c13e3af5153a2d4bc0a8975780689b77"
        ],
        [
            "replace (Int_SF lf1 l1) with (Int_SF (FF (cons_Rlist l2 l3) f) (cons_Rlist l2 l3)).",
            "VernacExtend",
            "a1bb7460f79794c0d26907488e4e8e197b7be092"
        ],
        [
            "replace (Int_SF lf3 l3) with (Int_SF (FF l3 f) l3).",
            "VernacExtend",
            "9d9e68421a99b31e62bd95d6a4e7590844f25da5"
        ],
        [
            "replace (Int_SF lf2 l2) with (Int_SF (FF l2 f) l2).",
            "VernacExtend",
            "0b965d3e694c0b1f00c96e1faa161652609c508c"
        ],
        [
            "symmetry ; apply StepFun_P42.",
            "VernacExtend",
            "dfa2f057c921f92b9b9c33f05125334c0d7fc8be"
        ],
        [
            "unfold adapted_couple in H2, H3; decompose [and] H2; decompose [and] H3; clear H3 H2; rewrite H11; rewrite H5; unfold Rmax, Rmin; decide (Rle_dec a c) with Hnle''; decide (Rle_dec b c) with Hle'; reflexivity.",
            "VernacExtend",
            "43dc8befcf244dc70601c498cb28af26784e8659"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf2; apply H2 | assumption ].",
            "VernacExtend",
            "f0633818b718288a8c28e60490fe691f59f5db2d"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf3; apply H3 | assumption ].",
            "VernacExtend",
            "496c5fc9c1ba1d607d9ae4dfe1b90fb6f6b8d0a9"
        ],
        [
            "eapply StepFun_P17.",
            "VernacExtend",
            "b0ae4e909c1434ad21f11892d0d66ba0919a1fa6"
        ],
        [
            "apply (StepFun_P40 H0 H H2 (StepFun_P2 H3)).",
            "VernacExtend",
            "31778d631931880cfd99329704a4e9166f6ba685"
        ],
        [
            "apply StepFun_P2; apply H1.",
            "VernacExtend",
            "9d87dd35c9d0237db19c479bb89eb9f1bfa3168f"
        ],
        [
            "replace (Int_SF lf2 l2) with 0.",
            "VernacExtend",
            "3262e261b8a89b434b9850027c2eb1dee94f6c20"
        ],
        [
            "rewrite Rplus_0_l; eapply StepFun_P17; [ apply H3 | rewrite H0 in H1; apply H1 ].",
            "VernacExtend",
            "4df083e262a783a6e20e9833006abfd5d7be74f2"
        ],
        [
            "symmetry; eapply StepFun_P8; [ apply H2 | assumption ].",
            "VernacExtend",
            "8aa701359aca844e97a92a3a88d6e4a7e43e3eda"
        ],
        [
            "elim Hnle'; apply Rle_trans with a; try assumption.",
            "VernacExtend",
            "1728fce44637c183d9c1a265ea2410884e38464f"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "assert (H : c < b).",
            "VernacExtend",
            "4b14753b3fd3122bfdf02e638de52194b0a8c263"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "assert (H0 : b < a).",
            "VernacExtend",
            "da600e9c86f45ecf90c31c79162fa21e3e8e9fb1"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "replace (Int_SF lf3 l3) with (Int_SF lf2 l2 + Int_SF lf1 l1).",
            "VernacExtend",
            "03582802efbf38115d081eb1513543ae9539513d"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "replace (Int_SF lf3 l3) with (Int_SF (FF (cons_Rlist l2 l1) f) (cons_Rlist l2 l1)).",
            "VernacExtend",
            "742684ac82a690a9bfee52bc5c85f9a734dcad4d"
        ],
        [
            "replace (Int_SF lf1 l1) with (Int_SF (FF l1 f) l1).",
            "VernacExtend",
            "5bd5ac1f381dcc335cd982b6373663d0cf388c04"
        ],
        [
            "replace (Int_SF lf2 l2) with (Int_SF (FF l2 f) l2).",
            "VernacExtend",
            "0b965d3e694c0b1f00c96e1faa161652609c508c"
        ],
        [
            "symmetry ; apply StepFun_P42.",
            "VernacExtend",
            "dfa2f057c921f92b9b9c33f05125334c0d7fc8be"
        ],
        [
            "unfold adapted_couple in H2, H1; decompose [and] H2; decompose [and] H1; clear H1 H2; rewrite H11; rewrite H5; unfold Rmax, Rmin; decide (Rle_dec a b) with Hnle; decide (Rle_dec b c) with Hnle'; reflexivity.",
            "VernacExtend",
            "3f325f743a05f61d6f3d606104e30c1da16c08a5"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf2; apply H2 | assumption ].",
            "VernacExtend",
            "f0633818b718288a8c28e60490fe691f59f5db2d"
        ],
        [
            "eapply StepFun_P17; [ apply StepFun_P21; unfold is_subdivision; split with lf1; apply H1 | assumption ].",
            "VernacExtend",
            "7143019af88ac886d308c17711a6e199077eb11a"
        ],
        [
            "eapply StepFun_P17.",
            "VernacExtend",
            "b0ae4e909c1434ad21f11892d0d66ba0919a1fa6"
        ],
        [
            "apply (StepFun_P40 H H0 (StepFun_P2 H2) (StepFun_P2 H1)).",
            "VernacExtend",
            "f995785841de683ea3c9b281e4e47a70a466daea"
        ],
        [
            "apply StepFun_P2; apply H3.",
            "VernacExtend",
            "9753ef859403a04b1761017ab58b840e1d2d63a9"
        ],
        [
            "unfold RiemannInt_SF; case (Rle_dec a c); intro.",
            "VernacExtend",
            "8896cf5bb105467e147620aecb3498beb9b4e790"
        ],
        [
            "eapply StepFun_P17.",
            "VernacExtend",
            "b0ae4e909c1434ad21f11892d0d66ba0919a1fa6"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "change (adapted_couple (mkStepFun pr3) a c (subdivision (mkStepFun pr3)) (subdivision_val (mkStepFun pr3))); apply StepFun_P1.",
            "VernacExtend",
            "55ca3ffc24c37637c7d087aaf56fcd030a2982bc"
        ],
        [
            "apply Ropp_eq_compat; eapply StepFun_P17.",
            "VernacExtend",
            "7d19502a1d3e7567292e0768b9b6b1d5b31697d9"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "change (adapted_couple (mkStepFun pr3) a c (subdivision (mkStepFun pr3)) (subdivision_val (mkStepFun pr3))); apply StepFun_P1.",
            "VernacExtend",
            "55ca3ffc24c37637c7d087aaf56fcd030a2982bc"
        ],
        [
            "unfold RiemannInt_SF; case (Rle_dec b c); intro.",
            "VernacExtend",
            "c54d4ab62ee9376b80562ecfcf0fe6b8b01efcee"
        ],
        [
            "eapply StepFun_P17.",
            "VernacExtend",
            "b0ae4e909c1434ad21f11892d0d66ba0919a1fa6"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "change (adapted_couple (mkStepFun pr2) b c (subdivision (mkStepFun pr2)) (subdivision_val (mkStepFun pr2))); apply StepFun_P1.",
            "VernacExtend",
            "80230e5ebc5a40ed7a429dccdc75eae4662ff865"
        ],
        [
            "apply Ropp_eq_compat; eapply StepFun_P17.",
            "VernacExtend",
            "7d19502a1d3e7567292e0768b9b6b1d5b31697d9"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "change (adapted_couple (mkStepFun pr2) b c (subdivision (mkStepFun pr2)) (subdivision_val (mkStepFun pr2))); apply StepFun_P1.",
            "VernacExtend",
            "80230e5ebc5a40ed7a429dccdc75eae4662ff865"
        ],
        [
            "unfold RiemannInt_SF; case (Rle_dec a b); intro.",
            "VernacExtend",
            "898da1cb6f8195a9f65a91f4ee279d90eafa518c"
        ],
        [
            "eapply StepFun_P17.",
            "VernacExtend",
            "b0ae4e909c1434ad21f11892d0d66ba0919a1fa6"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "change (adapted_couple (mkStepFun pr1) a b (subdivision (mkStepFun pr1)) (subdivision_val (mkStepFun pr1))); apply StepFun_P1.",
            "VernacExtend",
            "c91bb4e52e32c403d03643fdc95cebcf4b908897"
        ],
        [
            "apply Ropp_eq_compat; eapply StepFun_P17.",
            "VernacExtend",
            "7d19502a1d3e7567292e0768b9b6b1d5b31697d9"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "change (adapted_couple (mkStepFun pr1) a b (subdivision (mkStepFun pr1)) (subdivision_val (mkStepFun pr1))); apply StepFun_P1.",
            "VernacExtend",
            "c91bb4e52e32c403d03643fdc95cebcf4b908897"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P44 : forall (f:R -> R) (a b c:R), IsStepFun f a b -> a <= c <= b -> IsStepFun f a c.",
            "VernacStartTheoremProof",
            "a26b63288d8287046fb158aa0358dd2d7cc78310"
        ],
        [
            "intros f; intros; assert (H0 : a <= b).",
            "VernacExtend",
            "4f194403ca1216762503c713eefedb0eb847c518"
        ],
        [
            "elim H; intros; apply Rle_trans with c; assumption.",
            "VernacExtend",
            "40fc50aac59b35a1a39e8987af7b6931aa45106a"
        ],
        [
            "elim H; clear H; intros; unfold IsStepFun in X; unfold is_subdivision in X; elim X; clear X; intros l1 [lf1 H2]; cut (forall (l1 lf1:Rlist) (a b c:R) (f:R -> R), adapted_couple f a b l1 lf1 -> a <= c <= b -> { l:Rlist & { l0:Rlist & adapted_couple f a c l l0 } }).",
            "VernacExtend",
            "da3029dfd93a45953bec4ba3b1cff21976ba5521"
        ],
        [
            "intro X; unfold IsStepFun; unfold is_subdivision; eapply X.",
            "VernacExtend",
            "650adb7bfc822c1398fbb531e2cfefeb6e9b1d73"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "clear f a b c H0 H H1 H2 l1 lf1; simple induction l1.",
            "VernacExtend",
            "c402ad955fc5c98dfc849bb4d49e961377d45d91"
        ],
        [
            "intros; unfold adapted_couple in H; decompose [and] H; clear H; simpl in H4; discriminate.",
            "VernacExtend",
            "6071fac3b9b52f0412771cca904bb12a729ea947"
        ],
        [
            "simple induction r0.",
            "VernacExtend",
            "3cd54584b7d76a051ea25914c5484966487340a3"
        ],
        [
            "intros X lf1 a b c f H H0; assert (H1 : a = b).",
            "VernacExtend",
            "20b80494423cc300b1c342719a1e520901802126"
        ],
        [
            "unfold adapted_couple in H; decompose [and] H; clear H; simpl in H3; simpl in H2; assert (H7 : a <= b).",
            "VernacExtend",
            "2e50029534ed9fbfab60d565c5a4bfca67b8ec93"
        ],
        [
            "elim H0; intros; apply Rle_trans with c; assumption.",
            "VernacExtend",
            "6cde8d647b9f47d5a85deba0b972b04164cc42b8"
        ],
        [
            "replace a with (Rmin a b).",
            "VernacExtend",
            "4a0c6737ae26b44753b1be4180fc9efce97e5fa2"
        ],
        [
            "pattern b at 2; replace b with (Rmax a b).",
            "VernacExtend",
            "cad9803f657d3249e643ddf91c2048b542fcf25f"
        ],
        [
            "rewrite <- H2; rewrite H3; reflexivity.",
            "VernacExtend",
            "eaa163fc4c89c0e3e40fda04b25fa70f91a2f646"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with H7; reflexivity.",
            "VernacExtend",
            "3678327bd612e92b2614afe0e6e5272739062764"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with H7; reflexivity.",
            "VernacExtend",
            "99371777470e5e6e7f8602d76960a10040e7e329"
        ],
        [
            "split with (cons r nil); split with lf1; assert (H2 : c = b).",
            "VernacExtend",
            "b9b0021fb86fb428bd5334119a0a221967e7b754"
        ],
        [
            "rewrite H1 in H0; elim H0; intros; apply Rle_antisym; assumption.",
            "VernacExtend",
            "e2d712de47349145f4cf37b38d18bea3a7ded995"
        ],
        [
            "rewrite H2; assumption.",
            "VernacExtend",
            "8d629f8bfd46bf101b66ac6c60faa6b4e692fa43"
        ],
        [
            "intros r1 r2 _ X0 lf1 a b c f H H0; induction lf1 as [| r3 lf1 Hreclf1].",
            "VernacExtend",
            "e3fda7645b707412aadd681e7bdcaccf514461b4"
        ],
        [
            "unfold adapted_couple in H; decompose [and] H; clear H; simpl in H4; discriminate.",
            "VernacExtend",
            "bebd845414abf18e4cf04ee2e4cb7bcfe50d89a5"
        ],
        [
            "clear Hreclf1; assert (H1 : {c <= r1} + {r1 < c}).",
            "VernacExtend",
            "612612bc5ec88e2147a9fb29b6a2b44efb296336"
        ],
        [
            "case (Rle_dec c r1); intro; [ left; assumption | right; auto with real ].",
            "VernacExtend",
            "4181b16340706df15e26966bc08ec4405c71b3dc"
        ],
        [
            "elim H1; intro a0.",
            "VernacExtend",
            "7540f5a70ab3d757ee7fd59a798d71f162235ce4"
        ],
        [
            "split with (cons r (cons c nil)); split with (cons r3 nil); unfold adapted_couple in H; decompose [and] H; clear H; assert (H6 : r = a).",
            "VernacExtend",
            "45c690b6fd2c4209ea110e5132bbb43b0c84bdf1"
        ],
        [
            "simpl in H4; rewrite H4; unfold Rmin; case (Rle_dec a b) as [|[]]; [ reflexivity | elim H0; intros; apply Rle_trans with c; assumption ].",
            "VernacExtend",
            "8b6087c669afcdb8062903a20166662960933f8e"
        ],
        [
            "elim H0; clear H0; intros; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "702362d0335992e715e80f7acf8ea3f17abcb4e3"
        ],
        [
            "rewrite H6; unfold ordered_Rlist; intros; simpl in H8; inversion H8; [ simpl; assumption | elim (le_Sn_O _ H10) ].",
            "VernacExtend",
            "d9dfcd6bf5d0f1edfc621e9c92b03cc793ceb1dd"
        ],
        [
            "simpl; unfold Rmin; decide (Rle_dec a c) with H; assumption.",
            "VernacExtend",
            "603547231eaf3a1aeb80cd0e2fc508b45c96b5e9"
        ],
        [
            "simpl; unfold Rmax; decide (Rle_dec a c) with H; reflexivity.",
            "VernacExtend",
            "748581f01067c50f8ee309d7871878eda9a197d8"
        ],
        [
            "unfold constant_D_eq, open_interval; intros; simpl in H8; inversion H8.",
            "VernacExtend",
            "b1023933f029f207845cc00b7351e998ce231a06"
        ],
        [
            "simpl; assert (H10 := H7 0%nat); assert (H12 : (0 < pred (Rlength (cons r (cons r1 r2))))%nat).",
            "VernacExtend",
            "90731c4928cc329bd85b835c77baeb0802265688"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "apply (H10 H12); unfold open_interval; simpl; rewrite H11 in H9; simpl in H9; elim H9; clear H9; intros; split; try assumption.",
            "VernacExtend",
            "ef029332513c5f365ba4469d826f59bd91df43d0"
        ],
        [
            "apply Rlt_le_trans with c; assumption.",
            "VernacExtend",
            "951e5b73b9e9c351d47bfe03b64b0d61dd357a05"
        ],
        [
            "elim (le_Sn_O _ H11).",
            "VernacExtend",
            "2f79bab8c5c7c0d24e382ad1a92447bc0ff85dce"
        ],
        [
            "cut (adapted_couple f r1 b (cons r1 r2) lf1).",
            "VernacExtend",
            "26ed583668b37c2bbb7f17aa8101f7df31a9e248"
        ],
        [
            "cut (r1 <= c <= b).",
            "VernacExtend",
            "eb42ef02d83398a3b7d6b0633bb4e74669dd22a8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (X0 _ _ _ _ _ H3 H2); intros l1' [lf1' H4]; split with (cons r l1'); split with (cons r3 lf1'); unfold adapted_couple in H, H4; decompose [and] H; decompose [and] H4; clear H H4 X0; assert (H14 : a <= b).",
            "VernacExtend",
            "431d7f87e3ef4faec4f286b0ec16878976a101f9"
        ],
        [
            "elim H0; intros; apply Rle_trans with c; assumption.",
            "VernacExtend",
            "6cde8d647b9f47d5a85deba0b972b04164cc42b8"
        ],
        [
            "assert (H16 : r = a).",
            "VernacExtend",
            "58b42d2e9b17242b76e7e1aa44c9caa485d407a1"
        ],
        [
            "simpl in H7; rewrite H7; unfold Rmin; decide (Rle_dec a b) with H14; reflexivity.",
            "VernacExtend",
            "a66e68d2a26a75765e85bb2fe3c26174ecd5be55"
        ],
        [
            "induction l1' as [| r4 l1' Hrecl1'].",
            "VernacExtend",
            "4a85cf5b26b54c8914fb5c8598005180d3712e97"
        ],
        [
            "simpl in H13; discriminate.",
            "VernacExtend",
            "748d32489a8991107e36a044bf729733b02c0de2"
        ],
        [
            "clear Hrecl1'; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "86a02f3797bf82b9b74d3c3b5a8e7fcbe4a54ae9"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H; induction i as [| i Hreci].",
            "VernacExtend",
            "234e72ada15437c8cf79e98c5be4032756839360"
        ],
        [
            "simpl; replace r4 with r1.",
            "VernacExtend",
            "251696661978292c20a9b72946cdaadc52528093"
        ],
        [
            "apply (H5 0%nat).",
            "VernacExtend",
            "e671b5891213157f06175e58593faa768bc20d16"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "simpl in H12; rewrite H12; unfold Rmin; case (Rle_dec r1 c) as [|[]]; [ reflexivity | left; assumption ].",
            "VernacExtend",
            "865e64de7ff4f05c1334b66ca677508e4067b5d8"
        ],
        [
            "apply (H9 i); simpl; apply lt_S_n; assumption.",
            "VernacExtend",
            "0b108c4a7d26aa4840524494c6a43cb69e312b34"
        ],
        [
            "simpl; unfold Rmin; case (Rle_dec a c) as [|[]]; [ assumption | elim H0; intros; assumption ].",
            "VernacExtend",
            "145ba46c59d45a863880d4a57ace13b67ba9c5e0"
        ],
        [
            "replace (Rmax a c) with (Rmax r1 c).",
            "VernacExtend",
            "1795205242c41fc78bcdf587a8c02335ef7d54e9"
        ],
        [
            "rewrite <- H11; reflexivity.",
            "VernacExtend",
            "e84132b2288fec17d80ef86b7c64f3d37fcdbe8e"
        ],
        [
            "unfold Rmax; case (Rle_dec a c) as [|[]]; case (Rle_dec r1 c) as [|[]]; [ reflexivity | left; assumption | elim H0; intros; assumption | left; assumption ].",
            "VernacExtend",
            "43efd8ea2bae7f0c425684b0d1b2f8e71bcfbb77"
        ],
        [
            "simpl; simpl in H13; rewrite H13; reflexivity.",
            "VernacExtend",
            "3bb3621a7e02d3d9481116ad6ed5fac60109dc8e"
        ],
        [
            "intros; simpl in H; unfold constant_D_eq, open_interval; intros; induction i as [| i Hreci].",
            "VernacExtend",
            "37544428ea3379ade4fee5e09e63ea8eb0e2730a"
        ],
        [
            "simpl; assert (H17 := H10 0%nat); assert (H18 : (0 < pred (Rlength (cons r (cons r1 r2))))%nat).",
            "VernacExtend",
            "28b3108738b00061a14b91aff1b371df02c5ae16"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "apply (H17 H18); unfold open_interval; simpl; simpl in H4; elim H4; clear H4; intros; split; try assumption; replace r1 with r4.",
            "VernacExtend",
            "2c4d5bf140eecb6de9be3f5c7f72f8b386a666dc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "simpl in H12; rewrite H12; unfold Rmin; case (Rle_dec r1 c) as [|[]]; [ reflexivity | left; assumption ].",
            "VernacExtend",
            "865e64de7ff4f05c1334b66ca677508e4067b5d8"
        ],
        [
            "clear Hreci; simpl; apply H15.",
            "VernacExtend",
            "405b6cbbe4ab903858b4a2861860b17f3ddc1840"
        ],
        [
            "simpl; apply lt_S_n; assumption.",
            "VernacExtend",
            "3be1c0ea76eeb629587840639f44e5fec61613e5"
        ],
        [
            "unfold open_interval; apply H4.",
            "VernacExtend",
            "918fa6002e4c3a839fd8e8ef0f28bed153a713df"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "elim H0; intros; assumption.",
            "VernacExtend",
            "93aaa20e409e093c318ed7f35309abbda4e55e01"
        ],
        [
            "eapply StepFun_P7; [ elim H0; intros; apply Rle_trans with c; [ apply H2 | apply H3 ] | apply H ].",
            "VernacExtend",
            "1b16b864f5c40eb9d72417c582004e42d681087e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P45 : forall (f:R -> R) (a b c:R), IsStepFun f a b -> a <= c <= b -> IsStepFun f c b.",
            "VernacStartTheoremProof",
            "2b6ec58de1ce34af9d76b654364c5bcd5186a526"
        ],
        [
            "intros f; intros; assert (H0 : a <= b).",
            "VernacExtend",
            "4f194403ca1216762503c713eefedb0eb847c518"
        ],
        [
            "elim H; intros; apply Rle_trans with c; assumption.",
            "VernacExtend",
            "40fc50aac59b35a1a39e8987af7b6931aa45106a"
        ],
        [
            "elim H; clear H; intros; unfold IsStepFun in X; unfold is_subdivision in X; elim X; clear X; intros l1 [lf1 H2]; cut (forall (l1 lf1:Rlist) (a b c:R) (f:R -> R), adapted_couple f a b l1 lf1 -> a <= c <= b -> { l:Rlist & { l0:Rlist & adapted_couple f c b l l0 } }).",
            "VernacExtend",
            "2a2e230aa0856ba29132ac4ebc86c0e88384fb3c"
        ],
        [
            "intro X; unfold IsStepFun; unfold is_subdivision; eapply X; [ apply H2 | split; assumption ].",
            "VernacExtend",
            "e1191b2427dfa2d109a8f3b185d953b946910962"
        ],
        [
            "clear f a b c H0 H H1 H2 l1 lf1; simple induction l1.",
            "VernacExtend",
            "c402ad955fc5c98dfc849bb4d49e961377d45d91"
        ],
        [
            "intros; unfold adapted_couple in H; decompose [and] H; clear H; simpl in H4; discriminate.",
            "VernacExtend",
            "6071fac3b9b52f0412771cca904bb12a729ea947"
        ],
        [
            "simple induction r0.",
            "VernacExtend",
            "3cd54584b7d76a051ea25914c5484966487340a3"
        ],
        [
            "intros X lf1 a b c f H H0; assert (H1 : a = b).",
            "VernacExtend",
            "20b80494423cc300b1c342719a1e520901802126"
        ],
        [
            "unfold adapted_couple in H; decompose [and] H; clear H; simpl in H3; simpl in H2; assert (H7 : a <= b).",
            "VernacExtend",
            "2e50029534ed9fbfab60d565c5a4bfca67b8ec93"
        ],
        [
            "elim H0; intros; apply Rle_trans with c; assumption.",
            "VernacExtend",
            "6cde8d647b9f47d5a85deba0b972b04164cc42b8"
        ],
        [
            "replace a with (Rmin a b).",
            "VernacExtend",
            "4a0c6737ae26b44753b1be4180fc9efce97e5fa2"
        ],
        [
            "pattern b at 2; replace b with (Rmax a b).",
            "VernacExtend",
            "cad9803f657d3249e643ddf91c2048b542fcf25f"
        ],
        [
            "rewrite <- H2; rewrite H3; reflexivity.",
            "VernacExtend",
            "eaa163fc4c89c0e3e40fda04b25fa70f91a2f646"
        ],
        [
            "unfold Rmax; decide (Rle_dec a b) with H7; reflexivity.",
            "VernacExtend",
            "3678327bd612e92b2614afe0e6e5272739062764"
        ],
        [
            "unfold Rmin; decide (Rle_dec a b) with H7; reflexivity.",
            "VernacExtend",
            "99371777470e5e6e7f8602d76960a10040e7e329"
        ],
        [
            "split with (cons r nil); split with lf1; assert (H2 : c = b).",
            "VernacExtend",
            "b9b0021fb86fb428bd5334119a0a221967e7b754"
        ],
        [
            "rewrite H1 in H0; elim H0; intros; apply Rle_antisym; assumption.",
            "VernacExtend",
            "e2d712de47349145f4cf37b38d18bea3a7ded995"
        ],
        [
            "rewrite <- H2 in H1; rewrite <- H1; assumption.",
            "VernacExtend",
            "d01f961a837ae1ba677cd43a9f8566a6857df1a4"
        ],
        [
            "intros r1 r2 _ X0 lf1 a b c f H H0; induction lf1 as [| r3 lf1 Hreclf1].",
            "VernacExtend",
            "e3fda7645b707412aadd681e7bdcaccf514461b4"
        ],
        [
            "unfold adapted_couple in H; decompose [and] H; clear H; simpl in H4; discriminate.",
            "VernacExtend",
            "bebd845414abf18e4cf04ee2e4cb7bcfe50d89a5"
        ],
        [
            "clear Hreclf1; assert (H1 : {c <= r1} + {r1 < c}).",
            "VernacExtend",
            "612612bc5ec88e2147a9fb29b6a2b44efb296336"
        ],
        [
            "case (Rle_dec c r1); intro; [ left; assumption | right; auto with real ].",
            "VernacExtend",
            "4181b16340706df15e26966bc08ec4405c71b3dc"
        ],
        [
            "elim H1; intro a0.",
            "VernacExtend",
            "7540f5a70ab3d757ee7fd59a798d71f162235ce4"
        ],
        [
            "split with (cons c (cons r1 r2)); split with (cons r3 lf1); unfold adapted_couple in H; decompose [and] H; clear H; unfold adapted_couple; repeat split.",
            "VernacExtend",
            "4bf97ce93d43cfe6d77c6915f59b8414ed0b91c0"
        ],
        [
            "unfold ordered_Rlist; intros; simpl in H; induction i as [| i Hreci].",
            "VernacExtend",
            "234e72ada15437c8cf79e98c5be4032756839360"
        ],
        [
            "simpl; assumption.",
            "VernacExtend",
            "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
        ],
        [
            "clear Hreci; apply (H2 (S i)); simpl; assumption.",
            "VernacExtend",
            "9ef0fdf7c6a34f9d12acad87f7d01dd2d326b854"
        ],
        [
            "simpl; unfold Rmin; case (Rle_dec c b) as [|[]]; [ reflexivity | elim H0; intros; assumption ].",
            "VernacExtend",
            "511bb68ddec3dfaff033bb0cdb80094d67f8db14"
        ],
        [
            "replace (Rmax c b) with (Rmax a b).",
            "VernacExtend",
            "0bf99f81e1426dae4553e6949ba8fcb7f01848b3"
        ],
        [
            "rewrite <- H3; reflexivity.",
            "VernacExtend",
            "28129f8c96918ee1d719c0c3ee71990d9fc09433"
        ],
        [
            "unfold Rmax; case (Rle_dec c b) as [|[]]; case (Rle_dec a b) as [|[]]; [ reflexivity | elim H0; intros; apply Rle_trans with c; assumption | elim H0; intros; assumption | elim H0; intros; apply Rle_trans with c; assumption ].",
            "VernacExtend",
            "cd2069885520d8a626f81343712e58854844c6a6"
        ],
        [
            "simpl; simpl in H5; apply H5.",
            "VernacExtend",
            "a83c22a617cd1d19516018360708cd1ac6c89776"
        ],
        [
            "intros; simpl in H; induction i as [| i Hreci].",
            "VernacExtend",
            "87db290f0046628c55e6216dccb73fe5b315e6e7"
        ],
        [
            "unfold constant_D_eq, open_interval; intros; simpl; apply (H7 0%nat).",
            "VernacExtend",
            "adf19069d76bb0b8669dbd4e6919fb27ce9dfa9b"
        ],
        [
            "simpl; apply lt_O_Sn.",
            "VernacExtend",
            "92647c7b432ca8163d2189148afd540a600c4def"
        ],
        [
            "unfold open_interval; simpl; simpl in H6; elim H6; clear H6; intros; split; try assumption; apply Rle_lt_trans with c; try assumption; replace r with a.",
            "VernacExtend",
            "43108e547a265680d373ad294341e5d3750ef7e0"
        ],
        [
            "elim H0; intros; assumption.",
            "VernacExtend",
            "93aaa20e409e093c318ed7f35309abbda4e55e01"
        ],
        [
            "simpl in H4; rewrite H4; unfold Rmin; case (Rle_dec a b) as [|[]]; [ reflexivity | elim H0; intros; apply Rle_trans with c; assumption ].",
            "VernacExtend",
            "8b6087c669afcdb8062903a20166662960933f8e"
        ],
        [
            "clear Hreci; apply (H7 (S i)); simpl; assumption.",
            "VernacExtend",
            "3e9f6c11c0ff833e584347593ae25fa05534b854"
        ],
        [
            "cut (adapted_couple f r1 b (cons r1 r2) lf1).",
            "VernacExtend",
            "26ed583668b37c2bbb7f17aa8101f7df31a9e248"
        ],
        [
            "cut (r1 <= c <= b).",
            "VernacExtend",
            "eb42ef02d83398a3b7d6b0633bb4e74669dd22a8"
        ],
        [
            "intros; elim (X0 _ _ _ _ _ H3 H2); intros l1' [lf1' H4]; split with l1'; split with lf1'; assumption.",
            "VernacExtend",
            "54109bc3fe53057f98b7cae271a1d5fb5dbe8358"
        ],
        [
            "split; [ left; assumption | elim H0; intros; assumption ].",
            "VernacExtend",
            "df180e12d2ae787128c572c52be746e857bcd06a"
        ],
        [
            "eapply StepFun_P7; [ elim H0; intros; apply Rle_trans with c; [ apply H2 | apply H3 ] | apply H ].",
            "VernacExtend",
            "1b16b864f5c40eb9d72417c582004e42d681087e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma StepFun_P46 : forall (f:R -> R) (a b c:R), IsStepFun f a b -> IsStepFun f b c -> IsStepFun f a c.",
            "VernacStartTheoremProof",
            "3f5b5f14826ff9643a166374e9f174ea8329e4a9"
        ],
        [
            "intros f; intros; case (Rle_dec a b); case (Rle_dec b c); intros.",
            "VernacExtend",
            "5c33c7ce7f061c62abf19bd5286e114431ceec80"
        ],
        [
            "apply StepFun_P41 with b; assumption.",
            "VernacExtend",
            "62211cb82e90e4f404fe91ba25c20aeefc420fa3"
        ],
        [
            "case (Rle_dec a c); intro.",
            "VernacExtend",
            "a52c2d1f592b3316592b3f567f3e423322186e82"
        ],
        [
            "apply StepFun_P44 with b; try assumption.",
            "VernacExtend",
            "30c7f6b836d783b066ed3e8fdd384567363eb725"
        ],
        [
            "split; [ assumption | auto with real ].",
            "VernacExtend",
            "9bbdc3b8f0fa19c19cba930488d8dfb29dd45d02"
        ],
        [
            "apply StepFun_P6; apply StepFun_P44 with b.",
            "VernacExtend",
            "09e12607c57562d0bdde3c6df1a6694eed5980e1"
        ],
        [
            "apply StepFun_P6; assumption.",
            "VernacExtend",
            "18eab6cdc0f4f971522e2ff93494c9603435efa6"
        ],
        [
            "split; auto with real.",
            "VernacExtend",
            "53b919a143f08c7f91e079731a18ea6fb30dca87"
        ],
        [
            "case (Rle_dec a c); intro.",
            "VernacExtend",
            "a52c2d1f592b3316592b3f567f3e423322186e82"
        ],
        [
            "apply StepFun_P45 with b; try assumption.",
            "VernacExtend",
            "5d91ee099090cb509646719f4ac3c7ecbc16f2bb"
        ],
        [
            "split; auto with real.",
            "VernacExtend",
            "53b919a143f08c7f91e079731a18ea6fb30dca87"
        ],
        [
            "apply StepFun_P6; apply StepFun_P45 with b.",
            "VernacExtend",
            "1169255c7d052396c1a6d31e37e0acd890b053eb"
        ],
        [
            "apply StepFun_P6; assumption.",
            "VernacExtend",
            "18eab6cdc0f4f971522e2ff93494c9603435efa6"
        ],
        [
            "split; [ assumption | auto with real ].",
            "VernacExtend",
            "9bbdc3b8f0fa19c19cba930488d8dfb29dd45d02"
        ],
        [
            "apply StepFun_P6; apply StepFun_P41 with b; auto with real || apply StepFun_P6; assumption.",
            "VernacExtend",
            "8db053750888652b535fd68cd5f8dbea02d16b27"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "IZN_var",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros; apply Z_of_nat_complete_inf; assumption.",
                        "VernacExtend",
                        "6679fc8c9a1d226d6da8be94e5d2e1fde34f8d25"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Nzorn",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros I H H0; set (E := fun x:R => exists i : nat, I i /\\ INR i = x); assert (H1 : bound E).",
                        "VernacExtend",
                        "bc4f4e0b9b5ef45197155a801c851bede9a2cc6f"
                    ]
                },
                {
                    "command": [
                        "unfold Nbound in H0; elim H0; intros N H1; unfold bound; exists (INR N); unfold is_upper_bound; intros; unfold E in H2; elim H2; intros; elim H3; intros; rewrite <- H5; apply le_INR; apply H1; assumption.",
                        "VernacExtend",
                        "44b78f0d9fddf550208993b6652acebf2a956f66"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : exists x : R, E x).",
                        "VernacExtend",
                        "99120bee9cba46b508ca6b8e87df6d203c973e5c"
                    ]
                },
                {
                    "command": [
                        "elim H; intros; exists (INR x); unfold E; exists x; split; [ assumption | reflexivity ].",
                        "VernacExtend",
                        "83ff0c2b4cec0a72d2427a0c22535a373210d5f5"
                    ]
                },
                {
                    "command": [
                        "destruct (completeness E H1 H2) as (x,(H4,H5)); unfold is_upper_bound in H4, H5; assert (H6 : 0 <= x).",
                        "VernacExtend",
                        "6858a5bde6319c410cea965ec05cfdebcad434a7"
                    ]
                },
                {
                    "command": [
                        "destruct H2 as (x0,H6).",
                        "VernacExtend",
                        "78056c59a328d2a1501455700fa8d4083051ecab"
                    ]
                },
                {
                    "command": [
                        "remember H6 as H7.",
                        "VernacExtend",
                        "1266eab334892d2e8f8fe55a33867e6c720aeeba"
                    ]
                },
                {
                    "command": [
                        "destruct H7 as (x1,(H8,H9)).",
                        "VernacExtend",
                        "58c36141269f8521a04d3c1ace48c3fdc6039742"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with x0; [ rewrite <- H9; change (INR 0 <= INR x1); apply le_INR; apply le_O_n | apply H4; assumption ].",
                        "VernacExtend",
                        "915bd80303d7032878ef8ac3c571f50bfc95ba80"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := archimed x); elim H7; clear H7; intros; assert (H9 : x <= IZR (up x) - 1).",
                        "VernacExtend",
                        "b8aead81e7fedc846476a0024362a03ee884561c"
                    ]
                },
                {
                    "command": [
                        "apply H5; intros x0 H9.",
                        "VernacExtend",
                        "b7932ee7c2e4c4a58d99a202e8575bd0be547fc5"
                    ]
                },
                {
                    "command": [
                        "assert (H10 := H4 _ H9); unfold E in H9; elim H9; intros x1 (H12,<-).",
                        "VernacExtend",
                        "7fd1fe4104d65ce52678643cee40b0046bdcc74f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_reg_l with 1; replace (1 + (IZR (up x) - 1)) with (IZR (up x)); [ idtac | ring ]; replace (1 + INR x1) with (INR (S x1)); [ idtac | rewrite S_INR; ring ].",
                        "VernacExtend",
                        "c39a3eb8555a6592a28ce5c2b30ca57b53891298"
                    ]
                },
                {
                    "command": [
                        "assert (H14 : (0 <= up x)%Z).",
                        "VernacExtend",
                        "e08d79530c4137203cab6c9986ac0695fa470acb"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; apply Rle_trans with x; [ apply H6 | left; assumption ].",
                        "VernacExtend",
                        "50177884c7a9dc5dc8f3400105b5342c48a56d0d"
                    ]
                },
                {
                    "command": [
                        "destruct (IZN _ H14) as (x2,H15).",
                        "VernacExtend",
                        "36b859733df566c9fb115da7e513708b6b7a2671"
                    ]
                },
                {
                    "command": [
                        "rewrite H15, <- INR_IZR_INZ; apply le_INR; apply lt_le_S.",
                        "VernacExtend",
                        "d37399e72bacff21413e9bfcc64be8f5f5dc4270"
                    ]
                },
                {
                    "command": [
                        "apply INR_lt; apply Rle_lt_trans with x; [ assumption | rewrite INR_IZR_INZ; rewrite <- H15; assumption ].",
                        "VernacExtend",
                        "a4d2b226a627331e7084caf6d2fed51a456572fb"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : x = IZR (up x) - 1).",
                        "VernacExtend",
                        "14c4082373aadc8ed62a015f5d5eddeb6be0c39a"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; [ assumption | apply Rplus_le_reg_l with (- x + 1); replace (- x + 1 + (IZR (up x) - 1)) with (IZR (up x) - x); [ idtac | ring ]; replace (- x + 1 + x) with 1; [ assumption | ring ] ].",
                        "VernacExtend",
                        "04f4212666b3054f4b9a227fddc5932db2d728d9"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : (0 <= up x)%Z).",
                        "VernacExtend",
                        "11003217761451e57c58642dcb59f2ae4e9286cd"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; apply Rle_trans with x; [ apply H6 | left; assumption ].",
                        "VernacExtend",
                        "50177884c7a9dc5dc8f3400105b5342c48a56d0d"
                    ]
                },
                {
                    "command": [
                        "assert (H12 := IZN_var H11); elim H12; clear H12; intros x0 H8; assert (H13 : E x).",
                        "VernacExtend",
                        "144254f6ce9b406ec8c1defd8f325fe1defe5987"
                    ]
                },
                {
                    "command": [
                        "elim (classic (E x)); intro; try assumption.",
                        "VernacExtend",
                        "4a0110ce7fae64a7d695209886d5c754eadf6a0e"
                    ]
                },
                {
                    "command": [
                        "cut (forall y:R, E y -> y <= x - 1).",
                        "VernacExtend",
                        "6e11477a36f1d7de810fbfc398e298c17d36ebc9"
                    ]
                },
                {
                    "command": [
                        "intro H13; assert (H14 := H5 _ H13); cut (x - 1 < x).",
                        "VernacExtend",
                        "19887e69bc1bff42ff687b4ebdf5fccc1d1cb3a6"
                    ]
                },
                {
                    "command": [
                        "intro H15; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H14 H15)).",
                        "VernacExtend",
                        "545ab85f25dfca1d8af228032a3590909819018c"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_lt; replace (x - 1 - x) with (-1); [ idtac | ring ]; rewrite <- Ropp_0; apply Ropp_lt_gt_contravar; apply Rlt_0_1.",
                        "VernacExtend",
                        "ced0d3731f5a314336456f958ee80e8aa9acd154"
                    ]
                },
                {
                    "command": [
                        "intros y H13; assert (H14 := H4 _ H13); elim H14; intro H15; unfold E in H13; elim H13; intros x1 H16; elim H16; intros H17 H18; apply Rplus_le_reg_l with 1.",
                        "VernacExtend",
                        "2946d539b1cb635c98a9ef328ef455e474e87d94"
                    ]
                },
                {
                    "command": [
                        "replace (1 + (x - 1)) with x; [ idtac | ring ]; rewrite <- H18; replace (1 + INR x1) with (INR (S x1)); [ idtac | rewrite S_INR; ring ].",
                        "VernacExtend",
                        "4810e309c01dbf74d7b03d02c62d447f73698e1e"
                    ]
                },
                {
                    "command": [
                        "cut (x = INR (pred x0)).",
                        "VernacExtend",
                        "72546c8d2f97b107c76390acc9bc6a9470619b71"
                    ]
                },
                {
                    "command": [
                        "intro H19; rewrite H19; apply le_INR; apply lt_le_S; apply INR_lt; rewrite H18; rewrite <- H19; assumption.",
                        "VernacExtend",
                        "aca2fb175a77e04fdb71a59a8741342c8bc71f9a"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H8; rewrite <- INR_IZR_INZ; rewrite <- (minus_INR _ 1).",
                        "VernacExtend",
                        "4d5ae00804f800e5e98ce523087a33a118ee66d9"
                    ]
                },
                {
                    "command": [
                        "apply f_equal; case x0; [ reflexivity | intro; apply sym_eq, minus_n_O ].",
                        "VernacExtend",
                        "2efc8f9209a9a45e929f1f4bef8cde99608e8870"
                    ]
                },
                {
                    "command": [
                        "induction x0 as [|x0 Hrecx0].",
                        "VernacExtend",
                        "83a82e166e3e047901699aa0b16df2b8f2c10687"
                    ]
                },
                {
                    "command": [
                        "rewrite H8 in H3.",
                        "VernacExtend",
                        "92121e6027d4f2d3073b05c17d7381d9c9743e71"
                    ]
                },
                {
                    "command": [
                        "rewrite <- INR_IZR_INZ in H3; simpl in H3.",
                        "VernacExtend",
                        "ec214a7d139c1e2bc13fc55a6ab6cf445cfbf795"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H6 H3)).",
                        "VernacExtend",
                        "d39580f8679abf88a6c5bd50d89d3e6b98b651b1"
                    ]
                },
                {
                    "command": [
                        "apply le_n_S; apply le_O_n.",
                        "VernacExtend",
                        "050503db28f4619447bc14e30d11ebbc6c4e00ae"
                    ]
                },
                {
                    "command": [
                        "rewrite H15 in H13; elim H12; assumption.",
                        "VernacExtend",
                        "4df7ce2254505351e3d6f83cb397dfe7107364fb"
                    ]
                },
                {
                    "command": [
                        "split with (pred x0); unfold E in H13; elim H13; intros; elim H12; intros; rewrite H10 in H15; rewrite H8 in H15; rewrite <- INR_IZR_INZ in H15; assert (H16 : INR x0 = INR x1 + 1).",
                        "VernacExtend",
                        "43b62f0010d8050a854bcc794d20072e6c7e188c"
                    ]
                },
                {
                    "command": [
                        "rewrite H15; ring.",
                        "VernacExtend",
                        "22a8584a18e3b361294c026792081e0f026e5816"
                    ]
                },
                {
                    "command": [
                        "rewrite <- S_INR in H16; assert (H17 := INR_eq _ _ H16); rewrite H17; simpl; split.",
                        "VernacExtend",
                        "752d24c9546c81586f2e7663823b27a092d3f927"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros; apply INR_le; rewrite H15; rewrite <- H15; elim H12; intros; rewrite H20; apply H4; unfold E; exists i; split; [ assumption | reflexivity ].",
                        "VernacExtend",
                        "f1fa2ee17a8db2246bb45c2f010f6cf72e6d8316"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P1",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "intros a b f; unfold subdivision_val; case (projT2 (pre f)) as (x,H); apply H.",
                        "VernacExtend",
                        "20f21837d836a119f96b01917ff15f0879cbdd8b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P2",
            "line_nb": 71,
            "steps": [
                {
                    "command": [
                        "unfold adapted_couple; intros; decompose [and] H; clear H; repeat split; try assumption.",
                        "VernacExtend",
                        "e958878d3818e66c23f3675e70b16f301051fe8e"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; unfold Rmin; case (Rle_dec a b); intro; case (Rle_dec b a); intro; try reflexivity.",
                        "VernacExtend",
                        "d987c7b657a177761f31f6db25e3ef0794793d05"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; auto with real.",
                        "VernacExtend",
                        "74fbbdeb8a16e1ae52a9ca0ead3e3729b009b67a"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; unfold Rmax; case (Rle_dec a b); intro; case (Rle_dec b a); intro; try reflexivity.",
                        "VernacExtend",
                        "6d12cca1e9a2b1c6ca27de4017d547fb3de3aadd"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; auto with real.",
                        "VernacExtend",
                        "74fbbdeb8a16e1ae52a9ca0ead3e3729b009b67a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P3",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "intros; unfold adapted_couple; repeat split.",
                        "VernacExtend",
                        "d1d9509dbe38a3046f2e6a8fcf1859044972c954"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; intros; simpl in H0; inversion H0; [ simpl; assumption | elim (le_Sn_O _ H2) ].",
                        "VernacExtend",
                        "fd2851e9efe36d9db6ca5cdf03c14e84fb7e1cb2"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold Rmin; decide (Rle_dec a b) with H; reflexivity.",
                        "VernacExtend",
                        "a4fda8e02b4a9f10f58442ecbd9c2f991e904a7f"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold Rmax; decide (Rle_dec a b) with H; reflexivity.",
                        "VernacExtend",
                        "19f36d97868bae3b4c49e334e0bfa1f96c903a00"
                    ]
                },
                {
                    "command": [
                        "unfold constant_D_eq, open_interval; intros; simpl in H0; inversion H0; [ reflexivity | elim (le_Sn_O _ H3) ].",
                        "VernacExtend",
                        "b5244d06db42fc7b6f57df686452bb18d56edf26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P4",
            "line_nb": 87,
            "steps": [
                {
                    "command": [
                        "intros; unfold IsStepFun; destruct (Rle_dec a b) as [Hle|Hnle].",
                        "VernacExtend",
                        "7571f1b1df5affcb0932512db6d6c78bf0fbb082"
                    ]
                },
                {
                    "command": [
                        "apply existT with (cons a (cons b nil)); unfold is_subdivision; apply existT with (cons c nil); apply (StepFun_P3 c Hle).",
                        "VernacExtend",
                        "2eb251a0be03a963ea05925cb40b04d0f14f0ba3"
                    ]
                },
                {
                    "command": [
                        "apply existT with (cons b (cons a nil)); unfold is_subdivision; apply existT with (cons c nil); apply StepFun_P2; apply StepFun_P3; auto with real.",
                        "VernacExtend",
                        "9298bcd1a3cf4c189f146f36549ef941b4d14319"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P5",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "destruct 1 as (x,(H0,(H1,(H2,(H3,H4))))); exists x; repeat split; try assumption.",
                        "VernacExtend",
                        "c0b4341d344b6674cb5e2433bcdaa4b188df904a"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; apply Rmin_comm.",
                        "VernacExtend",
                        "5d8c7339f70659ea6a48c1fb4df7bfc82c2c4fde"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; apply Rmax_comm.",
                        "VernacExtend",
                        "f9e71292e076d5db1803c88c523d73cf744f88c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P6",
            "line_nb": 97,
            "steps": [
                {
                    "command": [
                        "unfold IsStepFun; intros; elim X; intros; apply existT with x; apply StepFun_P5; assumption.",
                        "VernacExtend",
                        "15424728be5d084016d4af1ea02892223fffe896"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P7",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "unfold adapted_couple; intros; decompose [and] H0; clear H0; assert (H5 : Rmax a b = b).",
                        "VernacExtend",
                        "ab929f046dd03a819c73a92e306ae76342f714ae"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with H; reflexivity.",
                        "VernacExtend",
                        "a38044ef0a7a46792cf6035f8edfa2f15d360b04"
                    ]
                },
                {
                    "command": [
                        "assert (H7 : r2 <= b).",
                        "VernacExtend",
                        "4b328389740e12f4466b0f68f7dc3d195c9f4ec6"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H2; rewrite <- H2; apply RList_P7; [ assumption | simpl; right; left; reflexivity ].",
                        "VernacExtend",
                        "dc70dd0962e7ad75114448235c480c77226729e7"
                    ]
                },
                {
                    "command": [
                        "repeat split.",
                        "VernacExtend",
                        "7968f2448e3e51b1de42f5c433248f4a827b4da2"
                    ]
                },
                {
                    "command": [
                        "apply RList_P4 with r1; assumption.",
                        "VernacExtend",
                        "f8f699252f556c73be950f01cbc3e3e84f0f8e81"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H2; unfold Rmin; decide (Rle_dec r2 b) with H7; reflexivity.",
                        "VernacExtend",
                        "f1b7461701ffb57d11e5b1b4c99ea3e24c7923c2"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec r2 b) with H7.",
                        "VernacExtend",
                        "e0b8bab563bf5c99445fbf9ce3609a54df167d19"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H2; rewrite <- H2; reflexivity.",
                        "VernacExtend",
                        "c9622880f22c5e3ae1d0b3850189862c7b95afdf"
                    ]
                },
                {
                    "command": [
                        "simpl in H4; simpl; apply INR_eq; apply Rplus_eq_reg_l with 1; do 2 rewrite (Rplus_comm 1); do 2 rewrite <- S_INR; rewrite H4; reflexivity.",
                        "VernacExtend",
                        "0ba900bd5688d7b7d690426a5563a2b487470e00"
                    ]
                },
                {
                    "command": [
                        "intros; unfold constant_D_eq, open_interval; intros; unfold constant_D_eq, open_interval in H6; assert (H9 : (S i < pred (Rlength (cons r1 (cons r2 l))))%nat).",
                        "VernacExtend",
                        "fe356f9d4ad909269c6dd9ec24a4ba2aa79e00fa"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H0; apply lt_n_S; assumption.",
                        "VernacExtend",
                        "90e664ae5d2092d8679f207bebdb6aa390708f1d"
                    ]
                },
                {
                    "command": [
                        "assert (H10 := H6 _ H9); apply H10; assumption.",
                        "VernacExtend",
                        "443c4800481f50592cc5583d0f9694c36cc1c587"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P8",
            "line_nb": 115,
            "steps": [
                {
                    "command": [
                        "simple induction l1.",
                        "VernacExtend",
                        "69eb8e5acc7e7ab67e5123da9f7373646b134ff7"
                    ]
                },
                {
                    "command": [
                        "intros; induction lf1 as [| r lf1 Hreclf1]; reflexivity.",
                        "VernacExtend",
                        "77b165f0a902263a221471e9b1ecf1f2008d5878"
                    ]
                },
                {
                    "command": [
                        "simple induction r0.",
                        "VernacExtend",
                        "3cd54584b7d76a051ea25914c5484966487340a3"
                    ]
                },
                {
                    "command": [
                        "intros; induction lf1 as [| r1 lf1 Hreclf1].",
                        "VernacExtend",
                        "e55a70b5682491d029662ccd692257f85ac82174"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold adapted_couple in H0; decompose [and] H0; clear H0; simpl in H5; discriminate.",
                        "VernacExtend",
                        "e744618c44be9d71b1e1316fde0751abdf88004f"
                    ]
                },
                {
                    "command": [
                        "intros; induction lf1 as [| r3 lf1 Hreclf1].",
                        "VernacExtend",
                        "a019560d4bf009826f368e1042618207ee92d041"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl; cut (r = r1).",
                        "VernacExtend",
                        "5913d67e5ee0c326756008b0c29157547873dd56"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H3; rewrite (H0 lf1 r b).",
                        "VernacExtend",
                        "e20c0554f8e0589e718033e75dc9e1b236980cc5"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "rewrite H3; apply StepFun_P7 with a r r3; [ right; assumption | assumption ].",
                        "VernacExtend",
                        "70efbc70d99b33f7a154bee6c9c431e27f5fdca0"
                    ]
                },
                {
                    "command": [
                        "clear H H0 Hreclf1 r0; unfold adapted_couple in H1; decompose [and] H1; intros; simpl in H4; rewrite H4; unfold Rmin; case (Rle_dec a b); intro; [ assumption | reflexivity ].",
                        "VernacExtend",
                        "82472eb2b4fc0ebc9f505abaf47005c12a5b3ff8"
                    ]
                },
                {
                    "command": [
                        "unfold adapted_couple in H1; decompose [and] H1; intros; apply Rle_antisym.",
                        "VernacExtend",
                        "5b62ec984c27caba7a857d529a5dffc4393f7734"
                    ]
                },
                {
                    "command": [
                        "apply (H3 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "8a4eb40d0923960f1da5281ec4953e877eb50833"
                    ]
                },
                {
                    "command": [
                        "simpl in H5; rewrite H2 in H5; rewrite H5; replace (Rmin b b) with (Rmax a b); [ rewrite <- H4; apply RList_P7; [ assumption | simpl; right; left; reflexivity ] | unfold Rmin, Rmax; case (Rle_dec b b); case (Rle_dec a b); intros; try assumption || reflexivity ].",
                        "VernacExtend",
                        "5b558c51ab871680d5b383b68ad21dcea1c2e3be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P9",
            "line_nb": 133,
            "steps": [
                {
                    "command": [
                        "intros; unfold adapted_couple in H; decompose [and] H; clear H; induction l as [| r l Hrecl]; [ simpl in H4; discriminate | induction l as [| r0 l Hrecl0]; [ simpl in H3; simpl in H2; generalize H3; generalize H2; unfold Rmin, Rmax; case (Rle_dec a b); intros; elim H0; rewrite <- H5; rewrite <- H7; reflexivity | simpl; do 2 apply le_n_S; apply le_O_n ] ].",
                        "VernacExtend",
                        "a87c01ea3780035a97a8f60b6033b598d3cbbae2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P10",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "simple induction l.",
                        "VernacExtend",
                        "baf54048118103088e518cfa16c3b5327b3c1c28"
                    ]
                },
                {
                    "command": [
                        "intros; unfold adapted_couple in H0; decompose [and] H0; simpl in H4; discriminate.",
                        "VernacExtend",
                        "d16508bc36a4b13b732d9b16c06ed6a42edbbac5"
                    ]
                },
                {
                    "command": [
                        "intros; case (Req_dec a b); intro.",
                        "VernacExtend",
                        "4d962706f09ea9fb8d64324daeae28a376a10344"
                    ]
                },
                {
                    "command": [
                        "exists (cons a nil); exists nil; unfold adapted_couple_opt; unfold adapted_couple; unfold ordered_Rlist; repeat split; try (intros; simpl in H3; elim (lt_n_O _ H3)).",
                        "VernacExtend",
                        "04683133e63f055da28ad4085911e99d2a36c6db"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite <- H2; unfold Rmin; case (Rle_dec a a); intro; reflexivity.",
                        "VernacExtend",
                        "85fcca9dc4ac13ffb6bd2e583efe9c6f7681b218"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite <- H2; unfold Rmax; case (Rle_dec a a); intro; reflexivity.",
                        "VernacExtend",
                        "4fa9a0145f6693959a009514cf42cb08acfde966"
                    ]
                },
                {
                    "command": [
                        "elim (RList_P20 _ (StepFun_P9 H1 H2)); intros t1 [t2 [t3 H3]]; induction lf as [| r1 lf Hreclf].",
                        "VernacExtend",
                        "92aa0eeb3278ee93ef454fd6ca171959a555a8af"
                    ]
                },
                {
                    "command": [
                        "unfold adapted_couple in H1; decompose [and] H1; rewrite H3 in H7; simpl in H7; discriminate.",
                        "VernacExtend",
                        "9976669c8e5af2dbae9557b0d7635a918a40278f"
                    ]
                },
                {
                    "command": [
                        "clear Hreclf; assert (H4 : adapted_couple f t2 b r0 lf).",
                        "VernacExtend",
                        "c409b7447e4aa65c0ba8e840161b4eebf60a2b95"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H1; assert (H4 := RList_P21 _ _ H3); simpl in H4; rewrite H4; eapply StepFun_P7; [ apply H0 | apply H1 ].",
                        "VernacExtend",
                        "c1a7df9b7fc1d6393a1a75de04de0bc9cb72aef9"
                    ]
                },
                {
                    "command": [
                        "cut (t2 <= b).",
                        "VernacExtend",
                        "4de8e6bb6783c54141af717d2aa2aed40702c210"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H6 := H _ _ _ H5 H4); case (Req_dec t1 t2); intro Hyp_eq.",
                        "VernacExtend",
                        "8873e2e637be427181159189769e63433b9c7db7"
                    ]
                },
                {
                    "command": [
                        "replace a with t2.",
                        "VernacExtend",
                        "30e648e5aaa6e8e0bbba37039a5f434e9f71307b"
                    ]
                },
                {
                    "command": [
                        "apply H6.",
                        "VernacExtend",
                        "b0314bbdc776869d305067ca471096a36fa958c1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hyp_eq; rewrite H3 in H1; unfold adapted_couple in H1; decompose [and] H1; clear H1; simpl in H9; rewrite H9; unfold Rmin; decide (Rle_dec a b) with H0; reflexivity.",
                        "VernacExtend",
                        "994a47985f382a2c50b2a5a3e308d5aa2e8e063e"
                    ]
                },
                {
                    "command": [
                        "elim H6; clear H6; intros l' [lf' H6]; case (Req_dec t2 b); intro.",
                        "VernacExtend",
                        "7fada929e6b52d12e75115837aab1d7a4bbee772"
                    ]
                },
                {
                    "command": [
                        "exists (cons a (cons b nil)); exists (cons r1 nil); unfold adapted_couple_opt; unfold adapted_couple; repeat split.",
                        "VernacExtend",
                        "9d68f80e721a5ec99fb3121bdb87dc7250867832"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; intros; simpl in H8; inversion H8; [ simpl; assumption | elim (le_Sn_O _ H10) ].",
                        "VernacExtend",
                        "2340e8a020c513cc9c9ac0adbd5316e68689d5bb"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold Rmin; decide (Rle_dec a b) with H0; reflexivity.",
                        "VernacExtend",
                        "75f16c5f7fdcead4971eb98f4ef39e32ad62e024"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold Rmax; decide (Rle_dec a b) with H0; reflexivity.",
                        "VernacExtend",
                        "628d5940b54bb068b6ac0cee7e2c366d7961b021"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H8; inversion H8.",
                        "VernacExtend",
                        "3e6503290c5f17a7f7a07509b91b884b39e37ac7"
                    ]
                },
                {
                    "command": [
                        "unfold constant_D_eq, open_interval; intros; simpl; simpl in H9; rewrite H3 in H1; unfold adapted_couple in H1; decompose [and] H1; apply (H16 0%nat).",
                        "VernacExtend",
                        "403941686f43f0db17266fa80213e6ebd0fa7b71"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "92647c7b432ca8163d2189148afd540a600c4def"
                    ]
                },
                {
                    "command": [
                        "unfold open_interval; simpl; rewrite H7; simpl in H13; rewrite H13; unfold Rmin; decide (Rle_dec a b) with H0; assumption.",
                        "VernacExtend",
                        "436d9eb391b8c62c536df58aa6bef1730f339ae8"
                    ]
                },
                {
                    "command": [
                        "elim (le_Sn_O _ H10).",
                        "VernacExtend",
                        "f43cd43fb6837d9151bc0ca604e251d8b9448999"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H8; elim (lt_n_O _ H8).",
                        "VernacExtend",
                        "b4a172447e86a18826038ce25b6f80f4062aad5d"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H8; inversion H8; [ simpl; assumption | elim (le_Sn_O _ H10) ].",
                        "VernacExtend",
                        "f7125f1fd2252a232a72b829165eaccd6db0faab"
                    ]
                },
                {
                    "command": [
                        "assert (Hyp_min : Rmin t2 b = t2).",
                        "VernacExtend",
                        "486f4508a449eed5fcf882a1a74d1ecdabd4a870"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec t2 b) with H5; reflexivity.",
                        "VernacExtend",
                        "b5f3fc4384119810c0ff623eb99d0d8d7abf81a7"
                    ]
                },
                {
                    "command": [
                        "unfold adapted_couple in H6; elim H6; clear H6; intros; elim (RList_P20 _ (StepFun_P9 H6 H7)); intros s1 [s2 [s3 H9]]; induction lf' as [| r2 lf' Hreclf'].",
                        "VernacExtend",
                        "37bcdc9498f93bccb5c6910220db6b78150ba75b"
                    ]
                },
                {
                    "command": [
                        "unfold adapted_couple in H6; decompose [and] H6; rewrite H9 in H13; simpl in H13; discriminate.",
                        "VernacExtend",
                        "5921e525378d8d106d7b7b3673439dfd72ab88fe"
                    ]
                },
                {
                    "command": [
                        "clear Hreclf'; case (Req_dec r1 r2); intro.",
                        "VernacExtend",
                        "94b62d8359b8cace6c3d470aba354df3ae4d4766"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec (f t2) r1); intro.",
                        "VernacExtend",
                        "1d200e0016855a2a4391768302439a490d86f187"
                    ]
                },
                {
                    "command": [
                        "exists (cons t1 (cons s2 s3)); exists (cons r1 lf'); rewrite H3 in H1; rewrite H9 in H6; unfold adapted_couple in H6, H1; decompose [and] H1; decompose [and] H6; clear H1 H6; unfold adapted_couple_opt; unfold adapted_couple; repeat split.",
                        "VernacExtend",
                        "92ca9cf990fcde0044ddff07687f730ef2321d1b"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; intros; simpl in H1; induction i as [| i Hreci].",
                        "VernacExtend",
                        "7759d28eaffa30cde738736b393bc10ec9957765"
                    ]
                },
                {
                    "command": [
                        "simpl; apply Rle_trans with s1.",
                        "VernacExtend",
                        "07edd46124373075a9b97e49cb6c03b55f827705"
                    ]
                },
                {
                    "command": [
                        "replace s1 with t2.",
                        "VernacExtend",
                        "183bc6cb4e04bcf8dd21e619bcdcd2228843e1c3"
                    ]
                },
                {
                    "command": [
                        "apply (H12 0%nat).",
                        "VernacExtend",
                        "5ac17da0e4d327bcefe8326c6813131847ab8de9"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "92647c7b432ca8163d2189148afd540a600c4def"
                    ]
                },
                {
                    "command": [
                        "simpl in H19; rewrite H19; symmetry ; apply Hyp_min.",
                        "VernacExtend",
                        "e077383cb5fd152e8815689ac21ce12ce0c59224"
                    ]
                },
                {
                    "command": [
                        "apply (H16 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "428c4aad4a0c590ebf5131574c2cf5ae9d45437a"
                    ]
                },
                {
                    "command": [
                        "change (pos_Rl (cons s2 s3) i <= pos_Rl (cons s2 s3) (S i)); apply (H16 (S i)); simpl; assumption.",
                        "VernacExtend",
                        "940c5b75ea8c5f604b91cc4be8fe839b8d5fbaa1"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H14; rewrite H14; reflexivity.",
                        "VernacExtend",
                        "2b4770c63eac7ca864e23375f81b558b39c36eb8"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H18; rewrite H18; unfold Rmax; decide (Rle_dec a b) with H0; decide (Rle_dec t2 b) with H5; reflexivity.",
                        "VernacExtend",
                        "03f59656eddce2a866dd5aa83b703864e1622531"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H20; apply H20.",
                        "VernacExtend",
                        "0808aa006813035a9b8596c37002606acaf5d0d6"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H1; unfold constant_D_eq, open_interval; intros; induction i as [| i Hreci].",
                        "VernacExtend",
                        "db4514cca9d143eb929d83cb2d2777ae593ca40d"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H6; destruct (total_order_T x t2) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "8e832f728d4a8d0f1cabed3a517dc842a1f4beee"
                    ]
                },
                {
                    "command": [
                        "apply (H17 0%nat); [ simpl; apply lt_O_Sn | unfold open_interval; simpl; elim H6; intros; split; assumption ].",
                        "VernacExtend",
                        "6f230da77c96d65c1475f1ab9867b278d0063e52"
                    ]
                },
                {
                    "command": [
                        "rewrite Heq; assumption.",
                        "VernacExtend",
                        "d4276998e75f405c1f9a5d5b84458d467ad412bc"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; apply (H22 0%nat); [ simpl; apply lt_O_Sn | unfold open_interval; simpl; replace s1 with t2; [ elim H6; intros; split; assumption | simpl in H19; rewrite H19; rewrite Hyp_min; reflexivity ] ].",
                        "VernacExtend",
                        "521dee9b3293ac35ddad599d1c42f524f91f9fdd"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H6; apply (H22 (S i)); [ simpl; assumption | unfold open_interval; simpl; apply H6 ].",
                        "VernacExtend",
                        "8b970b652a9a8c8d3ecdc0884c2ed8eff75bd72c"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H1; rewrite H10; change (pos_Rl (cons r2 lf') i <> pos_Rl (cons r2 lf') (S i) \\/ f (pos_Rl (cons s1 (cons s2 s3)) (S i)) <> pos_Rl (cons r2 lf') i) ; rewrite <- H9; elim H8; intros; apply H6; simpl; apply H1.",
                        "VernacExtend",
                        "62bfa34b8112a2283411e2a827e7e5543c39bc71"
                    ]
                },
                {
                    "command": [
                        "intros; induction i as [| i Hreci].",
                        "VernacExtend",
                        "c9adc63016258b96a0e1d467a9bcaf9fe9e89584"
                    ]
                },
                {
                    "command": [
                        "simpl; red; intro; elim Hyp_eq; apply Rle_antisym.",
                        "VernacExtend",
                        "e5f7c5f796d279a71a82577b931773ab8cd66338"
                    ]
                },
                {
                    "command": [
                        "apply (H12 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "b33054d0ad9d538defb5255f1e9fc6a916c966ac"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hyp_min; rewrite H6; simpl in H19; rewrite <- H19; apply (H16 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "856125cbad919f6ab7523911c43cf3f41fac0862"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; rewrite H9 in H21; apply (H21 (S i)); simpl; simpl in H1; apply H1.",
                        "VernacExtend",
                        "782d91c1d5a9aefb3520f515311bf9c3edb888a9"
                    ]
                },
                {
                    "command": [
                        "exists (cons t1 l'); exists (cons r1 (cons r2 lf')); rewrite H9 in H6; rewrite H3 in H1; unfold adapted_couple in H1, H6; decompose [and] H6; decompose [and] H1; clear H6 H1; unfold adapted_couple_opt; unfold adapted_couple; repeat split.",
                        "VernacExtend",
                        "347a99da57282f7023556952cf5d9d85f0ba3cc8"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; unfold ordered_Rlist; intros; simpl in H1; induction i as [| i Hreci].",
                        "VernacExtend",
                        "592a5799f69c07c1eeb5a4ba16b676847a502fbc"
                    ]
                },
                {
                    "command": [
                        "simpl; replace s1 with t2.",
                        "VernacExtend",
                        "d762f8699bb474546239d4f801d674fe7cd32381"
                    ]
                },
                {
                    "command": [
                        "apply (H16 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "428c4aad4a0c590ebf5131574c2cf5ae9d45437a"
                    ]
                },
                {
                    "command": [
                        "simpl in H14; rewrite H14; rewrite Hyp_min; reflexivity.",
                        "VernacExtend",
                        "3addbb533747cbad708efc86be59b85f1c4d0ab4"
                    ]
                },
                {
                    "command": [
                        "change (pos_Rl (cons s1 (cons s2 s3)) i <= pos_Rl (cons s1 (cons s2 s3)) (S i)) ; apply (H12 i); simpl; apply lt_S_n; assumption.",
                        "VernacExtend",
                        "a046af06c76e1f210b8fec6b51c6ba6d7e4f18c1"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H19; apply H19.",
                        "VernacExtend",
                        "f6f77a8c32cf5bd167656cc79659d4d3eb54e2bf"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; simpl; simpl in H13; rewrite H13; unfold Rmax; decide (Rle_dec t2 b) with H5; decide (Rle_dec a b) with H0; reflexivity.",
                        "VernacExtend",
                        "817418ae1521107d76a728d0694c3972fb74dca7"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; simpl; simpl in H15; rewrite H15; reflexivity.",
                        "VernacExtend",
                        "351d242ba9217840b1c2d2177847b2c8ab2b93c7"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H1; unfold constant_D_eq, open_interval; intros; induction i as [| i Hreci].",
                        "VernacExtend",
                        "db4514cca9d143eb929d83cb2d2777ae593ca40d"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H9 in H6; simpl in H6; apply (H22 0%nat).",
                        "VernacExtend",
                        "0dba4deccec5d3f6e7a5891be0544288775cb622"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "92647c7b432ca8163d2189148afd540a600c4def"
                    ]
                },
                {
                    "command": [
                        "unfold open_interval; simpl.",
                        "VernacExtend",
                        "6654e93d6b5a532a0b5d681bfded40770c826d62"
                    ]
                },
                {
                    "command": [
                        "replace t2 with s1.",
                        "VernacExtend",
                        "1a440fa94400f48054d19a26b528c0eb5e8a7960"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "simpl in H14; rewrite H14; rewrite Hyp_min; reflexivity.",
                        "VernacExtend",
                        "3addbb533747cbad708efc86be59b85f1c4d0ab4"
                    ]
                },
                {
                    "command": [
                        "change (f x = pos_Rl (cons r2 lf') i); clear Hreci; apply (H17 i).",
                        "VernacExtend",
                        "c99096c5c04a7b45a111c8d140f93dbe0577c17f"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H9 in H1; simpl in H1; apply lt_S_n; apply H1.",
                        "VernacExtend",
                        "0cc1b26e34ebb0fa10bd08385f5bb2208d75fa2b"
                    ]
                },
                {
                    "command": [
                        "rewrite H9 in H6; unfold open_interval; apply H6.",
                        "VernacExtend",
                        "a3de6e1c419fa39fcab830d3b799a4d6794b3706"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H1; induction i as [| i Hreci].",
                        "VernacExtend",
                        "bd8c707a583d697fca6b0348f432c426513334b6"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H9; right; simpl; replace s1 with t2.",
                        "VernacExtend",
                        "67707abd761e55cbf56eff53c063bcfdb217fe37"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "simpl in H14; rewrite H14; rewrite Hyp_min; reflexivity.",
                        "VernacExtend",
                        "3addbb533747cbad708efc86be59b85f1c4d0ab4"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; apply (H6 i).",
                        "VernacExtend",
                        "382599a5fac1d9083b3bbc65dabb341fd8b20fe3"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_S_n; apply H1.",
                        "VernacExtend",
                        "2d062bf2ceaffc9bc864f9fbb552012f44bbbe5a"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H9; induction i as [| i Hreci].",
                        "VernacExtend",
                        "f33464bfbab3b74a0ce318c799ad9244f9601182"
                    ]
                },
                {
                    "command": [
                        "simpl; red; intro; elim Hyp_eq; apply Rle_antisym.",
                        "VernacExtend",
                        "e5f7c5f796d279a71a82577b931773ab8cd66338"
                    ]
                },
                {
                    "command": [
                        "apply (H16 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "428c4aad4a0c590ebf5131574c2cf5ae9d45437a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hyp_min; rewrite H6; simpl in H14; rewrite <- H14; right; reflexivity.",
                        "VernacExtend",
                        "4d7f0fc6d72f4c8e46f1bd52a928d90481f92847"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; rewrite <- H9; apply (H21 i); rewrite H9; rewrite H9 in H1; simpl; simpl in H1; apply lt_S_n; apply H1.",
                        "VernacExtend",
                        "f2cdb2e6052eede0b3c50306b3d76c8ccb2c794c"
                    ]
                },
                {
                    "command": [
                        "exists (cons t1 l'); exists (cons r1 (cons r2 lf')); rewrite H9 in H6; rewrite H3 in H1; unfold adapted_couple in H1, H6; decompose [and] H6; decompose [and] H1; clear H6 H1; unfold adapted_couple_opt; unfold adapted_couple; repeat split.",
                        "VernacExtend",
                        "347a99da57282f7023556952cf5d9d85f0ba3cc8"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; unfold ordered_Rlist; intros; simpl in H1; induction i as [| i Hreci].",
                        "VernacExtend",
                        "592a5799f69c07c1eeb5a4ba16b676847a502fbc"
                    ]
                },
                {
                    "command": [
                        "simpl; replace s1 with t2.",
                        "VernacExtend",
                        "d762f8699bb474546239d4f801d674fe7cd32381"
                    ]
                },
                {
                    "command": [
                        "apply (H15 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "814c83f6c34f399ed1835cbddb47c3e7b402db12"
                    ]
                },
                {
                    "command": [
                        "simpl in H13; rewrite H13; rewrite Hyp_min; reflexivity.",
                        "VernacExtend",
                        "66cc102cd2e8f70a5bfb383a0b749bb3c6680129"
                    ]
                },
                {
                    "command": [
                        "change (pos_Rl (cons s1 (cons s2 s3)) i <= pos_Rl (cons s1 (cons s2 s3)) (S i)) ; apply (H11 i); simpl; apply lt_S_n; assumption.",
                        "VernacExtend",
                        "ff29d0b3f699200975f0fd0f3f1806ba1fc2dc1e"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H18; apply H18.",
                        "VernacExtend",
                        "39e97ed143d685b5316d885a4a7b029796a892a5"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; simpl; simpl in H12; rewrite H12; unfold Rmax; decide (Rle_dec t2 b) with H5; decide (Rle_dec a b) with H0; reflexivity.",
                        "VernacExtend",
                        "0a11be01684d3872edc5a6ae0c54893c4c3c1655"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; simpl; simpl in H14; rewrite H14; reflexivity.",
                        "VernacExtend",
                        "cba227839456d4c3629b4057ffa60ad1b6a3493b"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H1; unfold constant_D_eq, open_interval; intros; induction i as [| i Hreci].",
                        "VernacExtend",
                        "db4514cca9d143eb929d83cb2d2777ae593ca40d"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H9 in H6; simpl in H6; apply (H21 0%nat).",
                        "VernacExtend",
                        "f02c7e31e36a913afe6e2fbb55eddc6c6dc36af4"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "92647c7b432ca8163d2189148afd540a600c4def"
                    ]
                },
                {
                    "command": [
                        "unfold open_interval; simpl; replace t2 with s1.",
                        "VernacExtend",
                        "b5e42359cfef60ac668adcd3ce9287fccc8f78b9"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "simpl in H13; rewrite H13; rewrite Hyp_min; reflexivity.",
                        "VernacExtend",
                        "66cc102cd2e8f70a5bfb383a0b749bb3c6680129"
                    ]
                },
                {
                    "command": [
                        "change (f x = pos_Rl (cons r2 lf') i); clear Hreci; apply (H16 i).",
                        "VernacExtend",
                        "4708ca6313148e4f53e35636cd73d7dbe168a83f"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H9 in H1; simpl in H1; apply lt_S_n; apply H1.",
                        "VernacExtend",
                        "0cc1b26e34ebb0fa10bd08385f5bb2208d75fa2b"
                    ]
                },
                {
                    "command": [
                        "rewrite H9 in H6; unfold open_interval; apply H6.",
                        "VernacExtend",
                        "a3de6e1c419fa39fcab830d3b799a4d6794b3706"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H1; induction i as [| i Hreci].",
                        "VernacExtend",
                        "bd8c707a583d697fca6b0348f432c426513334b6"
                    ]
                },
                {
                    "command": [
                        "simpl; left; assumption.",
                        "VernacExtend",
                        "3d5b25df5e593409b5cd5a97aa73c42d73c6749a"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; apply (H6 i).",
                        "VernacExtend",
                        "382599a5fac1d9083b3bbc65dabb341fd8b20fe3"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_S_n; apply H1.",
                        "VernacExtend",
                        "2d062bf2ceaffc9bc864f9fbb552012f44bbbe5a"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H9; induction i as [| i Hreci].",
                        "VernacExtend",
                        "f33464bfbab3b74a0ce318c799ad9244f9601182"
                    ]
                },
                {
                    "command": [
                        "simpl; red; intro; elim Hyp_eq; apply Rle_antisym.",
                        "VernacExtend",
                        "e5f7c5f796d279a71a82577b931773ab8cd66338"
                    ]
                },
                {
                    "command": [
                        "apply (H15 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "814c83f6c34f399ed1835cbddb47c3e7b402db12"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Hyp_min; rewrite H6; simpl in H13; rewrite <- H13; right; reflexivity.",
                        "VernacExtend",
                        "7ae49d8b2eed88cc9ecd3f579f8772644756dccc"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; rewrite <- H9; apply (H20 i); rewrite H9; rewrite H9 in H1; simpl; simpl in H1; apply lt_S_n; apply H1.",
                        "VernacExtend",
                        "b7ef1ec956bd84c6a70d79396772f0f26ad17b3a"
                    ]
                },
                {
                    "command": [
                        "rewrite H3 in H1; clear H4; unfold adapted_couple in H1; decompose [and] H1; clear H1; clear H H7 H9; cut (Rmax a b = b); [ intro; rewrite H in H5; rewrite <- H5; apply RList_P7; [ assumption | simpl; right; left; reflexivity ] | unfold Rmax; decide (Rle_dec a b) with H0; reflexivity ].",
                        "VernacExtend",
                        "cc5798c3bf67a6aa6ebfb21fee2d53455b8f4c7b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P11",
            "line_nb": 253,
            "steps": [
                {
                    "command": [
                        "intros; unfold adapted_couple_opt in H1; elim H1; clear H1; intros; unfold adapted_couple in H0, H1; decompose [and] H0; decompose [and] H1; clear H0 H1; assert (H12 : r = s1).",
                        "VernacExtend",
                        "0de82507b1adda8317d21ee74ac4711f55b68253"
                    ]
                },
                {
                    "command": [
                        "simpl in H10; simpl in H5; rewrite H10; rewrite H5; reflexivity.",
                        "VernacExtend",
                        "3e96b65d1996fee02a0dea917d18d0b53ac28132"
                    ]
                },
                {
                    "command": [
                        "assert (H14 := H3 0%nat (lt_O_Sn _)); simpl in H14; elim H14; intro.",
                        "VernacExtend",
                        "cfaba5a11f8ba91f0db3d5a6ad63c1d01faf0e73"
                    ]
                },
                {
                    "command": [
                        "assert (H15 := H7 0%nat (lt_O_Sn _)); simpl in H15; elim H15; intro.",
                        "VernacExtend",
                        "59100bae718159773df082f06a3d19aaae549d7f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H12 in H1; destruct (Rle_dec r1 s2) as [Hle|Hnle]; try assumption.",
                        "VernacExtend",
                        "4a7d84de7c1d7b66f3b8d3a4360a738b465f8467"
                    ]
                },
                {
                    "command": [
                        "assert (H16 : s2 < r1); auto with real.",
                        "VernacExtend",
                        "27e22e4c0eb5e421aed51853297e217aea83cabb"
                    ]
                },
                {
                    "command": [
                        "induction s3 as [| r0 s3 Hrecs3].",
                        "VernacExtend",
                        "01a012a1560a830bfac3d6a1da27776095b17492"
                    ]
                },
                {
                    "command": [
                        "simpl in H9; rewrite H9 in H16; cut (r1 <= Rmax a b).",
                        "VernacExtend",
                        "9f412a72f030941b53dd2a0df69c06eff29a1588"
                    ]
                },
                {
                    "command": [
                        "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H17 H16)).",
                        "VernacExtend",
                        "e484444fe20b8172e3b43effb0a9ff420bf024ce"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H4; apply RList_P7; [ assumption | simpl; right; left; reflexivity ].",
                        "VernacExtend",
                        "c4f209beeb86ce085c453f03ef593447845e2955"
                    ]
                },
                {
                    "command": [
                        "clear Hrecs3; induction lf2 as [| r5 lf2 Hreclf2].",
                        "VernacExtend",
                        "445d16dcf559d0bff305773e9747dc6495ea86d5"
                    ]
                },
                {
                    "command": [
                        "simpl in H11; discriminate.",
                        "VernacExtend",
                        "abb166ceb57b248f1360fb7426ffee9cc54d48dc"
                    ]
                },
                {
                    "command": [
                        "clear Hreclf2; assert (H17 : r3 = r4).",
                        "VernacExtend",
                        "330d2a03b643de54beef2bf4622b456768f44162"
                    ]
                },
                {
                    "command": [
                        "set (x := (r + s2) / 2); assert (H17 := H8 0%nat (lt_O_Sn _)); assert (H18 := H13 0%nat (lt_O_Sn _)); unfold constant_D_eq, open_interval in H17, H18; simpl in H17; simpl in H18; rewrite <- (H17 x).",
                        "VernacExtend",
                        "27b976f625f1bb4ff01c9deff7ac7e4a90e5699e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (H18 x).",
                        "VernacExtend",
                        "7ddf43e28f69fe92614c973df9f42a08be79f4e5"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H12; unfold x; split.",
                        "VernacExtend",
                        "08e5c3961437d04bb8e26c0f7854c24b7def1941"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "35b716538dd20af83cfdc7d9e6694d744aa20b44"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm r); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "66cff5df57c18291b8eb39b98b00c50590125778"
                    ]
                },
                {
                    "command": [
                        "unfold x; split.",
                        "VernacExtend",
                        "2effb1e2038dff9a09ff42a63b04c85a3737e909"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "35b716538dd20af83cfdc7d9e6694d744aa20b44"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with s2; [ apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm r); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ] | assumption ].",
                        "VernacExtend",
                        "35db2aec47eded8ffbe393fa5c30f0edf91708d3"
                    ]
                },
                {
                    "command": [
                        "assert (H18 : f s2 = r3).",
                        "VernacExtend",
                        "3d3a12be1a405fd76a6e05866162e4de88e46e5d"
                    ]
                },
                {
                    "command": [
                        "apply (H8 0%nat); [ simpl; apply lt_O_Sn | unfold open_interval; simpl; split; assumption ].",
                        "VernacExtend",
                        "54348d3c9f42075ae78cafb2ac6d47ccf3ab0c31"
                    ]
                },
                {
                    "command": [
                        "assert (H19 : r3 = r5).",
                        "VernacExtend",
                        "811b4e8bf2a9fe81505fd5db2579ccde704d5270"
                    ]
                },
                {
                    "command": [
                        "assert (H19 := H7 1%nat); simpl in H19; assert (H20 := H19 (lt_n_S _ _ (lt_O_Sn _))); elim H20; intro.",
                        "VernacExtend",
                        "4d5f2ce861f3b432f73af88ea7e7fc56cacaa10a"
                    ]
                },
                {
                    "command": [
                        "set (x := (s2 + Rmin r1 r0) / 2); assert (H22 := H8 0%nat); assert (H23 := H13 1%nat); simpl in H22; simpl in H23; rewrite <- (H22 (lt_O_Sn _) x).",
                        "VernacExtend",
                        "979aff78af108a7bd72eeade0615bef4852c2bcc"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (H23 (lt_n_S _ _ (lt_O_Sn _)) x).",
                        "VernacExtend",
                        "1664699851842769dc204ce19ca6bf2ed638a7f8"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold open_interval; simpl; unfold x; split.",
                        "VernacExtend",
                        "31341cc2e34ba229ff69388b82865ae49f387fdc"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; unfold Rmin; case (Rle_dec r1 r0); intro; assumption | discrR ] ].",
                        "VernacExtend",
                        "92d4369ada9031774f0453ff5a89252122376f44"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rlt_le_trans with (r0 + Rmin r1 r0); [ do 2 rewrite <- (Rplus_comm (Rmin r1 r0)); apply Rplus_lt_compat_l; assumption | apply Rplus_le_compat_l; apply Rmin_r ] | discrR ] ].",
                        "VernacExtend",
                        "7200c7c01609374776e7721dc408cba22b021048"
                    ]
                },
                {
                    "command": [
                        "unfold open_interval; simpl; unfold x; split.",
                        "VernacExtend",
                        "31341cc2e34ba229ff69388b82865ae49f387fdc"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with s2; [ assumption | apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; unfold Rmin; case (Rle_dec r1 r0); intro; assumption | discrR ] ] ].",
                        "VernacExtend",
                        "873ef0e7a32dadf7646de1b6950ed4f07f2f158a"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rlt_le_trans with (r1 + Rmin r1 r0); [ do 2 rewrite <- (Rplus_comm (Rmin r1 r0)); apply Rplus_lt_compat_l; assumption | apply Rplus_le_compat_l; apply Rmin_l ] | discrR ] ].",
                        "VernacExtend",
                        "56663dd0f5b9e90aedebf64657f9a5182f6b1280"
                    ]
                },
                {
                    "command": [
                        "elim H2; clear H2; intros; assert (H23 := H22 1%nat); simpl in H23; assert (H24 := H23 (lt_n_S _ _ (lt_O_Sn _))); elim H24; assumption.",
                        "VernacExtend",
                        "1c34b9ddb05abcaefd768e202b6abdbd8eeb6ed7"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros; assert (H22 := H20 0%nat); simpl in H22; assert (H23 := H22 (lt_O_Sn _)); elim H23; intro; [ elim H24; rewrite <- H17; rewrite <- H19; reflexivity | elim H24; rewrite <- H17; assumption ].",
                        "VernacExtend",
                        "558c22bab5e2b6c61de41f9aacccd242abf30b96"
                    ]
                },
                {
                    "command": [
                        "elim H2; clear H2; intros; assert (H17 := H16 0%nat); simpl in H17; elim (H17 (lt_O_Sn _)); assumption.",
                        "VernacExtend",
                        "8998ec726bc56f04afff40fd4c3ee71d39f03bf9"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H0; rewrite H12; apply (H7 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "5cfd89e8f8abb11abefc89db2eb43a031b97d0b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P12",
            "line_nb": 294,
            "steps": [
                {
                    "command": [
                        "unfold adapted_couple_opt; unfold adapted_couple; intros; decompose [and] H; clear H; repeat split; try assumption.",
                        "VernacExtend",
                        "c60e3c992dfa0b8823c5b0d1d7132147c5918d80"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; unfold Rmin; case (Rle_dec a b); intro; case (Rle_dec b a); intro; try reflexivity.",
                        "VernacExtend",
                        "8314c42a88eb3b67fa39b0a19a17e809a2acc50f"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; auto with real.",
                        "VernacExtend",
                        "74fbbdeb8a16e1ae52a9ca0ead3e3729b009b67a"
                    ]
                },
                {
                    "command": [
                        "rewrite H3; unfold Rmax; case (Rle_dec a b); intro; case (Rle_dec b a); intro; try reflexivity.",
                        "VernacExtend",
                        "ecf29b3886ec6b6fb46b1ed484d0d4059b8f1957"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; auto with real.",
                        "VernacExtend",
                        "74fbbdeb8a16e1ae52a9ca0ead3e3729b009b67a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P13",
            "line_nb": 303,
            "steps": [
                {
                    "command": [
                        "intros; destruct (total_order_T a b) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "55768aa47b4876037c49dc8f99dad72c397670b9"
                    ]
                },
                {
                    "command": [
                        "eapply StepFun_P11; [ apply Hlt | apply H0 | apply H1 ].",
                        "VernacExtend",
                        "58bdcad0444915a2401edd25e85179776f933ebe"
                    ]
                },
                {
                    "command": [
                        "elim H; assumption.",
                        "VernacExtend",
                        "208cbae6d4c505591733cd429d302ea8fd9c235a"
                    ]
                },
                {
                    "command": [
                        "eapply StepFun_P11; [ apply Hgt | apply StepFun_P2; apply H0 | apply StepFun_P12; apply H1 ].",
                        "VernacExtend",
                        "db1a75579b8959b1737f8afe745b6fc3ff5a3632"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P16",
            "line_nb": 437,
            "steps": [
                {
                    "command": [
                        "intros; destruct (Rle_dec a b) as [Hle|Hnle]; [ apply (StepFun_P10 Hle H) | assert (H1 : b <= a); [ auto with real | assert (H2 := StepFun_P10 H1 (StepFun_P2 H)); elim H2; intros l' [lf' H3]; exists l'; exists lf'; apply StepFun_P12; assumption ] ].",
                        "VernacExtend",
                        "437c4a208bae77d9a1c7b71ed86ab7d89c4ded92"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P17",
            "line_nb": 440,
            "steps": [
                {
                    "command": [
                        "intros; elim (StepFun_P16 H); intros l' [lf' H1]; rewrite (StepFun_P15 H H1); rewrite (StepFun_P15 H0 H1); reflexivity.",
                        "VernacExtend",
                        "9a04675bacecfbcd7cd510b0d0791eafa2cfaee6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P18",
            "line_nb": 443,
            "steps": [
                {
                    "command": [
                        "intros; unfold RiemannInt_SF; case (Rle_dec a b); intro.",
                        "VernacExtend",
                        "1b561ca7a7f16fd75bc6e2fe1c9d6bf5eb709bed"
                    ]
                },
                {
                    "command": [
                        "replace (Int_SF (subdivision_val (mkStepFun (StepFun_P4 a b c))) (subdivision (mkStepFun (StepFun_P4 a b c)))) with (Int_SF (cons c nil) (cons a (cons b nil))); [ simpl; ring | apply StepFun_P17 with (fct_cte c) a b; [ apply StepFun_P3; assumption | apply (StepFun_P1 (mkStepFun (StepFun_P4 a b c))) ] ].",
                        "VernacExtend",
                        "4f6bf0658a97efbe96a265a7c4bcc0a7e235b2a6"
                    ]
                },
                {
                    "command": [
                        "replace (Int_SF (subdivision_val (mkStepFun (StepFun_P4 a b c))) (subdivision (mkStepFun (StepFun_P4 a b c)))) with (Int_SF (cons c nil) (cons b (cons a nil))); [ simpl; ring | apply StepFun_P17 with (fct_cte c) a b; [ apply StepFun_P2; apply StepFun_P3; auto with real | apply (StepFun_P1 (mkStepFun (StepFun_P4 a b c))) ] ].",
                        "VernacExtend",
                        "f58b7cfbe2dfe8b268bb38effd8c1e58ad257528"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P19",
            "line_nb": 448,
            "steps": [
                {
                    "command": [
                        "intros; induction l1 as [| r l1 Hrecl1]; [ simpl; ring | induction l1 as [| r0 l1 Hrecl0]; simpl; [ ring | simpl in Hrecl1; rewrite Hrecl1; ring ] ].",
                        "VernacExtend",
                        "49e69caffaa7ede2af57962d3f362256353f6a31"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P20",
            "line_nb": 451,
            "steps": [
                {
                    "command": [
                        "intros l f H; induction l; [ elim (lt_irrefl _ H) | simpl; rewrite RList_P18; rewrite RList_P14; reflexivity ].",
                        "VernacExtend",
                        "f1ca77fe85dfb166511fd73b657ea4b716c595ab"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P21",
            "line_nb": 454,
            "steps": [
                {
                    "command": [
                        "intros * (x & H & H1 & H0 & H2 & H4).",
                        "VernacExtend",
                        "3cc6013815ae093fdcdf58a4f74c0eb39cfde76a"
                    ]
                },
                {
                    "command": [
                        "repeat split; try assumption.",
                        "VernacExtend",
                        "221a84919e803be5614ea6011742084cb77b34b6"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P20; rewrite H2; apply lt_O_Sn.",
                        "VernacExtend",
                        "8a9a44fd276ce5e9e35150b3c556164f13210ee9"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H5 := H4 _ H3); unfold constant_D_eq, open_interval in H5; unfold constant_D_eq, open_interval; intros; induction l as [| r l Hrecl].",
                        "VernacExtend",
                        "60250f6903031aaf7f82829a4ff879f6a6494186"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "unfold FF; rewrite RList_P12.",
                        "VernacExtend",
                        "575bf513b3d8c4238cf390a90a192bc0ef10f457"
                    ]
                },
                {
                    "command": [
                        "simpl; change (f x0 = f (pos_Rl (mid_Rlist (cons r l) r) (S i))); rewrite RList_P13; try assumption; rewrite (H5 x0 H6); rewrite H5.",
                        "VernacExtend",
                        "1a4f2296f2196e6bb528e458f4cbfa25269c057e"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; elim H6; intros; apply Rlt_trans with x0; assumption | discrR ] ].",
                        "VernacExtend",
                        "e052ae203d773e40dd5378230cf7f63922bf7b06"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; rewrite (Rplus_comm (pos_Rl (cons r l) i)); apply Rplus_lt_compat_l; elim H6; intros; apply Rlt_trans with x0; assumption | discrR ] ].",
                        "VernacExtend",
                        "19b16d7897da0eb688a3a93246bd7bd921ccfb38"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P14; simpl in H3; apply H3.",
                        "VernacExtend",
                        "7878a4608a0ea69d6f5d7ee590401cf6165b63de"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P23",
            "line_nb": 586,
            "steps": [
                {
                    "command": [
                        "intros; case (Rle_dec a b); intro; [ apply StepFun_P22 with g; assumption | apply StepFun_P5; apply StepFun_P22 with g; [ auto with real | apply StepFun_P5; assumption | apply StepFun_P5; assumption ] ].",
                        "VernacExtend",
                        "3484fdbeb95ca60e551df915bed0f7c0dcc5c821"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P25",
            "line_nb": 696,
            "steps": [
                {
                    "command": [
                        "intros a b f g lf lg H H0; case (Rle_dec a b); intro; [ apply StepFun_P24 with f; assumption | apply StepFun_P5; apply StepFun_P24 with f; [ auto with real | apply StepFun_P5; assumption | apply StepFun_P5; assumption ] ].",
                        "VernacExtend",
                        "fb677439779654054e5e08cf1d08b19c777da8c2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P26",
            "line_nb": 699,
            "steps": [
                {
                    "command": [
                        "intros a b l f g l1 (x0,(H0,(H1,(H2,(H3,H4))))) (x,(_,(_,(_,(_,H9))))).",
                        "VernacExtend",
                        "57c4bb854f2d9119d4d4aa7acd24f53bfad7df00"
                    ]
                },
                {
                    "command": [
                        "exists (FF l1 (fun x:R => f x + l * g x)); repeat split; try assumption.",
                        "VernacExtend",
                        "820cd8250703e578fc38e4323e71a1ed9bc83587"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P20; rewrite H3; auto with arith.",
                        "VernacExtend",
                        "fb96612c30960bb8fe36b1571d9f69432e22a2a1"
                    ]
                },
                {
                    "command": [
                        "intros i H8 x1 H10; unfold open_interval in H10, H9, H4; rewrite (H9 _ H8 _ H10); rewrite (H4 _ H8 _ H10); assert (H11 : l1 <> nil).",
                        "VernacExtend",
                        "ab907d049296eab789d9ed67fc873f70b07868d4"
                    ]
                },
                {
                    "command": [
                        "red; intro H11; rewrite H11 in H8; elim (lt_n_O _ H8).",
                        "VernacExtend",
                        "738063ffdc9d7be1270f06b2e74128b4e3ba10a9"
                    ]
                },
                {
                    "command": [
                        "destruct (RList_P19 _ H11) as (r,(r0,H12)); rewrite H12; unfold FF; change (pos_Rl x0 i + l * pos_Rl x i = pos_Rl (app_Rlist (mid_Rlist (cons r r0) r) (fun x2:R => f x2 + l * g x2)) (S i)); rewrite RList_P12.",
                        "VernacExtend",
                        "68b771cfc0201a2b4bde59452958de5d44f2c9c3"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P13.",
                        "VernacExtend",
                        "e51923c4eff4f02a7160f0f6ff97adb9c56cf2aa"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H12; rewrite (H9 _ H8); try rewrite (H4 _ H8); reflexivity || (elim H10; clear H10; intros; split; [ apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; apply Rlt_trans with x1; assumption | discrR ] ] | apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; rewrite (Rplus_comm (pos_Rl l1 i)); apply Rplus_lt_compat_l; apply Rlt_trans with x1; assumption | discrR ] ] ]).",
                        "VernacExtend",
                        "5ebcdb58aff9758bc188808ff06658f6e2958054"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H12; assumption.",
                        "VernacExtend",
                        "88ac94f05da3c391b5a354ee34ef3bc487185956"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P14; simpl; rewrite H12 in H8; simpl in H8; apply lt_n_S; apply H8.",
                        "VernacExtend",
                        "f9f074b8c25636c216fc93f056cb7c402cc4e4bf"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P27",
            "line_nb": 711,
            "steps": [
                {
                    "command": [
                        "intros a b l f g lf lg H H0; apply StepFun_P26; [ apply StepFun_P23 with g; assumption | apply StepFun_P25 with f; assumption ].",
                        "VernacExtend",
                        "957113cafccc304fe338dffe5a120fc09eb6a96b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P28",
            "line_nb": 714,
            "steps": [
                {
                    "command": [
                        "intros a b l f g; unfold IsStepFun; assert (H := pre f); assert (H0 := pre g); unfold IsStepFun in H, H0; elim H; elim H0; intros; apply existT with (cons_ORlist x0 x); apply StepFun_P27; assumption.",
                        "VernacExtend",
                        "6ee716e8da5c64314042e7b5b0a16ed04c0790e7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P29",
            "line_nb": 717,
            "steps": [
                {
                    "command": [
                        "intros a b f; unfold is_subdivision; apply existT with (subdivision_val f); apply StepFun_P1.",
                        "VernacExtend",
                        "e5c8d57503f936220a825623423a6aa90be0ca28"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P30",
            "line_nb": 720,
            "steps": [
                {
                    "command": [
                        "intros a b l f g; unfold RiemannInt_SF; case (Rle_dec a b); (intro; replace (Int_SF (subdivision_val (mkStepFun (StepFun_P28 l f g))) (subdivision (mkStepFun (StepFun_P28 l f g)))) with (Int_SF (FF (cons_ORlist (subdivision f) (subdivision g)) (fun x:R => f x + l * g x)) (cons_ORlist (subdivision f) (subdivision g))); [ rewrite StepFun_P19; replace (Int_SF (FF (cons_ORlist (subdivision f) (subdivision g)) f) (cons_ORlist (subdivision f) (subdivision g))) with (Int_SF (subdivision_val f) (subdivision f)); [ replace (Int_SF (FF (cons_ORlist (subdivision f) (subdivision g)) g) (cons_ORlist (subdivision f) (subdivision g))) with (Int_SF (subdivision_val g) (subdivision g)); [ ring | apply StepFun_P17 with (fe g) a b; [ apply StepFun_P1 | apply StepFun_P21; apply StepFun_P25 with (fe f); apply StepFun_P29 ] ] | apply StepFun_P17 with (fe f) a b; [ apply StepFun_P1 | apply StepFun_P21; apply StepFun_P23 with (fe g); apply StepFun_P29 ] ] | apply StepFun_P17 with (fun x:R => f x + l * g x) a b; [ apply StepFun_P21; apply StepFun_P27; apply StepFun_P29 | apply (StepFun_P1 (mkStepFun (StepFun_P28 l f g))) ] ]).",
                        "VernacExtend",
                        "546e5a63073444faffa4c2c21741387af1548045"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P31",
            "line_nb": 723,
            "steps": [
                {
                    "command": [
                        "unfold adapted_couple; intros; decompose [and] H; clear H; repeat split; try assumption.",
                        "VernacExtend",
                        "e958878d3818e66c23f3675e70b16f301051fe8e"
                    ]
                },
                {
                    "command": [
                        "symmetry ; rewrite H3; rewrite RList_P18; reflexivity.",
                        "VernacExtend",
                        "b4cc38db1f386b33c99749dc722a95ee1805edce"
                    ]
                },
                {
                    "command": [
                        "intros; unfold constant_D_eq, open_interval; unfold constant_D_eq, open_interval in H5; intros; rewrite (H5 _ H _ H4); rewrite RList_P12; [ reflexivity | rewrite H3 in H; simpl in H; apply H ].",
                        "VernacExtend",
                        "ddc59d3971aca52470241469c4d9f716d2f64d7c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P32",
            "line_nb": 728,
            "steps": [
                {
                    "command": [
                        "intros a b f; unfold IsStepFun; apply existT with (subdivision f); unfold is_subdivision; apply existT with (app_Rlist (subdivision_val f) Rabs); apply StepFun_P31; apply StepFun_P1.",
                        "VernacExtend",
                        "626661e2c89263c1b866923b8abbbf71a4a21b96"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P33",
            "line_nb": 731,
            "steps": [
                {
                    "command": [
                        "simple induction l2; intros.",
                        "VernacExtend",
                        "96a4cf574182b57d210463e79cc705cd35d5cf4e"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite Rabs_R0; right; reflexivity.",
                        "VernacExtend",
                        "c6fbe686b4e848350f7dd481f9d708287212cbc4"
                    ]
                },
                {
                    "command": [
                        "simpl; induction l1 as [| r1 l1 Hrecl1].",
                        "VernacExtend",
                        "31753cc3467fe52e81976cdac97d30e9fa125845"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_R0; right; reflexivity.",
                        "VernacExtend",
                        "0947ed1e522f8fa81b5f34d31f8cf416f9f3447b"
                    ]
                },
                {
                    "command": [
                        "induction l1 as [| r2 l1 Hrecl0].",
                        "VernacExtend",
                        "0e374f8289fa1ec932cc35963cfee603beeacb7a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_R0; right; reflexivity.",
                        "VernacExtend",
                        "0947ed1e522f8fa81b5f34d31f8cf416f9f3447b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs (r * (r2 - r1)) + Rabs (Int_SF r0 (cons r2 l1))).",
                        "VernacExtend",
                        "92033a6670bc541f710f5cc64c6e1f3d4d10986c"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult; rewrite (Rabs_right (r2 - r1)); [ apply Rplus_le_compat_l; apply H; apply RList_P4 with r1; assumption | apply Rge_minus; apply Rle_ge; apply (H0 0%nat); simpl; apply lt_O_Sn ].",
                        "VernacExtend",
                        "ae078215ecb768f38cd24e414209ead9ff58e2ad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P34",
            "line_nb": 742,
            "steps": [
                {
                    "command": [
                        "intros; unfold RiemannInt_SF; decide (Rle_dec a b) with H.",
                        "VernacExtend",
                        "ba50cea05e612fec13811f2886373d93bb286050"
                    ]
                },
                {
                    "command": [
                        "replace (Int_SF (subdivision_val (mkStepFun (StepFun_P32 f))) (subdivision (mkStepFun (StepFun_P32 f)))) with (Int_SF (app_Rlist (subdivision_val f) Rabs) (subdivision f)).",
                        "VernacExtend",
                        "13642f3979cd826b328ab81f8e2d19eaa067543b"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P33; assert (H0 := StepFun_P29 f); unfold is_subdivision in H0; elim H0; intros; unfold adapted_couple in p; decompose [and] p; assumption.",
                        "VernacExtend",
                        "5c8850b1a8d8307db6c1b55af67a09a1a1aaa766"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P17 with (fun x:R => Rabs (f x)) a b; [ apply StepFun_P31; apply StepFun_P1 | apply (StepFun_P1 (mkStepFun (StepFun_P32 f))) ].",
                        "VernacExtend",
                        "dc4b08dac1ea645158bb3089c4c5e3e3a39e773d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P35",
            "line_nb": 748,
            "steps": [
                {
                    "command": [
                        "simple induction l; intros.",
                        "VernacExtend",
                        "c92eda0a002a1bcd4ae3135cde90a1434b04e226"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "simpl; induction r0 as [| r0 r1 Hrecr0].",
                        "VernacExtend",
                        "b972a244a26abe90d9231e2a9ea618604c85d7a3"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "simpl; apply Rplus_le_compat.",
                        "VernacExtend",
                        "e407a7b315105f1acb5c8e4701fce7955c674fdc"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec r r0); intro.",
                        "VernacExtend",
                        "33e127f0fe6782924fcd7fde9ebbf6a1f5b2d5cf"
                    ]
                },
                {
                    "command": [
                        "rewrite H4; right; ring.",
                        "VernacExtend",
                        "05c5653093b8b549edcd711c1df57a22a1214a34"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rmult_comm (r0 - r)); apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "84057d44f810911790b67d7e1311bc23c21e39a6"
                    ]
                },
                {
                    "command": [
                        "apply Rge_le; apply Rge_minus; apply Rle_ge; apply (H0 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "0f95c34d459f5a06fe4267800933d51ace12b2bb"
                    ]
                },
                {
                    "command": [
                        "apply H3; split.",
                        "VernacExtend",
                        "14ee8b762765c5a3d7361306b2caf70207874eea"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "6631f3c2df4cb853b13a1c15d269a9146336e287"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "bb110d8377e3622749fa8b2b4653e0680d3ab799"
                    ]
                },
                {
                    "command": [
                        "assert (H5 : r = a).",
                        "VernacExtend",
                        "1e1ec05a5fbbaf1bd19bfe9721cee4d883e3511e"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "rewrite H5; rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "2696bc9f26bef0aca003312bfd901b063409dc1e"
                    ]
                },
                {
                    "command": [
                        "assert (H6 := H0 0%nat (lt_O_Sn _)).",
                        "VernacExtend",
                        "8c1cc1b01347bf35604444be74685b2ea6fe4378"
                    ]
                },
                {
                    "command": [
                        "simpl in H6.",
                        "VernacExtend",
                        "a1cfe6bf72a31f34bf109464b9fb8288a8f3124d"
                    ]
                },
                {
                    "command": [
                        "elim H6; intro.",
                        "VernacExtend",
                        "e85bcbbf1e2e7245dba06fdc165dee137f165a99"
                    ]
                },
                {
                    "command": [
                        "rewrite H5 in H7; apply H7.",
                        "VernacExtend",
                        "9956f86089c577bfcc4bbc666152d2d892afe813"
                    ]
                },
                {
                    "command": [
                        "elim H4; assumption.",
                        "VernacExtend",
                        "8e800e8eaec7ed673de2698dd086f814106951d0"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "6631f3c2df4cb853b13a1c15d269a9146336e287"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "bb110d8377e3622749fa8b2b4653e0680d3ab799"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; rewrite double; assert (H5 : r0 <= b).",
                        "VernacExtend",
                        "bcb0c54a83f4c069d39b7bb356f22620139f8d72"
                    ]
                },
                {
                    "command": [
                        "replace b with (pos_Rl (cons r (cons r0 r1)) (pred (Rlength (cons r (cons r0 r1))))).",
                        "VernacExtend",
                        "4acbc94d67e24a17dca2ecfc3c055d1d6733ffd0"
                    ]
                },
                {
                    "command": [
                        "replace r0 with (pos_Rl (cons r (cons r0 r1)) 1).",
                        "VernacExtend",
                        "d92e14716ebc927e74c6e6996dc3300059a711f2"
                    ]
                },
                {
                    "command": [
                        "elim (RList_P6 (cons r (cons r0 r1))); intros; apply H5.",
                        "VernacExtend",
                        "1f5395a35c75b627a6f7ed0ccfed654b41480eb7"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "simpl; apply le_n_S.",
                        "VernacExtend",
                        "91d1564a4599db6accc8f469563ad971deafe5dd"
                    ]
                },
                {
                    "command": [
                        "apply le_O_n.",
                        "VernacExtend",
                        "7fa25714b3e362fc6548cec817a7c173238f4970"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_n_Sn.",
                        "VernacExtend",
                        "4ca55d44d089295f1b850f173a407549e7957497"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (r + b).",
                        "VernacExtend",
                        "89d6567b5fe51a6b77fd79a668829c93530885ba"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_compat_l; assumption.",
                        "VernacExtend",
                        "ec726fd718e976f21a740f054870f0c6bcea3d34"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rplus_comm r); apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "760aba645a87974907e3c78dc719e9adfbfcaf6d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with r0.",
                        "VernacExtend",
                        "ca93e0cfc3cfd85b2ada96beda92a7a8df19b365"
                    ]
                },
                {
                    "command": [
                        "assert (H6 := H0 0%nat (lt_O_Sn _)).",
                        "VernacExtend",
                        "8c1cc1b01347bf35604444be74685b2ea6fe4378"
                    ]
                },
                {
                    "command": [
                        "simpl in H6.",
                        "VernacExtend",
                        "a1cfe6bf72a31f34bf109464b9fb8288a8f3124d"
                    ]
                },
                {
                    "command": [
                        "elim H6; intro.",
                        "VernacExtend",
                        "e85bcbbf1e2e7245dba06fdc165dee137f165a99"
                    ]
                },
                {
                    "command": [
                        "apply H7.",
                        "VernacExtend",
                        "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
                    ]
                },
                {
                    "command": [
                        "elim H4; assumption.",
                        "VernacExtend",
                        "8e800e8eaec7ed673de2698dd086f814106951d0"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "simpl in H; apply H with r0 b.",
                        "VernacExtend",
                        "23046c7b8574c155383325ca398d751ca8436211"
                    ]
                },
                {
                    "command": [
                        "apply RList_P4 with r; assumption.",
                        "VernacExtend",
                        "ca77f3aeb32c827a13d2dfeb653f84e922693df3"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2; reflexivity.",
                        "VernacExtend",
                        "31c7dad53485dfaa6f1ccfafc516be38e1c26314"
                    ]
                },
                {
                    "command": [
                        "intros; apply H3; elim H4; intros; split; try assumption.",
                        "VernacExtend",
                        "92a2fc496fb7c84e921890702576d55276bfc4bb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with r0; try assumption.",
                        "VernacExtend",
                        "eee03810cf1b818784cbcd85cd91ce98e0e0bb0f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1.",
                        "VernacExtend",
                        "b8b417d956609d1854d18921f25bc0ffae73a74e"
                    ]
                },
                {
                    "command": [
                        "simpl; apply (H0 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "413d01727a3ef310a0f2edcc95c75b69eb371049"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P36",
            "line_nb": 803,
            "steps": [
                {
                    "command": [
                        "intros; unfold RiemannInt_SF; decide (Rle_dec a b) with H.",
                        "VernacExtend",
                        "ba50cea05e612fec13811f2886373d93bb286050"
                    ]
                },
                {
                    "command": [
                        "replace (Int_SF (subdivision_val f) (subdivision f)) with (Int_SF (FF l f) l).",
                        "VernacExtend",
                        "de1d5299bd4cf60f0a1712dfe818df521393b3b9"
                    ]
                },
                {
                    "command": [
                        "replace (Int_SF (subdivision_val g) (subdivision g)) with (Int_SF (FF l g) l).",
                        "VernacExtend",
                        "b4a8de079d157922f5436beaf7a220ff1e3eb890"
                    ]
                },
                {
                    "command": [
                        "unfold is_subdivision in X; elim X; clear X; intros; unfold adapted_couple in p; decompose [and] p; clear p; assert (H5 : Rmin a b = a); [ unfold Rmin; decide (Rle_dec a b) with H; reflexivity | assert (H7 : Rmax a b = b); [ unfold Rmax; decide (Rle_dec a b) with H; reflexivity | rewrite H5 in H3; rewrite H7 in H2; eapply StepFun_P35 with a b; assumption ] ].",
                        "VernacExtend",
                        "790e0af537ba3bf01cb741313498387fc02960d0"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P17 with (fe g) a b; [ apply StepFun_P21; assumption | apply StepFun_P1 ].",
                        "VernacExtend",
                        "26c99ea82147d0a66fb6f2e2e9377b564295ca2c"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P17 with (fe f) a b; [ apply StepFun_P21; assumption | apply StepFun_P1 ].",
                        "VernacExtend",
                        "58f688b467fbe35ef871377b98d59fe350dcfc7f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P38",
            "line_nb": 816,
            "steps": [
                {
                    "command": [
                        "intros l a b f; generalize a; clear a; induction l.",
                        "VernacExtend",
                        "63ecb374bb8d60d48ce3540f1516792a5db5bc8b"
                    ]
                },
                {
                    "command": [
                        "intros a H H0 H1; simpl in H0; simpl in H1; exists (mkStepFun (StepFun_P4 a b (f b))); split.",
                        "VernacExtend",
                        "e9ccd58bab9896431863f6cb7ca63d153c101bf8"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intros; elim (lt_n_O _ H2).",
                        "VernacExtend",
                        "7eecc0600776b7b28e0419055ee5b33f159b5bcc"
                    ]
                },
                {
                    "command": [
                        "intros; destruct l as [| r1 l].",
                        "VernacExtend",
                        "af754b6bd41039e0a261ba7325067f6afc0d2852"
                    ]
                },
                {
                    "command": [
                        "simpl in H1; simpl in H0; exists (mkStepFun (StepFun_P4 a b (f b))); split.",
                        "VernacExtend",
                        "100ec0e600aedb3cd7c4c8d1997f6134fe450128"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intros i H2; elim (lt_n_O _ H2).",
                        "VernacExtend",
                        "8d385b58c23cf93ed8598db1aa45f82bb4ee2ba4"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H2 : ordered_Rlist (cons r1 l)).",
                        "VernacExtend",
                        "3613844afddf8b83d59c02f1822537df5b1a1de9"
                    ]
                },
                {
                    "command": [
                        "apply RList_P4 with r; assumption.",
                        "VernacExtend",
                        "ca77f3aeb32c827a13d2dfeb653f84e922693df3"
                    ]
                },
                {
                    "command": [
                        "assert (H3 : pos_Rl (cons r1 l) 0 = r1).",
                        "VernacExtend",
                        "e189d5a2b83e9a8a08e6638454bcafc19ffe1c3c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assert (H4 : pos_Rl (cons r1 l) (pred (Rlength (cons r1 l))) = b).",
                        "VernacExtend",
                        "43985cd90a34af79189381a9d04a159d58c736a7"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1; reflexivity.",
                        "VernacExtend",
                        "bed20c0e3a66409558a9463bfc5deafcd2d38489"
                    ]
                },
                {
                    "command": [
                        "elim (IHl r1 H2 H3 H4); intros g [H5 H6].",
                        "VernacExtend",
                        "416ad94e946512fde45b30fd2039fdd2eb027cdc"
                    ]
                },
                {
                    "command": [
                        "set (g' := fun x:R => match Rle_dec r1 x with | left _ => g x | right _ => f a end).",
                        "VernacExtend",
                        "4273d2a42ec93623592ea02abac2d452f3352c23"
                    ]
                },
                {
                    "command": [
                        "assert (H7 : r1 <= b).",
                        "VernacExtend",
                        "d419cf2e9f297a07fb6eca6fb2d849144682f22b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H4; apply RList_P7; [ assumption | left; reflexivity ].",
                        "VernacExtend",
                        "d111130ec41463c7427dbc31595f610a3e394bfd"
                    ]
                },
                {
                    "command": [
                        "assert (H8 : IsStepFun g' a b).",
                        "VernacExtend",
                        "89ce39dfd0e4bd0f6014a864f1e4fcf6bff0a207"
                    ]
                },
                {
                    "command": [
                        "unfold IsStepFun; assert (H8 := pre g); unfold IsStepFun in H8; elim H8; intros lg H9; unfold is_subdivision in H9; elim H9; clear H9; intros lg2 H9; split with (cons a lg); unfold is_subdivision; split with (cons (f a) lg2); unfold adapted_couple in H9; decompose [and] H9; clear H9; unfold adapted_couple; repeat split.",
                        "VernacExtend",
                        "f89db9997b388c87ee42992b0545fd837d62142c"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; intros; simpl in H9; induction i as [| i Hreci].",
                        "VernacExtend",
                        "4de120b9ca59b6da090ba1e42d9ae8b1dc8c9314"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H12; replace (Rmin r1 b) with r1.",
                        "VernacExtend",
                        "d5e61677a36d939247cc4ccda15fb5893cae1abe"
                    ]
                },
                {
                    "command": [
                        "simpl in H0; rewrite <- H0; apply (H 0%nat); simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "ff272f5dce59b34c0ad403c2ef76549ef37eec9d"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec r1 b) with H7; reflexivity.",
                        "VernacExtend",
                        "e9e656ff3e669b91c0acd31b85527ba0e2bedace"
                    ]
                },
                {
                    "command": [
                        "apply (H10 i); apply lt_S_n.",
                        "VernacExtend",
                        "7f1721f3d46abe15ed9189f478d6a08d76033d23"
                    ]
                },
                {
                    "command": [
                        "replace (S (pred (Rlength lg))) with (Rlength lg).",
                        "VernacExtend",
                        "718985ed52270ad1635cb420b0253fc138db1d23"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "apply S_pred with 0%nat; apply neq_O_lt; intro; rewrite <- H14 in H9; elim (lt_n_O _ H9).",
                        "VernacExtend",
                        "dfa5a8b9ee5dbabeac898069a6e41031568641e6"
                    ]
                },
                {
                    "command": [
                        "simpl; assert (H14 : a <= b).",
                        "VernacExtend",
                        "f1c0c07ecc9696bfaf3b86cec5f553136b4c09eb"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1; simpl in H0; rewrite <- H0; apply RList_P7; [ assumption | left; reflexivity ].",
                        "VernacExtend",
                        "370e71a1a6425f7273f4eb8caa7b28130614b461"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with H14; reflexivity.",
                        "VernacExtend",
                        "949cec94aeec0444e854f3b411a0f3ef9d4342c7"
                    ]
                },
                {
                    "command": [
                        "assert (H14 : a <= b).",
                        "VernacExtend",
                        "e64a2cc536498dc307a150e121830fb5694cd247"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H1; simpl in H0; rewrite <- H0; apply RList_P7; [ assumption | left; reflexivity ].",
                        "VernacExtend",
                        "370e71a1a6425f7273f4eb8caa7b28130614b461"
                    ]
                },
                {
                    "command": [
                        "replace (Rmax a b) with (Rmax r1 b).",
                        "VernacExtend",
                        "9bba2eeef469148e23c46ad17d6c1f77a30e51ef"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H11; induction lg as [| r0 lg Hreclg].",
                        "VernacExtend",
                        "0a815dacb4e24c65a66467121601830c54868768"
                    ]
                },
                {
                    "command": [
                        "simpl in H13; discriminate.",
                        "VernacExtend",
                        "748d32489a8991107e36a044bf729733b02c0de2"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with H14; decide (Rle_dec r1 b) with H7; reflexivity.",
                        "VernacExtend",
                        "8419ddd0cfa444f188ec12fdbb090bc78dead842"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H13; reflexivity.",
                        "VernacExtend",
                        "2cfd3c469c821eee0749cdcbc77cd54525fa0904"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H9; induction i as [| i Hreci].",
                        "VernacExtend",
                        "543a3a4183b653a42fe3262704c312c5ea243a79"
                    ]
                },
                {
                    "command": [
                        "unfold constant_D_eq, open_interval; simpl; intros; assert (H16 : Rmin r1 b = r1).",
                        "VernacExtend",
                        "bcebd20ea9be1603234cd62e69918477c59ccd75"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec r1 b) with H7; reflexivity.",
                        "VernacExtend",
                        "e9e656ff3e669b91c0acd31b85527ba0e2bedace"
                    ]
                },
                {
                    "command": [
                        "rewrite H16 in H12; rewrite H12 in H14; elim H14; clear H14; intros _ H14; unfold g'; case (Rle_dec r1 x); intro r3.",
                        "VernacExtend",
                        "1d0c0121524ce5c4056e53f64eeb27d2bbaf905f"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ r3 H14)).",
                        "VernacExtend",
                        "fdde8bd66119acd4a61437a4f5787c6eccfe1771"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "change (constant_D_eq g' (open_interval (pos_Rl lg i) (pos_Rl lg (S i))) (pos_Rl lg2 i)); clear Hreci; assert (H16 := H15 i); assert (H17 : (i < pred (Rlength lg))%nat).",
                        "VernacExtend",
                        "e0081daa4b6724b331ba21b072fa94e998ab93ef"
                    ]
                },
                {
                    "command": [
                        "apply lt_S_n.",
                        "VernacExtend",
                        "0207638f6e9dea4c2a8a3945f23446b376d8318e"
                    ]
                },
                {
                    "command": [
                        "replace (S (pred (Rlength lg))) with (Rlength lg).",
                        "VernacExtend",
                        "718985ed52270ad1635cb420b0253fc138db1d23"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply S_pred with 0%nat; apply neq_O_lt; red; intro; rewrite <- H14 in H9; elim (lt_n_O _ H9).",
                        "VernacExtend",
                        "ce8c9a9bf9983c466be9c0953cc5d536055f8177"
                    ]
                },
                {
                    "command": [
                        "assert (H18 := H16 H17); unfold constant_D_eq, open_interval in H18; unfold constant_D_eq, open_interval; intros; assert (H19 := H18 _ H14); rewrite <- H19; unfold g'; case (Rle_dec r1 x) as [|[]].",
                        "VernacExtend",
                        "38ea52f540ecd790e68774e19182eef88891569f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "replace r1 with (Rmin r1 b).",
                        "VernacExtend",
                        "24e1b7570d9906034e7eac4441d41be083a4a2da"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H12; elim H14; clear H14; intros H14 _; left; apply Rle_lt_trans with (pos_Rl lg i); try assumption.",
                        "VernacExtend",
                        "0f2e5fecc88fb840a5cde1b3f591deadabff6447"
                    ]
                },
                {
                    "command": [
                        "apply RList_P5.",
                        "VernacExtend",
                        "6d664b6e37794dc60d51641f985ce1d0f4142239"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim (RList_P3 lg (pos_Rl lg i)); intros; apply H21; exists i; split.",
                        "VernacExtend",
                        "71ff405b3bee767e715f0307d4ff717b76151f02"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "apply lt_trans with (pred (Rlength lg)); try assumption.",
                        "VernacExtend",
                        "ef69ab5eb8bea97b2bcf84d34aba6fab307cd474"
                    ]
                },
                {
                    "command": [
                        "apply lt_pred_n_n; apply neq_O_lt; red; intro; rewrite <- H22 in H17; elim (lt_n_O _ H17).",
                        "VernacExtend",
                        "d8aa640b64afb2aabbbec6177d3f94bab2e36b66"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec r1 b) with H7; reflexivity.",
                        "VernacExtend",
                        "e9e656ff3e669b91c0acd31b85527ba0e2bedace"
                    ]
                },
                {
                    "command": [
                        "exists (mkStepFun H8); split.",
                        "VernacExtend",
                        "6f279cd7163457acc16eafc6a156c2fba3afb5f5"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold g'; decide (Rle_dec r1 b) with H7; assumption.",
                        "VernacExtend",
                        "ab73ef50ba02806a530a361e37746e3dd4619a80"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H9; induction i as [| i Hreci].",
                        "VernacExtend",
                        "543a3a4183b653a42fe3262704c312c5ea243a79"
                    ]
                },
                {
                    "command": [
                        "unfold constant_D_eq, co_interval; simpl; intros; simpl in H0; rewrite H0; elim H10; clear H10; intros; unfold g'; case (Rle_dec r1 x); intro r3.",
                        "VernacExtend",
                        "cf164ce1114233f220ad7d42fc88260cd80b153a"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ r3 H11)).",
                        "VernacExtend",
                        "797543edde9db254081b4ab58ef54b6e9d54cb1f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "clear Hreci; change (constant_D_eq (mkStepFun H8) (co_interval (pos_Rl (cons r1 l) i) (pos_Rl (cons r1 l) (S i))) (f (pos_Rl (cons r1 l) i))); assert (H10 := H6 i); assert (H11 : (i < pred (Rlength (cons r1 l)))%nat).",
                        "VernacExtend",
                        "9b91343a04081dac7f3d51968fc7fe98c6742348"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_S_n; assumption.",
                        "VernacExtend",
                        "3be1c0ea76eeb629587840639f44e5fec61613e5"
                    ]
                },
                {
                    "command": [
                        "assert (H12 := H10 H11); unfold constant_D_eq, co_interval in H12; unfold constant_D_eq, co_interval; intros; rewrite <- (H12 _ H13); simpl; unfold g'; case (Rle_dec r1 x) as [|[]].",
                        "VernacExtend",
                        "c13ff83b629087ef05371fc63712a8d30671642f"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "elim H13; clear H13; intros; apply Rle_trans with (pos_Rl (cons r1 l) i); try assumption; change (pos_Rl (cons r1 l) 0 <= pos_Rl (cons r1 l) i); elim (RList_P6 (cons r1 l)); intros; apply H15; [ assumption | apply le_O_n | simpl; apply lt_trans with (Rlength l); [ apply lt_S_n; assumption | apply lt_n_Sn ] ].",
                        "VernacExtend",
                        "ddd74044be76f62e8d6125511356ed790e761c26"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P39",
            "line_nb": 890,
            "steps": [
                {
                    "command": [
                        "intros; unfold RiemannInt_SF; case (Rle_dec a b); case (Rle_dec b a); intros.",
                        "VernacExtend",
                        "2ed2811f5506e0f2e099d7563177b13038cc2219"
                    ]
                },
                {
                    "command": [
                        "assert (H : adapted_couple f a b (subdivision f) (subdivision_val f)); [ apply StepFun_P1 | assert (H0 : adapted_couple (mkStepFun (StepFun_P6 (pre f))) b a (subdivision (mkStepFun (StepFun_P6 (pre f)))) (subdivision_val (mkStepFun (StepFun_P6 (pre f))))); [ apply StepFun_P1 | assert (H1 : a = b); [ apply Rle_antisym; assumption | rewrite (StepFun_P8 H H1); assert (H2 : b = a); [ symmetry ; apply H1 | rewrite (StepFun_P8 H0 H2); ring ] ] ] ].",
                        "VernacExtend",
                        "16df69a745bbe4167304bb7456274e1a10052582"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_involutive; eapply StepFun_P17; [ apply StepFun_P1 | apply StepFun_P2; set (H := StepFun_P6 (pre f)); unfold IsStepFun in H; elim H; intros; unfold is_subdivision; elim p; intros; apply p0 ].",
                        "VernacExtend",
                        "fdc489f91d6a0c36643350dfefd2e85fdd3f6e17"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_eq_compat; eapply StepFun_P17; [ apply StepFun_P1 | apply StepFun_P2; set (H := StepFun_P6 (pre f)); unfold IsStepFun in H; elim H; intros; unfold is_subdivision; elim p; intros; apply p0 ].",
                        "VernacExtend",
                        "1945b1e9307615b6130bbbd57482352cd56398f9"
                    ]
                },
                {
                    "command": [
                        "assert (H : a < b); [ auto with real | assert (H0 : b < a); [ auto with real | elim (Rlt_irrefl _ (Rlt_trans _ _ _ H H0)) ] ].",
                        "VernacExtend",
                        "d1de271d65d14d0e264df995416e0017bee8f2a6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P40",
            "line_nb": 897,
            "steps": [
                {
                    "command": [
                        "intros f a b c l1 l2 lf1 lf2 H H0 H1 H2; unfold adapted_couple in H1, H2; unfold adapted_couple; decompose [and] H1; decompose [and] H2; clear H1 H2; repeat split.",
                        "VernacExtend",
                        "ec61d758dca28f949386c870d5f594f1d9fbf6c3"
                    ]
                },
                {
                    "command": [
                        "apply RList_P25; try assumption.",
                        "VernacExtend",
                        "265ee0883e6f12ed1d5d00a7495a7ec46948489d"
                    ]
                },
                {
                    "command": [
                        "rewrite H10; rewrite H4; unfold Rmin, Rmax; case (Rle_dec a b) as [|[]]; case (Rle_dec b c) as [|[]]; (right; reflexivity) || (left; assumption).",
                        "VernacExtend",
                        "c0e9063cc4375c35e33bc72bacdd2d68c2fbf68c"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P22.",
                        "VernacExtend",
                        "0143477f78718293e2d26e1784bcb41a653ec3b0"
                    ]
                },
                {
                    "command": [
                        "rewrite H5; unfold Rmin, Rmax; case (Rle_dec a c) as [|[]]; case (Rle_dec a b) as [|[]]; [ reflexivity | left; assumption | apply Rle_trans with b; left; assumption | left; assumption ].",
                        "VernacExtend",
                        "0e3d26aa496cf636d79a6312bddfa8695376d1b3"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H1 in H6; discriminate.",
                        "VernacExtend",
                        "5c5810d776df2b57280d41e3e0a311da3e434266"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P24.",
                        "VernacExtend",
                        "e5f4a124d550ee173d66a375bd9a30c7fba618f3"
                    ]
                },
                {
                    "command": [
                        "rewrite H9; unfold Rmin, Rmax; case (Rle_dec a c) as [|[]]; case (Rle_dec b c) as [|[]]; [ reflexivity | left; assumption | apply Rle_trans with b; left; assumption | left; assumption ].",
                        "VernacExtend",
                        "370fba99ad006acfcdee166eccb6e6bcd62de495"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H1 in H11; discriminate.",
                        "VernacExtend",
                        "715c8463241cc4615c17dc778c0ccd7fea42aaaf"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P20.",
                        "VernacExtend",
                        "29688f3866b1088048c757f0fadbb23c96cddff3"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P23; apply neq_O_lt; red; intro.",
                        "VernacExtend",
                        "fa354d468506b1a5cb67b15d727a71f6fbed8c00"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : (Rlength l1 + Rlength l2)%nat = 0%nat).",
                        "VernacExtend",
                        "15889de2d1b7a910355a704aeb5f90af0269f40d"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply H1.",
                        "VernacExtend",
                        "d1eba21d76ce89bf8bf6fc6f08548faf1912bc60"
                    ]
                },
                {
                    "command": [
                        "elim (plus_is_O _ _ H2); intros; rewrite H12 in H6; discriminate.",
                        "VernacExtend",
                        "0166b8cffdf4867626ab62104ab895a186957b42"
                    ]
                },
                {
                    "command": [
                        "unfold constant_D_eq, open_interval; intros; elim (le_or_lt (S (S i)) (Rlength l1)); intro.",
                        "VernacExtend",
                        "4224e91f4c5e76f837637b001c313e85e5e7dc37"
                    ]
                },
                {
                    "command": [
                        "assert (H14 : pos_Rl (cons_Rlist l1 l2) i = pos_Rl l1 i).",
                        "VernacExtend",
                        "cebd97486164b4367bab2d81070f4778f436da79"
                    ]
                },
                {
                    "command": [
                        "apply RList_P26; apply lt_S_n; apply le_lt_n_Sm; apply le_S_n; apply le_trans with (Rlength l1); [ assumption | apply le_n_Sn ].",
                        "VernacExtend",
                        "2ee242aa35b7761d27a01634730650aebea078e9"
                    ]
                },
                {
                    "command": [
                        "assert (H15 : pos_Rl (cons_Rlist l1 l2) (S i) = pos_Rl l1 (S i)).",
                        "VernacExtend",
                        "6a44e58994a7f7a722340bf889f65f8c0218ba14"
                    ]
                },
                {
                    "command": [
                        "apply RList_P26; apply lt_S_n; apply le_lt_n_Sm; assumption.",
                        "VernacExtend",
                        "41b21bcce7023e7ad18b8dcdd131553f9f12a16c"
                    ]
                },
                {
                    "command": [
                        "rewrite H14 in H2; rewrite H15 in H2; assert (H16 : (2 <= Rlength l1)%nat).",
                        "VernacExtend",
                        "7646ba035954cb1f5881f8a36b442e32940fb416"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (S (S i)); [ repeat apply le_n_S; apply le_O_n | assumption ].",
                        "VernacExtend",
                        "ec79146dbf92b69f0a15841aa0e42d228fa9a43b"
                    ]
                },
                {
                    "command": [
                        "elim (RList_P20 _ H16); intros r1 [r2 [r3 H17]]; rewrite H17; change (f x = pos_Rl (app_Rlist (mid_Rlist (cons_Rlist (cons r2 r3) l2) r1) f) i) ; rewrite RList_P12.",
                        "VernacExtend",
                        "9c92b04cea6e5e170d11a94da5bc4acaa800016c"
                    ]
                },
                {
                    "command": [
                        "induction i as [| i Hreci].",
                        "VernacExtend",
                        "359a77e440c9883a74d09392e658fa188fb9d6cd"
                    ]
                },
                {
                    "command": [
                        "simpl; assert (H18 := H8 0%nat); unfold constant_D_eq, open_interval in H18; assert (H19 : (0 < pred (Rlength l1))%nat).",
                        "VernacExtend",
                        "a1a656e15e7980970ae5f36da0e7539d78408012"
                    ]
                },
                {
                    "command": [
                        "rewrite H17; simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "22a3bf8c6d9cd671a0b741e10012ffdf0ee666d8"
                    ]
                },
                {
                    "command": [
                        "assert (H20 := H18 H19); repeat rewrite H20.",
                        "VernacExtend",
                        "db8804eaf7aa53c999c7e730457ea8188af7022c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assert (H21 : r1 <= r2).",
                        "VernacExtend",
                        "5333d06774675293c0688beef9f9cfaa8194dab4"
                    ]
                },
                {
                    "command": [
                        "rewrite H17 in H3; apply (H3 0%nat).",
                        "VernacExtend",
                        "86d296c86e7783d3fcd0289bd995babd0b143f94"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "92647c7b432ca8163d2189148afd540a600c4def"
                    ]
                },
                {
                    "command": [
                        "elim H21; intro.",
                        "VernacExtend",
                        "78404a2603b011826eb8aafbecb9f119db9ef940"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "rewrite H17; simpl; apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "8e6697f21f543e522315c8da99d988d0c4fbcebc"
                    ]
                },
                {
                    "command": [
                        "rewrite H17; simpl; apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm r1); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "ffea440de2a2c407d655479f16833011583dad19"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros; rewrite H17 in H23; rewrite H17 in H24; simpl in H24; simpl in H23; rewrite H22 in H23; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H23 H24)).",
                        "VernacExtend",
                        "8e6aced5fb3e1bc2c162beeee65154137aa1987d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "clear Hreci; rewrite RList_P13.",
                        "VernacExtend",
                        "5aece838c9ac94f3944ea80346cdc418b1bd2cf3"
                    ]
                },
                {
                    "command": [
                        "rewrite H17 in H14; rewrite H17 in H15; change (pos_Rl (cons_Rlist (cons r2 r3) l2) i = pos_Rl (cons r1 (cons r2 r3)) (S i)) in H14; rewrite H14; change (pos_Rl (cons_Rlist (cons r2 r3) l2) (S i) = pos_Rl (cons r1 (cons r2 r3)) (S (S i))) in H15; rewrite H15; assert (H18 := H8 (S i)); unfold constant_D_eq, open_interval in H18; assert (H19 : (S i < pred (Rlength l1))%nat).",
                        "VernacExtend",
                        "b1e75440200e8b7d7c9d947e171064789492d008"
                    ]
                },
                {
                    "command": [
                        "apply lt_pred; apply lt_S_n; apply le_lt_n_Sm; assumption.",
                        "VernacExtend",
                        "73c2d68381cbe92aaf0ef528521c74031922a90c"
                    ]
                },
                {
                    "command": [
                        "assert (H20 := H18 H19); repeat rewrite H20.",
                        "VernacExtend",
                        "db8804eaf7aa53c999c7e730457ea8188af7022c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H17; assert (H21 : pos_Rl l1 (S i) <= pos_Rl l1 (S (S i))).",
                        "VernacExtend",
                        "03b2c6038c58dc9b60e91a4af1d7b6c710df0668"
                    ]
                },
                {
                    "command": [
                        "apply (H3 (S i)); apply lt_pred; apply lt_S_n; apply le_lt_n_Sm; assumption.",
                        "VernacExtend",
                        "f7a6ff9e50013df100044d39d247ff31c34b5b0c"
                    ]
                },
                {
                    "command": [
                        "elim H21; intro.",
                        "VernacExtend",
                        "78404a2603b011826eb8aafbecb9f119db9ef940"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "35b716538dd20af83cfdc7d9e6694d744aa20b44"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm (pos_Rl l1 (S i))); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "d0d514ccae2f78d83391d40be86781571c6cb786"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros; rewrite H22 in H23; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H23 H24)).",
                        "VernacExtend",
                        "e677bcdddb89378edae15e19425a5e32cff0071f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H17 in H1; simpl in H1; apply lt_S_n; assumption.",
                        "VernacExtend",
                        "7c4decbc0d97fcedc31e831fa8635afca2a40f48"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P14; rewrite H17 in H1; simpl in H1; apply H1.",
                        "VernacExtend",
                        "39e2babbe5103e1771fe29515ade1f88a118ce14"
                    ]
                },
                {
                    "command": [
                        "inversion H12.",
                        "VernacExtend",
                        "d5ec1d67ecbf066a6575bda368738e1ad0dbbc60"
                    ]
                },
                {
                    "command": [
                        "assert (H16 : pos_Rl (cons_Rlist l1 l2) (S i) = b).",
                        "VernacExtend",
                        "4e69e9d9e9eb66fca0af9e2b5b0a3f85b14a643e"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P29.",
                        "VernacExtend",
                        "eeed5647eac33f4b871a5d3c3259dea714f4d768"
                    ]
                },
                {
                    "command": [
                        "rewrite H15; rewrite <- minus_n_n; rewrite H10; unfold Rmin; case (Rle_dec b c) as [|[]]; [ reflexivity | left; assumption ].",
                        "VernacExtend",
                        "662417f12405c78146f65e414e0057494e9bed95"
                    ]
                },
                {
                    "command": [
                        "rewrite H15; apply le_n.",
                        "VernacExtend",
                        "7c78c9d1e451b106543ea301992b3f227de36b7b"
                    ]
                },
                {
                    "command": [
                        "induction l1 as [| r l1 Hrecl1].",
                        "VernacExtend",
                        "f320953d90c1684fb218151b30f04e4f3994d4b3"
                    ]
                },
                {
                    "command": [
                        "simpl in H15; discriminate.",
                        "VernacExtend",
                        "7a2b26cabc763bbec5aac1ecb4b2bd797f47bc4d"
                    ]
                },
                {
                    "command": [
                        "clear Hrecl1; simpl in H1; simpl; apply lt_n_S; assumption.",
                        "VernacExtend",
                        "a3dd02d63b159c7a98b6b3026db192068b2e0b63"
                    ]
                },
                {
                    "command": [
                        "assert (H17 : pos_Rl (cons_Rlist l1 l2) i = b).",
                        "VernacExtend",
                        "b22c03a75ec2f3ad21fa4dd0f4ff7cde0d6e8bd6"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P26.",
                        "VernacExtend",
                        "1769ac0892144d338f9ac8f6d9de1b20b1fee809"
                    ]
                },
                {
                    "command": [
                        "replace i with (pred (Rlength l1)); [ rewrite H4; unfold Rmax; case (Rle_dec a b) as [|[]]; [ reflexivity | left; assumption ] | rewrite H15; reflexivity ].",
                        "VernacExtend",
                        "f5f51c6b8fd854a7c76968cf6c2edd1e4e09819e"
                    ]
                },
                {
                    "command": [
                        "rewrite H15; apply lt_n_Sn.",
                        "VernacExtend",
                        "b0e07e2d2f475ae91a0bd2e69549b370e71926c9"
                    ]
                },
                {
                    "command": [
                        "rewrite H16 in H2; rewrite H17 in H2; elim H2; intros; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H14 H18)).",
                        "VernacExtend",
                        "6db953ee82a5c6f191c0754c62c4d94befff7527"
                    ]
                },
                {
                    "command": [
                        "assert (H16 : pos_Rl (cons_Rlist l1 l2) i = pos_Rl l2 (i - Rlength l1)).",
                        "VernacExtend",
                        "6e328cda89b9db9d4c4366132e0f156cc5da96c3"
                    ]
                },
                {
                    "command": [
                        "apply RList_P29.",
                        "VernacExtend",
                        "d1ebed15d918a6f926b990d20c4420c0d307d288"
                    ]
                },
                {
                    "command": [
                        "apply le_S_n; assumption.",
                        "VernacExtend",
                        "2c06a98f9e6b11e386040498d910df6a7f70b17d"
                    ]
                },
                {
                    "command": [
                        "apply lt_le_trans with (pred (Rlength (cons_Rlist l1 l2))); [ assumption | apply le_pred_n ].",
                        "VernacExtend",
                        "78c74720aeaaf20d90d4a8d70b120c39b613c581"
                    ]
                },
                {
                    "command": [
                        "assert (H17 : pos_Rl (cons_Rlist l1 l2) (S i) = pos_Rl l2 (S (i - Rlength l1))).",
                        "VernacExtend",
                        "262f6304c0a178f9b662f42bc7c5b827822d28ba"
                    ]
                },
                {
                    "command": [
                        "replace (S (i - Rlength l1)) with (S i - Rlength l1)%nat.",
                        "VernacExtend",
                        "64d0911b450c3b4a367874342310900be2276857"
                    ]
                },
                {
                    "command": [
                        "apply RList_P29.",
                        "VernacExtend",
                        "d1ebed15d918a6f926b990d20c4420c0d307d288"
                    ]
                },
                {
                    "command": [
                        "apply le_S_n; apply le_trans with (S i); [ assumption | apply le_n_Sn ].",
                        "VernacExtend",
                        "fb25c7d0239db82e836da3c43daba993612bf0e8"
                    ]
                },
                {
                    "command": [
                        "induction l1 as [| r l1 Hrecl1].",
                        "VernacExtend",
                        "f320953d90c1684fb218151b30f04e4f3994d4b3"
                    ]
                },
                {
                    "command": [
                        "simpl in H6; discriminate.",
                        "VernacExtend",
                        "36f746926dd64bbe9345d7628ce3acb03c56562c"
                    ]
                },
                {
                    "command": [
                        "clear Hrecl1; simpl in H1; simpl; apply lt_n_S; assumption.",
                        "VernacExtend",
                        "a3dd02d63b159c7a98b6b3026db192068b2e0b63"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply minus_Sn_m; apply le_S_n; assumption.",
                        "VernacExtend",
                        "dbebb815fc64411a331c1d472c6990fa65b2bb28"
                    ]
                },
                {
                    "command": [
                        "assert (H18 : (2 <= Rlength l1)%nat).",
                        "VernacExtend",
                        "75157780d158d1f1a134c57927b071bf863bec22"
                    ]
                },
                {
                    "command": [
                        "clear f c l2 lf2 H0 H3 H8 H7 H10 H9 H11 H13 i H1 x H2 H12 m H14 H15 H16 H17; induction l1 as [| r l1 Hrecl1].",
                        "VernacExtend",
                        "72a111eea523827d88002987b690107403f499ec"
                    ]
                },
                {
                    "command": [
                        "discriminate.",
                        "VernacExtend",
                        "66ca81b65e1a53372a2515fdfdd2a6b0677cb9c8"
                    ]
                },
                {
                    "command": [
                        "clear Hrecl1; induction l1 as [| r0 l1 Hrecl1].",
                        "VernacExtend",
                        "96c33176d4c3f4be92c3d20d9ed538a898a5e3c2"
                    ]
                },
                {
                    "command": [
                        "simpl in H5; simpl in H4; assert (H0 : Rmin a b < Rmax a b).",
                        "VernacExtend",
                        "f0d766fc8b1ad04066d9ad34556a73780b5486d1"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin, Rmax; case (Rle_dec a b) as [|[]]; [ assumption | left; assumption ].",
                        "VernacExtend",
                        "3894215fc7cd00078c166e12f8551e9ec33b0f03"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H5 in H0; rewrite <- H4 in H0; elim (Rlt_irrefl _ H0).",
                        "VernacExtend",
                        "afe99a584ab6b2c1489586b0c16f86bdc58425f4"
                    ]
                },
                {
                    "command": [
                        "clear Hrecl1; simpl; repeat apply le_n_S; apply le_O_n.",
                        "VernacExtend",
                        "32e7cf4a37cd187ad5a2eb1c2704d4cd553593d1"
                    ]
                },
                {
                    "command": [
                        "elim (RList_P20 _ H18); intros r1 [r2 [r3 H19]]; rewrite H19; change (f x = pos_Rl (app_Rlist (mid_Rlist (cons_Rlist (cons r2 r3) l2) r1) f) i) ; rewrite RList_P12.",
                        "VernacExtend",
                        "5c8fc2f157fa074e5c6721bc789215f650a61337"
                    ]
                },
                {
                    "command": [
                        "induction i as [| i Hreci].",
                        "VernacExtend",
                        "359a77e440c9883a74d09392e658fa188fb9d6cd"
                    ]
                },
                {
                    "command": [
                        "assert (H20 := le_S_n _ _ H15); assert (H21 := le_trans _ _ _ H18 H20); elim (le_Sn_O _ H21).",
                        "VernacExtend",
                        "044dc3723981c1f915b7e6740b8e0ced0758d1bc"
                    ]
                },
                {
                    "command": [
                        "clear Hreci; rewrite RList_P13.",
                        "VernacExtend",
                        "5aece838c9ac94f3944ea80346cdc418b1bd2cf3"
                    ]
                },
                {
                    "command": [
                        "rewrite H19 in H16; rewrite H19 in H17; change (pos_Rl (cons_Rlist (cons r2 r3) l2) i = pos_Rl l2 (S i - Rlength (cons r1 (cons r2 r3)))) in H16; rewrite H16; change (pos_Rl (cons_Rlist (cons r2 r3) l2) (S i) = pos_Rl l2 (S (S i - Rlength (cons r1 (cons r2 r3))))) in H17; rewrite H17; assert (H20 := H13 (S i - Rlength l1)%nat); unfold constant_D_eq, open_interval in H20; assert (H21 : (S i - Rlength l1 < pred (Rlength l2))%nat).",
                        "VernacExtend",
                        "451255ee8933bda3861a956adac7cca7caa606d7"
                    ]
                },
                {
                    "command": [
                        "apply lt_pred; rewrite minus_Sn_m.",
                        "VernacExtend",
                        "a7c3939df794f54ee7b746e0e0e18e617f446842"
                    ]
                },
                {
                    "command": [
                        "apply plus_lt_reg_l with (Rlength l1); rewrite <- le_plus_minus.",
                        "VernacExtend",
                        "2de8a996caf63ef66ba95b5e7f06d58fb45af4b5"
                    ]
                },
                {
                    "command": [
                        "rewrite H19 in H1; simpl in H1; rewrite H19; simpl; rewrite RList_P23 in H1; apply lt_n_S; assumption.",
                        "VernacExtend",
                        "8840432006d1b3d4d3e8ad6df64a4bcd49bd4086"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (S i); [ apply le_S_n; assumption | apply le_n_Sn ].",
                        "VernacExtend",
                        "b599f63278700575e2723f3bf649837b63bdf6e6"
                    ]
                },
                {
                    "command": [
                        "apply le_S_n; assumption.",
                        "VernacExtend",
                        "2c06a98f9e6b11e386040498d910df6a7f70b17d"
                    ]
                },
                {
                    "command": [
                        "assert (H22 := H20 H21); repeat rewrite H22.",
                        "VernacExtend",
                        "5917b685565b8daf6cf98bebb9485a5024fcd1bf"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H19; assert (H23 : pos_Rl l2 (S i - Rlength l1) <= pos_Rl l2 (S (S i - Rlength l1))).",
                        "VernacExtend",
                        "6c70b5324dd90d36a4ebe250a270f1c78666b293"
                    ]
                },
                {
                    "command": [
                        "apply H7; apply lt_pred.",
                        "VernacExtend",
                        "7f56206ebacaf09775759d883f242173a14f8309"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_Sn_m.",
                        "VernacExtend",
                        "0e21ccba499520e200b98b25d59dc96e608d701d"
                    ]
                },
                {
                    "command": [
                        "apply plus_lt_reg_l with (Rlength l1); rewrite <- le_plus_minus.",
                        "VernacExtend",
                        "2de8a996caf63ef66ba95b5e7f06d58fb45af4b5"
                    ]
                },
                {
                    "command": [
                        "rewrite H19 in H1; simpl in H1; rewrite H19; simpl; rewrite RList_P23 in H1; apply lt_n_S; assumption.",
                        "VernacExtend",
                        "8840432006d1b3d4d3e8ad6df64a4bcd49bd4086"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (S i); [ apply le_S_n; assumption | apply le_n_Sn ].",
                        "VernacExtend",
                        "b599f63278700575e2723f3bf649837b63bdf6e6"
                    ]
                },
                {
                    "command": [
                        "apply le_S_n; assumption.",
                        "VernacExtend",
                        "2c06a98f9e6b11e386040498d910df6a7f70b17d"
                    ]
                },
                {
                    "command": [
                        "elim H23; intro.",
                        "VernacExtend",
                        "356145d595665d4e741cde4b437619d20f6cf261"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "35b716538dd20af83cfdc7d9e6694d744aa20b44"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2; [ prove_sup0 | unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym; [ rewrite Rmult_1_l; rewrite (Rplus_comm (pos_Rl l2 (S i - Rlength l1))); rewrite double; apply Rplus_lt_compat_l; assumption | discrR ] ].",
                        "VernacExtend",
                        "1917a41b7328694b6ebd706e08ec84fa759b9d80"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H19 in H16; rewrite <- H19 in H17; elim H2; intros; rewrite H19 in H25; rewrite H19 in H26; simpl in H25; simpl in H16; rewrite H16 in H25; simpl in H26; simpl in H17; rewrite H17 in H26; simpl in H24; rewrite H24 in H25; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H25 H26)).",
                        "VernacExtend",
                        "44a053997c01ad94c72094e1e1b586c542df3718"
                    ]
                },
                {
                    "command": [
                        "assert (H23 : pos_Rl (cons_Rlist l1 l2) (S i) = pos_Rl l2 (S i - Rlength l1)).",
                        "VernacExtend",
                        "1845c4c20bb9252da628371da57d09ce6f81f4bb"
                    ]
                },
                {
                    "command": [
                        "rewrite H19; simpl; simpl in H16; apply H16.",
                        "VernacExtend",
                        "c363d42c272a554f479071050dfedf11dbb3ce75"
                    ]
                },
                {
                    "command": [
                        "assert (H24 : pos_Rl (cons_Rlist l1 l2) (S (S i)) = pos_Rl l2 (S (S i - Rlength l1))).",
                        "VernacExtend",
                        "e8d557e5db2947a6564064b7f43f58f91d58a505"
                    ]
                },
                {
                    "command": [
                        "rewrite H19; simpl; simpl in H17; apply H17.",
                        "VernacExtend",
                        "52d49e5978745813f7b3fc117749eafd2a024004"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H23; rewrite <- H24; assumption.",
                        "VernacExtend",
                        "8adc22db9311de5abde6f5e20dc0a9c5598a3299"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite H19 in H1; simpl in H1; apply lt_S_n; assumption.",
                        "VernacExtend",
                        "316c373c89232711383edeb200133e0aa2f43d56"
                    ]
                },
                {
                    "command": [
                        "rewrite RList_P14; rewrite H19 in H1; simpl in H1; simpl; apply H1.",
                        "VernacExtend",
                        "e6c3976175a30ed5455ac998e68e7c221fdc4583"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P41",
            "line_nb": 1014,
            "steps": [
                {
                    "command": [
                        "intros f a b c H H0 (l1,(lf1,H1)) (l2,(lf2,H2)); destruct (total_order_T a b) as [[Hltab|Hab]|Hgtab].",
                        "VernacExtend",
                        "91bd25077fa5efbf8aa7b47d7eafdf1ec18d3994"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T b c) as [[Hltbc|Hbc]|Hgtbc].",
                        "VernacExtend",
                        "332b50f4888c87d4f475303678d28f4f6c91a6f2"
                    ]
                },
                {
                    "command": [
                        "exists (cons_Rlist l1 l2); exists (FF (cons_Rlist l1 l2) f); apply StepFun_P40 with b lf1 lf2; assumption.",
                        "VernacExtend",
                        "10ae826c103ea93c0d0900ef9138b72f39c6b9bf"
                    ]
                },
                {
                    "command": [
                        "exists l1; exists lf1; rewrite Hbc in H1; assumption.",
                        "VernacExtend",
                        "643f1b586150d864e9ab25f4ef2a8d52c006aaa2"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H0 Hgtbc)).",
                        "VernacExtend",
                        "dbd429f2989f92224357d3c58329ca4f90bdcebe"
                    ]
                },
                {
                    "command": [
                        "exists l2; exists lf2; rewrite <- Hab in H2; assumption.",
                        "VernacExtend",
                        "8c8f944c19defb95a02f6582784897bf6455bd00"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H Hgtab)).",
                        "VernacExtend",
                        "b426153eb07961963dcfe560e9b5f75c9e635d3a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P42",
            "line_nb": 1023,
            "steps": [
                {
                    "command": [
                        "intros l1 l2 f; induction l1 as [| r l1 IHl1]; intros H; [ simpl; ring | destruct l1 as [| r0 r1]; [ simpl in H; simpl; destruct l2 as [| r0 r1]; [ simpl; ring | simpl; simpl in H; rewrite H; ring ] | simpl; rewrite Rplus_assoc; apply Rplus_eq_compat_l; apply IHl1; rewrite <- H; reflexivity ] ].",
                        "VernacExtend",
                        "95ef9d7314625acc2bcfac1a8a78c63fd07d0760"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P45",
            "line_nb": 1235,
            "steps": [
                {
                    "command": [
                        "intros f; intros; assert (H0 : a <= b).",
                        "VernacExtend",
                        "4f194403ca1216762503c713eefedb0eb847c518"
                    ]
                },
                {
                    "command": [
                        "elim H; intros; apply Rle_trans with c; assumption.",
                        "VernacExtend",
                        "40fc50aac59b35a1a39e8987af7b6931aa45106a"
                    ]
                },
                {
                    "command": [
                        "elim H; clear H; intros; unfold IsStepFun in X; unfold is_subdivision in X; elim X; clear X; intros l1 [lf1 H2]; cut (forall (l1 lf1:Rlist) (a b c:R) (f:R -> R), adapted_couple f a b l1 lf1 -> a <= c <= b -> { l:Rlist & { l0:Rlist & adapted_couple f c b l l0 } }).",
                        "VernacExtend",
                        "2a2e230aa0856ba29132ac4ebc86c0e88384fb3c"
                    ]
                },
                {
                    "command": [
                        "intro X; unfold IsStepFun; unfold is_subdivision; eapply X; [ apply H2 | split; assumption ].",
                        "VernacExtend",
                        "e1191b2427dfa2d109a8f3b185d953b946910962"
                    ]
                },
                {
                    "command": [
                        "clear f a b c H0 H H1 H2 l1 lf1; simple induction l1.",
                        "VernacExtend",
                        "c402ad955fc5c98dfc849bb4d49e961377d45d91"
                    ]
                },
                {
                    "command": [
                        "intros; unfold adapted_couple in H; decompose [and] H; clear H; simpl in H4; discriminate.",
                        "VernacExtend",
                        "6071fac3b9b52f0412771cca904bb12a729ea947"
                    ]
                },
                {
                    "command": [
                        "simple induction r0.",
                        "VernacExtend",
                        "3cd54584b7d76a051ea25914c5484966487340a3"
                    ]
                },
                {
                    "command": [
                        "intros X lf1 a b c f H H0; assert (H1 : a = b).",
                        "VernacExtend",
                        "20b80494423cc300b1c342719a1e520901802126"
                    ]
                },
                {
                    "command": [
                        "unfold adapted_couple in H; decompose [and] H; clear H; simpl in H3; simpl in H2; assert (H7 : a <= b).",
                        "VernacExtend",
                        "2e50029534ed9fbfab60d565c5a4bfca67b8ec93"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros; apply Rle_trans with c; assumption.",
                        "VernacExtend",
                        "6cde8d647b9f47d5a85deba0b972b04164cc42b8"
                    ]
                },
                {
                    "command": [
                        "replace a with (Rmin a b).",
                        "VernacExtend",
                        "4a0c6737ae26b44753b1be4180fc9efce97e5fa2"
                    ]
                },
                {
                    "command": [
                        "pattern b at 2; replace b with (Rmax a b).",
                        "VernacExtend",
                        "cad9803f657d3249e643ddf91c2048b542fcf25f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2; rewrite H3; reflexivity.",
                        "VernacExtend",
                        "eaa163fc4c89c0e3e40fda04b25fa70f91a2f646"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; decide (Rle_dec a b) with H7; reflexivity.",
                        "VernacExtend",
                        "3678327bd612e92b2614afe0e6e5272739062764"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; decide (Rle_dec a b) with H7; reflexivity.",
                        "VernacExtend",
                        "99371777470e5e6e7f8602d76960a10040e7e329"
                    ]
                },
                {
                    "command": [
                        "split with (cons r nil); split with lf1; assert (H2 : c = b).",
                        "VernacExtend",
                        "b9b0021fb86fb428bd5334119a0a221967e7b754"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H0; elim H0; intros; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "e2d712de47349145f4cf37b38d18bea3a7ded995"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H2 in H1; rewrite <- H1; assumption.",
                        "VernacExtend",
                        "d01f961a837ae1ba677cd43a9f8566a6857df1a4"
                    ]
                },
                {
                    "command": [
                        "intros r1 r2 _ X0 lf1 a b c f H H0; induction lf1 as [| r3 lf1 Hreclf1].",
                        "VernacExtend",
                        "e3fda7645b707412aadd681e7bdcaccf514461b4"
                    ]
                },
                {
                    "command": [
                        "unfold adapted_couple in H; decompose [and] H; clear H; simpl in H4; discriminate.",
                        "VernacExtend",
                        "bebd845414abf18e4cf04ee2e4cb7bcfe50d89a5"
                    ]
                },
                {
                    "command": [
                        "clear Hreclf1; assert (H1 : {c <= r1} + {r1 < c}).",
                        "VernacExtend",
                        "612612bc5ec88e2147a9fb29b6a2b44efb296336"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec c r1); intro; [ left; assumption | right; auto with real ].",
                        "VernacExtend",
                        "4181b16340706df15e26966bc08ec4405c71b3dc"
                    ]
                },
                {
                    "command": [
                        "elim H1; intro a0.",
                        "VernacExtend",
                        "7540f5a70ab3d757ee7fd59a798d71f162235ce4"
                    ]
                },
                {
                    "command": [
                        "split with (cons c (cons r1 r2)); split with (cons r3 lf1); unfold adapted_couple in H; decompose [and] H; clear H; unfold adapted_couple; repeat split.",
                        "VernacExtend",
                        "4bf97ce93d43cfe6d77c6915f59b8414ed0b91c0"
                    ]
                },
                {
                    "command": [
                        "unfold ordered_Rlist; intros; simpl in H; induction i as [| i Hreci].",
                        "VernacExtend",
                        "234e72ada15437c8cf79e98c5be4032756839360"
                    ]
                },
                {
                    "command": [
                        "simpl; assumption.",
                        "VernacExtend",
                        "b1f9ad3a64b2d320fc95a4fc7d31f60651bfdba6"
                    ]
                },
                {
                    "command": [
                        "clear Hreci; apply (H2 (S i)); simpl; assumption.",
                        "VernacExtend",
                        "9ef0fdf7c6a34f9d12acad87f7d01dd2d326b854"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold Rmin; case (Rle_dec c b) as [|[]]; [ reflexivity | elim H0; intros; assumption ].",
                        "VernacExtend",
                        "511bb68ddec3dfaff033bb0cdb80094d67f8db14"
                    ]
                },
                {
                    "command": [
                        "replace (Rmax c b) with (Rmax a b).",
                        "VernacExtend",
                        "0bf99f81e1426dae4553e6949ba8fcb7f01848b3"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H3; reflexivity.",
                        "VernacExtend",
                        "28129f8c96918ee1d719c0c3ee71990d9fc09433"
                    ]
                },
                {
                    "command": [
                        "unfold Rmax; case (Rle_dec c b) as [|[]]; case (Rle_dec a b) as [|[]]; [ reflexivity | elim H0; intros; apply Rle_trans with c; assumption | elim H0; intros; assumption | elim H0; intros; apply Rle_trans with c; assumption ].",
                        "VernacExtend",
                        "cd2069885520d8a626f81343712e58854844c6a6"
                    ]
                },
                {
                    "command": [
                        "simpl; simpl in H5; apply H5.",
                        "VernacExtend",
                        "a83c22a617cd1d19516018360708cd1ac6c89776"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in H; induction i as [| i Hreci].",
                        "VernacExtend",
                        "87db290f0046628c55e6216dccb73fe5b315e6e7"
                    ]
                },
                {
                    "command": [
                        "unfold constant_D_eq, open_interval; intros; simpl; apply (H7 0%nat).",
                        "VernacExtend",
                        "adf19069d76bb0b8669dbd4e6919fb27ce9dfa9b"
                    ]
                },
                {
                    "command": [
                        "simpl; apply lt_O_Sn.",
                        "VernacExtend",
                        "92647c7b432ca8163d2189148afd540a600c4def"
                    ]
                },
                {
                    "command": [
                        "unfold open_interval; simpl; simpl in H6; elim H6; clear H6; intros; split; try assumption; apply Rle_lt_trans with c; try assumption; replace r with a.",
                        "VernacExtend",
                        "43108e547a265680d373ad294341e5d3750ef7e0"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros; assumption.",
                        "VernacExtend",
                        "93aaa20e409e093c318ed7f35309abbda4e55e01"
                    ]
                },
                {
                    "command": [
                        "simpl in H4; rewrite H4; unfold Rmin; case (Rle_dec a b) as [|[]]; [ reflexivity | elim H0; intros; apply Rle_trans with c; assumption ].",
                        "VernacExtend",
                        "8b6087c669afcdb8062903a20166662960933f8e"
                    ]
                },
                {
                    "command": [
                        "clear Hreci; apply (H7 (S i)); simpl; assumption.",
                        "VernacExtend",
                        "3e9f6c11c0ff833e584347593ae25fa05534b854"
                    ]
                },
                {
                    "command": [
                        "cut (adapted_couple f r1 b (cons r1 r2) lf1).",
                        "VernacExtend",
                        "26ed583668b37c2bbb7f17aa8101f7df31a9e248"
                    ]
                },
                {
                    "command": [
                        "cut (r1 <= c <= b).",
                        "VernacExtend",
                        "eb42ef02d83398a3b7d6b0633bb4e74669dd22a8"
                    ]
                },
                {
                    "command": [
                        "intros; elim (X0 _ _ _ _ _ H3 H2); intros l1' [lf1' H4]; split with l1'; split with lf1'; assumption.",
                        "VernacExtend",
                        "54109bc3fe53057f98b7cae271a1d5fb5dbe8358"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | elim H0; intros; assumption ].",
                        "VernacExtend",
                        "df180e12d2ae787128c572c52be746e857bcd06a"
                    ]
                },
                {
                    "command": [
                        "eapply StepFun_P7; [ elim H0; intros; apply Rle_trans with c; [ apply H2 | apply H3 ] | apply H ].",
                        "VernacExtend",
                        "1b16b864f5c40eb9d72417c582004e42d681087e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "StepFun_P46",
            "line_nb": 1281,
            "steps": [
                {
                    "command": [
                        "intros f; intros; case (Rle_dec a b); case (Rle_dec b c); intros.",
                        "VernacExtend",
                        "5c33c7ce7f061c62abf19bd5286e114431ceec80"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P41 with b; assumption.",
                        "VernacExtend",
                        "62211cb82e90e4f404fe91ba25c20aeefc420fa3"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec a c); intro.",
                        "VernacExtend",
                        "a52c2d1f592b3316592b3f567f3e423322186e82"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P44 with b; try assumption.",
                        "VernacExtend",
                        "30c7f6b836d783b066ed3e8fdd384567363eb725"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | auto with real ].",
                        "VernacExtend",
                        "9bbdc3b8f0fa19c19cba930488d8dfb29dd45d02"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P6; apply StepFun_P44 with b.",
                        "VernacExtend",
                        "09e12607c57562d0bdde3c6df1a6694eed5980e1"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P6; assumption.",
                        "VernacExtend",
                        "18eab6cdc0f4f971522e2ff93494c9603435efa6"
                    ]
                },
                {
                    "command": [
                        "split; auto with real.",
                        "VernacExtend",
                        "53b919a143f08c7f91e079731a18ea6fb30dca87"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec a c); intro.",
                        "VernacExtend",
                        "a52c2d1f592b3316592b3f567f3e423322186e82"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P45 with b; try assumption.",
                        "VernacExtend",
                        "5d91ee099090cb509646719f4ac3c7ecbc16f2bb"
                    ]
                },
                {
                    "command": [
                        "split; auto with real.",
                        "VernacExtend",
                        "53b919a143f08c7f91e079731a18ea6fb30dca87"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P6; apply StepFun_P45 with b.",
                        "VernacExtend",
                        "1169255c7d052396c1a6d31e37e0acd890b053eb"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P6; assumption.",
                        "VernacExtend",
                        "18eab6cdc0f4f971522e2ff93494c9603435efa6"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | auto with real ].",
                        "VernacExtend",
                        "9bbdc3b8f0fa19c19cba930488d8dfb29dd45d02"
                    ]
                },
                {
                    "command": [
                        "apply StepFun_P6; apply StepFun_P41 with b; auto with real || apply StepFun_P6; assumption.",
                        "VernacExtend",
                        "8db053750888652b535fd68cd5f8dbea02d16b27"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}