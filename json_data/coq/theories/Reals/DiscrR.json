{
    "filename": "theories/Reals/DiscrR.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import RIneq.",
            "VernacRequire",
            "3d28dbb9914b341ca95fdd60e4999d0ee31c0ea7"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Lemma Rlt_R0_R2 : 0 < 2.",
            "VernacStartTheoremProof",
            "66780bc7453f55c47c5bfd05e19ceda5c6d0f75d"
        ],
        [
            "change 2 with (INR 2); apply lt_INR_0; apply lt_O_Sn.",
            "VernacExtend",
            "4196b26e7145746b997c29965ffd29a1d0d8927a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Notation Rplus_lt_pos := Rplus_lt_0_compat (only parsing).",
            "VernacSyntacticDefinition",
            "959d285d3c7a8b304ca6d952f1b1cd2ead773a71"
        ],
        [
            "Lemma IZR_eq : forall z1 z2:Z, z1 = z2 -> IZR z1 = IZR z2.",
            "VernacStartTheoremProof",
            "6bb7f2a345348e3d9b884d093d8f1d937a721745"
        ],
        [
            "intros; rewrite H; reflexivity.",
            "VernacExtend",
            "56d8ebe070934265219de9b6580d0d60c2fadceb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Ltac discrR := try match goal with | |- (?X1 <> ?X2) => repeat rewrite <- plus_IZR || rewrite <- mult_IZR || rewrite <- Ropp_Ropp_IZR || rewrite Z_R_minus; apply IZR_neq; try discriminate end.",
            "VernacExtend",
            "68d446d0724e3d1a68fca23b4cb880b49465666c"
        ],
        [
            "Ltac prove_sup0 := match goal with | |- (0 < 1) => apply Rlt_0_1 | |- (0 < ?X1) => repeat (apply Rmult_lt_0_compat || apply Rplus_lt_pos; try apply Rlt_0_1 || apply Rlt_R0_R2) | |- (?X1 > 0) => change (0 < X1); prove_sup0 end.",
            "VernacExtend",
            "e5e86295827ac45d9f4832bbff9c9c36671aec24"
        ],
        [
            "Ltac omega_sup := repeat rewrite <- plus_IZR || rewrite <- mult_IZR || rewrite <- Ropp_Ropp_IZR || rewrite Z_R_minus; apply IZR_lt; omega.",
            "VernacExtend",
            "3ce742dfa96417426f4a8147fd0cffd26e2959f9"
        ],
        [
            "Ltac prove_sup := match goal with | |- (?X1 > ?X2) => change (X2 < X1); prove_sup | |- (0 < ?X1) => prove_sup0 | |- (- ?X1 < 0) => rewrite <- Ropp_0; prove_sup | |- (- ?X1 < - ?X2) => apply Ropp_lt_gt_contravar; prove_sup | |- (- ?X1 < ?X2) => apply Rlt_trans with 0; prove_sup | |- (?X1 < ?X2) => omega_sup | _ => idtac end.",
            "VernacExtend",
            "230e4cc0c6de911f4acf691cd14a5d02c9cc9082"
        ],
        [
            "Ltac Rcompute := repeat rewrite <- plus_IZR || rewrite <- mult_IZR || rewrite <- Ropp_Ropp_IZR || rewrite Z_R_minus; apply IZR_eq; try reflexivity.",
            "VernacExtend",
            "52e9318f54a8f5b880ef21da78c1f017f1e55f7b"
        ]
    ],
    "proofs": [
        {
            "name": "Rlt_R0_R2",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "change 2 with (INR 2); apply lt_INR_0; apply lt_O_Sn.",
                        "VernacExtend",
                        "4196b26e7145746b997c29965ffd29a1d0d8927a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "IZR_eq",
            "line_nb": 7,
            "steps": [
                {
                    "command": [
                        "intros; rewrite H; reflexivity.",
                        "VernacExtend",
                        "56d8ebe070934265219de9b6580d0d60c2fadceb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}