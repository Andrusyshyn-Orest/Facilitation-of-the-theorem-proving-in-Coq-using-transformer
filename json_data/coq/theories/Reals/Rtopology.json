{
    "filename": "theories/Reals/Rtopology.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Ranalysis1.",
            "VernacRequire",
            "b7df6cdb101f6571d1192419ca4168ab43a628dd"
        ],
        [
            "Require Import RList.",
            "VernacRequire",
            "62aa96c8e506396776cef73fb840057cc0aa5539"
        ],
        [
            "Require Import Classical_Prop.",
            "VernacRequire",
            "4ea5121b46cb94a964b9761d1c61cca4c510f8d4"
        ],
        [
            "Require Import Classical_Pred_Type.",
            "VernacRequire",
            "f4ed9944a865e8833e6ec642aca2c6eda50f6956"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Definition included (D1 D2:R -> Prop) : Prop := forall x:R, D1 x -> D2 x.",
            "VernacDefinition",
            "2fcb1c87166df63b26e0f91210bb7738ac0d1c6c"
        ],
        [
            "Definition disc (x:R) (delta:posreal) (y:R) : Prop := Rabs (y - x) < delta.",
            "VernacDefinition",
            "dd76ced1f0653f07569bfadd8b318f37d353fbda"
        ],
        [
            "Definition neighbourhood (V:R -> Prop) (x:R) : Prop := exists delta : posreal, included (disc x delta) V.",
            "VernacDefinition",
            "ae099c22b1b5018122b0462761977f5bc9bd05ea"
        ],
        [
            "Definition open_set (D:R -> Prop) : Prop := forall x:R, D x -> neighbourhood D x.",
            "VernacDefinition",
            "13cf8b9f5e2323b81517ee09fa6dc336b44a593d"
        ],
        [
            "Definition complementary (D:R -> Prop) (c:R) : Prop := ~ D c.",
            "VernacDefinition",
            "6ca66e707a21f3d2cc6e132412cff59cfc695385"
        ],
        [
            "Definition closed_set (D:R -> Prop) : Prop := open_set (complementary D).",
            "VernacDefinition",
            "1e3b19597338214cd8314dea61f0b8ad48ef8f32"
        ],
        [
            "Definition intersection_domain (D1 D2:R -> Prop) (c:R) : Prop := D1 c /\\ D2 c.",
            "VernacDefinition",
            "3b57d5f65a035a9bc753279883d2a4e113673a0e"
        ],
        [
            "Definition union_domain (D1 D2:R -> Prop) (c:R) : Prop := D1 c \\/ D2 c.",
            "VernacDefinition",
            "b30b4a1182da4af83d93ffbe2ca2dbdfd2973a58"
        ],
        [
            "Definition interior (D:R -> Prop) (x:R) : Prop := neighbourhood D x.",
            "VernacDefinition",
            "57bf0bfbde9cf38d3cde643740f4ef45563c771d"
        ],
        [
            "Lemma interior_P1 : forall D:R -> Prop, included (interior D) D.",
            "VernacStartTheoremProof",
            "1ff2f6322f52a2f2091837186d77e7d1ac54104c"
        ],
        [
            "intros; unfold included; unfold interior; intros; unfold neighbourhood in H; elim H; intros; unfold included in H0; apply H0; unfold disc; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (cond_pos x0).",
            "VernacExtend",
            "4f73a5b423383cfcb9877a8439dfe34106b1d9cd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma interior_P2 : forall D:R -> Prop, open_set D -> included D (interior D).",
            "VernacStartTheoremProof",
            "6f9141ca3da3823021e72cbe8ad744c2fdcae7ee"
        ],
        [
            "intros; unfold open_set in H; unfold included; intros; assert (H1 := H _ H0); unfold interior; apply H1.",
            "VernacExtend",
            "2bd5455a20d044e8fd4218f52265e4037452f464"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition point_adherent (D:R -> Prop) (x:R) : Prop := forall V:R -> Prop, neighbourhood V x -> exists y : R, intersection_domain V D y.",
            "VernacDefinition",
            "a361af3aa7b95da524f5a56cbbf698412637209c"
        ],
        [
            "Definition adherence (D:R -> Prop) (x:R) : Prop := point_adherent D x.",
            "VernacDefinition",
            "8cc10edda70111fe753dbe6a84cbadf9a8456878"
        ],
        [
            "Lemma adherence_P1 : forall D:R -> Prop, included D (adherence D).",
            "VernacStartTheoremProof",
            "41c8c8d38760b86b349338059597e9546ecf0d8d"
        ],
        [
            "intro; unfold included; intros; unfold adherence; unfold point_adherent; intros; exists x; unfold intersection_domain; split.",
            "VernacExtend",
            "a08f1adb63cc6bd6d741b5ca2f2bfbb10bc7a878"
        ],
        [
            "unfold neighbourhood in H0; elim H0; intros; unfold included in H1; apply H1; unfold disc; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (cond_pos x0).",
            "VernacExtend",
            "1ba2390623b1ce317a66a62176bad4e72181e50f"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma included_trans : forall D1 D2 D3:R -> Prop, included D1 D2 -> included D2 D3 -> included D1 D3.",
            "VernacStartTheoremProof",
            "c7722f75166a79a577ace3c17efd3df651206fda"
        ],
        [
            "unfold included; intros; apply H0; apply H; apply H1.",
            "VernacExtend",
            "56ffdea1bfe1edb4534ba2a500b40ecdd7c07088"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma interior_P3 : forall D:R -> Prop, open_set (interior D).",
            "VernacStartTheoremProof",
            "71b74327c9687e8cadc99419b782c5e6e1a1d35d"
        ],
        [
            "intro; unfold open_set, interior; unfold neighbourhood; intros; elim H; intros.",
            "VernacExtend",
            "0c75f62df7b961a7b922d70e22a50450a3c354ec"
        ],
        [
            "exists x0; unfold included; intros.",
            "VernacExtend",
            "f63ce33dc8b7c12f2805aca0cb2b7c9614bc4fe4"
        ],
        [
            "set (del := x0 - Rabs (x - x1)).",
            "VernacExtend",
            "eb6be60f36326bdb123f1b177155b39f17ba5303"
        ],
        [
            "cut (0 < del).",
            "VernacExtend",
            "a9cbfc22eec21b4b9e55c2bfcbc783b3515494ab"
        ],
        [
            "intro; exists (mkposreal del H2); intros.",
            "VernacExtend",
            "9dca3e1440c7249c4216462d85cca7a6ea243b75"
        ],
        [
            "cut (included (disc x1 (mkposreal del H2)) (disc x x0)).",
            "VernacExtend",
            "8816cbf059dd40d430b7d6edd19b915fd2f0569e"
        ],
        [
            "intro; assert (H5 := included_trans _ _ _ H4 H0).",
            "VernacExtend",
            "ef16c525e64f715e5446c3203fc37e98e14aad17"
        ],
        [
            "apply H5; apply H3.",
            "VernacExtend",
            "1ee78c0f603ffadf380aa3183dad14053ceedffc"
        ],
        [
            "unfold included; unfold disc; intros.",
            "VernacExtend",
            "d1e34d8ebce63e62c4cbd9db1a7ed6f213f5de08"
        ],
        [
            "apply Rle_lt_trans with (Rabs (x3 - x1) + Rabs (x1 - x)).",
            "VernacExtend",
            "b8a75799050071f9bff96f04fd449bfd069789df"
        ],
        [
            "replace (x3 - x) with (x3 - x1 + (x1 - x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "9c67fbbc003624229ba02ac584e7611a24351c5f"
        ],
        [
            "replace (pos x0) with (del + Rabs (x1 - x)).",
            "VernacExtend",
            "e94af4fa008719b9382f9fdef7eae62cc4e99783"
        ],
        [
            "do 2 rewrite <- (Rplus_comm (Rabs (x1 - x))); apply Rplus_lt_compat_l; apply H4.",
            "VernacExtend",
            "6314e171cc89b50b857366e141be190f76061231"
        ],
        [
            "unfold del; rewrite <- (Rabs_Ropp (x - x1)); rewrite Ropp_minus_distr; ring.",
            "VernacExtend",
            "629d5024a76b964e4d5563e60c49c833ebe287e0"
        ],
        [
            "unfold del; apply Rplus_lt_reg_l with (Rabs (x - x1)); rewrite Rplus_0_r; replace (Rabs (x - x1) + (x0 - Rabs (x - x1))) with (pos x0); [ idtac | ring ].",
            "VernacExtend",
            "9b04d513f40a892e93ed2181694a0734d845c8c2"
        ],
        [
            "unfold disc in H1; rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H1.",
            "VernacExtend",
            "f7a3a1141fe57fd98d10b665f0f5ed3b38e38447"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma complementary_P1 : forall D:R -> Prop, ~ (exists y : R, intersection_domain D (complementary D) y).",
            "VernacStartTheoremProof",
            "e4ad8c3dd43eca1e4745c924325ec9052b3a502d"
        ],
        [
            "intro; red; intro; elim H; intros; unfold intersection_domain, complementary in H0; elim H0; intros; elim H2; assumption.",
            "VernacExtend",
            "dfb44e61fef57f9abc816c0f6c229e3a6e2dba47"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adherence_P2 : forall D:R -> Prop, closed_set D -> included (adherence D) D.",
            "VernacStartTheoremProof",
            "baaf594602d39cb2ed930ea1fafb5bf5219ff22d"
        ],
        [
            "unfold closed_set; unfold open_set, complementary; intros; unfold included, adherence; intros; assert (H1 := classic (D x)); elim H1; intro.",
            "VernacExtend",
            "e11f8a1ecd465f65694f865b2e25531cd24e6f89"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H3 := H _ H2); assert (H4 := H0 _ H3); elim H4; intros; unfold intersection_domain in H5; elim H5; intros; elim H6; assumption.",
            "VernacExtend",
            "531715289bb5e7fdb9dcf5e8e989db58be50fe18"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adherence_P3 : forall D:R -> Prop, closed_set (adherence D).",
            "VernacStartTheoremProof",
            "1f54a5179e6d06da2cf62393dec1ce9f089b9fed"
        ],
        [
            "intro; unfold closed_set, adherence; unfold open_set, complementary, point_adherent; intros; set (P := fun V:R -> Prop => neighbourhood V x -> exists y : R, intersection_domain V D y); assert (H0 := not_all_ex_not _ P H); elim H0; intros V0 H1; unfold P in H1; assert (H2 := imply_to_and _ _ H1); unfold neighbourhood; elim H2; intros; unfold neighbourhood in H3; elim H3; intros; exists x0; unfold included; intros; red; intro.",
            "VernacExtend",
            "23be2dcbbdac22d4aa8874739f513f0c04ad41ae"
        ],
        [
            "assert (H8 := H7 V0); cut (exists delta : posreal, (forall x:R, disc x1 delta x -> V0 x)).",
            "VernacExtend",
            "80269c330ba6f9a0203381dd7d85082d4393a11d"
        ],
        [
            "intro; assert (H10 := H8 H9); elim H4; assumption.",
            "VernacExtend",
            "0d12da11c38e03977698a965c4ab05a6f8d5158b"
        ],
        [
            "cut (0 < x0 - Rabs (x - x1)).",
            "VernacExtend",
            "31209c22ee499303b39fff45b3bf92840a0a9b4a"
        ],
        [
            "intro; set (del := mkposreal _ H9); exists del; intros; unfold included in H5; apply H5; unfold disc; apply Rle_lt_trans with (Rabs (x2 - x1) + Rabs (x1 - x)).",
            "VernacExtend",
            "67bd55518154b00e394495ffd81dc1b334eb6a3e"
        ],
        [
            "replace (x2 - x) with (x2 - x1 + (x1 - x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "7df806a20c9de6b182543127317fde7083cb5619"
        ],
        [
            "replace (pos x0) with (del + Rabs (x1 - x)).",
            "VernacExtend",
            "e94af4fa008719b9382f9fdef7eae62cc4e99783"
        ],
        [
            "do 2 rewrite <- (Rplus_comm (Rabs (x1 - x))); apply Rplus_lt_compat_l; apply H10.",
            "VernacExtend",
            "5131177403cc4811f46dc5977e857a94785157fe"
        ],
        [
            "unfold del; simpl; rewrite <- (Rabs_Ropp (x - x1)); rewrite Ropp_minus_distr; ring.",
            "VernacExtend",
            "bf6d8dfe6cfa36d6e373bfd5136210f81722e05a"
        ],
        [
            "apply Rplus_lt_reg_l with (Rabs (x - x1)); rewrite Rplus_0_r; replace (Rabs (x - x1) + (x0 - Rabs (x - x1))) with (pos x0); [ rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H6 | ring ].",
            "VernacExtend",
            "52e6b50508b28986cd937c3271d060aab97a7be4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition eq_Dom (D1 D2:R -> Prop) : Prop := included D1 D2 /\\ included D2 D1.",
            "VernacDefinition",
            "2cc4be3cfe8b04fcbd14d8d8d38a379401f41cc9"
        ],
        [
            "Infix \"=_D\" := eq_Dom (at level 70, no associativity).",
            "VernacInfix",
            "3dc05e423f6c1ada0fd360ccbcc9d3bd9ded68fc"
        ],
        [
            "Lemma open_set_P1 : forall D:R -> Prop, open_set D <-> D =_D interior D.",
            "VernacStartTheoremProof",
            "1b8edd8b566b2f1e5f0ec56f6e016b3e9756e04e"
        ],
        [
            "intro; split.",
            "VernacExtend",
            "fab266bb307ddec4a6ab91d7f2efd84a9c1736ef"
        ],
        [
            "intro; unfold eq_Dom; split.",
            "VernacExtend",
            "59f9e93718ec0d9211b09218f6073405fa244cd2"
        ],
        [
            "apply interior_P2; assumption.",
            "VernacExtend",
            "b73be87f747c739210d9ee480e36316fa0cd43ca"
        ],
        [
            "apply interior_P1.",
            "VernacExtend",
            "2443ee16fd451397f4bbb421ed584d398a93fdb4"
        ],
        [
            "intro; unfold eq_Dom in H; elim H; clear H; intros; unfold open_set; intros; unfold included, interior in H; unfold included in H0; apply (H _ H1).",
            "VernacExtend",
            "c0aed064f3e7a523ea8dc94365357ff2d03c866a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma closed_set_P1 : forall D:R -> Prop, closed_set D <-> D =_D adherence D.",
            "VernacStartTheoremProof",
            "da8ddbefe1cc333545db4e2c243a1a301b0eed14"
        ],
        [
            "intro; split.",
            "VernacExtend",
            "fab266bb307ddec4a6ab91d7f2efd84a9c1736ef"
        ],
        [
            "intro; unfold eq_Dom; split.",
            "VernacExtend",
            "59f9e93718ec0d9211b09218f6073405fa244cd2"
        ],
        [
            "apply adherence_P1.",
            "VernacExtend",
            "cb9b75b28db1ff25e5fc5dbd77f191671d8b17a8"
        ],
        [
            "apply adherence_P2; assumption.",
            "VernacExtend",
            "9fd3f3220cd8bbda00e39f89a2598f5597ae4fce"
        ],
        [
            "unfold eq_Dom; unfold included; intros; assert (H0 := adherence_P3 D); unfold closed_set in H0; unfold closed_set; unfold open_set; unfold open_set in H0; intros; assert (H2 : complementary (adherence D) x).",
            "VernacExtend",
            "4bf0ee213c0eb4df284c54a2d15398a45abae8e2"
        ],
        [
            "unfold complementary; unfold complementary in H1; red; intro; elim H; clear H; intros _ H; elim H1; apply (H _ H2).",
            "VernacExtend",
            "595cb7835b89cd8b7686caec8fc63e799b534bb1"
        ],
        [
            "assert (H3 := H0 _ H2); unfold neighbourhood; unfold neighbourhood in H3; elim H3; intros; exists x0; unfold included; unfold included in H4; intros; assert (H6 := H4 _ H5); unfold complementary in H6; unfold complementary; red; intro; elim H; clear H; intros H _; elim H6; apply (H _ H7).",
            "VernacExtend",
            "64b8986c740593ebb46cd439530cb329f6d22d37"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma neighbourhood_P1 : forall (D1 D2:R -> Prop) (x:R), included D1 D2 -> neighbourhood D1 x -> neighbourhood D2 x.",
            "VernacStartTheoremProof",
            "9e6dad5aabc7b3d9e36b37d3d172335d09f1a4a0"
        ],
        [
            "unfold included, neighbourhood; intros; elim H0; intros; exists x0; intros; unfold included; unfold included in H1; intros; apply (H _ (H1 _ H2)).",
            "VernacExtend",
            "1ee269f9b3499a9b6c4e1c752b826f431c098a04"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma open_set_P2 : forall D1 D2:R -> Prop, open_set D1 -> open_set D2 -> open_set (union_domain D1 D2).",
            "VernacStartTheoremProof",
            "035bb5405a00afba3321dd4ac88cc1818494eb2a"
        ],
        [
            "unfold open_set; intros; unfold union_domain in H1; elim H1; intro.",
            "VernacExtend",
            "0af7103a1e75e72f96efc56362724845e7ff9a63"
        ],
        [
            "apply neighbourhood_P1 with D1.",
            "VernacExtend",
            "e26a818a68e118763f2d6338c792346de6dccebf"
        ],
        [
            "unfold included, union_domain; tauto.",
            "VernacExtend",
            "e3e251c24445ae18c817439fc3ee20d10f99a97e"
        ],
        [
            "apply H; assumption.",
            "VernacExtend",
            "7904d623a02884c927ef4e8b66c90cb12eee7c7a"
        ],
        [
            "apply neighbourhood_P1 with D2.",
            "VernacExtend",
            "06b1b5fa699311cd4ab75ed775f3f7bd529a6976"
        ],
        [
            "unfold included, union_domain; tauto.",
            "VernacExtend",
            "e3e251c24445ae18c817439fc3ee20d10f99a97e"
        ],
        [
            "apply H0; assumption.",
            "VernacExtend",
            "6b55086dea19d45e0fd04d897d6b583689aff105"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma open_set_P3 : forall D1 D2:R -> Prop, open_set D1 -> open_set D2 -> open_set (intersection_domain D1 D2).",
            "VernacStartTheoremProof",
            "f509ec4a13da439ae3f01ed6d4aaa4fff9548841"
        ],
        [
            "unfold open_set; intros; unfold intersection_domain in H1; elim H1; intros.",
            "VernacExtend",
            "7951d4e3463b5c669cbbfba1acbd2c0995703e1a"
        ],
        [
            "assert (H4 := H _ H2); assert (H5 := H0 _ H3); unfold intersection_domain; unfold neighbourhood in H4, H5; elim H4; clear H; intros del1 H; elim H5; clear H0; intros del2 H0; cut (0 < Rmin del1 del2).",
            "VernacExtend",
            "713c82ebf981421fb0ef18c531ca808a9bb20005"
        ],
        [
            "intro; set (del := mkposreal _ H6).",
            "VernacExtend",
            "446469af87c29816c8fedeb637eba671856eb31b"
        ],
        [
            "exists del; unfold included; intros; unfold included in H, H0; unfold disc in H, H0, H7.",
            "VernacExtend",
            "d88f980fcd34feb682b0f5e3d04cc7689eb7fb35"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply H; apply Rlt_le_trans with (pos del).",
            "VernacExtend",
            "30a67178344ada6e1360f3e34c806949fdef447d"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "unfold del; simpl; apply Rmin_l.",
            "VernacExtend",
            "5978825d614ee8559d1605fb09caf41ef1f5881d"
        ],
        [
            "apply H0; apply Rlt_le_trans with (pos del).",
            "VernacExtend",
            "4f88d098d0b0782551483567525302f58eee1275"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "unfold del; simpl; apply Rmin_r.",
            "VernacExtend",
            "ad586bde64898aabbbbbe85fcb835ea40b072541"
        ],
        [
            "unfold Rmin; case (Rle_dec del1 del2); intro.",
            "VernacExtend",
            "41dc099eef4b1ccbf2d730b7d0319e85cb5d4ed6"
        ],
        [
            "apply (cond_pos del1).",
            "VernacExtend",
            "f21d5a1f3d89787a1bde51b4be0e63b7d67ba1c5"
        ],
        [
            "apply (cond_pos del2).",
            "VernacExtend",
            "943dae3cf7ce55e033207ece60d88f623173db18"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma open_set_P4 : open_set (fun x:R => False).",
            "VernacStartTheoremProof",
            "51de47589de17433d7277f73c2a6a91c0e7c3347"
        ],
        [
            "unfold open_set; intros; elim H.",
            "VernacExtend",
            "928362c04f0c60d4e40437c32426dfe74c4565ac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma open_set_P5 : open_set (fun x:R => True).",
            "VernacStartTheoremProof",
            "4dd89511afcea9fa82ed1c3772f23438fae6f76f"
        ],
        [
            "unfold open_set; intros; unfold neighbourhood.",
            "VernacExtend",
            "1b7d8a3bfc35bd28111e600e5e071bdcbd7731fd"
        ],
        [
            "exists (mkposreal 1 Rlt_0_1); unfold included; intros; trivial.",
            "VernacExtend",
            "0a171a03fa54eafb189210a52607265705e586aa"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma disc_P1 : forall (x:R) (del:posreal), open_set (disc x del).",
            "VernacStartTheoremProof",
            "cd20d5208b49505c4ca4b5784b2742db1049a875"
        ],
        [
            "intros; assert (H := open_set_P1 (disc x del)).",
            "VernacExtend",
            "69c395dda7c75b01f690bdb879cb19abcf4a19ab"
        ],
        [
            "elim H; intros; apply H1.",
            "VernacExtend",
            "aa4c683e6087d889f65e45ca51f98f273dd7f681"
        ],
        [
            "unfold eq_Dom; split.",
            "VernacExtend",
            "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
        ],
        [
            "unfold included, interior, disc; intros; cut (0 < del - Rabs (x - x0)).",
            "VernacExtend",
            "e6cd1b0d822e50608d2e0e8f1dcc884391562379"
        ],
        [
            "intro; set (del2 := mkposreal _ H3).",
            "VernacExtend",
            "b5215494ccdebf8930e26a464162c523b81f787e"
        ],
        [
            "exists del2; unfold included; intros.",
            "VernacExtend",
            "90d1c969f6632c9ad1042972eef4b0d832fe589c"
        ],
        [
            "apply Rle_lt_trans with (Rabs (x1 - x0) + Rabs (x0 - x)).",
            "VernacExtend",
            "b8f3d51d57f1e081ad18263f8ee62af1bae3246a"
        ],
        [
            "replace (x1 - x) with (x1 - x0 + (x0 - x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "1bd1a518cf66a87ef790dd8cbbfd5e83dfb1698a"
        ],
        [
            "replace (pos del) with (del2 + Rabs (x0 - x)).",
            "VernacExtend",
            "d04b41ce91fa89e5b97f9d46b295fcd17b1c65e9"
        ],
        [
            "do 2 rewrite <- (Rplus_comm (Rabs (x0 - x))); apply Rplus_lt_compat_l.",
            "VernacExtend",
            "8071d788289a4ecacef8683d3a99c21206e2a026"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "unfold del2; simpl; rewrite <- (Rabs_Ropp (x - x0)); rewrite Ropp_minus_distr; ring.",
            "VernacExtend",
            "9d87148f345c9982fac2ffcc637e4a0217855e02"
        ],
        [
            "apply Rplus_lt_reg_l with (Rabs (x - x0)); rewrite Rplus_0_r; replace (Rabs (x - x0) + (del - Rabs (x - x0))) with (pos del); [ rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H2 | ring ].",
            "VernacExtend",
            "312d0acf1bffc7b917e87bdeacd92f3ed0809353"
        ],
        [
            "apply interior_P1.",
            "VernacExtend",
            "2443ee16fd451397f4bbb421ed584d398a93fdb4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_P1 : forall (f:R -> R) (x:R), continuity_pt f x <-> (forall W:R -> Prop, neighbourhood W (f x) -> exists V : R -> Prop, neighbourhood V x /\\ (forall y:R, V y -> W (f y))).",
            "VernacStartTheoremProof",
            "16b603a45c0e44d83c7c9345005c41e00ec6499d"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "intros; unfold neighbourhood in H0.",
            "VernacExtend",
            "c2f2280225add6826b3ecd45e975b1d7d8951952"
        ],
        [
            "elim H0; intros del1 H1.",
            "VernacExtend",
            "16403c72ea1a10318a6736c4cba44602e25fb2d7"
        ],
        [
            "unfold continuity_pt in H; unfold continue_in in H; unfold limit1_in in H; unfold limit_in in H; simpl in H; unfold R_dist in H.",
            "VernacExtend",
            "84e2c106732cfde45f6958af0745561862b6c48c"
        ],
        [
            "assert (H2 := H del1 (cond_pos del1)).",
            "VernacExtend",
            "e30a4ecccc3894a265664b9fabb562693555778d"
        ],
        [
            "elim H2; intros del2 H3.",
            "VernacExtend",
            "ac4279c300947fe8b8c042e216a9941e32d24f63"
        ],
        [
            "elim H3; intros.",
            "VernacExtend",
            "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
        ],
        [
            "exists (disc x (mkposreal del2 H4)).",
            "VernacExtend",
            "8131bf822cc47cbd46593af46633bef4b53eadb2"
        ],
        [
            "intros; unfold included in H1; split.",
            "VernacExtend",
            "688de8a30bb492522c947d9f91117a8cb0ad7541"
        ],
        [
            "unfold neighbourhood, disc.",
            "VernacExtend",
            "4158f072d324f771fd2237a3ce258090451401da"
        ],
        [
            "exists (mkposreal del2 H4).",
            "VernacExtend",
            "e391e9dcc940965672332779e289ac63e84a2197"
        ],
        [
            "unfold included; intros; assumption.",
            "VernacExtend",
            "a59387bd52561293cc31b65dca93c180b07c9c67"
        ],
        [
            "intros; apply H1; unfold disc; case (Req_dec y x); intro.",
            "VernacExtend",
            "5ef35b166cf8fe2a01d25c1e7ef2efb2113246d9"
        ],
        [
            "rewrite H7; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (cond_pos del1).",
            "VernacExtend",
            "2bdd3b8dc0d8e7360bf1d8722cf9419be6d29d0f"
        ],
        [
            "apply H5; split.",
            "VernacExtend",
            "7ad64b5f9964468ee7593a96aee10bf238396930"
        ],
        [
            "unfold D_x, no_cond; split.",
            "VernacExtend",
            "121e72bbd9a8ad97e9353edec680d410ccaf17ee"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply (not_eq_sym (A:=R)); apply H7.",
            "VernacExtend",
            "236fdf14ffb1b3d656cd2f0458bfe9ec60eece3c"
        ],
        [
            "unfold disc in H6; apply H6.",
            "VernacExtend",
            "f6c9f13d9ad9fa2f1c878692e21f771ccecc435c"
        ],
        [
            "intros; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; intros.",
            "VernacExtend",
            "babeba7f1cab00425929ad79b35115e85da92283"
        ],
        [
            "assert (H1 := H (disc (f x) (mkposreal eps H0))).",
            "VernacExtend",
            "dca4ecd23c3caef44d336cce7e73b294400ea2cf"
        ],
        [
            "cut (neighbourhood (disc (f x) (mkposreal eps H0)) (f x)).",
            "VernacExtend",
            "d1e9422d4e564e54d6d1b667d85d483dcb7060f4"
        ],
        [
            "intro; assert (H3 := H1 H2).",
            "VernacExtend",
            "b267c63a869192195c174a3b14a0a36710a08a0d"
        ],
        [
            "elim H3; intros D H4; elim H4; intros; unfold neighbourhood in H5; elim H5; intros del1 H7.",
            "VernacExtend",
            "20e4188847dbc39f22aee94e4b0d9b4ae8456425"
        ],
        [
            "exists (pos del1); split.",
            "VernacExtend",
            "901156865529208dc37432b913c73122dd4fecc4"
        ],
        [
            "apply (cond_pos del1).",
            "VernacExtend",
            "f21d5a1f3d89787a1bde51b4be0e63b7d67ba1c5"
        ],
        [
            "intros; elim H8; intros; simpl in H10; unfold R_dist in H10; simpl; unfold R_dist; apply (H6 _ (H7 _ H10)).",
            "VernacExtend",
            "c61c6d1ba0a2c35665d7d3dbe0c272124cf84d17"
        ],
        [
            "unfold neighbourhood, disc; exists (mkposreal eps H0); unfold included; intros; assumption.",
            "VernacExtend",
            "eec9fb5567e2a549a0ee818925d4e92f3276732d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition image_rec (f:R -> R) (D:R -> Prop) (x:R) : Prop := D (f x).",
            "VernacDefinition",
            "628ea7a44c5846c544a1776a38dd73745da567bc"
        ],
        [
            "Lemma continuity_P2 : forall (f:R -> R) (D:R -> Prop), continuity f -> open_set D -> open_set (image_rec f D).",
            "VernacStartTheoremProof",
            "83a2c88d9ce51fa1786d048bf3008ed9e86bff55"
        ],
        [
            "intros; unfold open_set in H0; unfold open_set; intros; assert (H2 := continuity_P1 f x); elim H2; intros H3 _; assert (H4 := H3 (H x)); unfold neighbourhood, image_rec; unfold image_rec in H1; assert (H5 := H4 D (H0 (f x) H1)); elim H5; intros V0 H6; elim H6; intros; unfold neighbourhood in H7; elim H7; intros del H9; exists del; unfold included in H9; unfold included; intros; apply (H8 _ (H9 _ H10)).",
            "VernacExtend",
            "b65ef33d6f23c3b263d42956868cc02eee372550"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_P3 : forall f:R -> R, continuity f <-> (forall D:R -> Prop, open_set D -> open_set (image_rec f D)).",
            "VernacStartTheoremProof",
            "efcc35901ed583a8cd5ca48840cdb7430e87d188"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "intros; apply continuity_P2; assumption.",
            "VernacExtend",
            "eca113e75fadda9ac484f0cb45a5dda8f4f0ed51"
        ],
        [
            "intros; unfold continuity; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; cut (open_set (disc (f x) (mkposreal _ H0))).",
            "VernacExtend",
            "6b7b5da0945035de26859ea1e8aeba0e4a2382e2"
        ],
        [
            "intro; assert (H2 := H _ H1).",
            "VernacExtend",
            "c67d3b68ca62ea5767786863d29b90d4d053d4f8"
        ],
        [
            "unfold open_set, image_rec in H2; cut (disc (f x) (mkposreal _ H0) (f x)).",
            "VernacExtend",
            "e5bf3a000f895ca3767d2848d665b7a67cd9bc30"
        ],
        [
            "intro; assert (H4 := H2 _ H3).",
            "VernacExtend",
            "9151d64d3661490da76cdcf0c9ee286c1870479c"
        ],
        [
            "unfold neighbourhood in H4; elim H4; intros del H5.",
            "VernacExtend",
            "fe1cd89a4a8aaca59e494c88160054031c753e62"
        ],
        [
            "exists (pos del); split.",
            "VernacExtend",
            "574b93e120e84f22e87ce9ce6a9336b5d77389c0"
        ],
        [
            "apply (cond_pos del).",
            "VernacExtend",
            "ac01251087d8ed6a52f03fd522df5ae3ad740374"
        ],
        [
            "intros; unfold included in H5; apply H5; elim H6; intros; apply H8.",
            "VernacExtend",
            "b9148bf0bf2728b8887b406d565762ff6301328b"
        ],
        [
            "unfold disc; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply H0.",
            "VernacExtend",
            "5d0aec297ced6915837a6223afe551c4b904aad8"
        ],
        [
            "apply disc_P1.",
            "VernacExtend",
            "9a8ab9933dedae474624d3242f16b271339142be"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Rsepare : forall x y:R, x <> y -> exists V : R -> Prop, (exists W : R -> Prop, neighbourhood V x /\\ neighbourhood W y /\\ ~ (exists y : R, intersection_domain V W y)).",
            "VernacStartTheoremProof",
            "14ef7fb00101cce72ae6c9825efac70af7461db5"
        ],
        [
            "intros x y Hsep; set (D := Rabs (x - y)).",
            "VernacExtend",
            "0c688e96403102573eb2fb9181d113affe8f235e"
        ],
        [
            "cut (0 < D / 2).",
            "VernacExtend",
            "cddaa990e20e96498614ac3110b387e35eebe1da"
        ],
        [
            "intro; exists (disc x (mkposreal _ H)).",
            "VernacExtend",
            "f37c6203b0ba90ab89f1c91e5a311384c436d22c"
        ],
        [
            "exists (disc y (mkposreal _ H)); split.",
            "VernacExtend",
            "81b87872cd3b6ddc4885722521545d42fe64c7d7"
        ],
        [
            "unfold neighbourhood; exists (mkposreal _ H); unfold included; tauto.",
            "VernacExtend",
            "b0f3cd5a7453533f1cbbd1d398ebf11ea03b33c8"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold neighbourhood; exists (mkposreal _ H); unfold included; tauto.",
            "VernacExtend",
            "b0f3cd5a7453533f1cbbd1d398ebf11ea03b33c8"
        ],
        [
            "red; intro; elim H0; intros; unfold intersection_domain in H1; elim H1; intros.",
            "VernacExtend",
            "263ec7d1cf9f3e04e7fe6091d16ba2804cf4a836"
        ],
        [
            "cut (D < D).",
            "VernacExtend",
            "8b9bc941223e8d02ded4a88258f5a80ff974f20d"
        ],
        [
            "intro; elim (Rlt_irrefl _ H4).",
            "VernacExtend",
            "cdad8404a1457804e6e7d5a34b23494129153e82"
        ],
        [
            "change (Rabs (x - y) < D); apply Rle_lt_trans with (Rabs (x - x0) + Rabs (x0 - y)).",
            "VernacExtend",
            "11d2d0b981025fee39600c4086a9938f32df8979"
        ],
        [
            "replace (x - y) with (x - x0 + (x0 - y)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "7dcc2839bb502ec23f77ba984f60bc99289dd4af"
        ],
        [
            "rewrite (double_var D); apply Rplus_lt_compat.",
            "VernacExtend",
            "e1c2024bdb0724b59ebab428ce545cd05c309ccf"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H2.",
            "VernacExtend",
            "e978c4ccc494078d83c38046bb43deba714342ed"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7122edbd68559f255bfed03dc640472ed14eb4ef"
        ],
        [
            "unfold D; apply Rabs_pos_lt; apply (Rminus_eq_contra _ _ Hsep).",
            "VernacExtend",
            "8b7741bbfd12bbd844a456bf608a0614bbc02800"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "ee74bd033c1031a79ef440e1d41037d5c9648214"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Record family : Type := mkfamily {ind : R -> Prop; f :> R -> R -> Prop; cond_fam : forall x:R, (exists y : R, f x y) -> ind x}.",
            "VernacInductive",
            "212a0076086442c4df2b4a1203da87d4aeb46310"
        ],
        [
            "Definition family_open_set (f:family) : Prop := forall x:R, open_set (f x).",
            "VernacDefinition",
            "77627b90b569c00cf480a90ad97332a51e62bf41"
        ],
        [
            "Definition domain_finite (D:R -> Prop) : Prop := exists l : Rlist, (forall x:R, D x <-> In x l).",
            "VernacDefinition",
            "63e03430249fae7b93c8d056b4c259363b5ea738"
        ],
        [
            "Definition family_finite (f:family) : Prop := domain_finite (ind f).",
            "VernacDefinition",
            "82262b64975bf6c667a92dd07deb1d38b0a2899b"
        ],
        [
            "Definition covering (D:R -> Prop) (f:family) : Prop := forall x:R, D x -> exists y : R, f y x.",
            "VernacDefinition",
            "6304bd438442bd86f9e035fa8ba92fade6e83dad"
        ],
        [
            "Definition covering_open_set (D:R -> Prop) (f:family) : Prop := covering D f /\\ family_open_set f.",
            "VernacDefinition",
            "721b0149f02eb0ba15b0caeb51401c257fcf2a63"
        ],
        [
            "Definition covering_finite (D:R -> Prop) (f:family) : Prop := covering D f /\\ family_finite f.",
            "VernacDefinition",
            "dacb06d97acc836e32eca8c8cbba583470f2fe30"
        ],
        [
            "Lemma restriction_family : forall (f:family) (D:R -> Prop) (x:R), (exists y : R, (fun z1 z2:R => f z1 z2 /\\ D z1) x y) -> intersection_domain (ind f) D x.",
            "VernacStartTheoremProof",
            "78bb08c6527bcd3cf709ba2656ad6597e49f2c74"
        ],
        [
            "intros; elim H; intros; unfold intersection_domain; elim H0; intros; split.",
            "VernacExtend",
            "721846489612f87a7c722d321cfa385e3be82a26"
        ],
        [
            "apply (cond_fam f0); exists x0; assumption.",
            "VernacExtend",
            "a61e0efa5c15ee56562e2aab74ea564c8676f618"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition subfamily (f:family) (D:R -> Prop) : family := mkfamily (intersection_domain (ind f) D) (fun x y:R => f x y /\\ D x) (restriction_family f D).",
            "VernacDefinition",
            "d91881f7d377083e1412e7ca85b6efa02092f83e"
        ],
        [
            "Definition compact (X:R -> Prop) : Prop := forall f:family, covering_open_set X f -> exists D : R -> Prop, covering_finite X (subfamily f D).",
            "VernacDefinition",
            "ad08910160acbbce10be24c154ede5c3040572aa"
        ],
        [
            "Lemma family_P1 : forall (f:family) (D:R -> Prop), family_open_set f -> family_open_set (subfamily f D).",
            "VernacStartTheoremProof",
            "61b838ca7a5e6e1dbf57dd10292608c302da99a5"
        ],
        [
            "unfold family_open_set; intros; unfold subfamily; simpl; assert (H0 := classic (D x)).",
            "VernacExtend",
            "9404c82cb8cad87a69a26198cb448ed19ea046b6"
        ],
        [
            "elim H0; intro.",
            "VernacExtend",
            "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
        ],
        [
            "cut (open_set (f0 x) -> open_set (fun y:R => f0 x y /\\ D x)).",
            "VernacExtend",
            "55e324351c177b0b86cf87771feeb78d4d92a249"
        ],
        [
            "intro; apply H2; apply H.",
            "VernacExtend",
            "c562984e4cde128c86d5e0c085b351fe1d81bd23"
        ],
        [
            "unfold open_set; unfold neighbourhood; intros; elim H3; intros; assert (H6 := H2 _ H4); elim H6; intros; exists x1; unfold included; intros; split.",
            "VernacExtend",
            "5a6231c9fe182ae108f84fa4d8b9262de6bd7a6d"
        ],
        [
            "apply (H7 _ H8).",
            "VernacExtend",
            "1a60c8d7f59c5769d3296789c4318d6c4ff16140"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "cut (open_set (fun y:R => False) -> open_set (fun y:R => f0 x y /\\ D x)).",
            "VernacExtend",
            "304a0ee02e495fcfcb3dab2abe03b27cd3098ba2"
        ],
        [
            "intro; apply H2; apply open_set_P4.",
            "VernacExtend",
            "ef3ea9c8750ce2787cd79832f1f3738db4935503"
        ],
        [
            "unfold open_set; unfold neighbourhood; intros; elim H3; intros; elim H1; assumption.",
            "VernacExtend",
            "9cad8e1950ed01ea180e659ceb6138160c90841f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition bounded (D:R -> Prop) : Prop := exists m : R, (exists M : R, (forall x:R, D x -> m <= x <= M)).",
            "VernacDefinition",
            "64aa956ebf5361655a886bcb63c9813589ee7059"
        ],
        [
            "Lemma open_set_P6 : forall D1 D2:R -> Prop, open_set D1 -> D1 =_D D2 -> open_set D2.",
            "VernacStartTheoremProof",
            "4c6d2991b4fd1f7b9d29af6ab467d7cc27e3fa24"
        ],
        [
            "unfold open_set; unfold neighbourhood; intros.",
            "VernacExtend",
            "c06945937db2cd74741a811d83f3daecdd61b47b"
        ],
        [
            "unfold eq_Dom in H0; elim H0; intros.",
            "VernacExtend",
            "506fea162efe32dc9e6b1f05db1ae2bf191f9770"
        ],
        [
            "assert (H4 := H _ (H3 _ H1)).",
            "VernacExtend",
            "5e26fa762d8bb8630c77c4c8500e326c04e6ed8f"
        ],
        [
            "elim H4; intros.",
            "VernacExtend",
            "ef88f175449d4af46e0685700665ce0cdf3e5695"
        ],
        [
            "exists x0; apply included_trans with D1; assumption.",
            "VernacExtend",
            "4da83b948ad83ab2eb63631893903c790ec56dea"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compact_P1 : forall X:R -> Prop, compact X -> bounded X.",
            "VernacStartTheoremProof",
            "a4628c0cba343e4709a70fa3279435c7a5eb810c"
        ],
        [
            "intros; unfold compact in H; set (D := fun x:R => True); set (g := fun x y:R => Rabs y < x); cut (forall x:R, (exists y : _, g x y) -> True); [ intro | intro; trivial ].",
            "VernacExtend",
            "1773ecd80eb7dd3edb2c97597be6661b27915fa9"
        ],
        [
            "set (f0 := mkfamily D g H0); assert (H1 := H f0); cut (covering_open_set X f0).",
            "VernacExtend",
            "927cf99324ac8a995433ca9faf36ebebcf90bbfb"
        ],
        [
            "intro; assert (H3 := H1 H2); elim H3; intros D' H4; unfold covering_finite in H4; elim H4; intros; unfold family_finite in H6; unfold domain_finite in H6; elim H6; intros l H7; unfold bounded; set (r := MaxRlist l).",
            "VernacExtend",
            "7e03693c8e3ec9cbc673f83a2b5c8eaa4a84f7b7"
        ],
        [
            "exists (- r); exists r; intros.",
            "VernacExtend",
            "c59ec025ff18ff7b496c066e1bff30b43b0cb75a"
        ],
        [
            "unfold covering in H5; assert (H9 := H5 _ H8); elim H9; intros; unfold subfamily in H10; simpl in H10; elim H10; intros; assert (H13 := H7 x0); simpl in H13; cut (intersection_domain D D' x0).",
            "VernacExtend",
            "cd33d599de3e2d23fe59ebf2afb0b0d05eb2c5f4"
        ],
        [
            "elim H13; clear H13; intros.",
            "VernacExtend",
            "5a2567083b012ee6effdfc546240fc1ee18e61ea"
        ],
        [
            "assert (H16 := H13 H15); unfold g in H11; split.",
            "VernacExtend",
            "4b6759b72e8a6f899a22344e99e8dfa45accada1"
        ],
        [
            "cut (x0 <= r).",
            "VernacExtend",
            "89dfb856360d291876a1d45889039fe3e365e93a"
        ],
        [
            "intro; cut (Rabs x < r).",
            "VernacExtend",
            "6dafa1650c6ce35da9dadc219b08062b7758850f"
        ],
        [
            "intro; assert (H19 := Rabs_def2 x r H18); elim H19; intros; left; assumption.",
            "VernacExtend",
            "60550eae2848a6cfde5929c7df79dd79f51186d9"
        ],
        [
            "apply Rlt_le_trans with x0; assumption.",
            "VernacExtend",
            "397868e26a1513dc77c3a80576f86dab3ac9456e"
        ],
        [
            "apply (MaxRlist_P1 l x0 H16).",
            "VernacExtend",
            "7b3f8961a43433ea9d7c48477e969a52556444f4"
        ],
        [
            "cut (x0 <= r).",
            "VernacExtend",
            "89dfb856360d291876a1d45889039fe3e365e93a"
        ],
        [
            "intro; apply Rle_trans with (Rabs x).",
            "VernacExtend",
            "1254e2a9ac820bb7ca52b4fe18c5ba1f8fd8adf3"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply Rle_trans with x0.",
            "VernacExtend",
            "5fc66bcd849b3049a7c30908f409fe1874b7696f"
        ],
        [
            "left; apply H11.",
            "VernacExtend",
            "38b6b02ac4ec919c307b77d19ff899c06fd3aa5f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply (MaxRlist_P1 l x0 H16).",
            "VernacExtend",
            "7b3f8961a43433ea9d7c48477e969a52556444f4"
        ],
        [
            "unfold intersection_domain, D; tauto.",
            "VernacExtend",
            "c8f846a92c99206f663e7acfc43daf392a6d2f06"
        ],
        [
            "unfold covering_open_set; split.",
            "VernacExtend",
            "1c919de8626e4277fdd15de9bc1f5bc1d8203b10"
        ],
        [
            "unfold covering; intros; simpl; exists (Rabs x + 1); unfold g; pattern (Rabs x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1.",
            "VernacExtend",
            "907cf0058d0b9bcc19a80e386b3db5c37d402b28"
        ],
        [
            "unfold family_open_set; intro; case (Rtotal_order 0 x); intro.",
            "VernacExtend",
            "b10a05231e599083572d9aef6b15418cfd27505d"
        ],
        [
            "apply open_set_P6 with (disc 0 (mkposreal _ H2)).",
            "VernacExtend",
            "ddd25d8f820bd0681a0190a9f6e640dd0b317bbf"
        ],
        [
            "apply disc_P1.",
            "VernacExtend",
            "9a8ab9933dedae474624d3242f16b271339142be"
        ],
        [
            "unfold eq_Dom; unfold f0; simpl; unfold g, disc; split.",
            "VernacExtend",
            "a7e9805fbe34ba3e60ae0f42ffc612d7f2d9399f"
        ],
        [
            "unfold included; intros; unfold Rminus in H3; rewrite Ropp_0 in H3; rewrite Rplus_0_r in H3; apply H3.",
            "VernacExtend",
            "1cecd942fd566cae533e59059981d3c23605b2cc"
        ],
        [
            "unfold included; intros; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply H3.",
            "VernacExtend",
            "2dbc5108b8ca9285997e4dfb0b03b5636c83b2d0"
        ],
        [
            "apply open_set_P6 with (fun x:R => False).",
            "VernacExtend",
            "f21cfaf97cdfca63a95dd7229e007ba5cc473b58"
        ],
        [
            "apply open_set_P4.",
            "VernacExtend",
            "0d05350f051b67c090cba40864786f9c9458483b"
        ],
        [
            "unfold eq_Dom; split.",
            "VernacExtend",
            "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
        ],
        [
            "unfold included; intros; elim H3.",
            "VernacExtend",
            "d4440b493731deaedff8e01aa471e7d52c1b2711"
        ],
        [
            "unfold included, f0; simpl; unfold g; intros; elim H2; intro; [ rewrite <- H4 in H3; assert (H5 := Rabs_pos x0); elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H5 H3)) | assert (H6 := Rabs_pos x0); assert (H7 := Rlt_trans _ _ _ H3 H4); elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H6 H7)) ].",
            "VernacExtend",
            "be62530e4a95c078132ff2fcb1e5f06a8f005a7a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compact_P2 : forall X:R -> Prop, compact X -> closed_set X.",
            "VernacStartTheoremProof",
            "7ff24e22eea763c806b86171199af0b4e42d2a82"
        ],
        [
            "intros; assert (H0 := closed_set_P1 X); elim H0; clear H0; intros _ H0; apply H0; clear H0.",
            "VernacExtend",
            "9d6c2e9c868729776cea1de026358c8c8702e9de"
        ],
        [
            "unfold eq_Dom; split.",
            "VernacExtend",
            "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
        ],
        [
            "apply adherence_P1.",
            "VernacExtend",
            "cb9b75b28db1ff25e5fc5dbd77f191671d8b17a8"
        ],
        [
            "unfold included; unfold adherence; unfold point_adherent; intros; unfold compact in H; assert (H1 := classic (X x)); elim H1; clear H1; intro.",
            "VernacExtend",
            "ab97e63f0d235d7963b208bf268d4ec42b000da6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "cut (forall y:R, X y -> 0 < Rabs (y - x) / 2).",
            "VernacExtend",
            "ef6e3ebf7ef76fdc298dd5516966047ac4cb0248"
        ],
        [
            "intro; set (D := X); set (g := fun y z:R => Rabs (y - z) < Rabs (y - x) / 2 /\\ D y); cut (forall x:R, (exists y : _, g x y) -> D x).",
            "VernacExtend",
            "db9c5196825064d91747015f457614d5f9cc796e"
        ],
        [
            "intro; set (f0 := mkfamily D g H3); assert (H4 := H f0); cut (covering_open_set X f0).",
            "VernacExtend",
            "b44ca3220a3e35b0273f1bce0d493061efa6b91d"
        ],
        [
            "intro; assert (H6 := H4 H5); elim H6; clear H6; intros D' H6.",
            "VernacExtend",
            "f38267816cfcc6627871a9e2313cf413825a9456"
        ],
        [
            "unfold covering_finite in H6; decompose [and] H6; unfold covering, subfamily in H7; simpl in H7; unfold family_finite, subfamily in H8; simpl in H8; unfold domain_finite in H8; elim H8; clear H8; intros l H8; set (alp := MinRlist (AbsList l x)); cut (0 < alp).",
            "VernacExtend",
            "c98c640ac6e24251204c9ac7301ce785f58a3428"
        ],
        [
            "intro; assert (H10 := H0 (disc x (mkposreal _ H9))); cut (neighbourhood (disc x (mkposreal alp H9)) x).",
            "VernacExtend",
            "4e6322b404b74022a59cbbd83953fb4031e66e81"
        ],
        [
            "intro; assert (H12 := H10 H11); elim H12; clear H12; intros y H12; unfold intersection_domain in H12; elim H12; clear H12; intros; assert (H14 := H7 _ H13); elim H14; clear H14; intros y0 H14; elim H14; clear H14; intros; unfold g in H14; elim H14; clear H14; intros; unfold disc in H12; simpl in H12; cut (alp <= Rabs (y0 - x) / 2).",
            "VernacExtend",
            "820abcec4ffb8771005f011f9c4a2c0c25957fbf"
        ],
        [
            "intro; assert (H18 := Rlt_le_trans _ _ _ H12 H17); cut (Rabs (y0 - x) < Rabs (y0 - x)).",
            "VernacExtend",
            "f1a524e6862f5de80c5f8e193679618704286910"
        ],
        [
            "intro; elim (Rlt_irrefl _ H19).",
            "VernacExtend",
            "0246197fe98528178b586a67f6b7a85f05202576"
        ],
        [
            "apply Rle_lt_trans with (Rabs (y0 - y) + Rabs (y - x)).",
            "VernacExtend",
            "f0aae085266e361d80bd7c775a6306ae2774dd7e"
        ],
        [
            "replace (y0 - x) with (y0 - y + (y - x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "b60933eb0093780cc9819b5563a044a72ee37a40"
        ],
        [
            "rewrite (double_var (Rabs (y0 - x))); apply Rplus_lt_compat; assumption.",
            "VernacExtend",
            "fce96fd54dd79dc37693ba96b884cdc817955445"
        ],
        [
            "apply (MinRlist_P1 (AbsList l x) (Rabs (y0 - x) / 2)); apply AbsList_P1; elim (H8 y0); clear H8; intros; apply H8; unfold intersection_domain; split; assumption.",
            "VernacExtend",
            "17eeced910884f245701fba006dbd2dc46fa8211"
        ],
        [
            "assert (H11 := disc_P1 x (mkposreal alp H9)); unfold open_set in H11; apply H11.",
            "VernacExtend",
            "d4fd0d4d400ea40e881bfe1559b184e0a104bbba"
        ],
        [
            "unfold disc; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply H9.",
            "VernacExtend",
            "ea40dc44bd2848a840a6bc023e1c50e0d407c708"
        ],
        [
            "unfold alp; apply MinRlist_P2; intros; assert (H10 := AbsList_P2 _ _ _ H9); elim H10; clear H10; intros z H10; elim H10; clear H10; intros; rewrite H11; apply H2; elim (H8 z); clear H8; intros; assert (H13 := H12 H10); unfold intersection_domain, D in H13; elim H13; clear H13; intros; assumption.",
            "VernacExtend",
            "9dbaa62d8c50624b44cb5603b66dfe16c69e819c"
        ],
        [
            "unfold covering_open_set; split.",
            "VernacExtend",
            "1c919de8626e4277fdd15de9bc1f5bc1d8203b10"
        ],
        [
            "unfold covering; intros; exists x0; simpl; unfold g; split.",
            "VernacExtend",
            "bf17520c54eafea32130959892f34d13bbe68ca7"
        ],
        [
            "unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; unfold Rminus in H2; apply (H2 _ H5).",
            "VernacExtend",
            "b933234ab76f8d7c30cb7fccd521d08b1a96c301"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "unfold family_open_set; intro; simpl; unfold g; elim (classic (D x0)); intro.",
            "VernacExtend",
            "49ed359a38f97daab468ac5166194b12102fbc41"
        ],
        [
            "apply open_set_P6 with (disc x0 (mkposreal _ (H2 _ H5))).",
            "VernacExtend",
            "2a191c49d6d7ff45468e7a42317f76ce15c64667"
        ],
        [
            "apply disc_P1.",
            "VernacExtend",
            "9a8ab9933dedae474624d3242f16b271339142be"
        ],
        [
            "unfold eq_Dom; split.",
            "VernacExtend",
            "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
        ],
        [
            "unfold included, disc; simpl; intros; split.",
            "VernacExtend",
            "596774014cdd7c331658ee6d881749549c8e856e"
        ],
        [
            "rewrite <- (Rabs_Ropp (x0 - x1)); rewrite Ropp_minus_distr; apply H6.",
            "VernacExtend",
            "31ea71f3f4d2be2e848efa8f49ea86961f2af14e"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "unfold included, disc; simpl; intros; elim H6; intros; rewrite <- (Rabs_Ropp (x1 - x0)); rewrite Ropp_minus_distr; apply H7.",
            "VernacExtend",
            "012eb4592ba201c323976a243f463c32ed4788e2"
        ],
        [
            "apply open_set_P6 with (fun z:R => False).",
            "VernacExtend",
            "10757b2cdb2287e0aba582576026cb6d69afd9f6"
        ],
        [
            "apply open_set_P4.",
            "VernacExtend",
            "0d05350f051b67c090cba40864786f9c9458483b"
        ],
        [
            "unfold eq_Dom; split.",
            "VernacExtend",
            "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
        ],
        [
            "unfold included; intros; elim H6.",
            "VernacExtend",
            "e198df4bed19b7c146931490505a33af38d35f90"
        ],
        [
            "unfold included; intros; elim H6; intros; elim H5; assumption.",
            "VernacExtend",
            "6d7cda94e0d3db0ad20315c4371bc8618e4adbd1"
        ],
        [
            "intros; elim H3; intros; unfold g in H4; elim H4; clear H4; intros _ H4; apply H4.",
            "VernacExtend",
            "1d0abeee882969b669d4ec4f3b062ef377bc55c0"
        ],
        [
            "intros; unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7a8f2c341b61b8b23fdd3861ed41da4b84571189"
        ],
        [
            "apply Rabs_pos_lt; apply Rminus_eq_contra; red; intro; rewrite H3 in H2; elim H1; apply H2.",
            "VernacExtend",
            "4bbe0b30ffcc1116400cfdf009f9bbf98df10d46"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "ee74bd033c1031a79ef440e1d41037d5c9648214"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compact_EMP : compact (fun _:R => False).",
            "VernacStartTheoremProof",
            "137f72844054af757b9e7b4b79ea3aed959c4917"
        ],
        [
            "unfold compact; intros; exists (fun x:R => False); unfold covering_finite; split.",
            "VernacExtend",
            "1e3471eda30e25c4c43f479569191f9b796cc2d8"
        ],
        [
            "unfold covering; intros; elim H0.",
            "VernacExtend",
            "2ae8a7dd6183748c66d7ab3e6c39de0b0b9d3c11"
        ],
        [
            "unfold family_finite; unfold domain_finite; exists nil; intro.",
            "VernacExtend",
            "5c7e6a2830d11d5eedc663151261202ffdc4b3ce"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "simpl; unfold intersection_domain; intros; elim H0.",
            "VernacExtend",
            "7e8ce054bedbfbd662ec9965c46cc75bd69f59bf"
        ],
        [
            "elim H0; clear H0; intros _ H0; elim H0.",
            "VernacExtend",
            "fa5faa9d39feb66cd38e5d8731cb8925d72d2653"
        ],
        [
            "simpl; intro; elim H0.",
            "VernacExtend",
            "4a1c62a260f5251c2558adf75271f13acbc75b04"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compact_eqDom : forall X1 X2:R -> Prop, compact X1 -> X1 =_D X2 -> compact X2.",
            "VernacStartTheoremProof",
            "2800ea1daf3c3b01513c1d1823e890f6579f012a"
        ],
        [
            "unfold compact; intros; unfold eq_Dom in H0; elim H0; clear H0; unfold included; intros; assert (H3 : covering_open_set X1 f0).",
            "VernacExtend",
            "576a0cc2e20069c6f12a98c4d3a4f7bba32d34d7"
        ],
        [
            "unfold covering_open_set; unfold covering_open_set in H1; elim H1; clear H1; intros; split.",
            "VernacExtend",
            "91f495fbf60236dbb9267d323d1a3188dd0eebdc"
        ],
        [
            "unfold covering in H1; unfold covering; intros; apply (H1 _ (H0 _ H4)).",
            "VernacExtend",
            "bc64616e0273fb1f5fc485dbb4875ea807c122c8"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "elim (H _ H3); intros D H4; exists D; unfold covering_finite; unfold covering_finite in H4; elim H4; intros; split.",
            "VernacExtend",
            "4f0393f786a69b07d9c184a1767aa0f283993a6f"
        ],
        [
            "unfold covering in H5; unfold covering; intros; apply (H5 _ (H2 _ H7)).",
            "VernacExtend",
            "de1c59365d794a911471fa0d063d7df8b2fb946e"
        ],
        [
            "apply H6.",
            "VernacExtend",
            "b0314bbdc776869d305067ca471096a36fa958c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compact_P3 : forall a b:R, compact (fun c:R => a <= c <= b).",
            "VernacStartTheoremProof",
            "d4387eb5050f084c3815a136665a031a6a9121f9"
        ],
        [
            "intros a b; destruct (Rle_dec a b) as [Hle|Hnle].",
            "VernacExtend",
            "d60f53c1eec7e78891c26a70b88fcd9469216409"
        ],
        [
            "unfold compact; intros f0 (H,H5); set (A := fun x:R => a <= x <= b /\\ (exists D : R -> Prop, covering_finite (fun c:R => a <= c <= x) (subfamily f0 D))).",
            "VernacExtend",
            "1c3e4f42e10dbd7bd6bc8de5024e72d8d9a3989b"
        ],
        [
            "cut (A a); [intro H0|].",
            "VernacExtend",
            "651189593364aa5b8b18656d4778be2994573166"
        ],
        [
            "cut (bound A); [intro H1|].",
            "VernacExtend",
            "17eaa62d17f1067928ae69e660843d66eb0a3625"
        ],
        [
            "cut (exists a0 : R, A a0); [intro H2|].",
            "VernacExtend",
            "6054103a9ea779b34da4c83dbc5b3bcf80040346"
        ],
        [
            "pose proof (completeness A H1 H2) as (m,H3); unfold is_lub in H3.",
            "VernacExtend",
            "4bd92093e41e28ea7191881cc191641cb285da1c"
        ],
        [
            "cut (a <= m <= b); [intro H4|].",
            "VernacExtend",
            "dab8cdcc098a6cfef7aa32b98d58a6d22aeb07d7"
        ],
        [
            "unfold covering in H; pose proof (H m H4) as (y0,H6).",
            "VernacExtend",
            "349459b0ac85a4d41d661b1f1ca31cb7973f7050"
        ],
        [
            "unfold family_open_set in H5; pose proof (H5 y0 m H6) as (eps,H8).",
            "VernacExtend",
            "cb6730c74a9dcdb34f3efa6a0522d39b0e8a2792"
        ],
        [
            "cut (exists x : R, A x /\\ m - eps < x <= m); [intros (x,((H9 & Dx & H12 & H13),(Hltx,_)))|].",
            "VernacExtend",
            "25fbdb835edbc6a29fd29b65602dc0de36d92a64"
        ],
        [
            "destruct (Req_dec m b) as [->|H11].",
            "VernacExtend",
            "305654ae21da691a8547646f8607eb0589cbc724"
        ],
        [
            "set (Db := fun x:R => Dx x \\/ x = y0); exists Db; unfold covering_finite; split.",
            "VernacExtend",
            "1a486294c92fa2194531f588052315b9d1a12d0e"
        ],
        [
            "unfold covering; intros x0 (H14,H18); unfold covering in H12; destruct (Rle_dec x0 x) as [Hle'|Hnle'].",
            "VernacExtend",
            "8efbad6ce983c5dc20e685b880957c66ae9b704e"
        ],
        [
            "cut (a <= x0 <= x); [intro H15|].",
            "VernacExtend",
            "a07b550e5146a8dd282d4dca9fd952c97c04cc94"
        ],
        [
            "pose proof (H12 x0 H15) as (x1 & H16 & H17); exists x1; simpl; unfold Db; split; [ apply H16 | left; apply H17 ].",
            "VernacExtend",
            "a72647020768e451d2e9099af997379b709870fc"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "exists y0; simpl; split.",
            "VernacExtend",
            "5f54a843bf0474506e165600d9a5ce862eb3a726"
        ],
        [
            "apply H8; unfold disc; rewrite <- Rabs_Ropp, Ropp_minus_distr, Rabs_right.",
            "VernacExtend",
            "6f5d85da1843f38e47afd5d8cfb3410e7575b3cb"
        ],
        [
            "apply Rlt_trans with (b - x).",
            "VernacExtend",
            "fb7e69a49c60d9c3e5fc5b77ef5e851a8babb00f"
        ],
        [
            "unfold Rminus; apply Rplus_lt_compat_l, Ropp_lt_gt_contravar; auto with real.",
            "VernacExtend",
            "d49e7bb1284b7271fd9fe3729c22a175b9ea9409"
        ],
        [
            "apply Rplus_lt_reg_l with (x - eps); replace (x - eps + (b - x)) with (b - eps); [ replace (x - eps + eps) with x; [ apply Hltx | ring ] | ring ].",
            "VernacExtend",
            "595bb70e63ca2d79a251e35b90824e04dc277a81"
        ],
        [
            "apply Rge_minus, Rle_ge, H18.",
            "VernacExtend",
            "d627822b709add5c3129a76066adaba693a1a741"
        ],
        [
            "unfold Db; right; reflexivity.",
            "VernacExtend",
            "29cc53851b51b53096c3570967d160be846fbf83"
        ],
        [
            "unfold family_finite, domain_finite.",
            "VernacExtend",
            "0331b48c09625e9958f9d806cd184fc393c2d9d5"
        ],
        [
            "intros; unfold family_finite in H13; unfold domain_finite in H13; destruct H13 as (l,H13); exists (cons y0 l); intro; split.",
            "VernacExtend",
            "d95e19b511a1513e1d18d0322b99d23707ec67f4"
        ],
        [
            "intro H14; simpl in H14; unfold intersection_domain in H14; specialize H13 with x0; destruct H13 as (H13,H15); destruct (Req_dec x0 y0) as [H16|H16].",
            "VernacExtend",
            "9480f412aef6c58ad8f6712569271e6696cb05e7"
        ],
        [
            "simpl; left; apply H16.",
            "VernacExtend",
            "1ebd21ef4f749f60b39926e82e16afa575c027ec"
        ],
        [
            "simpl; right; apply H13.",
            "VernacExtend",
            "05d2a4d852edffbd8a234067c4cdd491c5cc0cee"
        ],
        [
            "simpl; unfold intersection_domain; unfold Db in H14; decompose [and or] H14.",
            "VernacExtend",
            "229add3de91e8c730ccc612f79dd398fc97e7203"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "elim H16; assumption.",
            "VernacExtend",
            "2b66844ddcdb76bf3df5cf01ff5f390b241794a1"
        ],
        [
            "intro H14; simpl in H14; destruct H14 as [H15|H15]; simpl; unfold intersection_domain.",
            "VernacExtend",
            "216f188d96e6e8f712082f540a0305a2f6ee510d"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (cond_fam f0); rewrite H15; exists b; apply H6.",
            "VernacExtend",
            "6359f1a371938fc2e3bb95ec248bd6a99100487a"
        ],
        [
            "unfold Db; right; assumption.",
            "VernacExtend",
            "90f801f483bacf39147e92276117c4d85c2a6d4f"
        ],
        [
            "simpl; unfold intersection_domain; elim (H13 x0).",
            "VernacExtend",
            "24387289de9be8805e344f0e0ba8b9eb8b3bd855"
        ],
        [
            "intros _ H16; assert (H17 := H16 H15); simpl in H17; unfold intersection_domain in H17; split.",
            "VernacExtend",
            "eb4f7ef599f0f185da705d684f978789b2b40c1f"
        ],
        [
            "elim H17; intros; assumption.",
            "VernacExtend",
            "cd7f17f7b7c7c6379101c505a18a56307fabac45"
        ],
        [
            "unfold Db; left; elim H17; intros; assumption.",
            "VernacExtend",
            "a049872ba0e37777a27d116a6429c6bcb9e16ce1"
        ],
        [
            "set (m' := Rmin (m + eps / 2) b).",
            "VernacExtend",
            "7287319897ee1fa4330ae1b554e77baeacdec8bc"
        ],
        [
            "cut (A m'); [intro H7|].",
            "VernacExtend",
            "60b5299feabfa2896fc7b0a77ae143a202d41184"
        ],
        [
            "destruct H3 as (H14,H15); unfold is_upper_bound in H14.",
            "VernacExtend",
            "8f262c974e369fe0ecdab35ba78a9c05ed24702e"
        ],
        [
            "assert (H16 := H14 m' H7).",
            "VernacExtend",
            "eee171d91570808e44a580177316cb0d77a65360"
        ],
        [
            "cut (m < m'); [intro H17|].",
            "VernacExtend",
            "e9f80b5941025cd304dfa614ccf12c32252e4c71"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H16 H17))...",
            "VernacExtend",
            "0b0f083eb6b135afb360d01fc4a68853e232b3bd"
        ],
        [
            "unfold m', Rmin; destruct (Rle_dec (m + eps / 2) b) as [Hle'|Hnle'].",
            "VernacExtend",
            "67d1146ad3c2e6b0a08d73480ab9dedb100b47c9"
        ],
        [
            "pattern m at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "6a7412288076d0d445c98e34a795d9c43cc5d553"
        ],
        [
            "destruct H4 as (_,[]).",
            "VernacExtend",
            "c66a993828d6b5cacea25a287fc6d86fd0439439"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H11; assumption.",
            "VernacExtend",
            "0c7ff33813325ba61ca591e7cccc086d4fdd5c00"
        ],
        [
            "unfold A; split.",
            "VernacExtend",
            "9493cff9c152923032c34cef75b2c25b83843f1e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rle_trans with m.",
            "VernacExtend",
            "f91be5499f38c5bcf88afc7c2e48ed05d6417375"
        ],
        [
            "elim H4; intros; assumption.",
            "VernacExtend",
            "90e235a0da22f1f5e1da81b7ceef5bdc1f316203"
        ],
        [
            "unfold m'; unfold Rmin; case (Rle_dec (m + eps / 2) b); intro.",
            "VernacExtend",
            "6a42a5b67c1c4b3cba57538cc3a61d6d699fe973"
        ],
        [
            "pattern m at 1; rewrite <- Rplus_0_r; apply Rplus_le_compat_l; left; unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "f17a81739d12b30ab6a55abb188d682ad2ffdb55"
        ],
        [
            "destruct H4.",
            "VernacExtend",
            "9ae390e4b039d96b643e4c1e0cd28291b37e7b3e"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold m'; apply Rmin_r.",
            "VernacExtend",
            "dd009018fc0c849eab8b8943d5b504fa15d8530e"
        ],
        [
            "set (Db := fun x:R => Dx x \\/ x = y0); exists Db; unfold covering_finite; split.",
            "VernacExtend",
            "1a486294c92fa2194531f588052315b9d1a12d0e"
        ],
        [
            "unfold covering; intros x0 (H14,H18); unfold covering in H12; destruct (Rle_dec x0 x) as [Hle'|Hnle'].",
            "VernacExtend",
            "8efbad6ce983c5dc20e685b880957c66ae9b704e"
        ],
        [
            "cut (a <= x0 <= x); [intro H15|].",
            "VernacExtend",
            "a07b550e5146a8dd282d4dca9fd952c97c04cc94"
        ],
        [
            "pose proof (H12 x0 H15) as (x1 & H16 & H17); exists x1; simpl; unfold Db; split; [ apply H16 | left; apply H17 ].",
            "VernacExtend",
            "a72647020768e451d2e9099af997379b709870fc"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "exists y0; simpl; split.",
            "VernacExtend",
            "5f54a843bf0474506e165600d9a5ce862eb3a726"
        ],
        [
            "apply H8; unfold disc, Rabs; destruct (Rcase_abs (x0 - m)) as [Hlt|Hge].",
            "VernacExtend",
            "f5a8366f1e0a336f2437bf1fa3399f4ac04fe245"
        ],
        [
            "rewrite Ropp_minus_distr; apply Rlt_trans with (m - x).",
            "VernacExtend",
            "5a49d696b7d1a723b1d5ad316725215a22134697"
        ],
        [
            "unfold Rminus; apply Rplus_lt_compat_l; apply Ropp_lt_gt_contravar; auto with real.",
            "VernacExtend",
            "2d1748a2387a2a403f4bad5efd543406c1568699"
        ],
        [
            "apply Rplus_lt_reg_l with (x - eps); replace (x - eps + (m - x)) with (m - eps).",
            "VernacExtend",
            "50e0e5e03c474bfffe72b51f3e00a6b016c0c06c"
        ],
        [
            "replace (x - eps + eps) with x.",
            "VernacExtend",
            "5601993f96fd2c5d43e91c2a352e037b7a04de5a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply Rle_lt_trans with (m' - m).",
            "VernacExtend",
            "3de3cd7ed20e9a9334125881c930ebe151403d22"
        ],
        [
            "unfold Rminus; do 2 rewrite <- (Rplus_comm (- m)); apply Rplus_le_compat_l; elim H14; intros; assumption.",
            "VernacExtend",
            "0d63c9a7a7028a377a56ce59b12e2ed4c6e4f09a"
        ],
        [
            "apply Rplus_lt_reg_l with m; replace (m + (m' - m)) with m'.",
            "VernacExtend",
            "e921a7507c96e571827b0099175cba5a9f0f5a46"
        ],
        [
            "apply Rle_lt_trans with (m + eps / 2).",
            "VernacExtend",
            "477ce37b60e2d798f6dca11ddfd26ed0e8d2ca21"
        ],
        [
            "unfold m'; apply Rmin_l.",
            "VernacExtend",
            "45448eca35ee4817a453704a80cde4738e83b416"
        ],
        [
            "apply Rplus_lt_compat_l; apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "cac853e1956e65d7f8fb88751c6cacd96e8503dd"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "bb110d8377e3622749fa8b2b4653e0680d3ab799"
        ],
        [
            "rewrite Rmult_1_l; pattern (pos eps) at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; apply (cond_pos eps).",
            "VernacExtend",
            "f9cc5920506e57fd91292a85b20852d9b63e14c5"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold Db; right; reflexivity.",
            "VernacExtend",
            "29cc53851b51b53096c3570967d160be846fbf83"
        ],
        [
            "unfold family_finite, domain_finite; unfold family_finite, domain_finite in H13; destruct H13 as (l,H13); exists (cons y0 l); intro; split.",
            "VernacExtend",
            "a247e161e0cd80117138c377dd249091e0715d18"
        ],
        [
            "intro H14; simpl in H14; unfold intersection_domain in H14; specialize (H13 x0); destruct H13 as (H13,H15); destruct (Req_dec x0 y0) as [Heq|Hneq].",
            "VernacExtend",
            "d89b186c7e102118e7ed6dd35fb249046132f4bf"
        ],
        [
            "simpl; left; apply Heq.",
            "VernacExtend",
            "eab9b8f7814ca0f014c829ecdebb0b3487c4e014"
        ],
        [
            "simpl; right; apply H13; simpl; unfold intersection_domain; unfold Db in H14; decompose [and or] H14.",
            "VernacExtend",
            "b7e3f4263d3186777c7b664cd99b322f7c1c0be2"
        ],
        [
            "split; assumption.",
            "VernacExtend",
            "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
        ],
        [
            "elim Hneq; assumption.",
            "VernacExtend",
            "dae3bc5bc74908c14e3ffd8837ac8ca72bc01332"
        ],
        [
            "intros [H15|H15].",
            "VernacExtend",
            "555e0619edc96f2038b04370ac8e48df0359ba16"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (cond_fam f0); rewrite H15; exists m; apply H6.",
            "VernacExtend",
            "b6a08543b250dc64cf8bf491cafe5b7533970c2b"
        ],
        [
            "unfold Db; right; assumption.",
            "VernacExtend",
            "90f801f483bacf39147e92276117c4d85c2a6d4f"
        ],
        [
            "elim (H13 x0); intros _ H16.",
            "VernacExtend",
            "8c1a482f6d8a1023dcb185b7db4c5b4bf2b64e11"
        ],
        [
            "assert (H17 := H16 H15).",
            "VernacExtend",
            "9bb5e30c4f1bef3ff873c815c0b2fe5f7450622a"
        ],
        [
            "simpl in H17.",
            "VernacExtend",
            "5cec8af2bd097f5c775badd2d14f882683236ba5"
        ],
        [
            "unfold intersection_domain in H17.",
            "VernacExtend",
            "28010720063493f1e12c5fd2a892df7832cbe68e"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "elim H17; intros; assumption.",
            "VernacExtend",
            "cd7f17f7b7c7c6379101c505a18a56307fabac45"
        ],
        [
            "unfold Db; left; elim H17; intros; assumption.",
            "VernacExtend",
            "a049872ba0e37777a27d116a6429c6bcb9e16ce1"
        ],
        [
            "elim (classic (exists x : R, A x /\\ m - eps < x <= m)); intro H9.",
            "VernacExtend",
            "3070f0e3513d68afbf687dbb288cc112da09d336"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H3; intros H10 H11; cut (is_upper_bound A (m - eps)).",
            "VernacExtend",
            "ca1d3840d1f45e50f2563443ae421c609c148315"
        ],
        [
            "intro H12; assert (H13 := H11 _ H12); cut (m - eps < m).",
            "VernacExtend",
            "1fd622a5d66ab8d2bd60fe895f434d8f5da51de7"
        ],
        [
            "intro H14; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H13 H14)).",
            "VernacExtend",
            "c30166d914a186bdfe45593dc678b26f02b58286"
        ],
        [
            "pattern m at 2; rewrite <- Rplus_0_r; unfold Rminus; apply Rplus_lt_compat_l; apply Ropp_lt_cancel; rewrite Ropp_involutive; rewrite Ropp_0; apply (cond_pos eps).",
            "VernacExtend",
            "bedce9e49097eb2a345d70f8137e61898b658e91"
        ],
        [
            "set (P := fun n:R => A n /\\ m - eps < n <= m); assert (H12 := not_ex_all_not _ P H9); unfold P in H12; unfold is_upper_bound; intros x H13; assert (H14 := not_and_or _ _ (H12 x)); elim H14; intro H15.",
            "VernacExtend",
            "29a86ed0ca6d769be08f7f7f8616e82cc6e75de4"
        ],
        [
            "elim H15; apply H13.",
            "VernacExtend",
            "d11d247e918f61fb76f44a0af034a55b621fd1c2"
        ],
        [
            "destruct (not_and_or _ _ H15) as [H16|H16].",
            "VernacExtend",
            "b6f6383c925431406a32aab7f1e22c3469bbb561"
        ],
        [
            "destruct (Rle_dec x (m - eps)) as [H17|H17].",
            "VernacExtend",
            "0a93b6ad58797974ba84678d3ef00713286d06c4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H16; auto with real.",
            "VernacExtend",
            "185a0f74b7299b7e7bc4da98dd4b7bd4d74c15ba"
        ],
        [
            "unfold is_upper_bound in H10; assert (H17 := H10 x H13); elim H16; apply H17.",
            "VernacExtend",
            "d137d26eb7e65ed0db25a724e0fc7ed26765c6ee"
        ],
        [
            "elim H3; clear H3; intros.",
            "VernacExtend",
            "3db35272ce4b8ef28a0019318fa63c100f072a8d"
        ],
        [
            "unfold is_upper_bound in H3.",
            "VernacExtend",
            "f8a25fdcf5a32770dc72fc6db00802d1fbe377fd"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (H3 _ H0).",
            "VernacExtend",
            "68e01ee422b1cf32e537a1ea653595e871a1897e"
        ],
        [
            "clear H5.",
            "VernacExtend",
            "27e7490763b843a17bd590552e39601d3a9ed430"
        ],
        [
            "apply (H4 b); unfold is_upper_bound; intros x H5; unfold A in H5; elim H5; clear H5; intros H5 _; elim H5; clear H5; intros _ H5; apply H5.",
            "VernacExtend",
            "f01c121e633eae66f78ead44c9fe2a8abfc7b9d6"
        ],
        [
            "exists a; apply H0.",
            "VernacExtend",
            "532a4cf425dbcb042313c58b34af62c4e88ba828"
        ],
        [
            "unfold bound; exists b; unfold is_upper_bound; intros; unfold A in H1; elim H1; clear H1; intros H1 _; elim H1; clear H1; intros _ H1; apply H1.",
            "VernacExtend",
            "e6d9b5bfb251f780c6064088bdf3c7b9afe3b5d4"
        ],
        [
            "unfold A; split.",
            "VernacExtend",
            "9493cff9c152923032c34cef75b2c25b83843f1e"
        ],
        [
            "split; [ right; reflexivity | apply Hle ].",
            "VernacExtend",
            "e03e79aada6afcf7ecffd3ad0280c800b59231ec"
        ],
        [
            "unfold covering in H; cut (a <= a <= b).",
            "VernacExtend",
            "5eedcf33ef11398dbe03eeabcfccde4ff7d9faab"
        ],
        [
            "intro H1; elim (H _ H1); intros y0 H2; set (D' := fun x:R => x = y0); exists D'; unfold covering_finite; split.",
            "VernacExtend",
            "8e140e5cae0b0336151ea99192edb7d6326dc796"
        ],
        [
            "unfold covering; simpl; intros x H3; cut (x = a).",
            "VernacExtend",
            "2d154d3c1660d6b012a22092abb487decd2766a5"
        ],
        [
            "intro H4; exists y0; split.",
            "VernacExtend",
            "645603253f4d31abdbab8be8ce0c41d8b613951a"
        ],
        [
            "rewrite H4; apply H2.",
            "VernacExtend",
            "e267fb0c72800f39feddbad2a7d6a034ca9a1c72"
        ],
        [
            "unfold D'; reflexivity.",
            "VernacExtend",
            "c146ac5ce939e8a883bf3006a4620abeb73cab26"
        ],
        [
            "elim H3; intros; apply Rle_antisym; assumption.",
            "VernacExtend",
            "a6fa35d8b2289d82e02f54e10b22335dbb685ad8"
        ],
        [
            "unfold family_finite; unfold domain_finite; exists (cons y0 nil); intro; split.",
            "VernacExtend",
            "8f61458058216f634acf3eef75bc576f6aece281"
        ],
        [
            "simpl; unfold intersection_domain; intros (H3,H4).",
            "VernacExtend",
            "1c2233279151f1fc808f45c6f60a19e0490c713e"
        ],
        [
            "unfold D' in H4; left; apply H4.",
            "VernacExtend",
            "351fd3c7dc23efd71b3da22ae3d1d0721e971d46"
        ],
        [
            "simpl; unfold intersection_domain; intros [H4|[]].",
            "VernacExtend",
            "09bdbdb85ec69735388edd971ae75ba492606b24"
        ],
        [
            "split; [ rewrite H4; apply (cond_fam f0); exists a; apply H2 | apply H4 ].",
            "VernacExtend",
            "3b4fee06967ff8f7ea7d163358025ceb51f56463"
        ],
        [
            "split; [ right; reflexivity | apply Hle ].",
            "VernacExtend",
            "e03e79aada6afcf7ecffd3ad0280c800b59231ec"
        ],
        [
            "apply compact_eqDom with (fun c:R => False).",
            "VernacExtend",
            "b9d68bfaf9ad651f9822437654a4713e3e9167ac"
        ],
        [
            "apply compact_EMP.",
            "VernacExtend",
            "fe769288016801721a197d89c0dd35b398d3a6c2"
        ],
        [
            "unfold eq_Dom; split.",
            "VernacExtend",
            "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
        ],
        [
            "unfold included; intros; elim H.",
            "VernacExtend",
            "41bbef28f12938c4df336ceeee645676054e9875"
        ],
        [
            "unfold included; intros; elim H; clear H; intros; assert (H1 := Rle_trans _ _ _ H H0); elim Hnle; apply H1.",
            "VernacExtend",
            "11d0b4441c9556123f12b5661914f360965a0c6b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compact_P4 : forall X F:R -> Prop, compact X -> closed_set F -> included F X -> compact F.",
            "VernacStartTheoremProof",
            "7dac495e2bac20b941ebe9166e530efe78cd39d2"
        ],
        [
            "unfold compact; intros; elim (classic (exists z : R, F z)); intro Hyp_F_NE.",
            "VernacExtend",
            "0f15a2fee0f0465dd30d4317b1e38b043df6aa14"
        ],
        [
            "set (D := ind f0); set (g := f f0); unfold closed_set in H0.",
            "VernacExtend",
            "8fbff0639a5e7999327a5423415118f4ec40be24"
        ],
        [
            "set (g' := fun x y:R => f0 x y \\/ complementary F y /\\ D x).",
            "VernacExtend",
            "8e5058172c1effcc9c96337c741ec32b871f48e7"
        ],
        [
            "set (D' := D).",
            "VernacExtend",
            "bf1a3b39ec7ebf6934456f71d22375653f9f48de"
        ],
        [
            "cut (forall x:R, (exists y : R, g' x y) -> D' x).",
            "VernacExtend",
            "9f20709e81fc919779146638d438e8369cd823db"
        ],
        [
            "intro; set (f' := mkfamily D' g' H3); cut (covering_open_set X f').",
            "VernacExtend",
            "2ce83e7f65c6dd2cf6085c978ca66a8f68c71cf7"
        ],
        [
            "intro; elim (H _ H4); intros DX H5; exists DX.",
            "VernacExtend",
            "3bce8098c192c75a4e406c6f3d67659b07a5957f"
        ],
        [
            "unfold covering_finite; unfold covering_finite in H5; elim H5; clear H5; intros.",
            "VernacExtend",
            "22a6b46c1408d662dee17f9abbfe011fcea75f28"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold covering; unfold covering in H5; intros.",
            "VernacExtend",
            "bf055c101daf658758e278058da59d5499159d6b"
        ],
        [
            "elim (H5 _ (H1 _ H7)); intros y0 H8; exists y0; simpl in H8; simpl; elim H8; clear H8; intros.",
            "VernacExtend",
            "dbd434b39f6231087ef5501cac060bb80c9c7205"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold g' in H8; elim H8; intro.",
            "VernacExtend",
            "89d0686a8e595b5dd56f1d3acef7a654fb33db45"
        ],
        [
            "apply H10.",
            "VernacExtend",
            "169c3dd7a02593ce4f62696429eb3c1035f98388"
        ],
        [
            "elim H10; intros H11 _; unfold complementary in H11; elim H11; apply H7.",
            "VernacExtend",
            "586d499e568cd1b899fc63be47f525eacd8b4515"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "unfold family_finite; unfold domain_finite; unfold family_finite in H6; unfold domain_finite in H6; elim H6; clear H6; intros l H6; exists l; intro; assert (H7 := H6 x); elim H7; clear H7; intros.",
            "VernacExtend",
            "7caec028be111784b8ca9b3711847f86a6508b96"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intro; apply H7; simpl; unfold intersection_domain; simpl in H9; unfold intersection_domain in H9; unfold D'; apply H9.",
            "VernacExtend",
            "06c0c258749241fdc9429dba914e5a45e2d3d246"
        ],
        [
            "intro; assert (H10 := H8 H9); simpl in H10; unfold intersection_domain in H10; simpl; unfold intersection_domain; unfold D' in H10; apply H10.",
            "VernacExtend",
            "21634f527cc514eb60379aeef61043e2514636da"
        ],
        [
            "unfold covering_open_set; unfold covering_open_set in H2; elim H2; clear H2; intros.",
            "VernacExtend",
            "de18a96e58d39a69c91919b3505b4dde2b8a3904"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold covering; unfold covering in H2; intros.",
            "VernacExtend",
            "6887948a4ffd2255460bbf705f6b84496b4a789e"
        ],
        [
            "elim (classic (F x)); intro.",
            "VernacExtend",
            "51f38680e45296d0d1c62e18c72d0b2a2b700e6c"
        ],
        [
            "elim (H2 _ H6); intros y0 H7; exists y0; simpl; unfold g'; left; assumption.",
            "VernacExtend",
            "45c962c617070fed5afea16fea4481b41200e547"
        ],
        [
            "cut (exists z : R, D z).",
            "VernacExtend",
            "26ba8b7bef47dcfa4ddbe086b77de3a8e9cc6983"
        ],
        [
            "intro; elim H7; clear H7; intros x0 H7; exists x0; simpl; unfold g'; right.",
            "VernacExtend",
            "b71dbd0cbe0e5e491d4466c78ab1e5eb60384c8a"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold complementary; apply H6.",
            "VernacExtend",
            "187f1c60d3f9c7ea8da7a88b31f1d29780f91ab8"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "elim Hyp_F_NE; intros z0 H7.",
            "VernacExtend",
            "72f238ae8b3ad37fffad88e101920bfaa412061d"
        ],
        [
            "assert (H8 := H2 _ H7).",
            "VernacExtend",
            "d64b3bfe9cc801944d0ecb54d6edf802f74e98db"
        ],
        [
            "elim H8; clear H8; intros t H8; exists t; apply (cond_fam f0); exists z0; apply H8.",
            "VernacExtend",
            "1aa9a4fcfd79348728ff8e5527f3677b5da043db"
        ],
        [
            "unfold family_open_set; intro; simpl; unfold g'; elim (classic (D x)); intro.",
            "VernacExtend",
            "5e2cc11b58b65264e05ed605fce63f51731752ea"
        ],
        [
            "apply open_set_P6 with (union_domain (f0 x) (complementary F)).",
            "VernacExtend",
            "9bb38892bff83c317bcfdb4bfb0c527bfe4eb570"
        ],
        [
            "apply open_set_P2.",
            "VernacExtend",
            "b29662779208a5b491fbcb3b1cee6f199883d5f6"
        ],
        [
            "unfold family_open_set in H4; apply H4.",
            "VernacExtend",
            "45592dd6f9c1d3a231e1f9a56effae02b5c1e222"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "unfold eq_Dom; split.",
            "VernacExtend",
            "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
        ],
        [
            "unfold included, union_domain, complementary; intros.",
            "VernacExtend",
            "ca8e65258df46c6c3084b9aa91804496c75cf526"
        ],
        [
            "elim H6; intro; [ left; apply H7 | right; split; assumption ].",
            "VernacExtend",
            "14fc9585355952abc1d693c2e33eec09127ebddc"
        ],
        [
            "unfold included, union_domain, complementary; intros.",
            "VernacExtend",
            "ca8e65258df46c6c3084b9aa91804496c75cf526"
        ],
        [
            "elim H6; intro; [ left; apply H7 | right; elim H7; intros; apply H8 ].",
            "VernacExtend",
            "30aaf726af2a6851d430a84fcb055cfce1f3737b"
        ],
        [
            "apply open_set_P6 with (f0 x).",
            "VernacExtend",
            "82cc86e47c6ed9e2c4ea656780175dda8e320a1c"
        ],
        [
            "unfold family_open_set in H4; apply H4.",
            "VernacExtend",
            "45592dd6f9c1d3a231e1f9a56effae02b5c1e222"
        ],
        [
            "unfold eq_Dom; split.",
            "VernacExtend",
            "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
        ],
        [
            "unfold included, complementary; intros; left; apply H6.",
            "VernacExtend",
            "d2f8725f5b57bc1ab510e144e118d825b2c99a16"
        ],
        [
            "unfold included, complementary; intros.",
            "VernacExtend",
            "1282e5177e5165ac650714a3385639a9992eb495"
        ],
        [
            "elim H6; intro.",
            "VernacExtend",
            "e85bcbbf1e2e7245dba06fdc165dee137f165a99"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "elim H7; intros _ H8; elim H5; apply H8.",
            "VernacExtend",
            "f9b42c3e8a81210e1443e4672ff349ab36cfbcb7"
        ],
        [
            "intros; elim H3; intros y0 H4; unfold g' in H4; elim H4; intro.",
            "VernacExtend",
            "60ffa7c0d9f263d44c26139c149f95e1a5072221"
        ],
        [
            "apply (cond_fam f0); exists y0; apply H5.",
            "VernacExtend",
            "3a898f63fb399a865430ec91e7d061fb086f2dd9"
        ],
        [
            "elim H5; clear H5; intros _ H5; apply H5.",
            "VernacExtend",
            "e0224a9d919ee64798795a08f934215c673f0251"
        ],
        [
            "cut (compact F).",
            "VernacExtend",
            "d627806bb9a1c99b92c7fcf25c93ebf2c4986ca2"
        ],
        [
            "intro; apply (H3 f0 H2).",
            "VernacExtend",
            "4e6142e413b66b7af526691f92788020d8762b6a"
        ],
        [
            "apply compact_eqDom with (fun _:R => False).",
            "VernacExtend",
            "f407dbf754728ea2c545bda73542601fdd59ad45"
        ],
        [
            "apply compact_EMP.",
            "VernacExtend",
            "fe769288016801721a197d89c0dd35b398d3a6c2"
        ],
        [
            "unfold eq_Dom; split.",
            "VernacExtend",
            "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
        ],
        [
            "unfold included; intros; elim H3.",
            "VernacExtend",
            "d4440b493731deaedff8e01aa471e7d52c1b2711"
        ],
        [
            "assert (H3 := not_ex_all_not _ _ Hyp_F_NE); unfold included; intros; elim (H3 x); apply H4.",
            "VernacExtend",
            "8b0a91bfba0781a7611517a80f44e5536d626c87"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compact_P5 : forall X:R -> Prop, closed_set X -> bounded X -> compact X.",
            "VernacStartTheoremProof",
            "d718c437903f7dbc4962d684e9a7d8c6eec6149a"
        ],
        [
            "intros; unfold bounded in H0.",
            "VernacExtend",
            "9a61f0fb8868dd1431bfbf20a714a84040d75ac2"
        ],
        [
            "elim H0; clear H0; intros m H0.",
            "VernacExtend",
            "9176d27bb766bafcd5e73da88d0a72d6030eff48"
        ],
        [
            "elim H0; clear H0; intros M H0.",
            "VernacExtend",
            "0ed865a4f0df306ad400a12c25f8409cec07543d"
        ],
        [
            "assert (H1 := compact_P3 m M).",
            "VernacExtend",
            "d683979a1c806e45cc80a01bdff68a0129803046"
        ],
        [
            "apply (compact_P4 (fun c:R => m <= c <= M) X H1 H H0).",
            "VernacExtend",
            "2f8d9d73ba416fca9590ddb33ca3cd72cdd92735"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma compact_carac : forall X:R -> Prop, compact X <-> closed_set X /\\ bounded X.",
            "VernacStartTheoremProof",
            "02afbb3eb42e6d9afbcea4a61c2bec7b64e58486"
        ],
        [
            "intro; split.",
            "VernacExtend",
            "fab266bb307ddec4a6ab91d7f2efd84a9c1736ef"
        ],
        [
            "intro; split; [ apply (compact_P2 _ H) | apply (compact_P1 _ H) ].",
            "VernacExtend",
            "0ac18aab24b33755f0c8991e4c3b3283db193e73"
        ],
        [
            "intro; elim H; clear H; intros; apply (compact_P5 _ H H0).",
            "VernacExtend",
            "4460afe1671a410577a587c04a4cc1cd0d1667a7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition image_dir (f:R -> R) (D:R -> Prop) (x:R) : Prop := exists y : R, x = f y /\\ D y.",
            "VernacDefinition",
            "8f840706487d0328e15f89066b65c0721899c205"
        ],
        [
            "Lemma continuity_compact : forall (f:R -> R) (X:R -> Prop), (forall x:R, continuity_pt f x) -> compact X -> compact (image_dir f X).",
            "VernacStartTheoremProof",
            "ddbe6126226ff97c7ce6d6bf91b53ac3b186a3d3"
        ],
        [
            "unfold compact; intros; unfold covering_open_set in H1.",
            "VernacExtend",
            "bcbe9002c556b59d3b8901f93c2552949f2400a8"
        ],
        [
            "elim H1; clear H1; intros.",
            "VernacExtend",
            "0b5cb27effffecbbbd63492c580499a3c4277ed9"
        ],
        [
            "set (D := ind f1).",
            "VernacExtend",
            "8a200163ead8f9516970a3077b766ba2103bb38f"
        ],
        [
            "set (g := fun x y:R => image_rec f0 (f1 x) y).",
            "VernacExtend",
            "40bdc0f3e8651baebf91ab1911232618a044db31"
        ],
        [
            "cut (forall x:R, (exists y : R, g x y) -> D x).",
            "VernacExtend",
            "928ebdf298673d4cd86433f871654df439774d31"
        ],
        [
            "intro; set (f' := mkfamily D g H3).",
            "VernacExtend",
            "312d131baff17c9cf1cd050a7422954682a649ff"
        ],
        [
            "cut (covering_open_set X f').",
            "VernacExtend",
            "4a7bb0d448b8461930874559d74ed864928cd294"
        ],
        [
            "intro; elim (H0 f' H4); intros D' H5; exists D'.",
            "VernacExtend",
            "4fda249be47dbbd89109728bb8c38f1b5d6ebea3"
        ],
        [
            "unfold covering_finite in H5; elim H5; clear H5; intros; unfold covering_finite; split.",
            "VernacExtend",
            "ec7db982611213a047e31eb39d455f58badd37ed"
        ],
        [
            "unfold covering, image_dir; simpl; unfold covering in H5; intros; elim H7; intros y H8; elim H8; intros; assert (H11 := H5 _ H10); simpl in H11; elim H11; intros z H12; exists z; unfold g in H12; unfold image_rec in H12; rewrite H9; apply H12.",
            "VernacExtend",
            "3f5139337b0cc099c8da2aa4c2e74a576e3f38a1"
        ],
        [
            "unfold family_finite in H6; unfold domain_finite in H6; unfold family_finite; unfold domain_finite; elim H6; intros l H7; exists l; intro; elim (H7 x); intros; split; intro.",
            "VernacExtend",
            "bef29c07dbec230f503b478cc551835bf4196062"
        ],
        [
            "apply H8; simpl in H10; simpl; apply H10.",
            "VernacExtend",
            "b75b7e65674df6edf67df445c845366d1b490c49"
        ],
        [
            "apply (H9 H10).",
            "VernacExtend",
            "8c76fd372cfc6acf2bd08014f01d61974d3d56ed"
        ],
        [
            "unfold covering_open_set; split.",
            "VernacExtend",
            "1c919de8626e4277fdd15de9bc1f5bc1d8203b10"
        ],
        [
            "unfold covering; intros; simpl; unfold covering in H1; unfold image_dir in H1; unfold g; unfold image_rec; apply H1.",
            "VernacExtend",
            "6e5b316d3521f612e8ebd1c20943a48d31c6e6d2"
        ],
        [
            "exists x; split; [ reflexivity | apply H4 ].",
            "VernacExtend",
            "a6d349cde3594548f7d2861d70fa940949659e52"
        ],
        [
            "unfold family_open_set; unfold family_open_set in H2; intro; simpl; unfold g; cut ((fun y:R => image_rec f0 (f1 x) y) = image_rec f0 (f1 x)).",
            "VernacExtend",
            "d06cbb5d8c173f944e57d03b78747f7cd69ccf6b"
        ],
        [
            "intro; rewrite H4.",
            "VernacExtend",
            "f7eb81a07050313ee650e7e0bf81a6c661821ea9"
        ],
        [
            "apply (continuity_P2 f0 (f1 x) H (H2 x)).",
            "VernacExtend",
            "c2d31537533042b9a49546e28587ffb3b3931033"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "intros; apply (cond_fam f1); unfold g in H3; unfold image_rec in H3; elim H3; intros; exists (f0 x0); apply H4.",
            "VernacExtend",
            "4080f195732b0ab93e12bc5e91e497889363fd82"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prolongement_C0 : forall (f:R -> R) (a b:R), a <= b -> (forall c:R, a <= c <= b -> continuity_pt f c) -> exists g : R -> R, continuity g /\\ (forall c:R, a <= c <= b -> g c = f c).",
            "VernacStartTheoremProof",
            "c9d5366d45a4c317f34be85510384f3e9b7c5818"
        ],
        [
            "intros; elim H; intro.",
            "VernacExtend",
            "e5597b54ab315f2311ce04817ec4ee080463a703"
        ],
        [
            "set (h := fun x:R => match Rle_dec x a with | left _ => f0 a | right _ => match Rle_dec x b with | left _ => f0 x | right _ => f0 b end end).",
            "VernacExtend",
            "964333762406e81bd0fb1844a04f96780cca63b6"
        ],
        [
            "assert (H2 : 0 < b - a).",
            "VernacExtend",
            "e6114a7752f556d6b4746f509bbc5921ab3f0ffb"
        ],
        [
            "apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
        ],
        [
            "exists h; split.",
            "VernacExtend",
            "cd0b047d1188caf5c2e90a2619decc44defce645"
        ],
        [
            "unfold continuity; intro; case (Rtotal_order x a); intro.",
            "VernacExtend",
            "d97ea2cdbf69221f379799c6f41989f66549032c"
        ],
        [
            "unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; exists (a - x); split.",
            "VernacExtend",
            "5a5a8fb99fc55c32e41d8a0da30eb97dac02e911"
        ],
        [
            "change (0 < a - x); apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "1dc4b09730bea0df5b447584cb7d670a7bb5b1aa"
        ],
        [
            "intros; elim H5; clear H5; intros _ H5; unfold h.",
            "VernacExtend",
            "9a5d376fb3fcff9aee5d0f2425f784501f13550e"
        ],
        [
            "case (Rle_dec x a) as [|[]].",
            "VernacExtend",
            "4e29d6a5d54d5336757b20e90238802509cabbf2"
        ],
        [
            "case (Rle_dec x0 a) as [|[]].",
            "VernacExtend",
            "2507d561a0c58868bec482f2cf996f60718c7b88"
        ],
        [
            "unfold Rminus; rewrite Rplus_opp_r, Rabs_R0; assumption.",
            "VernacExtend",
            "47761bba33f19c7cdacd95c783fa8cd57e830c0a"
        ],
        [
            "left; apply Rplus_lt_reg_l with (- x); do 2 rewrite (Rplus_comm (- x)); apply Rle_lt_trans with (Rabs (x0 - x)).",
            "VernacExtend",
            "0ed1bc137f384fd8cc585dd64579aa451e98a2af"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "elim H3; intro.",
            "VernacExtend",
            "522e36e2853ff30db9e3e0abc7a128144a4e937c"
        ],
        [
            "assert (H5 : a <= a <= b).",
            "VernacExtend",
            "1a318c43a93f9c7580fa6fd58ec70ea518a79247"
        ],
        [
            "split; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "6bab46c1adec52d812fd328f9f48728040031941"
        ],
        [
            "assert (H6 := H0 _ H5); unfold continuity_pt in H6; unfold continue_in in H6; unfold limit1_in in H6; unfold limit_in in H6; simpl in H6; unfold R_dist in H6; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; elim (H6 _ H7); intros; exists (Rmin x0 (b - a)); split.",
            "VernacExtend",
            "c6df10dbf2f3336ff31e200eca35e5372b0a3e0c"
        ],
        [
            "unfold Rmin; case (Rle_dec x0 (b - a)); intro.",
            "VernacExtend",
            "297a72a6c97037d97dc08430721bc814cde746fa"
        ],
        [
            "elim H8; intros; assumption.",
            "VernacExtend",
            "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
        ],
        [
            "change (0 < b - a); apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "5caff84c0865710a0efc16f4366abbb133c16514"
        ],
        [
            "intros; elim H9; clear H9; intros _ H9; cut (x1 < b).",
            "VernacExtend",
            "8b3f5be49488cfca311285688c3f5407f4f1ddaa"
        ],
        [
            "intro; unfold h; case (Rle_dec x a) as [|[]].",
            "VernacExtend",
            "55b83f92d4253c2ea1493da1bede9f01d20e0ff7"
        ],
        [
            "case (Rle_dec x1 a) as [Hlta|Hnlea].",
            "VernacExtend",
            "07c67b08c11c579b59e0efc67afc70a397430586"
        ],
        [
            "unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
            "VernacExtend",
            "c1de84b8ec8a6c422226e5ca95d3db00e63bd56e"
        ],
        [
            "case (Rle_dec x1 b) as [Hleb|[]].",
            "VernacExtend",
            "553b5e13a733abd69f3bddc97a56e607d95f588f"
        ],
        [
            "elim H8; intros; apply H12; split.",
            "VernacExtend",
            "932c01e0df61e80d7e5453cbc61e63a84db9c6d7"
        ],
        [
            "unfold D_x, no_cond; split.",
            "VernacExtend",
            "121e72bbd9a8ad97e9353edec680d410ccaf17ee"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "red; intro; elim Hnlea; right; symmetry ; assumption.",
            "VernacExtend",
            "1e0aee1e840f0273d1e99ba5d257b57237fd69a5"
        ],
        [
            "apply Rlt_le_trans with (Rmin x0 (b - a)).",
            "VernacExtend",
            "8d444f6c292aab9fae62352c6219a9340bd8e935"
        ],
        [
            "rewrite H4 in H9; apply H9.",
            "VernacExtend",
            "41808de0df62821fcf92f201c7c208a05a6d8451"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "apply Rplus_lt_reg_l with (- a); do 2 rewrite (Rplus_comm (- a)); rewrite H4 in H9; apply Rle_lt_trans with (Rabs (x1 - a)).",
            "VernacExtend",
            "2d598b1d8190a031f1095de110c5fb80806833f2"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply Rlt_le_trans with (Rmin x0 (b - a)).",
            "VernacExtend",
            "8d444f6c292aab9fae62352c6219a9340bd8e935"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "case (Rtotal_order x b); intro.",
            "VernacExtend",
            "9700fe74799d1a3c0066eed3b83c3a70249b537d"
        ],
        [
            "assert (H6 : a <= x <= b).",
            "VernacExtend",
            "4f063374f281da4fb500db7d9998f70bcea62cf2"
        ],
        [
            "split; left; assumption.",
            "VernacExtend",
            "fdfa29011e9dae8a9167d139e5179b516d7a668c"
        ],
        [
            "assert (H7 := H0 _ H6); unfold continuity_pt in H7; unfold continue_in in H7; unfold limit1_in in H7; unfold limit_in in H7; simpl in H7; unfold R_dist in H7; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; elim (H7 _ H8); intros; elim H9; clear H9; intros.",
            "VernacExtend",
            "8b5383ade1c129dcacbb6a362393307e45fe9789"
        ],
        [
            "assert (H11 : 0 < x - a).",
            "VernacExtend",
            "057bef07ae3cb72bca66ab89e40aebb3a9abc0f8"
        ],
        [
            "apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
        ],
        [
            "assert (H12 : 0 < b - x).",
            "VernacExtend",
            "9626077e4ca5ceb34942f46f6da47c2efc5a1836"
        ],
        [
            "apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
        ],
        [
            "exists (Rmin x0 (Rmin (x - a) (b - x))); split.",
            "VernacExtend",
            "d8e3be8c34334cb845a27314272a8342cc02fa4e"
        ],
        [
            "unfold Rmin; case (Rle_dec (x - a) (b - x)) as [Hle|Hnle].",
            "VernacExtend",
            "431c5952fd139fd918a4d1910a43964e7ec6e91f"
        ],
        [
            "case (Rle_dec x0 (x - a)) as [Hlea|Hnlea].",
            "VernacExtend",
            "1f69ff5b71c482a22532b1a5ff1709f5b1fcd27f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "case (Rle_dec x0 (b - x)) as [Hleb|Hnleb].",
            "VernacExtend",
            "47d6ed55d45cac0f8db33e408e643d971e63ff03"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros x1 (H13,H14); cut (a < x1 < b).",
            "VernacExtend",
            "495532a972d21ee6c55972346dafcd8717b8f6dd"
        ],
        [
            "intro; elim H15; clear H15; intros; unfold h; case (Rle_dec x a) as [Hle|Hnle].",
            "VernacExtend",
            "fdb7655e9dc86b92d9f89aac438c69657b49bfc2"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle H4)).",
            "VernacExtend",
            "45b8e3f97925c37469685abefd405044860a6169"
        ],
        [
            "case (Rle_dec x b) as [|[]].",
            "VernacExtend",
            "bb01d6cde1202cc42e37d85e6b50f28d2296e4e0"
        ],
        [
            "case (Rle_dec x1 a) as [Hle0|].",
            "VernacExtend",
            "837673ba500f49e1571c6bfaa5b57fe40f2be71f"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle0 H15)).",
            "VernacExtend",
            "b05e280385fc3bfd2aa9747447b59d166103bbc9"
        ],
        [
            "case (Rle_dec x1 b) as [|[]].",
            "VernacExtend",
            "dd813af4d930db0b5b917bf3bf8026ab6f945c3b"
        ],
        [
            "apply H10; split.",
            "VernacExtend",
            "b550e2abc04d6053388b28d2d1b3c0577deb6f85"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rlt_le_trans with (Rmin x0 (Rmin (x - a) (b - x))).",
            "VernacExtend",
            "96dcd98c754bac4b394b12bc975bc7ec1878f9e5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Ropp_lt_cancel; apply Rplus_lt_reg_l with x; apply Rle_lt_trans with (Rabs (x1 - x)).",
            "VernacExtend",
            "88d71d6474fb50f54d74abab869485b7160d73c2"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply RRle_abs.",
            "VernacExtend",
            "7011ff8c44bcdbea135883b84f45196054dcd9da"
        ],
        [
            "apply Rlt_le_trans with (Rmin x0 (Rmin (x - a) (b - x))).",
            "VernacExtend",
            "96dcd98c754bac4b394b12bc975bc7ec1878f9e5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_trans with (Rmin (x - a) (b - x)).",
            "VernacExtend",
            "315400d67307bf57f6f048c7ec0c91c377200071"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "apply Rplus_lt_reg_l with (- x); do 2 rewrite (Rplus_comm (- x)); apply Rle_lt_trans with (Rabs (x1 - x)).",
            "VernacExtend",
            "4121a2e2b5dd3633bce52e22dc337262a95dadda"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply Rlt_le_trans with (Rmin x0 (Rmin (x - a) (b - x))).",
            "VernacExtend",
            "96dcd98c754bac4b394b12bc975bc7ec1878f9e5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rle_trans with (Rmin (x - a) (b - x)); apply Rmin_r.",
            "VernacExtend",
            "6eb31cfa31e240d7d03069450e09044b04a2d353"
        ],
        [
            "elim H5; intro.",
            "VernacExtend",
            "29923dfc32add298aa4e01bbfee147f65e05faf2"
        ],
        [
            "assert (H7 : a <= b <= b).",
            "VernacExtend",
            "ed819a9325d39eaf2d6b44714add170e08953c06"
        ],
        [
            "split; [ left; assumption | right; reflexivity ].",
            "VernacExtend",
            "7f83d8514281eecf7d46d76f6ccefd321f22c757"
        ],
        [
            "assert (H8 := H0 _ H7); unfold continuity_pt in H8; unfold continue_in in H8; unfold limit1_in in H8; unfold limit_in in H8; simpl in H8; unfold R_dist in H8; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; elim (H8 _ H9); intros; exists (Rmin x0 (b - a)); split.",
            "VernacExtend",
            "3f85d733b1d3086a63e078a09b58cd35937540c5"
        ],
        [
            "unfold Rmin; case (Rle_dec x0 (b - a)); intro.",
            "VernacExtend",
            "297a72a6c97037d97dc08430721bc814cde746fa"
        ],
        [
            "elim H10; intros; assumption.",
            "VernacExtend",
            "441b8572d6746494b264263afd889422a8335e89"
        ],
        [
            "change (0 < b - a); apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "5caff84c0865710a0efc16f4366abbb133c16514"
        ],
        [
            "intros; elim H11; clear H11; intros _ H11; cut (a < x1).",
            "VernacExtend",
            "b189a446c6ce4d52855b93881260237e9150a24f"
        ],
        [
            "intro; unfold h; case (Rle_dec x a) as [Hlea|Hnlea].",
            "VernacExtend",
            "a89ebd590c8f9c7af07e0931cdf19bd7effe3fa0"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hlea H4)).",
            "VernacExtend",
            "c0dce4f7b48939c853f9da792063304539a4099c"
        ],
        [
            "case (Rle_dec x1 a) as [Hlea'|Hnlea'].",
            "VernacExtend",
            "ecfb8fea445ba6a7e9e747f7fbee21f2035874f9"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hlea' H12)).",
            "VernacExtend",
            "1b28c9ae5a8a22f5664346db59df32856a1fabbc"
        ],
        [
            "case (Rle_dec x b) as [Hleb|Hnleb].",
            "VernacExtend",
            "849991f47f15fe02f4cb4288b16eb018b200b8f6"
        ],
        [
            "case (Rle_dec x1 b) as [Hleb'|Hnleb'].",
            "VernacExtend",
            "27029e0f19ac64a7c49a9d63fac3b155fc20d742"
        ],
        [
            "rewrite H6; elim H10; intros; destruct Hleb'.",
            "VernacExtend",
            "6a60436378208ee7842f59590226ff44fbd97a57"
        ],
        [
            "apply H14; split.",
            "VernacExtend",
            "0a8b05d61d3d39984bd7bd6e2ea644e8e1dbbff7"
        ],
        [
            "unfold D_x, no_cond; split.",
            "VernacExtend",
            "121e72bbd9a8ad97e9353edec680d410ccaf17ee"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "red; intro; rewrite <- H16 in H15; elim (Rlt_irrefl _ H15).",
            "VernacExtend",
            "d8401cc16dc430801526acea8a03c3c328cc89e0"
        ],
        [
            "rewrite H6 in H11; apply Rlt_le_trans with (Rmin x0 (b - a)).",
            "VernacExtend",
            "821d0e7f19a4d1e1ea6fb49f77a3ebbc9de9300f"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "apply Rmin_l.",
            "VernacExtend",
            "19942458506c6b3427aea84d1ee7179f00e19f1c"
        ],
        [
            "rewrite H15; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
            "VernacExtend",
            "0af5ee24a2cf71d7d4968c00eba0c79e1b555d85"
        ],
        [
            "rewrite H6; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
            "VernacExtend",
            "11977271ce925598f61aec9be47c51a495f1334d"
        ],
        [
            "elim Hnleb; right; assumption.",
            "VernacExtend",
            "2f07761c064b0550b6ef720fdadebf3bfcf517fc"
        ],
        [
            "rewrite H6 in H11; apply Ropp_lt_cancel; apply Rplus_lt_reg_l with b; apply Rle_lt_trans with (Rabs (x1 - b)).",
            "VernacExtend",
            "2ab8cae8e02b9e1db9ae6f88727612f9d425fd2c"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply RRle_abs.",
            "VernacExtend",
            "7011ff8c44bcdbea135883b84f45196054dcd9da"
        ],
        [
            "apply Rlt_le_trans with (Rmin x0 (b - a)).",
            "VernacExtend",
            "8d444f6c292aab9fae62352c6219a9340bd8e935"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; exists (x - b); split.",
            "VernacExtend",
            "e8b77c3806604e73b977504b92cdf3ce0e7d0689"
        ],
        [
            "change (0 < x - b); apply Rlt_Rminus; assumption.",
            "VernacExtend",
            "cbb7e0a585a0994eaba684cf1e100cf28e91f799"
        ],
        [
            "intros; elim H8; clear H8; intros.",
            "VernacExtend",
            "d76dd20167ea303b0d2f7d89808c72737b1f6afc"
        ],
        [
            "assert (H10 : b < x0).",
            "VernacExtend",
            "bc1c5d89b63b05f8fc10c8f734012f5b39139743"
        ],
        [
            "apply Ropp_lt_cancel; apply Rplus_lt_reg_l with x; apply Rle_lt_trans with (Rabs (x0 - x)).",
            "VernacExtend",
            "c668808a2c1a74143a78a958d12053bd5c2645d1"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply RRle_abs.",
            "VernacExtend",
            "7011ff8c44bcdbea135883b84f45196054dcd9da"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold h; case (Rle_dec x a) as [Hle|Hnle].",
            "VernacExtend",
            "f825926efefd962106e8821e6defb9845af83a68"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle H4)).",
            "VernacExtend",
            "45b8e3f97925c37469685abefd405044860a6169"
        ],
        [
            "case (Rle_dec x b) as [Hleb|Hnleb].",
            "VernacExtend",
            "849991f47f15fe02f4cb4288b16eb018b200b8f6"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hleb H6)).",
            "VernacExtend",
            "e14481151f7cd748b964bafcf447f681c8b175b4"
        ],
        [
            "case (Rle_dec x0 a) as [Hlea'|Hnlea'].",
            "VernacExtend",
            "c54bad24f459f6ed3c8638b46f6f22de89836887"
        ],
        [
            "elim (Rlt_irrefl _ (Rlt_trans _ _ _ H1 (Rlt_le_trans _ _ _ H10 Hlea'))).",
            "VernacExtend",
            "620bc845d6933804cce17bbebd6c83f3dd8d0a5f"
        ],
        [
            "case (Rle_dec x0 b) as [Hleb'|Hnleb'].",
            "VernacExtend",
            "e9d9d119319692b9f25c18b95efdadbb775de375"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hleb' H10)).",
            "VernacExtend",
            "99da80536c4bc0c9c968b7474207ed615902ac9d"
        ],
        [
            "unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
            "VernacExtend",
            "c1de84b8ec8a6c422226e5ca95d3db00e63bd56e"
        ],
        [
            "intros; elim H3; intros; unfold h; case (Rle_dec c a) as [[|]|].",
            "VernacExtend",
            "82e0590c4d415275c912ed8b053472ec52990604"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 H6)).",
            "VernacExtend",
            "37561721735933854e71d3f78865f095419b2aef"
        ],
        [
            "rewrite H6; reflexivity.",
            "VernacExtend",
            "3228dd2dda9c6408e55e6af3ab3544d4b9aabea8"
        ],
        [
            "case (Rle_dec c b) as [|[]].",
            "VernacExtend",
            "b50b8800e02370c11ef83467263f9bcfbb3c62c2"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "exists (fun _:R => f0 a); split.",
            "VernacExtend",
            "2e5ddcc0707f80174d35ee8a8c3db1408fbc841f"
        ],
        [
            "apply derivable_continuous; apply (derivable_const (f0 a)).",
            "VernacExtend",
            "1a6de3f31b5bb70468841a6e649d1da99e0e43b8"
        ],
        [
            "intros; elim H2; intros; rewrite H1 in H3; cut (b = c).",
            "VernacExtend",
            "8d68816f00111fb043d92224a20716d365984d06"
        ],
        [
            "intro; rewrite <- H5; rewrite H1; reflexivity.",
            "VernacExtend",
            "a6d190bbfb023a9879f524797e29fbb86bbf2a36"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_ab_maj : forall (f:R -> R) (a b:R), a <= b -> (forall c:R, a <= c <= b -> continuity_pt f c) -> exists Mx : R, (forall c:R, a <= c <= b -> f c <= f Mx) /\\ a <= Mx <= b.",
            "VernacStartTheoremProof",
            "cd3eb9c7dae79cbb2eea5616a6d515000bfa55d3"
        ],
        [
            "intros; cut (exists g : R -> R, continuity g /\\ (forall c:R, a <= c <= b -> g c = f0 c)).",
            "VernacExtend",
            "2b3d173314f5d78d77c1ad267cab1486eb4e6dc6"
        ],
        [
            "intro HypProl.",
            "VernacExtend",
            "c66d9d6057d65eb0b73157e3fe9a4eeb73411136"
        ],
        [
            "elim HypProl; intros g Hcont_eq.",
            "VernacExtend",
            "f9819bc8ea821d72d1fc798baed27d2595431b56"
        ],
        [
            "elim Hcont_eq; clear Hcont_eq; intros Hcont Heq.",
            "VernacExtend",
            "dcc3d8cbb3d21d48a6a3d569b6f5408504428b7e"
        ],
        [
            "assert (H1 := compact_P3 a b).",
            "VernacExtend",
            "75250d410be33717be49f460c546deac0cb629a6"
        ],
        [
            "assert (H2 := continuity_compact g (fun c:R => a <= c <= b) Hcont H1).",
            "VernacExtend",
            "2636161e8a43c0c76328e0cbcaf897bd06c9eab6"
        ],
        [
            "assert (H3 := compact_P2 _ H2).",
            "VernacExtend",
            "34018e6073ee976597817ccde5f09af67bcfa8c7"
        ],
        [
            "assert (H4 := compact_P1 _ H2).",
            "VernacExtend",
            "89987e5dc416c856996cffafb159a65600142abc"
        ],
        [
            "cut (bound (image_dir g (fun c:R => a <= c <= b))).",
            "VernacExtend",
            "f679a479599258e1d8df44ff2f6ea67d5f906239"
        ],
        [
            "cut (exists x : R, image_dir g (fun c:R => a <= c <= b) x).",
            "VernacExtend",
            "26e7388fcf3d133ae17ff8090d1ddd27021e0389"
        ],
        [
            "intros; assert (H7 := completeness _ H6 H5).",
            "VernacExtend",
            "536a08a8ed51f0d3e2fd96730e2e54fc99ee51b2"
        ],
        [
            "elim H7; clear H7; intros M H7; cut (image_dir g (fun c:R => a <= c <= b) M).",
            "VernacExtend",
            "3bed11009b912668aac3720426dcc003e7d1f33f"
        ],
        [
            "intro; unfold image_dir in H8; elim H8; clear H8; intros Mxx H8; elim H8; clear H8; intros; exists Mxx; split.",
            "VernacExtend",
            "e4914d65f36fa3e54f61af362eb7490d67c66cf6"
        ],
        [
            "intros; rewrite <- (Heq c H10); rewrite <- (Heq Mxx H9); intros; rewrite <- H8; unfold is_lub in H7; elim H7; clear H7; intros H7 _; unfold is_upper_bound in H7; apply H7; unfold image_dir; exists c; split; [ reflexivity | apply H10 ].",
            "VernacExtend",
            "7454871a59fbe107ea24f2cafb822cf0d9c12c26"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "elim (classic (image_dir g (fun c:R => a <= c <= b) M)); intro.",
            "VernacExtend",
            "a999c3993616531b0676e69796e9f306c8cb4782"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "cut (exists eps : posreal, (forall y:R, ~ intersection_domain (disc M eps) (image_dir g (fun c:R => a <= c <= b)) y)).",
            "VernacExtend",
            "c088413caf3998048c5d3b0b17a7e4b183b42a09"
        ],
        [
            "intro; elim H9; clear H9; intros eps H9; unfold is_lub in H7; elim H7; clear H7; intros; cut (is_upper_bound (image_dir g (fun c:R => a <= c <= b)) (M - eps)).",
            "VernacExtend",
            "9aa309b0ecf6c6ac316a5503b26caa3940c074c2"
        ],
        [
            "intro; assert (H12 := H10 _ H11); cut (M - eps < M).",
            "VernacExtend",
            "338d7f128e92a9cc481284a3bb136844558c1efe"
        ],
        [
            "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H12 H13)).",
            "VernacExtend",
            "243ba5b6369882a40f8dbc6e9152b9671df6c943"
        ],
        [
            "pattern M at 2; rewrite <- Rplus_0_r; unfold Rminus; apply Rplus_lt_compat_l; apply Ropp_lt_cancel; rewrite Ropp_0; rewrite Ropp_involutive; apply (cond_pos eps).",
            "VernacExtend",
            "ef51721cb857cb9961b56c4b2c5662b0a4ce00c2"
        ],
        [
            "unfold is_upper_bound, image_dir; intros; cut (x <= M).",
            "VernacExtend",
            "3a68f8c4a9c559de8a258d50b15e101c6fb0ffeb"
        ],
        [
            "intro; destruct (Rle_dec x (M - eps)) as [H13|].",
            "VernacExtend",
            "81d51b3594c726cf266dc18f6ad2db1e572bf8ca"
        ],
        [
            "apply H13.",
            "VernacExtend",
            "9696b87ee384fc17e17e6c753b792801086b845d"
        ],
        [
            "elim (H9 x); unfold intersection_domain, disc, image_dir; split.",
            "VernacExtend",
            "da5dc216add43c946709ef927d7edd752455eb41"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; rewrite Rabs_right.",
            "VernacExtend",
            "28af265cb96777844e45c6903efc46403046679f"
        ],
        [
            "apply Rplus_lt_reg_l with (x - eps); replace (x - eps + (M - x)) with (M - eps).",
            "VernacExtend",
            "45f643b730fee9d5e874c0d0b9d8ebc78b29ac37"
        ],
        [
            "replace (x - eps + eps) with x.",
            "VernacExtend",
            "5601993f96fd2c5d43e91c2a352e037b7a04de5a"
        ],
        [
            "auto with real.",
            "VernacExtend",
            "2995b59d794585bf85ae99aac74dfded28d91a3e"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "apply Rge_minus; apply Rle_ge; apply H12.",
            "VernacExtend",
            "6fee035d73c5fbdab1cc8da9c3b2f93f6488c97c"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "apply H7; apply H11.",
            "VernacExtend",
            "03bafa283998dc95be690e50f224864b77a979a2"
        ],
        [
            "cut (exists V : R -> Prop, neighbourhood V M /\\ (forall y:R, ~ intersection_domain V (image_dir g (fun c:R => a <= c <= b)) y)).",
            "VernacExtend",
            "a1cfdfa514804a73300e1aa2bb43240cc16c4342"
        ],
        [
            "intro; elim H9; intros V H10; elim H10; clear H10; intros.",
            "VernacExtend",
            "c900e198b2d4f67a9903f88b6aaf3e83969e7529"
        ],
        [
            "unfold neighbourhood in H10; elim H10; intros del H12; exists del; intros; red; intro; elim (H11 y).",
            "VernacExtend",
            "fe39e3e0e19723e8862decf57b7f6d8f9a1c35d2"
        ],
        [
            "unfold intersection_domain; unfold intersection_domain in H13; elim H13; clear H13; intros; split.",
            "VernacExtend",
            "591ceb280d1ee9c7807092782e9233868d8b6714"
        ],
        [
            "apply (H12 _ H13).",
            "VernacExtend",
            "066c49bc35091ad80d0702c01a28ab239c6e057c"
        ],
        [
            "apply H14.",
            "VernacExtend",
            "315c064431a47ec3c8cc41e58a75c8eb749330ef"
        ],
        [
            "cut (~ point_adherent (image_dir g (fun c:R => a <= c <= b)) M).",
            "VernacExtend",
            "4fdb5c3e8ffda93097c8cd80ec659669e2a2b85d"
        ],
        [
            "intro; unfold point_adherent in H9.",
            "VernacExtend",
            "f632bb95bd3df15ec33cd99f7e1a0017c9a3e6fa"
        ],
        [
            "assert (H10 := not_all_ex_not _ (fun V:R -> Prop => neighbourhood V M -> exists y : R, intersection_domain V (image_dir g (fun c:R => a <= c <= b)) y) H9).",
            "VernacExtend",
            "f5f43a7d3f8c35512bface3046f83eb05dcf50f4"
        ],
        [
            "elim H10; intros V0 H11; exists V0; assert (H12 := imply_to_and _ _ H11); elim H12; clear H12; intros.",
            "VernacExtend",
            "8e8440463c2a95351058b9eb5e806a77e01181b6"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply H12.",
            "VernacExtend",
            "5a745b26a30edb1cd58baf290f56d389ba5cf959"
        ],
        [
            "apply (not_ex_all_not _ _ H13).",
            "VernacExtend",
            "befec193a599c6c910ad9dcdd914d5b0430f30af"
        ],
        [
            "red; intro; cut (adherence (image_dir g (fun c:R => a <= c <= b)) M).",
            "VernacExtend",
            "621918d6082eea536ed49e516955ecd8df9d8087"
        ],
        [
            "intro; elim (closed_set_P1 (image_dir g (fun c:R => a <= c <= b))); intros H11 _; assert (H12 := H11 H3).",
            "VernacExtend",
            "3cdfa5b38112244f717a1676c0b1c307fa82d293"
        ],
        [
            "elim H8.",
            "VernacExtend",
            "676ff04537b52f84641f1c66db30e1386f2f595f"
        ],
        [
            "unfold eq_Dom in H12; elim H12; clear H12; intros.",
            "VernacExtend",
            "ff2ab8b5f9ebd712498adf7ebbb8c298cc91ada5"
        ],
        [
            "apply (H13 _ H10).",
            "VernacExtend",
            "58edd4315fcff1106f74502c94ffbc82ac1966b0"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "exists (g a); unfold image_dir; exists a; split.",
            "VernacExtend",
            "f94bf2976737aded3c5b3bbb753e997fffcaa013"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "split; [ right; reflexivity | apply H ].",
            "VernacExtend",
            "f4e9b4979849b723bfbbd93e6eb8a20b69f20992"
        ],
        [
            "unfold bound; unfold bounded in H4; elim H4; clear H4; intros m H4; elim H4; clear H4; intros M H4; exists M; unfold is_upper_bound; intros; elim (H4 _ H5); intros _ H6; apply H6.",
            "VernacExtend",
            "330f87b54bb74a22a860a1288d1b20a4920052e7"
        ],
        [
            "apply prolongement_C0; assumption.",
            "VernacExtend",
            "174750d4332ecce5308c0606f77efaf0f3a76701"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma continuity_ab_min : forall (f:R -> R) (a b:R), a <= b -> (forall c:R, a <= c <= b -> continuity_pt f c) -> exists mx : R, (forall c:R, a <= c <= b -> f mx <= f c) /\\ a <= mx <= b.",
            "VernacStartTheoremProof",
            "e6eaa3ae082b843d42eb49a6f1200df0039d7e45"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut (forall c:R, a <= c <= b -> continuity_pt (- f0) c).",
            "VernacExtend",
            "937db956559588e0c618e1ecaa44eaf2f688d6a9"
        ],
        [
            "intro; assert (H2 := continuity_ab_maj (- f0)%F a b H H1); elim H2; intros x0 H3; exists x0; intros; split.",
            "VernacExtend",
            "abc3193689fc643c6074eb771ff22cff1ee5a246"
        ],
        [
            "intros; rewrite <- (Ropp_involutive (f0 x0)); rewrite <- (Ropp_involutive (f0 c)); apply Ropp_le_contravar; elim H3; intros; unfold opp_fct in H5; apply H5; apply H4.",
            "VernacExtend",
            "0106ce1ee41d792a3ac30050f4da58d80b77275c"
        ],
        [
            "elim H3; intros; assumption.",
            "VernacExtend",
            "f02fb1b822404aba5ff1b686b4c857f74184021e"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H2 := H0 _ H1).",
            "VernacExtend",
            "0cae2b89ded58ec3886ef32244a64eb27f23ba05"
        ],
        [
            "apply (continuity_pt_opp _ _ H2).",
            "VernacExtend",
            "dea61c33da5d35c37968aaacc92779b55c9412e8"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ValAdh (un:nat -> R) (x:R) : Prop := forall (V:R -> Prop) (N:nat), neighbourhood V x -> exists p : nat, (N <= p)%nat /\\ V (un p).",
            "VernacDefinition",
            "2cb72d3cd2418e77d7627b798cd84920045d37ea"
        ],
        [
            "Definition intersection_family (f:family) (x:R) : Prop := forall y:R, ind f y -> f y x.",
            "VernacDefinition",
            "77d86bb35bd7fa5b64b23b9774c0633dcba30025"
        ],
        [
            "Lemma ValAdh_un_exists : forall (un:nat -> R) (D:=fun x:R => exists n : nat, x = INR n) (f:= fun x:R => adherence (fun y:R => (exists p : nat, y = un p /\\ x <= INR p) /\\ D x)) (x:R), (exists y : R, f x y) -> D x.",
            "VernacStartTheoremProof",
            "2d42f3c6ce8afb6a42d120718b5919051e92d28d"
        ],
        [
            "intros; elim H; intros; unfold f in H0; unfold adherence in H0; unfold point_adherent in H0; assert (H1 : neighbourhood (disc x0 (mkposreal _ Rlt_0_1)) x0).",
            "VernacExtend",
            "06a7dd55f3873bd9a4dd645c25782dd121c963d2"
        ],
        [
            "unfold neighbourhood, disc; exists (mkposreal _ Rlt_0_1); unfold included; trivial.",
            "VernacExtend",
            "212cbcf88f5a8e568c3737dd3ce0cf2bb196bd79"
        ],
        [
            "elim (H0 _ H1); intros; unfold intersection_domain in H2; elim H2; intros; elim H4; intros; apply H6.",
            "VernacExtend",
            "8826f174d23ede54e39f01b514fe7b6c3d6a3a48"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition ValAdh_un (un:nat -> R) : R -> Prop := let D := fun x:R => exists n : nat, x = INR n in let f := fun x:R => adherence (fun y:R => (exists p : nat, y = un p /\\ x <= INR p) /\\ D x) in intersection_family (mkfamily D f (ValAdh_un_exists un)).",
            "VernacDefinition",
            "48be1d2d4d5cf696ee287c53d1880242c6a960fc"
        ],
        [
            "Lemma ValAdh_un_prop : forall (un:nat -> R) (x:R), ValAdh un x <-> ValAdh_un un x.",
            "VernacStartTheoremProof",
            "c494f1fdc0059249d9838adb7d195fc2b6e201ab"
        ],
        [
            "intros; split; intro.",
            "VernacExtend",
            "30c96e47a522a77a5351e4399d9dffcbe0777f62"
        ],
        [
            "unfold ValAdh in H; unfold ValAdh_un; unfold intersection_family; simpl; intros; elim H0; intros N H1; unfold adherence; unfold point_adherent; intros; elim (H V N H2); intros; exists (un x0); unfold intersection_domain; elim H3; clear H3; intros; split.",
            "VernacExtend",
            "886f0fbe13db55366bcc05b08879b543cb261b4d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "exists x0; split; [ reflexivity | rewrite H1; apply (le_INR _ _ H3) ].",
            "VernacExtend",
            "c9cdb0bb6eb611d78d420c61da9085e2a7f7b927"
        ],
        [
            "exists N; assumption.",
            "VernacExtend",
            "99776b93e63482deff952d205637531f86fa8715"
        ],
        [
            "unfold ValAdh; intros; unfold ValAdh_un in H; unfold intersection_family in H; simpl in H; assert (H1 : adherence (fun y0:R => (exists p : nat, y0 = un p /\\ INR N <= INR p) /\\ (exists n : nat, INR N = INR n)) x).",
            "VernacExtend",
            "f3e3c58d345edfc2bd2f75e7a3eccbf5652d8395"
        ],
        [
            "apply H; exists N; reflexivity.",
            "VernacExtend",
            "7adecbba46be98639a3d9486647600b2ebb0d1da"
        ],
        [
            "unfold adherence in H1; unfold point_adherent in H1; assert (H2 := H1 _ H0); elim H2; intros; unfold intersection_domain in H3; elim H3; clear H3; intros; elim H4; clear H4; intros; elim H4; clear H4; intros; elim H4; clear H4; intros; exists x1; split.",
            "VernacExtend",
            "499f568c213542659d47dfe019745bee10ae2ad2"
        ],
        [
            "apply (INR_le _ _ H6).",
            "VernacExtend",
            "7aed90410c0e35b07f966de2333d336330abe7c6"
        ],
        [
            "rewrite H4 in H3; apply H3.",
            "VernacExtend",
            "1cb38df4f3ace45012bca492a0196d0f03d0ebb6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma adherence_P4 : forall F G:R -> Prop, included F G -> included (adherence F) (adherence G).",
            "VernacStartTheoremProof",
            "447f446a176a38774556b69d453b8d6e8852f3b2"
        ],
        [
            "unfold adherence, included; unfold point_adherent; intros; elim (H0 _ H1); unfold intersection_domain; intros; elim H2; clear H2; intros; exists x0; split; [ assumption | apply (H _ H3) ].",
            "VernacExtend",
            "3755d05b7ac7a11b31142d02e9483d661845c450"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition family_closed_set (f:family) : Prop := forall x:R, closed_set (f x).",
            "VernacDefinition",
            "7c7f5548644934b9d66eedcf9c7817eb6ca06749"
        ],
        [
            "Definition intersection_vide_in (D:R -> Prop) (f:family) : Prop := forall x:R, (ind f x -> included (f x) D) /\\ ~ (exists y : R, intersection_family f y).",
            "VernacDefinition",
            "af37833e53f7ba13103e9a87ada022f27e1a80a6"
        ],
        [
            "Definition intersection_vide_finite_in (D:R -> Prop) (f:family) : Prop := intersection_vide_in D f /\\ family_finite f.",
            "VernacDefinition",
            "89dda10b3a93837b3c23ea2b2e66964ce848c223"
        ],
        [
            "Lemma compact_P6 : forall X:R -> Prop, compact X -> (exists z : R, X z) -> forall g:family, family_closed_set g -> intersection_vide_in X g -> exists D : R -> Prop, intersection_vide_finite_in X (subfamily g D).",
            "VernacStartTheoremProof",
            "1fc83626629c8401d5531a40f4d7b6c8b2219607"
        ],
        [
            "intros X H Hyp g H0 H1.",
            "VernacExtend",
            "5b988cdd3b11e75b4da451d5ac083f35778b8869"
        ],
        [
            "set (D' := ind g).",
            "VernacExtend",
            "fb2201abe83a28b0f67278a76b140f6a35fffc77"
        ],
        [
            "set (f' := fun x y:R => complementary (g x) y /\\ D' x).",
            "VernacExtend",
            "586a7a10aaf3b03406ce354ffe8595b1e19491a7"
        ],
        [
            "assert (H2 : forall x:R, (exists y : R, f' x y) -> D' x).",
            "VernacExtend",
            "e6fa640eb2653f34af40293b089c95d38f485c05"
        ],
        [
            "intros; elim H2; intros; unfold f' in H3; elim H3; intros; assumption.",
            "VernacExtend",
            "5de225a8d7b5638e784a618e04effb563a64a02f"
        ],
        [
            "set (f0 := mkfamily D' f' H2).",
            "VernacExtend",
            "a0b1d01f86cbc90bcbb1a30714d6e8ae2108a987"
        ],
        [
            "unfold compact in H; assert (H3 : covering_open_set X f0).",
            "VernacExtend",
            "754eafe8e5ed6f8ef1a49fd90604488b75ab21af"
        ],
        [
            "unfold covering_open_set; split.",
            "VernacExtend",
            "1c919de8626e4277fdd15de9bc1f5bc1d8203b10"
        ],
        [
            "unfold covering; intros; unfold intersection_vide_in in H1; elim (H1 x); intros; unfold intersection_family in H5; assert (H6 := not_ex_all_not _ (fun y:R => forall y0:R, ind g y0 -> g y0 y) H5 x); assert (H7 := not_all_ex_not _ (fun y0:R => ind g y0 -> g y0 x) H6); elim H7; intros; exists x0; elim (imply_to_and _ _ H8); intros; unfold f0; simpl; unfold f'; split; [ apply H10 | apply H9 ].",
            "VernacExtend",
            "d2334793bacf34d1cfb8b501f8216b6d2ee85dc7"
        ],
        [
            "unfold family_open_set; intro; elim (classic (D' x)); intro.",
            "VernacExtend",
            "f4e0a065458fd7704eb946beb47c13e1fefb2fab"
        ],
        [
            "apply open_set_P6 with (complementary (g x)).",
            "VernacExtend",
            "6a4abc68ca4716c8a6f6f04c1719dd6cc015035f"
        ],
        [
            "unfold family_closed_set in H0; unfold closed_set in H0; apply H0.",
            "VernacExtend",
            "2f3147e9b56abd5c691e1b19a74274a6fce23075"
        ],
        [
            "unfold f0; simpl; unfold f'; unfold eq_Dom; split.",
            "VernacExtend",
            "99d173cd6561edbb8239ff8eca36023c7d0ac033"
        ],
        [
            "unfold included; intros; split; [ apply H4 | apply H3 ].",
            "VernacExtend",
            "2df71f1a8462440fd9806444155713b90229744c"
        ],
        [
            "unfold included; intros; elim H4; intros; assumption.",
            "VernacExtend",
            "f2b6e0c7a27dd2f6c639f01e30849a8a1e8d3399"
        ],
        [
            "apply open_set_P6 with (fun _:R => False).",
            "VernacExtend",
            "06ff2af164a961dd95dfd1449512720c1bb60f48"
        ],
        [
            "apply open_set_P4.",
            "VernacExtend",
            "0d05350f051b67c090cba40864786f9c9458483b"
        ],
        [
            "unfold eq_Dom; unfold included; split; intros; [ elim H4 | simpl in H4; unfold f' in H4; elim H4; intros; elim H3; assumption ].",
            "VernacExtend",
            "abe68e69e303df8bcea0eb4de6815e3b65e17d14"
        ],
        [
            "elim (H _ H3); intros SF H4; exists SF; unfold intersection_vide_finite_in; split.",
            "VernacExtend",
            "92bf3988dba1652c3a96593b1e186a033b657a80"
        ],
        [
            "unfold intersection_vide_in; simpl; intros; split.",
            "VernacExtend",
            "f8d354f0f9ef51ebd9217357c0de03e3b8be9a45"
        ],
        [
            "intros; unfold included; intros; unfold intersection_vide_in in H1; elim (H1 x); intros; elim H6; intros; apply H7.",
            "VernacExtend",
            "826dc5255669142a3faff541e5de9d54f5bb5328"
        ],
        [
            "unfold intersection_domain in H5; elim H5; intros; assumption.",
            "VernacExtend",
            "944d1d87f378307a407741068d58c24eafc3e8b4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim (classic (exists y : R, intersection_domain (ind g) SF y)); intro Hyp'.",
            "VernacExtend",
            "f0e43cdc014d5911296516120088e9d9771874fc"
        ],
        [
            "red; intro; elim H5; intros; unfold intersection_family in H6; simpl in H6.",
            "VernacExtend",
            "c7156a9af568cb8724169f01ad3ceea20f5abd5b"
        ],
        [
            "cut (X x0).",
            "VernacExtend",
            "84825ac402c18988d5b81825662069a7d455a74c"
        ],
        [
            "intro; unfold covering_finite in H4; elim H4; clear H4; intros H4 _; unfold covering in H4; elim (H4 x0 H7); intros; simpl in H8; unfold intersection_domain in H6; cut (ind g x1 /\\ SF x1).",
            "VernacExtend",
            "f9372a141168e513a17fc1335c60e13eafeacad4"
        ],
        [
            "intro; assert (H10 := H6 x1 H9); elim H10; clear H10; intros H10 _; elim H8; clear H8; intros H8 _; unfold f' in H8; unfold complementary in H8; elim H8; clear H8; intros H8 _; elim H8; assumption.",
            "VernacExtend",
            "b63353eb4a8258aa1759c1243faa0b99de8baaa0"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply (cond_fam f0).",
            "VernacExtend",
            "12d39bd384be05912a08a1826e5612f5593766c8"
        ],
        [
            "exists x0; elim H8; intros; assumption.",
            "VernacExtend",
            "5859c66a6861235677cd77d21cd523e2d27c5a31"
        ],
        [
            "elim H8; intros; assumption.",
            "VernacExtend",
            "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
        ],
        [
            "unfold intersection_vide_in in H1; elim Hyp'; intros; assert (H8 := H6 _ H7); elim H8; intros; cut (ind g x1).",
            "VernacExtend",
            "323a83939628686a5af0b361f0ca5d91ed624f67"
        ],
        [
            "intro; elim (H1 x1); intros; apply H12.",
            "VernacExtend",
            "05c4fbe099c35c10135377d913a89656a6c193a9"
        ],
        [
            "apply H11.",
            "VernacExtend",
            "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "apply (cond_fam g); exists x0; assumption.",
            "VernacExtend",
            "97e707b9c0c2395cb5397acc1700d6a2d1040d13"
        ],
        [
            "unfold covering_finite in H4; elim H4; clear H4; intros H4 _; cut (exists z : R, X z).",
            "VernacExtend",
            "fd9158cb6a842c09bca76a3b5ece7f75ffc1b59f"
        ],
        [
            "intro; elim H5; clear H5; intros; unfold covering in H4; elim (H4 x0 H5); intros; simpl in H6; elim Hyp'; exists x1; elim H6; intros; unfold intersection_domain; split.",
            "VernacExtend",
            "6a52f5c23d897f0ebb1208105ccee4fb7aecf0d1"
        ],
        [
            "apply (cond_fam f0); exists x0; apply H7.",
            "VernacExtend",
            "c5a5088770adcc40e1ef22789a144189d08636a7"
        ],
        [
            "apply H8.",
            "VernacExtend",
            "2014720df0411c2963f20792fe424080d05f44aa"
        ],
        [
            "apply Hyp.",
            "VernacExtend",
            "de6001680dad5327ceb4bc78c14e76d2f7e511ca"
        ],
        [
            "unfold covering_finite in H4; elim H4; clear H4; intros; unfold family_finite in H5; unfold domain_finite in H5; unfold family_finite; unfold domain_finite; elim H5; clear H5; intros l H5; exists l; intro; elim (H5 x); intros; split; intro; [ apply H6; simpl; simpl in H8; apply H8 | apply (H7 H8) ].",
            "VernacExtend",
            "cdfd3fee47b0f2b50c811fc8a09d02d3882b230b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Bolzano_Weierstrass : forall (un:nat -> R) (X:R -> Prop), compact X -> (forall n:nat, X (un n)) -> exists l : R, ValAdh un l.",
            "VernacStartTheoremProof",
            "e1f03a6382ee9525878fe5b351da68e0893bb4fd"
        ],
        [
            "intros; cut (exists l : R, ValAdh_un un l).",
            "VernacExtend",
            "ddb3ce4b789c7c0de1e0268c3c1a30bc2ca528a3"
        ],
        [
            "intro; elim H1; intros; exists x; elim (ValAdh_un_prop un x); intros; apply (H4 H2).",
            "VernacExtend",
            "18c47045068b141a6ac141122227770014f9eafc"
        ],
        [
            "assert (H1 : exists z : R, X z).",
            "VernacExtend",
            "a4b38d22162f738d77939d6812b3d8f4d39e30aa"
        ],
        [
            "exists (un 0%nat); apply H0.",
            "VernacExtend",
            "ef23b35999173e6e5cef56412f3d737bb04ad4d0"
        ],
        [
            "set (D := fun x:R => exists n : nat, x = INR n).",
            "VernacExtend",
            "ab1f4f41492675f85aa72712f907d976d283a7dd"
        ],
        [
            "set (g := fun x:R => adherence (fun y:R => (exists p : nat, y = un p /\\ x <= INR p) /\\ D x)).",
            "VernacExtend",
            "69e618f6c80497cacf8d82f988d85759aac73de1"
        ],
        [
            "assert (H2 : forall x:R, (exists y : R, g x y) -> D x).",
            "VernacExtend",
            "cddd92d8da0caebf6b84a31dc2c9d4c5e5874d6d"
        ],
        [
            "intros; elim H2; intros; unfold g in H3; unfold adherence in H3; unfold point_adherent in H3.",
            "VernacExtend",
            "768d432b7da365469bdb208a1d0ce13d3ea507ac"
        ],
        [
            "assert (H4 : neighbourhood (disc x0 (mkposreal _ Rlt_0_1)) x0).",
            "VernacExtend",
            "5efc2aa1f866e2becabbd8e72af997634fa9ed55"
        ],
        [
            "unfold neighbourhood; exists (mkposreal _ Rlt_0_1); unfold included; trivial.",
            "VernacExtend",
            "886d26b845f6d71452e5145faffcb39b06f5bb7c"
        ],
        [
            "elim (H3 _ H4); intros; unfold intersection_domain in H5; decompose [and] H5; assumption.",
            "VernacExtend",
            "ad9a0fa41e917fefc0927cf87278017b4667c09a"
        ],
        [
            "set (f0 := mkfamily D g H2).",
            "VernacExtend",
            "7f0f4e0dbe2fc11046fd9caabd94022381aac0bb"
        ],
        [
            "assert (H3 := compact_P6 X H H1 f0).",
            "VernacExtend",
            "5bd73aa51ce6b0b491ec9ed413ad5757947e9e20"
        ],
        [
            "elim (classic (exists l : R, ValAdh_un un l)); intro.",
            "VernacExtend",
            "6cd1cff76fe6e2e89d24fb7b9c0462fa6a771932"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "cut (family_closed_set f0).",
            "VernacExtend",
            "565c57a759f67776074be83c8a9129f217bceb8b"
        ],
        [
            "intro; cut (intersection_vide_in X f0).",
            "VernacExtend",
            "73b2db1949337c030314c07e0104affd457f34dd"
        ],
        [
            "intro; assert (H7 := H3 H5 H6).",
            "VernacExtend",
            "d0a191526a4aab1539d73d21bc6382d1325d075b"
        ],
        [
            "elim H7; intros SF H8; unfold intersection_vide_finite_in in H8; elim H8; clear H8; intros; unfold intersection_vide_in in H8; elim (H8 0); intros _ H10; elim H10; unfold family_finite in H9; unfold domain_finite in H9; elim H9; clear H9; intros l H9; set (r := MaxRlist l); cut (D r).",
            "VernacExtend",
            "7280bc16b38b8d9dc2a8b7adb92ce0e3485d878c"
        ],
        [
            "intro; unfold D in H11; elim H11; intros; exists (un x); unfold intersection_family; simpl; unfold intersection_domain; intros; split.",
            "VernacExtend",
            "57bb6b4e1d91b7145396fcf93ca1a0707ef4f83e"
        ],
        [
            "unfold g; apply adherence_P1; split.",
            "VernacExtend",
            "06d52b91f1b56f23666bd1d6a978374f3eacbca4"
        ],
        [
            "exists x; split; [ reflexivity | rewrite <- H12; unfold r; apply MaxRlist_P1; elim (H9 y); intros; apply H14; simpl; apply H13 ].",
            "VernacExtend",
            "b0f75f17e1cc4573a4922918981a00f6a6111ec3"
        ],
        [
            "elim H13; intros; assumption.",
            "VernacExtend",
            "c2834a1647253ee351d960b102c577f0693821cd"
        ],
        [
            "elim H13; intros; assumption.",
            "VernacExtend",
            "c2834a1647253ee351d960b102c577f0693821cd"
        ],
        [
            "elim (H9 r); intros.",
            "VernacExtend",
            "e8d4a1f9c599e82755943efa45024ef13d734d1e"
        ],
        [
            "simpl in H12; unfold intersection_domain in H12; cut (In r l).",
            "VernacExtend",
            "02257f7ca63b184e72504729e457360589aa7bde"
        ],
        [
            "intro; elim (H12 H13); intros; assumption.",
            "VernacExtend",
            "bfafc9b356bec02e0a5904a7c7a7a7dd8db7cee1"
        ],
        [
            "unfold r; apply MaxRlist_P2; cut (exists z : R, intersection_domain (ind f0) SF z).",
            "VernacExtend",
            "2ed6731f0f7fa2ecdc297f09b59bbded561bcd2f"
        ],
        [
            "intro; elim H13; intros; elim (H9 x); intros; simpl in H15; assert (H17 := H15 H14); exists x; apply H17.",
            "VernacExtend",
            "8bed1734af0a6da31db58549ec500d7ae1c55df0"
        ],
        [
            "elim (classic (exists z : R, intersection_domain (ind f0) SF z)); intro.",
            "VernacExtend",
            "54ce2eaa1e772dec207cf313290e1d0d1de4b85a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim (H8 0); intros _ H14; elim H1; intros; assert (H16 := not_ex_all_not _ (fun y:R => intersection_family (subfamily f0 SF) y) H14); assert (H17 := not_ex_all_not _ (fun z:R => intersection_domain (ind f0) SF z) H13); assert (H18 := H16 x); unfold intersection_family in H18; simpl in H18; assert (H19 := not_all_ex_not _ (fun y:R => intersection_domain D SF y -> g y x /\\ SF y) H18); elim H19; intros; assert (H21 := imply_to_and _ _ H20); elim (H17 x0); elim H21; intros; assumption.",
            "VernacExtend",
            "4220c9c320201b517cb6d8a6939ee5a274df1b24"
        ],
        [
            "unfold intersection_vide_in; intros; split.",
            "VernacExtend",
            "9277b9cfb33574a8be2cee1d139b3ba8113071ce"
        ],
        [
            "intro; simpl in H6; unfold f0; simpl; unfold g; apply included_trans with (adherence X).",
            "VernacExtend",
            "a5a0caabf641c8ff5aeef336e15b7c79e724e8ed"
        ],
        [
            "apply adherence_P4.",
            "VernacExtend",
            "4200cf628519fbdd59e1a40c156205352d8162e8"
        ],
        [
            "unfold included; intros; elim H7; intros; elim H8; intros; elim H10; intros; rewrite H11; apply H0.",
            "VernacExtend",
            "2b900d49b5e33a6708ebe66d535d7e434b83874d"
        ],
        [
            "apply adherence_P2; apply compact_P2; assumption.",
            "VernacExtend",
            "facf5bb7ed6ee45c3fe133b1b4c83971ed09551f"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "unfold family_closed_set; unfold f0; simpl; unfold g; intro; apply adherence_P3.",
            "VernacExtend",
            "1edaae72fb4a7a246b324798db747a8efc7ebc19"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition uniform_continuity (f:R -> R) (X:R -> Prop) : Prop := forall eps:posreal, exists delta : posreal, (forall x y:R, X x -> X y -> Rabs (x - y) < delta -> Rabs (f x - f y) < eps).",
            "VernacDefinition",
            "524121cd8037a82ef176228d3548cf7b5aab6131"
        ],
        [
            "Lemma is_lub_u : forall (E:R -> Prop) (x y:R), is_lub E x -> is_lub E y -> x = y.",
            "VernacStartTheoremProof",
            "37331d55a27c0fbf11b7cffee9a881ca3f4c63ca"
        ],
        [
            "unfold is_lub; intros; elim H; elim H0; intros; apply Rle_antisym; [ apply (H4 _ H1) | apply (H2 _ H3) ].",
            "VernacExtend",
            "7170a93704ff4e03abed99dad328917af734e367"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma domain_P1 : forall X:R -> Prop, ~ (exists y : R, X y) \\/ (exists y : R, X y /\\ (forall x:R, X x -> x = y)) \\/ (exists x : R, (exists y : R, X x /\\ X y /\\ x <> y)).",
            "VernacStartTheoremProof",
            "6bff2be7e13875c100faace9e1ba689888b29a6b"
        ],
        [
            "intro; elim (classic (exists y : R, X y)); intro.",
            "VernacExtend",
            "eb1e60ac32bb6f9e242e7870e416fab966bc9b90"
        ],
        [
            "right; elim H; intros; elim (classic (exists y : R, X y /\\ y <> x)); intro.",
            "VernacExtend",
            "8fb4fa566545e11cb5da004cab54bf9c3c885ff4"
        ],
        [
            "right; elim H1; intros; elim H2; intros; exists x; exists x0; intros.",
            "VernacExtend",
            "179fba74a8473a2359cd41b1a7e76d2f4135d15c"
        ],
        [
            "split; [ assumption | split; [ assumption | apply (not_eq_sym (A:=R)); assumption ] ].",
            "VernacExtend",
            "4d2a1f7a0afc19587e44329201ff3d9c187a7303"
        ],
        [
            "left; exists x; split.",
            "VernacExtend",
            "784903fa00f9340ac66c5507dab6f8922d01456d"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "intros; case (Req_dec x0 x); intro.",
            "VernacExtend",
            "4ee2226107684f6c9da91aecb14b5211c23cf34f"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim H1; exists x0; split; assumption.",
            "VernacExtend",
            "b8a3dc880bb00a32f91a0641f636c1fdea6a2ed1"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem Heine : forall (f:R -> R) (X:R -> Prop), compact X -> (forall x:R, X x -> continuity_pt f x) -> uniform_continuity f X.",
            "VernacStartTheoremProof",
            "fadb06e34faa666d032283ec458c5871f7efc85f"
        ],
        [
            "intros f0 X H0 H; elim (domain_P1 X); intro Hyp.",
            "VernacExtend",
            "239a47568ec99e58d3b06a17f3a39af4e6173e9b"
        ],
        [
            "unfold uniform_continuity; intros; exists (mkposreal _ Rlt_0_1); intros; elim Hyp; exists x; assumption.",
            "VernacExtend",
            "d305f035161604262bc78264f03642f52f053133"
        ],
        [
            "elim Hyp; clear Hyp; intro Hyp.",
            "VernacExtend",
            "280a181c4f7dab80268f55d4f3a1a955364fab1d"
        ],
        [
            "unfold uniform_continuity; intros; exists (mkposreal _ Rlt_0_1); intros; elim Hyp; clear Hyp; intros; elim H4; clear H4; intros; assert (H6 := H5 _ H1); assert (H7 := H5 _ H2); rewrite H6; rewrite H7; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (cond_pos eps).",
            "VernacExtend",
            "a21c3e600013aeb3981c6670619c7742d7248471"
        ],
        [
            "assert (X_enc : exists m : R, (exists M : R, (forall x:R, X x -> m <= x <= M) /\\ m < M)).",
            "VernacExtend",
            "6a38e8a4f6971214c441f81e154ed325c085e7e1"
        ],
        [
            "assert (H1 := compact_P1 X H0); unfold bounded in H1; elim H1; intros; elim H2; intros; exists x; exists x0; split.",
            "VernacExtend",
            "a5df7aebc504a7b40eaa8048d6a7ed65d7b24c69"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "elim Hyp; intros; elim H4; intros; decompose [and] H5; assert (H10 := H3 _ H6); assert (H11 := H3 _ H8); elim H10; intros; elim H11; intros; destruct (total_order_T x x0) as [[|H15]|H15].",
            "VernacExtend",
            "40eb0490a466320878f8b6e3aa60cbaaafd8fe75"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "rewrite H15 in H13, H7; elim H9; apply Rle_antisym; apply Rle_trans with x0; assumption.",
            "VernacExtend",
            "11c902030847c407c422420d2762ad7a5888c3a9"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ (Rle_trans _ _ _ H13 H14) H15)).",
            "VernacExtend",
            "2be236854e87d16dbfe8016a772cde8002bda149"
        ],
        [
            "elim X_enc; clear X_enc; intros m X_enc; elim X_enc; clear X_enc; intros M X_enc; elim X_enc; clear X_enc Hyp; intros X_enc Hyp; unfold uniform_continuity; intro; assert (H1 : forall t:posreal, 0 < t / 2).",
            "VernacExtend",
            "1bdbb6d2dcb175763fa9e7b7b8704c5286cc28a6"
        ],
        [
            "intro; unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos t) | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "6a69f2dcd0cc37e9f5a67e2d27186e721d99d36a"
        ],
        [
            "set (g := fun x y:R => X x /\\ (exists del : posreal, (forall z:R, Rabs (z - x) < del -> Rabs (f0 z - f0 x) < eps / 2) /\\ is_lub (fun zeta:R => 0 < zeta <= M - m /\\ (forall z:R, Rabs (z - x) < zeta -> Rabs (f0 z - f0 x) < eps / 2)) del /\\ disc x (mkposreal (del / 2) (H1 del)) y)).",
            "VernacExtend",
            "85cad3484d9c622230e93fb9c6e11303cc2102a8"
        ],
        [
            "assert (H2 : forall x:R, (exists y : R, g x y) -> X x).",
            "VernacExtend",
            "ff0ea97f867486c81cc6829a7cb742c604eb05c1"
        ],
        [
            "intros; elim H2; intros; unfold g in H3; elim H3; clear H3; intros H3 _; apply H3.",
            "VernacExtend",
            "3d64a8c7979bfc25a53842e786dce58fba23b7e0"
        ],
        [
            "set (f' := mkfamily X g H2); unfold compact in H0; assert (H3 : covering_open_set X f').",
            "VernacExtend",
            "b82a2aa1484bcc7301fef5692857581c0799f89f"
        ],
        [
            "unfold covering_open_set; split.",
            "VernacExtend",
            "1c919de8626e4277fdd15de9bc1f5bc1d8203b10"
        ],
        [
            "unfold covering; intros; exists x; simpl; unfold g; split.",
            "VernacExtend",
            "4f94210597025b168a02963ff4f8c5c35d2a22dc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H4 := H _ H3); unfold continuity_pt in H4; unfold continue_in in H4; unfold limit1_in in H4; unfold limit_in in H4; simpl in H4; unfold R_dist in H4; elim (H4 (eps / 2) (H1 eps)); intros; set (E := fun zeta:R => 0 < zeta <= M - m /\\ (forall z:R, Rabs (z - x) < zeta -> Rabs (f0 z - f0 x) < eps / 2)); assert (H6 : bound E).",
            "VernacExtend",
            "0f361f3c5f21837845048d1a1f3c2b9b553dace1"
        ],
        [
            "unfold bound; exists (M - m); unfold is_upper_bound; unfold E; intros; elim H6; clear H6; intros H6 _; elim H6; clear H6; intros _ H6; apply H6.",
            "VernacExtend",
            "686347cede72bf7d8c0d63c50938cd70de86ba5c"
        ],
        [
            "assert (H7 : exists x : R, E x).",
            "VernacExtend",
            "65adfe9fd70069e30ef9c2e724fbf854e43d9fd9"
        ],
        [
            "elim H5; clear H5; intros; exists (Rmin x0 (M - m)); unfold E; intros; split.",
            "VernacExtend",
            "111106dcf243316a7911ba4f0fbb3ee0452cc8ea"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold Rmin; case (Rle_dec x0 (M - m)); intro.",
            "VernacExtend",
            "9425e8931e8ee8fde7c7f33491f6772ccf67e130"
        ],
        [
            "apply H5.",
            "VernacExtend",
            "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
        ],
        [
            "apply Rlt_Rminus; apply Hyp.",
            "VernacExtend",
            "6c530fd9418c96ed327ce5df41f238208c5343ea"
        ],
        [
            "apply Rmin_r.",
            "VernacExtend",
            "d165954e4d055817b42cbc8960efd3fee45e4f16"
        ],
        [
            "intros; case (Req_dec x z); intro.",
            "VernacExtend",
            "4e536ae90c3e8c24f9886ee260f1eba2845d9243"
        ],
        [
            "rewrite H9; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (H1 eps).",
            "VernacExtend",
            "3a5b138ae65ff03d5c003d4cea681ce42c2c630e"
        ],
        [
            "apply H7; split.",
            "VernacExtend",
            "ff42b69e742d12e283f08d117a50e1dfc20db03d"
        ],
        [
            "unfold D_x, no_cond; split; [ trivial | assumption ].",
            "VernacExtend",
            "1e8e1f2eda60bd5a74d56852a21b1a4b91623026"
        ],
        [
            "apply Rlt_le_trans with (Rmin x0 (M - m)); [ apply H8 | apply Rmin_l ].",
            "VernacExtend",
            "33584059dfd1cf30185ab420693dded31bdf09d2"
        ],
        [
            "destruct (completeness _ H6 H7) as (x1,p).",
            "VernacExtend",
            "60306a63bbcdb49b1e9a9e43d6d95a76a8a5a9ca"
        ],
        [
            "cut (0 < x1 <= M - m).",
            "VernacExtend",
            "0611fa50d49a8fbda9a4767ada1641f21c0c2ea1"
        ],
        [
            "intros (H8,H9); exists (mkposreal _ H8); split.",
            "VernacExtend",
            "460c58528977b949c6e6d66fe830d434e5a7edab"
        ],
        [
            "intros; cut (exists alp : R, Rabs (z - x) < alp <= x1 /\\ E alp).",
            "VernacExtend",
            "d862f5df92c059840bfd5ac29785d7be8e27d9cf"
        ],
        [
            "intros; elim H11; intros; elim H12; clear H12; intros; unfold E in H13; elim H13; intros; apply H15.",
            "VernacExtend",
            "ec8f1fcad70368ae2381a621c109372f1b9b7229"
        ],
        [
            "elim H12; intros; assumption.",
            "VernacExtend",
            "64214aa4f2998658a38bee071de5006227dc21f0"
        ],
        [
            "elim (classic (exists alp : R, Rabs (z - x) < alp <= x1 /\\ E alp)); intro.",
            "VernacExtend",
            "3b2dd4d76752ed28cb0e40dc1481e6274e9b1bd4"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H12 := not_ex_all_not _ (fun alp:R => Rabs (z - x) < alp <= x1 /\\ E alp) H11); unfold is_lub in p; elim p; intros; cut (is_upper_bound E (Rabs (z - x))).",
            "VernacExtend",
            "3d683602a6b5e661ea573ad2ac80a127f2ad899e"
        ],
        [
            "intro; assert (H16 := H14 _ H15); elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H10 H16)).",
            "VernacExtend",
            "f854f1175afb7f65d9e7f3bab14506a15befaf0c"
        ],
        [
            "unfold is_upper_bound; intros; unfold is_upper_bound in H13; assert (H16 := H13 _ H15); case (Rle_dec x2 (Rabs (z - x))); intro.",
            "VernacExtend",
            "e519b38eead159e638a3192707edc9ce507f6fb5"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim (H12 x2); split; [ split; [ auto with real | assumption ] | assumption ].",
            "VernacExtend",
            "3060d783a595de61cb0e3984f110b30eadb160a9"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply p.",
            "VernacExtend",
            "5d7bd2c81be5e2631c5ccceda06a4542d9bac4b6"
        ],
        [
            "unfold disc; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; simpl; unfold Rdiv; apply Rmult_lt_0_compat; [ apply H8 | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "c0081d97ae49bd15c24a59b866b6fa86cd8db29d"
        ],
        [
            "elim H7; intros; unfold E in H8; elim H8; intros H9 _; elim H9; intros H10 _; unfold is_lub in p; elim p; intros; unfold is_upper_bound in H12; unfold is_upper_bound in H11; split.",
            "VernacExtend",
            "1c6875633b549c3c08a789b1a29bb1fe280b1fc7"
        ],
        [
            "apply Rlt_le_trans with x2; [ assumption | apply (H11 _ H8) ].",
            "VernacExtend",
            "8a35cc1e3fe7fd5df9b078aeaf822f64f1bea0b1"
        ],
        [
            "apply H12; intros; unfold E in H13; elim H13; intros; elim H14; intros; assumption.",
            "VernacExtend",
            "0290c477181e89154b56d2da47d06f9a9ad8bd55"
        ],
        [
            "unfold family_open_set; intro; simpl; elim (classic (X x)); intro.",
            "VernacExtend",
            "0ec42b429d1d83ca11cf0cc81293363939bbb4ce"
        ],
        [
            "unfold g; unfold open_set; intros; elim H4; clear H4; intros _ H4; elim H4; clear H4; intros; elim H4; clear H4; intros; unfold neighbourhood; case (Req_dec x x0); intro.",
            "VernacExtend",
            "2976a17c0d5b9a00e72f891ca5df20908672d332"
        ],
        [
            "exists (mkposreal _ (H1 x1)); rewrite <- H6; unfold included; intros; split.",
            "VernacExtend",
            "ff27516d3c400c959890a1f1a07b75f3c30d9fca"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "exists x1; split.",
            "VernacExtend",
            "0c49c7068da15fd08bc28326f22dd02b6edbe25c"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "elim H5; intros; apply H8.",
            "VernacExtend",
            "4a9537345b280c69d09d492fa77c821d6abe0024"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "set (d := x1 / 2 - Rabs (x0 - x)); assert (H7 : 0 < d).",
            "VernacExtend",
            "768356d0af8e22c6d803da7c6552c52cf2ad43bb"
        ],
        [
            "unfold d; apply Rlt_Rminus; elim H5; clear H5; intros; unfold disc in H7; apply H7.",
            "VernacExtend",
            "e8da5265576705aad898f8bd80999e7f2564819c"
        ],
        [
            "exists (mkposreal _ H7); unfold included; intros; split.",
            "VernacExtend",
            "d47924cfa7de54d8255a5154638fab2f5a8e362a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "exists x1; split.",
            "VernacExtend",
            "0c49c7068da15fd08bc28326f22dd02b6edbe25c"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "elim H5; intros; split.",
            "VernacExtend",
            "a49228dd27ebf3468089a9ce666330be628a27dc"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold disc in H8; simpl in H8; unfold disc; simpl; unfold disc in H10; simpl in H10; apply Rle_lt_trans with (Rabs (x2 - x0) + Rabs (x0 - x)).",
            "VernacExtend",
            "4915f69ade1ce15a5e8180103490065ece12c88a"
        ],
        [
            "replace (x2 - x) with (x2 - x0 + (x0 - x)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "c6109855d36fbfa37e960cbdb8bfbbffee5fe8f8"
        ],
        [
            "replace (x1 / 2) with (d + Rabs (x0 - x)); [ idtac | unfold d; ring ].",
            "VernacExtend",
            "65b39be696cdc29ed8ccec233c11729ad07778f3"
        ],
        [
            "do 2 rewrite <- (Rplus_comm (Rabs (x0 - x))); apply Rplus_lt_compat_l; apply H8.",
            "VernacExtend",
            "83ba3cac407573d905a9a64faf0331ade7cddd8c"
        ],
        [
            "apply open_set_P6 with (fun _:R => False).",
            "VernacExtend",
            "06ff2af164a961dd95dfd1449512720c1bb60f48"
        ],
        [
            "apply open_set_P4.",
            "VernacExtend",
            "0d05350f051b67c090cba40864786f9c9458483b"
        ],
        [
            "unfold eq_Dom; unfold included; intros; split.",
            "VernacExtend",
            "391454dba53eaf32e988dd652e5c9eb4a6235c4c"
        ],
        [
            "intros; elim H4.",
            "VernacExtend",
            "d89590d3a809f3c036b206a409f871dbb7c44a98"
        ],
        [
            "intros; unfold g in H4; elim H4; clear H4; intros H4 _; elim H3; apply H4.",
            "VernacExtend",
            "b9d29f0184ad966765fbb01824a499c4da6c74b4"
        ],
        [
            "elim (H0 _ H3); intros DF H4; unfold covering_finite in H4; elim H4; clear H4; intros; unfold family_finite in H5; unfold domain_finite in H5; unfold covering in H4; simpl in H4; simpl in H5; elim H5; clear H5; intros l H5; unfold intersection_domain in H5; cut (forall x:R, In x l -> exists del : R, 0 < del /\\ (forall z:R, Rabs (z - x) < del -> Rabs (f0 z - f0 x) < eps / 2) /\\ included (g x) (fun z:R => Rabs (z - x) < del / 2)).",
            "VernacExtend",
            "2ef89d85d936a66b4c060557cc0e67cb0eac87ef"
        ],
        [
            "intros; assert (H7 := Rlist_P1 l (fun x del:R => 0 < del /\\ (forall z:R, Rabs (z - x) < del -> Rabs (f0 z - f0 x) < eps / 2) /\\ included (g x) (fun z:R => Rabs (z - x) < del / 2)) H6); elim H7; clear H7; intros l' H7; elim H7; clear H7; intros; set (D := MinRlist l'); cut (0 < D / 2).",
            "VernacExtend",
            "16ea3b4c6940c858dc9726b8658ace6eed498a31"
        ],
        [
            "intro; exists (mkposreal _ H9); intros; assert (H13 := H4 _ H10); elim H13; clear H13; intros xi H13; assert (H14 : In xi l).",
            "VernacExtend",
            "31b9e351a342c51aae0b23b672d60683c59c9130"
        ],
        [
            "unfold g in H13; decompose [and] H13; elim (H5 xi); intros; apply H14; split; assumption.",
            "VernacExtend",
            "8973d28efd5fb122b1611c98a9fdd1bfa570e7b6"
        ],
        [
            "elim (pos_Rl_P2 l xi); intros H15 _; elim (H15 H14); intros i H16; elim H16; intros; apply Rle_lt_trans with (Rabs (f0 x - f0 xi) + Rabs (f0 xi - f0 y)).",
            "VernacExtend",
            "d7571e1f02d31653e0c3ec87704fa661ff121a25"
        ],
        [
            "replace (f0 x - f0 y) with (f0 x - f0 xi + (f0 xi - f0 y)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "269e07ebeda62ce4b410fb4547200d922adfc6ae"
        ],
        [
            "rewrite (double_var eps); apply Rplus_lt_compat.",
            "VernacExtend",
            "dd3002897582f3251627e3b8fbd0c2a8c471071b"
        ],
        [
            "assert (H19 := H8 i H17); elim H19; clear H19; intros; rewrite <- H18 in H20; elim H20; clear H20; intros; apply H20; unfold included in H21; apply Rlt_trans with (pos_Rl l' i / 2).",
            "VernacExtend",
            "d2b0b23ff2f6f58b323e5e258785ccf6f014fac3"
        ],
        [
            "apply H21.",
            "VernacExtend",
            "36b37af04ba5a6c29b8e8ce4f4b7717028c02ecc"
        ],
        [
            "elim H13; clear H13; intros; assumption.",
            "VernacExtend",
            "8d4e3b2a8090097612d5b9adfe074bbdc30f8699"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "f4c0b06c2efd971a65fcd955cb283b1e333171b1"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "rewrite Rmult_comm; rewrite Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "78f6b373c44c32f7c5a49d74d07397675a0e4650"
        ],
        [
            "rewrite Rmult_1_r; pattern (pos_Rl l' i) at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; apply H19.",
            "VernacExtend",
            "5ba611ff7fb42270c15216d33a8cd1b745dc96bc"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "assert (H19 := H8 i H17); elim H19; clear H19; intros; rewrite <- H18 in H20; elim H20; clear H20; intros; rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H20; unfold included in H21; elim H13; intros; assert (H24 := H21 x H22); apply Rle_lt_trans with (Rabs (y - x) + Rabs (x - xi)).",
            "VernacExtend",
            "9813487761f4b78a10e402fba50aae4185e91496"
        ],
        [
            "replace (y - xi) with (y - x + (x - xi)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "eb465ad452aa55c021a22c1da6996009cbe3b6a4"
        ],
        [
            "rewrite (double_var (pos_Rl l' i)); apply Rplus_lt_compat.",
            "VernacExtend",
            "574c73d2f3b0fc061e4247d4e76a2f99472d333a"
        ],
        [
            "apply Rlt_le_trans with (D / 2).",
            "VernacExtend",
            "f8c0b664f1badf742f2ea981dd0034126ef67fab"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H12.",
            "VernacExtend",
            "951d3d1b149c6e6916767c06f473f77eed935067"
        ],
        [
            "unfold Rdiv; do 2 rewrite <- (Rmult_comm (/ 2)); apply Rmult_le_compat_l.",
            "VernacExtend",
            "f055f2f01fb8579ff777e7aa072c06301392bb3b"
        ],
        [
            "left; apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "fc25f088c7eb945b25a6fd912d0d79ce4330ae4c"
        ],
        [
            "unfold D; apply MinRlist_P1; elim (pos_Rl_P2 l' (pos_Rl l' i)); intros; apply H26; exists i; split; [ rewrite <- H7; assumption | reflexivity ].",
            "VernacExtend",
            "818e052250fddb20a667276d7aed198e746026ca"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ unfold D; apply MinRlist_P2; intros; elim (pos_Rl_P2 l' y); intros; elim (H10 H9); intros; elim H12; intros; rewrite H14; rewrite <- H7 in H13; elim (H8 x H13); intros; apply H15 | apply Rinv_0_lt_compat; prove_sup0 ].",
            "VernacExtend",
            "9f76468429078fc457755eade53aaf2981349265"
        ],
        [
            "intros; elim (H5 x); intros; elim (H8 H6); intros; set (E := fun zeta:R => 0 < zeta <= M - m /\\ (forall z:R, Rabs (z - x) < zeta -> Rabs (f0 z - f0 x) < eps / 2)); assert (H11 : bound E).",
            "VernacExtend",
            "05761c74a28916b6f17d0c7c1a0e9689e4aef6c8"
        ],
        [
            "unfold bound; exists (M - m); unfold is_upper_bound; unfold E; intros; elim H11; clear H11; intros H11 _; elim H11; clear H11; intros _ H11; apply H11.",
            "VernacExtend",
            "c7b6b8aab3fcf64cdb8da65163963fd6e28cbfd5"
        ],
        [
            "assert (H12 : exists x : R, E x).",
            "VernacExtend",
            "0289997f8cdd5f4b30c66648a1bc772d5b5e5ab2"
        ],
        [
            "assert (H13 := H _ H9); unfold continuity_pt in H13; unfold continue_in in H13; unfold limit1_in in H13; unfold limit_in in H13; simpl in H13; unfold R_dist in H13; elim (H13 _ (H1 eps)); intros; elim H12; clear H12; intros; exists (Rmin x0 (M - m)); unfold E; intros; split.",
            "VernacExtend",
            "a80cd619725a8a16847190ff989370123c4901ae"
        ],
        [
            "split; [ unfold Rmin; case (Rle_dec x0 (M - m)); intro; [ apply H12 | apply Rlt_Rminus; apply Hyp ] | apply Rmin_r ].",
            "VernacExtend",
            "c8bb717d05d3aa8599047940a9ab297a03b27589"
        ],
        [
            "intros; case (Req_dec x z); intro.",
            "VernacExtend",
            "4e536ae90c3e8c24f9886ee260f1eba2845d9243"
        ],
        [
            "rewrite H16; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (H1 eps).",
            "VernacExtend",
            "f6d5cbf36aa4264bb06d55f0b422ef55c1d5be4c"
        ],
        [
            "apply H14; split; [ unfold D_x, no_cond; split; [ trivial | assumption ] | apply Rlt_le_trans with (Rmin x0 (M - m)); [ apply H15 | apply Rmin_l ] ].",
            "VernacExtend",
            "abaffdc940e363f4094efc7a58613a48fda03cf6"
        ],
        [
            "destruct (completeness _ H11 H12) as (x0,p).",
            "VernacExtend",
            "77f51dbb5e3d6c67345188100e8ffc6a35694389"
        ],
        [
            "cut (0 < x0 <= M - m).",
            "VernacExtend",
            "878134da634ab03d195d8a7864189be8540b7bee"
        ],
        [
            "intro; elim H13; clear H13; intros; exists x0; split.",
            "VernacExtend",
            "92c19794ead0dc4257583f263fdc1d67e2582981"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "intros; cut (exists alp : R, Rabs (z - x) < alp <= x0 /\\ E alp).",
            "VernacExtend",
            "2d81e2ad5eba8e86f750f65c2e259f384f5957d5"
        ],
        [
            "intros; elim H16; intros; elim H17; clear H17; intros; unfold E in H18; elim H18; intros; apply H20; elim H17; intros; assumption.",
            "VernacExtend",
            "150a5917a1d2299522c86a4eabd456411970e8b6"
        ],
        [
            "elim (classic (exists alp : R, Rabs (z - x) < alp <= x0 /\\ E alp)); intro.",
            "VernacExtend",
            "4063c30bee7fe8da3f665c956b90b00d90c02143"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "assert (H17 := not_ex_all_not _ (fun alp:R => Rabs (z - x) < alp <= x0 /\\ E alp) H16); unfold is_lub in p; elim p; intros; cut (is_upper_bound E (Rabs (z - x))).",
            "VernacExtend",
            "000c8344db5060a371897ab7994c7c60fcccc444"
        ],
        [
            "intro; assert (H21 := H19 _ H20); elim (Rlt_irrefl _ (Rlt_le_trans _ _ _ H15 H21)).",
            "VernacExtend",
            "b12ad6d55e29514777c556b2e623b72e85035678"
        ],
        [
            "unfold is_upper_bound; intros; unfold is_upper_bound in H18; assert (H21 := H18 _ H20); case (Rle_dec x1 (Rabs (z - x))); intro.",
            "VernacExtend",
            "e97dca209745fcba32c5862175579417aed771f9"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim (H17 x1); split.",
            "VernacExtend",
            "ac9d1a3dfc062c7f81d3e6d52404f9937a9d2d4e"
        ],
        [
            "split; [ auto with real | assumption ].",
            "VernacExtend",
            "574f418f50fe1040dc7ca92ea9f48020d7e64551"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold included, g; intros; elim H15; intros; elim H17; intros; decompose [and] H18; cut (x0 = x2).",
            "VernacExtend",
            "c0645b20a22b595d307880cd1a7508ea8a23db9f"
        ],
        [
            "intro; rewrite H20; apply H22.",
            "VernacExtend",
            "d280d968d4348c844938d16a48fa00d823b5e566"
        ],
        [
            "unfold E in p; eapply is_lub_u.",
            "VernacExtend",
            "cf62cd830ad9c7f706262ed529589ee177e8d288"
        ],
        [
            "apply p.",
            "VernacExtend",
            "5d7bd2c81be5e2631c5ccceda06a4542d9bac4b6"
        ],
        [
            "apply H21.",
            "VernacExtend",
            "36b37af04ba5a6c29b8e8ce4f4b7717028c02ecc"
        ],
        [
            "elim H12; intros; unfold E in H13; elim H13; intros H14 _; elim H14; intros H15 _; unfold is_lub in p; elim p; intros; unfold is_upper_bound in H16; unfold is_upper_bound in H17; split.",
            "VernacExtend",
            "d74f55904f5a6a77c39d1963568d9f7231708728"
        ],
        [
            "apply Rlt_le_trans with x1; [ assumption | apply (H16 _ H13) ].",
            "VernacExtend",
            "84c8e44a86d94daab69827293249a24f1a0a26d7"
        ],
        [
            "apply H17; intros; unfold E in H18; elim H18; intros; elim H19; intros; assumption.",
            "VernacExtend",
            "d4390b47861f334e0b72d7f75627a5c3aa5ac06b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "interior_P1",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros; unfold included; unfold interior; intros; unfold neighbourhood in H; elim H; intros; unfold included in H0; apply H0; unfold disc; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (cond_pos x0).",
                        "VernacExtend",
                        "4f73a5b423383cfcb9877a8439dfe34106b1d9cd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "interior_P2",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intros; unfold open_set in H; unfold included; intros; assert (H1 := H _ H0); unfold interior; apply H1.",
                        "VernacExtend",
                        "2bd5455a20d044e8fd4218f52265e4037452f464"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adherence_P1",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "intro; unfold included; intros; unfold adherence; unfold point_adherent; intros; exists x; unfold intersection_domain; split.",
                        "VernacExtend",
                        "a08f1adb63cc6bd6d741b5ca2f2bfbb10bc7a878"
                    ]
                },
                {
                    "command": [
                        "unfold neighbourhood in H0; elim H0; intros; unfold included in H1; apply H1; unfold disc; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (cond_pos x0).",
                        "VernacExtend",
                        "1ba2390623b1ce317a66a62176bad4e72181e50f"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "included_trans",
            "line_nb": 29,
            "steps": [
                {
                    "command": [
                        "unfold included; intros; apply H0; apply H; apply H1.",
                        "VernacExtend",
                        "56ffdea1bfe1edb4534ba2a500b40ecdd7c07088"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "interior_P3",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "intro; unfold open_set, interior; unfold neighbourhood; intros; elim H; intros.",
                        "VernacExtend",
                        "0c75f62df7b961a7b922d70e22a50450a3c354ec"
                    ]
                },
                {
                    "command": [
                        "exists x0; unfold included; intros.",
                        "VernacExtend",
                        "f63ce33dc8b7c12f2805aca0cb2b7c9614bc4fe4"
                    ]
                },
                {
                    "command": [
                        "set (del := x0 - Rabs (x - x1)).",
                        "VernacExtend",
                        "eb6be60f36326bdb123f1b177155b39f17ba5303"
                    ]
                },
                {
                    "command": [
                        "cut (0 < del).",
                        "VernacExtend",
                        "a9cbfc22eec21b4b9e55c2bfcbc783b3515494ab"
                    ]
                },
                {
                    "command": [
                        "intro; exists (mkposreal del H2); intros.",
                        "VernacExtend",
                        "9dca3e1440c7249c4216462d85cca7a6ea243b75"
                    ]
                },
                {
                    "command": [
                        "cut (included (disc x1 (mkposreal del H2)) (disc x x0)).",
                        "VernacExtend",
                        "8816cbf059dd40d430b7d6edd19b915fd2f0569e"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H5 := included_trans _ _ _ H4 H0).",
                        "VernacExtend",
                        "ef16c525e64f715e5446c3203fc37e98e14aad17"
                    ]
                },
                {
                    "command": [
                        "apply H5; apply H3.",
                        "VernacExtend",
                        "1ee78c0f603ffadf380aa3183dad14053ceedffc"
                    ]
                },
                {
                    "command": [
                        "unfold included; unfold disc; intros.",
                        "VernacExtend",
                        "d1e34d8ebce63e62c4cbd9db1a7ed6f213f5de08"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (x3 - x1) + Rabs (x1 - x)).",
                        "VernacExtend",
                        "b8a75799050071f9bff96f04fd449bfd069789df"
                    ]
                },
                {
                    "command": [
                        "replace (x3 - x) with (x3 - x1 + (x1 - x)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "9c67fbbc003624229ba02ac584e7611a24351c5f"
                    ]
                },
                {
                    "command": [
                        "replace (pos x0) with (del + Rabs (x1 - x)).",
                        "VernacExtend",
                        "e94af4fa008719b9382f9fdef7eae62cc4e99783"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rplus_comm (Rabs (x1 - x))); apply Rplus_lt_compat_l; apply H4.",
                        "VernacExtend",
                        "6314e171cc89b50b857366e141be190f76061231"
                    ]
                },
                {
                    "command": [
                        "unfold del; rewrite <- (Rabs_Ropp (x - x1)); rewrite Ropp_minus_distr; ring.",
                        "VernacExtend",
                        "629d5024a76b964e4d5563e60c49c833ebe287e0"
                    ]
                },
                {
                    "command": [
                        "unfold del; apply Rplus_lt_reg_l with (Rabs (x - x1)); rewrite Rplus_0_r; replace (Rabs (x - x1) + (x0 - Rabs (x - x1))) with (pos x0); [ idtac | ring ].",
                        "VernacExtend",
                        "9b04d513f40a892e93ed2181694a0734d845c8c2"
                    ]
                },
                {
                    "command": [
                        "unfold disc in H1; rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H1.",
                        "VernacExtend",
                        "f7a3a1141fe57fd98d10b665f0f5ed3b38e38447"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "complementary_P1",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "intro; red; intro; elim H; intros; unfold intersection_domain, complementary in H0; elim H0; intros; elim H2; assumption.",
                        "VernacExtend",
                        "dfb44e61fef57f9abc816c0f6c229e3a6e2dba47"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adherence_P2",
            "line_nb": 53,
            "steps": [
                {
                    "command": [
                        "unfold closed_set; unfold open_set, complementary; intros; unfold included, adherence; intros; assert (H1 := classic (D x)); elim H1; intro.",
                        "VernacExtend",
                        "e11f8a1ecd465f65694f865b2e25531cd24e6f89"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := H _ H2); assert (H4 := H0 _ H3); elim H4; intros; unfold intersection_domain in H5; elim H5; intros; elim H6; assumption.",
                        "VernacExtend",
                        "531715289bb5e7fdb9dcf5e8e989db58be50fe18"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "open_set_P1",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intro; split.",
                        "VernacExtend",
                        "fab266bb307ddec4a6ab91d7f2efd84a9c1736ef"
                    ]
                },
                {
                    "command": [
                        "intro; unfold eq_Dom; split.",
                        "VernacExtend",
                        "59f9e93718ec0d9211b09218f6073405fa244cd2"
                    ]
                },
                {
                    "command": [
                        "apply interior_P2; assumption.",
                        "VernacExtend",
                        "b73be87f747c739210d9ee480e36316fa0cd43ca"
                    ]
                },
                {
                    "command": [
                        "apply interior_P1.",
                        "VernacExtend",
                        "2443ee16fd451397f4bbb421ed584d398a93fdb4"
                    ]
                },
                {
                    "command": [
                        "intro; unfold eq_Dom in H; elim H; clear H; intros; unfold open_set; intros; unfold included, interior in H; unfold included in H0; apply (H _ H1).",
                        "VernacExtend",
                        "c0aed064f3e7a523ea8dc94365357ff2d03c866a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "closed_set_P1",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "intro; split.",
                        "VernacExtend",
                        "fab266bb307ddec4a6ab91d7f2efd84a9c1736ef"
                    ]
                },
                {
                    "command": [
                        "intro; unfold eq_Dom; split.",
                        "VernacExtend",
                        "59f9e93718ec0d9211b09218f6073405fa244cd2"
                    ]
                },
                {
                    "command": [
                        "apply adherence_P1.",
                        "VernacExtend",
                        "cb9b75b28db1ff25e5fc5dbd77f191671d8b17a8"
                    ]
                },
                {
                    "command": [
                        "apply adherence_P2; assumption.",
                        "VernacExtend",
                        "9fd3f3220cd8bbda00e39f89a2598f5597ae4fce"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; unfold included; intros; assert (H0 := adherence_P3 D); unfold closed_set in H0; unfold closed_set; unfold open_set; unfold open_set in H0; intros; assert (H2 : complementary (adherence D) x).",
                        "VernacExtend",
                        "4bf0ee213c0eb4df284c54a2d15398a45abae8e2"
                    ]
                },
                {
                    "command": [
                        "unfold complementary; unfold complementary in H1; red; intro; elim H; clear H; intros _ H; elim H1; apply (H _ H2).",
                        "VernacExtend",
                        "595cb7835b89cd8b7686caec8fc63e799b534bb1"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := H0 _ H2); unfold neighbourhood; unfold neighbourhood in H3; elim H3; intros; exists x0; unfold included; unfold included in H4; intros; assert (H6 := H4 _ H5); unfold complementary in H6; unfold complementary; red; intro; elim H; clear H; intros H _; elim H6; apply (H _ H7).",
                        "VernacExtend",
                        "64b8986c740593ebb46cd439530cb329f6d22d37"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neighbourhood_P1",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "unfold included, neighbourhood; intros; elim H0; intros; exists x0; intros; unfold included; unfold included in H1; intros; apply (H _ (H1 _ H2)).",
                        "VernacExtend",
                        "1ee269f9b3499a9b6c4e1c752b826f431c098a04"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "open_set_P2",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "unfold open_set; intros; unfold union_domain in H1; elim H1; intro.",
                        "VernacExtend",
                        "0af7103a1e75e72f96efc56362724845e7ff9a63"
                    ]
                },
                {
                    "command": [
                        "apply neighbourhood_P1 with D1.",
                        "VernacExtend",
                        "e26a818a68e118763f2d6338c792346de6dccebf"
                    ]
                },
                {
                    "command": [
                        "unfold included, union_domain; tauto.",
                        "VernacExtend",
                        "e3e251c24445ae18c817439fc3ee20d10f99a97e"
                    ]
                },
                {
                    "command": [
                        "apply H; assumption.",
                        "VernacExtend",
                        "7904d623a02884c927ef4e8b66c90cb12eee7c7a"
                    ]
                },
                {
                    "command": [
                        "apply neighbourhood_P1 with D2.",
                        "VernacExtend",
                        "06b1b5fa699311cd4ab75ed775f3f7bd529a6976"
                    ]
                },
                {
                    "command": [
                        "unfold included, union_domain; tauto.",
                        "VernacExtend",
                        "e3e251c24445ae18c817439fc3ee20d10f99a97e"
                    ]
                },
                {
                    "command": [
                        "apply H0; assumption.",
                        "VernacExtend",
                        "6b55086dea19d45e0fd04d897d6b583689aff105"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "open_set_P3",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "unfold open_set; intros; unfold intersection_domain in H1; elim H1; intros.",
                        "VernacExtend",
                        "7951d4e3463b5c669cbbfba1acbd2c0995703e1a"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := H _ H2); assert (H5 := H0 _ H3); unfold intersection_domain; unfold neighbourhood in H4, H5; elim H4; clear H; intros del1 H; elim H5; clear H0; intros del2 H0; cut (0 < Rmin del1 del2).",
                        "VernacExtend",
                        "713c82ebf981421fb0ef18c531ca808a9bb20005"
                    ]
                },
                {
                    "command": [
                        "intro; set (del := mkposreal _ H6).",
                        "VernacExtend",
                        "446469af87c29816c8fedeb637eba671856eb31b"
                    ]
                },
                {
                    "command": [
                        "exists del; unfold included; intros; unfold included in H, H0; unfold disc in H, H0, H7.",
                        "VernacExtend",
                        "d88f980fcd34feb682b0f5e3d04cc7689eb7fb35"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply H; apply Rlt_le_trans with (pos del).",
                        "VernacExtend",
                        "30a67178344ada6e1360f3e34c806949fdef447d"
                    ]
                },
                {
                    "command": [
                        "apply H7.",
                        "VernacExtend",
                        "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
                    ]
                },
                {
                    "command": [
                        "unfold del; simpl; apply Rmin_l.",
                        "VernacExtend",
                        "5978825d614ee8559d1605fb09caf41ef1f5881d"
                    ]
                },
                {
                    "command": [
                        "apply H0; apply Rlt_le_trans with (pos del).",
                        "VernacExtend",
                        "4f88d098d0b0782551483567525302f58eee1275"
                    ]
                },
                {
                    "command": [
                        "apply H7.",
                        "VernacExtend",
                        "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
                    ]
                },
                {
                    "command": [
                        "unfold del; simpl; apply Rmin_r.",
                        "VernacExtend",
                        "ad586bde64898aabbbbbe85fcb835ea40b072541"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec del1 del2); intro.",
                        "VernacExtend",
                        "41dc099eef4b1ccbf2d730b7d0319e85cb5d4ed6"
                    ]
                },
                {
                    "command": [
                        "apply (cond_pos del1).",
                        "VernacExtend",
                        "f21d5a1f3d89787a1bde51b4be0e63b7d67ba1c5"
                    ]
                },
                {
                    "command": [
                        "apply (cond_pos del2).",
                        "VernacExtend",
                        "943dae3cf7ce55e033207ece60d88f623173db18"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "open_set_P4",
            "line_nb": 116,
            "steps": [
                {
                    "command": [
                        "unfold open_set; intros; elim H.",
                        "VernacExtend",
                        "928362c04f0c60d4e40437c32426dfe74c4565ac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "open_set_P5",
            "line_nb": 119,
            "steps": [
                {
                    "command": [
                        "unfold open_set; intros; unfold neighbourhood.",
                        "VernacExtend",
                        "1b7d8a3bfc35bd28111e600e5e071bdcbd7731fd"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal 1 Rlt_0_1); unfold included; intros; trivial.",
                        "VernacExtend",
                        "0a171a03fa54eafb189210a52607265705e586aa"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "disc_P1",
            "line_nb": 123,
            "steps": [
                {
                    "command": [
                        "intros; assert (H := open_set_P1 (disc x del)).",
                        "VernacExtend",
                        "69c395dda7c75b01f690bdb879cb19abcf4a19ab"
                    ]
                },
                {
                    "command": [
                        "elim H; intros; apply H1.",
                        "VernacExtend",
                        "aa4c683e6087d889f65e45ca51f98f273dd7f681"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; split.",
                        "VernacExtend",
                        "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
                    ]
                },
                {
                    "command": [
                        "unfold included, interior, disc; intros; cut (0 < del - Rabs (x - x0)).",
                        "VernacExtend",
                        "e6cd1b0d822e50608d2e0e8f1dcc884391562379"
                    ]
                },
                {
                    "command": [
                        "intro; set (del2 := mkposreal _ H3).",
                        "VernacExtend",
                        "b5215494ccdebf8930e26a464162c523b81f787e"
                    ]
                },
                {
                    "command": [
                        "exists del2; unfold included; intros.",
                        "VernacExtend",
                        "90d1c969f6632c9ad1042972eef4b0d832fe589c"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (x1 - x0) + Rabs (x0 - x)).",
                        "VernacExtend",
                        "b8f3d51d57f1e081ad18263f8ee62af1bae3246a"
                    ]
                },
                {
                    "command": [
                        "replace (x1 - x) with (x1 - x0 + (x0 - x)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "1bd1a518cf66a87ef790dd8cbbfd5e83dfb1698a"
                    ]
                },
                {
                    "command": [
                        "replace (pos del) with (del2 + Rabs (x0 - x)).",
                        "VernacExtend",
                        "d04b41ce91fa89e5b97f9d46b295fcd17b1c65e9"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rplus_comm (Rabs (x0 - x))); apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "8071d788289a4ecacef8683d3a99c21206e2a026"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "unfold del2; simpl; rewrite <- (Rabs_Ropp (x - x0)); rewrite Ropp_minus_distr; ring.",
                        "VernacExtend",
                        "9d87148f345c9982fac2ffcc637e4a0217855e02"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (Rabs (x - x0)); rewrite Rplus_0_r; replace (Rabs (x - x0) + (del - Rabs (x - x0))) with (pos del); [ rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H2 | ring ].",
                        "VernacExtend",
                        "312d0acf1bffc7b917e87bdeacd92f3ed0809353"
                    ]
                },
                {
                    "command": [
                        "apply interior_P1.",
                        "VernacExtend",
                        "2443ee16fd451397f4bbb421ed584d398a93fdb4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_P1",
            "line_nb": 139,
            "steps": [
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "intros; unfold neighbourhood in H0.",
                        "VernacExtend",
                        "c2f2280225add6826b3ecd45e975b1d7d8951952"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros del1 H1.",
                        "VernacExtend",
                        "16403c72ea1a10318a6736c4cba44602e25fb2d7"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt in H; unfold continue_in in H; unfold limit1_in in H; unfold limit_in in H; simpl in H; unfold R_dist in H.",
                        "VernacExtend",
                        "84e2c106732cfde45f6958af0745561862b6c48c"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := H del1 (cond_pos del1)).",
                        "VernacExtend",
                        "e30a4ecccc3894a265664b9fabb562693555778d"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros del2 H3.",
                        "VernacExtend",
                        "ac4279c300947fe8b8c042e216a9941e32d24f63"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros.",
                        "VernacExtend",
                        "22aefe300e56cd9b3f5be8a9d6799fb568928bf1"
                    ]
                },
                {
                    "command": [
                        "exists (disc x (mkposreal del2 H4)).",
                        "VernacExtend",
                        "8131bf822cc47cbd46593af46633bef4b53eadb2"
                    ]
                },
                {
                    "command": [
                        "intros; unfold included in H1; split.",
                        "VernacExtend",
                        "688de8a30bb492522c947d9f91117a8cb0ad7541"
                    ]
                },
                {
                    "command": [
                        "unfold neighbourhood, disc.",
                        "VernacExtend",
                        "4158f072d324f771fd2237a3ce258090451401da"
                    ]
                },
                {
                    "command": [
                        "exists (mkposreal del2 H4).",
                        "VernacExtend",
                        "e391e9dcc940965672332779e289ac63e84a2197"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; assumption.",
                        "VernacExtend",
                        "a59387bd52561293cc31b65dca93c180b07c9c67"
                    ]
                },
                {
                    "command": [
                        "intros; apply H1; unfold disc; case (Req_dec y x); intro.",
                        "VernacExtend",
                        "5ef35b166cf8fe2a01d25c1e7ef2efb2113246d9"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply (cond_pos del1).",
                        "VernacExtend",
                        "2bdd3b8dc0d8e7360bf1d8722cf9419be6d29d0f"
                    ]
                },
                {
                    "command": [
                        "apply H5; split.",
                        "VernacExtend",
                        "7ad64b5f9964468ee7593a96aee10bf238396930"
                    ]
                },
                {
                    "command": [
                        "unfold D_x, no_cond; split.",
                        "VernacExtend",
                        "121e72bbd9a8ad97e9353edec680d410ccaf17ee"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply (not_eq_sym (A:=R)); apply H7.",
                        "VernacExtend",
                        "236fdf14ffb1b3d656cd2f0458bfe9ec60eece3c"
                    ]
                },
                {
                    "command": [
                        "unfold disc in H6; apply H6.",
                        "VernacExtend",
                        "f6c9f13d9ad9fa2f1c878692e21f771ccecc435c"
                    ]
                },
                {
                    "command": [
                        "intros; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; intros.",
                        "VernacExtend",
                        "babeba7f1cab00425929ad79b35115e85da92283"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := H (disc (f x) (mkposreal eps H0))).",
                        "VernacExtend",
                        "dca4ecd23c3caef44d336cce7e73b294400ea2cf"
                    ]
                },
                {
                    "command": [
                        "cut (neighbourhood (disc (f x) (mkposreal eps H0)) (f x)).",
                        "VernacExtend",
                        "d1e9422d4e564e54d6d1b667d85d483dcb7060f4"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H3 := H1 H2).",
                        "VernacExtend",
                        "b267c63a869192195c174a3b14a0a36710a08a0d"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros D H4; elim H4; intros; unfold neighbourhood in H5; elim H5; intros del1 H7.",
                        "VernacExtend",
                        "20e4188847dbc39f22aee94e4b0d9b4ae8456425"
                    ]
                },
                {
                    "command": [
                        "exists (pos del1); split.",
                        "VernacExtend",
                        "901156865529208dc37432b913c73122dd4fecc4"
                    ]
                },
                {
                    "command": [
                        "apply (cond_pos del1).",
                        "VernacExtend",
                        "f21d5a1f3d89787a1bde51b4be0e63b7d67ba1c5"
                    ]
                },
                {
                    "command": [
                        "intros; elim H8; intros; simpl in H10; unfold R_dist in H10; simpl; unfold R_dist; apply (H6 _ (H7 _ H10)).",
                        "VernacExtend",
                        "c61c6d1ba0a2c35665d7d3dbe0c272124cf84d17"
                    ]
                },
                {
                    "command": [
                        "unfold neighbourhood, disc; exists (mkposreal eps H0); unfold included; intros; assumption.",
                        "VernacExtend",
                        "eec9fb5567e2a549a0ee818925d4e92f3276732d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_P2",
            "line_nb": 170,
            "steps": [
                {
                    "command": [
                        "intros; unfold open_set in H0; unfold open_set; intros; assert (H2 := continuity_P1 f x); elim H2; intros H3 _; assert (H4 := H3 (H x)); unfold neighbourhood, image_rec; unfold image_rec in H1; assert (H5 := H4 D (H0 (f x) H1)); elim H5; intros V0 H6; elim H6; intros; unfold neighbourhood in H7; elim H7; intros del H9; exists del; unfold included in H9; unfold included; intros; apply (H8 _ (H9 _ H10)).",
                        "VernacExtend",
                        "b65ef33d6f23c3b263d42956868cc02eee372550"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_P3",
            "line_nb": 173,
            "steps": [
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "intros; apply continuity_P2; assumption.",
                        "VernacExtend",
                        "eca113e75fadda9ac484f0cb45a5dda8f4f0ed51"
                    ]
                },
                {
                    "command": [
                        "intros; unfold continuity; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; cut (open_set (disc (f x) (mkposreal _ H0))).",
                        "VernacExtend",
                        "6b7b5da0945035de26859ea1e8aeba0e4a2382e2"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H2 := H _ H1).",
                        "VernacExtend",
                        "c67d3b68ca62ea5767786863d29b90d4d053d4f8"
                    ]
                },
                {
                    "command": [
                        "unfold open_set, image_rec in H2; cut (disc (f x) (mkposreal _ H0) (f x)).",
                        "VernacExtend",
                        "e5bf3a000f895ca3767d2848d665b7a67cd9bc30"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H4 := H2 _ H3).",
                        "VernacExtend",
                        "9151d64d3661490da76cdcf0c9ee286c1870479c"
                    ]
                },
                {
                    "command": [
                        "unfold neighbourhood in H4; elim H4; intros del H5.",
                        "VernacExtend",
                        "fe1cd89a4a8aaca59e494c88160054031c753e62"
                    ]
                },
                {
                    "command": [
                        "exists (pos del); split.",
                        "VernacExtend",
                        "574b93e120e84f22e87ce9ce6a9336b5d77389c0"
                    ]
                },
                {
                    "command": [
                        "apply (cond_pos del).",
                        "VernacExtend",
                        "ac01251087d8ed6a52f03fd522df5ae3ad740374"
                    ]
                },
                {
                    "command": [
                        "intros; unfold included in H5; apply H5; elim H6; intros; apply H8.",
                        "VernacExtend",
                        "b9148bf0bf2728b8887b406d565762ff6301328b"
                    ]
                },
                {
                    "command": [
                        "unfold disc; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply H0.",
                        "VernacExtend",
                        "5d0aec297ced6915837a6223afe551c4b904aad8"
                    ]
                },
                {
                    "command": [
                        "apply disc_P1.",
                        "VernacExtend",
                        "9a8ab9933dedae474624d3242f16b271339142be"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Rsepare",
            "line_nb": 187,
            "steps": [
                {
                    "command": [
                        "intros x y Hsep; set (D := Rabs (x - y)).",
                        "VernacExtend",
                        "0c688e96403102573eb2fb9181d113affe8f235e"
                    ]
                },
                {
                    "command": [
                        "cut (0 < D / 2).",
                        "VernacExtend",
                        "cddaa990e20e96498614ac3110b387e35eebe1da"
                    ]
                },
                {
                    "command": [
                        "intro; exists (disc x (mkposreal _ H)).",
                        "VernacExtend",
                        "f37c6203b0ba90ab89f1c91e5a311384c436d22c"
                    ]
                },
                {
                    "command": [
                        "exists (disc y (mkposreal _ H)); split.",
                        "VernacExtend",
                        "81b87872cd3b6ddc4885722521545d42fe64c7d7"
                    ]
                },
                {
                    "command": [
                        "unfold neighbourhood; exists (mkposreal _ H); unfold included; tauto.",
                        "VernacExtend",
                        "b0f3cd5a7453533f1cbbd1d398ebf11ea03b33c8"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold neighbourhood; exists (mkposreal _ H); unfold included; tauto.",
                        "VernacExtend",
                        "b0f3cd5a7453533f1cbbd1d398ebf11ea03b33c8"
                    ]
                },
                {
                    "command": [
                        "red; intro; elim H0; intros; unfold intersection_domain in H1; elim H1; intros.",
                        "VernacExtend",
                        "263ec7d1cf9f3e04e7fe6091d16ba2804cf4a836"
                    ]
                },
                {
                    "command": [
                        "cut (D < D).",
                        "VernacExtend",
                        "8b9bc941223e8d02ded4a88258f5a80ff974f20d"
                    ]
                },
                {
                    "command": [
                        "intro; elim (Rlt_irrefl _ H4).",
                        "VernacExtend",
                        "cdad8404a1457804e6e7d5a34b23494129153e82"
                    ]
                },
                {
                    "command": [
                        "change (Rabs (x - y) < D); apply Rle_lt_trans with (Rabs (x - x0) + Rabs (x0 - y)).",
                        "VernacExtend",
                        "11d2d0b981025fee39600c4086a9938f32df8979"
                    ]
                },
                {
                    "command": [
                        "replace (x - y) with (x - x0 + (x0 - y)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "7dcc2839bb502ec23f77ba984f60bc99289dd4af"
                    ]
                },
                {
                    "command": [
                        "rewrite (double_var D); apply Rplus_lt_compat.",
                        "VernacExtend",
                        "e1c2024bdb0724b59ebab428ce545cd05c309ccf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H2.",
                        "VernacExtend",
                        "e978c4ccc494078d83c38046bb43deba714342ed"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7122edbd68559f255bfed03dc640472ed14eb4ef"
                    ]
                },
                {
                    "command": [
                        "unfold D; apply Rabs_pos_lt; apply (Rminus_eq_contra _ _ Hsep).",
                        "VernacExtend",
                        "8b7741bbfd12bbd844a456bf608a0614bbc02800"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup0.",
                        "VernacExtend",
                        "ee74bd033c1031a79ef440e1d41037d5c9648214"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "restriction_family",
            "line_nb": 214,
            "steps": [
                {
                    "command": [
                        "intros; elim H; intros; unfold intersection_domain; elim H0; intros; split.",
                        "VernacExtend",
                        "721846489612f87a7c722d321cfa385e3be82a26"
                    ]
                },
                {
                    "command": [
                        "apply (cond_fam f0); exists x0; assumption.",
                        "VernacExtend",
                        "a61e0efa5c15ee56562e2aab74ea564c8676f618"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "family_P1",
            "line_nb": 221,
            "steps": [
                {
                    "command": [
                        "unfold family_open_set; intros; unfold subfamily; simpl; assert (H0 := classic (D x)).",
                        "VernacExtend",
                        "9404c82cb8cad87a69a26198cb448ed19ea046b6"
                    ]
                },
                {
                    "command": [
                        "elim H0; intro.",
                        "VernacExtend",
                        "8b90d3170291d75c22593a28bbba0a2c88c6fd14"
                    ]
                },
                {
                    "command": [
                        "cut (open_set (f0 x) -> open_set (fun y:R => f0 x y /\\ D x)).",
                        "VernacExtend",
                        "55e324351c177b0b86cf87771feeb78d4d92a249"
                    ]
                },
                {
                    "command": [
                        "intro; apply H2; apply H.",
                        "VernacExtend",
                        "c562984e4cde128c86d5e0c085b351fe1d81bd23"
                    ]
                },
                {
                    "command": [
                        "unfold open_set; unfold neighbourhood; intros; elim H3; intros; assert (H6 := H2 _ H4); elim H6; intros; exists x1; unfold included; intros; split.",
                        "VernacExtend",
                        "5a6231c9fe182ae108f84fa4d8b9262de6bd7a6d"
                    ]
                },
                {
                    "command": [
                        "apply (H7 _ H8).",
                        "VernacExtend",
                        "1a60c8d7f59c5769d3296789c4318d6c4ff16140"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "cut (open_set (fun y:R => False) -> open_set (fun y:R => f0 x y /\\ D x)).",
                        "VernacExtend",
                        "304a0ee02e495fcfcb3dab2abe03b27cd3098ba2"
                    ]
                },
                {
                    "command": [
                        "intro; apply H2; apply open_set_P4.",
                        "VernacExtend",
                        "ef3ea9c8750ce2787cd79832f1f3738db4935503"
                    ]
                },
                {
                    "command": [
                        "unfold open_set; unfold neighbourhood; intros; elim H3; intros; elim H1; assumption.",
                        "VernacExtend",
                        "9cad8e1950ed01ea180e659ceb6138160c90841f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "open_set_P6",
            "line_nb": 234,
            "steps": [
                {
                    "command": [
                        "unfold open_set; unfold neighbourhood; intros.",
                        "VernacExtend",
                        "c06945937db2cd74741a811d83f3daecdd61b47b"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom in H0; elim H0; intros.",
                        "VernacExtend",
                        "506fea162efe32dc9e6b1f05db1ae2bf191f9770"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := H _ (H3 _ H1)).",
                        "VernacExtend",
                        "5e26fa762d8bb8630c77c4c8500e326c04e6ed8f"
                    ]
                },
                {
                    "command": [
                        "elim H4; intros.",
                        "VernacExtend",
                        "ef88f175449d4af46e0685700665ce0cdf3e5695"
                    ]
                },
                {
                    "command": [
                        "exists x0; apply included_trans with D1; assumption.",
                        "VernacExtend",
                        "4da83b948ad83ab2eb63631893903c790ec56dea"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compact_P1",
            "line_nb": 241,
            "steps": [
                {
                    "command": [
                        "intros; unfold compact in H; set (D := fun x:R => True); set (g := fun x y:R => Rabs y < x); cut (forall x:R, (exists y : _, g x y) -> True); [ intro | intro; trivial ].",
                        "VernacExtend",
                        "1773ecd80eb7dd3edb2c97597be6661b27915fa9"
                    ]
                },
                {
                    "command": [
                        "set (f0 := mkfamily D g H0); assert (H1 := H f0); cut (covering_open_set X f0).",
                        "VernacExtend",
                        "927cf99324ac8a995433ca9faf36ebebcf90bbfb"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H3 := H1 H2); elim H3; intros D' H4; unfold covering_finite in H4; elim H4; intros; unfold family_finite in H6; unfold domain_finite in H6; elim H6; intros l H7; unfold bounded; set (r := MaxRlist l).",
                        "VernacExtend",
                        "7e03693c8e3ec9cbc673f83a2b5c8eaa4a84f7b7"
                    ]
                },
                {
                    "command": [
                        "exists (- r); exists r; intros.",
                        "VernacExtend",
                        "c59ec025ff18ff7b496c066e1bff30b43b0cb75a"
                    ]
                },
                {
                    "command": [
                        "unfold covering in H5; assert (H9 := H5 _ H8); elim H9; intros; unfold subfamily in H10; simpl in H10; elim H10; intros; assert (H13 := H7 x0); simpl in H13; cut (intersection_domain D D' x0).",
                        "VernacExtend",
                        "cd33d599de3e2d23fe59ebf2afb0b0d05eb2c5f4"
                    ]
                },
                {
                    "command": [
                        "elim H13; clear H13; intros.",
                        "VernacExtend",
                        "5a2567083b012ee6effdfc546240fc1ee18e61ea"
                    ]
                },
                {
                    "command": [
                        "assert (H16 := H13 H15); unfold g in H11; split.",
                        "VernacExtend",
                        "4b6759b72e8a6f899a22344e99e8dfa45accada1"
                    ]
                },
                {
                    "command": [
                        "cut (x0 <= r).",
                        "VernacExtend",
                        "89dfb856360d291876a1d45889039fe3e365e93a"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Rabs x < r).",
                        "VernacExtend",
                        "6dafa1650c6ce35da9dadc219b08062b7758850f"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H19 := Rabs_def2 x r H18); elim H19; intros; left; assumption.",
                        "VernacExtend",
                        "60550eae2848a6cfde5929c7df79dd79f51186d9"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with x0; assumption.",
                        "VernacExtend",
                        "397868e26a1513dc77c3a80576f86dab3ac9456e"
                    ]
                },
                {
                    "command": [
                        "apply (MaxRlist_P1 l x0 H16).",
                        "VernacExtend",
                        "7b3f8961a43433ea9d7c48477e969a52556444f4"
                    ]
                },
                {
                    "command": [
                        "cut (x0 <= r).",
                        "VernacExtend",
                        "89dfb856360d291876a1d45889039fe3e365e93a"
                    ]
                },
                {
                    "command": [
                        "intro; apply Rle_trans with (Rabs x).",
                        "VernacExtend",
                        "1254e2a9ac820bb7ca52b4fe18c5ba1f8fd8adf3"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with x0.",
                        "VernacExtend",
                        "5fc66bcd849b3049a7c30908f409fe1874b7696f"
                    ]
                },
                {
                    "command": [
                        "left; apply H11.",
                        "VernacExtend",
                        "38b6b02ac4ec919c307b77d19ff899c06fd3aa5f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply (MaxRlist_P1 l x0 H16).",
                        "VernacExtend",
                        "7b3f8961a43433ea9d7c48477e969a52556444f4"
                    ]
                },
                {
                    "command": [
                        "unfold intersection_domain, D; tauto.",
                        "VernacExtend",
                        "c8f846a92c99206f663e7acfc43daf392a6d2f06"
                    ]
                },
                {
                    "command": [
                        "unfold covering_open_set; split.",
                        "VernacExtend",
                        "1c919de8626e4277fdd15de9bc1f5bc1d8203b10"
                    ]
                },
                {
                    "command": [
                        "unfold covering; intros; simpl; exists (Rabs x + 1); unfold g; pattern (Rabs x) at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; apply Rlt_0_1.",
                        "VernacExtend",
                        "907cf0058d0b9bcc19a80e386b3db5c37d402b28"
                    ]
                },
                {
                    "command": [
                        "unfold family_open_set; intro; case (Rtotal_order 0 x); intro.",
                        "VernacExtend",
                        "b10a05231e599083572d9aef6b15418cfd27505d"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P6 with (disc 0 (mkposreal _ H2)).",
                        "VernacExtend",
                        "ddd25d8f820bd0681a0190a9f6e640dd0b317bbf"
                    ]
                },
                {
                    "command": [
                        "apply disc_P1.",
                        "VernacExtend",
                        "9a8ab9933dedae474624d3242f16b271339142be"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; unfold f0; simpl; unfold g, disc; split.",
                        "VernacExtend",
                        "a7e9805fbe34ba3e60ae0f42ffc612d7f2d9399f"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; unfold Rminus in H3; rewrite Ropp_0 in H3; rewrite Rplus_0_r in H3; apply H3.",
                        "VernacExtend",
                        "1cecd942fd566cae533e59059981d3c23605b2cc"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; apply H3.",
                        "VernacExtend",
                        "2dbc5108b8ca9285997e4dfb0b03b5636c83b2d0"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P6 with (fun x:R => False).",
                        "VernacExtend",
                        "f21cfaf97cdfca63a95dd7229e007ba5cc473b58"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P4.",
                        "VernacExtend",
                        "0d05350f051b67c090cba40864786f9c9458483b"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; split.",
                        "VernacExtend",
                        "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; elim H3.",
                        "VernacExtend",
                        "d4440b493731deaedff8e01aa471e7d52c1b2711"
                    ]
                },
                {
                    "command": [
                        "unfold included, f0; simpl; unfold g; intros; elim H2; intro; [ rewrite <- H4 in H3; assert (H5 := Rabs_pos x0); elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H5 H3)) | assert (H6 := Rabs_pos x0); assert (H7 := Rlt_trans _ _ _ H3 H4); elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H6 H7)) ].",
                        "VernacExtend",
                        "be62530e4a95c078132ff2fcb1e5f06a8f005a7a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compact_P2",
            "line_nb": 276,
            "steps": [
                {
                    "command": [
                        "intros; assert (H0 := closed_set_P1 X); elim H0; clear H0; intros _ H0; apply H0; clear H0.",
                        "VernacExtend",
                        "9d6c2e9c868729776cea1de026358c8c8702e9de"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; split.",
                        "VernacExtend",
                        "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
                    ]
                },
                {
                    "command": [
                        "apply adherence_P1.",
                        "VernacExtend",
                        "cb9b75b28db1ff25e5fc5dbd77f191671d8b17a8"
                    ]
                },
                {
                    "command": [
                        "unfold included; unfold adherence; unfold point_adherent; intros; unfold compact in H; assert (H1 := classic (X x)); elim H1; clear H1; intro.",
                        "VernacExtend",
                        "ab97e63f0d235d7963b208bf268d4ec42b000da6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "cut (forall y:R, X y -> 0 < Rabs (y - x) / 2).",
                        "VernacExtend",
                        "ef6e3ebf7ef76fdc298dd5516966047ac4cb0248"
                    ]
                },
                {
                    "command": [
                        "intro; set (D := X); set (g := fun y z:R => Rabs (y - z) < Rabs (y - x) / 2 /\\ D y); cut (forall x:R, (exists y : _, g x y) -> D x).",
                        "VernacExtend",
                        "db9c5196825064d91747015f457614d5f9cc796e"
                    ]
                },
                {
                    "command": [
                        "intro; set (f0 := mkfamily D g H3); assert (H4 := H f0); cut (covering_open_set X f0).",
                        "VernacExtend",
                        "b44ca3220a3e35b0273f1bce0d493061efa6b91d"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H6 := H4 H5); elim H6; clear H6; intros D' H6.",
                        "VernacExtend",
                        "f38267816cfcc6627871a9e2313cf413825a9456"
                    ]
                },
                {
                    "command": [
                        "unfold covering_finite in H6; decompose [and] H6; unfold covering, subfamily in H7; simpl in H7; unfold family_finite, subfamily in H8; simpl in H8; unfold domain_finite in H8; elim H8; clear H8; intros l H8; set (alp := MinRlist (AbsList l x)); cut (0 < alp).",
                        "VernacExtend",
                        "c98c640ac6e24251204c9ac7301ce785f58a3428"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H10 := H0 (disc x (mkposreal _ H9))); cut (neighbourhood (disc x (mkposreal alp H9)) x).",
                        "VernacExtend",
                        "4e6322b404b74022a59cbbd83953fb4031e66e81"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H12 := H10 H11); elim H12; clear H12; intros y H12; unfold intersection_domain in H12; elim H12; clear H12; intros; assert (H14 := H7 _ H13); elim H14; clear H14; intros y0 H14; elim H14; clear H14; intros; unfold g in H14; elim H14; clear H14; intros; unfold disc in H12; simpl in H12; cut (alp <= Rabs (y0 - x) / 2).",
                        "VernacExtend",
                        "820abcec4ffb8771005f011f9c4a2c0c25957fbf"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H18 := Rlt_le_trans _ _ _ H12 H17); cut (Rabs (y0 - x) < Rabs (y0 - x)).",
                        "VernacExtend",
                        "f1a524e6862f5de80c5f8e193679618704286910"
                    ]
                },
                {
                    "command": [
                        "intro; elim (Rlt_irrefl _ H19).",
                        "VernacExtend",
                        "0246197fe98528178b586a67f6b7a85f05202576"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (y0 - y) + Rabs (y - x)).",
                        "VernacExtend",
                        "f0aae085266e361d80bd7c775a6306ae2774dd7e"
                    ]
                },
                {
                    "command": [
                        "replace (y0 - x) with (y0 - y + (y - x)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "b60933eb0093780cc9819b5563a044a72ee37a40"
                    ]
                },
                {
                    "command": [
                        "rewrite (double_var (Rabs (y0 - x))); apply Rplus_lt_compat; assumption.",
                        "VernacExtend",
                        "fce96fd54dd79dc37693ba96b884cdc817955445"
                    ]
                },
                {
                    "command": [
                        "apply (MinRlist_P1 (AbsList l x) (Rabs (y0 - x) / 2)); apply AbsList_P1; elim (H8 y0); clear H8; intros; apply H8; unfold intersection_domain; split; assumption.",
                        "VernacExtend",
                        "17eeced910884f245701fba006dbd2dc46fa8211"
                    ]
                },
                {
                    "command": [
                        "assert (H11 := disc_P1 x (mkposreal alp H9)); unfold open_set in H11; apply H11.",
                        "VernacExtend",
                        "d4fd0d4d400ea40e881bfe1559b184e0a104bbba"
                    ]
                },
                {
                    "command": [
                        "unfold disc; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; apply H9.",
                        "VernacExtend",
                        "ea40dc44bd2848a840a6bc023e1c50e0d407c708"
                    ]
                },
                {
                    "command": [
                        "unfold alp; apply MinRlist_P2; intros; assert (H10 := AbsList_P2 _ _ _ H9); elim H10; clear H10; intros z H10; elim H10; clear H10; intros; rewrite H11; apply H2; elim (H8 z); clear H8; intros; assert (H13 := H12 H10); unfold intersection_domain, D in H13; elim H13; clear H13; intros; assumption.",
                        "VernacExtend",
                        "9dbaa62d8c50624b44cb5603b66dfe16c69e819c"
                    ]
                },
                {
                    "command": [
                        "unfold covering_open_set; split.",
                        "VernacExtend",
                        "1c919de8626e4277fdd15de9bc1f5bc1d8203b10"
                    ]
                },
                {
                    "command": [
                        "unfold covering; intros; exists x0; simpl; unfold g; split.",
                        "VernacExtend",
                        "bf17520c54eafea32130959892f34d13bbe68ca7"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; unfold Rminus in H2; apply (H2 _ H5).",
                        "VernacExtend",
                        "b933234ab76f8d7c30cb7fccd521d08b1a96c301"
                    ]
                },
                {
                    "command": [
                        "apply H5.",
                        "VernacExtend",
                        "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
                    ]
                },
                {
                    "command": [
                        "unfold family_open_set; intro; simpl; unfold g; elim (classic (D x0)); intro.",
                        "VernacExtend",
                        "49ed359a38f97daab468ac5166194b12102fbc41"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P6 with (disc x0 (mkposreal _ (H2 _ H5))).",
                        "VernacExtend",
                        "2a191c49d6d7ff45468e7a42317f76ce15c64667"
                    ]
                },
                {
                    "command": [
                        "apply disc_P1.",
                        "VernacExtend",
                        "9a8ab9933dedae474624d3242f16b271339142be"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; split.",
                        "VernacExtend",
                        "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
                    ]
                },
                {
                    "command": [
                        "unfold included, disc; simpl; intros; split.",
                        "VernacExtend",
                        "596774014cdd7c331658ee6d881749549c8e856e"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rabs_Ropp (x0 - x1)); rewrite Ropp_minus_distr; apply H6.",
                        "VernacExtend",
                        "31ea71f3f4d2be2e848efa8f49ea86961f2af14e"
                    ]
                },
                {
                    "command": [
                        "apply H5.",
                        "VernacExtend",
                        "4feb0df7cc51caef1d129e505dc0af74a67c0d74"
                    ]
                },
                {
                    "command": [
                        "unfold included, disc; simpl; intros; elim H6; intros; rewrite <- (Rabs_Ropp (x1 - x0)); rewrite Ropp_minus_distr; apply H7.",
                        "VernacExtend",
                        "012eb4592ba201c323976a243f463c32ed4788e2"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P6 with (fun z:R => False).",
                        "VernacExtend",
                        "10757b2cdb2287e0aba582576026cb6d69afd9f6"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P4.",
                        "VernacExtend",
                        "0d05350f051b67c090cba40864786f9c9458483b"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; split.",
                        "VernacExtend",
                        "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; elim H6.",
                        "VernacExtend",
                        "e198df4bed19b7c146931490505a33af38d35f90"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; elim H6; intros; elim H5; assumption.",
                        "VernacExtend",
                        "6d7cda94e0d3db0ad20315c4371bc8618e4adbd1"
                    ]
                },
                {
                    "command": [
                        "intros; elim H3; intros; unfold g in H4; elim H4; clear H4; intros _ H4; apply H4.",
                        "VernacExtend",
                        "1d0abeee882969b669d4ec4f3b062ef377bc55c0"
                    ]
                },
                {
                    "command": [
                        "intros; unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7a8f2c341b61b8b23fdd3861ed41da4b84571189"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; apply Rminus_eq_contra; red; intro; rewrite H3 in H2; elim H1; apply H2.",
                        "VernacExtend",
                        "4bbe0b30ffcc1116400cfdf009f9bbf98df10d46"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup0.",
                        "VernacExtend",
                        "ee74bd033c1031a79ef440e1d41037d5c9648214"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compact_EMP",
            "line_nb": 320,
            "steps": [
                {
                    "command": [
                        "unfold compact; intros; exists (fun x:R => False); unfold covering_finite; split.",
                        "VernacExtend",
                        "1e3471eda30e25c4c43f479569191f9b796cc2d8"
                    ]
                },
                {
                    "command": [
                        "unfold covering; intros; elim H0.",
                        "VernacExtend",
                        "2ae8a7dd6183748c66d7ab3e6c39de0b0b9d3c11"
                    ]
                },
                {
                    "command": [
                        "unfold family_finite; unfold domain_finite; exists nil; intro.",
                        "VernacExtend",
                        "5c7e6a2830d11d5eedc663151261202ffdc4b3ce"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold intersection_domain; intros; elim H0.",
                        "VernacExtend",
                        "7e8ce054bedbfbd662ec9965c46cc75bd69f59bf"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros _ H0; elim H0.",
                        "VernacExtend",
                        "fa5faa9d39feb66cd38e5d8731cb8925d72d2653"
                    ]
                },
                {
                    "command": [
                        "simpl; intro; elim H0.",
                        "VernacExtend",
                        "4a1c62a260f5251c2558adf75271f13acbc75b04"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compact_eqDom",
            "line_nb": 329,
            "steps": [
                {
                    "command": [
                        "unfold compact; intros; unfold eq_Dom in H0; elim H0; clear H0; unfold included; intros; assert (H3 : covering_open_set X1 f0).",
                        "VernacExtend",
                        "576a0cc2e20069c6f12a98c4d3a4f7bba32d34d7"
                    ]
                },
                {
                    "command": [
                        "unfold covering_open_set; unfold covering_open_set in H1; elim H1; clear H1; intros; split.",
                        "VernacExtend",
                        "91f495fbf60236dbb9267d323d1a3188dd0eebdc"
                    ]
                },
                {
                    "command": [
                        "unfold covering in H1; unfold covering; intros; apply (H1 _ (H0 _ H4)).",
                        "VernacExtend",
                        "bc64616e0273fb1f5fc485dbb4875ea807c122c8"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "elim (H _ H3); intros D H4; exists D; unfold covering_finite; unfold covering_finite in H4; elim H4; intros; split.",
                        "VernacExtend",
                        "4f0393f786a69b07d9c184a1767aa0f283993a6f"
                    ]
                },
                {
                    "command": [
                        "unfold covering in H5; unfold covering; intros; apply (H5 _ (H2 _ H7)).",
                        "VernacExtend",
                        "de1c59365d794a911471fa0d063d7df8b2fb946e"
                    ]
                },
                {
                    "command": [
                        "apply H6.",
                        "VernacExtend",
                        "b0314bbdc776869d305067ca471096a36fa958c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compact_P3",
            "line_nb": 338,
            "steps": [
                {
                    "command": [
                        "intros a b; destruct (Rle_dec a b) as [Hle|Hnle].",
                        "VernacExtend",
                        "d60f53c1eec7e78891c26a70b88fcd9469216409"
                    ]
                },
                {
                    "command": [
                        "unfold compact; intros f0 (H,H5); set (A := fun x:R => a <= x <= b /\\ (exists D : R -> Prop, covering_finite (fun c:R => a <= c <= x) (subfamily f0 D))).",
                        "VernacExtend",
                        "1c3e4f42e10dbd7bd6bc8de5024e72d8d9a3989b"
                    ]
                },
                {
                    "command": [
                        "cut (A a); [intro H0|].",
                        "VernacExtend",
                        "651189593364aa5b8b18656d4778be2994573166"
                    ]
                },
                {
                    "command": [
                        "cut (bound A); [intro H1|].",
                        "VernacExtend",
                        "17eaa62d17f1067928ae69e660843d66eb0a3625"
                    ]
                },
                {
                    "command": [
                        "cut (exists a0 : R, A a0); [intro H2|].",
                        "VernacExtend",
                        "6054103a9ea779b34da4c83dbc5b3bcf80040346"
                    ]
                },
                {
                    "command": [
                        "pose proof (completeness A H1 H2) as (m,H3); unfold is_lub in H3.",
                        "VernacExtend",
                        "4bd92093e41e28ea7191881cc191641cb285da1c"
                    ]
                },
                {
                    "command": [
                        "cut (a <= m <= b); [intro H4|].",
                        "VernacExtend",
                        "dab8cdcc098a6cfef7aa32b98d58a6d22aeb07d7"
                    ]
                },
                {
                    "command": [
                        "unfold covering in H; pose proof (H m H4) as (y0,H6).",
                        "VernacExtend",
                        "349459b0ac85a4d41d661b1f1ca31cb7973f7050"
                    ]
                },
                {
                    "command": [
                        "unfold family_open_set in H5; pose proof (H5 y0 m H6) as (eps,H8).",
                        "VernacExtend",
                        "cb6730c74a9dcdb34f3efa6a0522d39b0e8a2792"
                    ]
                },
                {
                    "command": [
                        "cut (exists x : R, A x /\\ m - eps < x <= m); [intros (x,((H9 & Dx & H12 & H13),(Hltx,_)))|].",
                        "VernacExtend",
                        "25fbdb835edbc6a29fd29b65602dc0de36d92a64"
                    ]
                },
                {
                    "command": [
                        "destruct (Req_dec m b) as [->|H11].",
                        "VernacExtend",
                        "305654ae21da691a8547646f8607eb0589cbc724"
                    ]
                },
                {
                    "command": [
                        "set (Db := fun x:R => Dx x \\/ x = y0); exists Db; unfold covering_finite; split.",
                        "VernacExtend",
                        "1a486294c92fa2194531f588052315b9d1a12d0e"
                    ]
                },
                {
                    "command": [
                        "unfold covering; intros x0 (H14,H18); unfold covering in H12; destruct (Rle_dec x0 x) as [Hle'|Hnle'].",
                        "VernacExtend",
                        "8efbad6ce983c5dc20e685b880957c66ae9b704e"
                    ]
                },
                {
                    "command": [
                        "cut (a <= x0 <= x); [intro H15|].",
                        "VernacExtend",
                        "a07b550e5146a8dd282d4dca9fd952c97c04cc94"
                    ]
                },
                {
                    "command": [
                        "pose proof (H12 x0 H15) as (x1 & H16 & H17); exists x1; simpl; unfold Db; split; [ apply H16 | left; apply H17 ].",
                        "VernacExtend",
                        "a72647020768e451d2e9099af997379b709870fc"
                    ]
                },
                {
                    "command": [
                        "split; assumption.",
                        "VernacExtend",
                        "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
                    ]
                },
                {
                    "command": [
                        "exists y0; simpl; split.",
                        "VernacExtend",
                        "5f54a843bf0474506e165600d9a5ce862eb3a726"
                    ]
                },
                {
                    "command": [
                        "apply H8; unfold disc; rewrite <- Rabs_Ropp, Ropp_minus_distr, Rabs_right.",
                        "VernacExtend",
                        "6f5d85da1843f38e47afd5d8cfb3410e7575b3cb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (b - x).",
                        "VernacExtend",
                        "fb7e69a49c60d9c3e5fc5b77ef5e851a8babb00f"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_lt_compat_l, Ropp_lt_gt_contravar; auto with real.",
                        "VernacExtend",
                        "d49e7bb1284b7271fd9fe3729c22a175b9ea9409"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (x - eps); replace (x - eps + (b - x)) with (b - eps); [ replace (x - eps + eps) with x; [ apply Hltx | ring ] | ring ].",
                        "VernacExtend",
                        "595bb70e63ca2d79a251e35b90824e04dc277a81"
                    ]
                },
                {
                    "command": [
                        "apply Rge_minus, Rle_ge, H18.",
                        "VernacExtend",
                        "d627822b709add5c3129a76066adaba693a1a741"
                    ]
                },
                {
                    "command": [
                        "unfold Db; right; reflexivity.",
                        "VernacExtend",
                        "29cc53851b51b53096c3570967d160be846fbf83"
                    ]
                },
                {
                    "command": [
                        "unfold family_finite, domain_finite.",
                        "VernacExtend",
                        "0331b48c09625e9958f9d806cd184fc393c2d9d5"
                    ]
                },
                {
                    "command": [
                        "intros; unfold family_finite in H13; unfold domain_finite in H13; destruct H13 as (l,H13); exists (cons y0 l); intro; split.",
                        "VernacExtend",
                        "d95e19b511a1513e1d18d0322b99d23707ec67f4"
                    ]
                },
                {
                    "command": [
                        "intro H14; simpl in H14; unfold intersection_domain in H14; specialize H13 with x0; destruct H13 as (H13,H15); destruct (Req_dec x0 y0) as [H16|H16].",
                        "VernacExtend",
                        "9480f412aef6c58ad8f6712569271e6696cb05e7"
                    ]
                },
                {
                    "command": [
                        "simpl; left; apply H16.",
                        "VernacExtend",
                        "1ebd21ef4f749f60b39926e82e16afa575c027ec"
                    ]
                },
                {
                    "command": [
                        "simpl; right; apply H13.",
                        "VernacExtend",
                        "05d2a4d852edffbd8a234067c4cdd491c5cc0cee"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold intersection_domain; unfold Db in H14; decompose [and or] H14.",
                        "VernacExtend",
                        "229add3de91e8c730ccc612f79dd398fc97e7203"
                    ]
                },
                {
                    "command": [
                        "split; assumption.",
                        "VernacExtend",
                        "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
                    ]
                },
                {
                    "command": [
                        "elim H16; assumption.",
                        "VernacExtend",
                        "2b66844ddcdb76bf3df5cf01ff5f390b241794a1"
                    ]
                },
                {
                    "command": [
                        "intro H14; simpl in H14; destruct H14 as [H15|H15]; simpl; unfold intersection_domain.",
                        "VernacExtend",
                        "216f188d96e6e8f712082f540a0305a2f6ee510d"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (cond_fam f0); rewrite H15; exists b; apply H6.",
                        "VernacExtend",
                        "6359f1a371938fc2e3bb95ec248bd6a99100487a"
                    ]
                },
                {
                    "command": [
                        "unfold Db; right; assumption.",
                        "VernacExtend",
                        "90f801f483bacf39147e92276117c4d85c2a6d4f"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold intersection_domain; elim (H13 x0).",
                        "VernacExtend",
                        "24387289de9be8805e344f0e0ba8b9eb8b3bd855"
                    ]
                },
                {
                    "command": [
                        "intros _ H16; assert (H17 := H16 H15); simpl in H17; unfold intersection_domain in H17; split.",
                        "VernacExtend",
                        "eb4f7ef599f0f185da705d684f978789b2b40c1f"
                    ]
                },
                {
                    "command": [
                        "elim H17; intros; assumption.",
                        "VernacExtend",
                        "cd7f17f7b7c7c6379101c505a18a56307fabac45"
                    ]
                },
                {
                    "command": [
                        "unfold Db; left; elim H17; intros; assumption.",
                        "VernacExtend",
                        "a049872ba0e37777a27d116a6429c6bcb9e16ce1"
                    ]
                },
                {
                    "command": [
                        "set (m' := Rmin (m + eps / 2) b).",
                        "VernacExtend",
                        "7287319897ee1fa4330ae1b554e77baeacdec8bc"
                    ]
                },
                {
                    "command": [
                        "cut (A m'); [intro H7|].",
                        "VernacExtend",
                        "60b5299feabfa2896fc7b0a77ae143a202d41184"
                    ]
                },
                {
                    "command": [
                        "destruct H3 as (H14,H15); unfold is_upper_bound in H14.",
                        "VernacExtend",
                        "8f262c974e369fe0ecdab35ba78a9c05ed24702e"
                    ]
                },
                {
                    "command": [
                        "assert (H16 := H14 m' H7).",
                        "VernacExtend",
                        "eee171d91570808e44a580177316cb0d77a65360"
                    ]
                },
                {
                    "command": [
                        "cut (m < m'); [intro H17|].",
                        "VernacExtend",
                        "e9f80b5941025cd304dfa614ccf12c32252e4c71"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H16 H17))...",
                        "VernacExtend",
                        "0b0f083eb6b135afb360d01fc4a68853e232b3bd"
                    ]
                },
                {
                    "command": [
                        "unfold m', Rmin; destruct (Rle_dec (m + eps / 2) b) as [Hle'|Hnle'].",
                        "VernacExtend",
                        "67d1146ad3c2e6b0a08d73480ab9dedb100b47c9"
                    ]
                },
                {
                    "command": [
                        "pattern m at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l; unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "6a7412288076d0d445c98e34a795d9c43cc5d553"
                    ]
                },
                {
                    "command": [
                        "destruct H4 as (_,[]).",
                        "VernacExtend",
                        "c66a993828d6b5cacea25a287fc6d86fd0439439"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim H11; assumption.",
                        "VernacExtend",
                        "0c7ff33813325ba61ca591e7cccc086d4fdd5c00"
                    ]
                },
                {
                    "command": [
                        "unfold A; split.",
                        "VernacExtend",
                        "9493cff9c152923032c34cef75b2c25b83843f1e"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with m.",
                        "VernacExtend",
                        "f91be5499f38c5bcf88afc7c2e48ed05d6417375"
                    ]
                },
                {
                    "command": [
                        "elim H4; intros; assumption.",
                        "VernacExtend",
                        "90e235a0da22f1f5e1da81b7ceef5bdc1f316203"
                    ]
                },
                {
                    "command": [
                        "unfold m'; unfold Rmin; case (Rle_dec (m + eps / 2) b); intro.",
                        "VernacExtend",
                        "6a42a5b67c1c4b3cba57538cc3a61d6d699fe973"
                    ]
                },
                {
                    "command": [
                        "pattern m at 1; rewrite <- Rplus_0_r; apply Rplus_le_compat_l; left; unfold Rdiv; apply Rmult_lt_0_compat; [ apply (cond_pos eps) | apply Rinv_0_lt_compat; prove_sup0 ].",
                        "VernacExtend",
                        "f17a81739d12b30ab6a55abb188d682ad2ffdb55"
                    ]
                },
                {
                    "command": [
                        "destruct H4.",
                        "VernacExtend",
                        "9ae390e4b039d96b643e4c1e0cd28291b37e7b3e"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold m'; apply Rmin_r.",
                        "VernacExtend",
                        "dd009018fc0c849eab8b8943d5b504fa15d8530e"
                    ]
                },
                {
                    "command": [
                        "set (Db := fun x:R => Dx x \\/ x = y0); exists Db; unfold covering_finite; split.",
                        "VernacExtend",
                        "1a486294c92fa2194531f588052315b9d1a12d0e"
                    ]
                },
                {
                    "command": [
                        "unfold covering; intros x0 (H14,H18); unfold covering in H12; destruct (Rle_dec x0 x) as [Hle'|Hnle'].",
                        "VernacExtend",
                        "8efbad6ce983c5dc20e685b880957c66ae9b704e"
                    ]
                },
                {
                    "command": [
                        "cut (a <= x0 <= x); [intro H15|].",
                        "VernacExtend",
                        "a07b550e5146a8dd282d4dca9fd952c97c04cc94"
                    ]
                },
                {
                    "command": [
                        "pose proof (H12 x0 H15) as (x1 & H16 & H17); exists x1; simpl; unfold Db; split; [ apply H16 | left; apply H17 ].",
                        "VernacExtend",
                        "a72647020768e451d2e9099af997379b709870fc"
                    ]
                },
                {
                    "command": [
                        "split; assumption.",
                        "VernacExtend",
                        "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
                    ]
                },
                {
                    "command": [
                        "exists y0; simpl; split.",
                        "VernacExtend",
                        "5f54a843bf0474506e165600d9a5ce862eb3a726"
                    ]
                },
                {
                    "command": [
                        "apply H8; unfold disc, Rabs; destruct (Rcase_abs (x0 - m)) as [Hlt|Hge].",
                        "VernacExtend",
                        "f5a8366f1e0a336f2437bf1fa3399f4ac04fe245"
                    ]
                },
                {
                    "command": [
                        "rewrite Ropp_minus_distr; apply Rlt_trans with (m - x).",
                        "VernacExtend",
                        "5a49d696b7d1a723b1d5ad316725215a22134697"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply Rplus_lt_compat_l; apply Ropp_lt_gt_contravar; auto with real.",
                        "VernacExtend",
                        "2d1748a2387a2a403f4bad5efd543406c1568699"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (x - eps); replace (x - eps + (m - x)) with (m - eps).",
                        "VernacExtend",
                        "50e0e5e03c474bfffe72b51f3e00a6b016c0c06c"
                    ]
                },
                {
                    "command": [
                        "replace (x - eps + eps) with x.",
                        "VernacExtend",
                        "5601993f96fd2c5d43e91c2a352e037b7a04de5a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (m' - m).",
                        "VernacExtend",
                        "3de3cd7ed20e9a9334125881c930ebe151403d22"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; do 2 rewrite <- (Rplus_comm (- m)); apply Rplus_le_compat_l; elim H14; intros; assumption.",
                        "VernacExtend",
                        "0d63c9a7a7028a377a56ce59b12e2ed4c6e4f09a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with m; replace (m + (m' - m)) with m'.",
                        "VernacExtend",
                        "e921a7507c96e571827b0099175cba5a9f0f5a46"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (m + eps / 2).",
                        "VernacExtend",
                        "477ce37b60e2d798f6dca11ddfd26ed0e8d2ca21"
                    ]
                },
                {
                    "command": [
                        "unfold m'; apply Rmin_l.",
                        "VernacExtend",
                        "45448eca35ee4817a453704a80cde4738e83b416"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l; apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "cac853e1956e65d7f8fb88751c6cacd96e8503dd"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite <- (Rmult_comm (/ 2)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "bb110d8377e3622749fa8b2b4653e0680d3ab799"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; pattern (pos eps) at 1; rewrite <- Rplus_0_r; rewrite double; apply Rplus_lt_compat_l; apply (cond_pos eps).",
                        "VernacExtend",
                        "f9cc5920506e57fd91292a85b20852d9b63e14c5"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold Db; right; reflexivity.",
                        "VernacExtend",
                        "29cc53851b51b53096c3570967d160be846fbf83"
                    ]
                },
                {
                    "command": [
                        "unfold family_finite, domain_finite; unfold family_finite, domain_finite in H13; destruct H13 as (l,H13); exists (cons y0 l); intro; split.",
                        "VernacExtend",
                        "a247e161e0cd80117138c377dd249091e0715d18"
                    ]
                },
                {
                    "command": [
                        "intro H14; simpl in H14; unfold intersection_domain in H14; specialize (H13 x0); destruct H13 as (H13,H15); destruct (Req_dec x0 y0) as [Heq|Hneq].",
                        "VernacExtend",
                        "d89b186c7e102118e7ed6dd35fb249046132f4bf"
                    ]
                },
                {
                    "command": [
                        "simpl; left; apply Heq.",
                        "VernacExtend",
                        "eab9b8f7814ca0f014c829ecdebb0b3487c4e014"
                    ]
                },
                {
                    "command": [
                        "simpl; right; apply H13; simpl; unfold intersection_domain; unfold Db in H14; decompose [and or] H14.",
                        "VernacExtend",
                        "b7e3f4263d3186777c7b664cd99b322f7c1c0be2"
                    ]
                },
                {
                    "command": [
                        "split; assumption.",
                        "VernacExtend",
                        "2ecbdbd450c44f0ef15650763b06c29c7eb74a28"
                    ]
                },
                {
                    "command": [
                        "elim Hneq; assumption.",
                        "VernacExtend",
                        "dae3bc5bc74908c14e3ffd8837ac8ca72bc01332"
                    ]
                },
                {
                    "command": [
                        "intros [H15|H15].",
                        "VernacExtend",
                        "555e0619edc96f2038b04370ac8e48df0359ba16"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (cond_fam f0); rewrite H15; exists m; apply H6.",
                        "VernacExtend",
                        "b6a08543b250dc64cf8bf491cafe5b7533970c2b"
                    ]
                },
                {
                    "command": [
                        "unfold Db; right; assumption.",
                        "VernacExtend",
                        "90f801f483bacf39147e92276117c4d85c2a6d4f"
                    ]
                },
                {
                    "command": [
                        "elim (H13 x0); intros _ H16.",
                        "VernacExtend",
                        "8c1a482f6d8a1023dcb185b7db4c5b4bf2b64e11"
                    ]
                },
                {
                    "command": [
                        "assert (H17 := H16 H15).",
                        "VernacExtend",
                        "9bb5e30c4f1bef3ff873c815c0b2fe5f7450622a"
                    ]
                },
                {
                    "command": [
                        "simpl in H17.",
                        "VernacExtend",
                        "5cec8af2bd097f5c775badd2d14f882683236ba5"
                    ]
                },
                {
                    "command": [
                        "unfold intersection_domain in H17.",
                        "VernacExtend",
                        "28010720063493f1e12c5fd2a892df7832cbe68e"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "elim H17; intros; assumption.",
                        "VernacExtend",
                        "cd7f17f7b7c7c6379101c505a18a56307fabac45"
                    ]
                },
                {
                    "command": [
                        "unfold Db; left; elim H17; intros; assumption.",
                        "VernacExtend",
                        "a049872ba0e37777a27d116a6429c6bcb9e16ce1"
                    ]
                },
                {
                    "command": [
                        "elim (classic (exists x : R, A x /\\ m - eps < x <= m)); intro H9.",
                        "VernacExtend",
                        "3070f0e3513d68afbf687dbb288cc112da09d336"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros H10 H11; cut (is_upper_bound A (m - eps)).",
                        "VernacExtend",
                        "ca1d3840d1f45e50f2563443ae421c609c148315"
                    ]
                },
                {
                    "command": [
                        "intro H12; assert (H13 := H11 _ H12); cut (m - eps < m).",
                        "VernacExtend",
                        "1fd622a5d66ab8d2bd60fe895f434d8f5da51de7"
                    ]
                },
                {
                    "command": [
                        "intro H14; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H13 H14)).",
                        "VernacExtend",
                        "c30166d914a186bdfe45593dc678b26f02b58286"
                    ]
                },
                {
                    "command": [
                        "pattern m at 2; rewrite <- Rplus_0_r; unfold Rminus; apply Rplus_lt_compat_l; apply Ropp_lt_cancel; rewrite Ropp_involutive; rewrite Ropp_0; apply (cond_pos eps).",
                        "VernacExtend",
                        "bedce9e49097eb2a345d70f8137e61898b658e91"
                    ]
                },
                {
                    "command": [
                        "set (P := fun n:R => A n /\\ m - eps < n <= m); assert (H12 := not_ex_all_not _ P H9); unfold P in H12; unfold is_upper_bound; intros x H13; assert (H14 := not_and_or _ _ (H12 x)); elim H14; intro H15.",
                        "VernacExtend",
                        "29a86ed0ca6d769be08f7f7f8616e82cc6e75de4"
                    ]
                },
                {
                    "command": [
                        "elim H15; apply H13.",
                        "VernacExtend",
                        "d11d247e918f61fb76f44a0af034a55b621fd1c2"
                    ]
                },
                {
                    "command": [
                        "destruct (not_and_or _ _ H15) as [H16|H16].",
                        "VernacExtend",
                        "b6f6383c925431406a32aab7f1e22c3469bbb561"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_dec x (m - eps)) as [H17|H17].",
                        "VernacExtend",
                        "0a93b6ad58797974ba84678d3ef00713286d06c4"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim H16; auto with real.",
                        "VernacExtend",
                        "185a0f74b7299b7e7bc4da98dd4b7bd4d74c15ba"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H10; assert (H17 := H10 x H13); elim H16; apply H17.",
                        "VernacExtend",
                        "d137d26eb7e65ed0db25a724e0fc7ed26765c6ee"
                    ]
                },
                {
                    "command": [
                        "elim H3; clear H3; intros.",
                        "VernacExtend",
                        "3db35272ce4b8ef28a0019318fa63c100f072a8d"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H3.",
                        "VernacExtend",
                        "f8a25fdcf5a32770dc72fc6db00802d1fbe377fd"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (H3 _ H0).",
                        "VernacExtend",
                        "68e01ee422b1cf32e537a1ea653595e871a1897e"
                    ]
                },
                {
                    "command": [
                        "clear H5.",
                        "VernacExtend",
                        "27e7490763b843a17bd590552e39601d3a9ed430"
                    ]
                },
                {
                    "command": [
                        "apply (H4 b); unfold is_upper_bound; intros x H5; unfold A in H5; elim H5; clear H5; intros H5 _; elim H5; clear H5; intros _ H5; apply H5.",
                        "VernacExtend",
                        "f01c121e633eae66f78ead44c9fe2a8abfc7b9d6"
                    ]
                },
                {
                    "command": [
                        "exists a; apply H0.",
                        "VernacExtend",
                        "532a4cf425dbcb042313c58b34af62c4e88ba828"
                    ]
                },
                {
                    "command": [
                        "unfold bound; exists b; unfold is_upper_bound; intros; unfold A in H1; elim H1; clear H1; intros H1 _; elim H1; clear H1; intros _ H1; apply H1.",
                        "VernacExtend",
                        "e6d9b5bfb251f780c6064088bdf3c7b9afe3b5d4"
                    ]
                },
                {
                    "command": [
                        "unfold A; split.",
                        "VernacExtend",
                        "9493cff9c152923032c34cef75b2c25b83843f1e"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | apply Hle ].",
                        "VernacExtend",
                        "e03e79aada6afcf7ecffd3ad0280c800b59231ec"
                    ]
                },
                {
                    "command": [
                        "unfold covering in H; cut (a <= a <= b).",
                        "VernacExtend",
                        "5eedcf33ef11398dbe03eeabcfccde4ff7d9faab"
                    ]
                },
                {
                    "command": [
                        "intro H1; elim (H _ H1); intros y0 H2; set (D' := fun x:R => x = y0); exists D'; unfold covering_finite; split.",
                        "VernacExtend",
                        "8e140e5cae0b0336151ea99192edb7d6326dc796"
                    ]
                },
                {
                    "command": [
                        "unfold covering; simpl; intros x H3; cut (x = a).",
                        "VernacExtend",
                        "2d154d3c1660d6b012a22092abb487decd2766a5"
                    ]
                },
                {
                    "command": [
                        "intro H4; exists y0; split.",
                        "VernacExtend",
                        "645603253f4d31abdbab8be8ce0c41d8b613951a"
                    ]
                },
                {
                    "command": [
                        "rewrite H4; apply H2.",
                        "VernacExtend",
                        "e267fb0c72800f39feddbad2a7d6a034ca9a1c72"
                    ]
                },
                {
                    "command": [
                        "unfold D'; reflexivity.",
                        "VernacExtend",
                        "c146ac5ce939e8a883bf3006a4620abeb73cab26"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "a6fa35d8b2289d82e02f54e10b22335dbb685ad8"
                    ]
                },
                {
                    "command": [
                        "unfold family_finite; unfold domain_finite; exists (cons y0 nil); intro; split.",
                        "VernacExtend",
                        "8f61458058216f634acf3eef75bc576f6aece281"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold intersection_domain; intros (H3,H4).",
                        "VernacExtend",
                        "1c2233279151f1fc808f45c6f60a19e0490c713e"
                    ]
                },
                {
                    "command": [
                        "unfold D' in H4; left; apply H4.",
                        "VernacExtend",
                        "351fd3c7dc23efd71b3da22ae3d1d0721e971d46"
                    ]
                },
                {
                    "command": [
                        "simpl; unfold intersection_domain; intros [H4|[]].",
                        "VernacExtend",
                        "09bdbdb85ec69735388edd971ae75ba492606b24"
                    ]
                },
                {
                    "command": [
                        "split; [ rewrite H4; apply (cond_fam f0); exists a; apply H2 | apply H4 ].",
                        "VernacExtend",
                        "3b4fee06967ff8f7ea7d163358025ceb51f56463"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | apply Hle ].",
                        "VernacExtend",
                        "e03e79aada6afcf7ecffd3ad0280c800b59231ec"
                    ]
                },
                {
                    "command": [
                        "apply compact_eqDom with (fun c:R => False).",
                        "VernacExtend",
                        "b9d68bfaf9ad651f9822437654a4713e3e9167ac"
                    ]
                },
                {
                    "command": [
                        "apply compact_EMP.",
                        "VernacExtend",
                        "fe769288016801721a197d89c0dd35b398d3a6c2"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; split.",
                        "VernacExtend",
                        "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; elim H.",
                        "VernacExtend",
                        "41bbef28f12938c4df336ceeee645676054e9875"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; elim H; clear H; intros; assert (H1 := Rle_trans _ _ _ H H0); elim Hnle; apply H1.",
                        "VernacExtend",
                        "11d0b4441c9556123f12b5661914f360965a0c6b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compact_P4",
            "line_nb": 483,
            "steps": [
                {
                    "command": [
                        "unfold compact; intros; elim (classic (exists z : R, F z)); intro Hyp_F_NE.",
                        "VernacExtend",
                        "0f15a2fee0f0465dd30d4317b1e38b043df6aa14"
                    ]
                },
                {
                    "command": [
                        "set (D := ind f0); set (g := f f0); unfold closed_set in H0.",
                        "VernacExtend",
                        "8fbff0639a5e7999327a5423415118f4ec40be24"
                    ]
                },
                {
                    "command": [
                        "set (g' := fun x y:R => f0 x y \\/ complementary F y /\\ D x).",
                        "VernacExtend",
                        "8e5058172c1effcc9c96337c741ec32b871f48e7"
                    ]
                },
                {
                    "command": [
                        "set (D' := D).",
                        "VernacExtend",
                        "bf1a3b39ec7ebf6934456f71d22375653f9f48de"
                    ]
                },
                {
                    "command": [
                        "cut (forall x:R, (exists y : R, g' x y) -> D' x).",
                        "VernacExtend",
                        "9f20709e81fc919779146638d438e8369cd823db"
                    ]
                },
                {
                    "command": [
                        "intro; set (f' := mkfamily D' g' H3); cut (covering_open_set X f').",
                        "VernacExtend",
                        "2ce83e7f65c6dd2cf6085c978ca66a8f68c71cf7"
                    ]
                },
                {
                    "command": [
                        "intro; elim (H _ H4); intros DX H5; exists DX.",
                        "VernacExtend",
                        "3bce8098c192c75a4e406c6f3d67659b07a5957f"
                    ]
                },
                {
                    "command": [
                        "unfold covering_finite; unfold covering_finite in H5; elim H5; clear H5; intros.",
                        "VernacExtend",
                        "22a6b46c1408d662dee17f9abbfe011fcea75f28"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold covering; unfold covering in H5; intros.",
                        "VernacExtend",
                        "bf055c101daf658758e278058da59d5499159d6b"
                    ]
                },
                {
                    "command": [
                        "elim (H5 _ (H1 _ H7)); intros y0 H8; exists y0; simpl in H8; simpl; elim H8; clear H8; intros.",
                        "VernacExtend",
                        "dbd434b39f6231087ef5501cac060bb80c9c7205"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold g' in H8; elim H8; intro.",
                        "VernacExtend",
                        "89d0686a8e595b5dd56f1d3acef7a654fb33db45"
                    ]
                },
                {
                    "command": [
                        "apply H10.",
                        "VernacExtend",
                        "169c3dd7a02593ce4f62696429eb3c1035f98388"
                    ]
                },
                {
                    "command": [
                        "elim H10; intros H11 _; unfold complementary in H11; elim H11; apply H7.",
                        "VernacExtend",
                        "586d499e568cd1b899fc63be47f525eacd8b4515"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "unfold family_finite; unfold domain_finite; unfold family_finite in H6; unfold domain_finite in H6; elim H6; clear H6; intros l H6; exists l; intro; assert (H7 := H6 x); elim H7; clear H7; intros.",
                        "VernacExtend",
                        "7caec028be111784b8ca9b3711847f86a6508b96"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "intro; apply H7; simpl; unfold intersection_domain; simpl in H9; unfold intersection_domain in H9; unfold D'; apply H9.",
                        "VernacExtend",
                        "06c0c258749241fdc9429dba914e5a45e2d3d246"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H10 := H8 H9); simpl in H10; unfold intersection_domain in H10; simpl; unfold intersection_domain; unfold D' in H10; apply H10.",
                        "VernacExtend",
                        "21634f527cc514eb60379aeef61043e2514636da"
                    ]
                },
                {
                    "command": [
                        "unfold covering_open_set; unfold covering_open_set in H2; elim H2; clear H2; intros.",
                        "VernacExtend",
                        "de18a96e58d39a69c91919b3505b4dde2b8a3904"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold covering; unfold covering in H2; intros.",
                        "VernacExtend",
                        "6887948a4ffd2255460bbf705f6b84496b4a789e"
                    ]
                },
                {
                    "command": [
                        "elim (classic (F x)); intro.",
                        "VernacExtend",
                        "51f38680e45296d0d1c62e18c72d0b2a2b700e6c"
                    ]
                },
                {
                    "command": [
                        "elim (H2 _ H6); intros y0 H7; exists y0; simpl; unfold g'; left; assumption.",
                        "VernacExtend",
                        "45c962c617070fed5afea16fea4481b41200e547"
                    ]
                },
                {
                    "command": [
                        "cut (exists z : R, D z).",
                        "VernacExtend",
                        "26ba8b7bef47dcfa4ddbe086b77de3a8e9cc6983"
                    ]
                },
                {
                    "command": [
                        "intro; elim H7; clear H7; intros x0 H7; exists x0; simpl; unfold g'; right.",
                        "VernacExtend",
                        "b71dbd0cbe0e5e491d4466c78ab1e5eb60384c8a"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold complementary; apply H6.",
                        "VernacExtend",
                        "187f1c60d3f9c7ea8da7a88b31f1d29780f91ab8"
                    ]
                },
                {
                    "command": [
                        "apply H7.",
                        "VernacExtend",
                        "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
                    ]
                },
                {
                    "command": [
                        "elim Hyp_F_NE; intros z0 H7.",
                        "VernacExtend",
                        "72f238ae8b3ad37fffad88e101920bfaa412061d"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := H2 _ H7).",
                        "VernacExtend",
                        "d64b3bfe9cc801944d0ecb54d6edf802f74e98db"
                    ]
                },
                {
                    "command": [
                        "elim H8; clear H8; intros t H8; exists t; apply (cond_fam f0); exists z0; apply H8.",
                        "VernacExtend",
                        "1aa9a4fcfd79348728ff8e5527f3677b5da043db"
                    ]
                },
                {
                    "command": [
                        "unfold family_open_set; intro; simpl; unfold g'; elim (classic (D x)); intro.",
                        "VernacExtend",
                        "5e2cc11b58b65264e05ed605fce63f51731752ea"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P6 with (union_domain (f0 x) (complementary F)).",
                        "VernacExtend",
                        "9bb38892bff83c317bcfdb4bfb0c527bfe4eb570"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P2.",
                        "VernacExtend",
                        "b29662779208a5b491fbcb3b1cee6f199883d5f6"
                    ]
                },
                {
                    "command": [
                        "unfold family_open_set in H4; apply H4.",
                        "VernacExtend",
                        "45592dd6f9c1d3a231e1f9a56effae02b5c1e222"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; split.",
                        "VernacExtend",
                        "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
                    ]
                },
                {
                    "command": [
                        "unfold included, union_domain, complementary; intros.",
                        "VernacExtend",
                        "ca8e65258df46c6c3084b9aa91804496c75cf526"
                    ]
                },
                {
                    "command": [
                        "elim H6; intro; [ left; apply H7 | right; split; assumption ].",
                        "VernacExtend",
                        "14fc9585355952abc1d693c2e33eec09127ebddc"
                    ]
                },
                {
                    "command": [
                        "unfold included, union_domain, complementary; intros.",
                        "VernacExtend",
                        "ca8e65258df46c6c3084b9aa91804496c75cf526"
                    ]
                },
                {
                    "command": [
                        "elim H6; intro; [ left; apply H7 | right; elim H7; intros; apply H8 ].",
                        "VernacExtend",
                        "30aaf726af2a6851d430a84fcb055cfce1f3737b"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P6 with (f0 x).",
                        "VernacExtend",
                        "82cc86e47c6ed9e2c4ea656780175dda8e320a1c"
                    ]
                },
                {
                    "command": [
                        "unfold family_open_set in H4; apply H4.",
                        "VernacExtend",
                        "45592dd6f9c1d3a231e1f9a56effae02b5c1e222"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; split.",
                        "VernacExtend",
                        "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
                    ]
                },
                {
                    "command": [
                        "unfold included, complementary; intros; left; apply H6.",
                        "VernacExtend",
                        "d2f8725f5b57bc1ab510e144e118d825b2c99a16"
                    ]
                },
                {
                    "command": [
                        "unfold included, complementary; intros.",
                        "VernacExtend",
                        "1282e5177e5165ac650714a3385639a9992eb495"
                    ]
                },
                {
                    "command": [
                        "elim H6; intro.",
                        "VernacExtend",
                        "e85bcbbf1e2e7245dba06fdc165dee137f165a99"
                    ]
                },
                {
                    "command": [
                        "apply H7.",
                        "VernacExtend",
                        "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
                    ]
                },
                {
                    "command": [
                        "elim H7; intros _ H8; elim H5; apply H8.",
                        "VernacExtend",
                        "f9b42c3e8a81210e1443e4672ff349ab36cfbcb7"
                    ]
                },
                {
                    "command": [
                        "intros; elim H3; intros y0 H4; unfold g' in H4; elim H4; intro.",
                        "VernacExtend",
                        "60ffa7c0d9f263d44c26139c149f95e1a5072221"
                    ]
                },
                {
                    "command": [
                        "apply (cond_fam f0); exists y0; apply H5.",
                        "VernacExtend",
                        "3a898f63fb399a865430ec91e7d061fb086f2dd9"
                    ]
                },
                {
                    "command": [
                        "elim H5; clear H5; intros _ H5; apply H5.",
                        "VernacExtend",
                        "e0224a9d919ee64798795a08f934215c673f0251"
                    ]
                },
                {
                    "command": [
                        "cut (compact F).",
                        "VernacExtend",
                        "d627806bb9a1c99b92c7fcf25c93ebf2c4986ca2"
                    ]
                },
                {
                    "command": [
                        "intro; apply (H3 f0 H2).",
                        "VernacExtend",
                        "4e6142e413b66b7af526691f92788020d8762b6a"
                    ]
                },
                {
                    "command": [
                        "apply compact_eqDom with (fun _:R => False).",
                        "VernacExtend",
                        "f407dbf754728ea2c545bda73542601fdd59ad45"
                    ]
                },
                {
                    "command": [
                        "apply compact_EMP.",
                        "VernacExtend",
                        "fe769288016801721a197d89c0dd35b398d3a6c2"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; split.",
                        "VernacExtend",
                        "f58619fdb65a3bfd9d11743b3056678ae4fe5f68"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; elim H3.",
                        "VernacExtend",
                        "d4440b493731deaedff8e01aa471e7d52c1b2711"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := not_ex_all_not _ _ Hyp_F_NE); unfold included; intros; elim (H3 x); apply H4.",
                        "VernacExtend",
                        "8b0a91bfba0781a7611517a80f44e5536d626c87"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compact_P5",
            "line_nb": 546,
            "steps": [
                {
                    "command": [
                        "intros; unfold bounded in H0.",
                        "VernacExtend",
                        "9a61f0fb8868dd1431bfbf20a714a84040d75ac2"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros m H0.",
                        "VernacExtend",
                        "9176d27bb766bafcd5e73da88d0a72d6030eff48"
                    ]
                },
                {
                    "command": [
                        "elim H0; clear H0; intros M H0.",
                        "VernacExtend",
                        "0ed865a4f0df306ad400a12c25f8409cec07543d"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := compact_P3 m M).",
                        "VernacExtend",
                        "d683979a1c806e45cc80a01bdff68a0129803046"
                    ]
                },
                {
                    "command": [
                        "apply (compact_P4 (fun c:R => m <= c <= M) X H1 H H0).",
                        "VernacExtend",
                        "2f8d9d73ba416fca9590ddb33ca3cd72cdd92735"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compact_carac",
            "line_nb": 553,
            "steps": [
                {
                    "command": [
                        "intro; split.",
                        "VernacExtend",
                        "fab266bb307ddec4a6ab91d7f2efd84a9c1736ef"
                    ]
                },
                {
                    "command": [
                        "intro; split; [ apply (compact_P2 _ H) | apply (compact_P1 _ H) ].",
                        "VernacExtend",
                        "0ac18aab24b33755f0c8991e4c3b3283db193e73"
                    ]
                },
                {
                    "command": [
                        "intro; elim H; clear H; intros; apply (compact_P5 _ H H0).",
                        "VernacExtend",
                        "4460afe1671a410577a587c04a4cc1cd0d1667a7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_compact",
            "line_nb": 559,
            "steps": [
                {
                    "command": [
                        "unfold compact; intros; unfold covering_open_set in H1.",
                        "VernacExtend",
                        "bcbe9002c556b59d3b8901f93c2552949f2400a8"
                    ]
                },
                {
                    "command": [
                        "elim H1; clear H1; intros.",
                        "VernacExtend",
                        "0b5cb27effffecbbbd63492c580499a3c4277ed9"
                    ]
                },
                {
                    "command": [
                        "set (D := ind f1).",
                        "VernacExtend",
                        "8a200163ead8f9516970a3077b766ba2103bb38f"
                    ]
                },
                {
                    "command": [
                        "set (g := fun x y:R => image_rec f0 (f1 x) y).",
                        "VernacExtend",
                        "40bdc0f3e8651baebf91ab1911232618a044db31"
                    ]
                },
                {
                    "command": [
                        "cut (forall x:R, (exists y : R, g x y) -> D x).",
                        "VernacExtend",
                        "928ebdf298673d4cd86433f871654df439774d31"
                    ]
                },
                {
                    "command": [
                        "intro; set (f' := mkfamily D g H3).",
                        "VernacExtend",
                        "312d131baff17c9cf1cd050a7422954682a649ff"
                    ]
                },
                {
                    "command": [
                        "cut (covering_open_set X f').",
                        "VernacExtend",
                        "4a7bb0d448b8461930874559d74ed864928cd294"
                    ]
                },
                {
                    "command": [
                        "intro; elim (H0 f' H4); intros D' H5; exists D'.",
                        "VernacExtend",
                        "4fda249be47dbbd89109728bb8c38f1b5d6ebea3"
                    ]
                },
                {
                    "command": [
                        "unfold covering_finite in H5; elim H5; clear H5; intros; unfold covering_finite; split.",
                        "VernacExtend",
                        "ec7db982611213a047e31eb39d455f58badd37ed"
                    ]
                },
                {
                    "command": [
                        "unfold covering, image_dir; simpl; unfold covering in H5; intros; elim H7; intros y H8; elim H8; intros; assert (H11 := H5 _ H10); simpl in H11; elim H11; intros z H12; exists z; unfold g in H12; unfold image_rec in H12; rewrite H9; apply H12.",
                        "VernacExtend",
                        "3f5139337b0cc099c8da2aa4c2e74a576e3f38a1"
                    ]
                },
                {
                    "command": [
                        "unfold family_finite in H6; unfold domain_finite in H6; unfold family_finite; unfold domain_finite; elim H6; intros l H7; exists l; intro; elim (H7 x); intros; split; intro.",
                        "VernacExtend",
                        "bef29c07dbec230f503b478cc551835bf4196062"
                    ]
                },
                {
                    "command": [
                        "apply H8; simpl in H10; simpl; apply H10.",
                        "VernacExtend",
                        "b75b7e65674df6edf67df445c845366d1b490c49"
                    ]
                },
                {
                    "command": [
                        "apply (H9 H10).",
                        "VernacExtend",
                        "8c76fd372cfc6acf2bd08014f01d61974d3d56ed"
                    ]
                },
                {
                    "command": [
                        "unfold covering_open_set; split.",
                        "VernacExtend",
                        "1c919de8626e4277fdd15de9bc1f5bc1d8203b10"
                    ]
                },
                {
                    "command": [
                        "unfold covering; intros; simpl; unfold covering in H1; unfold image_dir in H1; unfold g; unfold image_rec; apply H1.",
                        "VernacExtend",
                        "6e5b316d3521f612e8ebd1c20943a48d31c6e6d2"
                    ]
                },
                {
                    "command": [
                        "exists x; split; [ reflexivity | apply H4 ].",
                        "VernacExtend",
                        "a6d349cde3594548f7d2861d70fa940949659e52"
                    ]
                },
                {
                    "command": [
                        "unfold family_open_set; unfold family_open_set in H2; intro; simpl; unfold g; cut ((fun y:R => image_rec f0 (f1 x) y) = image_rec f0 (f1 x)).",
                        "VernacExtend",
                        "d06cbb5d8c173f944e57d03b78747f7cd69ccf6b"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H4.",
                        "VernacExtend",
                        "f7eb81a07050313ee650e7e0bf81a6c661821ea9"
                    ]
                },
                {
                    "command": [
                        "apply (continuity_P2 f0 (f1 x) H (H2 x)).",
                        "VernacExtend",
                        "c2d31537533042b9a49546e28587ffb3b3931033"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "intros; apply (cond_fam f1); unfold g in H3; unfold image_rec in H3; elim H3; intros; exists (f0 x0); apply H4.",
                        "VernacExtend",
                        "4080f195732b0ab93e12bc5e91e497889363fd82"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prolongement_C0",
            "line_nb": 582,
            "steps": [
                {
                    "command": [
                        "intros; elim H; intro.",
                        "VernacExtend",
                        "e5597b54ab315f2311ce04817ec4ee080463a703"
                    ]
                },
                {
                    "command": [
                        "set (h := fun x:R => match Rle_dec x a with | left _ => f0 a | right _ => match Rle_dec x b with | left _ => f0 x | right _ => f0 b end end).",
                        "VernacExtend",
                        "964333762406e81bd0fb1844a04f96780cca63b6"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : 0 < b - a).",
                        "VernacExtend",
                        "e6114a7752f556d6b4746f509bbc5921ab3f0ffb"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Rminus; assumption.",
                        "VernacExtend",
                        "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
                    ]
                },
                {
                    "command": [
                        "exists h; split.",
                        "VernacExtend",
                        "cd0b047d1188caf5c2e90a2619decc44defce645"
                    ]
                },
                {
                    "command": [
                        "unfold continuity; intro; case (Rtotal_order x a); intro.",
                        "VernacExtend",
                        "d97ea2cdbf69221f379799c6f41989f66549032c"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; exists (a - x); split.",
                        "VernacExtend",
                        "5a5a8fb99fc55c32e41d8a0da30eb97dac02e911"
                    ]
                },
                {
                    "command": [
                        "change (0 < a - x); apply Rlt_Rminus; assumption.",
                        "VernacExtend",
                        "1dc4b09730bea0df5b447584cb7d670a7bb5b1aa"
                    ]
                },
                {
                    "command": [
                        "intros; elim H5; clear H5; intros _ H5; unfold h.",
                        "VernacExtend",
                        "9a5d376fb3fcff9aee5d0f2425f784501f13550e"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x a) as [|[]].",
                        "VernacExtend",
                        "4e29d6a5d54d5336757b20e90238802509cabbf2"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x0 a) as [|[]].",
                        "VernacExtend",
                        "2507d561a0c58868bec482f2cf996f60718c7b88"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_opp_r, Rabs_R0; assumption.",
                        "VernacExtend",
                        "47761bba33f19c7cdacd95c783fa8cd57e830c0a"
                    ]
                },
                {
                    "command": [
                        "left; apply Rplus_lt_reg_l with (- x); do 2 rewrite (Rplus_comm (- x)); apply Rle_lt_trans with (Rabs (x0 - x)).",
                        "VernacExtend",
                        "0ed1bc137f384fd8cc585dd64579aa451e98a2af"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "elim H3; intro.",
                        "VernacExtend",
                        "522e36e2853ff30db9e3e0abc7a128144a4e937c"
                    ]
                },
                {
                    "command": [
                        "assert (H5 : a <= a <= b).",
                        "VernacExtend",
                        "1a318c43a93f9c7580fa6fd58ec70ea518a79247"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "6bab46c1adec52d812fd328f9f48728040031941"
                    ]
                },
                {
                    "command": [
                        "assert (H6 := H0 _ H5); unfold continuity_pt in H6; unfold continue_in in H6; unfold limit1_in in H6; unfold limit_in in H6; simpl in H6; unfold R_dist in H6; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; elim (H6 _ H7); intros; exists (Rmin x0 (b - a)); split.",
                        "VernacExtend",
                        "c6df10dbf2f3336ff31e200eca35e5372b0a3e0c"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec x0 (b - a)); intro.",
                        "VernacExtend",
                        "297a72a6c97037d97dc08430721bc814cde746fa"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; assumption.",
                        "VernacExtend",
                        "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
                    ]
                },
                {
                    "command": [
                        "change (0 < b - a); apply Rlt_Rminus; assumption.",
                        "VernacExtend",
                        "5caff84c0865710a0efc16f4366abbb133c16514"
                    ]
                },
                {
                    "command": [
                        "intros; elim H9; clear H9; intros _ H9; cut (x1 < b).",
                        "VernacExtend",
                        "8b3f5be49488cfca311285688c3f5407f4f1ddaa"
                    ]
                },
                {
                    "command": [
                        "intro; unfold h; case (Rle_dec x a) as [|[]].",
                        "VernacExtend",
                        "55b83f92d4253c2ea1493da1bede9f01d20e0ff7"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x1 a) as [Hlta|Hnlea].",
                        "VernacExtend",
                        "07c67b08c11c579b59e0efc67afc70a397430586"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
                        "VernacExtend",
                        "c1de84b8ec8a6c422226e5ca95d3db00e63bd56e"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x1 b) as [Hleb|[]].",
                        "VernacExtend",
                        "553b5e13a733abd69f3bddc97a56e607d95f588f"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; apply H12; split.",
                        "VernacExtend",
                        "932c01e0df61e80d7e5453cbc61e63a84db9c6d7"
                    ]
                },
                {
                    "command": [
                        "unfold D_x, no_cond; split.",
                        "VernacExtend",
                        "121e72bbd9a8ad97e9353edec680d410ccaf17ee"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "red; intro; elim Hnlea; right; symmetry ; assumption.",
                        "VernacExtend",
                        "1e0aee1e840f0273d1e99ba5d257b57237fd69a5"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rmin x0 (b - a)).",
                        "VernacExtend",
                        "8d444f6c292aab9fae62352c6219a9340bd8e935"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H9; apply H9.",
                        "VernacExtend",
                        "41808de0df62821fcf92f201c7c208a05a6d8451"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (- a); do 2 rewrite (Rplus_comm (- a)); rewrite H4 in H9; apply Rle_lt_trans with (Rabs (x1 - a)).",
                        "VernacExtend",
                        "2d598b1d8190a031f1095de110c5fb80806833f2"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rmin x0 (b - a)).",
                        "VernacExtend",
                        "8d444f6c292aab9fae62352c6219a9340bd8e935"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "case (Rtotal_order x b); intro.",
                        "VernacExtend",
                        "9700fe74799d1a3c0066eed3b83c3a70249b537d"
                    ]
                },
                {
                    "command": [
                        "assert (H6 : a <= x <= b).",
                        "VernacExtend",
                        "4f063374f281da4fb500db7d9998f70bcea62cf2"
                    ]
                },
                {
                    "command": [
                        "split; left; assumption.",
                        "VernacExtend",
                        "fdfa29011e9dae8a9167d139e5179b516d7a668c"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := H0 _ H6); unfold continuity_pt in H7; unfold continue_in in H7; unfold limit1_in in H7; unfold limit_in in H7; simpl in H7; unfold R_dist in H7; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; elim (H7 _ H8); intros; elim H9; clear H9; intros.",
                        "VernacExtend",
                        "8b5383ade1c129dcacbb6a362393307e45fe9789"
                    ]
                },
                {
                    "command": [
                        "assert (H11 : 0 < x - a).",
                        "VernacExtend",
                        "057bef07ae3cb72bca66ab89e40aebb3a9abc0f8"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Rminus; assumption.",
                        "VernacExtend",
                        "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
                    ]
                },
                {
                    "command": [
                        "assert (H12 : 0 < b - x).",
                        "VernacExtend",
                        "9626077e4ca5ceb34942f46f6da47c2efc5a1836"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_Rminus; assumption.",
                        "VernacExtend",
                        "d43a974c49c6a8fd3c32a5ad6620248c101a2701"
                    ]
                },
                {
                    "command": [
                        "exists (Rmin x0 (Rmin (x - a) (b - x))); split.",
                        "VernacExtend",
                        "d8e3be8c34334cb845a27314272a8342cc02fa4e"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec (x - a) (b - x)) as [Hle|Hnle].",
                        "VernacExtend",
                        "431c5952fd139fd918a4d1910a43964e7ec6e91f"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x0 (x - a)) as [Hlea|Hnlea].",
                        "VernacExtend",
                        "1f69ff5b71c482a22532b1a5ff1709f5b1fcd27f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x0 (b - x)) as [Hleb|Hnleb].",
                        "VernacExtend",
                        "47d6ed55d45cac0f8db33e408e643d971e63ff03"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros x1 (H13,H14); cut (a < x1 < b).",
                        "VernacExtend",
                        "495532a972d21ee6c55972346dafcd8717b8f6dd"
                    ]
                },
                {
                    "command": [
                        "intro; elim H15; clear H15; intros; unfold h; case (Rle_dec x a) as [Hle|Hnle].",
                        "VernacExtend",
                        "fdb7655e9dc86b92d9f89aac438c69657b49bfc2"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle H4)).",
                        "VernacExtend",
                        "45b8e3f97925c37469685abefd405044860a6169"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x b) as [|[]].",
                        "VernacExtend",
                        "bb01d6cde1202cc42e37d85e6b50f28d2296e4e0"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x1 a) as [Hle0|].",
                        "VernacExtend",
                        "837673ba500f49e1571c6bfaa5b57fe40f2be71f"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle0 H15)).",
                        "VernacExtend",
                        "b05e280385fc3bfd2aa9747447b59d166103bbc9"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x1 b) as [|[]].",
                        "VernacExtend",
                        "dd813af4d930db0b5b917bf3bf8026ab6f945c3b"
                    ]
                },
                {
                    "command": [
                        "apply H10; split.",
                        "VernacExtend",
                        "b550e2abc04d6053388b28d2d1b3c0577deb6f85"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rmin x0 (Rmin (x - a) (b - x))).",
                        "VernacExtend",
                        "96dcd98c754bac4b394b12bc975bc7ec1878f9e5"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel; apply Rplus_lt_reg_l with x; apply Rle_lt_trans with (Rabs (x1 - x)).",
                        "VernacExtend",
                        "88d71d6474fb50f54d74abab869485b7160d73c2"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply RRle_abs.",
                        "VernacExtend",
                        "7011ff8c44bcdbea135883b84f45196054dcd9da"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rmin x0 (Rmin (x - a) (b - x))).",
                        "VernacExtend",
                        "96dcd98c754bac4b394b12bc975bc7ec1878f9e5"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rmin (x - a) (b - x)).",
                        "VernacExtend",
                        "315400d67307bf57f6f048c7ec0c91c377200071"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (- x); do 2 rewrite (Rplus_comm (- x)); apply Rle_lt_trans with (Rabs (x1 - x)).",
                        "VernacExtend",
                        "4121a2e2b5dd3633bce52e22dc337262a95dadda"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rmin x0 (Rmin (x - a) (b - x))).",
                        "VernacExtend",
                        "96dcd98c754bac4b394b12bc975bc7ec1878f9e5"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rmin (x - a) (b - x)); apply Rmin_r.",
                        "VernacExtend",
                        "6eb31cfa31e240d7d03069450e09044b04a2d353"
                    ]
                },
                {
                    "command": [
                        "elim H5; intro.",
                        "VernacExtend",
                        "29923dfc32add298aa4e01bbfee147f65e05faf2"
                    ]
                },
                {
                    "command": [
                        "assert (H7 : a <= b <= b).",
                        "VernacExtend",
                        "ed819a9325d39eaf2d6b44714add170e08953c06"
                    ]
                },
                {
                    "command": [
                        "split; [ left; assumption | right; reflexivity ].",
                        "VernacExtend",
                        "7f83d8514281eecf7d46d76f6ccefd321f22c757"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := H0 _ H7); unfold continuity_pt in H8; unfold continue_in in H8; unfold limit1_in in H8; unfold limit_in in H8; simpl in H8; unfold R_dist in H8; unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; elim (H8 _ H9); intros; exists (Rmin x0 (b - a)); split.",
                        "VernacExtend",
                        "3f85d733b1d3086a63e078a09b58cd35937540c5"
                    ]
                },
                {
                    "command": [
                        "unfold Rmin; case (Rle_dec x0 (b - a)); intro.",
                        "VernacExtend",
                        "297a72a6c97037d97dc08430721bc814cde746fa"
                    ]
                },
                {
                    "command": [
                        "elim H10; intros; assumption.",
                        "VernacExtend",
                        "441b8572d6746494b264263afd889422a8335e89"
                    ]
                },
                {
                    "command": [
                        "change (0 < b - a); apply Rlt_Rminus; assumption.",
                        "VernacExtend",
                        "5caff84c0865710a0efc16f4366abbb133c16514"
                    ]
                },
                {
                    "command": [
                        "intros; elim H11; clear H11; intros _ H11; cut (a < x1).",
                        "VernacExtend",
                        "b189a446c6ce4d52855b93881260237e9150a24f"
                    ]
                },
                {
                    "command": [
                        "intro; unfold h; case (Rle_dec x a) as [Hlea|Hnlea].",
                        "VernacExtend",
                        "a89ebd590c8f9c7af07e0931cdf19bd7effe3fa0"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hlea H4)).",
                        "VernacExtend",
                        "c0dce4f7b48939c853f9da792063304539a4099c"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x1 a) as [Hlea'|Hnlea'].",
                        "VernacExtend",
                        "ecfb8fea445ba6a7e9e747f7fbee21f2035874f9"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hlea' H12)).",
                        "VernacExtend",
                        "1b28c9ae5a8a22f5664346db59df32856a1fabbc"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x b) as [Hleb|Hnleb].",
                        "VernacExtend",
                        "849991f47f15fe02f4cb4288b16eb018b200b8f6"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x1 b) as [Hleb'|Hnleb'].",
                        "VernacExtend",
                        "27029e0f19ac64a7c49a9d63fac3b155fc20d742"
                    ]
                },
                {
                    "command": [
                        "rewrite H6; elim H10; intros; destruct Hleb'.",
                        "VernacExtend",
                        "6a60436378208ee7842f59590226ff44fbd97a57"
                    ]
                },
                {
                    "command": [
                        "apply H14; split.",
                        "VernacExtend",
                        "0a8b05d61d3d39984bd7bd6e2ea644e8e1dbbff7"
                    ]
                },
                {
                    "command": [
                        "unfold D_x, no_cond; split.",
                        "VernacExtend",
                        "121e72bbd9a8ad97e9353edec680d410ccaf17ee"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite <- H16 in H15; elim (Rlt_irrefl _ H15).",
                        "VernacExtend",
                        "d8401cc16dc430801526acea8a03c3c328cc89e0"
                    ]
                },
                {
                    "command": [
                        "rewrite H6 in H11; apply Rlt_le_trans with (Rmin x0 (b - a)).",
                        "VernacExtend",
                        "821d0e7f19a4d1e1ea6fb49f77a3ebbc9de9300f"
                    ]
                },
                {
                    "command": [
                        "apply H11.",
                        "VernacExtend",
                        "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_l.",
                        "VernacExtend",
                        "19942458506c6b3427aea84d1ee7179f00e19f1c"
                    ]
                },
                {
                    "command": [
                        "rewrite H15; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
                        "VernacExtend",
                        "0af5ee24a2cf71d7d4968c00eba0c79e1b555d85"
                    ]
                },
                {
                    "command": [
                        "rewrite H6; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
                        "VernacExtend",
                        "11977271ce925598f61aec9be47c51a495f1334d"
                    ]
                },
                {
                    "command": [
                        "elim Hnleb; right; assumption.",
                        "VernacExtend",
                        "2f07761c064b0550b6ef720fdadebf3bfcf517fc"
                    ]
                },
                {
                    "command": [
                        "rewrite H6 in H11; apply Ropp_lt_cancel; apply Rplus_lt_reg_l with b; apply Rle_lt_trans with (Rabs (x1 - b)).",
                        "VernacExtend",
                        "2ab8cae8e02b9e1db9ae6f88727612f9d425fd2c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply RRle_abs.",
                        "VernacExtend",
                        "7011ff8c44bcdbea135883b84f45196054dcd9da"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (Rmin x0 (b - a)).",
                        "VernacExtend",
                        "8d444f6c292aab9fae62352c6219a9340bd8e935"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rmin_r.",
                        "VernacExtend",
                        "d165954e4d055817b42cbc8960efd3fee45e4f16"
                    ]
                },
                {
                    "command": [
                        "unfold continuity_pt; unfold continue_in; unfold limit1_in; unfold limit_in; simpl; unfold R_dist; intros; exists (x - b); split.",
                        "VernacExtend",
                        "e8b77c3806604e73b977504b92cdf3ce0e7d0689"
                    ]
                },
                {
                    "command": [
                        "change (0 < x - b); apply Rlt_Rminus; assumption.",
                        "VernacExtend",
                        "cbb7e0a585a0994eaba684cf1e100cf28e91f799"
                    ]
                },
                {
                    "command": [
                        "intros; elim H8; clear H8; intros.",
                        "VernacExtend",
                        "d76dd20167ea303b0d2f7d89808c72737b1f6afc"
                    ]
                },
                {
                    "command": [
                        "assert (H10 : b < x0).",
                        "VernacExtend",
                        "bc1c5d89b63b05f8fc10c8f734012f5b39139743"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_lt_cancel; apply Rplus_lt_reg_l with x; apply Rle_lt_trans with (Rabs (x0 - x)).",
                        "VernacExtend",
                        "c668808a2c1a74143a78a958d12053bd5c2645d1"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply RRle_abs.",
                        "VernacExtend",
                        "7011ff8c44bcdbea135883b84f45196054dcd9da"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold h; case (Rle_dec x a) as [Hle|Hnle].",
                        "VernacExtend",
                        "f825926efefd962106e8821e6defb9845af83a68"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hle H4)).",
                        "VernacExtend",
                        "45b8e3f97925c37469685abefd405044860a6169"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x b) as [Hleb|Hnleb].",
                        "VernacExtend",
                        "849991f47f15fe02f4cb4288b16eb018b200b8f6"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hleb H6)).",
                        "VernacExtend",
                        "e14481151f7cd748b964bafcf447f681c8b175b4"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x0 a) as [Hlea'|Hnlea'].",
                        "VernacExtend",
                        "c54bad24f459f6ed3c8638b46f6f22de89836887"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rlt_trans _ _ _ H1 (Rlt_le_trans _ _ _ H10 Hlea'))).",
                        "VernacExtend",
                        "620bc845d6933804cce17bbebd6c83f3dd8d0a5f"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec x0 b) as [Hleb'|Hnleb'].",
                        "VernacExtend",
                        "e9d9d119319692b9f25c18b95efdadbb775de375"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ Hleb' H10)).",
                        "VernacExtend",
                        "99da80536c4bc0c9c968b7474207ed615902ac9d"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; assumption.",
                        "VernacExtend",
                        "c1de84b8ec8a6c422226e5ca95d3db00e63bd56e"
                    ]
                },
                {
                    "command": [
                        "intros; elim H3; intros; unfold h; case (Rle_dec c a) as [[|]|].",
                        "VernacExtend",
                        "82e0590c4d415275c912ed8b053472ec52990604"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H4 H6)).",
                        "VernacExtend",
                        "37561721735933854e71d3f78865f095419b2aef"
                    ]
                },
                {
                    "command": [
                        "rewrite H6; reflexivity.",
                        "VernacExtend",
                        "3228dd2dda9c6408e55e6af3ab3544d4b9aabea8"
                    ]
                },
                {
                    "command": [
                        "case (Rle_dec c b) as [|[]].",
                        "VernacExtend",
                        "b50b8800e02370c11ef83467263f9bcfbb3c62c2"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "exists (fun _:R => f0 a); split.",
                        "VernacExtend",
                        "2e5ddcc0707f80174d35ee8a8c3db1408fbc841f"
                    ]
                },
                {
                    "command": [
                        "apply derivable_continuous; apply (derivable_const (f0 a)).",
                        "VernacExtend",
                        "1a6de3f31b5bb70468841a6e649d1da99e0e43b8"
                    ]
                },
                {
                    "command": [
                        "intros; elim H2; intros; rewrite H1 in H3; cut (b = c).",
                        "VernacExtend",
                        "8d68816f00111fb043d92224a20716d365984d06"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite <- H5; rewrite H1; reflexivity.",
                        "VernacExtend",
                        "a6d190bbfb023a9879f524797e29fbb86bbf2a36"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_ab_maj",
            "line_nb": 726,
            "steps": [
                {
                    "command": [
                        "intros; cut (exists g : R -> R, continuity g /\\ (forall c:R, a <= c <= b -> g c = f0 c)).",
                        "VernacExtend",
                        "2b3d173314f5d78d77c1ad267cab1486eb4e6dc6"
                    ]
                },
                {
                    "command": [
                        "intro HypProl.",
                        "VernacExtend",
                        "c66d9d6057d65eb0b73157e3fe9a4eeb73411136"
                    ]
                },
                {
                    "command": [
                        "elim HypProl; intros g Hcont_eq.",
                        "VernacExtend",
                        "f9819bc8ea821d72d1fc798baed27d2595431b56"
                    ]
                },
                {
                    "command": [
                        "elim Hcont_eq; clear Hcont_eq; intros Hcont Heq.",
                        "VernacExtend",
                        "dcc3d8cbb3d21d48a6a3d569b6f5408504428b7e"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := compact_P3 a b).",
                        "VernacExtend",
                        "75250d410be33717be49f460c546deac0cb629a6"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := continuity_compact g (fun c:R => a <= c <= b) Hcont H1).",
                        "VernacExtend",
                        "2636161e8a43c0c76328e0cbcaf897bd06c9eab6"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := compact_P2 _ H2).",
                        "VernacExtend",
                        "34018e6073ee976597817ccde5f09af67bcfa8c7"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := compact_P1 _ H2).",
                        "VernacExtend",
                        "89987e5dc416c856996cffafb159a65600142abc"
                    ]
                },
                {
                    "command": [
                        "cut (bound (image_dir g (fun c:R => a <= c <= b))).",
                        "VernacExtend",
                        "f679a479599258e1d8df44ff2f6ea67d5f906239"
                    ]
                },
                {
                    "command": [
                        "cut (exists x : R, image_dir g (fun c:R => a <= c <= b) x).",
                        "VernacExtend",
                        "26e7388fcf3d133ae17ff8090d1ddd27021e0389"
                    ]
                },
                {
                    "command": [
                        "intros; assert (H7 := completeness _ H6 H5).",
                        "VernacExtend",
                        "536a08a8ed51f0d3e2fd96730e2e54fc99ee51b2"
                    ]
                },
                {
                    "command": [
                        "elim H7; clear H7; intros M H7; cut (image_dir g (fun c:R => a <= c <= b) M).",
                        "VernacExtend",
                        "3bed11009b912668aac3720426dcc003e7d1f33f"
                    ]
                },
                {
                    "command": [
                        "intro; unfold image_dir in H8; elim H8; clear H8; intros Mxx H8; elim H8; clear H8; intros; exists Mxx; split.",
                        "VernacExtend",
                        "e4914d65f36fa3e54f61af362eb7490d67c66cf6"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite <- (Heq c H10); rewrite <- (Heq Mxx H9); intros; rewrite <- H8; unfold is_lub in H7; elim H7; clear H7; intros H7 _; unfold is_upper_bound in H7; apply H7; unfold image_dir; exists c; split; [ reflexivity | apply H10 ].",
                        "VernacExtend",
                        "7454871a59fbe107ea24f2cafb822cf0d9c12c26"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "elim (classic (image_dir g (fun c:R => a <= c <= b) M)); intro.",
                        "VernacExtend",
                        "a999c3993616531b0676e69796e9f306c8cb4782"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "cut (exists eps : posreal, (forall y:R, ~ intersection_domain (disc M eps) (image_dir g (fun c:R => a <= c <= b)) y)).",
                        "VernacExtend",
                        "c088413caf3998048c5d3b0b17a7e4b183b42a09"
                    ]
                },
                {
                    "command": [
                        "intro; elim H9; clear H9; intros eps H9; unfold is_lub in H7; elim H7; clear H7; intros; cut (is_upper_bound (image_dir g (fun c:R => a <= c <= b)) (M - eps)).",
                        "VernacExtend",
                        "9aa309b0ecf6c6ac316a5503b26caa3940c074c2"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H12 := H10 _ H11); cut (M - eps < M).",
                        "VernacExtend",
                        "338d7f128e92a9cc481284a3bb136844558c1efe"
                    ]
                },
                {
                    "command": [
                        "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H12 H13)).",
                        "VernacExtend",
                        "243ba5b6369882a40f8dbc6e9152b9671df6c943"
                    ]
                },
                {
                    "command": [
                        "pattern M at 2; rewrite <- Rplus_0_r; unfold Rminus; apply Rplus_lt_compat_l; apply Ropp_lt_cancel; rewrite Ropp_0; rewrite Ropp_involutive; apply (cond_pos eps).",
                        "VernacExtend",
                        "ef51721cb857cb9961b56c4b2c5662b0a4ce00c2"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound, image_dir; intros; cut (x <= M).",
                        "VernacExtend",
                        "3a68f8c4a9c559de8a258d50b15e101c6fb0ffeb"
                    ]
                },
                {
                    "command": [
                        "intro; destruct (Rle_dec x (M - eps)) as [H13|].",
                        "VernacExtend",
                        "81d51b3594c726cf266dc18f6ad2db1e572bf8ca"
                    ]
                },
                {
                    "command": [
                        "apply H13.",
                        "VernacExtend",
                        "9696b87ee384fc17e17e6c753b792801086b845d"
                    ]
                },
                {
                    "command": [
                        "elim (H9 x); unfold intersection_domain, disc, image_dir; split.",
                        "VernacExtend",
                        "da5dc216add43c946709ef927d7edd752455eb41"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; rewrite Rabs_right.",
                        "VernacExtend",
                        "28af265cb96777844e45c6903efc46403046679f"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (x - eps); replace (x - eps + (M - x)) with (M - eps).",
                        "VernacExtend",
                        "45f643b730fee9d5e874c0d0b9d8ebc78b29ac37"
                    ]
                },
                {
                    "command": [
                        "replace (x - eps + eps) with x.",
                        "VernacExtend",
                        "5601993f96fd2c5d43e91c2a352e037b7a04de5a"
                    ]
                },
                {
                    "command": [
                        "auto with real.",
                        "VernacExtend",
                        "2995b59d794585bf85ae99aac74dfded28d91a3e"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "apply Rge_minus; apply Rle_ge; apply H12.",
                        "VernacExtend",
                        "6fee035d73c5fbdab1cc8da9c3b2f93f6488c97c"
                    ]
                },
                {
                    "command": [
                        "apply H11.",
                        "VernacExtend",
                        "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
                    ]
                },
                {
                    "command": [
                        "apply H7; apply H11.",
                        "VernacExtend",
                        "03bafa283998dc95be690e50f224864b77a979a2"
                    ]
                },
                {
                    "command": [
                        "cut (exists V : R -> Prop, neighbourhood V M /\\ (forall y:R, ~ intersection_domain V (image_dir g (fun c:R => a <= c <= b)) y)).",
                        "VernacExtend",
                        "a1cfdfa514804a73300e1aa2bb43240cc16c4342"
                    ]
                },
                {
                    "command": [
                        "intro; elim H9; intros V H10; elim H10; clear H10; intros.",
                        "VernacExtend",
                        "c900e198b2d4f67a9903f88b6aaf3e83969e7529"
                    ]
                },
                {
                    "command": [
                        "unfold neighbourhood in H10; elim H10; intros del H12; exists del; intros; red; intro; elim (H11 y).",
                        "VernacExtend",
                        "fe39e3e0e19723e8862decf57b7f6d8f9a1c35d2"
                    ]
                },
                {
                    "command": [
                        "unfold intersection_domain; unfold intersection_domain in H13; elim H13; clear H13; intros; split.",
                        "VernacExtend",
                        "591ceb280d1ee9c7807092782e9233868d8b6714"
                    ]
                },
                {
                    "command": [
                        "apply (H12 _ H13).",
                        "VernacExtend",
                        "066c49bc35091ad80d0702c01a28ab239c6e057c"
                    ]
                },
                {
                    "command": [
                        "apply H14.",
                        "VernacExtend",
                        "315c064431a47ec3c8cc41e58a75c8eb749330ef"
                    ]
                },
                {
                    "command": [
                        "cut (~ point_adherent (image_dir g (fun c:R => a <= c <= b)) M).",
                        "VernacExtend",
                        "4fdb5c3e8ffda93097c8cd80ec659669e2a2b85d"
                    ]
                },
                {
                    "command": [
                        "intro; unfold point_adherent in H9.",
                        "VernacExtend",
                        "f632bb95bd3df15ec33cd99f7e1a0017c9a3e6fa"
                    ]
                },
                {
                    "command": [
                        "assert (H10 := not_all_ex_not _ (fun V:R -> Prop => neighbourhood V M -> exists y : R, intersection_domain V (image_dir g (fun c:R => a <= c <= b)) y) H9).",
                        "VernacExtend",
                        "f5f43a7d3f8c35512bface3046f83eb05dcf50f4"
                    ]
                },
                {
                    "command": [
                        "elim H10; intros V0 H11; exists V0; assert (H12 := imply_to_and _ _ H11); elim H12; clear H12; intros.",
                        "VernacExtend",
                        "8e8440463c2a95351058b9eb5e806a77e01181b6"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply H12.",
                        "VernacExtend",
                        "5a745b26a30edb1cd58baf290f56d389ba5cf959"
                    ]
                },
                {
                    "command": [
                        "apply (not_ex_all_not _ _ H13).",
                        "VernacExtend",
                        "befec193a599c6c910ad9dcdd914d5b0430f30af"
                    ]
                },
                {
                    "command": [
                        "red; intro; cut (adherence (image_dir g (fun c:R => a <= c <= b)) M).",
                        "VernacExtend",
                        "621918d6082eea536ed49e516955ecd8df9d8087"
                    ]
                },
                {
                    "command": [
                        "intro; elim (closed_set_P1 (image_dir g (fun c:R => a <= c <= b))); intros H11 _; assert (H12 := H11 H3).",
                        "VernacExtend",
                        "3cdfa5b38112244f717a1676c0b1c307fa82d293"
                    ]
                },
                {
                    "command": [
                        "elim H8.",
                        "VernacExtend",
                        "676ff04537b52f84641f1c66db30e1386f2f595f"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom in H12; elim H12; clear H12; intros.",
                        "VernacExtend",
                        "ff2ab8b5f9ebd712498adf7ebbb8c298cc91ada5"
                    ]
                },
                {
                    "command": [
                        "apply (H13 _ H10).",
                        "VernacExtend",
                        "58edd4315fcff1106f74502c94ffbc82ac1966b0"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "exists (g a); unfold image_dir; exists a; split.",
                        "VernacExtend",
                        "f94bf2976737aded3c5b3bbb753e997fffcaa013"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "split; [ right; reflexivity | apply H ].",
                        "VernacExtend",
                        "f4e9b4979849b723bfbbd93e6eb8a20b69f20992"
                    ]
                },
                {
                    "command": [
                        "unfold bound; unfold bounded in H4; elim H4; clear H4; intros m H4; elim H4; clear H4; intros M H4; exists M; unfold is_upper_bound; intros; elim (H4 _ H5); intros _ H6; apply H6.",
                        "VernacExtend",
                        "330f87b54bb74a22a860a1288d1b20a4920052e7"
                    ]
                },
                {
                    "command": [
                        "apply prolongement_C0; assumption.",
                        "VernacExtend",
                        "174750d4332ecce5308c0606f77efaf0f3a76701"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "continuity_ab_min",
            "line_nb": 787,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cut (forall c:R, a <= c <= b -> continuity_pt (- f0) c).",
                        "VernacExtend",
                        "937db956559588e0c618e1ecaa44eaf2f688d6a9"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H2 := continuity_ab_maj (- f0)%F a b H H1); elim H2; intros x0 H3; exists x0; intros; split.",
                        "VernacExtend",
                        "abc3193689fc643c6074eb771ff22cff1ee5a246"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite <- (Ropp_involutive (f0 x0)); rewrite <- (Ropp_involutive (f0 c)); apply Ropp_le_contravar; elim H3; intros; unfold opp_fct in H5; apply H5; apply H4.",
                        "VernacExtend",
                        "0106ce1ee41d792a3ac30050f4da58d80b77275c"
                    ]
                },
                {
                    "command": [
                        "elim H3; intros; assumption.",
                        "VernacExtend",
                        "f02fb1b822404aba5ff1b686b4c857f74184021e"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := H0 _ H1).",
                        "VernacExtend",
                        "0cae2b89ded58ec3886ef32244a64eb27f23ba05"
                    ]
                },
                {
                    "command": [
                        "apply (continuity_pt_opp _ _ H2).",
                        "VernacExtend",
                        "dea61c33da5d35c37968aaacc92779b55c9412e8"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ValAdh_un_exists",
            "line_nb": 799,
            "steps": [
                {
                    "command": [
                        "intros; elim H; intros; unfold f in H0; unfold adherence in H0; unfold point_adherent in H0; assert (H1 : neighbourhood (disc x0 (mkposreal _ Rlt_0_1)) x0).",
                        "VernacExtend",
                        "06a7dd55f3873bd9a4dd645c25782dd121c963d2"
                    ]
                },
                {
                    "command": [
                        "unfold neighbourhood, disc; exists (mkposreal _ Rlt_0_1); unfold included; trivial.",
                        "VernacExtend",
                        "212cbcf88f5a8e568c3737dd3ce0cf2bb196bd79"
                    ]
                },
                {
                    "command": [
                        "elim (H0 _ H1); intros; unfold intersection_domain in H2; elim H2; intros; elim H4; intros; apply H6.",
                        "VernacExtend",
                        "8826f174d23ede54e39f01b514fe7b6c3d6a3a48"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ValAdh_un_prop",
            "line_nb": 805,
            "steps": [
                {
                    "command": [
                        "intros; split; intro.",
                        "VernacExtend",
                        "30c96e47a522a77a5351e4399d9dffcbe0777f62"
                    ]
                },
                {
                    "command": [
                        "unfold ValAdh in H; unfold ValAdh_un; unfold intersection_family; simpl; intros; elim H0; intros N H1; unfold adherence; unfold point_adherent; intros; elim (H V N H2); intros; exists (un x0); unfold intersection_domain; elim H3; clear H3; intros; split.",
                        "VernacExtend",
                        "886f0fbe13db55366bcc05b08879b543cb261b4d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "exists x0; split; [ reflexivity | rewrite H1; apply (le_INR _ _ H3) ].",
                        "VernacExtend",
                        "c9cdb0bb6eb611d78d420c61da9085e2a7f7b927"
                    ]
                },
                {
                    "command": [
                        "exists N; assumption.",
                        "VernacExtend",
                        "99776b93e63482deff952d205637531f86fa8715"
                    ]
                },
                {
                    "command": [
                        "unfold ValAdh; intros; unfold ValAdh_un in H; unfold intersection_family in H; simpl in H; assert (H1 : adherence (fun y0:R => (exists p : nat, y0 = un p /\\ INR N <= INR p) /\\ (exists n : nat, INR N = INR n)) x).",
                        "VernacExtend",
                        "f3e3c58d345edfc2bd2f75e7a3eccbf5652d8395"
                    ]
                },
                {
                    "command": [
                        "apply H; exists N; reflexivity.",
                        "VernacExtend",
                        "7adecbba46be98639a3d9486647600b2ebb0d1da"
                    ]
                },
                {
                    "command": [
                        "unfold adherence in H1; unfold point_adherent in H1; assert (H2 := H1 _ H0); elim H2; intros; unfold intersection_domain in H3; elim H3; clear H3; intros; elim H4; clear H4; intros; elim H4; clear H4; intros; elim H4; clear H4; intros; exists x1; split.",
                        "VernacExtend",
                        "499f568c213542659d47dfe019745bee10ae2ad2"
                    ]
                },
                {
                    "command": [
                        "apply (INR_le _ _ H6).",
                        "VernacExtend",
                        "7aed90410c0e35b07f966de2333d336330abe7c6"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H3; apply H3.",
                        "VernacExtend",
                        "1cb38df4f3ace45012bca492a0196d0f03d0ebb6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "adherence_P4",
            "line_nb": 818,
            "steps": [
                {
                    "command": [
                        "unfold adherence, included; unfold point_adherent; intros; elim (H0 _ H1); unfold intersection_domain; intros; elim H2; clear H2; intros; exists x0; split; [ assumption | apply (H _ H3) ].",
                        "VernacExtend",
                        "3755d05b7ac7a11b31142d02e9483d661845c450"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "compact_P6",
            "line_nb": 824,
            "steps": [
                {
                    "command": [
                        "intros X H Hyp g H0 H1.",
                        "VernacExtend",
                        "5b988cdd3b11e75b4da451d5ac083f35778b8869"
                    ]
                },
                {
                    "command": [
                        "set (D' := ind g).",
                        "VernacExtend",
                        "fb2201abe83a28b0f67278a76b140f6a35fffc77"
                    ]
                },
                {
                    "command": [
                        "set (f' := fun x y:R => complementary (g x) y /\\ D' x).",
                        "VernacExtend",
                        "586a7a10aaf3b03406ce354ffe8595b1e19491a7"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : forall x:R, (exists y : R, f' x y) -> D' x).",
                        "VernacExtend",
                        "e6fa640eb2653f34af40293b089c95d38f485c05"
                    ]
                },
                {
                    "command": [
                        "intros; elim H2; intros; unfold f' in H3; elim H3; intros; assumption.",
                        "VernacExtend",
                        "5de225a8d7b5638e784a618e04effb563a64a02f"
                    ]
                },
                {
                    "command": [
                        "set (f0 := mkfamily D' f' H2).",
                        "VernacExtend",
                        "a0b1d01f86cbc90bcbb1a30714d6e8ae2108a987"
                    ]
                },
                {
                    "command": [
                        "unfold compact in H; assert (H3 : covering_open_set X f0).",
                        "VernacExtend",
                        "754eafe8e5ed6f8ef1a49fd90604488b75ab21af"
                    ]
                },
                {
                    "command": [
                        "unfold covering_open_set; split.",
                        "VernacExtend",
                        "1c919de8626e4277fdd15de9bc1f5bc1d8203b10"
                    ]
                },
                {
                    "command": [
                        "unfold covering; intros; unfold intersection_vide_in in H1; elim (H1 x); intros; unfold intersection_family in H5; assert (H6 := not_ex_all_not _ (fun y:R => forall y0:R, ind g y0 -> g y0 y) H5 x); assert (H7 := not_all_ex_not _ (fun y0:R => ind g y0 -> g y0 x) H6); elim H7; intros; exists x0; elim (imply_to_and _ _ H8); intros; unfold f0; simpl; unfold f'; split; [ apply H10 | apply H9 ].",
                        "VernacExtend",
                        "d2334793bacf34d1cfb8b501f8216b6d2ee85dc7"
                    ]
                },
                {
                    "command": [
                        "unfold family_open_set; intro; elim (classic (D' x)); intro.",
                        "VernacExtend",
                        "f4e0a065458fd7704eb946beb47c13e1fefb2fab"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P6 with (complementary (g x)).",
                        "VernacExtend",
                        "6a4abc68ca4716c8a6f6f04c1719dd6cc015035f"
                    ]
                },
                {
                    "command": [
                        "unfold family_closed_set in H0; unfold closed_set in H0; apply H0.",
                        "VernacExtend",
                        "2f3147e9b56abd5c691e1b19a74274a6fce23075"
                    ]
                },
                {
                    "command": [
                        "unfold f0; simpl; unfold f'; unfold eq_Dom; split.",
                        "VernacExtend",
                        "99d173cd6561edbb8239ff8eca36023c7d0ac033"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; split; [ apply H4 | apply H3 ].",
                        "VernacExtend",
                        "2df71f1a8462440fd9806444155713b90229744c"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; elim H4; intros; assumption.",
                        "VernacExtend",
                        "f2b6e0c7a27dd2f6c639f01e30849a8a1e8d3399"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P6 with (fun _:R => False).",
                        "VernacExtend",
                        "06ff2af164a961dd95dfd1449512720c1bb60f48"
                    ]
                },
                {
                    "command": [
                        "apply open_set_P4.",
                        "VernacExtend",
                        "0d05350f051b67c090cba40864786f9c9458483b"
                    ]
                },
                {
                    "command": [
                        "unfold eq_Dom; unfold included; split; intros; [ elim H4 | simpl in H4; unfold f' in H4; elim H4; intros; elim H3; assumption ].",
                        "VernacExtend",
                        "abe68e69e303df8bcea0eb4de6815e3b65e17d14"
                    ]
                },
                {
                    "command": [
                        "elim (H _ H3); intros SF H4; exists SF; unfold intersection_vide_finite_in; split.",
                        "VernacExtend",
                        "92bf3988dba1652c3a96593b1e186a033b657a80"
                    ]
                },
                {
                    "command": [
                        "unfold intersection_vide_in; simpl; intros; split.",
                        "VernacExtend",
                        "f8d354f0f9ef51ebd9217357c0de03e3b8be9a45"
                    ]
                },
                {
                    "command": [
                        "intros; unfold included; intros; unfold intersection_vide_in in H1; elim (H1 x); intros; elim H6; intros; apply H7.",
                        "VernacExtend",
                        "826dc5255669142a3faff541e5de9d54f5bb5328"
                    ]
                },
                {
                    "command": [
                        "unfold intersection_domain in H5; elim H5; intros; assumption.",
                        "VernacExtend",
                        "944d1d87f378307a407741068d58c24eafc3e8b4"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim (classic (exists y : R, intersection_domain (ind g) SF y)); intro Hyp'.",
                        "VernacExtend",
                        "f0e43cdc014d5911296516120088e9d9771874fc"
                    ]
                },
                {
                    "command": [
                        "red; intro; elim H5; intros; unfold intersection_family in H6; simpl in H6.",
                        "VernacExtend",
                        "c7156a9af568cb8724169f01ad3ceea20f5abd5b"
                    ]
                },
                {
                    "command": [
                        "cut (X x0).",
                        "VernacExtend",
                        "84825ac402c18988d5b81825662069a7d455a74c"
                    ]
                },
                {
                    "command": [
                        "intro; unfold covering_finite in H4; elim H4; clear H4; intros H4 _; unfold covering in H4; elim (H4 x0 H7); intros; simpl in H8; unfold intersection_domain in H6; cut (ind g x1 /\\ SF x1).",
                        "VernacExtend",
                        "f9372a141168e513a17fc1335c60e13eafeacad4"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H10 := H6 x1 H9); elim H10; clear H10; intros H10 _; elim H8; clear H8; intros H8 _; unfold f' in H8; unfold complementary in H8; elim H8; clear H8; intros H8 _; elim H8; assumption.",
                        "VernacExtend",
                        "b63353eb4a8258aa1759c1243faa0b99de8baaa0"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply (cond_fam f0).",
                        "VernacExtend",
                        "12d39bd384be05912a08a1826e5612f5593766c8"
                    ]
                },
                {
                    "command": [
                        "exists x0; elim H8; intros; assumption.",
                        "VernacExtend",
                        "5859c66a6861235677cd77d21cd523e2d27c5a31"
                    ]
                },
                {
                    "command": [
                        "elim H8; intros; assumption.",
                        "VernacExtend",
                        "3cbd129aaef6dda5f93701b58eb8140f5eaa4e9f"
                    ]
                },
                {
                    "command": [
                        "unfold intersection_vide_in in H1; elim Hyp'; intros; assert (H8 := H6 _ H7); elim H8; intros; cut (ind g x1).",
                        "VernacExtend",
                        "323a83939628686a5af0b361f0ca5d91ed624f67"
                    ]
                },
                {
                    "command": [
                        "intro; elim (H1 x1); intros; apply H12.",
                        "VernacExtend",
                        "05c4fbe099c35c10135377d913a89656a6c193a9"
                    ]
                },
                {
                    "command": [
                        "apply H11.",
                        "VernacExtend",
                        "3630e3bef4a9ec09ac631c07522b6f9bbba70b98"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "apply (cond_fam g); exists x0; assumption.",
                        "VernacExtend",
                        "97e707b9c0c2395cb5397acc1700d6a2d1040d13"
                    ]
                },
                {
                    "command": [
                        "unfold covering_finite in H4; elim H4; clear H4; intros H4 _; cut (exists z : R, X z).",
                        "VernacExtend",
                        "fd9158cb6a842c09bca76a3b5ece7f75ffc1b59f"
                    ]
                },
                {
                    "command": [
                        "intro; elim H5; clear H5; intros; unfold covering in H4; elim (H4 x0 H5); intros; simpl in H6; elim Hyp'; exists x1; elim H6; intros; unfold intersection_domain; split.",
                        "VernacExtend",
                        "6a52f5c23d897f0ebb1208105ccee4fb7aecf0d1"
                    ]
                },
                {
                    "command": [
                        "apply (cond_fam f0); exists x0; apply H7.",
                        "VernacExtend",
                        "c5a5088770adcc40e1ef22789a144189d08636a7"
                    ]
                },
                {
                    "command": [
                        "apply H8.",
                        "VernacExtend",
                        "2014720df0411c2963f20792fe424080d05f44aa"
                    ]
                },
                {
                    "command": [
                        "apply Hyp.",
                        "VernacExtend",
                        "de6001680dad5327ceb4bc78c14e76d2f7e511ca"
                    ]
                },
                {
                    "command": [
                        "unfold covering_finite in H4; elim H4; clear H4; intros; unfold family_finite in H5; unfold domain_finite in H5; unfold family_finite; unfold domain_finite; elim H5; clear H5; intros l H5; exists l; intro; elim (H5 x); intros; split; intro; [ apply H6; simpl; simpl in H8; apply H8 | apply (H7 H8) ].",
                        "VernacExtend",
                        "cdfd3fee47b0f2b50c811fc8a09d02d3882b230b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Bolzano_Weierstrass",
            "line_nb": 869,
            "steps": [
                {
                    "command": [
                        "intros; cut (exists l : R, ValAdh_un un l).",
                        "VernacExtend",
                        "ddb3ce4b789c7c0de1e0268c3c1a30bc2ca528a3"
                    ]
                },
                {
                    "command": [
                        "intro; elim H1; intros; exists x; elim (ValAdh_un_prop un x); intros; apply (H4 H2).",
                        "VernacExtend",
                        "18c47045068b141a6ac141122227770014f9eafc"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : exists z : R, X z).",
                        "VernacExtend",
                        "a4b38d22162f738d77939d6812b3d8f4d39e30aa"
                    ]
                },
                {
                    "command": [
                        "exists (un 0%nat); apply H0.",
                        "VernacExtend",
                        "ef23b35999173e6e5cef56412f3d737bb04ad4d0"
                    ]
                },
                {
                    "command": [
                        "set (D := fun x:R => exists n : nat, x = INR n).",
                        "VernacExtend",
                        "ab1f4f41492675f85aa72712f907d976d283a7dd"
                    ]
                },
                {
                    "command": [
                        "set (g := fun x:R => adherence (fun y:R => (exists p : nat, y = un p /\\ x <= INR p) /\\ D x)).",
                        "VernacExtend",
                        "69e618f6c80497cacf8d82f988d85759aac73de1"
                    ]
                },
                {
                    "command": [
                        "assert (H2 : forall x:R, (exists y : R, g x y) -> D x).",
                        "VernacExtend",
                        "cddd92d8da0caebf6b84a31dc2c9d4c5e5874d6d"
                    ]
                },
                {
                    "command": [
                        "intros; elim H2; intros; unfold g in H3; unfold adherence in H3; unfold point_adherent in H3.",
                        "VernacExtend",
                        "768d432b7da365469bdb208a1d0ce13d3ea507ac"
                    ]
                },
                {
                    "command": [
                        "assert (H4 : neighbourhood (disc x0 (mkposreal _ Rlt_0_1)) x0).",
                        "VernacExtend",
                        "5efc2aa1f866e2becabbd8e72af997634fa9ed55"
                    ]
                },
                {
                    "command": [
                        "unfold neighbourhood; exists (mkposreal _ Rlt_0_1); unfold included; trivial.",
                        "VernacExtend",
                        "886d26b845f6d71452e5145faffcb39b06f5bb7c"
                    ]
                },
                {
                    "command": [
                        "elim (H3 _ H4); intros; unfold intersection_domain in H5; decompose [and] H5; assumption.",
                        "VernacExtend",
                        "ad9a0fa41e917fefc0927cf87278017b4667c09a"
                    ]
                },
                {
                    "command": [
                        "set (f0 := mkfamily D g H2).",
                        "VernacExtend",
                        "7f0f4e0dbe2fc11046fd9caabd94022381aac0bb"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := compact_P6 X H H1 f0).",
                        "VernacExtend",
                        "5bd73aa51ce6b0b491ec9ed413ad5757947e9e20"
                    ]
                },
                {
                    "command": [
                        "elim (classic (exists l : R, ValAdh_un un l)); intro.",
                        "VernacExtend",
                        "6cd1cff76fe6e2e89d24fb7b9c0462fa6a771932"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "cut (family_closed_set f0).",
                        "VernacExtend",
                        "565c57a759f67776074be83c8a9129f217bceb8b"
                    ]
                },
                {
                    "command": [
                        "intro; cut (intersection_vide_in X f0).",
                        "VernacExtend",
                        "73b2db1949337c030314c07e0104affd457f34dd"
                    ]
                },
                {
                    "command": [
                        "intro; assert (H7 := H3 H5 H6).",
                        "VernacExtend",
                        "d0a191526a4aab1539d73d21bc6382d1325d075b"
                    ]
                },
                {
                    "command": [
                        "elim H7; intros SF H8; unfold intersection_vide_finite_in in H8; elim H8; clear H8; intros; unfold intersection_vide_in in H8; elim (H8 0); intros _ H10; elim H10; unfold family_finite in H9; unfold domain_finite in H9; elim H9; clear H9; intros l H9; set (r := MaxRlist l); cut (D r).",
                        "VernacExtend",
                        "7280bc16b38b8d9dc2a8b7adb92ce0e3485d878c"
                    ]
                },
                {
                    "command": [
                        "intro; unfold D in H11; elim H11; intros; exists (un x); unfold intersection_family; simpl; unfold intersection_domain; intros; split.",
                        "VernacExtend",
                        "57bb6b4e1d91b7145396fcf93ca1a0707ef4f83e"
                    ]
                },
                {
                    "command": [
                        "unfold g; apply adherence_P1; split.",
                        "VernacExtend",
                        "06d52b91f1b56f23666bd1d6a978374f3eacbca4"
                    ]
                },
                {
                    "command": [
                        "exists x; split; [ reflexivity | rewrite <- H12; unfold r; apply MaxRlist_P1; elim (H9 y); intros; apply H14; simpl; apply H13 ].",
                        "VernacExtend",
                        "b0f75f17e1cc4573a4922918981a00f6a6111ec3"
                    ]
                },
                {
                    "command": [
                        "elim H13; intros; assumption.",
                        "VernacExtend",
                        "c2834a1647253ee351d960b102c577f0693821cd"
                    ]
                },
                {
                    "command": [
                        "elim H13; intros; assumption.",
                        "VernacExtend",
                        "c2834a1647253ee351d960b102c577f0693821cd"
                    ]
                },
                {
                    "command": [
                        "elim (H9 r); intros.",
                        "VernacExtend",
                        "e8d4a1f9c599e82755943efa45024ef13d734d1e"
                    ]
                },
                {
                    "command": [
                        "simpl in H12; unfold intersection_domain in H12; cut (In r l).",
                        "VernacExtend",
                        "02257f7ca63b184e72504729e457360589aa7bde"
                    ]
                },
                {
                    "command": [
                        "intro; elim (H12 H13); intros; assumption.",
                        "VernacExtend",
                        "bfafc9b356bec02e0a5904a7c7a7a7dd8db7cee1"
                    ]
                },
                {
                    "command": [
                        "unfold r; apply MaxRlist_P2; cut (exists z : R, intersection_domain (ind f0) SF z).",
                        "VernacExtend",
                        "2ed6731f0f7fa2ecdc297f09b59bbded561bcd2f"
                    ]
                },
                {
                    "command": [
                        "intro; elim H13; intros; elim (H9 x); intros; simpl in H15; assert (H17 := H15 H14); exists x; apply H17.",
                        "VernacExtend",
                        "8bed1734af0a6da31db58549ec500d7ae1c55df0"
                    ]
                },
                {
                    "command": [
                        "elim (classic (exists z : R, intersection_domain (ind f0) SF z)); intro.",
                        "VernacExtend",
                        "54ce2eaa1e772dec207cf313290e1d0d1de4b85a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim (H8 0); intros _ H14; elim H1; intros; assert (H16 := not_ex_all_not _ (fun y:R => intersection_family (subfamily f0 SF) y) H14); assert (H17 := not_ex_all_not _ (fun z:R => intersection_domain (ind f0) SF z) H13); assert (H18 := H16 x); unfold intersection_family in H18; simpl in H18; assert (H19 := not_all_ex_not _ (fun y:R => intersection_domain D SF y -> g y x /\\ SF y) H18); elim H19; intros; assert (H21 := imply_to_and _ _ H20); elim (H17 x0); elim H21; intros; assumption.",
                        "VernacExtend",
                        "4220c9c320201b517cb6d8a6939ee5a274df1b24"
                    ]
                },
                {
                    "command": [
                        "unfold intersection_vide_in; intros; split.",
                        "VernacExtend",
                        "9277b9cfb33574a8be2cee1d139b3ba8113071ce"
                    ]
                },
                {
                    "command": [
                        "intro; simpl in H6; unfold f0; simpl; unfold g; apply included_trans with (adherence X).",
                        "VernacExtend",
                        "a5a0caabf641c8ff5aeef336e15b7c79e724e8ed"
                    ]
                },
                {
                    "command": [
                        "apply adherence_P4.",
                        "VernacExtend",
                        "4200cf628519fbdd59e1a40c156205352d8162e8"
                    ]
                },
                {
                    "command": [
                        "unfold included; intros; elim H7; intros; elim H8; intros; elim H10; intros; rewrite H11; apply H0.",
                        "VernacExtend",
                        "2b900d49b5e33a6708ebe66d535d7e434b83874d"
                    ]
                },
                {
                    "command": [
                        "apply adherence_P2; apply compact_P2; assumption.",
                        "VernacExtend",
                        "facf5bb7ed6ee45c3fe133b1b4c83971ed09551f"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "unfold family_closed_set; unfold f0; simpl; unfold g; intro; apply adherence_P3.",
                        "VernacExtend",
                        "1edaae72fb4a7a246b324798db747a8efc7ebc19"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "is_lub_u",
            "line_nb": 911,
            "steps": [
                {
                    "command": [
                        "unfold is_lub; intros; elim H; elim H0; intros; apply Rle_antisym; [ apply (H4 _ H1) | apply (H2 _ H3) ].",
                        "VernacExtend",
                        "7170a93704ff4e03abed99dad328917af734e367"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "domain_P1",
            "line_nb": 914,
            "steps": [
                {
                    "command": [
                        "intro; elim (classic (exists y : R, X y)); intro.",
                        "VernacExtend",
                        "eb1e60ac32bb6f9e242e7870e416fab966bc9b90"
                    ]
                },
                {
                    "command": [
                        "right; elim H; intros; elim (classic (exists y : R, X y /\\ y <> x)); intro.",
                        "VernacExtend",
                        "8fb4fa566545e11cb5da004cab54bf9c3c885ff4"
                    ]
                },
                {
                    "command": [
                        "right; elim H1; intros; elim H2; intros; exists x; exists x0; intros.",
                        "VernacExtend",
                        "179fba74a8473a2359cd41b1a7e76d2f4135d15c"
                    ]
                },
                {
                    "command": [
                        "split; [ assumption | split; [ assumption | apply (not_eq_sym (A:=R)); assumption ] ].",
                        "VernacExtend",
                        "4d2a1f7a0afc19587e44329201ff3d9c187a7303"
                    ]
                },
                {
                    "command": [
                        "left; exists x; split.",
                        "VernacExtend",
                        "784903fa00f9340ac66c5507dab6f8922d01456d"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "intros; case (Req_dec x0 x); intro.",
                        "VernacExtend",
                        "4ee2226107684f6c9da91aecb14b5211c23cf34f"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim H1; exists x0; split; assumption.",
                        "VernacExtend",
                        "b8a3dc880bb00a32f91a0641f636c1fdea6a2ed1"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}