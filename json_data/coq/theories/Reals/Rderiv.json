{
    "filename": "theories/Reals/Rderiv.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Rlimit.",
            "VernacRequire",
            "31e28f2a2e6f97466e65f452a1dd4acb379c9a62"
        ],
        [
            "Require Import Lra.",
            "VernacRequire",
            "6dd90563c90485cd5a8a8b957af14c96d3b4cbc1"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Definition D_x (D:R -> Prop) (y x:R) : Prop := D x /\\ y <> x.",
            "VernacDefinition",
            "53e61463736f2cbf58acb9cf49fc7de7a8fcbbd8"
        ],
        [
            "Definition continue_in (f:R -> R) (D:R -> Prop) (x0:R) : Prop := limit1_in f (D_x D x0) (f x0) x0.",
            "VernacDefinition",
            "f66dc5308517cda8e075bd50e60ce70358cc0401"
        ],
        [
            "Definition D_in (f d:R -> R) (D:R -> Prop) (x0:R) : Prop := limit1_in (fun x:R => (f x - f x0) / (x - x0)) (D_x D x0) (d x0) x0.",
            "VernacDefinition",
            "421435a8a4252004d472a59ed0128481703f966a"
        ],
        [
            "Lemma cont_deriv : forall (f d:R -> R) (D:R -> Prop) (x0:R), D_in f d D x0 -> continue_in f D x0.",
            "VernacStartTheoremProof",
            "cdb7abd8dcee46ae952af6f518ecae1f773dcfd4"
        ],
        [
            "unfold continue_in; unfold D_in; unfold limit1_in; unfold limit_in; unfold Rdiv; simpl; intros; elim (H eps H0); clear H; intros; elim H; clear H; intros; elim (Req_dec (d x0) 0); intro.",
            "VernacExtend",
            "2bc041b38a9ddae3144de0292832bea54d46adb5"
        ],
        [
            "split with (Rmin 1 x); split.",
            "VernacExtend",
            "ed526e8809fba0556e53f6b85a869fb24ff23579"
        ],
        [
            "elim (Rmin_Rgt 1 x 0); intros a b; apply (b (conj Rlt_0_1 H)).",
            "VernacExtend",
            "da660f9069f75e04c047d6c00eb019b9369624f0"
        ],
        [
            "intros; elim H3; clear H3; intros; generalize (let (H1, H2) := Rmin_Rgt 1 x (R_dist x1 x0) in H1); unfold Rgt; intro; elim (H5 H4); clear H5; intros; generalize (H1 x1 (conj H3 H6)); clear H1; intro; unfold D_x in H3; elim H3; intros.",
            "VernacExtend",
            "44a6d2275a6e23ba287352a8e027495ba3881d81"
        ],
        [
            "rewrite H2 in H1; unfold R_dist; unfold R_dist in H1; cut (Rabs (f x1 - f x0) < eps * Rabs (x1 - x0)).",
            "VernacExtend",
            "6c6b4c00526fc32ec4b3da7a01bbb966371120bb"
        ],
        [
            "intro; unfold R_dist in H5; generalize (Rmult_lt_compat_l eps (Rabs (x1 - x0)) 1 H0 H5); rewrite Rmult_1_r; intro; apply Rlt_trans with (r2 := eps * Rabs (x1 - x0)); assumption.",
            "VernacExtend",
            "a15aad073f53fa951995372a8b6cb8af7d31ea8c"
        ],
        [
            "rewrite (Rminus_0_r ((f x1 - f x0) * / (x1 - x0))) in H1; rewrite Rabs_mult in H1; cut (x1 - x0 <> 0).",
            "VernacExtend",
            "392d5a0e0fe2fb140ad59728b5a45534c6c37a59"
        ],
        [
            "intro; rewrite (Rabs_Rinv (x1 - x0) H9) in H1; generalize (Rmult_lt_compat_l (Rabs (x1 - x0)) (Rabs (f x1 - f x0) * / Rabs (x1 - x0)) eps (Rabs_pos_lt (x1 - x0) H9) H1); intro; rewrite Rmult_comm in H10; rewrite Rmult_assoc in H10; rewrite Rinv_l in H10.",
            "VernacExtend",
            "3fa327d3a03ebbac58a9924eaee9840225016be9"
        ],
        [
            "rewrite Rmult_1_r in H10; rewrite Rmult_comm; assumption.",
            "VernacExtend",
            "96d30a6eea4ce6ab10f3325ca6134740612aeb84"
        ],
        [
            "apply Rabs_no_R0; auto.",
            "VernacExtend",
            "ef731cb0e0bdebbee31824bbd388f94beb946cac"
        ],
        [
            "apply Rminus_eq_contra; auto.",
            "VernacExtend",
            "7631426439f656e5419a22de8053c47677410b05"
        ],
        [
            "split with (Rmin (Rmin (/ 2) x) (eps * / Rabs (2 * d x0))); split.",
            "VernacExtend",
            "5b729f61e8fb5f5d1e2c46584c586e14f8abf62e"
        ],
        [
            "cut (Rmin (/ 2) x > 0).",
            "VernacExtend",
            "6707ec72ea9b94ec1709d7ce25fcc11039c03073"
        ],
        [
            "cut (eps * / Rabs (2 * d x0) > 0).",
            "VernacExtend",
            "7aba7b89fade96ba1a01423ce733e24f664f9026"
        ],
        [
            "intros; elim (Rmin_Rgt (Rmin (/ 2) x) (eps * / Rabs (2 * d x0)) 0); intros a b; apply (b (conj H4 H3)).",
            "VernacExtend",
            "11bbdcdb9fcb597e73d978d8b5a85f7bfc008799"
        ],
        [
            "apply Rmult_gt_0_compat; auto.",
            "VernacExtend",
            "acc984e96aeaf5028a4e2cfa62bcb5b607fd2997"
        ],
        [
            "unfold Rgt; apply Rinv_0_lt_compat; apply Rabs_pos_lt; apply Rmult_integral_contrapositive; split.",
            "VernacExtend",
            "8c748b4ae96274feabe4e1f74d27840508ca4620"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim (Rmin_Rgt (/ 2) x 0); intros a b; cut (0 < 2).",
            "VernacExtend",
            "2754ea48ab551f48a75f10e13f49278477c1e56e"
        ],
        [
            "intro; generalize (Rinv_0_lt_compat 2 H3); intro; fold (/ 2 > 0) in H4; apply (b (conj H4 H)).",
            "VernacExtend",
            "5c3bfd482f7f0ec691ddfa7d0c0b5c9db21202e7"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "intros; elim H3; clear H3; intros; generalize (let (H1, H2) := Rmin_Rgt (Rmin (/ 2) x) (eps * / Rabs (2 * d x0)) (R_dist x1 x0) in H1); unfold Rgt; intro; elim (H5 H4); clear H5; intros; generalize (let (H1, H2) := Rmin_Rgt (/ 2) x (R_dist x1 x0) in H1); unfold Rgt; intro; elim (H7 H5); clear H7; intros; clear H4 H5; generalize (H1 x1 (conj H3 H8)); clear H1; intro; unfold D_x in H3; elim H3; intros; generalize (not_eq_sym H5); clear H5; intro H5; generalize (Rminus_eq_contra x1 x0 H5); intro; generalize H1; pattern (d x0) at 1; rewrite <- (let (H1, H2) := Rmult_ne (d x0) in H2); rewrite <- (Rinv_l (x1 - x0) H9); unfold R_dist; unfold Rminus at 1; rewrite (Rmult_comm (f x1 - f x0) (/ (x1 - x0))); rewrite (Rmult_comm (/ (x1 - x0) * (x1 - x0)) (d x0)); rewrite <- (Ropp_mult_distr_l_reverse (d x0) (/ (x1 - x0) * (x1 - x0))); rewrite (Rmult_comm (- d x0) (/ (x1 - x0) * (x1 - x0))); rewrite (Rmult_assoc (/ (x1 - x0)) (x1 - x0) (- d x0)); rewrite <- (Rmult_plus_distr_l (/ (x1 - x0)) (f x1 - f x0) ((x1 - x0) * - d x0)) ; rewrite (Rabs_mult (/ (x1 - x0)) (f x1 - f x0 + (x1 - x0) * - d x0)); clear H1; intro; generalize (Rmult_lt_compat_l (Rabs (x1 - x0)) (Rabs (/ (x1 - x0)) * Rabs (f x1 - f x0 + (x1 - x0) * - d x0)) eps (Rabs_pos_lt (x1 - x0) H9) H1); rewrite <- (Rmult_assoc (Rabs (x1 - x0)) (Rabs (/ (x1 - x0))) (Rabs (f x1 - f x0 + (x1 - x0) * - d x0))); rewrite (Rabs_Rinv (x1 - x0) H9); rewrite (Rinv_r (Rabs (x1 - x0)) (Rabs_no_R0 (x1 - x0) H9)); rewrite (let (H1, H2) := Rmult_ne (Rabs (f x1 - f x0 + (x1 - x0) * - d x0)) in H2) ; generalize (Rabs_triang_inv (f x1 - f x0) ((x1 - x0) * d x0)); intro; rewrite (Rmult_comm (x1 - x0) (- d x0)); rewrite (Ropp_mult_distr_l_reverse (d x0) (x1 - x0)); fold (f x1 - f x0 - d x0 * (x1 - x0)); rewrite (Rmult_comm (x1 - x0) (d x0)) in H10; clear H1; intro; generalize (Rle_lt_trans (Rabs (f x1 - f x0) - Rabs (d x0 * (x1 - x0))) (Rabs (f x1 - f x0 - d x0 * (x1 - x0))) (Rabs (x1 - x0) * eps) H10 H1); clear H1; intro; generalize (Rplus_lt_compat_l (Rabs (d x0 * (x1 - x0))) (Rabs (f x1 - f x0) - Rabs (d x0 * (x1 - x0))) ( Rabs (x1 - x0) * eps) H1); unfold Rminus at 2; rewrite (Rplus_comm (Rabs (f x1 - f x0)) (- Rabs (d x0 * (x1 - x0)))); rewrite <- (Rplus_assoc (Rabs (d x0 * (x1 - x0))) (- Rabs (d x0 * (x1 - x0))) (Rabs (f x1 - f x0))); rewrite (Rplus_opp_r (Rabs (d x0 * (x1 - x0)))); rewrite (let (H1, H2) := Rplus_ne (Rabs (f x1 - f x0)) in H2); clear H1; intro; cut (Rabs (d x0 * (x1 - x0)) + Rabs (x1 - x0) * eps < eps).",
            "VernacExtend",
            "b3e536ef9d2795d055fc4dd0e2e95d3528a0af20"
        ],
        [
            "intro; apply (Rlt_trans (Rabs (f x1 - f x0)) (Rabs (d x0 * (x1 - x0)) + Rabs (x1 - x0) * eps) eps H1 H11).",
            "VernacExtend",
            "5eee836773bdde0373eae6735da6b8b1bc88d844"
        ],
        [
            "clear H1 H5 H3 H10; generalize (Rabs_pos_lt (d x0) H2); intro; unfold Rgt in H0; generalize (Rmult_lt_compat_l eps (R_dist x1 x0) (/ 2) H0 H7); clear H7; intro; generalize (Rmult_lt_compat_l (Rabs (d x0)) (R_dist x1 x0) ( eps * / Rabs (2 * d x0)) H1 H6); clear H6; intro; rewrite (Rmult_comm eps (R_dist x1 x0)) in H3; unfold R_dist in H3, H5; rewrite <- (Rabs_mult (d x0) (x1 - x0)) in H5; rewrite (Rabs_mult 2 (d x0)) in H5; cut (Rabs 2 <> 0).",
            "VernacExtend",
            "ac48c33be00b3ee784ac7795bdf1e52550822ce2"
        ],
        [
            "intro; fold (Rabs (d x0) > 0) in H1; rewrite (Rinv_mult_distr (Rabs 2) (Rabs (d x0)) H6 (Rlt_dichotomy_converse (Rabs (d x0)) 0 (or_intror (Rabs (d x0) < 0) H1))) in H5; rewrite (Rmult_comm (Rabs (d x0)) (eps * (/ Rabs 2 * / Rabs (d x0)))) in H5; rewrite <- (Rmult_assoc eps (/ Rabs 2) (/ Rabs (d x0))) in H5; rewrite (Rmult_assoc (eps * / Rabs 2) (/ Rabs (d x0)) (Rabs (d x0))) in H5; rewrite (Rinv_l (Rabs (d x0)) (Rlt_dichotomy_converse (Rabs (d x0)) 0 (or_intror (Rabs (d x0) < 0) H1))) in H5; rewrite (let (H1, H2) := Rmult_ne (eps * / Rabs 2) in H1) in H5; cut (Rabs 2 = 2).",
            "VernacExtend",
            "afea2a5956548da8f0f67816889f4d05bc778ae2"
        ],
        [
            "intro; rewrite H7 in H5; generalize (Rplus_lt_compat (Rabs (d x0 * (x1 - x0))) (eps * / 2) (Rabs (x1 - x0) * eps) (eps * / 2) H5 H3); intro; rewrite eps2 in H10; assumption.",
            "VernacExtend",
            "81a600ff5214374478682ad8b6b148e4f0e88f9c"
        ],
        [
            "unfold Rabs; destruct (Rcase_abs 2) as [Hlt|Hge]; auto.",
            "VernacExtend",
            "9272818dabeec9b99da873ba3eb72241d514e24a"
        ],
        [
            "cut (0 < 2).",
            "VernacExtend",
            "189aca789b845d21f0d7bea07b6f99b547fdf331"
        ],
        [
            "intro H7; elim (Rlt_asym 0 2 H7 Hlt).",
            "VernacExtend",
            "f112fccfc36189474cd41ba8ba3d8e687d8e7be2"
        ],
        [
            "lra.",
            "VernacExtend",
            "c37bca18aec699b6843eab75e25df2491e3b9848"
        ],
        [
            "apply Rabs_no_R0.",
            "VernacExtend",
            "8d37b098d9cb0f050cfd8b29c49d318c2b960566"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dconst : forall (D:R -> Prop) (y x0:R), D_in (fun x:R => y) (fun x:R => 0) D x0.",
            "VernacStartTheoremProof",
            "40e791439fabc6219833556e421e5b07311a63bd"
        ],
        [
            "unfold D_in; intros; unfold limit1_in; unfold limit_in; unfold Rdiv; intros; simpl; split with eps; split; auto.",
            "VernacExtend",
            "7388dde899fc60d702c0df9ab8c8c41eea4ae03f"
        ],
        [
            "intros; rewrite (Rminus_diag_eq y y (eq_refl y)); rewrite Rmult_0_l; unfold R_dist; rewrite (Rminus_diag_eq 0 0 (eq_refl 0)); unfold Rabs; case (Rcase_abs 0); intro.",
            "VernacExtend",
            "53ab413676127ad5d0d6b7b0d8f619ca9cce60cc"
        ],
        [
            "absurd (0 < 0); auto.",
            "VernacExtend",
            "e64a6f4f2d2f69a5bfa1457dffbb509fb35c31e9"
        ],
        [
            "red; intro; apply (Rlt_irrefl 0 H1).",
            "VernacExtend",
            "9d5316e5fa4c4d7eb718cd166bd5eb59471c61cf"
        ],
        [
            "unfold Rgt in H0; assumption.",
            "VernacExtend",
            "9f18f72fc281791a7f6bb2fa8cd37ea5c6028841"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dx : forall (D:R -> Prop) (x0:R), D_in (fun x:R => x) (fun x:R => 1) D x0.",
            "VernacStartTheoremProof",
            "c2ddcc5509e7eb39489d6b9577f09b212d2eeb4a"
        ],
        [
            "unfold D_in; unfold Rdiv; intros; unfold limit1_in; unfold limit_in; intros; simpl; split with eps; split; auto.",
            "VernacExtend",
            "9ea181281f17581378985c30bccd650f89c659a2"
        ],
        [
            "intros; elim H0; clear H0; intros; unfold D_x in H0; elim H0; intros; rewrite (Rinv_r (x - x0) (Rminus_eq_contra x x0 (sym_not_eq H3))); unfold R_dist; rewrite (Rminus_diag_eq 1 1 (refl_equal 1)); unfold Rabs; case (Rcase_abs 0) as [Hlt|Hge].",
            "VernacExtend",
            "a2a4aecb7dfe9738bedf97ab1de3e83ea6c21c22"
        ],
        [
            "absurd (0 < 0); auto.",
            "VernacExtend",
            "e64a6f4f2d2f69a5bfa1457dffbb509fb35c31e9"
        ],
        [
            "red in |- *; intro; apply (Rlt_irrefl 0 Hlt).",
            "VernacExtend",
            "4c9e2c2308c4b24d9eb76e1eeeb44f1e02cffa34"
        ],
        [
            "unfold Rgt in H; assumption.",
            "VernacExtend",
            "feaaf7f3f13d4ca02e0755afe7c24b05a9c8c9f3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dadd : forall (D:R -> Prop) (df dg f g:R -> R) (x0:R), D_in f df D x0 -> D_in g dg D x0 -> D_in (fun x:R => f x + g x) (fun x:R => df x + dg x) D x0.",
            "VernacStartTheoremProof",
            "a891e42332ead8b7489b57fda8d37ab775228076"
        ],
        [
            "unfold D_in; intros; generalize (limit_plus (fun x:R => (f x - f x0) * / (x - x0)) (fun x:R => (g x - g x0) * / (x - x0)) (D_x D x0) ( df x0) (dg x0) x0 H H0); clear H H0; unfold limit1_in; unfold limit_in; simpl; intros; elim (H eps H0); clear H; intros; elim H; clear H; intros; split with x; split; auto; intros; generalize (H1 x1 H2); clear H1; intro; rewrite (Rmult_comm (f x1 - f x0) (/ (x1 - x0))) in H1; rewrite (Rmult_comm (g x1 - g x0) (/ (x1 - x0))) in H1; rewrite <- (Rmult_plus_distr_l (/ (x1 - x0)) (f x1 - f x0) (g x1 - g x0)) in H1; rewrite (Rmult_comm (/ (x1 - x0)) (f x1 - f x0 + (g x1 - g x0))) in H1; cut (f x1 - f x0 + (g x1 - g x0) = f x1 + g x1 - (f x0 + g x0)).",
            "VernacExtend",
            "7752423a4def5fc0b023664d2e6074db0c4c6169"
        ],
        [
            "intro; rewrite H3 in H1; assumption.",
            "VernacExtend",
            "47e667117c90837e3693eb980d42b7c5a27fb4da"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dmult : forall (D:R -> Prop) (df dg f g:R -> R) (x0:R), D_in f df D x0 -> D_in g dg D x0 -> D_in (fun x:R => f x * g x) (fun x:R => df x * g x + f x * dg x) D x0.",
            "VernacStartTheoremProof",
            "a2369275ef097184db0b6ab813570c44a4cddc03"
        ],
        [
            "intros; unfold D_in; generalize H H0; intros; unfold D_in in H, H0; generalize (cont_deriv f df D x0 H1); unfold continue_in; intro; generalize (limit_mul (fun x:R => (g x - g x0) * / (x - x0)) ( fun x:R => f x) (D_x D x0) (dg x0) (f x0) x0 H0 H3); intro; cut (limit1_in (fun x:R => g x0) (D_x D x0) (g x0) x0).",
            "VernacExtend",
            "e219a5ac7b763fa3c521d2d08ea853d9c94ac1ad"
        ],
        [
            "intro; generalize (limit_mul (fun x:R => (f x - f x0) * / (x - x0)) ( fun _:R => g x0) (D_x D x0) (df x0) (g x0) x0 H H5); clear H H0 H1 H2 H3 H5; intro; generalize (limit_plus (fun x:R => (f x - f x0) * / (x - x0) * g x0) (fun x:R => (g x - g x0) * / (x - x0) * f x) ( D_x D x0) (df x0 * g x0) (dg x0 * f x0) x0 H H4); clear H4 H; intro; unfold limit1_in in H; unfold limit_in in H; simpl in H; unfold limit1_in; unfold limit_in; simpl; intros; elim (H eps H0); clear H; intros; elim H; clear H; intros; split with x; split; auto; intros; generalize (H1 x1 H2); clear H1; intro; rewrite (Rmult_comm (f x1 - f x0) (/ (x1 - x0))) in H1; rewrite (Rmult_comm (g x1 - g x0) (/ (x1 - x0))) in H1; rewrite (Rmult_assoc (/ (x1 - x0)) (f x1 - f x0) (g x0)) in H1; rewrite (Rmult_assoc (/ (x1 - x0)) (g x1 - g x0) (f x1)) in H1; rewrite <- (Rmult_plus_distr_l (/ (x1 - x0)) ((f x1 - f x0) * g x0) ((g x1 - g x0) * f x1)) in H1; rewrite (Rmult_comm (/ (x1 - x0)) ((f x1 - f x0) * g x0 + (g x1 - g x0) * f x1)) in H1; rewrite (Rmult_comm (dg x0) (f x0)) in H1; cut ((f x1 - f x0) * g x0 + (g x1 - g x0) * f x1 = f x1 * g x1 - f x0 * g x0).",
            "VernacExtend",
            "afb9bad87b75039c6a311ee715a284281216c301"
        ],
        [
            "intro; rewrite H3 in H1; assumption.",
            "VernacExtend",
            "47e667117c90837e3693eb980d42b7c5a27fb4da"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold limit1_in; unfold limit_in; simpl; intros; split with eps; split; auto; intros; elim (R_dist_refl (g x0) (g x0)); intros a b; rewrite (b (eq_refl (g x0))); unfold Rgt in H; assumption.",
            "VernacExtend",
            "bcab9ae4dad7bca14f5410ed2d4dc2aec23a8c2b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dmult_const : forall (D:R -> Prop) (f df:R -> R) (x0 a:R), D_in f df D x0 -> D_in (fun x:R => a * f x) (fun x:R => a * df x) D x0.",
            "VernacStartTheoremProof",
            "075154ff2e379d9c882204c9a50790c1f5786075"
        ],
        [
            "intros; generalize (Dmult D (fun _:R => 0) df (fun _:R => a) f x0 (Dconst D a x0) H); unfold D_in; intros; rewrite (Rmult_0_l (f x0)) in H0; rewrite (let (H1, H2) := Rplus_ne (a * df x0) in H2) in H0; assumption.",
            "VernacExtend",
            "d22c75e93ffb5b5089b0a23979b2cffee9451c8d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dopp : forall (D:R -> Prop) (f df:R -> R) (x0:R), D_in f df D x0 -> D_in (fun x:R => - f x) (fun x:R => - df x) D x0.",
            "VernacStartTheoremProof",
            "b8b9c0a5547a63d24fe140752ecd9f8a4e87951c"
        ],
        [
            "intros; generalize (Dmult_const D f df x0 (-1) H); unfold D_in; unfold limit1_in; unfold limit_in; intros; generalize (H0 eps H1); clear H0; intro; elim H0; clear H0; intros; elim H0; clear H0; simpl; intros; split with x; split; auto.",
            "VernacExtend",
            "f53d40c46506c0c74e2d5f0aa15da701ab058ae2"
        ],
        [
            "intros; generalize (H2 x1 H3); clear H2; intro.",
            "VernacExtend",
            "1de160ad008a568100a5c2a2bae8d0a38eea6832"
        ],
        [
            "replace (- f x1 - - f x0) with (-1 * f x1 - -1 * f x0) by ring.",
            "VernacExtend",
            "1a7ab0020adcecc52452df8acc4c9c3c06eed832"
        ],
        [
            "replace (- df x0) with (-1 * df x0) by ring.",
            "VernacExtend",
            "7f6c0789dd8f7ebc060d420ecdc7f190feaf81da"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dminus : forall (D:R -> Prop) (df dg f g:R -> R) (x0:R), D_in f df D x0 -> D_in g dg D x0 -> D_in (fun x:R => f x - g x) (fun x:R => df x - dg x) D x0.",
            "VernacStartTheoremProof",
            "411e9b585b40ac5486c26aa0361c98b7ae4177cf"
        ],
        [
            "unfold Rminus; intros; generalize (Dopp D g dg x0 H0); intro; apply (Dadd D df (fun x:R => - dg x) f (fun x:R => - g x) x0); assumption.",
            "VernacExtend",
            "f080363d5f63bad147461bc117f49c913abad03c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dx_pow_n : forall (n:nat) (D:R -> Prop) (x0:R), D_in (fun x:R => x ^ n) (fun x:R => INR n * x ^ (n - 1)) D x0.",
            "VernacStartTheoremProof",
            "de074431639a43651ca222d7dfe74c72c2f19fdd"
        ],
        [
            "simple induction n; intros.",
            "VernacExtend",
            "b546aef1a8f9462c47d15661908893070e223e89"
        ],
        [
            "simpl; rewrite Rmult_0_l; apply Dconst.",
            "VernacExtend",
            "fe81f333af66dc8998881893b5f765b623e683c6"
        ],
        [
            "intros; cut (n0 = (S n0 - 1)%nat); [ intro a; rewrite <- a; clear a | simpl; apply minus_n_O ].",
            "VernacExtend",
            "84dbb9869ea226df95c4647da7d7d2acb5a0c5da"
        ],
        [
            "generalize (Dmult D (fun _:R => 1) (fun x:R => INR n0 * x ^ (n0 - 1)) ( fun x:R => x) (fun x:R => x ^ n0) x0 (Dx D x0) ( H D x0)); unfold D_in; unfold limit1_in; unfold limit_in; simpl; intros; elim (H0 eps H1); clear H0; intros; elim H0; clear H0; intros; split with x; split; auto.",
            "VernacExtend",
            "610cdb4dbbd6be7426a7b376f757770c19ed442f"
        ],
        [
            "intros; generalize (H2 x1 H3); clear H2 H3; intro; rewrite (let (H1, H2) := Rmult_ne (x0 ^ n0) in H2) in H2; rewrite (tech_pow_Rmult x1 n0) in H2; rewrite (tech_pow_Rmult x0 n0) in H2; rewrite (Rmult_comm (INR n0) (x0 ^ (n0 - 1))) in H2; rewrite <- (Rmult_assoc x0 (x0 ^ (n0 - 1)) (INR n0)) in H2; rewrite (tech_pow_Rmult x0 (n0 - 1)) in H2; elim (Peano_dec.eq_nat_dec n0 0) ; intros cond.",
            "VernacExtend",
            "9d233184a469d75fb0ac952595eea24cec631c04"
        ],
        [
            "rewrite cond in H2; rewrite cond; simpl in H2; simpl; cut (1 + x0 * 1 * 0 = 1 * 1); [ intro A; rewrite A in H2; assumption | ring ].",
            "VernacExtend",
            "5830495ac7954b363056368579d0d669d02521e1"
        ],
        [
            "cut (n0 <> 0%nat -> S (n0 - 1) = n0); [ intro | omega ]; rewrite (H3 cond) in H2; rewrite (Rmult_comm (x0 ^ n0) (INR n0)) in H2; rewrite (tech_pow_Rplus x0 n0 n0) in H2; assumption.",
            "VernacExtend",
            "b97c242f83b00bd024b655dc5c0f5c0065d10ca2"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Dcomp : forall (Df Dg:R -> Prop) (df dg f g:R -> R) (x0:R), D_in f df Df x0 -> D_in g dg Dg (f x0) -> D_in (fun x:R => g (f x)) (fun x:R => df x * dg (f x)) (Dgf Df Dg f) x0.",
            "VernacStartTheoremProof",
            "685b827fd0afd86cdc6d9808d91f9e2664881b0d"
        ],
        [
            "intros Df Dg df dg f g x0 H H0; generalize H H0; unfold D_in; unfold Rdiv; intros; generalize (limit_comp f (fun x:R => (g x - g (f x0)) * / (x - f x0)) ( D_x Df x0) (D_x Dg (f x0)) (f x0) (dg (f x0)) x0); intro; generalize (cont_deriv f df Df x0 H); intro; unfold continue_in in H4; generalize (H3 H4 H2); clear H3; intro; generalize (limit_mul (fun x:R => (g (f x) - g (f x0)) * / (f x - f x0)) (fun x:R => (f x - f x0) * / (x - x0)) (Dgf (D_x Df x0) (D_x Dg (f x0)) f) (dg (f x0)) ( df x0) x0 H3); intro; cut (limit1_in (fun x:R => (f x - f x0) * / (x - x0)) (Dgf (D_x Df x0) (D_x Dg (f x0)) f) (df x0) x0).",
            "VernacExtend",
            "3d942c4cfcf99290e4ad1440fdeedebd67690db7"
        ],
        [
            "intro; generalize (H5 H6); clear H5; intro; generalize (limit_mul (fun x:R => (f x - f x0) * / (x - x0)) ( fun x:R => dg (f x0)) (D_x Df x0) (df x0) (dg (f x0)) x0 H1 (limit_free (fun x:R => dg (f x0)) (D_x Df x0) x0 x0)); intro; unfold limit1_in; unfold limit_in; simpl; unfold limit1_in in H5, H7; unfold limit_in in H5, H7; simpl in H5, H7; intros; elim (H5 eps H8); elim (H7 eps H8); clear H5 H7; intros; elim H5; elim H7; clear H5 H7; intros; split with (Rmin x x1); split.",
            "VernacExtend",
            "e2030d26168da605ac3dff00a7f5237c9e44d516"
        ],
        [
            "elim (Rmin_Rgt x x1 0); intros a b; apply (b (conj H9 H5)); clear a b.",
            "VernacExtend",
            "141d4b615bbc71e9990f1f52b546890e4462fa6f"
        ],
        [
            "intros; elim H11; clear H11; intros; elim (Rmin_Rgt x x1 (R_dist x2 x0)); intros a b; clear b; unfold Rgt in a; elim (a H12); clear H5 a; intros; unfold D_x, Dgf in H11, H7, H10; clear H12; elim (Req_dec (f x2) (f x0)); intro.",
            "VernacExtend",
            "c075ab6e6c6c8349b6e63f12e8e917711284c610"
        ],
        [
            "elim H11; clear H11; intros; elim H11; clear H11; intros; generalize (H10 x2 (conj (conj H11 H14) H5)); intro; rewrite (Rminus_diag_eq (f x2) (f x0) H12) in H16; rewrite (Rmult_0_l (/ (x2 - x0))) in H16; rewrite (Rmult_0_l (dg (f x0))) in H16; rewrite H12; rewrite (Rminus_diag_eq (g (f x0)) (g (f x0)) (eq_refl (g (f x0)))); rewrite (Rmult_0_l (/ (x2 - x0))); assumption.",
            "VernacExtend",
            "ca8fc28c7f19ad1451f25b1e4bd14afdcbeb7d6d"
        ],
        [
            "clear H10 H5; elim H11; clear H11; intros; elim H5; clear H5; intros; cut (((Df x2 /\\ x0 <> x2) /\\ Dg (f x2) /\\ f x0 <> f x2) /\\ R_dist x2 x0 < x1); auto; intro; generalize (H7 x2 H14); intro; generalize (Rminus_eq_contra (f x2) (f x0) H12); intro; rewrite (Rmult_assoc (g (f x2) - g (f x0)) (/ (f x2 - f x0)) ((f x2 - f x0) * / (x2 - x0))) in H15; rewrite <- (Rmult_assoc (/ (f x2 - f x0)) (f x2 - f x0) (/ (x2 - x0))) in H15; rewrite (Rinv_l (f x2 - f x0) H16) in H15; rewrite (let (H1, H2) := Rmult_ne (/ (x2 - x0)) in H2) in H15; rewrite (Rmult_comm (df x0) (dg (f x0))); assumption.",
            "VernacExtend",
            "ad467765369ebef5a4c9e19459ba8b2541a8f66b"
        ],
        [
            "clear H5 H3 H4 H2; unfold limit1_in; unfold limit_in; simpl; unfold limit1_in in H1; unfold limit_in in H1; simpl in H1; intros; elim (H1 eps H2); clear H1; intros; elim H1; clear H1; intros; split with x; split; auto; intros; unfold D_x, Dgf in H4, H3; elim H4; clear H4; intros; elim H4; clear H4; intros; exact (H3 x1 (conj H4 H5)).",
            "VernacExtend",
            "9f1beaf5eec86bd73561346d342ad6913bc99cbc"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma D_pow_n : forall (n:nat) (D:R -> Prop) (x0:R) (expr dexpr:R -> R), D_in expr dexpr D x0 -> D_in (fun x:R => expr x ^ n) (fun x:R => INR n * expr x ^ (n - 1) * dexpr x) ( Dgf D D expr) x0.",
            "VernacStartTheoremProof",
            "d0314026bb9309334a47ad4d4f7d0fe8e372f160"
        ],
        [
            "intros n D x0 expr dexpr H; generalize (Dcomp D D dexpr (fun x:R => INR n * x ^ (n - 1)) expr ( fun x:R => x ^ n) x0 H (Dx_pow_n n D (expr x0))); intro; unfold D_in; unfold limit1_in; unfold limit_in; simpl; intros; unfold D_in in H0; unfold limit1_in in H0; unfold limit_in in H0; simpl in H0; elim (H0 eps H1); clear H0; intros; elim H0; clear H0; intros; split with x; split; intros; auto.",
            "VernacExtend",
            "9bd32d6a552c4fa1605730a744ed2e7a24f6dadd"
        ],
        [
            "cut (dexpr x0 * (INR n * expr x0 ^ (n - 1)) = INR n * expr x0 ^ (n - 1) * dexpr x0); [ intro Rew; rewrite <- Rew; exact (H2 x1 H3) | ring ].",
            "VernacExtend",
            "40e71f3f6839638d65789c531b761c6627cbf28d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "cont_deriv",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "unfold continue_in; unfold D_in; unfold limit1_in; unfold limit_in; unfold Rdiv; simpl; intros; elim (H eps H0); clear H; intros; elim H; clear H; intros; elim (Req_dec (d x0) 0); intro.",
                        "VernacExtend",
                        "2bc041b38a9ddae3144de0292832bea54d46adb5"
                    ]
                },
                {
                    "command": [
                        "split with (Rmin 1 x); split.",
                        "VernacExtend",
                        "ed526e8809fba0556e53f6b85a869fb24ff23579"
                    ]
                },
                {
                    "command": [
                        "elim (Rmin_Rgt 1 x 0); intros a b; apply (b (conj Rlt_0_1 H)).",
                        "VernacExtend",
                        "da660f9069f75e04c047d6c00eb019b9369624f0"
                    ]
                },
                {
                    "command": [
                        "intros; elim H3; clear H3; intros; generalize (let (H1, H2) := Rmin_Rgt 1 x (R_dist x1 x0) in H1); unfold Rgt; intro; elim (H5 H4); clear H5; intros; generalize (H1 x1 (conj H3 H6)); clear H1; intro; unfold D_x in H3; elim H3; intros.",
                        "VernacExtend",
                        "44a6d2275a6e23ba287352a8e027495ba3881d81"
                    ]
                },
                {
                    "command": [
                        "rewrite H2 in H1; unfold R_dist; unfold R_dist in H1; cut (Rabs (f x1 - f x0) < eps * Rabs (x1 - x0)).",
                        "VernacExtend",
                        "6c6b4c00526fc32ec4b3da7a01bbb966371120bb"
                    ]
                },
                {
                    "command": [
                        "intro; unfold R_dist in H5; generalize (Rmult_lt_compat_l eps (Rabs (x1 - x0)) 1 H0 H5); rewrite Rmult_1_r; intro; apply Rlt_trans with (r2 := eps * Rabs (x1 - x0)); assumption.",
                        "VernacExtend",
                        "a15aad073f53fa951995372a8b6cb8af7d31ea8c"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rminus_0_r ((f x1 - f x0) * / (x1 - x0))) in H1; rewrite Rabs_mult in H1; cut (x1 - x0 <> 0).",
                        "VernacExtend",
                        "392d5a0e0fe2fb140ad59728b5a45534c6c37a59"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite (Rabs_Rinv (x1 - x0) H9) in H1; generalize (Rmult_lt_compat_l (Rabs (x1 - x0)) (Rabs (f x1 - f x0) * / Rabs (x1 - x0)) eps (Rabs_pos_lt (x1 - x0) H9) H1); intro; rewrite Rmult_comm in H10; rewrite Rmult_assoc in H10; rewrite Rinv_l in H10.",
                        "VernacExtend",
                        "3fa327d3a03ebbac58a9924eaee9840225016be9"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r in H10; rewrite Rmult_comm; assumption.",
                        "VernacExtend",
                        "96d30a6eea4ce6ab10f3325ca6134740612aeb84"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_no_R0; auto.",
                        "VernacExtend",
                        "ef731cb0e0bdebbee31824bbd388f94beb946cac"
                    ]
                },
                {
                    "command": [
                        "apply Rminus_eq_contra; auto.",
                        "VernacExtend",
                        "7631426439f656e5419a22de8053c47677410b05"
                    ]
                },
                {
                    "command": [
                        "split with (Rmin (Rmin (/ 2) x) (eps * / Rabs (2 * d x0))); split.",
                        "VernacExtend",
                        "5b729f61e8fb5f5d1e2c46584c586e14f8abf62e"
                    ]
                },
                {
                    "command": [
                        "cut (Rmin (/ 2) x > 0).",
                        "VernacExtend",
                        "6707ec72ea9b94ec1709d7ce25fcc11039c03073"
                    ]
                },
                {
                    "command": [
                        "cut (eps * / Rabs (2 * d x0) > 0).",
                        "VernacExtend",
                        "7aba7b89fade96ba1a01423ce733e24f664f9026"
                    ]
                },
                {
                    "command": [
                        "intros; elim (Rmin_Rgt (Rmin (/ 2) x) (eps * / Rabs (2 * d x0)) 0); intros a b; apply (b (conj H4 H3)).",
                        "VernacExtend",
                        "11bbdcdb9fcb597e73d978d8b5a85f7bfc008799"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_gt_0_compat; auto.",
                        "VernacExtend",
                        "acc984e96aeaf5028a4e2cfa62bcb5b607fd2997"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt; apply Rinv_0_lt_compat; apply Rabs_pos_lt; apply Rmult_integral_contrapositive; split.",
                        "VernacExtend",
                        "8c748b4ae96274feabe4e1f74d27840508ca4620"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim (Rmin_Rgt (/ 2) x 0); intros a b; cut (0 < 2).",
                        "VernacExtend",
                        "2754ea48ab551f48a75f10e13f49278477c1e56e"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (Rinv_0_lt_compat 2 H3); intro; fold (/ 2 > 0) in H4; apply (b (conj H4 H)).",
                        "VernacExtend",
                        "5c3bfd482f7f0ec691ddfa7d0c0b5c9db21202e7"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "intros; elim H3; clear H3; intros; generalize (let (H1, H2) := Rmin_Rgt (Rmin (/ 2) x) (eps * / Rabs (2 * d x0)) (R_dist x1 x0) in H1); unfold Rgt; intro; elim (H5 H4); clear H5; intros; generalize (let (H1, H2) := Rmin_Rgt (/ 2) x (R_dist x1 x0) in H1); unfold Rgt; intro; elim (H7 H5); clear H7; intros; clear H4 H5; generalize (H1 x1 (conj H3 H8)); clear H1; intro; unfold D_x in H3; elim H3; intros; generalize (not_eq_sym H5); clear H5; intro H5; generalize (Rminus_eq_contra x1 x0 H5); intro; generalize H1; pattern (d x0) at 1; rewrite <- (let (H1, H2) := Rmult_ne (d x0) in H2); rewrite <- (Rinv_l (x1 - x0) H9); unfold R_dist; unfold Rminus at 1; rewrite (Rmult_comm (f x1 - f x0) (/ (x1 - x0))); rewrite (Rmult_comm (/ (x1 - x0) * (x1 - x0)) (d x0)); rewrite <- (Ropp_mult_distr_l_reverse (d x0) (/ (x1 - x0) * (x1 - x0))); rewrite (Rmult_comm (- d x0) (/ (x1 - x0) * (x1 - x0))); rewrite (Rmult_assoc (/ (x1 - x0)) (x1 - x0) (- d x0)); rewrite <- (Rmult_plus_distr_l (/ (x1 - x0)) (f x1 - f x0) ((x1 - x0) * - d x0)) ; rewrite (Rabs_mult (/ (x1 - x0)) (f x1 - f x0 + (x1 - x0) * - d x0)); clear H1; intro; generalize (Rmult_lt_compat_l (Rabs (x1 - x0)) (Rabs (/ (x1 - x0)) * Rabs (f x1 - f x0 + (x1 - x0) * - d x0)) eps (Rabs_pos_lt (x1 - x0) H9) H1); rewrite <- (Rmult_assoc (Rabs (x1 - x0)) (Rabs (/ (x1 - x0))) (Rabs (f x1 - f x0 + (x1 - x0) * - d x0))); rewrite (Rabs_Rinv (x1 - x0) H9); rewrite (Rinv_r (Rabs (x1 - x0)) (Rabs_no_R0 (x1 - x0) H9)); rewrite (let (H1, H2) := Rmult_ne (Rabs (f x1 - f x0 + (x1 - x0) * - d x0)) in H2) ; generalize (Rabs_triang_inv (f x1 - f x0) ((x1 - x0) * d x0)); intro; rewrite (Rmult_comm (x1 - x0) (- d x0)); rewrite (Ropp_mult_distr_l_reverse (d x0) (x1 - x0)); fold (f x1 - f x0 - d x0 * (x1 - x0)); rewrite (Rmult_comm (x1 - x0) (d x0)) in H10; clear H1; intro; generalize (Rle_lt_trans (Rabs (f x1 - f x0) - Rabs (d x0 * (x1 - x0))) (Rabs (f x1 - f x0 - d x0 * (x1 - x0))) (Rabs (x1 - x0) * eps) H10 H1); clear H1; intro; generalize (Rplus_lt_compat_l (Rabs (d x0 * (x1 - x0))) (Rabs (f x1 - f x0) - Rabs (d x0 * (x1 - x0))) ( Rabs (x1 - x0) * eps) H1); unfold Rminus at 2; rewrite (Rplus_comm (Rabs (f x1 - f x0)) (- Rabs (d x0 * (x1 - x0)))); rewrite <- (Rplus_assoc (Rabs (d x0 * (x1 - x0))) (- Rabs (d x0 * (x1 - x0))) (Rabs (f x1 - f x0))); rewrite (Rplus_opp_r (Rabs (d x0 * (x1 - x0)))); rewrite (let (H1, H2) := Rplus_ne (Rabs (f x1 - f x0)) in H2); clear H1; intro; cut (Rabs (d x0 * (x1 - x0)) + Rabs (x1 - x0) * eps < eps).",
                        "VernacExtend",
                        "b3e536ef9d2795d055fc4dd0e2e95d3528a0af20"
                    ]
                },
                {
                    "command": [
                        "intro; apply (Rlt_trans (Rabs (f x1 - f x0)) (Rabs (d x0 * (x1 - x0)) + Rabs (x1 - x0) * eps) eps H1 H11).",
                        "VernacExtend",
                        "5eee836773bdde0373eae6735da6b8b1bc88d844"
                    ]
                },
                {
                    "command": [
                        "clear H1 H5 H3 H10; generalize (Rabs_pos_lt (d x0) H2); intro; unfold Rgt in H0; generalize (Rmult_lt_compat_l eps (R_dist x1 x0) (/ 2) H0 H7); clear H7; intro; generalize (Rmult_lt_compat_l (Rabs (d x0)) (R_dist x1 x0) ( eps * / Rabs (2 * d x0)) H1 H6); clear H6; intro; rewrite (Rmult_comm eps (R_dist x1 x0)) in H3; unfold R_dist in H3, H5; rewrite <- (Rabs_mult (d x0) (x1 - x0)) in H5; rewrite (Rabs_mult 2 (d x0)) in H5; cut (Rabs 2 <> 0).",
                        "VernacExtend",
                        "ac48c33be00b3ee784ac7795bdf1e52550822ce2"
                    ]
                },
                {
                    "command": [
                        "intro; fold (Rabs (d x0) > 0) in H1; rewrite (Rinv_mult_distr (Rabs 2) (Rabs (d x0)) H6 (Rlt_dichotomy_converse (Rabs (d x0)) 0 (or_intror (Rabs (d x0) < 0) H1))) in H5; rewrite (Rmult_comm (Rabs (d x0)) (eps * (/ Rabs 2 * / Rabs (d x0)))) in H5; rewrite <- (Rmult_assoc eps (/ Rabs 2) (/ Rabs (d x0))) in H5; rewrite (Rmult_assoc (eps * / Rabs 2) (/ Rabs (d x0)) (Rabs (d x0))) in H5; rewrite (Rinv_l (Rabs (d x0)) (Rlt_dichotomy_converse (Rabs (d x0)) 0 (or_intror (Rabs (d x0) < 0) H1))) in H5; rewrite (let (H1, H2) := Rmult_ne (eps * / Rabs 2) in H1) in H5; cut (Rabs 2 = 2).",
                        "VernacExtend",
                        "afea2a5956548da8f0f67816889f4d05bc778ae2"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H7 in H5; generalize (Rplus_lt_compat (Rabs (d x0 * (x1 - x0))) (eps * / 2) (Rabs (x1 - x0) * eps) (eps * / 2) H5 H3); intro; rewrite eps2 in H10; assumption.",
                        "VernacExtend",
                        "81a600ff5214374478682ad8b6b148e4f0e88f9c"
                    ]
                },
                {
                    "command": [
                        "unfold Rabs; destruct (Rcase_abs 2) as [Hlt|Hge]; auto.",
                        "VernacExtend",
                        "9272818dabeec9b99da873ba3eb72241d514e24a"
                    ]
                },
                {
                    "command": [
                        "cut (0 < 2).",
                        "VernacExtend",
                        "189aca789b845d21f0d7bea07b6f99b547fdf331"
                    ]
                },
                {
                    "command": [
                        "intro H7; elim (Rlt_asym 0 2 H7 Hlt).",
                        "VernacExtend",
                        "f112fccfc36189474cd41ba8ba3d8e687d8e7be2"
                    ]
                },
                {
                    "command": [
                        "lra.",
                        "VernacExtend",
                        "c37bca18aec699b6843eab75e25df2491e3b9848"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_no_R0.",
                        "VernacExtend",
                        "8d37b098d9cb0f050cfd8b29c49d318c2b960566"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dconst",
            "line_nb": 44,
            "steps": [
                {
                    "command": [
                        "unfold D_in; intros; unfold limit1_in; unfold limit_in; unfold Rdiv; intros; simpl; split with eps; split; auto.",
                        "VernacExtend",
                        "7388dde899fc60d702c0df9ab8c8c41eea4ae03f"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite (Rminus_diag_eq y y (eq_refl y)); rewrite Rmult_0_l; unfold R_dist; rewrite (Rminus_diag_eq 0 0 (eq_refl 0)); unfold Rabs; case (Rcase_abs 0); intro.",
                        "VernacExtend",
                        "53ab413676127ad5d0d6b7b0d8f619ca9cce60cc"
                    ]
                },
                {
                    "command": [
                        "absurd (0 < 0); auto.",
                        "VernacExtend",
                        "e64a6f4f2d2f69a5bfa1457dffbb509fb35c31e9"
                    ]
                },
                {
                    "command": [
                        "red; intro; apply (Rlt_irrefl 0 H1).",
                        "VernacExtend",
                        "9d5316e5fa4c4d7eb718cd166bd5eb59471c61cf"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt in H0; assumption.",
                        "VernacExtend",
                        "9f18f72fc281791a7f6bb2fa8cd37ea5c6028841"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dx",
            "line_nb": 51,
            "steps": [
                {
                    "command": [
                        "unfold D_in; unfold Rdiv; intros; unfold limit1_in; unfold limit_in; intros; simpl; split with eps; split; auto.",
                        "VernacExtend",
                        "9ea181281f17581378985c30bccd650f89c659a2"
                    ]
                },
                {
                    "command": [
                        "intros; elim H0; clear H0; intros; unfold D_x in H0; elim H0; intros; rewrite (Rinv_r (x - x0) (Rminus_eq_contra x x0 (sym_not_eq H3))); unfold R_dist; rewrite (Rminus_diag_eq 1 1 (refl_equal 1)); unfold Rabs; case (Rcase_abs 0) as [Hlt|Hge].",
                        "VernacExtend",
                        "a2a4aecb7dfe9738bedf97ab1de3e83ea6c21c22"
                    ]
                },
                {
                    "command": [
                        "absurd (0 < 0); auto.",
                        "VernacExtend",
                        "e64a6f4f2d2f69a5bfa1457dffbb509fb35c31e9"
                    ]
                },
                {
                    "command": [
                        "red in |- *; intro; apply (Rlt_irrefl 0 Hlt).",
                        "VernacExtend",
                        "4c9e2c2308c4b24d9eb76e1eeeb44f1e02cffa34"
                    ]
                },
                {
                    "command": [
                        "unfold Rgt in H; assumption.",
                        "VernacExtend",
                        "feaaf7f3f13d4ca02e0755afe7c24b05a9c8c9f3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dadd",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "unfold D_in; intros; generalize (limit_plus (fun x:R => (f x - f x0) * / (x - x0)) (fun x:R => (g x - g x0) * / (x - x0)) (D_x D x0) ( df x0) (dg x0) x0 H H0); clear H H0; unfold limit1_in; unfold limit_in; simpl; intros; elim (H eps H0); clear H; intros; elim H; clear H; intros; split with x; split; auto; intros; generalize (H1 x1 H2); clear H1; intro; rewrite (Rmult_comm (f x1 - f x0) (/ (x1 - x0))) in H1; rewrite (Rmult_comm (g x1 - g x0) (/ (x1 - x0))) in H1; rewrite <- (Rmult_plus_distr_l (/ (x1 - x0)) (f x1 - f x0) (g x1 - g x0)) in H1; rewrite (Rmult_comm (/ (x1 - x0)) (f x1 - f x0 + (g x1 - g x0))) in H1; cut (f x1 - f x0 + (g x1 - g x0) = f x1 + g x1 - (f x0 + g x0)).",
                        "VernacExtend",
                        "7752423a4def5fc0b023664d2e6074db0c4c6169"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H3 in H1; assumption.",
                        "VernacExtend",
                        "47e667117c90837e3693eb980d42b7c5a27fb4da"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dmult",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "intros; unfold D_in; generalize H H0; intros; unfold D_in in H, H0; generalize (cont_deriv f df D x0 H1); unfold continue_in; intro; generalize (limit_mul (fun x:R => (g x - g x0) * / (x - x0)) ( fun x:R => f x) (D_x D x0) (dg x0) (f x0) x0 H0 H3); intro; cut (limit1_in (fun x:R => g x0) (D_x D x0) (g x0) x0).",
                        "VernacExtend",
                        "e219a5ac7b763fa3c521d2d08ea853d9c94ac1ad"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (limit_mul (fun x:R => (f x - f x0) * / (x - x0)) ( fun _:R => g x0) (D_x D x0) (df x0) (g x0) x0 H H5); clear H H0 H1 H2 H3 H5; intro; generalize (limit_plus (fun x:R => (f x - f x0) * / (x - x0) * g x0) (fun x:R => (g x - g x0) * / (x - x0) * f x) ( D_x D x0) (df x0 * g x0) (dg x0 * f x0) x0 H H4); clear H4 H; intro; unfold limit1_in in H; unfold limit_in in H; simpl in H; unfold limit1_in; unfold limit_in; simpl; intros; elim (H eps H0); clear H; intros; elim H; clear H; intros; split with x; split; auto; intros; generalize (H1 x1 H2); clear H1; intro; rewrite (Rmult_comm (f x1 - f x0) (/ (x1 - x0))) in H1; rewrite (Rmult_comm (g x1 - g x0) (/ (x1 - x0))) in H1; rewrite (Rmult_assoc (/ (x1 - x0)) (f x1 - f x0) (g x0)) in H1; rewrite (Rmult_assoc (/ (x1 - x0)) (g x1 - g x0) (f x1)) in H1; rewrite <- (Rmult_plus_distr_l (/ (x1 - x0)) ((f x1 - f x0) * g x0) ((g x1 - g x0) * f x1)) in H1; rewrite (Rmult_comm (/ (x1 - x0)) ((f x1 - f x0) * g x0 + (g x1 - g x0) * f x1)) in H1; rewrite (Rmult_comm (dg x0) (f x0)) in H1; cut ((f x1 - f x0) * g x0 + (g x1 - g x0) * f x1 = f x1 * g x1 - f x0 * g x0).",
                        "VernacExtend",
                        "afb9bad87b75039c6a311ee715a284281216c301"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite H3 in H1; assumption.",
                        "VernacExtend",
                        "47e667117c90837e3693eb980d42b7c5a27fb4da"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold limit1_in; unfold limit_in; simpl; intros; split with eps; split; auto; intros; elim (R_dist_refl (g x0) (g x0)); intros a b; rewrite (b (eq_refl (g x0))); unfold Rgt in H; assumption.",
                        "VernacExtend",
                        "bcab9ae4dad7bca14f5410ed2d4dc2aec23a8c2b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dmult_const",
            "line_nb": 70,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Dmult D (fun _:R => 0) df (fun _:R => a) f x0 (Dconst D a x0) H); unfold D_in; intros; rewrite (Rmult_0_l (f x0)) in H0; rewrite (let (H1, H2) := Rplus_ne (a * df x0) in H2) in H0; assumption.",
                        "VernacExtend",
                        "d22c75e93ffb5b5089b0a23979b2cffee9451c8d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dopp",
            "line_nb": 73,
            "steps": [
                {
                    "command": [
                        "intros; generalize (Dmult_const D f df x0 (-1) H); unfold D_in; unfold limit1_in; unfold limit_in; intros; generalize (H0 eps H1); clear H0; intro; elim H0; clear H0; intros; elim H0; clear H0; simpl; intros; split with x; split; auto.",
                        "VernacExtend",
                        "f53d40c46506c0c74e2d5f0aa15da701ab058ae2"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (H2 x1 H3); clear H2; intro.",
                        "VernacExtend",
                        "1de160ad008a568100a5c2a2bae8d0a38eea6832"
                    ]
                },
                {
                    "command": [
                        "replace (- f x1 - - f x0) with (-1 * f x1 - -1 * f x0) by ring.",
                        "VernacExtend",
                        "1a7ab0020adcecc52452df8acc4c9c3c06eed832"
                    ]
                },
                {
                    "command": [
                        "replace (- df x0) with (-1 * df x0) by ring.",
                        "VernacExtend",
                        "7f6c0789dd8f7ebc060d420ecdc7f190feaf81da"
                    ]
                },
                {
                    "command": [
                        "exact H2.",
                        "VernacExtend",
                        "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dminus",
            "line_nb": 80,
            "steps": [
                {
                    "command": [
                        "unfold Rminus; intros; generalize (Dopp D g dg x0 H0); intro; apply (Dadd D df (fun x:R => - dg x) f (fun x:R => - g x) x0); assumption.",
                        "VernacExtend",
                        "f080363d5f63bad147461bc117f49c913abad03c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dx_pow_n",
            "line_nb": 83,
            "steps": [
                {
                    "command": [
                        "simple induction n; intros.",
                        "VernacExtend",
                        "b546aef1a8f9462c47d15661908893070e223e89"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite Rmult_0_l; apply Dconst.",
                        "VernacExtend",
                        "fe81f333af66dc8998881893b5f765b623e683c6"
                    ]
                },
                {
                    "command": [
                        "intros; cut (n0 = (S n0 - 1)%nat); [ intro a; rewrite <- a; clear a | simpl; apply minus_n_O ].",
                        "VernacExtend",
                        "84dbb9869ea226df95c4647da7d7d2acb5a0c5da"
                    ]
                },
                {
                    "command": [
                        "generalize (Dmult D (fun _:R => 1) (fun x:R => INR n0 * x ^ (n0 - 1)) ( fun x:R => x) (fun x:R => x ^ n0) x0 (Dx D x0) ( H D x0)); unfold D_in; unfold limit1_in; unfold limit_in; simpl; intros; elim (H0 eps H1); clear H0; intros; elim H0; clear H0; intros; split with x; split; auto.",
                        "VernacExtend",
                        "610cdb4dbbd6be7426a7b376f757770c19ed442f"
                    ]
                },
                {
                    "command": [
                        "intros; generalize (H2 x1 H3); clear H2 H3; intro; rewrite (let (H1, H2) := Rmult_ne (x0 ^ n0) in H2) in H2; rewrite (tech_pow_Rmult x1 n0) in H2; rewrite (tech_pow_Rmult x0 n0) in H2; rewrite (Rmult_comm (INR n0) (x0 ^ (n0 - 1))) in H2; rewrite <- (Rmult_assoc x0 (x0 ^ (n0 - 1)) (INR n0)) in H2; rewrite (tech_pow_Rmult x0 (n0 - 1)) in H2; elim (Peano_dec.eq_nat_dec n0 0) ; intros cond.",
                        "VernacExtend",
                        "9d233184a469d75fb0ac952595eea24cec631c04"
                    ]
                },
                {
                    "command": [
                        "rewrite cond in H2; rewrite cond; simpl in H2; simpl; cut (1 + x0 * 1 * 0 = 1 * 1); [ intro A; rewrite A in H2; assumption | ring ].",
                        "VernacExtend",
                        "5830495ac7954b363056368579d0d669d02521e1"
                    ]
                },
                {
                    "command": [
                        "cut (n0 <> 0%nat -> S (n0 - 1) = n0); [ intro | omega ]; rewrite (H3 cond) in H2; rewrite (Rmult_comm (x0 ^ n0) (INR n0)) in H2; rewrite (tech_pow_Rplus x0 n0 n0) in H2; assumption.",
                        "VernacExtend",
                        "b97c242f83b00bd024b655dc5c0f5c0065d10ca2"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Dcomp",
            "line_nb": 92,
            "steps": [
                {
                    "command": [
                        "intros Df Dg df dg f g x0 H H0; generalize H H0; unfold D_in; unfold Rdiv; intros; generalize (limit_comp f (fun x:R => (g x - g (f x0)) * / (x - f x0)) ( D_x Df x0) (D_x Dg (f x0)) (f x0) (dg (f x0)) x0); intro; generalize (cont_deriv f df Df x0 H); intro; unfold continue_in in H4; generalize (H3 H4 H2); clear H3; intro; generalize (limit_mul (fun x:R => (g (f x) - g (f x0)) * / (f x - f x0)) (fun x:R => (f x - f x0) * / (x - x0)) (Dgf (D_x Df x0) (D_x Dg (f x0)) f) (dg (f x0)) ( df x0) x0 H3); intro; cut (limit1_in (fun x:R => (f x - f x0) * / (x - x0)) (Dgf (D_x Df x0) (D_x Dg (f x0)) f) (df x0) x0).",
                        "VernacExtend",
                        "3d942c4cfcf99290e4ad1440fdeedebd67690db7"
                    ]
                },
                {
                    "command": [
                        "intro; generalize (H5 H6); clear H5; intro; generalize (limit_mul (fun x:R => (f x - f x0) * / (x - x0)) ( fun x:R => dg (f x0)) (D_x Df x0) (df x0) (dg (f x0)) x0 H1 (limit_free (fun x:R => dg (f x0)) (D_x Df x0) x0 x0)); intro; unfold limit1_in; unfold limit_in; simpl; unfold limit1_in in H5, H7; unfold limit_in in H5, H7; simpl in H5, H7; intros; elim (H5 eps H8); elim (H7 eps H8); clear H5 H7; intros; elim H5; elim H7; clear H5 H7; intros; split with (Rmin x x1); split.",
                        "VernacExtend",
                        "e2030d26168da605ac3dff00a7f5237c9e44d516"
                    ]
                },
                {
                    "command": [
                        "elim (Rmin_Rgt x x1 0); intros a b; apply (b (conj H9 H5)); clear a b.",
                        "VernacExtend",
                        "141d4b615bbc71e9990f1f52b546890e4462fa6f"
                    ]
                },
                {
                    "command": [
                        "intros; elim H11; clear H11; intros; elim (Rmin_Rgt x x1 (R_dist x2 x0)); intros a b; clear b; unfold Rgt in a; elim (a H12); clear H5 a; intros; unfold D_x, Dgf in H11, H7, H10; clear H12; elim (Req_dec (f x2) (f x0)); intro.",
                        "VernacExtend",
                        "c075ab6e6c6c8349b6e63f12e8e917711284c610"
                    ]
                },
                {
                    "command": [
                        "elim H11; clear H11; intros; elim H11; clear H11; intros; generalize (H10 x2 (conj (conj H11 H14) H5)); intro; rewrite (Rminus_diag_eq (f x2) (f x0) H12) in H16; rewrite (Rmult_0_l (/ (x2 - x0))) in H16; rewrite (Rmult_0_l (dg (f x0))) in H16; rewrite H12; rewrite (Rminus_diag_eq (g (f x0)) (g (f x0)) (eq_refl (g (f x0)))); rewrite (Rmult_0_l (/ (x2 - x0))); assumption.",
                        "VernacExtend",
                        "ca8fc28c7f19ad1451f25b1e4bd14afdcbeb7d6d"
                    ]
                },
                {
                    "command": [
                        "clear H10 H5; elim H11; clear H11; intros; elim H5; clear H5; intros; cut (((Df x2 /\\ x0 <> x2) /\\ Dg (f x2) /\\ f x0 <> f x2) /\\ R_dist x2 x0 < x1); auto; intro; generalize (H7 x2 H14); intro; generalize (Rminus_eq_contra (f x2) (f x0) H12); intro; rewrite (Rmult_assoc (g (f x2) - g (f x0)) (/ (f x2 - f x0)) ((f x2 - f x0) * / (x2 - x0))) in H15; rewrite <- (Rmult_assoc (/ (f x2 - f x0)) (f x2 - f x0) (/ (x2 - x0))) in H15; rewrite (Rinv_l (f x2 - f x0) H16) in H15; rewrite (let (H1, H2) := Rmult_ne (/ (x2 - x0)) in H2) in H15; rewrite (Rmult_comm (df x0) (dg (f x0))); assumption.",
                        "VernacExtend",
                        "ad467765369ebef5a4c9e19459ba8b2541a8f66b"
                    ]
                },
                {
                    "command": [
                        "clear H5 H3 H4 H2; unfold limit1_in; unfold limit_in; simpl; unfold limit1_in in H1; unfold limit_in in H1; simpl in H1; intros; elim (H1 eps H2); clear H1; intros; elim H1; clear H1; intros; split with x; split; auto; intros; unfold D_x, Dgf in H4, H3; elim H4; clear H4; intros; elim H4; clear H4; intros; exact (H3 x1 (conj H4 H5)).",
                        "VernacExtend",
                        "9f1beaf5eec86bd73561346d342ad6913bc99cbc"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "D_pow_n",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "intros n D x0 expr dexpr H; generalize (Dcomp D D dexpr (fun x:R => INR n * x ^ (n - 1)) expr ( fun x:R => x ^ n) x0 H (Dx_pow_n n D (expr x0))); intro; unfold D_in; unfold limit1_in; unfold limit_in; simpl; intros; unfold D_in in H0; unfold limit1_in in H0; unfold limit_in in H0; simpl in H0; elim (H0 eps H1); clear H0; intros; elim H0; clear H0; intros; split with x; split; intros; auto.",
                        "VernacExtend",
                        "9bd32d6a552c4fa1605730a744ed2e7a24f6dadd"
                    ]
                },
                {
                    "command": [
                        "cut (dexpr x0 * (INR n * expr x0 ^ (n - 1)) = INR n * expr x0 ^ (n - 1) * dexpr x0); [ intro Rew; rewrite <- Rew; exact (H2 x1 H3) | ring ].",
                        "VernacExtend",
                        "40e71f3f6839638d65789c531b761c6627cbf28d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}