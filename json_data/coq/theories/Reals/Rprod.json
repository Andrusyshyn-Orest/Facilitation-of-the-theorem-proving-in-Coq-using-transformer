{
    "filename": "theories/Reals/Rprod.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Compare.",
            "VernacRequire",
            "ed10e123546ab163fca5027b6544d1560fdf964f"
        ],
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Rseries.",
            "VernacRequire",
            "7a432dd14e4529f426efb08dc0832c62a8dcc16b"
        ],
        [
            "Require Import PartSum.",
            "VernacRequire",
            "615de8ef0ed75bdb68bd5486514f11be1837ffd8"
        ],
        [
            "Require Import Binomial.",
            "VernacRequire",
            "8a7d55ecae5a97473221435d8b714d9c7fc60a85"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Fixpoint prod_f_R0 (f:nat -> R) (N:nat) : R := match N with | O => f O | S p => prod_f_R0 f p * f (S p) end.",
            "VernacFixpoint",
            "5059336299f93fe7ed8e4f7e427ba5020ea22c15"
        ],
        [
            "Notation prod_f_SO := (fun An N => prod_f_R0 (fun n => An (S n)) N).",
            "VernacSyntacticDefinition",
            "291292da2443d42c9a3778fd5f6c7b1b2f417e87"
        ],
        [
            "Lemma prod_SO_split : forall (An:nat -> R) (n k:nat), (k < n)%nat -> prod_f_R0 An n = prod_f_R0 An k * prod_f_R0 (fun l:nat => An (k +1+l)%nat) (n - k -1).",
            "VernacStartTheoremProof",
            "c60b5f8ba74ed0414a9f8459223fc4c6608cc180"
        ],
        [
            "intros; induction n as [| n Hrecn].",
            "VernacExtend",
            "d8127da965164ab3db77421604b758d5eb34a150"
        ],
        [
            "absurd (k < 0)%nat; omega.",
            "VernacExtend",
            "76250f168fe45129a04a976da84a2cecdb33f47c"
        ],
        [
            "cut (k = n \\/ (k < n)%nat);[intro; elim H0; intro|omega].",
            "VernacExtend",
            "c7274cb8593824d72e3f5d661fbc866a744d037d"
        ],
        [
            "replace (S n - k - 1)%nat with O; [rewrite H1; simpl|omega].",
            "VernacExtend",
            "0024631b3919daef49b374daff307ea7748854f1"
        ],
        [
            "replace (n+1+0)%nat with (S n); ring.",
            "VernacExtend",
            "cbf0879997cdf0027b0634686baacfce5f4cab2b"
        ],
        [
            "replace (S n - k-1)%nat with (S (n - k-1));[idtac|omega].",
            "VernacExtend",
            "6f141bb8c398743e6467a96280a55f78257bb941"
        ],
        [
            "simpl; replace (k + S (n - k))%nat with (S n).",
            "VernacExtend",
            "80d1cefc376a938cd54c15cf62ce5d2b3186899c"
        ],
        [
            "replace (k + 1 + S (n - k - 1))%nat with (S n).",
            "VernacExtend",
            "caa33172d6768bbb8331fdaa994283ccff8ea857"
        ],
        [
            "rewrite Hrecn; [ ring | assumption ].",
            "VernacExtend",
            "f72e26807eb04137727337fd31fdfa1adfa31f82"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prod_SO_pos : forall (An:nat -> R) (N:nat), (forall n:nat, (n <= N)%nat -> 0 <= An n) -> 0 <= prod_f_R0 An N.",
            "VernacStartTheoremProof",
            "24d0664a9759b8617e6e4190fdcea9be90bdba55"
        ],
        [
            "intros; induction N as [| N HrecN].",
            "VernacExtend",
            "176c4a7e299087f2a01baed2bde05aa27663e10d"
        ],
        [
            "simpl; apply H; trivial.",
            "VernacExtend",
            "91a49d620f019bc2b8043afe4535dd996cb1d8f0"
        ],
        [
            "simpl; apply Rmult_le_pos.",
            "VernacExtend",
            "19369b0aa94c1b22ec36d3eacbdbdf16eadcf1ce"
        ],
        [
            "apply HrecN; intros; apply H; apply le_trans with N; [ assumption | apply le_n_Sn ].",
            "VernacExtend",
            "311f320c84fe5d5890fa2b81e70da0adb68d0b63"
        ],
        [
            "apply H; apply le_n.",
            "VernacExtend",
            "4fcfa6c3b8354852210bcb5cf4ce4c51acba106e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma prod_SO_Rle : forall (An Bn:nat -> R) (N:nat), (forall n:nat, (n <= N)%nat -> 0 <= An n <= Bn n) -> prod_f_R0 An N <= prod_f_R0 Bn N.",
            "VernacStartTheoremProof",
            "1d3fcedebc78f4b3d33488dd05a6395d710fa03a"
        ],
        [
            "intros; induction N as [| N HrecN].",
            "VernacExtend",
            "176c4a7e299087f2a01baed2bde05aa27663e10d"
        ],
        [
            "elim H with O; trivial.",
            "VernacExtend",
            "11104243effa95c93bbd61a7f701302857fe9c60"
        ],
        [
            "simpl; apply Rle_trans with (prod_f_R0 An N * Bn (S N)).",
            "VernacExtend",
            "07164c0bf6db1be62adce848e60be3b9c6233f1e"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply prod_SO_pos; intros; elim (H n (le_trans _ _ _ H0 (le_n_Sn N))); intros; assumption.",
            "VernacExtend",
            "6ad26b134e0f254daec697c6eccb534be1b3740f"
        ],
        [
            "elim (H (S N) (le_n (S N))); intros; assumption.",
            "VernacExtend",
            "6cffe221daccc1e6034be15537b18ab4f0865383"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Bn (S N))); apply Rmult_le_compat_l.",
            "VernacExtend",
            "6b6f125c2c60d024a87662a6900aa8806e0792de"
        ],
        [
            "elim (H (S N) (le_n (S N))); intros.",
            "VernacExtend",
            "3da22db49023603dd6eb3ef008d212e2f0da9c61"
        ],
        [
            "apply Rle_trans with (An (S N)); assumption.",
            "VernacExtend",
            "b659da1da3e736485465efbf3e7ce213cc0a22cc"
        ],
        [
            "apply HrecN; intros; elim (H n (le_trans _ _ _ H0 (le_n_Sn N))); intros; split; assumption.",
            "VernacExtend",
            "6c2cee4f74f6b3d6af0e4a00564194fcdba9def0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fact_prodSO : forall n:nat, INR (fact n) = prod_f_R0 (fun k:nat => (match (eq_nat_dec k 0) with | left _ => 1%R | right _ => INR k end)) n.",
            "VernacStartTheoremProof",
            "b14624e8143de442d345cb499d8209eaf429de1c"
        ],
        [
            "intro; induction n as [| n Hrecn].",
            "VernacExtend",
            "e436d2d69f81fe61484702aa2043459f6821c2af"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "simpl; rewrite <- Hrecn.",
            "VernacExtend",
            "04b7a7dbc521ca4c1f8c278b1b0e282ebc388251"
        ],
        [
            "case n; auto with real.",
            "VernacExtend",
            "c4538820721192c9533dae8aa567c7afa26cf585"
        ],
        [
            "intros; repeat rewrite plus_INR;rewrite mult_INR;ring.",
            "VernacExtend",
            "26a377595ea0405c9c5afff52d495cab8c82ed96"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma le_n_2n : forall n:nat, (n <= 2 * n)%nat.",
            "VernacStartTheoremProof",
            "79af05ad639b15bb24d29e1ad8e28b4cc88e6731"
        ],
        [
            "simple induction n.",
            "VernacExtend",
            "55f6dddaea9189658ce497de54569ba3016f1fd5"
        ],
        [
            "replace (2 * 0)%nat with 0%nat; [ apply le_n | ring ].",
            "VernacExtend",
            "6b72692cb5b44fd593844b058ee5cf394e132835"
        ],
        [
            "intros; replace (2 * S n0)%nat with (S (S (2 * n0))).",
            "VernacExtend",
            "727a4698d9df7a4785490d88009db47e21dadda1"
        ],
        [
            "apply le_n_S; apply le_S; assumption.",
            "VernacExtend",
            "3d4bedf0743ef93b90f2d974e3993b1ee7373595"
        ],
        [
            "replace (S (S (2 * n0))) with (2 * n0 + 2)%nat; [ idtac | ring ].",
            "VernacExtend",
            "25c294b1e10b6a352575cb36ff95dceb024c7328"
        ],
        [
            "replace (S n0) with (n0 + 1)%nat; [ idtac | ring ].",
            "VernacExtend",
            "4c245ffd7704eb408cff8d7e374782e1fe971c30"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma RfactN_fact2N_factk : forall N k:nat, (k <= 2 * N)%nat -> Rsqr (INR (fact N)) <= INR (fact (2 * N - k)) * INR (fact k).",
            "VernacStartTheoremProof",
            "895dfa62469a418211a31794479afd4a8a3aab43"
        ],
        [
            "assert (forall (n:nat), 0 <= (if eq_nat_dec n 0 then 1 else INR n)).",
            "VernacExtend",
            "8196cf191edaa0bfadcbbdbdd558a5b4842b7da0"
        ],
        [
            "intros; case (eq_nat_dec n 0); auto with real.",
            "VernacExtend",
            "3bba7cb2407cf82a769ff61e1b503168e3dbaa43"
        ],
        [
            "assert (forall (n:nat), (0 < n)%nat -> (if eq_nat_dec n 0 then 1 else INR n) = INR n).",
            "VernacExtend",
            "66def08b31ec82f59e45b347c81771e9f1f2584d"
        ],
        [
            "intros n; case (eq_nat_dec n 0); auto with real.",
            "VernacExtend",
            "04156700db57af0cd04edffae4955e4b0ccd1df9"
        ],
        [
            "intros; absurd (0 < n)%nat; omega.",
            "VernacExtend",
            "be759be78c1ef1a4fc09d014827e21f29133e83b"
        ],
        [
            "intros; unfold Rsqr; repeat rewrite fact_prodSO.",
            "VernacExtend",
            "a8777394f29fc3f31a270c4106e8736ad7b4923b"
        ],
        [
            "cut ((k=N)%nat \\/ (k < N)%nat \\/ (N < k)%nat).",
            "VernacExtend",
            "1fcbe9419d9709265f184767c2b659cfb0961096"
        ],
        [
            "intro H2; elim H2; intro H3.",
            "VernacExtend",
            "fe82b0a8c7ccc45a7a492a76f23b98999383ba9f"
        ],
        [
            "rewrite H3; replace (2*N-N)%nat with N;[right; ring|omega].",
            "VernacExtend",
            "9cac22008936bccf4348fd49be712c2f23b572a9"
        ],
        [
            "case H3; intro; clear H2 H3.",
            "VernacExtend",
            "d88710d20f9a749c3b1bbd4603a5fe66c5a0abad"
        ],
        [
            "rewrite (prod_SO_split (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) (2 * N - k) N).",
            "VernacExtend",
            "f319687aa01406448a384698ec4737095d5ffc3a"
        ],
        [
            "rewrite Rmult_assoc; apply Rmult_le_compat_l.",
            "VernacExtend",
            "994d36ecbd521a8caf6578dc1f8ef6ee2f2064df"
        ],
        [
            "apply prod_SO_pos; intros; auto.",
            "VernacExtend",
            "6c28bf5594c33da66c344b863a800cbd5b918e76"
        ],
        [
            "replace (2 * N - k - N-1)%nat with (N - k-1)%nat.",
            "VernacExtend",
            "7ac9a3b9c5eefcdb8cf7940276b9550a2027dc52"
        ],
        [
            "rewrite Rmult_comm; rewrite (prod_SO_split (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) N k).",
            "VernacExtend",
            "ac2f0499bba8d51405c3da3889eb3163f1b3fc66"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply prod_SO_pos; intros; auto.",
            "VernacExtend",
            "6c28bf5594c33da66c344b863a800cbd5b918e76"
        ],
        [
            "apply prod_SO_Rle; intros; split; auto.",
            "VernacExtend",
            "b67cf14a229ff0cb2937c7fbdd9c8fa674084503"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_INR; omega.",
            "VernacExtend",
            "fae807d5a7ce9f4f75663f0eb8a547d3d01c722a"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "rewrite <- (Rmult_comm (prod_f_R0 (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) k)); rewrite (prod_SO_split (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) k N).",
            "VernacExtend",
            "7244b32b9a05a5b334c01f35fd6228c8f6179e5e"
        ],
        [
            "rewrite Rmult_assoc; apply Rmult_le_compat_l.",
            "VernacExtend",
            "994d36ecbd521a8caf6578dc1f8ef6ee2f2064df"
        ],
        [
            "apply prod_SO_pos; intros; auto.",
            "VernacExtend",
            "6c28bf5594c33da66c344b863a800cbd5b918e76"
        ],
        [
            "rewrite Rmult_comm; rewrite (prod_SO_split (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) N (2 * N - k)).",
            "VernacExtend",
            "a4cfdda657aaa36f10a61c2b9554335497d5c9c0"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply prod_SO_pos; intros; auto.",
            "VernacExtend",
            "6c28bf5594c33da66c344b863a800cbd5b918e76"
        ],
        [
            "replace (N - (2 * N - k)-1)%nat with (k - N-1)%nat.",
            "VernacExtend",
            "4047e225cf021c47d22426544eea0c1426c78ce3"
        ],
        [
            "apply prod_SO_Rle; intros; split; auto.",
            "VernacExtend",
            "b67cf14a229ff0cb2937c7fbdd9c8fa674084503"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "rewrite H0.",
            "VernacExtend",
            "1a54b13ac1654793174947eafd5c41a3f024eb49"
        ],
        [
            "apply le_INR; omega.",
            "VernacExtend",
            "fae807d5a7ce9f4f75663f0eb8a547d3d01c722a"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma INR_fact_lt_0 : forall n:nat, 0 < INR (fact n).",
            "VernacStartTheoremProof",
            "8ef915da4eaeced2acf98ccbbd377101c93a6485"
        ],
        [
            "intro; apply lt_INR_0; apply neq_O_lt; red; intro; elim (fact_neq_0 n); symmetry ; assumption.",
            "VernacExtend",
            "2068b33248d756c96a6115d44dfe903877803c15"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma C_maj : forall N k:nat, (k <= 2 * N)%nat -> C (2 * N) k <= C (2 * N) N.",
            "VernacStartTheoremProof",
            "4ef09d94dd27110a62fc8a0eb3133869e3b221eb"
        ],
        [
            "intros; unfold C; unfold Rdiv; apply Rmult_le_compat_l.",
            "VernacExtend",
            "66f38af7336ed9f0cee7ac2924e220987e0b6852"
        ],
        [
            "apply pos_INR.",
            "VernacExtend",
            "0d9ef3d5703b4f3e1294027dac0f940b9f78b56e"
        ],
        [
            "replace (2 * N - N)%nat with N.",
            "VernacExtend",
            "2c54f040ad732a92fbdf12b231ab631b730c37c3"
        ],
        [
            "apply Rmult_le_reg_l with (INR (fact N) * INR (fact N)).",
            "VernacExtend",
            "8951f6696c1975a00963d53eaaf638ec64b42737"
        ],
        [
            "apply Rmult_lt_0_compat; apply INR_fact_lt_0.",
            "VernacExtend",
            "0b8d00487e1156e963850d00d2e3b2a8e2fa0d29"
        ],
        [
            "rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "2ca74255a63c294f9442d956f32a2e3784636efb"
        ],
        [
            "rewrite Rmult_comm; apply Rmult_le_reg_l with (INR (fact k) * INR (fact (2 * N - k))).",
            "VernacExtend",
            "8983aec8a78f6c2e4a14b3bf3a85274f48060757"
        ],
        [
            "apply Rmult_lt_0_compat; apply INR_fact_lt_0.",
            "VernacExtend",
            "0b8d00487e1156e963850d00d2e3b2a8e2fa0d29"
        ],
        [
            "rewrite Rmult_1_r; rewrite <- mult_INR; rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "c3be47a8777d83a2146ebd68c647bf70aebec130"
        ],
        [
            "rewrite Rmult_1_l; rewrite mult_INR; rewrite (Rmult_comm (INR (fact k))); replace (INR (fact N) * INR (fact N)) with (Rsqr (INR (fact N))).",
            "VernacExtend",
            "932f96b23c4e12c468492f6d14eb03223e5ec11e"
        ],
        [
            "apply RfactN_fact2N_factk.",
            "VernacExtend",
            "f9bf103d828c4a0a7b9725a719a6b81c9910e9fa"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "rewrite mult_INR; apply prod_neq_R0; apply INR_fact_neq_0.",
            "VernacExtend",
            "2b816e047b3633f2aa2d4cd993f1fa8c3248688f"
        ],
        [
            "apply prod_neq_R0; apply INR_fact_neq_0.",
            "VernacExtend",
            "d44eb9a54774e56e8f99d537e1eab8470ae5dfbe"
        ],
        [
            "omega.",
            "VernacExtend",
            "32c6c865d255452c7e10c77111456d1981cede39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "prod_SO_split",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros; induction n as [| n Hrecn].",
                        "VernacExtend",
                        "d8127da965164ab3db77421604b758d5eb34a150"
                    ]
                },
                {
                    "command": [
                        "absurd (k < 0)%nat; omega.",
                        "VernacExtend",
                        "76250f168fe45129a04a976da84a2cecdb33f47c"
                    ]
                },
                {
                    "command": [
                        "cut (k = n \\/ (k < n)%nat);[intro; elim H0; intro|omega].",
                        "VernacExtend",
                        "c7274cb8593824d72e3f5d661fbc866a744d037d"
                    ]
                },
                {
                    "command": [
                        "replace (S n - k - 1)%nat with O; [rewrite H1; simpl|omega].",
                        "VernacExtend",
                        "0024631b3919daef49b374daff307ea7748854f1"
                    ]
                },
                {
                    "command": [
                        "replace (n+1+0)%nat with (S n); ring.",
                        "VernacExtend",
                        "cbf0879997cdf0027b0634686baacfce5f4cab2b"
                    ]
                },
                {
                    "command": [
                        "replace (S n - k-1)%nat with (S (n - k-1));[idtac|omega].",
                        "VernacExtend",
                        "6f141bb8c398743e6467a96280a55f78257bb941"
                    ]
                },
                {
                    "command": [
                        "simpl; replace (k + S (n - k))%nat with (S n).",
                        "VernacExtend",
                        "80d1cefc376a938cd54c15cf62ce5d2b3186899c"
                    ]
                },
                {
                    "command": [
                        "replace (k + 1 + S (n - k - 1))%nat with (S n).",
                        "VernacExtend",
                        "caa33172d6768bbb8331fdaa994283ccff8ea857"
                    ]
                },
                {
                    "command": [
                        "rewrite Hrecn; [ ring | assumption ].",
                        "VernacExtend",
                        "f72e26807eb04137727337fd31fdfa1adfa31f82"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prod_SO_pos",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros; induction N as [| N HrecN].",
                        "VernacExtend",
                        "176c4a7e299087f2a01baed2bde05aa27663e10d"
                    ]
                },
                {
                    "command": [
                        "simpl; apply H; trivial.",
                        "VernacExtend",
                        "91a49d620f019bc2b8043afe4535dd996cb1d8f0"
                    ]
                },
                {
                    "command": [
                        "simpl; apply Rmult_le_pos.",
                        "VernacExtend",
                        "19369b0aa94c1b22ec36d3eacbdbdf16eadcf1ce"
                    ]
                },
                {
                    "command": [
                        "apply HrecN; intros; apply H; apply le_trans with N; [ assumption | apply le_n_Sn ].",
                        "VernacExtend",
                        "311f320c84fe5d5890fa2b81e70da0adb68d0b63"
                    ]
                },
                {
                    "command": [
                        "apply H; apply le_n.",
                        "VernacExtend",
                        "4fcfa6c3b8354852210bcb5cf4ce4c51acba106e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "prod_SO_Rle",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "intros; induction N as [| N HrecN].",
                        "VernacExtend",
                        "176c4a7e299087f2a01baed2bde05aa27663e10d"
                    ]
                },
                {
                    "command": [
                        "elim H with O; trivial.",
                        "VernacExtend",
                        "11104243effa95c93bbd61a7f701302857fe9c60"
                    ]
                },
                {
                    "command": [
                        "simpl; apply Rle_trans with (prod_f_R0 An N * Bn (S N)).",
                        "VernacExtend",
                        "07164c0bf6db1be62adce848e60be3b9c6233f1e"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply prod_SO_pos; intros; elim (H n (le_trans _ _ _ H0 (le_n_Sn N))); intros; assumption.",
                        "VernacExtend",
                        "6ad26b134e0f254daec697c6eccb534be1b3740f"
                    ]
                },
                {
                    "command": [
                        "elim (H (S N) (le_n (S N))); intros; assumption.",
                        "VernacExtend",
                        "6cffe221daccc1e6034be15537b18ab4f0865383"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rmult_comm (Bn (S N))); apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "6b6f125c2c60d024a87662a6900aa8806e0792de"
                    ]
                },
                {
                    "command": [
                        "elim (H (S N) (le_n (S N))); intros.",
                        "VernacExtend",
                        "3da22db49023603dd6eb3ef008d212e2f0da9c61"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (An (S N)); assumption.",
                        "VernacExtend",
                        "b659da1da3e736485465efbf3e7ce213cc0a22cc"
                    ]
                },
                {
                    "command": [
                        "apply HrecN; intros; elim (H n (le_trans _ _ _ H0 (le_n_Sn N))); intros; split; assumption.",
                        "VernacExtend",
                        "6c2cee4f74f6b3d6af0e4a00564194fcdba9def0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fact_prodSO",
            "line_nb": 42,
            "steps": [
                {
                    "command": [
                        "intro; induction n as [| n Hrecn].",
                        "VernacExtend",
                        "e436d2d69f81fe61484702aa2043459f6821c2af"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite <- Hrecn.",
                        "VernacExtend",
                        "04b7a7dbc521ca4c1f8c278b1b0e282ebc388251"
                    ]
                },
                {
                    "command": [
                        "case n; auto with real.",
                        "VernacExtend",
                        "c4538820721192c9533dae8aa567c7afa26cf585"
                    ]
                },
                {
                    "command": [
                        "intros; repeat rewrite plus_INR;rewrite mult_INR;ring.",
                        "VernacExtend",
                        "26a377595ea0405c9c5afff52d495cab8c82ed96"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "le_n_2n",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "simple induction n.",
                        "VernacExtend",
                        "55f6dddaea9189658ce497de54569ba3016f1fd5"
                    ]
                },
                {
                    "command": [
                        "replace (2 * 0)%nat with 0%nat; [ apply le_n | ring ].",
                        "VernacExtend",
                        "6b72692cb5b44fd593844b058ee5cf394e132835"
                    ]
                },
                {
                    "command": [
                        "intros; replace (2 * S n0)%nat with (S (S (2 * n0))).",
                        "VernacExtend",
                        "727a4698d9df7a4785490d88009db47e21dadda1"
                    ]
                },
                {
                    "command": [
                        "apply le_n_S; apply le_S; assumption.",
                        "VernacExtend",
                        "3d4bedf0743ef93b90f2d974e3993b1ee7373595"
                    ]
                },
                {
                    "command": [
                        "replace (S (S (2 * n0))) with (2 * n0 + 2)%nat; [ idtac | ring ].",
                        "VernacExtend",
                        "25c294b1e10b6a352575cb36ff95dceb024c7328"
                    ]
                },
                {
                    "command": [
                        "replace (S n0) with (n0 + 1)%nat; [ idtac | ring ].",
                        "VernacExtend",
                        "4c245ffd7704eb408cff8d7e374782e1fe971c30"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "RfactN_fact2N_factk",
            "line_nb": 58,
            "steps": [
                {
                    "command": [
                        "assert (forall (n:nat), 0 <= (if eq_nat_dec n 0 then 1 else INR n)).",
                        "VernacExtend",
                        "8196cf191edaa0bfadcbbdbdd558a5b4842b7da0"
                    ]
                },
                {
                    "command": [
                        "intros; case (eq_nat_dec n 0); auto with real.",
                        "VernacExtend",
                        "3bba7cb2407cf82a769ff61e1b503168e3dbaa43"
                    ]
                },
                {
                    "command": [
                        "assert (forall (n:nat), (0 < n)%nat -> (if eq_nat_dec n 0 then 1 else INR n) = INR n).",
                        "VernacExtend",
                        "66def08b31ec82f59e45b347c81771e9f1f2584d"
                    ]
                },
                {
                    "command": [
                        "intros n; case (eq_nat_dec n 0); auto with real.",
                        "VernacExtend",
                        "04156700db57af0cd04edffae4955e4b0ccd1df9"
                    ]
                },
                {
                    "command": [
                        "intros; absurd (0 < n)%nat; omega.",
                        "VernacExtend",
                        "be759be78c1ef1a4fc09d014827e21f29133e83b"
                    ]
                },
                {
                    "command": [
                        "intros; unfold Rsqr; repeat rewrite fact_prodSO.",
                        "VernacExtend",
                        "a8777394f29fc3f31a270c4106e8736ad7b4923b"
                    ]
                },
                {
                    "command": [
                        "cut ((k=N)%nat \\/ (k < N)%nat \\/ (N < k)%nat).",
                        "VernacExtend",
                        "1fcbe9419d9709265f184767c2b659cfb0961096"
                    ]
                },
                {
                    "command": [
                        "intro H2; elim H2; intro H3.",
                        "VernacExtend",
                        "fe82b0a8c7ccc45a7a492a76f23b98999383ba9f"
                    ]
                },
                {
                    "command": [
                        "rewrite H3; replace (2*N-N)%nat with N;[right; ring|omega].",
                        "VernacExtend",
                        "9cac22008936bccf4348fd49be712c2f23b572a9"
                    ]
                },
                {
                    "command": [
                        "case H3; intro; clear H2 H3.",
                        "VernacExtend",
                        "d88710d20f9a749c3b1bbd4603a5fe66c5a0abad"
                    ]
                },
                {
                    "command": [
                        "rewrite (prod_SO_split (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) (2 * N - k) N).",
                        "VernacExtend",
                        "f319687aa01406448a384698ec4737095d5ffc3a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "994d36ecbd521a8caf6578dc1f8ef6ee2f2064df"
                    ]
                },
                {
                    "command": [
                        "apply prod_SO_pos; intros; auto.",
                        "VernacExtend",
                        "6c28bf5594c33da66c344b863a800cbd5b918e76"
                    ]
                },
                {
                    "command": [
                        "replace (2 * N - k - N-1)%nat with (N - k-1)%nat.",
                        "VernacExtend",
                        "7ac9a3b9c5eefcdb8cf7940276b9550a2027dc52"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm; rewrite (prod_SO_split (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) N k).",
                        "VernacExtend",
                        "ac2f0499bba8d51405c3da3889eb3163f1b3fc66"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply prod_SO_pos; intros; auto.",
                        "VernacExtend",
                        "6c28bf5594c33da66c344b863a800cbd5b918e76"
                    ]
                },
                {
                    "command": [
                        "apply prod_SO_Rle; intros; split; auto.",
                        "VernacExtend",
                        "b67cf14a229ff0cb2937c7fbdd9c8fa674084503"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "apply le_INR; omega.",
                        "VernacExtend",
                        "fae807d5a7ce9f4f75663f0eb8a547d3d01c722a"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Rmult_comm (prod_f_R0 (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) k)); rewrite (prod_SO_split (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) k N).",
                        "VernacExtend",
                        "7244b32b9a05a5b334c01f35fd6228c8f6179e5e"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_assoc; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "994d36ecbd521a8caf6578dc1f8ef6ee2f2064df"
                    ]
                },
                {
                    "command": [
                        "apply prod_SO_pos; intros; auto.",
                        "VernacExtend",
                        "6c28bf5594c33da66c344b863a800cbd5b918e76"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm; rewrite (prod_SO_split (fun l:nat => if eq_nat_dec l 0 then 1 else INR l) N (2 * N - k)).",
                        "VernacExtend",
                        "a4cfdda657aaa36f10a61c2b9554335497d5c9c0"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply prod_SO_pos; intros; auto.",
                        "VernacExtend",
                        "6c28bf5594c33da66c344b863a800cbd5b918e76"
                    ]
                },
                {
                    "command": [
                        "replace (N - (2 * N - k)-1)%nat with (k - N-1)%nat.",
                        "VernacExtend",
                        "4047e225cf021c47d22426544eea0c1426c78ce3"
                    ]
                },
                {
                    "command": [
                        "apply prod_SO_Rle; intros; split; auto.",
                        "VernacExtend",
                        "b67cf14a229ff0cb2937c7fbdd9c8fa674084503"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "rewrite H0.",
                        "VernacExtend",
                        "1a54b13ac1654793174947eafd5c41a3f024eb49"
                    ]
                },
                {
                    "command": [
                        "apply le_INR; omega.",
                        "VernacExtend",
                        "fae807d5a7ce9f4f75663f0eb8a547d3d01c722a"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "INR_fact_lt_0",
            "line_nb": 103,
            "steps": [
                {
                    "command": [
                        "intro; apply lt_INR_0; apply neq_O_lt; red; intro; elim (fact_neq_0 n); symmetry ; assumption.",
                        "VernacExtend",
                        "2068b33248d756c96a6115d44dfe903877803c15"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "C_maj",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "intros; unfold C; unfold Rdiv; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "66f38af7336ed9f0cee7ac2924e220987e0b6852"
                    ]
                },
                {
                    "command": [
                        "apply pos_INR.",
                        "VernacExtend",
                        "0d9ef3d5703b4f3e1294027dac0f940b9f78b56e"
                    ]
                },
                {
                    "command": [
                        "replace (2 * N - N)%nat with N.",
                        "VernacExtend",
                        "2c54f040ad732a92fbdf12b231ab631b730c37c3"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (INR (fact N) * INR (fact N)).",
                        "VernacExtend",
                        "8951f6696c1975a00963d53eaaf638ec64b42737"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; apply INR_fact_lt_0.",
                        "VernacExtend",
                        "0b8d00487e1156e963850d00d2e3b2a8e2fa0d29"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "2ca74255a63c294f9442d956f32a2e3784636efb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_comm; apply Rmult_le_reg_l with (INR (fact k) * INR (fact (2 * N - k))).",
                        "VernacExtend",
                        "8983aec8a78f6c2e4a14b3bf3a85274f48060757"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; apply INR_fact_lt_0.",
                        "VernacExtend",
                        "0b8d00487e1156e963850d00d2e3b2a8e2fa0d29"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; rewrite <- mult_INR; rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "c3be47a8777d83a2146ebd68c647bf70aebec130"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; rewrite mult_INR; rewrite (Rmult_comm (INR (fact k))); replace (INR (fact N) * INR (fact N)) with (Rsqr (INR (fact N))).",
                        "VernacExtend",
                        "932f96b23c4e12c468492f6d14eb03223e5ec11e"
                    ]
                },
                {
                    "command": [
                        "apply RfactN_fact2N_factk.",
                        "VernacExtend",
                        "f9bf103d828c4a0a7b9725a719a6b81c9910e9fa"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "rewrite mult_INR; apply prod_neq_R0; apply INR_fact_neq_0.",
                        "VernacExtend",
                        "2b816e047b3633f2aa2d4cd993f1fa8c3248688f"
                    ]
                },
                {
                    "command": [
                        "apply prod_neq_R0; apply INR_fact_neq_0.",
                        "VernacExtend",
                        "d44eb9a54774e56e8f99d537e1eab8470ae5dfbe"
                    ]
                },
                {
                    "command": [
                        "omega.",
                        "VernacExtend",
                        "32c6c865d255452c7e10c77111456d1981cede39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}