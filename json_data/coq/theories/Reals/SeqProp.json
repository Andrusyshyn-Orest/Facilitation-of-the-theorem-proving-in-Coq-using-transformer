{
    "filename": "theories/Reals/SeqProp.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Rbase.",
            "VernacRequire",
            "c0a8d81b170d4ed8309a8632a3cac35f6cba016a"
        ],
        [
            "Require Import Rfunctions.",
            "VernacRequire",
            "e0ba64ca9fd07e0fc91c59b7bf007fb29a662a86"
        ],
        [
            "Require Import Rseries.",
            "VernacRequire",
            "7a432dd14e4529f426efb08dc0832c62a8dcc16b"
        ],
        [
            "Require Import Max.",
            "VernacRequire",
            "163f8b04f9c5ff0ff8fe9ce4c762873ab613a3fa"
        ],
        [
            "Require Import Omega.",
            "VernacRequire",
            "72dd903de5f3320ef9d302d79812066579ed9cdb"
        ],
        [
            "Local Open Scope R_scope.",
            "VernacOpenCloseScope",
            "b005c72bb3303e031b42be04be04c87c005faa38"
        ],
        [
            "Definition Un_decreasing (Un:nat -> R) : Prop := forall n:nat, Un (S n) <= Un n.",
            "VernacDefinition",
            "59422a3e8834d71e3089996c04cb98f261398dd9"
        ],
        [
            "Definition opp_seq (Un:nat -> R) (n:nat) : R := - Un n.",
            "VernacDefinition",
            "e701e347c8171cb51b6aaece8d51a18269528a6a"
        ],
        [
            "Definition has_ub (Un:nat -> R) : Prop := bound (EUn Un).",
            "VernacDefinition",
            "c47341a8d1dc8c6693d20c8846e8b5682b68bd00"
        ],
        [
            "Definition has_lb (Un:nat -> R) : Prop := bound (EUn (opp_seq Un)).",
            "VernacDefinition",
            "266a7a2b86a969032fa0fe799ad391d9958eaefb"
        ],
        [
            "Lemma growing_cv : forall Un:nat -> R, Un_growing Un -> has_ub Un -> { l:R | Un_cv Un l }.",
            "VernacStartTheoremProof",
            "919a7251e06a7a034fa2af79b4d3ab841a8261f8"
        ],
        [
            "intros Un Hug Heub.",
            "VernacExtend",
            "021cfad0ae0db7d81bd0dbc64590d488fb97693c"
        ],
        [
            "exists (proj1_sig (completeness (EUn Un) Heub (EUn_noempty Un))).",
            "VernacExtend",
            "e8f5a695e7a5022fa8be19fd46fc2167f4e1b693"
        ],
        [
            "destruct (completeness _ Heub (EUn_noempty Un)) as (l, H).",
            "VernacExtend",
            "ef0edfc5136ef474458ef5e0b11121815f297455"
        ],
        [
            "now apply Un_cv_crit_lub.",
            "VernacExtend",
            "0d547fc2b02364cc6e1352ff6e7be089c0020d1d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decreasing_growing : forall Un:nat -> R, Un_decreasing Un -> Un_growing (opp_seq Un).",
            "VernacStartTheoremProof",
            "ad7a71953e02adcef7afa914e6299caf14fdc21f"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold Un_growing, opp_seq, Un_decreasing.",
            "VernacExtend",
            "56c8dce057774c75fb460303c04d4bdd240a8736"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decreasing_cv : forall Un:nat -> R, Un_decreasing Un -> has_lb Un -> { l:R | Un_cv Un l }.",
            "VernacStartTheoremProof",
            "360327efa575f7b45c38bdbc52e576c0b8b7ff88"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut ({ l:R | Un_cv (opp_seq Un) l } -> { l:R | Un_cv Un l }).",
            "VernacExtend",
            "114abee64fc32dae4f809baa7f8ad2974e30c4f3"
        ],
        [
            "intro X.",
            "VernacExtend",
            "c93bbb51ef8637991b4239865469e36d8e520337"
        ],
        [
            "apply X.",
            "VernacExtend",
            "1a06263bf241d2c272a11be0f0a1522334cc2c93"
        ],
        [
            "apply growing_cv.",
            "VernacExtend",
            "e20e5f8467bce8c3a237abdf7a77cf38c2d1f804"
        ],
        [
            "apply decreasing_growing; assumption.",
            "VernacExtend",
            "013a32a9f5767489dc7065830877ca67dd024167"
        ],
        [
            "exact H0.",
            "VernacExtend",
            "3920fece303e3c4728f9cdc71daff99239237dbd"
        ],
        [
            "intros (x,p).",
            "VernacExtend",
            "1cd393355f801023c209f47ad1e2e37516ca0eec"
        ],
        [
            "exists (- x).",
            "VernacExtend",
            "08defb1588400a64e2b32a242cb38df0df66eff8"
        ],
        [
            "unfold Un_cv in p.",
            "VernacExtend",
            "47320c7f1faccac57f0e3b67dc659e075d93d422"
        ],
        [
            "unfold R_dist in p.",
            "VernacExtend",
            "e1be244d44157c00883934b99ee4e235f4a6d479"
        ],
        [
            "unfold opp_seq in p.",
            "VernacExtend",
            "6deee48a6b6cd6edb21e5d0047b27ef8b95a4924"
        ],
        [
            "unfold Un_cv.",
            "VernacExtend",
            "92546babd2031fb5ae4875e88a9d324f3c5bb33e"
        ],
        [
            "unfold R_dist.",
            "VernacExtend",
            "9d14879a55d02ad54565968e31b64da7aeb66d97"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (p eps H1); intros.",
            "VernacExtend",
            "716498646f3fe2d69518516ad537ce1adf67939f"
        ],
        [
            "exists x0; intros.",
            "VernacExtend",
            "5bc9f78cbd3bd0b9d5ad70bca80ff875ab1656fa"
        ],
        [
            "assert (H4 := H2 n H3).",
            "VernacExtend",
            "e2a04925a6423878607f8caff9237ee9c4cd80a4"
        ],
        [
            "rewrite <- Rabs_Ropp.",
            "VernacExtend",
            "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
        ],
        [
            "replace (- (Un n - - x)) with (- Un n - x); [ assumption | ring ].",
            "VernacExtend",
            "2e85aa9c4882aad334302cef10e81fc56ac4e011"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma ub_to_lub : forall Un:nat -> R, has_ub Un -> { l:R | is_lub (EUn Un) l }.",
            "VernacStartTheoremProof",
            "3b1dd40debf7a2bd693fc162881ce3eb9e50c9d0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold has_ub in H.",
            "VernacExtend",
            "e91b134b2e0daa93c37697a708c19a1dd3cd97f3"
        ],
        [
            "apply completeness.",
            "VernacExtend",
            "cacd984bc8302ffdd56c6fac7b444ece394f062c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "exists (Un 0%nat).",
            "VernacExtend",
            "23dc8b060fa42f8475c8a6fca6767103b2f4581f"
        ],
        [
            "unfold EUn.",
            "VernacExtend",
            "d898172fd612f08cdab9745ef17cc1a7a1b8945a"
        ],
        [
            "exists 0%nat; reflexivity.",
            "VernacExtend",
            "fe3e4a322fd724f6b5422383151c7be1ffa0f073"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma lb_to_glb : forall Un:nat -> R, has_lb Un -> { l:R | is_lub (EUn (opp_seq Un)) l }.",
            "VernacStartTheoremProof",
            "c84269b0b7674bdcbca1db110effabaa1b4e88ea"
        ],
        [
            "intros; unfold has_lb in H.",
            "VernacExtend",
            "534181af3303069943534f42381d0aeb65488c50"
        ],
        [
            "apply completeness.",
            "VernacExtend",
            "cacd984bc8302ffdd56c6fac7b444ece394f062c"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "exists (- Un 0%nat).",
            "VernacExtend",
            "b8d5b37614d6e9da448a267b3bc72a23c737fe08"
        ],
        [
            "exists 0%nat.",
            "VernacExtend",
            "ecf2e229db1efa1d9dec061865f354468879442a"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition lub (Un:nat -> R) (pr:has_ub Un) : R := let (a,_) := ub_to_lub Un pr in a.",
            "VernacDefinition",
            "97cf630e37895466d21f7420f7e2891ba967e921"
        ],
        [
            "Definition glb (Un:nat -> R) (pr:has_lb Un) : R := let (a,_) := lb_to_glb Un pr in - a.",
            "VernacDefinition",
            "aad737b94cd27670233058544835e23eba63be9c"
        ],
        [
            "Notation maj_sup := ub_to_lub (only parsing).",
            "VernacSyntacticDefinition",
            "1b88b0117e2a2583bb623c70d51844f3c1762789"
        ],
        [
            "Notation min_inf := lb_to_glb (only parsing).",
            "VernacSyntacticDefinition",
            "18c0954f1d4317498d6c4442dd2130f40784a5ce"
        ],
        [
            "Notation majorant := lub (only parsing).",
            "VernacSyntacticDefinition",
            "6ae5b89907cd8cbc554964cee364c3a74c63d224"
        ],
        [
            "Notation minorant := glb (only parsing).",
            "VernacSyntacticDefinition",
            "870540dd59d0cad4b3eb5057be8a4fe6ccefd792"
        ],
        [
            "Lemma maj_ss : forall (Un:nat -> R) (k:nat), has_ub Un -> has_ub (fun i:nat => Un (k + i)%nat).",
            "VernacStartTheoremProof",
            "cff30adb90ec3cedf3c92e27670644db115d2aad"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold has_ub in H.",
            "VernacExtend",
            "e91b134b2e0daa93c37697a708c19a1dd3cd97f3"
        ],
        [
            "unfold bound in H.",
            "VernacExtend",
            "fc50eba0ba2fc37c3eeeb74ec06afe738902ad41"
        ],
        [
            "elim H; intros.",
            "VernacExtend",
            "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
        ],
        [
            "unfold is_upper_bound in H0.",
            "VernacExtend",
            "c85637e21ec39634416e90dcfca89e950c787bb0"
        ],
        [
            "unfold has_ub.",
            "VernacExtend",
            "ceb32c40b15ce73c7b54080c037d097378cdbabb"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "unfold is_upper_bound.",
            "VernacExtend",
            "8f2f4c45e0301f8635f36bde586c5301c04c8245"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "exists (k + x1)%nat; assumption.",
            "VernacExtend",
            "b8786d149ff4363c9fc513ed4b81ed9c5e84b309"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma min_ss : forall (Un:nat -> R) (k:nat), has_lb Un -> has_lb (fun i:nat => Un (k + i)%nat).",
            "VernacStartTheoremProof",
            "581155684ee4b9b714944ba9f83e61ca966e16a8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold has_lb in H.",
            "VernacExtend",
            "467d01713cc775dd9b478f3feaf269ce14d710db"
        ],
        [
            "unfold bound in H.",
            "VernacExtend",
            "fc50eba0ba2fc37c3eeeb74ec06afe738902ad41"
        ],
        [
            "elim H; intros.",
            "VernacExtend",
            "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
        ],
        [
            "unfold is_upper_bound in H0.",
            "VernacExtend",
            "c85637e21ec39634416e90dcfca89e950c787bb0"
        ],
        [
            "unfold has_lb.",
            "VernacExtend",
            "0bca23eb1d0714abb7864d93abc374efb6546481"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "unfold is_upper_bound.",
            "VernacExtend",
            "8f2f4c45e0301f8635f36bde586c5301c04c8245"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "exists (k + x1)%nat; assumption.",
            "VernacExtend",
            "b8786d149ff4363c9fc513ed4b81ed9c5e84b309"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition sequence_ub (Un:nat -> R) (pr:has_ub Un) (i:nat) : R := lub (fun k:nat => Un (i + k)%nat) (maj_ss Un i pr).",
            "VernacDefinition",
            "2b26bb942d4bff99b91cfca691add481636af8a8"
        ],
        [
            "Definition sequence_lb (Un:nat -> R) (pr:has_lb Un) (i:nat) : R := glb (fun k:nat => Un (i + k)%nat) (min_ss Un i pr).",
            "VernacDefinition",
            "99bce8b43b50fc7766b598d37faa82d694c5a2fd"
        ],
        [
            "Notation sequence_majorant := sequence_ub (only parsing).",
            "VernacSyntacticDefinition",
            "89122afccb4b4d79b8108e0f7e6dd08e6110841a"
        ],
        [
            "Notation sequence_minorant := sequence_lb (only parsing).",
            "VernacSyntacticDefinition",
            "4486725c6a6831f94c4c1b5ed2f51e3f994d1742"
        ],
        [
            "Lemma Wn_decreasing : forall (Un:nat -> R) (pr:has_ub Un), Un_decreasing (sequence_ub Un pr).",
            "VernacStartTheoremProof",
            "85f3f46a201a5beeff5009fb9193b27a7bdc1f65"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Un_decreasing.",
            "VernacExtend",
            "69f68a5a934c77be8a4c69b1ddfd7c2b437ccda6"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold sequence_ub.",
            "VernacExtend",
            "b2cf6db09e95aff2edf40ba6f3423f991186f4ad"
        ],
        [
            "pose proof (ub_to_lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr)) as (x,(H1,H2)).",
            "VernacExtend",
            "0fb327c82ad26751b0791aaf1a2cd313b05c81a3"
        ],
        [
            "pose proof (ub_to_lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr)) as (x0,(H3,H4)).",
            "VernacExtend",
            "40aa7e1071c0bff9399b3197ed3c1ee64e7fa2ed"
        ],
        [
            "cut (lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr) = x); [ intro Maj1; rewrite Maj1 | idtac ].",
            "VernacExtend",
            "083d8f99a4da12da9165717c2822f5aa6ec4dedf"
        ],
        [
            "cut (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr) = x0); [ intro Maj2; rewrite Maj2 | idtac ].",
            "VernacExtend",
            "0bec459a6a69fc6696215394f6d2286a7e649030"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "unfold is_upper_bound.",
            "VernacExtend",
            "8f2f4c45e0301f8635f36bde586c5301c04c8245"
        ],
        [
            "intros x1 H5.",
            "VernacExtend",
            "1311efe590e4204a5ac5793113bca6ddf51df9fb"
        ],
        [
            "unfold is_upper_bound in H3.",
            "VernacExtend",
            "f8a25fdcf5a32770dc72fc6db00802d1fbe377fd"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "elim H5; intros.",
            "VernacExtend",
            "f57064d2371d46c709230830a90015bd814391ac"
        ],
        [
            "exists (1 + x2)%nat.",
            "VernacExtend",
            "d95bf28d6aaede48c376c9c52709ddb57264d66a"
        ],
        [
            "replace (n + (1 + x2))%nat with (S n + x2)%nat.",
            "VernacExtend",
            "16f6628344915775f24a4b1899c7ffa11b2d3fa3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (S n) with (1 + n)%nat; [ ring | ring ].",
            "VernacExtend",
            "2ce6c708b3a2c655bd557a99df53a76c97053bee"
        ],
        [
            "cut (is_lub (EUn (fun k:nat => Un (n + k)%nat)) (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr))).",
            "VernacExtend",
            "308698d8bd1f7c662c17487865bcd2023250c083"
        ],
        [
            "intros (H5,H6).",
            "VernacExtend",
            "2e74b213136a21d4628359fcd0a8fbd5b4294ab6"
        ],
        [
            "assert (H7 := H6 x0 H3).",
            "VernacExtend",
            "8f8b5a04f26dd1778f884c2bd9cbfae9a3771019"
        ],
        [
            "assert (H8 := H4 (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr)) H5).",
            "VernacExtend",
            "4e4395c77280f11d8c08ffc8b04ba2468af69225"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "unfold lub.",
            "VernacExtend",
            "93825f408aac22eaa724a930ee62b1a275eb0781"
        ],
        [
            "case (ub_to_lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr)).",
            "VernacExtend",
            "704a66d9fc9fe43bc8fe68fb1395ed1d8c0e8675"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "cut (is_lub (EUn (fun k:nat => Un (S n + k)%nat)) (lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr))).",
            "VernacExtend",
            "10072a7c772b1c8634903c2b9b803d2ef47f6c21"
        ],
        [
            "intros (H5,H6).",
            "VernacExtend",
            "2e74b213136a21d4628359fcd0a8fbd5b4294ab6"
        ],
        [
            "assert (H7 := H6 x H1).",
            "VernacExtend",
            "7ef4de83ad8235dae33a5395c3357b114d9c50d1"
        ],
        [
            "assert (H8 := H2 (lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr)) H5).",
            "VernacExtend",
            "4ef716b5e30436e84e3f27fc463735be646d34e5"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "unfold lub.",
            "VernacExtend",
            "93825f408aac22eaa724a930ee62b1a275eb0781"
        ],
        [
            "case (ub_to_lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr)).",
            "VernacExtend",
            "84182ec1c1de2d4b5871375b11844d154b70c96a"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Vn_growing : forall (Un:nat -> R) (pr:has_lb Un), Un_growing (sequence_lb Un pr).",
            "VernacStartTheoremProof",
            "0495b84965f40920eea1000de0a49c1716a4a6db"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold Un_growing.",
            "VernacExtend",
            "bb82a49c6eee9f82a3c0d5b17d8a842d5e9abb49"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold sequence_lb.",
            "VernacExtend",
            "10c7ea82e8b9cf5323804d58c57c805538d709c2"
        ],
        [
            "assert (H := lb_to_glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr)).",
            "VernacExtend",
            "10c274c1d3dfc0550b0e424ae5d2a0ec62c8f9bf"
        ],
        [
            "assert (H0 := lb_to_glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr)).",
            "VernacExtend",
            "641d97a4bda8240f7acb329db5ae1e1a4d084c51"
        ],
        [
            "elim H; intros.",
            "VernacExtend",
            "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
        ],
        [
            "elim H0; intros.",
            "VernacExtend",
            "6b83f392a470a8cdaa118e532bc445a009dec854"
        ],
        [
            "cut (glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr) = - x); [ intro Maj1; rewrite Maj1 | idtac ].",
            "VernacExtend",
            "76bf0079f71eea3615c5278aaf00e751c46a7759"
        ],
        [
            "cut (glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr) = - x0); [ intro Maj2; rewrite Maj2 | idtac ].",
            "VernacExtend",
            "78889e7346972f5312012b8e52d45313cdd17487"
        ],
        [
            "unfold is_lub in p.",
            "VernacExtend",
            "39affe05b156d77aec317c7c8792e9640bce8ce0"
        ],
        [
            "unfold is_lub in p0.",
            "VernacExtend",
            "acd37644f06054103dc2c12b736bd4ef4527dd45"
        ],
        [
            "elim p; intros.",
            "VernacExtend",
            "5c01b4e2930aaa38b242bfcbf978f298ab53ee9b"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "elim p0; intros.",
            "VernacExtend",
            "4bf9dcb131eba35336fc268e868940350b9b3ec6"
        ],
        [
            "unfold is_upper_bound.",
            "VernacExtend",
            "8f2f4c45e0301f8635f36bde586c5301c04c8245"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_upper_bound in H3.",
            "VernacExtend",
            "f8a25fdcf5a32770dc72fc6db00802d1fbe377fd"
        ],
        [
            "apply H3.",
            "VernacExtend",
            "fa1602da0db2a348e9fad204067364eaad2a120f"
        ],
        [
            "elim H5; intros.",
            "VernacExtend",
            "f57064d2371d46c709230830a90015bd814391ac"
        ],
        [
            "exists (1 + x2)%nat.",
            "VernacExtend",
            "d95bf28d6aaede48c376c9c52709ddb57264d66a"
        ],
        [
            "unfold opp_seq in H6.",
            "VernacExtend",
            "dd38a5fb300418da908da39455a718415b41ab87"
        ],
        [
            "unfold opp_seq.",
            "VernacExtend",
            "71519d198ca4edf2d134115411d2ee1870568a91"
        ],
        [
            "replace (n + (1 + x2))%nat with (S n + x2)%nat.",
            "VernacExtend",
            "16f6628344915775f24a4b1899c7ffa11b2d3fa3"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "replace (S n) with (1 + n)%nat; [ ring | ring ].",
            "VernacExtend",
            "2ce6c708b3a2c655bd557a99df53a76c97053bee"
        ],
        [
            "cut (is_lub (EUn (opp_seq (fun k:nat => Un (n + k)%nat))) (- glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr))).",
            "VernacExtend",
            "1f087e76a988ff11c46d0adbc4cdea26f4b92990"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold is_lub in p0; unfold is_lub in H1.",
            "VernacExtend",
            "9cdaeabac5cf2b01332a99f6903588fb079429e6"
        ],
        [
            "elim p0; intros; elim H1; intros.",
            "VernacExtend",
            "1ac2cad2742e1048bcd91fa01edc0a4fe371d0b6"
        ],
        [
            "assert (H6 := H5 x0 H2).",
            "VernacExtend",
            "aa482ac5a12b0189c20b293189844082da9b469a"
        ],
        [
            "assert (H7 := H3 (- glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr)) H4).",
            "VernacExtend",
            "3507bcfda2a4c008fd133caddeac5e79ff96a03d"
        ],
        [
            "rewrite <- (Ropp_involutive (glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr))) .",
            "VernacExtend",
            "6a382d50407bd5e52e7ac3a7b21667745a63891c"
        ],
        [
            "apply Ropp_eq_compat; apply Rle_antisym; assumption.",
            "VernacExtend",
            "1691ed2341ca99450698bf16580a7245e85df60c"
        ],
        [
            "unfold glb.",
            "VernacExtend",
            "de5d7dc0a2b98cd59f0ad5c868b008125c310a9a"
        ],
        [
            "case (lb_to_glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr)); simpl.",
            "VernacExtend",
            "89b4edc3e58f2313da64ab6f8e9665175b8ce592"
        ],
        [
            "intro; rewrite Ropp_involutive.",
            "VernacExtend",
            "90813c1175cc14cf28b7f55ddd0cf254a046d5fa"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "cut (is_lub (EUn (opp_seq (fun k:nat => Un (S n + k)%nat))) (- glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr))).",
            "VernacExtend",
            "0054dac56d6e120fe5f02e1faf6ee43078f85915"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold is_lub in p; unfold is_lub in H1.",
            "VernacExtend",
            "c289b1df36d0f53a180b351d5e435ac063fdd994"
        ],
        [
            "elim p; intros; elim H1; intros.",
            "VernacExtend",
            "8a2b8eca0e172d9cc1454151f786edefff287a85"
        ],
        [
            "assert (H6 := H5 x H2).",
            "VernacExtend",
            "33b5957dbc21a91a4efc452d1fb4c3bfb20cc2e5"
        ],
        [
            "assert (H7 := H3 (- glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr)) H4).",
            "VernacExtend",
            "d1cc5c10fad5e5eee6fcc27ee8751eea3481c92a"
        ],
        [
            "rewrite <- (Ropp_involutive (glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr))) .",
            "VernacExtend",
            "5f811fdb0ee05a8f60e2fe7b0fd08d1f21c9740b"
        ],
        [
            "apply Ropp_eq_compat; apply Rle_antisym; assumption.",
            "VernacExtend",
            "1691ed2341ca99450698bf16580a7245e85df60c"
        ],
        [
            "unfold glb.",
            "VernacExtend",
            "de5d7dc0a2b98cd59f0ad5c868b008125c310a9a"
        ],
        [
            "case (lb_to_glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr)); simpl.",
            "VernacExtend",
            "95c9ebf232d9ebc3a6b4d26ae4af4e8dda6a7d1f"
        ],
        [
            "intro; rewrite Ropp_involutive.",
            "VernacExtend",
            "90813c1175cc14cf28b7f55ddd0cf254a046d5fa"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Vn_Un_Wn_order : forall (Un:nat -> R) (pr1:has_ub Un) (pr2:has_lb Un) (n:nat), sequence_lb Un pr2 n <= Un n <= sequence_ub Un pr1 n.",
            "VernacStartTheoremProof",
            "1d5d187df79f95534855e1fde1b559785a9dd92b"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold sequence_lb.",
            "VernacExtend",
            "10c7ea82e8b9cf5323804d58c57c805538d709c2"
        ],
        [
            "cut { l:R | is_lub (EUn (opp_seq (fun i:nat => Un (n + i)%nat))) l }.",
            "VernacExtend",
            "1e7217c745b98da568da80aabf22c2a9d4e15bb2"
        ],
        [
            "intro X.",
            "VernacExtend",
            "c93bbb51ef8637991b4239865469e36d8e520337"
        ],
        [
            "elim X; intros.",
            "VernacExtend",
            "3dbd54ccc1b79786f689975657c25979c4151773"
        ],
        [
            "replace (glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2)) with (- x).",
            "VernacExtend",
            "139666acf8c49ba0da6dc76648e2fc80ba4dc829"
        ],
        [
            "unfold is_lub in p.",
            "VernacExtend",
            "39affe05b156d77aec317c7c8792e9640bce8ce0"
        ],
        [
            "elim p; intros.",
            "VernacExtend",
            "5c01b4e2930aaa38b242bfcbf978f298ab53ee9b"
        ],
        [
            "unfold is_upper_bound in H.",
            "VernacExtend",
            "a1fa2a2c6131a3684a3cac0d603de13825706b4c"
        ],
        [
            "rewrite <- (Ropp_involutive (Un n)).",
            "VernacExtend",
            "6633bd580a18cd2b059efcf99d7126462ec8acbb"
        ],
        [
            "apply Ropp_le_contravar.",
            "VernacExtend",
            "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "exists 0%nat.",
            "VernacExtend",
            "ecf2e229db1efa1d9dec061865f354468879442a"
        ],
        [
            "unfold opp_seq.",
            "VernacExtend",
            "71519d198ca4edf2d134115411d2ee1870568a91"
        ],
        [
            "replace (n + 0)%nat with n; [ reflexivity | ring ].",
            "VernacExtend",
            "da44939d6d6d9840ed605d86ac023fe7f46f48f0"
        ],
        [
            "cut (is_lub (EUn (opp_seq (fun k:nat => Un (n + k)%nat))) (- glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2))).",
            "VernacExtend",
            "03b0820df6d88ac021dd93a322ac8d8bddfa68ec"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold is_lub in p; unfold is_lub in H.",
            "VernacExtend",
            "928c8272de25192842bdf37fcfbb7f9fce662fcb"
        ],
        [
            "elim p; intros; elim H; intros.",
            "VernacExtend",
            "6ceb7573363f4daa5135df10f342ed2be8870fc9"
        ],
        [
            "assert (H4 := H3 x H0).",
            "VernacExtend",
            "3764a9b055f6426a43049bf5aafadf33944bc40f"
        ],
        [
            "assert (H5 := H1 (- glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2)) H2).",
            "VernacExtend",
            "b56abe9ab32570ac5620d6029f4674a7fb27f9cd"
        ],
        [
            "rewrite <- (Ropp_involutive (glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2))) .",
            "VernacExtend",
            "c6c229e681de5e8440f51bb96945268160728be9"
        ],
        [
            "apply Ropp_eq_compat; apply Rle_antisym; assumption.",
            "VernacExtend",
            "1691ed2341ca99450698bf16580a7245e85df60c"
        ],
        [
            "unfold glb.",
            "VernacExtend",
            "de5d7dc0a2b98cd59f0ad5c868b008125c310a9a"
        ],
        [
            "case (lb_to_glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2)); simpl.",
            "VernacExtend",
            "0cbc5491700c068b4260b7b770b0eedb25aae4ea"
        ],
        [
            "intro; rewrite Ropp_involutive.",
            "VernacExtend",
            "90813c1175cc14cf28b7f55ddd0cf254a046d5fa"
        ],
        [
            "trivial.",
            "VernacExtend",
            "6704630005ea37c1f66f817f0d3cb83967ca08c5"
        ],
        [
            "apply lb_to_glb.",
            "VernacExtend",
            "a054ffe0fa6f01544cc8559e3884bc0650a06ebf"
        ],
        [
            "apply min_ss; assumption.",
            "VernacExtend",
            "9eda63cec05c102b65b3dd6da22aa3a110848743"
        ],
        [
            "unfold sequence_ub.",
            "VernacExtend",
            "b2cf6db09e95aff2edf40ba6f3423f991186f4ad"
        ],
        [
            "cut { l:R | is_lub (EUn (fun i:nat => Un (n + i)%nat)) l }.",
            "VernacExtend",
            "25efc5f5e7a5476ecdf26ac134069122272f2b6b"
        ],
        [
            "intro X.",
            "VernacExtend",
            "c93bbb51ef8637991b4239865469e36d8e520337"
        ],
        [
            "elim X; intros.",
            "VernacExtend",
            "3dbd54ccc1b79786f689975657c25979c4151773"
        ],
        [
            "replace (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr1)) with x.",
            "VernacExtend",
            "38441374c4b739bdc7e001680e4a13660de9c7c6"
        ],
        [
            "unfold is_lub in p.",
            "VernacExtend",
            "39affe05b156d77aec317c7c8792e9640bce8ce0"
        ],
        [
            "elim p; intros.",
            "VernacExtend",
            "5c01b4e2930aaa38b242bfcbf978f298ab53ee9b"
        ],
        [
            "unfold is_upper_bound in H.",
            "VernacExtend",
            "a1fa2a2c6131a3684a3cac0d603de13825706b4c"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "exists 0%nat.",
            "VernacExtend",
            "ecf2e229db1efa1d9dec061865f354468879442a"
        ],
        [
            "replace (n + 0)%nat with n; [ reflexivity | ring ].",
            "VernacExtend",
            "da44939d6d6d9840ed605d86ac023fe7f46f48f0"
        ],
        [
            "cut (is_lub (EUn (fun k:nat => Un (n + k)%nat)) (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr1))).",
            "VernacExtend",
            "998ad8b974b4987216efe8a05ee0f0e5929da490"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold is_lub in p; unfold is_lub in H.",
            "VernacExtend",
            "928c8272de25192842bdf37fcfbb7f9fce662fcb"
        ],
        [
            "elim p; intros; elim H; intros.",
            "VernacExtend",
            "6ceb7573363f4daa5135df10f342ed2be8870fc9"
        ],
        [
            "assert (H4 := H3 x H0).",
            "VernacExtend",
            "3764a9b055f6426a43049bf5aafadf33944bc40f"
        ],
        [
            "assert (H5 := H1 (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr1)) H2).",
            "VernacExtend",
            "1c20a49ab22b77147b8066de80f044be4f5ee199"
        ],
        [
            "apply Rle_antisym; assumption.",
            "VernacExtend",
            "b5a78b1c0f886e81784646d07a2e86ef54048987"
        ],
        [
            "unfold lub.",
            "VernacExtend",
            "93825f408aac22eaa724a930ee62b1a275eb0781"
        ],
        [
            "case (ub_to_lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr1)).",
            "VernacExtend",
            "c080d343b85e748bb56c3ea725964b1d83529f3e"
        ],
        [
            "intro; trivial.",
            "VernacExtend",
            "501f4dca80ca48c8f323018af6a832de57ce3e27"
        ],
        [
            "apply ub_to_lub.",
            "VernacExtend",
            "9895159837cd8885ac5e871796effedf74f6ec24"
        ],
        [
            "apply maj_ss; assumption.",
            "VernacExtend",
            "b241cdc87dcd606b2d9059fddf8ad9771f88ff39"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma min_maj : forall (Un:nat -> R) (pr1:has_ub Un) (pr2:has_lb Un), has_ub (sequence_lb Un pr2).",
            "VernacStartTheoremProof",
            "f7ac3d83bb88032e6f9c3de71610f7c924aa32f1"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H := Vn_Un_Wn_order Un pr1 pr2).",
            "VernacExtend",
            "0a810c4c4cf93a7038d30e12bb525d0833e57f83"
        ],
        [
            "unfold has_ub.",
            "VernacExtend",
            "ceb32c40b15ce73c7b54080c037d097378cdbabb"
        ],
        [
            "unfold bound.",
            "VernacExtend",
            "59942e148dddd0d48f677cd1bd2ebe8e3f69ae85"
        ],
        [
            "unfold has_ub in pr1.",
            "VernacExtend",
            "a2fafc08e73f300742be3adbfa09e5c70c3d1a15"
        ],
        [
            "unfold bound in pr1.",
            "VernacExtend",
            "7450bdc0fa4271316e91bc4fd70ce2601e532d70"
        ],
        [
            "elim pr1; intros.",
            "VernacExtend",
            "ac3f68d7176a26ef8a68a53f96b78cb1a44e3a41"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "unfold is_upper_bound.",
            "VernacExtend",
            "8f2f4c45e0301f8635f36bde586c5301c04c8245"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_upper_bound in H0.",
            "VernacExtend",
            "c85637e21ec39634416e90dcfca89e950c787bb0"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply Rle_trans with (Un x1).",
            "VernacExtend",
            "ba11f076850d29a68954c0f9e04c09b422f28af5"
        ],
        [
            "assert (H3 := H x1); elim H3; intros; assumption.",
            "VernacExtend",
            "d54f234896ee6971530c2611598f0e04147b3df6"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "exists x1; reflexivity.",
            "VernacExtend",
            "360945f124ce00fcab0ac5e5de369679d9fc14c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maj_min : forall (Un:nat -> R) (pr1:has_ub Un) (pr2:has_lb Un), has_lb (sequence_ub Un pr1).",
            "VernacStartTheoremProof",
            "023bfe6a949d56aa6bf79e59a106c85ffcbfc407"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H := Vn_Un_Wn_order Un pr1 pr2).",
            "VernacExtend",
            "0a810c4c4cf93a7038d30e12bb525d0833e57f83"
        ],
        [
            "unfold has_lb.",
            "VernacExtend",
            "0bca23eb1d0714abb7864d93abc374efb6546481"
        ],
        [
            "unfold bound.",
            "VernacExtend",
            "59942e148dddd0d48f677cd1bd2ebe8e3f69ae85"
        ],
        [
            "unfold has_lb in pr2.",
            "VernacExtend",
            "6d7da1b8ebbb8508cbf852bc2c63db3bf72e5902"
        ],
        [
            "unfold bound in pr2.",
            "VernacExtend",
            "15ac14f14d9fa22730922d0c2fe56193ed1ded46"
        ],
        [
            "elim pr2; intros.",
            "VernacExtend",
            "ae2a703d5fbdfda5249514b27afb4de7dcf3ae74"
        ],
        [
            "exists x.",
            "VernacExtend",
            "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
        ],
        [
            "unfold is_upper_bound.",
            "VernacExtend",
            "8f2f4c45e0301f8635f36bde586c5301c04c8245"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold is_upper_bound in H0.",
            "VernacExtend",
            "c85637e21ec39634416e90dcfca89e950c787bb0"
        ],
        [
            "elim H1; intros.",
            "VernacExtend",
            "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
        ],
        [
            "rewrite H2.",
            "VernacExtend",
            "c34b98a4ea7c987830199fe378bb7a145a0d652e"
        ],
        [
            "apply Rle_trans with (opp_seq Un x1).",
            "VernacExtend",
            "a00e1d5d142787e2d89d2bc047f3b133efea94bd"
        ],
        [
            "assert (H3 := H x1); elim H3; intros.",
            "VernacExtend",
            "1b8f6f5186aa718d9685ec70d3e36b32a8a33004"
        ],
        [
            "unfold opp_seq; apply Ropp_le_contravar.",
            "VernacExtend",
            "eaaa334a826c5dd7e7d8cbf81922170f71770438"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply H0.",
            "VernacExtend",
            "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
        ],
        [
            "exists x1; reflexivity.",
            "VernacExtend",
            "360945f124ce00fcab0ac5e5de369679d9fc14c1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cauchy_maj : forall Un:nat -> R, Cauchy_crit Un -> has_ub Un.",
            "VernacStartTheoremProof",
            "b5e91b2d62a3b62a6f899873c3c940d0108ef9ef"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold has_ub.",
            "VernacExtend",
            "ceb32c40b15ce73c7b54080c037d097378cdbabb"
        ],
        [
            "apply cauchy_bound.",
            "VernacExtend",
            "167f75720b169b48f481eb59684c13b34872f687"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cauchy_opp : forall Un:nat -> R, Cauchy_crit Un -> Cauchy_crit (opp_seq Un).",
            "VernacStartTheoremProof",
            "ae17a056a41d22dffc2d493a95691616668c0370"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold Cauchy_crit.",
            "VernacExtend",
            "7a6f0288846e2f0f585e14ed633844643ef3fe5a"
        ],
        [
            "unfold R_dist.",
            "VernacExtend",
            "9d14879a55d02ad54565968e31b64da7aeb66d97"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "elim (H eps H0); intros.",
            "VernacExtend",
            "ace4b126c6608622fb1152df39f2724078d34d25"
        ],
        [
            "exists x; intros.",
            "VernacExtend",
            "630f24a2d635df94b063a62023a90567ef134b19"
        ],
        [
            "unfold opp_seq.",
            "VernacExtend",
            "71519d198ca4edf2d134115411d2ee1870568a91"
        ],
        [
            "rewrite <- Rabs_Ropp.",
            "VernacExtend",
            "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
        ],
        [
            "replace (- (- Un n - - Un m)) with (Un n - Un m); [ apply H1; assumption | ring ].",
            "VernacExtend",
            "8d577290927e1bc64e4786945f35a966556e2ec4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cauchy_min : forall Un:nat -> R, Cauchy_crit Un -> has_lb Un.",
            "VernacStartTheoremProof",
            "0d642297060c25c993bab5dd89d33dae6772c514"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold has_lb.",
            "VernacExtend",
            "0bca23eb1d0714abb7864d93abc374efb6546481"
        ],
        [
            "assert (H0 := cauchy_opp _ H).",
            "VernacExtend",
            "2c2b1cf238a538e9367ae5fcd0a29ee9143b0d20"
        ],
        [
            "apply cauchy_bound.",
            "VernacExtend",
            "167f75720b169b48f481eb59684c13b34872f687"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maj_cv : forall (Un:nat -> R) (pr:Cauchy_crit Un), { l:R | Un_cv (sequence_ub Un (cauchy_maj Un pr)) l }.",
            "VernacStartTheoremProof",
            "0b0770f938dbf3a33426cf785efc9c3b5c504c0d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply decreasing_cv.",
            "VernacExtend",
            "8dd04c05aace3951240559f529507b3396663df8"
        ],
        [
            "apply Wn_decreasing.",
            "VernacExtend",
            "9f35ecb4cbdbbcbee3f18ed84ffd60b3bf399e25"
        ],
        [
            "apply maj_min.",
            "VernacExtend",
            "8ebd9ff73946ea3e41d98e15d2d12fbbe96c5cd7"
        ],
        [
            "apply cauchy_min.",
            "VernacExtend",
            "252ef95de421484edd2421b678eeceb2fb72beb6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma min_cv : forall (Un:nat -> R) (pr:Cauchy_crit Un), { l:R | Un_cv (sequence_lb Un (cauchy_min Un pr)) l }.",
            "VernacStartTheoremProof",
            "dd16455f321ef113d0cbeed45f54bffd3a63c48a"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply growing_cv.",
            "VernacExtend",
            "e20e5f8467bce8c3a237abdf7a77cf38c2d1f804"
        ],
        [
            "apply Vn_growing.",
            "VernacExtend",
            "d046e75ced687ca7d356f89fac34c57f6bc30487"
        ],
        [
            "apply min_maj.",
            "VernacExtend",
            "5d79206cfc43e3732a6e4eb25dcc161d62209caf"
        ],
        [
            "apply cauchy_maj.",
            "VernacExtend",
            "0dfe0e4431b324b40be459e974c8f7703402c949"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cond_eq : forall x y:R, (forall eps:R, 0 < eps -> Rabs (x - y) < eps) -> x = y.",
            "VernacStartTheoremProof",
            "ce6c9672788bf69c91cba1c5d29509ac141bfbaa"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "destruct (total_order_T x y) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "1c697840bbd343698584e8e6c30fd472cdf7940d"
        ],
        [
            "cut (0 < y - x).",
            "VernacExtend",
            "1ab1d466c014e4bfdc313a0a0aa1110acb6d490b"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H1 := H (y - x) H0).",
            "VernacExtend",
            "1a1db99bb3137e36f6cbe306bbfc48f885dfe503"
        ],
        [
            "rewrite <- Rabs_Ropp in H1.",
            "VernacExtend",
            "477b62b08488bd9397529ed10375e7405f8eface"
        ],
        [
            "cut (- (x - y) = y - x); [ intro; rewrite H2 in H1 | ring ].",
            "VernacExtend",
            "81c1e2ba4382a17001f9ef1ee684a56135663c8a"
        ],
        [
            "rewrite Rabs_right in H1.",
            "VernacExtend",
            "a2316f56af3b0df55ed4c822f9f305e4211ce9c1"
        ],
        [
            "elim (Rlt_irrefl _ H1).",
            "VernacExtend",
            "5867a6567fb67799e24ef8a12a604542b721e9f5"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "apply Rplus_lt_reg_l with x.",
            "VernacExtend",
            "f6abc10f7ad01cb714b4cff3f6e97f6bde56f912"
        ],
        [
            "rewrite Rplus_0_r; replace (x + (y - x)) with y; [ assumption | ring ].",
            "VernacExtend",
            "a9e08443fe60c2259265eca6ced9b30eab9fbe37"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "cut (0 < x - y).",
            "VernacExtend",
            "d08fb6f1ebe81d1769bc02b62a3f8c13aed8ac40"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "assert (H1 := H (x - y) H0).",
            "VernacExtend",
            "2391a32e8ea3c7be00a6823c78be17082dcc68e7"
        ],
        [
            "rewrite Rabs_right in H1.",
            "VernacExtend",
            "a2316f56af3b0df55ed4c822f9f305e4211ce9c1"
        ],
        [
            "elim (Rlt_irrefl _ H1).",
            "VernacExtend",
            "5867a6567fb67799e24ef8a12a604542b721e9f5"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "apply Rplus_lt_reg_l with y.",
            "VernacExtend",
            "89ad4ced1daa63a533089fe92e0d5ecc3cf8824f"
        ],
        [
            "rewrite Rplus_0_r; replace (y + (x - y)) with x; [ assumption | ring ].",
            "VernacExtend",
            "d27e0560b308542d7ca9d4b02557dcd524877fbb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma not_Rlt : forall r1 r2:R, ~ r1 < r2 -> r1 >= r2.",
            "VernacStartTheoremProof",
            "f8942f2d17c20cc6b258ac88ce89ac2b745ed127"
        ],
        [
            "intros r1 r2; generalize (Rtotal_order r1 r2); unfold Rge.",
            "VernacExtend",
            "d7ff27a5a28fe6aa0ee42a64ef62b5ebea66153a"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma approx_maj : forall (Un:nat -> R) (pr:has_ub Un) (eps:R), 0 < eps -> exists k : nat, Rabs (lub Un pr - Un k) < eps.",
            "VernacStartTheoremProof",
            "123dbf4eb9d98eccf7289c440949cab850066768"
        ],
        [
            "intros Un pr.",
            "VernacExtend",
            "9d293033f3f705808be5d5e5cba6b0f2dd1582f7"
        ],
        [
            "pose (Vn := fix aux n := match n with S n' => if Rle_lt_dec (aux n') (Un n) then Un n else aux n' | O => Un O end).",
            "VernacExtend",
            "d4ef49283ac2d3a6d895c3df87ad590c58271d28"
        ],
        [
            "pose (In := fix aux n := match n with S n' => if Rle_lt_dec (Vn n) (Un n) then n else aux n' | O => O end).",
            "VernacExtend",
            "babc7abf166bd08d35de2940d7c25492f6306b77"
        ],
        [
            "assert (VUI: forall n, Vn n = Un (In n)).",
            "VernacExtend",
            "73be58d40bb387fc9332ff4071b87702d9499640"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (Rle_lt_dec (Vn n) (Un (S n))) as [H1|H1].",
            "VernacExtend",
            "e0b973157fd67b6377e553b704a5cb52d87f512f"
        ],
        [
            "destruct (Rle_lt_dec (Un (S n)) (Un (S n))) as [H2|H2].",
            "VernacExtend",
            "ab2fa3ae97de6cb08e85836558247f33c2469f79"
        ],
        [
            "easy.",
            "VernacExtend",
            "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
        ],
        [
            "elim (Rlt_irrefl _ H2).",
            "VernacExtend",
            "482e7c077cecaaa7839ddb8fa1b881a6acdc584c"
        ],
        [
            "destruct (Rle_lt_dec (Vn n) (Un (S n))) as [H2|H2].",
            "VernacExtend",
            "234f902868d85eb45e128a5914a90e80aaafd4d3"
        ],
        [
            "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 H1)).",
            "VernacExtend",
            "a076929bab0e416ae3be2cc0e5ef4fb28398a82c"
        ],
        [
            "exact IHn.",
            "VernacExtend",
            "d68361e453d2626d53a14d9cb95fe3d5724f4c57"
        ],
        [
            "assert (HubV : has_ub Vn).",
            "VernacExtend",
            "2ef216bbabfca280687a4deb3385c8467544a7a1"
        ],
        [
            "destruct pr as (ub, Hub).",
            "VernacExtend",
            "861cb966d57eb33b75604ff0c7042b83a8d9dd81"
        ],
        [
            "exists ub.",
            "VernacExtend",
            "14516dfe33e63a639986860a2d7f6f582ae7e20f"
        ],
        [
            "intros x (n, Hn).",
            "VernacExtend",
            "5d6b4243dd9d6e3badf5728fd0718170019c6f4e"
        ],
        [
            "rewrite Hn, VUI.",
            "VernacExtend",
            "6447a36e204fc44ec2f1ff20630f1b335db4e584"
        ],
        [
            "apply Hub.",
            "VernacExtend",
            "88ecc2488b63e46827735699f592921a85d0a25a"
        ],
        [
            "now exists (In n).",
            "VernacExtend",
            "575814582438377cd20ed67e1f71ab9618e23ec0"
        ],
        [
            "assert (HgrV : Un_growing Vn).",
            "VernacExtend",
            "461425b2b5fc26ad796d394178550443f7688ba2"
        ],
        [
            "intros n.",
            "VernacExtend",
            "9410cc86153539309ee696ae5785ea70534ece11"
        ],
        [
            "induction n.",
            "VernacExtend",
            "7f3faa2a3277e3553406d09101130efcb1764494"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (Rle_lt_dec (Un O) (Un 1%nat)) as [H|_].",
            "VernacExtend",
            "11017dd8367204911812e13031f1747d1804b0f7"
        ],
        [
            "exact H.",
            "VernacExtend",
            "ce8e3e03bec1b3366baf128fe7eab49b160bc6a4"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (Rle_lt_dec (Vn n) (Un (S n))) as [H1|H1].",
            "VernacExtend",
            "e0b973157fd67b6377e553b704a5cb52d87f512f"
        ],
        [
            "destruct (Rle_lt_dec (Un (S n)) (Un (S (S n)))) as [H2|H2].",
            "VernacExtend",
            "40b8e73fae0e03878210367c8628711ef7f3efc5"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "destruct (Rle_lt_dec (Vn n) (Un (S (S n)))) as [H2|H2].",
            "VernacExtend",
            "2d517a4732db8c908145c2c7dec94f00effd6a8f"
        ],
        [
            "exact H2.",
            "VernacExtend",
            "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "destruct (ub_to_lub Vn HubV) as (l, Hl).",
            "VernacExtend",
            "9a56aa2222ad087a8851ecc346310016944ace65"
        ],
        [
            "unfold lub.",
            "VernacExtend",
            "93825f408aac22eaa724a930ee62b1a275eb0781"
        ],
        [
            "destruct (ub_to_lub Un pr) as (l', Hl').",
            "VernacExtend",
            "6dd6f813be363b30a3b4546233cf572be4603303"
        ],
        [
            "replace l' with l.",
            "VernacExtend",
            "038729405f893071471df19694a3e3d16835a8ef"
        ],
        [
            "intros eps Heps.",
            "VernacExtend",
            "7703df655796ea26c6ea499878b7b84d16db4279"
        ],
        [
            "destruct (Un_cv_crit_lub Vn HgrV l Hl eps Heps) as (n, Hn).",
            "VernacExtend",
            "f73e703868f47133a31510f9dd7322d2a8ad798b"
        ],
        [
            "exists (In n).",
            "VernacExtend",
            "a5b36d1c61363ba24bc9c1b1db0bc636da92e7f5"
        ],
        [
            "rewrite <- VUI.",
            "VernacExtend",
            "194770c70ea3083a1ff9681d1b9e86c2e8d0a537"
        ],
        [
            "rewrite Rabs_minus_sym.",
            "VernacExtend",
            "ddb6224679ef13d2115963f7fdb5e59e73f39ad2"
        ],
        [
            "apply Hn.",
            "VernacExtend",
            "c5adcc6ecec47fdf9466a9526d44d536ffc16251"
        ],
        [
            "apply le_refl.",
            "VernacExtend",
            "cf6c26be2dc0610be68abd6b5b4bb52c94832e79"
        ],
        [
            "apply Rle_antisym.",
            "VernacExtend",
            "8e9431fb6db6f151160007e68131f4f5cb1c7968"
        ],
        [
            "apply Hl.",
            "VernacExtend",
            "02df804151e4adadf6baf4a5ea9b58097df0f911"
        ],
        [
            "intros n (k, Hk).",
            "VernacExtend",
            "ab6ff8f759c19a4a28608fda082c6e6e40b6fff1"
        ],
        [
            "rewrite Hk, VUI.",
            "VernacExtend",
            "d4402c61b5eee7410ba81667315a004f5905d459"
        ],
        [
            "apply Hl'.",
            "VernacExtend",
            "6972bbb56a84a920c24e42e8c16e3f1e4b592478"
        ],
        [
            "now exists (In k).",
            "VernacExtend",
            "d930891b68f1103f7775ee3e98f10ee4bb026690"
        ],
        [
            "apply Hl'.",
            "VernacExtend",
            "6972bbb56a84a920c24e42e8c16e3f1e4b592478"
        ],
        [
            "intros n (k, Hk).",
            "VernacExtend",
            "ab6ff8f759c19a4a28608fda082c6e6e40b6fff1"
        ],
        [
            "rewrite Hk.",
            "VernacExtend",
            "c5a1e8c9638c5734e858ad671e545e87eb94e50e"
        ],
        [
            "apply Rle_trans with (Vn k).",
            "VernacExtend",
            "622ebebb91db8736a6085b91fd94f5fc7d897327"
        ],
        [
            "clear.",
            "VernacExtend",
            "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
        ],
        [
            "induction k.",
            "VernacExtend",
            "40c5b84c7f25c7c24e470db498af5e654cfce415"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct (Rle_lt_dec (Vn k) (Un (S k))) as [H|H].",
            "VernacExtend",
            "6632335876da25415c30b5151fd5bb3deb747de2"
        ],
        [
            "apply Rle_refl.",
            "VernacExtend",
            "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
        ],
        [
            "now apply Rlt_le.",
            "VernacExtend",
            "3fa67bbd472123a7abc1f777aecc643fb3862e46"
        ],
        [
            "apply Hl.",
            "VernacExtend",
            "02df804151e4adadf6baf4a5ea9b58097df0f911"
        ],
        [
            "now exists k.",
            "VernacExtend",
            "9c120dbed1df0ea5a6f910cb2efd9fcfe234a0b6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma approx_min : forall (Un:nat -> R) (pr:has_lb Un) (eps:R), 0 < eps -> exists k : nat, Rabs (glb Un pr - Un k) < eps.",
            "VernacStartTheoremProof",
            "130472709b8f9f37a4373bdbc93115a1aa7eb415"
        ],
        [
            "intros Un pr.",
            "VernacExtend",
            "9d293033f3f705808be5d5e5cba6b0f2dd1582f7"
        ],
        [
            "unfold glb.",
            "VernacExtend",
            "de5d7dc0a2b98cd59f0ad5c868b008125c310a9a"
        ],
        [
            "destruct lb_to_glb as (lb, Hlb).",
            "VernacExtend",
            "e6e337aea1edbc5269049b120fb05b696027e350"
        ],
        [
            "intros eps Heps.",
            "VernacExtend",
            "7703df655796ea26c6ea499878b7b84d16db4279"
        ],
        [
            "destruct (approx_maj _ pr eps Heps) as (n, Hn).",
            "VernacExtend",
            "9adadb027294e131cc05026212dc40011852c323"
        ],
        [
            "exists n.",
            "VernacExtend",
            "a97204a252e0d9b7444ffed9b38570a756391511"
        ],
        [
            "unfold Rminus.",
            "VernacExtend",
            "be913ef3bb9103a3081d46d811769f83edb6f7a5"
        ],
        [
            "rewrite <- Ropp_plus_distr, Rabs_Ropp.",
            "VernacExtend",
            "9ab05dba9c8ddd949362407cea9feea4460610d5"
        ],
        [
            "replace lb with (lub (opp_seq Un) pr).",
            "VernacExtend",
            "a5ef195fba69e91f8131406e6808097170bd9188"
        ],
        [
            "now rewrite <- (Ropp_involutive (Un n)).",
            "VernacExtend",
            "cb188a50cb06d57fc7c07b08150e61178cf79b34"
        ],
        [
            "unfold lub.",
            "VernacExtend",
            "93825f408aac22eaa724a930ee62b1a275eb0781"
        ],
        [
            "destruct ub_to_lub as (ub, Hub).",
            "VernacExtend",
            "92605fa59147902ac1dc98b89348b6766c0b70e9"
        ],
        [
            "apply Rle_antisym.",
            "VernacExtend",
            "8e9431fb6db6f151160007e68131f4f5cb1c7968"
        ],
        [
            "apply Hub.",
            "VernacExtend",
            "88ecc2488b63e46827735699f592921a85d0a25a"
        ],
        [
            "apply Hlb.",
            "VernacExtend",
            "ad9ef1d96c511d01147b34c3a7322a87451c292d"
        ],
        [
            "apply Hlb.",
            "VernacExtend",
            "ad9ef1d96c511d01147b34c3a7322a87451c292d"
        ],
        [
            "apply Hub.",
            "VernacExtend",
            "88ecc2488b63e46827735699f592921a85d0a25a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma UL_sequence : forall (Un:nat -> R) (l1 l2:R), Un_cv Un l1 -> Un_cv Un l2 -> l1 = l2.",
            "VernacStartTheoremProof",
            "5605b27e6060f637f4fa52d559e80820378c107f"
        ],
        [
            "intros Un l1 l2; unfold Un_cv; unfold R_dist; intros.",
            "VernacExtend",
            "9bd5178dd4ccb27c74798c13a650e1be0fed116d"
        ],
        [
            "apply cond_eq.",
            "VernacExtend",
            "d876630090535b5a5f7e7841ae4c0c5219a1ca89"
        ],
        [
            "intros; cut (0 < eps / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
            "VernacExtend",
            "fbe90d51ce8a5e2852a2bf79a3cc31e104df7d06"
        ],
        [
            "elim (H (eps / 2) H2); intros.",
            "VernacExtend",
            "b663cf2cc4b4080df74976cca805dc7e17f5060a"
        ],
        [
            "elim (H0 (eps / 2) H2); intros.",
            "VernacExtend",
            "58e32d30a7b7e5e1875817799f8e978c34012f97"
        ],
        [
            "set (N := max x x0).",
            "VernacExtend",
            "aada59eabde7c0462f5cacd2ee4be89852b197bc"
        ],
        [
            "apply Rle_lt_trans with (Rabs (l1 - Un N) + Rabs (Un N - l2)).",
            "VernacExtend",
            "b04a3ef84963f03af3cc3be48c3c64df3d368b46"
        ],
        [
            "replace (l1 - l2) with (l1 - Un N + (Un N - l2)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "e04edb73b1bdbcaf13d05498ca7365b9c77e1d87"
        ],
        [
            "rewrite (double_var eps); apply Rplus_lt_compat.",
            "VernacExtend",
            "dd3002897582f3251627e3b8fbd0c2a8c471071b"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H3; unfold ge, N; apply le_max_l.",
            "VernacExtend",
            "7d80b9c8f571d6b066167b43b85322cbeaa45f4b"
        ],
        [
            "apply H4; unfold ge, N; apply le_max_r.",
            "VernacExtend",
            "54aa1e636dbfce2e33c58bc085635e7d68efe1e0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_plus : forall (An Bn:nat -> R) (l1 l2:R), Un_cv An l1 -> Un_cv Bn l2 -> Un_cv (fun i:nat => An i + Bn i) (l1 + l2).",
            "VernacStartTheoremProof",
            "49db4a6984662243bbdf7505fcdb101730a499ee"
        ],
        [
            "unfold Un_cv; unfold R_dist; intros.",
            "VernacExtend",
            "add26482ec443227632a57519752bde439308595"
        ],
        [
            "cut (0 < eps / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
            "VernacExtend",
            "8ac1755346ca1cc52f3336146370006f80a4ff61"
        ],
        [
            "elim (H (eps / 2) H2); intros.",
            "VernacExtend",
            "b663cf2cc4b4080df74976cca805dc7e17f5060a"
        ],
        [
            "elim (H0 (eps / 2) H2); intros.",
            "VernacExtend",
            "58e32d30a7b7e5e1875817799f8e978c34012f97"
        ],
        [
            "set (N := max x x0).",
            "VernacExtend",
            "aada59eabde7c0462f5cacd2ee4be89852b197bc"
        ],
        [
            "exists N; intros.",
            "VernacExtend",
            "cfd63f1f7fafabc1d063c17632530a627ae99922"
        ],
        [
            "replace (An n + Bn n - (l1 + l2)) with (An n - l1 + (Bn n - l2)); [ idtac | ring ].",
            "VernacExtend",
            "68fed07d8a9673ae8d049a7b8e072af6fcc26207"
        ],
        [
            "apply Rle_lt_trans with (Rabs (An n - l1) + Rabs (Bn n - l2)).",
            "VernacExtend",
            "187bc0501a70ab90ef0f464aa0041933d5d30631"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "rewrite (double_var eps); apply Rplus_lt_compat.",
            "VernacExtend",
            "dd3002897582f3251627e3b8fbd0c2a8c471071b"
        ],
        [
            "apply H3; unfold ge; apply le_trans with N; [ unfold N; apply le_max_l | assumption ].",
            "VernacExtend",
            "4f9c2b37899a01e4cc58e65cb103db1b92c2f25b"
        ],
        [
            "apply H4; unfold ge; apply le_trans with N; [ unfold N; apply le_max_r | assumption ].",
            "VernacExtend",
            "d850302794e8fb195e6624b61ba0b87e12b18446"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cv_cvabs : forall (Un:nat -> R) (l:R), Un_cv Un l -> Un_cv (fun i:nat => Rabs (Un i)) (Rabs l).",
            "VernacStartTheoremProof",
            "dae969fda8e8f909f7886fb1f061d7f16e230815"
        ],
        [
            "unfold Un_cv; unfold R_dist; intros.",
            "VernacExtend",
            "add26482ec443227632a57519752bde439308595"
        ],
        [
            "elim (H eps H0); intros.",
            "VernacExtend",
            "ace4b126c6608622fb1152df39f2724078d34d25"
        ],
        [
            "exists x; intros.",
            "VernacExtend",
            "630f24a2d635df94b063a62023a90567ef134b19"
        ],
        [
            "apply Rle_lt_trans with (Rabs (Un n - l)).",
            "VernacExtend",
            "aa383459fe085c0560fc84890aa19b61b590dc1b"
        ],
        [
            "apply Rabs_triang_inv2.",
            "VernacExtend",
            "db3a686e29529c6a07ba47aa021c0e984d49629a"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_Cauchy : forall Un:nat -> R, { l:R | Un_cv Un l } -> Cauchy_crit Un.",
            "VernacStartTheoremProof",
            "6f2110121c4534775792f707636ea4546f3ba3af"
        ],
        [
            "intros Un X; elim X; intros.",
            "VernacExtend",
            "45080cc8f2eb31763dd822989d0561f943d2b7fc"
        ],
        [
            "unfold Cauchy_crit; intros.",
            "VernacExtend",
            "5332438cc27c8532958cdaa8c48d07862195e393"
        ],
        [
            "unfold Un_cv in p; unfold R_dist in p.",
            "VernacExtend",
            "008476201ef62d7a4d7a5d821be05042b256cd6a"
        ],
        [
            "cut (0 < eps / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
            "VernacExtend",
            "8ac1755346ca1cc52f3336146370006f80a4ff61"
        ],
        [
            "elim (p (eps / 2) H0); intros.",
            "VernacExtend",
            "15880c00810dd295e66745d8c56eaff1a76d8ce9"
        ],
        [
            "exists x0; intros.",
            "VernacExtend",
            "5bc9f78cbd3bd0b9d5ad70bca80ff875ab1656fa"
        ],
        [
            "unfold R_dist; apply Rle_lt_trans with (Rabs (Un n - x) + Rabs (x - Un m)).",
            "VernacExtend",
            "c054f386e51b0660f097c0fdef97b6633f8d8f5b"
        ],
        [
            "replace (Un n - Un m) with (Un n - x + (x - Un m)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "217c80d6ceb7a8c156529f0008ed7784876c9b6e"
        ],
        [
            "rewrite (double_var eps); apply Rplus_lt_compat.",
            "VernacExtend",
            "dd3002897582f3251627e3b8fbd0c2a8c471071b"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H1; assumption.",
            "VernacExtend",
            "842c9f15821b762dbbee1a50bd7ad367e5b5d2bd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma maj_by_pos : forall Un:nat -> R, { l:R | Un_cv Un l } -> exists l : R, 0 < l /\\ (forall n:nat, Rabs (Un n) <= l).",
            "VernacStartTheoremProof",
            "cb175b31f0966bf0b742f6fd6e8a4d1c4c1485b0"
        ],
        [
            "intros Un X; elim X; intros.",
            "VernacExtend",
            "45080cc8f2eb31763dd822989d0561f943d2b7fc"
        ],
        [
            "cut { l:R | Un_cv (fun k:nat => Rabs (Un k)) l }.",
            "VernacExtend",
            "4793a09bc76dbce49f67acd4444200612e95fab2"
        ],
        [
            "intro X0.",
            "VernacExtend",
            "51ac38a0ee50d186261fb87ba79cee51d717c575"
        ],
        [
            "assert (H := CV_Cauchy (fun k:nat => Rabs (Un k)) X0).",
            "VernacExtend",
            "7de95bbc0142920cfcc3bca71a2f50fab31a623e"
        ],
        [
            "assert (H0 := cauchy_bound (fun k:nat => Rabs (Un k)) H).",
            "VernacExtend",
            "bbc0d7fa06b845ce816a537553c128a81bcb55ea"
        ],
        [
            "elim H0; intros.",
            "VernacExtend",
            "6b83f392a470a8cdaa118e532bc445a009dec854"
        ],
        [
            "exists (x0 + 1).",
            "VernacExtend",
            "4ec5d8bac6aaa8f6a0c0709db508913a12842057"
        ],
        [
            "cut (0 <= x0).",
            "VernacExtend",
            "9cb0dadd4c64c35233f0bf30dbf7022d3b6ec7e6"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "apply Rplus_le_lt_0_compat; [ assumption | apply Rlt_0_1 ].",
            "VernacExtend",
            "43752e2a1d81f3523d64cc65d8ba4954274e2995"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply Rle_trans with x0.",
            "VernacExtend",
            "5fc66bcd849b3049a7c30908f409fe1874b7696f"
        ],
        [
            "unfold is_upper_bound in H1.",
            "VernacExtend",
            "65e27302a9a08c517c1ff84df4472e363cb5a32d"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "exists n; reflexivity.",
            "VernacExtend",
            "6ed49d76c89168c40bd2e34b38ed3c4be248fe55"
        ],
        [
            "pattern x0 at 1; rewrite <- Rplus_0_r; apply Rplus_le_compat_l; left; apply Rlt_0_1.",
            "VernacExtend",
            "3710cc7c323fd7b577a5586641b1a10b72fbefa9"
        ],
        [
            "apply Rle_trans with (Rabs (Un 0%nat)).",
            "VernacExtend",
            "9b7703daa222fcd6017c0bfdfe4574661979486b"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "unfold is_upper_bound in H1.",
            "VernacExtend",
            "65e27302a9a08c517c1ff84df4472e363cb5a32d"
        ],
        [
            "apply H1.",
            "VernacExtend",
            "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
        ],
        [
            "exists 0%nat; reflexivity.",
            "VernacExtend",
            "fe3e4a322fd724f6b5422383151c7be1ffa0f073"
        ],
        [
            "exists (Rabs x).",
            "VernacExtend",
            "ef3f321d2847ecdadc6765a8eb3369dd1fa46b0c"
        ],
        [
            "apply cv_cvabs; assumption.",
            "VernacExtend",
            "4450e434fb56c1a5af4010c3dad75a2bca5a7782"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_mult : forall (An Bn:nat -> R) (l1 l2:R), Un_cv An l1 -> Un_cv Bn l2 -> Un_cv (fun i:nat => An i * Bn i) (l1 * l2).",
            "VernacStartTheoremProof",
            "25e6a93f0fbbcfa6add9f8013ef32f1ed5fafd96"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "cut { l:R | Un_cv An l }.",
            "VernacExtend",
            "2e67f62ecaf9c8339326a2184aafd9b5b4d34a91"
        ],
        [
            "intro X.",
            "VernacExtend",
            "c93bbb51ef8637991b4239865469e36d8e520337"
        ],
        [
            "assert (H1 := maj_by_pos An X).",
            "VernacExtend",
            "5fff8436a83500cf3b82437aacdf2f5dacb45f02"
        ],
        [
            "elim H1; intros M H2.",
            "VernacExtend",
            "5f55036b3bc2c82538ab4541099c138a287d8234"
        ],
        [
            "elim H2; intros.",
            "VernacExtend",
            "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
        ],
        [
            "unfold Un_cv; unfold R_dist; intros.",
            "VernacExtend",
            "add26482ec443227632a57519752bde439308595"
        ],
        [
            "cut (0 < eps / (2 * M)).",
            "VernacExtend",
            "90d64a6a9e70ce27b35e1067d6ece87658c4c056"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "case (Req_dec l2 0); intro.",
            "VernacExtend",
            "9dca1657c217aee00ef4d09307f3c15e335bd198"
        ],
        [
            "unfold Un_cv in H0; unfold R_dist in H0.",
            "VernacExtend",
            "b1118ca929986de1cd1f0ab5223a4eacd196ec34"
        ],
        [
            "elim (H0 (eps / (2 * M)) H6); intros.",
            "VernacExtend",
            "4e0da423cd7e85363fb3de293e97e0d947bde97a"
        ],
        [
            "exists x; intros.",
            "VernacExtend",
            "630f24a2d635df94b063a62023a90567ef134b19"
        ],
        [
            "apply Rle_lt_trans with (Rabs (An n * Bn n - An n * l2) + Rabs (An n * l2 - l1 * l2)).",
            "VernacExtend",
            "4feb60c4b85e4fa46dfca7361d53899c0098455c"
        ],
        [
            "replace (An n * Bn n - l1 * l2) with (An n * Bn n - An n * l2 + (An n * l2 - l1 * l2)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "f004e8586bbef1a10229325e97227113c27c8897"
        ],
        [
            "replace (Rabs (An n * Bn n - An n * l2)) with (Rabs (An n) * Rabs (Bn n - l2)).",
            "VernacExtend",
            "fc8afd44de80431bcca37b2e9c91377dd00fa54e"
        ],
        [
            "replace (Rabs (An n * l2 - l1 * l2)) with 0.",
            "VernacExtend",
            "5dcbb2bb1ad1fc0a6f94fee83bc89de18f07271d"
        ],
        [
            "rewrite Rplus_0_r.",
            "VernacExtend",
            "d5c1fdd9d1c31f6ede268b5fbee697b051ea4fe2"
        ],
        [
            "apply Rle_lt_trans with (M * Rabs (Bn n - l2)).",
            "VernacExtend",
            "26744342edd2603b25bcb1a6fbce60ffba42ab1a"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (Bn n - l2))).",
            "VernacExtend",
            "2818202f8238fc140085ae58e8f09de79cc8157c"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "apply Rmult_lt_reg_l with (/ M).",
            "VernacExtend",
            "79687adc467d58cfdfd071a818d350adbeac1d4c"
        ],
        [
            "apply Rinv_0_lt_compat; apply H3.",
            "VernacExtend",
            "e9505185ee7159c99fa9cfc81ad9c2a60de244ea"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "eccb067dc9e836ad48bf16c61cd308004f5d6712"
        ],
        [
            "rewrite Rmult_1_l; rewrite (Rmult_comm (/ M)).",
            "VernacExtend",
            "5d4d848fa0647cee8a6ea06ead1c49224722f18d"
        ],
        [
            "apply Rlt_trans with (eps / (2 * M)).",
            "VernacExtend",
            "eba7d46e99be5aa1f4efb21b4f0075aa524441a2"
        ],
        [
            "apply H8; assumption.",
            "VernacExtend",
            "df19cbbb8259b05d203bfb898a30426965421383"
        ],
        [
            "unfold Rdiv; rewrite Rinv_mult_distr.",
            "VernacExtend",
            "3bf9830f7647c63577f406f658b9e756537f6464"
        ],
        [
            "apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "6631f3c2df4cb853b13a1c15d269a9146336e287"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "replace (2 * (eps * (/ 2 * / M))) with (2 * / 2 * (eps * / M)); [ idtac | ring ].",
            "VernacExtend",
            "5bce7a386901df726439010fdf19719dbd12e050"
        ],
        [
            "rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "2ca74255a63c294f9442d956f32a2e3784636efb"
        ],
        [
            "rewrite Rmult_1_l; rewrite double.",
            "VernacExtend",
            "9c26c13cbbf5c8312ae7ea7321291c39e7a50be4"
        ],
        [
            "pattern (eps * / M) at 1; rewrite <- Rplus_0_r.",
            "VernacExtend",
            "9b843f21ab8e4e91950bf2f382dc1cfb69ac023a"
        ],
        [
            "apply Rplus_lt_compat_l; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; assumption ].",
            "VernacExtend",
            "7eb325b97cfde9a5204535f07ff35d357e3d6929"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "red; intro; rewrite H10 in H3; elim (Rlt_irrefl _ H3).",
            "VernacExtend",
            "dc671ba9b1a7f362f112a8aa7c6ef0ea3ff52307"
        ],
        [
            "red; intro; rewrite H10 in H3; elim (Rlt_irrefl _ H3).",
            "VernacExtend",
            "dc671ba9b1a7f362f112a8aa7c6ef0ea3ff52307"
        ],
        [
            "rewrite H7; do 2 rewrite Rmult_0_r; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; reflexivity.",
            "VernacExtend",
            "348846443ebe8f2058d58c28b21461c7c4651e74"
        ],
        [
            "replace (An n * Bn n - An n * l2) with (An n * (Bn n - l2)); [ idtac | ring ].",
            "VernacExtend",
            "3377317aaa575498af313b683777ebc0c727cef1"
        ],
        [
            "symmetry ; apply Rabs_mult.",
            "VernacExtend",
            "a2efa94d54be685d351b12f07c03e17286230947"
        ],
        [
            "cut (0 < eps / (2 * Rabs l2)).",
            "VernacExtend",
            "4aa0219e0104f8284eb7b0faca5c63be046186af"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "unfold Un_cv in H; unfold R_dist in H; unfold Un_cv in H0; unfold R_dist in H0.",
            "VernacExtend",
            "c2c8c5cc01db40a6ec920286af0c4514c43a004e"
        ],
        [
            "elim (H (eps / (2 * Rabs l2)) H8); intros N1 H9.",
            "VernacExtend",
            "b32552429269e0bba09241a9e44e81d38e6c9a7e"
        ],
        [
            "elim (H0 (eps / (2 * M)) H6); intros N2 H10.",
            "VernacExtend",
            "e6b791ffb23dcaa217d9c5a0b2c23bcafd229487"
        ],
        [
            "set (N := max N1 N2).",
            "VernacExtend",
            "4f50171d76cecbd209de2e30830957d590b70f98"
        ],
        [
            "exists N; intros.",
            "VernacExtend",
            "cfd63f1f7fafabc1d063c17632530a627ae99922"
        ],
        [
            "apply Rle_lt_trans with (Rabs (An n * Bn n - An n * l2) + Rabs (An n * l2 - l1 * l2)).",
            "VernacExtend",
            "4feb60c4b85e4fa46dfca7361d53899c0098455c"
        ],
        [
            "replace (An n * Bn n - l1 * l2) with (An n * Bn n - An n * l2 + (An n * l2 - l1 * l2)); [ apply Rabs_triang | ring ].",
            "VernacExtend",
            "f004e8586bbef1a10229325e97227113c27c8897"
        ],
        [
            "replace (Rabs (An n * Bn n - An n * l2)) with (Rabs (An n) * Rabs (Bn n - l2)).",
            "VernacExtend",
            "fc8afd44de80431bcca37b2e9c91377dd00fa54e"
        ],
        [
            "replace (Rabs (An n * l2 - l1 * l2)) with (Rabs l2 * Rabs (An n - l1)).",
            "VernacExtend",
            "1a1d0f66799e452258329ca649a1a08373aac4b1"
        ],
        [
            "rewrite (double_var eps); apply Rplus_lt_compat.",
            "VernacExtend",
            "dd3002897582f3251627e3b8fbd0c2a8c471071b"
        ],
        [
            "apply Rle_lt_trans with (M * Rabs (Bn n - l2)).",
            "VernacExtend",
            "26744342edd2603b25bcb1a6fbce60ffba42ab1a"
        ],
        [
            "do 2 rewrite <- (Rmult_comm (Rabs (Bn n - l2))).",
            "VernacExtend",
            "2818202f8238fc140085ae58e8f09de79cc8157c"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "apply H4.",
            "VernacExtend",
            "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
        ],
        [
            "apply Rmult_lt_reg_l with (/ M).",
            "VernacExtend",
            "79687adc467d58cfdfd071a818d350adbeac1d4c"
        ],
        [
            "apply Rinv_0_lt_compat; apply H3.",
            "VernacExtend",
            "e9505185ee7159c99fa9cfc81ad9c2a60de244ea"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "eccb067dc9e836ad48bf16c61cd308004f5d6712"
        ],
        [
            "rewrite Rmult_1_l; rewrite (Rmult_comm (/ M)).",
            "VernacExtend",
            "5d4d848fa0647cee8a6ea06ead1c49224722f18d"
        ],
        [
            "apply Rlt_le_trans with (eps / (2 * M)).",
            "VernacExtend",
            "cb918d8d02157438ffe100cc9d1080cbfaa87424"
        ],
        [
            "apply H10.",
            "VernacExtend",
            "169c3dd7a02593ce4f62696429eb3c1035f98388"
        ],
        [
            "unfold ge; apply le_trans with N.",
            "VernacExtend",
            "9ac2ffe83dc996e2342fedd4e0410456bffeae44"
        ],
        [
            "unfold N; apply le_max_r.",
            "VernacExtend",
            "25b64a376c94d836945bf1b7c1d8586025f5da56"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv; rewrite Rinv_mult_distr.",
            "VernacExtend",
            "3bf9830f7647c63577f406f658b9e756537f6464"
        ],
        [
            "right; ring.",
            "VernacExtend",
            "fd78e12e931c5c888aae66d8787277e6e0aa2249"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "red; intro; rewrite H12 in H3; elim (Rlt_irrefl _ H3).",
            "VernacExtend",
            "f9cab2c525194e8eeb27ec9528936edcbf72601c"
        ],
        [
            "red; intro; rewrite H12 in H3; elim (Rlt_irrefl _ H3).",
            "VernacExtend",
            "f9cab2c525194e8eeb27ec9528936edcbf72601c"
        ],
        [
            "apply Rmult_lt_reg_l with (/ Rabs l2).",
            "VernacExtend",
            "7944f179a78ebd07fe63f5dec4cb4d22d73760a7"
        ],
        [
            "apply Rinv_0_lt_compat; apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "e4c91a40f2fa1c87312f044d164ffed2c6475792"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "eccb067dc9e836ad48bf16c61cd308004f5d6712"
        ],
        [
            "rewrite Rmult_1_l; apply Rlt_le_trans with (eps / (2 * Rabs l2)).",
            "VernacExtend",
            "c92174900b0cda658c839d70c7f70b9a787efbac"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "unfold ge; apply le_trans with N.",
            "VernacExtend",
            "9ac2ffe83dc996e2342fedd4e0410456bffeae44"
        ],
        [
            "unfold N; apply le_max_l.",
            "VernacExtend",
            "276b555b39b40f510dcc90e9585bf8a1fd5a87cf"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold Rdiv; right; rewrite Rinv_mult_distr.",
            "VernacExtend",
            "f1ac5e795fd8c7fc5b99aa30670edde0a6b9f934"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "discrR.",
            "VernacExtend",
            "317ae3d71f99da86881f5bad35bdd745e918f381"
        ],
        [
            "apply Rabs_no_R0; assumption.",
            "VernacExtend",
            "919603fae9f5552a2987bbb604439a06966af0d9"
        ],
        [
            "apply Rabs_no_R0; assumption.",
            "VernacExtend",
            "919603fae9f5552a2987bbb604439a06966af0d9"
        ],
        [
            "replace (An n * l2 - l1 * l2) with (l2 * (An n - l1)); [ symmetry ; apply Rabs_mult | ring ].",
            "VernacExtend",
            "ba888cc5847307fc43f4e6b521182d7d8f88478d"
        ],
        [
            "replace (An n * Bn n - An n * l2) with (An n * (Bn n - l2)); [ symmetry ; apply Rabs_mult | ring ].",
            "VernacExtend",
            "bc644b072e86fced5cadf0e6757ecbf0c20dd1c6"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7122edbd68559f255bfed03dc640472ed14eb4ef"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rinv_0_lt_compat; apply Rmult_lt_0_compat; [ prove_sup0 | apply Rabs_pos_lt; assumption ].",
            "VernacExtend",
            "96a5768d514f568ae0621dec8d848fe407c483de"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; apply Rmult_lt_0_compat; [ prove_sup0 | assumption ] ].",
            "VernacExtend",
            "9f5dabd51c951842955e71a85b54e65dba5a273c"
        ],
        [
            "exists l1; assumption.",
            "VernacExtend",
            "a9cc112d1cbf7c08021e7b6ce1e5716e2c79de40"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech9 : forall Un:nat -> R, Un_growing Un -> forall m n:nat, (m <= n)%nat -> Un m <= Un n.",
            "VernacStartTheoremProof",
            "c668be5eec79d31abbc980b66e33e3c9c1cb75bb"
        ],
        [
            "intros; unfold Un_growing in H.",
            "VernacExtend",
            "2f408cf59c789ca6690306851a0e72fd9247c20d"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "induction m as [| m Hrecm].",
            "VernacExtend",
            "93d2b60c268fff5d958c27bdb803738ea66bba5b"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "elim (le_Sn_O _ H0).",
            "VernacExtend",
            "912cb990a9402661103be256edde82bfaccb25c8"
        ],
        [
            "cut ((m <= n)%nat \\/ m = S n).",
            "VernacExtend",
            "ec696106dd8157f0d9e3657ec92e389aac22ff8d"
        ],
        [
            "intro; elim H1; intro.",
            "VernacExtend",
            "1301c759b4c493230f305c8c6fd6d684c10b8bbc"
        ],
        [
            "apply Rle_trans with (Un n).",
            "VernacExtend",
            "c7389fcabe950a23c5f0aa976182376c7f262216"
        ],
        [
            "apply Hrecn; assumption.",
            "VernacExtend",
            "09c4bfc615059e1cf9b030ea0c6389838481a775"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "rewrite H2; right; reflexivity.",
            "VernacExtend",
            "03b324cc95cb472cd1139b2810eb3aed0e88d18b"
        ],
        [
            "inversion H0.",
            "VernacExtend",
            "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma tech13 : forall (An:nat -> R) (k:R), 0 <= k < 1 -> Un_cv (fun n:nat => Rabs (An (S n) / An n)) k -> exists k0 : R, k < k0 < 1 /\\ (exists N : nat, (forall n:nat, (N <= n)%nat -> Rabs (An (S n) / An n) < k0)).",
            "VernacStartTheoremProof",
            "e11c692db447a2c960c7b592fa01a7992c886431"
        ],
        [
            "intros; exists (k + (1 - k) / 2).",
            "VernacExtend",
            "9b1be0135f80e8e4b82f1a5380452a38ee47da22"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "pattern k at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l.",
            "VernacExtend",
            "432c3c1855104e90de150ffebf3f3bfebc9016ab"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7122edbd68559f255bfed03dc640472ed14eb4ef"
        ],
        [
            "apply Rplus_lt_reg_l with k; rewrite Rplus_0_r; replace (k + (1 - k)) with 1; [ elim H; intros; assumption | ring ].",
            "VernacExtend",
            "b63baf6973a49ce17136b38efe64134d5092925c"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "ee74bd033c1031a79ef440e1d41037d5c9648214"
        ],
        [
            "apply Rmult_lt_reg_l with 2.",
            "VernacExtend",
            "6631f3c2df4cb853b13a1c15d269a9146336e287"
        ],
        [
            "prove_sup0.",
            "VernacExtend",
            "9681c23836ca7f82fee12028ab3f984ae6ec2935"
        ],
        [
            "unfold Rdiv; rewrite Rmult_1_r; rewrite Rmult_plus_distr_l; pattern 2 at 1; rewrite Rmult_comm; rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ]; rewrite Rmult_1_r; replace (2 * k + (1 - k)) with (1 + k); [ idtac | ring ].",
            "VernacExtend",
            "9b86bb06b33ae110f248786cb9427cf046c49c66"
        ],
        [
            "elim H; intros.",
            "VernacExtend",
            "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
        ],
        [
            "apply Rplus_lt_compat_l; assumption.",
            "VernacExtend",
            "44ce99cd422bdcc117c49c3d0f1b9cfdbe5e3579"
        ],
        [
            "unfold Un_cv in H0; cut (0 < (1 - k) / 2).",
            "VernacExtend",
            "f712c310dd24d899ab2adccabb3e12ba18935141"
        ],
        [
            "intro; elim (H0 ((1 - k) / 2) H1); intros.",
            "VernacExtend",
            "46821c3b508d7355789bc892fdcd4bd587e29dd8"
        ],
        [
            "exists x; intros.",
            "VernacExtend",
            "630f24a2d635df94b063a62023a90567ef134b19"
        ],
        [
            "assert (H4 := H2 n H3).",
            "VernacExtend",
            "e2a04925a6423878607f8caff9237ee9c4cd80a4"
        ],
        [
            "unfold R_dist in H4; rewrite <- Rabs_Rabsolu; replace (Rabs (An (S n) / An n)) with (Rabs (An (S n) / An n) - k + k); [ idtac | ring ]; apply Rle_lt_trans with (Rabs (Rabs (An (S n) / An n) - k) + Rabs k).",
            "VernacExtend",
            "5c142df57ed390dc6c8b4c51ae9b3e735963adfc"
        ],
        [
            "apply Rabs_triang.",
            "VernacExtend",
            "ac95e0693bced827aa4991eb13639b86503a8150"
        ],
        [
            "rewrite (Rabs_right k).",
            "VernacExtend",
            "ad6e37b5f7603776ffb50c4ddebfbd8a26791760"
        ],
        [
            "apply Rplus_lt_reg_l with (- k); rewrite <- (Rplus_comm k); repeat rewrite <- Rplus_assoc; rewrite Rplus_opp_l; repeat rewrite Rplus_0_l; apply H4.",
            "VernacExtend",
            "f7694b1ea0a17503bba54f48ac68ff507fa94ef5"
        ],
        [
            "apply Rle_ge; elim H; intros; assumption.",
            "VernacExtend",
            "556e1fc7a6e3a32fd87f2f3711c06f9d695a452d"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7122edbd68559f255bfed03dc640472ed14eb4ef"
        ],
        [
            "apply Rplus_lt_reg_l with k; rewrite Rplus_0_r; elim H; intros; replace (k + (1 - k)) with 1; [ assumption | ring ].",
            "VernacExtend",
            "23c2886e5ef406cc1bffde01514b9ea6459c4f73"
        ],
        [
            "apply Rinv_0_lt_compat; prove_sup0.",
            "VernacExtend",
            "ee74bd033c1031a79ef440e1d41037d5c9648214"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma growing_ineq : forall (Un:nat -> R) (l:R), Un_growing Un -> Un_cv Un l -> forall n:nat, Un n <= l.",
            "VernacStartTheoremProof",
            "cdbb1bc712e5f9d3e9499517a752ee0bd3071be7"
        ],
        [
            "intros; destruct (total_order_T (Un n) l) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "4b8cb799034d729fccd715b8b9cc488c6cac01ed"
        ],
        [
            "left; assumption.",
            "VernacExtend",
            "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
        ],
        [
            "right; assumption.",
            "VernacExtend",
            "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
        ],
        [
            "cut (0 < Un n - l).",
            "VernacExtend",
            "b567da73fdae6495b5548af2f0279a197127aed1"
        ],
        [
            "intro; unfold Un_cv in H0; unfold R_dist in H0.",
            "VernacExtend",
            "a12d9e1333f687be203011dfe76761d31af937e9"
        ],
        [
            "elim (H0 (Un n - l) H1); intros N1 H2.",
            "VernacExtend",
            "3b5d61b3018bf13f4aa6d107bd0a0269bb7bb306"
        ],
        [
            "set (N := max n N1).",
            "VernacExtend",
            "c53c2570ed7536c3c281312078cf8b4a42519247"
        ],
        [
            "cut (Un n - l <= Un N - l).",
            "VernacExtend",
            "c5110a9129f5463822ba26bddb2c1ab57cf9e3b2"
        ],
        [
            "intro; cut (Un N - l < Un n - l).",
            "VernacExtend",
            "90982ef66771e20346c77768ea338342a8934369"
        ],
        [
            "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H3 H4)).",
            "VernacExtend",
            "86937ffed7ee1574499d5c3a7587cc1f42be84ed"
        ],
        [
            "apply Rle_lt_trans with (Rabs (Un N - l)).",
            "VernacExtend",
            "9d6881889c9cbbf3d8638853d27fc5f0199c4927"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "apply H2.",
            "VernacExtend",
            "17101978526a14fb5ad41816224a2fc35cc3d256"
        ],
        [
            "unfold ge, N; apply le_max_r.",
            "VernacExtend",
            "81433f17e1c337a8bab89c4a84a4877d9949032d"
        ],
        [
            "unfold Rminus; do 2 rewrite <- (Rplus_comm (- l)); apply Rplus_le_compat_l.",
            "VernacExtend",
            "77e8b1700d1ed6ceeac8b5ba952f05cb58324117"
        ],
        [
            "apply tech9.",
            "VernacExtend",
            "9e7450a2f6b4a56b55973921834e6e2904b3b80a"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold N; apply le_max_l.",
            "VernacExtend",
            "276b555b39b40f510dcc90e9585bf8a1fd5a87cf"
        ],
        [
            "apply Rplus_lt_reg_l with l.",
            "VernacExtend",
            "59f76e8e454b396a55b0ece9ce2063364048b9a2"
        ],
        [
            "rewrite Rplus_0_r.",
            "VernacExtend",
            "d5c1fdd9d1c31f6ede268b5fbee697b051ea4fe2"
        ],
        [
            "replace (l + (Un n - l)) with (Un n); [ assumption | ring ].",
            "VernacExtend",
            "1b45fd40d85539d265c9e811fc3bd5164485d16e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_opp : forall (An:nat -> R) (l:R), Un_cv An l -> Un_cv (opp_seq An) (- l).",
            "VernacStartTheoremProof",
            "9c65154f7e0c7c12eb631999d22fdfb29d1eeb25"
        ],
        [
            "intros An l.",
            "VernacExtend",
            "0cf30cbe02bcf469caf43d8ce8a7d101e16f2e9c"
        ],
        [
            "unfold Un_cv; unfold R_dist; intros.",
            "VernacExtend",
            "add26482ec443227632a57519752bde439308595"
        ],
        [
            "elim (H eps H0); intros.",
            "VernacExtend",
            "ace4b126c6608622fb1152df39f2724078d34d25"
        ],
        [
            "exists x; intros.",
            "VernacExtend",
            "630f24a2d635df94b063a62023a90567ef134b19"
        ],
        [
            "unfold opp_seq; replace (- An n - - l) with (- (An n - l)); [ rewrite Rabs_Ropp | ring ].",
            "VernacExtend",
            "1da2e864469e2271bd93134418c3bd955c488cbd"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decreasing_ineq : forall (Un:nat -> R) (l:R), Un_decreasing Un -> Un_cv Un l -> forall n:nat, l <= Un n.",
            "VernacStartTheoremProof",
            "3238c073148422fe30f977a4b32222499e7d0ac8"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "assert (H1 := decreasing_growing _ H).",
            "VernacExtend",
            "c92741a681e9f6a72a655e79fe0b87b41e56d072"
        ],
        [
            "assert (H2 := CV_opp _ _ H0).",
            "VernacExtend",
            "989af9e1ccf0ac5f9ed87d49c8f8000e810b24d3"
        ],
        [
            "assert (H3 := growing_ineq _ _ H1 H2).",
            "VernacExtend",
            "d140518fd65cbfad69add759e3fa9ea0d5479716"
        ],
        [
            "apply Ropp_le_cancel.",
            "VernacExtend",
            "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
        ],
        [
            "unfold opp_seq in H3; apply H3.",
            "VernacExtend",
            "a3fea6fbaa39b382e674ca64268d80ce72edb61e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CV_minus : forall (An Bn:nat -> R) (l1 l2:R), Un_cv An l1 -> Un_cv Bn l2 -> Un_cv (fun i:nat => An i - Bn i) (l1 - l2).",
            "VernacStartTheoremProof",
            "f55a155ad5ba63c5303dc009c5b58f0e868708da"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "replace (fun i:nat => An i - Bn i) with (fun i:nat => An i + opp_seq Bn i).",
            "VernacExtend",
            "6419d4be2da0190b7c54874d96f959a928ad5ad6"
        ],
        [
            "unfold Rminus; apply CV_plus.",
            "VernacExtend",
            "d0f9dcf78100bf3573d125c5b4aa28b996fcb191"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply CV_opp; assumption.",
            "VernacExtend",
            "148523003c42fc4af0b1d8ff04aee5630b9f3c52"
        ],
        [
            "unfold Rminus, opp_seq; reflexivity.",
            "VernacExtend",
            "da1b7268f160a32f0d694093c8e134d7b2093543"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition cv_infty (Un:nat -> R) : Prop := forall M:R, exists N : nat, (forall n:nat, (N <= n)%nat -> M < Un n).",
            "VernacDefinition",
            "8d879e47357a5c9bd1937e26aa9de4079ff200d4"
        ],
        [
            "Lemma cv_infty_cv_R0 : forall Un:nat -> R, (forall n:nat, Un n <> 0) -> cv_infty Un -> Un_cv (fun n:nat => / Un n) 0.",
            "VernacStartTheoremProof",
            "a927954120d2442d6d1932ed2d26b0e7689c5bbe"
        ],
        [
            "unfold cv_infty, Un_cv; unfold R_dist; intros.",
            "VernacExtend",
            "5ac26ef74d8122984f83b5d49155eee056d239da"
        ],
        [
            "elim (H0 (/ eps)); intros N0 H2.",
            "VernacExtend",
            "b37de0cad0d45838596a8385817f9208fc9dca86"
        ],
        [
            "exists N0; intros.",
            "VernacExtend",
            "e5b9decd3fd5f06277bf4eeacb6fae2a2f851d31"
        ],
        [
            "unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; rewrite (Rabs_Rinv _ (H n)).",
            "VernacExtend",
            "3fc57c242ad9916632362f7ae49e1692252df6da"
        ],
        [
            "apply Rmult_lt_reg_l with (Rabs (Un n)).",
            "VernacExtend",
            "87ea0970c83764f8b99a010daa583be02d999549"
        ],
        [
            "apply Rabs_pos_lt; apply H.",
            "VernacExtend",
            "9b9e792fbe22e3bcf0332d49218d1184fd9b1eaf"
        ],
        [
            "rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "2ca74255a63c294f9442d956f32a2e3784636efb"
        ],
        [
            "apply Rmult_lt_reg_l with (/ eps).",
            "VernacExtend",
            "70eb18807f432c0bd78fe4e65e653436828a9971"
        ],
        [
            "apply Rinv_0_lt_compat; assumption.",
            "VernacExtend",
            "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
        ],
        [
            "rewrite Rmult_1_r; rewrite (Rmult_comm (/ eps)); rewrite Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "e02ce435c32348488034fb5ae4776cf797b4cab7"
        ],
        [
            "rewrite Rmult_1_r; apply Rlt_le_trans with (Un n).",
            "VernacExtend",
            "b88bd7cd27f6b1af828daf3cf521dd3236518343"
        ],
        [
            "apply H2; assumption.",
            "VernacExtend",
            "4a9f5fcfe7fc430a6576d9298552b6fe2f8ad298"
        ],
        [
            "apply RRle_abs.",
            "VernacExtend",
            "1333b00626244e19099bec7e0de632062c4070a3"
        ],
        [
            "red; intro; rewrite H4 in H1; elim (Rlt_irrefl _ H1).",
            "VernacExtend",
            "07228b8715a43781703305bc17b8287a9149f6cc"
        ],
        [
            "apply Rabs_no_R0; apply H.",
            "VernacExtend",
            "c0eac17e7cc00315824d854ecf1e419940c43360"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma decreasing_prop : forall (Un:nat -> R) (m n:nat), Un_decreasing Un -> (m <= n)%nat -> Un n <= Un m.",
            "VernacStartTheoremProof",
            "b98f160a4c96b9843e77210bed4bb75c2bfa5df1"
        ],
        [
            "unfold Un_decreasing; intros.",
            "VernacExtend",
            "29275cdb441133f6b54fcb524863ddb111d2bc04"
        ],
        [
            "induction n as [| n Hrecn].",
            "VernacExtend",
            "81d1278a66d994c9ef1229ce58d1d47680f3003e"
        ],
        [
            "induction m as [| m Hrecm].",
            "VernacExtend",
            "93d2b60c268fff5d958c27bdb803738ea66bba5b"
        ],
        [
            "right; reflexivity.",
            "VernacExtend",
            "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
        ],
        [
            "elim (le_Sn_O _ H0).",
            "VernacExtend",
            "912cb990a9402661103be256edde82bfaccb25c8"
        ],
        [
            "cut ((m <= n)%nat \\/ m = S n).",
            "VernacExtend",
            "ec696106dd8157f0d9e3657ec92e389aac22ff8d"
        ],
        [
            "intro; elim H1; intro.",
            "VernacExtend",
            "1301c759b4c493230f305c8c6fd6d684c10b8bbc"
        ],
        [
            "apply Rle_trans with (Un n).",
            "VernacExtend",
            "c7389fcabe950a23c5f0aa976182376c7f262216"
        ],
        [
            "apply H.",
            "VernacExtend",
            "4b47b71ad0f800d57cbdc591d68949e07decb540"
        ],
        [
            "apply Hrecn; assumption.",
            "VernacExtend",
            "09c4bfc615059e1cf9b030ea0c6389838481a775"
        ],
        [
            "rewrite H2; right; reflexivity.",
            "VernacExtend",
            "03b324cc95cb472cd1139b2810eb3aed0e88d18b"
        ],
        [
            "inversion H0; [ right; reflexivity | left; assumption ].",
            "VernacExtend",
            "e0ecfe20d3d42c9c578702bb744938f98dc58e2b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma cv_speed_pow_fact : forall x:R, Un_cv (fun n:nat => x ^ n / INR (fact n)) 0.",
            "VernacStartTheoremProof",
            "e4507b60a871f0a59da9343cfea7ca8d113de701"
        ],
        [
            "intro; cut (Un_cv (fun n:nat => Rabs x ^ n / INR (fact n)) 0 -> Un_cv (fun n:nat => x ^ n / INR (fact n)) 0).",
            "VernacExtend",
            "b0964978d86f018abe69a179cbca5f89decfbbb1"
        ],
        [
            "intro; apply H.",
            "VernacExtend",
            "2155aadd67abfad07bb52771af5eefbf7e2e6097"
        ],
        [
            "unfold Un_cv; unfold R_dist; intros; case (Req_dec x 0); intro.",
            "VernacExtend",
            "ccdd20dee1ea8ec563337a80078f920459166e65"
        ],
        [
            "exists 1%nat; intros.",
            "VernacExtend",
            "58edafff17b9668bf11ca27a9b37525cb250e4b8"
        ],
        [
            "rewrite H1; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; rewrite Rabs_R0; rewrite pow_ne_zero; [ unfold Rdiv; rewrite Rmult_0_l; rewrite Rabs_R0; assumption | red; intro; rewrite H3 in H2; elim (le_Sn_n _ H2) ].",
            "VernacExtend",
            "51078eedb5f66b57c1428f2ce0fd7429ed561a6e"
        ],
        [
            "assert (H2 := Rabs_pos_lt x H1); set (M := up (Rabs x)); cut (0 <= M)%Z.",
            "VernacExtend",
            "ac97dec74fd75d305136e1b607e4de124b0f761a"
        ],
        [
            "intro; elim (IZN M H3); intros M_nat H4.",
            "VernacExtend",
            "88e9b06ca237cf5bc9b6effd5300004bfa6149ef"
        ],
        [
            "set (Un := fun n:nat => Rabs x ^ (M_nat + n) / INR (fact (M_nat + n))).",
            "VernacExtend",
            "cb9584293cbe1be5f0a8ac513a22eb3d9251825b"
        ],
        [
            "cut (Un_cv Un 0); unfold Un_cv; unfold R_dist; intros.",
            "VernacExtend",
            "27048a7db0ddcd6d67177cb8aa88e8b196254e79"
        ],
        [
            "elim (H5 eps H0); intros N H6.",
            "VernacExtend",
            "ccbe781a586344cb0866304c0121e57d8822ece6"
        ],
        [
            "exists (M_nat + N)%nat; intros; cut (exists p : nat, (p >= N)%nat /\\ n = (M_nat + p)%nat).",
            "VernacExtend",
            "7b116214bd388b5b56a5d451cb0ddcb73fe6ca4b"
        ],
        [
            "intro; elim H8; intros p H9.",
            "VernacExtend",
            "c48009b29f3e645ada202884e4258302b73ead54"
        ],
        [
            "elim H9; intros; rewrite H11; unfold Un in H6; apply H6; assumption.",
            "VernacExtend",
            "9f3ea72ebfdda9dc8a21efa08c415374e6dc090d"
        ],
        [
            "exists (n - M_nat)%nat.",
            "VernacExtend",
            "ad26e3c53ba53e1518aca222ff5b00d419aebd44"
        ],
        [
            "split.",
            "VernacExtend",
            "55abc140132bd88981001ac656020469a8d503eb"
        ],
        [
            "unfold ge; apply (fun p n m:nat => plus_le_reg_l n m p) with M_nat; rewrite <- le_plus_minus.",
            "VernacExtend",
            "bf6ac7cdd5aedbff1bec3038f6fd606468169497"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply le_trans with (M_nat + N)%nat.",
            "VernacExtend",
            "60f6b60a95eb55f920221909e5c1688374d71e86"
        ],
        [
            "apply le_plus_l.",
            "VernacExtend",
            "30f3305f62c97c24af24578d88eaa888a0053ec1"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply le_plus_minus; apply le_trans with (M_nat + N)%nat; [ apply le_plus_l | assumption ].",
            "VernacExtend",
            "76f8e62177f9e8caa3976554c5419dee705ff7d4"
        ],
        [
            "set (Vn := fun n:nat => Rabs x * (Un 0%nat / INR (S n))).",
            "VernacExtend",
            "743e23dcb9d92d58ea793ddfd18a8f1579b4fdfc"
        ],
        [
            "cut (1 <= M_nat)%nat.",
            "VernacExtend",
            "958943c52a2b0215f3c29b573eb3071b5d0cd528"
        ],
        [
            "intro; cut (forall n:nat, 0 < Un n).",
            "VernacExtend",
            "b45f521bf8190dbafae81b0f702b2d9338601ee9"
        ],
        [
            "intro; cut (Un_decreasing Un).",
            "VernacExtend",
            "8a21ba7655f0aebfdd97ad6d6a594cf075cd9c4c"
        ],
        [
            "intro; cut (forall n:nat, Un (S n) <= Vn n).",
            "VernacExtend",
            "33b1a0160038d37bbd82d9efbdf55750b4e068fe"
        ],
        [
            "intro; cut (Un_cv Vn 0).",
            "VernacExtend",
            "7124bcb98ab6bcc0874a68c883c73dab0936ad3c"
        ],
        [
            "unfold Un_cv; unfold R_dist; intros.",
            "VernacExtend",
            "add26482ec443227632a57519752bde439308595"
        ],
        [
            "elim (H10 eps0 H5); intros N1 H11.",
            "VernacExtend",
            "aa61217828701e4bc84b7e98bd275c8a039468f3"
        ],
        [
            "exists (S N1); intros.",
            "VernacExtend",
            "98ed3d41e0e63de246c91d7dba62b8cf65deb727"
        ],
        [
            "cut (forall n:nat, 0 < Vn n).",
            "VernacExtend",
            "970d4dc9b851af8880a8a5a9291c519e4b1c80f4"
        ],
        [
            "intro; apply Rle_lt_trans with (Rabs (Vn (pred n) - 0)).",
            "VernacExtend",
            "bc3241bd97d9123ca9a857259eff9812340e7f25"
        ],
        [
            "repeat rewrite Rabs_right.",
            "VernacExtend",
            "5107c29a40d66107cd65c8b15750ff5d33d00b0a"
        ],
        [
            "unfold Rminus; rewrite Ropp_0; do 2 rewrite Rplus_0_r; replace n with (S (pred n)).",
            "VernacExtend",
            "acfee042d2181581a9465fa535cf0ecd22d69fbf"
        ],
        [
            "apply H9.",
            "VernacExtend",
            "d0479838914cfca7017024564d1663cd6466cb01"
        ],
        [
            "inversion H12; simpl; reflexivity.",
            "VernacExtend",
            "5d0ac5b78fdfdf318aedaef08451f1708f73a999"
        ],
        [
            "apply Rle_ge; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; left; apply H13.",
            "VernacExtend",
            "f1e2c12d655bc4f25fb35c95c0dfc0f857ea2c61"
        ],
        [
            "apply Rle_ge; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; left; apply H7.",
            "VernacExtend",
            "5b61105d0f8c44280583c39e74e5c5af0350e38f"
        ],
        [
            "apply H11; unfold ge; apply le_S_n; replace (S (pred n)) with n; [ unfold ge in H12; exact H12 | inversion H12; simpl; reflexivity ].",
            "VernacExtend",
            "284fd968f313f20a6091d0334f879532c584558e"
        ],
        [
            "intro; apply Rlt_le_trans with (Un (S n0)); [ apply H7 | apply H9 ].",
            "VernacExtend",
            "9e508fc336d0257df8186c53a0fa544ed9770992"
        ],
        [
            "cut (cv_infty (fun n:nat => INR (S n))).",
            "VernacExtend",
            "dfdd3d0d73af9a5e24b6518aa15e2ec76f64d957"
        ],
        [
            "intro; cut (Un_cv (fun n:nat => / INR (S n)) 0).",
            "VernacExtend",
            "723e713ea7ba27f9fd5a32c4356ce127b8327773"
        ],
        [
            "unfold Un_cv, R_dist; intros; unfold Vn.",
            "VernacExtend",
            "139b0869eaa6db9b67aa7d3f9374626ebcd9285e"
        ],
        [
            "cut (0 < eps1 / (Rabs x * Un 0%nat)).",
            "VernacExtend",
            "d0ad869974ea3f079298b5b14d4a10ed17c39598"
        ],
        [
            "intro; elim (H11 _ H13); intros N H14.",
            "VernacExtend",
            "ac0b15c11ced55505a3436239fa0a8b69757c270"
        ],
        [
            "exists N; intros; replace (Rabs x * (Un 0%nat / INR (S n)) - 0) with (Rabs x * Un 0%nat * (/ INR (S n) - 0)); [ idtac | unfold Rdiv; ring ].",
            "VernacExtend",
            "a05b72d20a54a8543c5151741065af251f4133cb"
        ],
        [
            "rewrite Rabs_mult; apply Rmult_lt_reg_l with (/ Rabs (Rabs x * Un 0%nat)).",
            "VernacExtend",
            "c79f6beff11f8af964ee2d9cdae962299e54e862"
        ],
        [
            "apply Rinv_0_lt_compat; apply Rabs_pos_lt.",
            "VernacExtend",
            "6f1b4f322e563834885ccb901ce5726dcbee2da5"
        ],
        [
            "apply prod_neq_R0.",
            "VernacExtend",
            "4e401b99cc3c24b61ca502aa7107071c427501ea"
        ],
        [
            "apply Rabs_no_R0; assumption.",
            "VernacExtend",
            "919603fae9f5552a2987bbb604439a06966af0d9"
        ],
        [
            "assert (H16 := H7 0%nat); red; intro; rewrite H17 in H16; elim (Rlt_irrefl _ H16).",
            "VernacExtend",
            "acf3adc381c32222fe788b15e6b3a008e3f4c606"
        ],
        [
            "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
            "VernacExtend",
            "eccb067dc9e836ad48bf16c61cd308004f5d6712"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "replace (/ Rabs (Rabs x * Un 0%nat) * eps1) with (eps1 / (Rabs x * Un 0%nat)).",
            "VernacExtend",
            "a2e03ac7defb63ddbba9633ce7bf174091f7553e"
        ],
        [
            "apply H14; assumption.",
            "VernacExtend",
            "338d456a5dab0f1895bf23ff4f31980f32a74fc3"
        ],
        [
            "unfold Rdiv; rewrite (Rabs_right (Rabs x * Un 0%nat)).",
            "VernacExtend",
            "4cfc054daeb044a05b4d9a419f53bfd6c4054519"
        ],
        [
            "apply Rmult_comm.",
            "VernacExtend",
            "f6a795952024dfb6a8db9b1b3050b14eb7f075aa"
        ],
        [
            "apply Rle_ge; apply Rmult_le_pos.",
            "VernacExtend",
            "7d007ccbe591f3ffd6982f0d57bed1df4ebf343e"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "left; apply H7.",
            "VernacExtend",
            "9c9567153cd60ec6528d356fca25028c4bf9101d"
        ],
        [
            "apply Rabs_no_R0.",
            "VernacExtend",
            "8d37b098d9cb0f050cfd8b29c49d318c2b960566"
        ],
        [
            "apply prod_neq_R0; [ apply Rabs_no_R0; assumption | assert (H16 := H7 0%nat); red; intro; rewrite H17 in H16; elim (Rlt_irrefl _ H16) ].",
            "VernacExtend",
            "0fca49fa3d9bcc9d63514a6fe8fa173744da1e21"
        ],
        [
            "unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7122edbd68559f255bfed03dc640472ed14eb4ef"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "apply Rinv_0_lt_compat; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "82903105628960b0c43643a9b600deba7908cccc"
        ],
        [
            "apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "1143a29168ffe77f62e90c548869eca12a54b7db"
        ],
        [
            "apply H7.",
            "VernacExtend",
            "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
        ],
        [
            "apply (cv_infty_cv_R0 (fun n:nat => INR (S n))).",
            "VernacExtend",
            "1581ddd541ab6786ea2d906ce8563793c78ba007"
        ],
        [
            "intro; apply not_O_INR; discriminate.",
            "VernacExtend",
            "26d7e939e984528be20a8deab4078fc7c987fab6"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "unfold cv_infty; intro; destruct (total_order_T M0 0) as [[Hlt|Heq]|Hgt].",
            "VernacExtend",
            "6620223b4cfb5a0024cea272437edde34ad8cf9d"
        ],
        [
            "exists 0%nat; intros.",
            "VernacExtend",
            "9f406775453fa10dd464f05a32d849b36e740518"
        ],
        [
            "apply Rlt_trans with 0; [ assumption | apply lt_INR_0; apply lt_O_Sn ].",
            "VernacExtend",
            "cf32f5abbec2b0e7e08605c29f1a9c1b19e5ad07"
        ],
        [
            "exists 0%nat; intros; rewrite Heq; apply lt_INR_0; apply lt_O_Sn.",
            "VernacExtend",
            "5dbd86f76d1c2af866f46c4697c05b9b75afc061"
        ],
        [
            "set (M0_z := up M0).",
            "VernacExtend",
            "7b99833d6e2094d032fda8a73e9daf39e06ba0ed"
        ],
        [
            "assert (H10 := archimed M0).",
            "VernacExtend",
            "ea643657ab5f4696b451fedd981796c443d85630"
        ],
        [
            "cut (0 <= M0_z)%Z.",
            "VernacExtend",
            "394ef99822ebe8218cdc805b1803baf7628e3190"
        ],
        [
            "intro; elim (IZN _ H11); intros M0_nat H12.",
            "VernacExtend",
            "9d7cfa0fa89da01ab85bb7e30dac84675e547772"
        ],
        [
            "exists M0_nat; intros.",
            "VernacExtend",
            "bc6834b99d1d9c3fe725eac4dbba8f69010d7ab4"
        ],
        [
            "apply Rlt_le_trans with (IZR M0_z).",
            "VernacExtend",
            "4927b683fe29bdcc1fe3b3129b14c607b952a94a"
        ],
        [
            "elim H10; intros; assumption.",
            "VernacExtend",
            "441b8572d6746494b264263afd889422a8335e89"
        ],
        [
            "rewrite H12; rewrite <- INR_IZR_INZ; apply le_INR.",
            "VernacExtend",
            "ba9d3da23305baf75d40ea9db4e04a578d8b04c1"
        ],
        [
            "apply le_trans with n; [ assumption | apply le_n_Sn ].",
            "VernacExtend",
            "d30aaffc32e15bdf5638b68f3b5ef7b285285534"
        ],
        [
            "apply le_IZR; left; simpl; unfold M0_z; apply Rlt_trans with M0; [ assumption | elim H10; intros; assumption ].",
            "VernacExtend",
            "c51e0361bb0e2e02c6141cd886accd90109439bd"
        ],
        [
            "intro; apply Rle_trans with (Rabs x * Un n * / INR (S n)).",
            "VernacExtend",
            "59c64491f707cc519a283a0dd13fc358d2282c86"
        ],
        [
            "unfold Un; replace (M_nat + S n)%nat with (M_nat + n + 1)%nat.",
            "VernacExtend",
            "0d5eb6c564c2946ff720d0bccb309f05e2b252df"
        ],
        [
            "rewrite pow_add; replace (Rabs x ^ 1) with (Rabs x); [ idtac | simpl; ring ].",
            "VernacExtend",
            "fa74ac8c5c19344798b2ae23a948aa13c15f4e05"
        ],
        [
            "unfold Rdiv; rewrite <- (Rmult_comm (Rabs x)); repeat rewrite Rmult_assoc; repeat apply Rmult_le_compat_l.",
            "VernacExtend",
            "e6765e15e731d1e491db32ed2bedd895e611d657"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "left; apply pow_lt; assumption.",
            "VernacExtend",
            "ee2a78d757c0b0e26dca0d9bbe4a972340951f49"
        ],
        [
            "replace (M_nat + n + 1)%nat with (S (M_nat + n)).",
            "VernacExtend",
            "c45f2b87cca3f6ba2aaf0800b23dd302c451f3fd"
        ],
        [
            "rewrite fact_simpl; rewrite mult_comm; rewrite mult_INR; rewrite Rinv_mult_distr.",
            "VernacExtend",
            "0606791728efbb48ab3da3fe19d80268c84a2c1c"
        ],
        [
            "apply Rmult_le_compat_l.",
            "VernacExtend",
            "509839294acd7016ba82d594bfdb05afe131eed3"
        ],
        [
            "left; apply Rinv_0_lt_compat; apply lt_INR_0; apply neq_O_lt; red; intro; assert (H10 := eq_sym H9); elim (fact_neq_0 _ H10).",
            "VernacExtend",
            "d54d0002365a839e64076b1755b753a31659decf"
        ],
        [
            "left; apply Rinv_lt_contravar.",
            "VernacExtend",
            "b2ddbb9d908d1faa2074899fda8a578947b3bc44"
        ],
        [
            "apply Rmult_lt_0_compat; apply lt_INR_0; apply lt_O_Sn.",
            "VernacExtend",
            "e9b8cd2735fc0a889e8dbb9fbd722ed991d884e8"
        ],
        [
            "apply lt_INR; apply lt_n_S.",
            "VernacExtend",
            "2b89b20d2fc47eb5ec6e796d3f20fe126fc00772"
        ],
        [
            "pattern n at 1; replace n with (0 + n)%nat; [ idtac | reflexivity ].",
            "VernacExtend",
            "d9ecf0b2ed168c6ab64de3af51fc9a022c4966ac"
        ],
        [
            "apply plus_lt_compat_r.",
            "VernacExtend",
            "294b96a25c631b152bb3601a5898aaf9f8651889"
        ],
        [
            "apply lt_le_trans with 1%nat; [ apply lt_O_Sn | assumption ].",
            "VernacExtend",
            "96e5a5f449cae7953a892cd40663623300017d77"
        ],
        [
            "apply INR_fact_neq_0.",
            "VernacExtend",
            "9f4443217b6f3c8f07648392448a37630452a203"
        ],
        [
            "apply not_O_INR; discriminate.",
            "VernacExtend",
            "b0377726251b564451c17d0f089ec6fd746a82be"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "unfold Vn; rewrite Rmult_assoc; unfold Rdiv; rewrite (Rmult_comm (Un 0%nat)); rewrite (Rmult_comm (Un n)).",
            "VernacExtend",
            "294812fd38d12e0220f0235dc25534dbc5076fa0"
        ],
        [
            "repeat apply Rmult_le_compat_l.",
            "VernacExtend",
            "1985cca070eeec482993c5ad5a4655ed2e78bfb7"
        ],
        [
            "apply Rabs_pos.",
            "VernacExtend",
            "8e57e214403458a4dc8dafc960971b86cf3b856d"
        ],
        [
            "left; apply Rinv_0_lt_compat; apply lt_INR_0; apply lt_O_Sn.",
            "VernacExtend",
            "7117f748a26669112ed5e1e738166ad60634e09a"
        ],
        [
            "apply decreasing_prop; [ assumption | apply le_O_n ].",
            "VernacExtend",
            "a9ae1e28fa1ea4a5d7233f5903018eaadb38fe6c"
        ],
        [
            "unfold Un_decreasing; intro; unfold Un.",
            "VernacExtend",
            "93269e42008751cf5d79d4fa7969762bd372161e"
        ],
        [
            "replace (M_nat + S n)%nat with (M_nat + n + 1)%nat.",
            "VernacExtend",
            "4473e7a63a1354e7180d4e5f11cd54409b4cfda7"
        ],
        [
            "rewrite pow_add; unfold Rdiv; rewrite Rmult_assoc; apply Rmult_le_compat_l.",
            "VernacExtend",
            "3e272b6e4d3a6ebc04c6871053378520c5b9bc61"
        ],
        [
            "left; apply pow_lt; assumption.",
            "VernacExtend",
            "ee2a78d757c0b0e26dca0d9bbe4a972340951f49"
        ],
        [
            "replace (Rabs x ^ 1) with (Rabs x); [ idtac | simpl; ring ].",
            "VernacExtend",
            "15f69253a1fe7f6b5fb04a25602052cfef9937dc"
        ],
        [
            "replace (M_nat + n + 1)%nat with (S (M_nat + n)).",
            "VernacExtend",
            "c45f2b87cca3f6ba2aaf0800b23dd302c451f3fd"
        ],
        [
            "apply Rmult_le_reg_l with (INR (fact (S (M_nat + n)))).",
            "VernacExtend",
            "ba24a5ec459f4c3c40d14a82d524be0fd432d06c"
        ],
        [
            "apply lt_INR_0; apply neq_O_lt; red; intro; assert (H9 := eq_sym H8); elim (fact_neq_0 _ H9).",
            "VernacExtend",
            "0fde70b496d2388b37110f72fdc4577fd787a4e6"
        ],
        [
            "rewrite (Rmult_comm (Rabs x)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "b1b28a5ce0911f92d5a7752115a5daffc20ce98f"
        ],
        [
            "rewrite Rmult_1_l.",
            "VernacExtend",
            "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
        ],
        [
            "rewrite fact_simpl; rewrite mult_INR; rewrite Rmult_assoc; rewrite <- Rinv_r_sym.",
            "VernacExtend",
            "94a068c1fd5db483e4a3f68443967739940dbfa9"
        ],
        [
            "rewrite Rmult_1_r; apply Rle_trans with (INR M_nat).",
            "VernacExtend",
            "70ba9d1fae03af06e4d84a7bb398fe2e2a6b53e1"
        ],
        [
            "left; rewrite INR_IZR_INZ.",
            "VernacExtend",
            "20628c129cde27215b1b3d2e7ed21bf6cb8fc504"
        ],
        [
            "rewrite <- H4; assert (H8 := archimed (Rabs x)); elim H8; intros; assumption.",
            "VernacExtend",
            "569b26fffbbb646163721453b92f0d9ffe5c3c4e"
        ],
        [
            "apply le_INR; omega.",
            "VernacExtend",
            "fae807d5a7ce9f4f75663f0eb8a547d3d01c722a"
        ],
        [
            "apply INR_fact_neq_0.",
            "VernacExtend",
            "9f4443217b6f3c8f07648392448a37630452a203"
        ],
        [
            "apply INR_fact_neq_0.",
            "VernacExtend",
            "9f4443217b6f3c8f07648392448a37630452a203"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "ring.",
            "VernacExtend",
            "baadd9fc4c175005af409bb466fcea9fab25b4e6"
        ],
        [
            "intro; unfold Un; unfold Rdiv; apply Rmult_lt_0_compat.",
            "VernacExtend",
            "7e73a69754d69ea105353badd05d6a0c2071ce1a"
        ],
        [
            "apply pow_lt; assumption.",
            "VernacExtend",
            "5f7321ecf7e8d07f288f83dc467e0fce65f0a40b"
        ],
        [
            "apply Rinv_0_lt_compat; apply lt_INR_0; apply neq_O_lt; red; intro; assert (H8 := eq_sym H7); elim (fact_neq_0 _ H8).",
            "VernacExtend",
            "3e75c03f338adb583620f2311f9f076eb1cf12c1"
        ],
        [
            "clear Un Vn; apply INR_le; simpl.",
            "VernacExtend",
            "971f809933079bd275c47e3b1d847562541f86e6"
        ],
        [
            "induction M_nat as [| M_nat HrecM_nat].",
            "VernacExtend",
            "66e4a128b24a1f4dd93dfca7e36b8bd6a0a602d3"
        ],
        [
            "assert (H6 := archimed (Rabs x)); fold M in H6; elim H6; intros.",
            "VernacExtend",
            "8cdd2e6d8298a2f2c2cdf4ff268dcfb2b87a174d"
        ],
        [
            "rewrite H4 in H7; rewrite <- INR_IZR_INZ in H7.",
            "VernacExtend",
            "b827bd059d3a881268fbdd6d26d65e90edd1402d"
        ],
        [
            "simpl in H7; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H2 H7)).",
            "VernacExtend",
            "55f8c0330619a996bf1b4b563d8b102c59520820"
        ],
        [
            "apply (le_INR 1); apply le_n_S; apply le_O_n.",
            "VernacExtend",
            "e44e0bb62b2454a6fa68f8358daec7a640a0a457"
        ],
        [
            "apply le_IZR; simpl; left; apply Rlt_trans with (Rabs x).",
            "VernacExtend",
            "ceae859ec607c43f86b78ec48f980a18be00a136"
        ],
        [
            "assumption.",
            "VernacExtend",
            "41f0308313ff87e6ab2782f90d6021ec4b55d932"
        ],
        [
            "elim (archimed (Rabs x)); intros; assumption.",
            "VernacExtend",
            "41319d16c690d0d762f7098dcd707c8b628ba8bc"
        ],
        [
            "unfold Un_cv; unfold R_dist; intros; elim (H eps H0); intros.",
            "VernacExtend",
            "d7a54a5606f4526c3ca5d571e8a8ffa4b86059da"
        ],
        [
            "exists x0; intros; apply Rle_lt_trans with (Rabs (Rabs x ^ n / INR (fact n) - 0)).",
            "VernacExtend",
            "2714da7d9e1764ce401bdc16919c9bf8417c6b00"
        ],
        [
            "unfold Rminus; rewrite Ropp_0; do 2 rewrite Rplus_0_r; rewrite (Rabs_right (Rabs x ^ n / INR (fact n))).",
            "VernacExtend",
            "f06d63e97e8325b0d603ab3f371c8e4977c54094"
        ],
        [
            "unfold Rdiv; rewrite Rabs_mult; rewrite (Rabs_right (/ INR (fact n))).",
            "VernacExtend",
            "007e882ba300bb19441118729ca98baf22c007fe"
        ],
        [
            "rewrite RPow_abs; right; reflexivity.",
            "VernacExtend",
            "e268343f361fbb885441df499d8a1c1fa47738ce"
        ],
        [
            "apply Rle_ge; left; apply Rinv_0_lt_compat; apply lt_INR_0; apply neq_O_lt; red; intro; assert (H4 := eq_sym H3); elim (fact_neq_0 _ H4).",
            "VernacExtend",
            "51f6fc2dc09fc100201afdf4ada32c08c36315d3"
        ],
        [
            "apply Rle_ge; unfold Rdiv; apply Rmult_le_pos.",
            "VernacExtend",
            "7b8055716f7094375c2f1388b0cc102cb268ee7b"
        ],
        [
            "case (Req_dec x 0); intro.",
            "VernacExtend",
            "d007216a2c7cab927c7232c952ce1e1fc525442f"
        ],
        [
            "rewrite H3; rewrite Rabs_R0.",
            "VernacExtend",
            "3acb406e3067cb91fb699154432b70fa000e7c30"
        ],
        [
            "induction n as [| n Hrecn]; [ simpl; left; apply Rlt_0_1 | simpl; rewrite Rmult_0_l; right; reflexivity ].",
            "VernacExtend",
            "913d9d8150e8d7476d06d44d29fa4b2ec5ff6aac"
        ],
        [
            "left; apply pow_lt; apply Rabs_pos_lt; assumption.",
            "VernacExtend",
            "ae242ef2c0466ccaa0a47bc0586ea69445593357"
        ],
        [
            "left; apply Rinv_0_lt_compat; apply lt_INR_0; apply neq_O_lt; red; intro; assert (H4 := eq_sym H3); elim (fact_neq_0 _ H4).",
            "VernacExtend",
            "964607c8b232135bf8c46aa05630f8decafc46ba"
        ],
        [
            "apply H1; assumption.",
            "VernacExtend",
            "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "growing_cv",
            "line_nb": 10,
            "steps": [
                {
                    "command": [
                        "intros Un Hug Heub.",
                        "VernacExtend",
                        "021cfad0ae0db7d81bd0dbc64590d488fb97693c"
                    ]
                },
                {
                    "command": [
                        "exists (proj1_sig (completeness (EUn Un) Heub (EUn_noempty Un))).",
                        "VernacExtend",
                        "e8f5a695e7a5022fa8be19fd46fc2167f4e1b693"
                    ]
                },
                {
                    "command": [
                        "destruct (completeness _ Heub (EUn_noempty Un)) as (l, H).",
                        "VernacExtend",
                        "ef0edfc5136ef474458ef5e0b11121815f297455"
                    ]
                },
                {
                    "command": [
                        "now apply Un_cv_crit_lub.",
                        "VernacExtend",
                        "0d547fc2b02364cc6e1352ff6e7be089c0020d1d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decreasing_growing",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold Un_growing, opp_seq, Un_decreasing.",
                        "VernacExtend",
                        "56c8dce057774c75fb460303c04d4bdd240a8736"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decreasing_cv",
            "line_nb": 23,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cut ({ l:R | Un_cv (opp_seq Un) l } -> { l:R | Un_cv Un l }).",
                        "VernacExtend",
                        "114abee64fc32dae4f809baa7f8ad2974e30c4f3"
                    ]
                },
                {
                    "command": [
                        "intro X.",
                        "VernacExtend",
                        "c93bbb51ef8637991b4239865469e36d8e520337"
                    ]
                },
                {
                    "command": [
                        "apply X.",
                        "VernacExtend",
                        "1a06263bf241d2c272a11be0f0a1522334cc2c93"
                    ]
                },
                {
                    "command": [
                        "apply growing_cv.",
                        "VernacExtend",
                        "e20e5f8467bce8c3a237abdf7a77cf38c2d1f804"
                    ]
                },
                {
                    "command": [
                        "apply decreasing_growing; assumption.",
                        "VernacExtend",
                        "013a32a9f5767489dc7065830877ca67dd024167"
                    ]
                },
                {
                    "command": [
                        "exact H0.",
                        "VernacExtend",
                        "3920fece303e3c4728f9cdc71daff99239237dbd"
                    ]
                },
                {
                    "command": [
                        "intros (x,p).",
                        "VernacExtend",
                        "1cd393355f801023c209f47ad1e2e37516ca0eec"
                    ]
                },
                {
                    "command": [
                        "exists (- x).",
                        "VernacExtend",
                        "08defb1588400a64e2b32a242cb38df0df66eff8"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv in p.",
                        "VernacExtend",
                        "47320c7f1faccac57f0e3b67dc659e075d93d422"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist in p.",
                        "VernacExtend",
                        "e1be244d44157c00883934b99ee4e235f4a6d479"
                    ]
                },
                {
                    "command": [
                        "unfold opp_seq in p.",
                        "VernacExtend",
                        "6deee48a6b6cd6edb21e5d0047b27ef8b95a4924"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv.",
                        "VernacExtend",
                        "92546babd2031fb5ae4875e88a9d324f3c5bb33e"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist.",
                        "VernacExtend",
                        "9d14879a55d02ad54565968e31b64da7aeb66d97"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (p eps H1); intros.",
                        "VernacExtend",
                        "716498646f3fe2d69518516ad537ce1adf67939f"
                    ]
                },
                {
                    "command": [
                        "exists x0; intros.",
                        "VernacExtend",
                        "5bc9f78cbd3bd0b9d5ad70bca80ff875ab1656fa"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := H2 n H3).",
                        "VernacExtend",
                        "e2a04925a6423878607f8caff9237ee9c4cd80a4"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp.",
                        "VernacExtend",
                        "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
                    ]
                },
                {
                    "command": [
                        "replace (- (Un n - - x)) with (- Un n - x); [ assumption | ring ].",
                        "VernacExtend",
                        "2e85aa9c4882aad334302cef10e81fc56ac4e011"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ub_to_lub",
            "line_nb": 45,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold has_ub in H.",
                        "VernacExtend",
                        "e91b134b2e0daa93c37697a708c19a1dd3cd97f3"
                    ]
                },
                {
                    "command": [
                        "apply completeness.",
                        "VernacExtend",
                        "cacd984bc8302ffdd56c6fac7b444ece394f062c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "exists (Un 0%nat).",
                        "VernacExtend",
                        "23dc8b060fa42f8475c8a6fca6767103b2f4581f"
                    ]
                },
                {
                    "command": [
                        "unfold EUn.",
                        "VernacExtend",
                        "d898172fd612f08cdab9745ef17cc1a7a1b8945a"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat; reflexivity.",
                        "VernacExtend",
                        "fe3e4a322fd724f6b5422383151c7be1ffa0f073"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "lb_to_glb",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros; unfold has_lb in H.",
                        "VernacExtend",
                        "534181af3303069943534f42381d0aeb65488c50"
                    ]
                },
                {
                    "command": [
                        "apply completeness.",
                        "VernacExtend",
                        "cacd984bc8302ffdd56c6fac7b444ece394f062c"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "exists (- Un 0%nat).",
                        "VernacExtend",
                        "b8d5b37614d6e9da448a267b3bc72a23c737fe08"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat.",
                        "VernacExtend",
                        "ecf2e229db1efa1d9dec061865f354468879442a"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maj_ss",
            "line_nb": 68,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold has_ub in H.",
                        "VernacExtend",
                        "e91b134b2e0daa93c37697a708c19a1dd3cd97f3"
                    ]
                },
                {
                    "command": [
                        "unfold bound in H.",
                        "VernacExtend",
                        "fc50eba0ba2fc37c3eeeb74ec06afe738902ad41"
                    ]
                },
                {
                    "command": [
                        "elim H; intros.",
                        "VernacExtend",
                        "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H0.",
                        "VernacExtend",
                        "c85637e21ec39634416e90dcfca89e950c787bb0"
                    ]
                },
                {
                    "command": [
                        "unfold has_ub.",
                        "VernacExtend",
                        "ceb32c40b15ce73c7b54080c037d097378cdbabb"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound.",
                        "VernacExtend",
                        "8f2f4c45e0301f8635f36bde586c5301c04c8245"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "exists (k + x1)%nat; assumption.",
                        "VernacExtend",
                        "b8786d149ff4363c9fc513ed4b81ed9c5e84b309"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min_ss",
            "line_nb": 82,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold has_lb in H.",
                        "VernacExtend",
                        "467d01713cc775dd9b478f3feaf269ce14d710db"
                    ]
                },
                {
                    "command": [
                        "unfold bound in H.",
                        "VernacExtend",
                        "fc50eba0ba2fc37c3eeeb74ec06afe738902ad41"
                    ]
                },
                {
                    "command": [
                        "elim H; intros.",
                        "VernacExtend",
                        "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H0.",
                        "VernacExtend",
                        "c85637e21ec39634416e90dcfca89e950c787bb0"
                    ]
                },
                {
                    "command": [
                        "unfold has_lb.",
                        "VernacExtend",
                        "0bca23eb1d0714abb7864d93abc374efb6546481"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound.",
                        "VernacExtend",
                        "8f2f4c45e0301f8635f36bde586c5301c04c8245"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "exists (k + x1)%nat; assumption.",
                        "VernacExtend",
                        "b8786d149ff4363c9fc513ed4b81ed9c5e84b309"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Wn_decreasing",
            "line_nb": 100,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Un_decreasing.",
                        "VernacExtend",
                        "69f68a5a934c77be8a4c69b1ddfd7c2b437ccda6"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold sequence_ub.",
                        "VernacExtend",
                        "b2cf6db09e95aff2edf40ba6f3423f991186f4ad"
                    ]
                },
                {
                    "command": [
                        "pose proof (ub_to_lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr)) as (x,(H1,H2)).",
                        "VernacExtend",
                        "0fb327c82ad26751b0791aaf1a2cd313b05c81a3"
                    ]
                },
                {
                    "command": [
                        "pose proof (ub_to_lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr)) as (x0,(H3,H4)).",
                        "VernacExtend",
                        "40aa7e1071c0bff9399b3197ed3c1ee64e7fa2ed"
                    ]
                },
                {
                    "command": [
                        "cut (lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr) = x); [ intro Maj1; rewrite Maj1 | idtac ].",
                        "VernacExtend",
                        "083d8f99a4da12da9165717c2822f5aa6ec4dedf"
                    ]
                },
                {
                    "command": [
                        "cut (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr) = x0); [ intro Maj2; rewrite Maj2 | idtac ].",
                        "VernacExtend",
                        "0bec459a6a69fc6696215394f6d2286a7e649030"
                    ]
                },
                {
                    "command": [
                        "apply H2.",
                        "VernacExtend",
                        "17101978526a14fb5ad41816224a2fc35cc3d256"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound.",
                        "VernacExtend",
                        "8f2f4c45e0301f8635f36bde586c5301c04c8245"
                    ]
                },
                {
                    "command": [
                        "intros x1 H5.",
                        "VernacExtend",
                        "1311efe590e4204a5ac5793113bca6ddf51df9fb"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H3.",
                        "VernacExtend",
                        "f8a25fdcf5a32770dc72fc6db00802d1fbe377fd"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros.",
                        "VernacExtend",
                        "f57064d2371d46c709230830a90015bd814391ac"
                    ]
                },
                {
                    "command": [
                        "exists (1 + x2)%nat.",
                        "VernacExtend",
                        "d95bf28d6aaede48c376c9c52709ddb57264d66a"
                    ]
                },
                {
                    "command": [
                        "replace (n + (1 + x2))%nat with (S n + x2)%nat.",
                        "VernacExtend",
                        "16f6628344915775f24a4b1899c7ffa11b2d3fa3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (S n) with (1 + n)%nat; [ ring | ring ].",
                        "VernacExtend",
                        "2ce6c708b3a2c655bd557a99df53a76c97053bee"
                    ]
                },
                {
                    "command": [
                        "cut (is_lub (EUn (fun k:nat => Un (n + k)%nat)) (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr))).",
                        "VernacExtend",
                        "308698d8bd1f7c662c17487865bcd2023250c083"
                    ]
                },
                {
                    "command": [
                        "intros (H5,H6).",
                        "VernacExtend",
                        "2e74b213136a21d4628359fcd0a8fbd5b4294ab6"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := H6 x0 H3).",
                        "VernacExtend",
                        "8f8b5a04f26dd1778f884c2bd9cbfae9a3771019"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := H4 (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr)) H5).",
                        "VernacExtend",
                        "4e4395c77280f11d8c08ffc8b04ba2468af69225"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "unfold lub.",
                        "VernacExtend",
                        "93825f408aac22eaa724a930ee62b1a275eb0781"
                    ]
                },
                {
                    "command": [
                        "case (ub_to_lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr)).",
                        "VernacExtend",
                        "704a66d9fc9fe43bc8fe68fb1395ed1d8c0e8675"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "cut (is_lub (EUn (fun k:nat => Un (S n + k)%nat)) (lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr))).",
                        "VernacExtend",
                        "10072a7c772b1c8634903c2b9b803d2ef47f6c21"
                    ]
                },
                {
                    "command": [
                        "intros (H5,H6).",
                        "VernacExtend",
                        "2e74b213136a21d4628359fcd0a8fbd5b4294ab6"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := H6 x H1).",
                        "VernacExtend",
                        "7ef4de83ad8235dae33a5395c3357b114d9c50d1"
                    ]
                },
                {
                    "command": [
                        "assert (H8 := H2 (lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr)) H5).",
                        "VernacExtend",
                        "4ef716b5e30436e84e3f27fc463735be646d34e5"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "unfold lub.",
                        "VernacExtend",
                        "93825f408aac22eaa724a930ee62b1a275eb0781"
                    ]
                },
                {
                    "command": [
                        "case (ub_to_lub (fun k:nat => Un (S n + k)%nat) (maj_ss Un (S n) pr)).",
                        "VernacExtend",
                        "84182ec1c1de2d4b5871375b11844d154b70c96a"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Vn_growing",
            "line_nb": 136,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold Un_growing.",
                        "VernacExtend",
                        "bb82a49c6eee9f82a3c0d5b17d8a842d5e9abb49"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold sequence_lb.",
                        "VernacExtend",
                        "10c7ea82e8b9cf5323804d58c57c805538d709c2"
                    ]
                },
                {
                    "command": [
                        "assert (H := lb_to_glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr)).",
                        "VernacExtend",
                        "10c274c1d3dfc0550b0e424ae5d2a0ec62c8f9bf"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := lb_to_glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr)).",
                        "VernacExtend",
                        "641d97a4bda8240f7acb329db5ae1e1a4d084c51"
                    ]
                },
                {
                    "command": [
                        "elim H; intros.",
                        "VernacExtend",
                        "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros.",
                        "VernacExtend",
                        "6b83f392a470a8cdaa118e532bc445a009dec854"
                    ]
                },
                {
                    "command": [
                        "cut (glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr) = - x); [ intro Maj1; rewrite Maj1 | idtac ].",
                        "VernacExtend",
                        "76bf0079f71eea3615c5278aaf00e751c46a7759"
                    ]
                },
                {
                    "command": [
                        "cut (glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr) = - x0); [ intro Maj2; rewrite Maj2 | idtac ].",
                        "VernacExtend",
                        "78889e7346972f5312012b8e52d45313cdd17487"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p.",
                        "VernacExtend",
                        "39affe05b156d77aec317c7c8792e9640bce8ce0"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p0.",
                        "VernacExtend",
                        "acd37644f06054103dc2c12b736bd4ef4527dd45"
                    ]
                },
                {
                    "command": [
                        "elim p; intros.",
                        "VernacExtend",
                        "5c01b4e2930aaa38b242bfcbf978f298ab53ee9b"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "apply H2.",
                        "VernacExtend",
                        "17101978526a14fb5ad41816224a2fc35cc3d256"
                    ]
                },
                {
                    "command": [
                        "elim p0; intros.",
                        "VernacExtend",
                        "4bf9dcb131eba35336fc268e868940350b9b3ec6"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound.",
                        "VernacExtend",
                        "8f2f4c45e0301f8635f36bde586c5301c04c8245"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H3.",
                        "VernacExtend",
                        "f8a25fdcf5a32770dc72fc6db00802d1fbe377fd"
                    ]
                },
                {
                    "command": [
                        "apply H3.",
                        "VernacExtend",
                        "fa1602da0db2a348e9fad204067364eaad2a120f"
                    ]
                },
                {
                    "command": [
                        "elim H5; intros.",
                        "VernacExtend",
                        "f57064d2371d46c709230830a90015bd814391ac"
                    ]
                },
                {
                    "command": [
                        "exists (1 + x2)%nat.",
                        "VernacExtend",
                        "d95bf28d6aaede48c376c9c52709ddb57264d66a"
                    ]
                },
                {
                    "command": [
                        "unfold opp_seq in H6.",
                        "VernacExtend",
                        "dd38a5fb300418da908da39455a718415b41ab87"
                    ]
                },
                {
                    "command": [
                        "unfold opp_seq.",
                        "VernacExtend",
                        "71519d198ca4edf2d134115411d2ee1870568a91"
                    ]
                },
                {
                    "command": [
                        "replace (n + (1 + x2))%nat with (S n + x2)%nat.",
                        "VernacExtend",
                        "16f6628344915775f24a4b1899c7ffa11b2d3fa3"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "replace (S n) with (1 + n)%nat; [ ring | ring ].",
                        "VernacExtend",
                        "2ce6c708b3a2c655bd557a99df53a76c97053bee"
                    ]
                },
                {
                    "command": [
                        "cut (is_lub (EUn (opp_seq (fun k:nat => Un (n + k)%nat))) (- glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr))).",
                        "VernacExtend",
                        "1f087e76a988ff11c46d0adbc4cdea26f4b92990"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p0; unfold is_lub in H1.",
                        "VernacExtend",
                        "9cdaeabac5cf2b01332a99f6903588fb079429e6"
                    ]
                },
                {
                    "command": [
                        "elim p0; intros; elim H1; intros.",
                        "VernacExtend",
                        "1ac2cad2742e1048bcd91fa01edc0a4fe371d0b6"
                    ]
                },
                {
                    "command": [
                        "assert (H6 := H5 x0 H2).",
                        "VernacExtend",
                        "aa482ac5a12b0189c20b293189844082da9b469a"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := H3 (- glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr)) H4).",
                        "VernacExtend",
                        "3507bcfda2a4c008fd133caddeac5e79ff96a03d"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr))) .",
                        "VernacExtend",
                        "6a382d50407bd5e52e7ac3a7b21667745a63891c"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_eq_compat; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "1691ed2341ca99450698bf16580a7245e85df60c"
                    ]
                },
                {
                    "command": [
                        "unfold glb.",
                        "VernacExtend",
                        "de5d7dc0a2b98cd59f0ad5c868b008125c310a9a"
                    ]
                },
                {
                    "command": [
                        "case (lb_to_glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr)); simpl.",
                        "VernacExtend",
                        "89b4edc3e58f2313da64ab6f8e9665175b8ce592"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite Ropp_involutive.",
                        "VernacExtend",
                        "90813c1175cc14cf28b7f55ddd0cf254a046d5fa"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "cut (is_lub (EUn (opp_seq (fun k:nat => Un (S n + k)%nat))) (- glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr))).",
                        "VernacExtend",
                        "0054dac56d6e120fe5f02e1faf6ee43078f85915"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p; unfold is_lub in H1.",
                        "VernacExtend",
                        "c289b1df36d0f53a180b351d5e435ac063fdd994"
                    ]
                },
                {
                    "command": [
                        "elim p; intros; elim H1; intros.",
                        "VernacExtend",
                        "8a2b8eca0e172d9cc1454151f786edefff287a85"
                    ]
                },
                {
                    "command": [
                        "assert (H6 := H5 x H2).",
                        "VernacExtend",
                        "33b5957dbc21a91a4efc452d1fb4c3bfb20cc2e5"
                    ]
                },
                {
                    "command": [
                        "assert (H7 := H3 (- glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr)) H4).",
                        "VernacExtend",
                        "d1cc5c10fad5e5eee6fcc27ee8751eea3481c92a"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr))) .",
                        "VernacExtend",
                        "5f811fdb0ee05a8f60e2fe7b0fd08d1f21c9740b"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_eq_compat; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "1691ed2341ca99450698bf16580a7245e85df60c"
                    ]
                },
                {
                    "command": [
                        "unfold glb.",
                        "VernacExtend",
                        "de5d7dc0a2b98cd59f0ad5c868b008125c310a9a"
                    ]
                },
                {
                    "command": [
                        "case (lb_to_glb (fun k:nat => Un (S n + k)%nat) (min_ss Un (S n) pr)); simpl.",
                        "VernacExtend",
                        "95c9ebf232d9ebc3a6b4d26ae4af4e8dda6a7d1f"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite Ropp_involutive.",
                        "VernacExtend",
                        "90813c1175cc14cf28b7f55ddd0cf254a046d5fa"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Vn_Un_Wn_order",
            "line_nb": 189,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold sequence_lb.",
                        "VernacExtend",
                        "10c7ea82e8b9cf5323804d58c57c805538d709c2"
                    ]
                },
                {
                    "command": [
                        "cut { l:R | is_lub (EUn (opp_seq (fun i:nat => Un (n + i)%nat))) l }.",
                        "VernacExtend",
                        "1e7217c745b98da568da80aabf22c2a9d4e15bb2"
                    ]
                },
                {
                    "command": [
                        "intro X.",
                        "VernacExtend",
                        "c93bbb51ef8637991b4239865469e36d8e520337"
                    ]
                },
                {
                    "command": [
                        "elim X; intros.",
                        "VernacExtend",
                        "3dbd54ccc1b79786f689975657c25979c4151773"
                    ]
                },
                {
                    "command": [
                        "replace (glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2)) with (- x).",
                        "VernacExtend",
                        "139666acf8c49ba0da6dc76648e2fc80ba4dc829"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p.",
                        "VernacExtend",
                        "39affe05b156d77aec317c7c8792e9640bce8ce0"
                    ]
                },
                {
                    "command": [
                        "elim p; intros.",
                        "VernacExtend",
                        "5c01b4e2930aaa38b242bfcbf978f298ab53ee9b"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H.",
                        "VernacExtend",
                        "a1fa2a2c6131a3684a3cac0d603de13825706b4c"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (Un n)).",
                        "VernacExtend",
                        "6633bd580a18cd2b059efcf99d7126462ec8acbb"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_contravar.",
                        "VernacExtend",
                        "ac8d32b190d111aa8834547674121bcf3bb8a0ed"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat.",
                        "VernacExtend",
                        "ecf2e229db1efa1d9dec061865f354468879442a"
                    ]
                },
                {
                    "command": [
                        "unfold opp_seq.",
                        "VernacExtend",
                        "71519d198ca4edf2d134115411d2ee1870568a91"
                    ]
                },
                {
                    "command": [
                        "replace (n + 0)%nat with n; [ reflexivity | ring ].",
                        "VernacExtend",
                        "da44939d6d6d9840ed605d86ac023fe7f46f48f0"
                    ]
                },
                {
                    "command": [
                        "cut (is_lub (EUn (opp_seq (fun k:nat => Un (n + k)%nat))) (- glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2))).",
                        "VernacExtend",
                        "03b0820df6d88ac021dd93a322ac8d8bddfa68ec"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p; unfold is_lub in H.",
                        "VernacExtend",
                        "928c8272de25192842bdf37fcfbb7f9fce662fcb"
                    ]
                },
                {
                    "command": [
                        "elim p; intros; elim H; intros.",
                        "VernacExtend",
                        "6ceb7573363f4daa5135df10f342ed2be8870fc9"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := H3 x H0).",
                        "VernacExtend",
                        "3764a9b055f6426a43049bf5aafadf33944bc40f"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := H1 (- glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2)) H2).",
                        "VernacExtend",
                        "b56abe9ab32570ac5620d6029f4674a7fb27f9cd"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (Ropp_involutive (glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2))) .",
                        "VernacExtend",
                        "c6c229e681de5e8440f51bb96945268160728be9"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_eq_compat; apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "1691ed2341ca99450698bf16580a7245e85df60c"
                    ]
                },
                {
                    "command": [
                        "unfold glb.",
                        "VernacExtend",
                        "de5d7dc0a2b98cd59f0ad5c868b008125c310a9a"
                    ]
                },
                {
                    "command": [
                        "case (lb_to_glb (fun k:nat => Un (n + k)%nat) (min_ss Un n pr2)); simpl.",
                        "VernacExtend",
                        "0cbc5491700c068b4260b7b770b0eedb25aae4ea"
                    ]
                },
                {
                    "command": [
                        "intro; rewrite Ropp_involutive.",
                        "VernacExtend",
                        "90813c1175cc14cf28b7f55ddd0cf254a046d5fa"
                    ]
                },
                {
                    "command": [
                        "trivial.",
                        "VernacExtend",
                        "6704630005ea37c1f66f817f0d3cb83967ca08c5"
                    ]
                },
                {
                    "command": [
                        "apply lb_to_glb.",
                        "VernacExtend",
                        "a054ffe0fa6f01544cc8559e3884bc0650a06ebf"
                    ]
                },
                {
                    "command": [
                        "apply min_ss; assumption.",
                        "VernacExtend",
                        "9eda63cec05c102b65b3dd6da22aa3a110848743"
                    ]
                },
                {
                    "command": [
                        "unfold sequence_ub.",
                        "VernacExtend",
                        "b2cf6db09e95aff2edf40ba6f3423f991186f4ad"
                    ]
                },
                {
                    "command": [
                        "cut { l:R | is_lub (EUn (fun i:nat => Un (n + i)%nat)) l }.",
                        "VernacExtend",
                        "25efc5f5e7a5476ecdf26ac134069122272f2b6b"
                    ]
                },
                {
                    "command": [
                        "intro X.",
                        "VernacExtend",
                        "c93bbb51ef8637991b4239865469e36d8e520337"
                    ]
                },
                {
                    "command": [
                        "elim X; intros.",
                        "VernacExtend",
                        "3dbd54ccc1b79786f689975657c25979c4151773"
                    ]
                },
                {
                    "command": [
                        "replace (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr1)) with x.",
                        "VernacExtend",
                        "38441374c4b739bdc7e001680e4a13660de9c7c6"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p.",
                        "VernacExtend",
                        "39affe05b156d77aec317c7c8792e9640bce8ce0"
                    ]
                },
                {
                    "command": [
                        "elim p; intros.",
                        "VernacExtend",
                        "5c01b4e2930aaa38b242bfcbf978f298ab53ee9b"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H.",
                        "VernacExtend",
                        "a1fa2a2c6131a3684a3cac0d603de13825706b4c"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat.",
                        "VernacExtend",
                        "ecf2e229db1efa1d9dec061865f354468879442a"
                    ]
                },
                {
                    "command": [
                        "replace (n + 0)%nat with n; [ reflexivity | ring ].",
                        "VernacExtend",
                        "da44939d6d6d9840ed605d86ac023fe7f46f48f0"
                    ]
                },
                {
                    "command": [
                        "cut (is_lub (EUn (fun k:nat => Un (n + k)%nat)) (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr1))).",
                        "VernacExtend",
                        "998ad8b974b4987216efe8a05ee0f0e5929da490"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold is_lub in p; unfold is_lub in H.",
                        "VernacExtend",
                        "928c8272de25192842bdf37fcfbb7f9fce662fcb"
                    ]
                },
                {
                    "command": [
                        "elim p; intros; elim H; intros.",
                        "VernacExtend",
                        "6ceb7573363f4daa5135df10f342ed2be8870fc9"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := H3 x H0).",
                        "VernacExtend",
                        "3764a9b055f6426a43049bf5aafadf33944bc40f"
                    ]
                },
                {
                    "command": [
                        "assert (H5 := H1 (lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr1)) H2).",
                        "VernacExtend",
                        "1c20a49ab22b77147b8066de80f044be4f5ee199"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym; assumption.",
                        "VernacExtend",
                        "b5a78b1c0f886e81784646d07a2e86ef54048987"
                    ]
                },
                {
                    "command": [
                        "unfold lub.",
                        "VernacExtend",
                        "93825f408aac22eaa724a930ee62b1a275eb0781"
                    ]
                },
                {
                    "command": [
                        "case (ub_to_lub (fun k:nat => Un (n + k)%nat) (maj_ss Un n pr1)).",
                        "VernacExtend",
                        "c080d343b85e748bb56c3ea725964b1d83529f3e"
                    ]
                },
                {
                    "command": [
                        "intro; trivial.",
                        "VernacExtend",
                        "501f4dca80ca48c8f323018af6a832de57ce3e27"
                    ]
                },
                {
                    "command": [
                        "apply ub_to_lub.",
                        "VernacExtend",
                        "9895159837cd8885ac5e871796effedf74f6ec24"
                    ]
                },
                {
                    "command": [
                        "apply maj_ss; assumption.",
                        "VernacExtend",
                        "b241cdc87dcd606b2d9059fddf8ad9771f88ff39"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min_maj",
            "line_nb": 244,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H := Vn_Un_Wn_order Un pr1 pr2).",
                        "VernacExtend",
                        "0a810c4c4cf93a7038d30e12bb525d0833e57f83"
                    ]
                },
                {
                    "command": [
                        "unfold has_ub.",
                        "VernacExtend",
                        "ceb32c40b15ce73c7b54080c037d097378cdbabb"
                    ]
                },
                {
                    "command": [
                        "unfold bound.",
                        "VernacExtend",
                        "59942e148dddd0d48f677cd1bd2ebe8e3f69ae85"
                    ]
                },
                {
                    "command": [
                        "unfold has_ub in pr1.",
                        "VernacExtend",
                        "a2fafc08e73f300742be3adbfa09e5c70c3d1a15"
                    ]
                },
                {
                    "command": [
                        "unfold bound in pr1.",
                        "VernacExtend",
                        "7450bdc0fa4271316e91bc4fd70ce2601e532d70"
                    ]
                },
                {
                    "command": [
                        "elim pr1; intros.",
                        "VernacExtend",
                        "ac3f68d7176a26ef8a68a53f96b78cb1a44e3a41"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound.",
                        "VernacExtend",
                        "8f2f4c45e0301f8635f36bde586c5301c04c8245"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H0.",
                        "VernacExtend",
                        "c85637e21ec39634416e90dcfca89e950c787bb0"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Un x1).",
                        "VernacExtend",
                        "ba11f076850d29a68954c0f9e04c09b422f28af5"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := H x1); elim H3; intros; assumption.",
                        "VernacExtend",
                        "d54f234896ee6971530c2611598f0e04147b3df6"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "exists x1; reflexivity.",
                        "VernacExtend",
                        "360945f124ce00fcab0ac5e5de369679d9fc14c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maj_min",
            "line_nb": 263,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H := Vn_Un_Wn_order Un pr1 pr2).",
                        "VernacExtend",
                        "0a810c4c4cf93a7038d30e12bb525d0833e57f83"
                    ]
                },
                {
                    "command": [
                        "unfold has_lb.",
                        "VernacExtend",
                        "0bca23eb1d0714abb7864d93abc374efb6546481"
                    ]
                },
                {
                    "command": [
                        "unfold bound.",
                        "VernacExtend",
                        "59942e148dddd0d48f677cd1bd2ebe8e3f69ae85"
                    ]
                },
                {
                    "command": [
                        "unfold has_lb in pr2.",
                        "VernacExtend",
                        "6d7da1b8ebbb8508cbf852bc2c63db3bf72e5902"
                    ]
                },
                {
                    "command": [
                        "unfold bound in pr2.",
                        "VernacExtend",
                        "15ac14f14d9fa22730922d0c2fe56193ed1ded46"
                    ]
                },
                {
                    "command": [
                        "elim pr2; intros.",
                        "VernacExtend",
                        "ae2a703d5fbdfda5249514b27afb4de7dcf3ae74"
                    ]
                },
                {
                    "command": [
                        "exists x.",
                        "VernacExtend",
                        "800bf7613c74a608ff1ecae6bb20d349d4e8f84d"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound.",
                        "VernacExtend",
                        "8f2f4c45e0301f8635f36bde586c5301c04c8245"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H0.",
                        "VernacExtend",
                        "c85637e21ec39634416e90dcfca89e950c787bb0"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros.",
                        "VernacExtend",
                        "6b7bcf9d739b14ca3a09271e2c3493e16c5e2914"
                    ]
                },
                {
                    "command": [
                        "rewrite H2.",
                        "VernacExtend",
                        "c34b98a4ea7c987830199fe378bb7a145a0d652e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (opp_seq Un x1).",
                        "VernacExtend",
                        "a00e1d5d142787e2d89d2bc047f3b133efea94bd"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := H x1); elim H3; intros.",
                        "VernacExtend",
                        "1b8f6f5186aa718d9685ec70d3e36b32a8a33004"
                    ]
                },
                {
                    "command": [
                        "unfold opp_seq; apply Ropp_le_contravar.",
                        "VernacExtend",
                        "eaaa334a826c5dd7e7d8cbf81922170f71770438"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply H0.",
                        "VernacExtend",
                        "c75b3371fc84f2aae811de7e80b1bdb43e4d249a"
                    ]
                },
                {
                    "command": [
                        "exists x1; reflexivity.",
                        "VernacExtend",
                        "360945f124ce00fcab0ac5e5de369679d9fc14c1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cauchy_maj",
            "line_nb": 284,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold has_ub.",
                        "VernacExtend",
                        "ceb32c40b15ce73c7b54080c037d097378cdbabb"
                    ]
                },
                {
                    "command": [
                        "apply cauchy_bound.",
                        "VernacExtend",
                        "167f75720b169b48f481eb59684c13b34872f687"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cauchy_opp",
            "line_nb": 290,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold Cauchy_crit.",
                        "VernacExtend",
                        "7a6f0288846e2f0f585e14ed633844643ef3fe5a"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist.",
                        "VernacExtend",
                        "9d14879a55d02ad54565968e31b64da7aeb66d97"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "elim (H eps H0); intros.",
                        "VernacExtend",
                        "ace4b126c6608622fb1152df39f2724078d34d25"
                    ]
                },
                {
                    "command": [
                        "exists x; intros.",
                        "VernacExtend",
                        "630f24a2d635df94b063a62023a90567ef134b19"
                    ]
                },
                {
                    "command": [
                        "unfold opp_seq.",
                        "VernacExtend",
                        "71519d198ca4edf2d134115411d2ee1870568a91"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp.",
                        "VernacExtend",
                        "fec698fd86e1df1a29b09f4d0b96a2b8f860ddb2"
                    ]
                },
                {
                    "command": [
                        "replace (- (- Un n - - Un m)) with (Un n - Un m); [ apply H1; assumption | ring ].",
                        "VernacExtend",
                        "8d577290927e1bc64e4786945f35a966556e2ec4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cauchy_min",
            "line_nb": 301,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold has_lb.",
                        "VernacExtend",
                        "0bca23eb1d0714abb7864d93abc374efb6546481"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := cauchy_opp _ H).",
                        "VernacExtend",
                        "2c2b1cf238a538e9367ae5fcd0a29ee9143b0d20"
                    ]
                },
                {
                    "command": [
                        "apply cauchy_bound.",
                        "VernacExtend",
                        "167f75720b169b48f481eb59684c13b34872f687"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maj_cv",
            "line_nb": 308,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply decreasing_cv.",
                        "VernacExtend",
                        "8dd04c05aace3951240559f529507b3396663df8"
                    ]
                },
                {
                    "command": [
                        "apply Wn_decreasing.",
                        "VernacExtend",
                        "9f35ecb4cbdbbcbee3f18ed84ffd60b3bf399e25"
                    ]
                },
                {
                    "command": [
                        "apply maj_min.",
                        "VernacExtend",
                        "8ebd9ff73946ea3e41d98e15d2d12fbbe96c5cd7"
                    ]
                },
                {
                    "command": [
                        "apply cauchy_min.",
                        "VernacExtend",
                        "252ef95de421484edd2421b678eeceb2fb72beb6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "min_cv",
            "line_nb": 316,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply growing_cv.",
                        "VernacExtend",
                        "e20e5f8467bce8c3a237abdf7a77cf38c2d1f804"
                    ]
                },
                {
                    "command": [
                        "apply Vn_growing.",
                        "VernacExtend",
                        "d046e75ced687ca7d356f89fac34c57f6bc30487"
                    ]
                },
                {
                    "command": [
                        "apply min_maj.",
                        "VernacExtend",
                        "5d79206cfc43e3732a6e4eb25dcc161d62209caf"
                    ]
                },
                {
                    "command": [
                        "apply cauchy_maj.",
                        "VernacExtend",
                        "0dfe0e4431b324b40be459e974c8f7703402c949"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cond_eq",
            "line_nb": 324,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "destruct (total_order_T x y) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "1c697840bbd343698584e8e6c30fd472cdf7940d"
                    ]
                },
                {
                    "command": [
                        "cut (0 < y - x).",
                        "VernacExtend",
                        "1ab1d466c014e4bfdc313a0a0aa1110acb6d490b"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := H (y - x) H0).",
                        "VernacExtend",
                        "1a1db99bb3137e36f6cbe306bbfc48f885dfe503"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp in H1.",
                        "VernacExtend",
                        "477b62b08488bd9397529ed10375e7405f8eface"
                    ]
                },
                {
                    "command": [
                        "cut (- (x - y) = y - x); [ intro; rewrite H2 in H1 | ring ].",
                        "VernacExtend",
                        "81c1e2ba4382a17001f9ef1ee684a56135663c8a"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right in H1.",
                        "VernacExtend",
                        "a2316f56af3b0df55ed4c822f9f305e4211ce9c1"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ H1).",
                        "VernacExtend",
                        "5867a6567fb67799e24ef8a12a604542b721e9f5"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with x.",
                        "VernacExtend",
                        "f6abc10f7ad01cb714b4cff3f6e97f6bde56f912"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (x + (y - x)) with y; [ assumption | ring ].",
                        "VernacExtend",
                        "a9e08443fe60c2259265eca6ced9b30eab9fbe37"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "cut (0 < x - y).",
                        "VernacExtend",
                        "d08fb6f1ebe81d1769bc02b62a3f8c13aed8ac40"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := H (x - y) H0).",
                        "VernacExtend",
                        "2391a32e8ea3c7be00a6823c78be17082dcc68e7"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_right in H1.",
                        "VernacExtend",
                        "a2316f56af3b0df55ed4c822f9f305e4211ce9c1"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ H1).",
                        "VernacExtend",
                        "5867a6567fb67799e24ef8a12a604542b721e9f5"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with y.",
                        "VernacExtend",
                        "89ad4ced1daa63a533089fe92e0d5ecc3cf8824f"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r; replace (y + (x - y)) with x; [ assumption | ring ].",
                        "VernacExtend",
                        "d27e0560b308542d7ca9d4b02557dcd524877fbb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "not_Rlt",
            "line_nb": 347,
            "steps": [
                {
                    "command": [
                        "intros r1 r2; generalize (Rtotal_order r1 r2); unfold Rge.",
                        "VernacExtend",
                        "d7ff27a5a28fe6aa0ee42a64ef62b5ebea66153a"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "approx_maj",
            "line_nb": 351,
            "steps": [
                {
                    "command": [
                        "intros Un pr.",
                        "VernacExtend",
                        "9d293033f3f705808be5d5e5cba6b0f2dd1582f7"
                    ]
                },
                {
                    "command": [
                        "pose (Vn := fix aux n := match n with S n' => if Rle_lt_dec (aux n') (Un n) then Un n else aux n' | O => Un O end).",
                        "VernacExtend",
                        "d4ef49283ac2d3a6d895c3df87ad590c58271d28"
                    ]
                },
                {
                    "command": [
                        "pose (In := fix aux n := match n with S n' => if Rle_lt_dec (Vn n) (Un n) then n else aux n' | O => O end).",
                        "VernacExtend",
                        "babc7abf166bd08d35de2940d7c25492f6306b77"
                    ]
                },
                {
                    "command": [
                        "assert (VUI: forall n, Vn n = Un (In n)).",
                        "VernacExtend",
                        "73be58d40bb387fc9332ff4071b87702d9499640"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "easy.",
                        "VernacExtend",
                        "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (Vn n) (Un (S n))) as [H1|H1].",
                        "VernacExtend",
                        "e0b973157fd67b6377e553b704a5cb52d87f512f"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (Un (S n)) (Un (S n))) as [H2|H2].",
                        "VernacExtend",
                        "ab2fa3ae97de6cb08e85836558247f33c2469f79"
                    ]
                },
                {
                    "command": [
                        "easy.",
                        "VernacExtend",
                        "ef1368621ae14ed4e378e6e1c58fbee46db9a962"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ H2).",
                        "VernacExtend",
                        "482e7c077cecaaa7839ddb8fa1b881a6acdc584c"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (Vn n) (Un (S n))) as [H2|H2].",
                        "VernacExtend",
                        "234f902868d85eb45e128a5914a90e80aaafd4d3"
                    ]
                },
                {
                    "command": [
                        "elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H2 H1)).",
                        "VernacExtend",
                        "a076929bab0e416ae3be2cc0e5ef4fb28398a82c"
                    ]
                },
                {
                    "command": [
                        "exact IHn.",
                        "VernacExtend",
                        "d68361e453d2626d53a14d9cb95fe3d5724f4c57"
                    ]
                },
                {
                    "command": [
                        "assert (HubV : has_ub Vn).",
                        "VernacExtend",
                        "2ef216bbabfca280687a4deb3385c8467544a7a1"
                    ]
                },
                {
                    "command": [
                        "destruct pr as (ub, Hub).",
                        "VernacExtend",
                        "861cb966d57eb33b75604ff0c7042b83a8d9dd81"
                    ]
                },
                {
                    "command": [
                        "exists ub.",
                        "VernacExtend",
                        "14516dfe33e63a639986860a2d7f6f582ae7e20f"
                    ]
                },
                {
                    "command": [
                        "intros x (n, Hn).",
                        "VernacExtend",
                        "5d6b4243dd9d6e3badf5728fd0718170019c6f4e"
                    ]
                },
                {
                    "command": [
                        "rewrite Hn, VUI.",
                        "VernacExtend",
                        "6447a36e204fc44ec2f1ff20630f1b335db4e584"
                    ]
                },
                {
                    "command": [
                        "apply Hub.",
                        "VernacExtend",
                        "88ecc2488b63e46827735699f592921a85d0a25a"
                    ]
                },
                {
                    "command": [
                        "now exists (In n).",
                        "VernacExtend",
                        "575814582438377cd20ed67e1f71ab9618e23ec0"
                    ]
                },
                {
                    "command": [
                        "assert (HgrV : Un_growing Vn).",
                        "VernacExtend",
                        "461425b2b5fc26ad796d394178550443f7688ba2"
                    ]
                },
                {
                    "command": [
                        "intros n.",
                        "VernacExtend",
                        "9410cc86153539309ee696ae5785ea70534ece11"
                    ]
                },
                {
                    "command": [
                        "induction n.",
                        "VernacExtend",
                        "7f3faa2a3277e3553406d09101130efcb1764494"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (Un O) (Un 1%nat)) as [H|_].",
                        "VernacExtend",
                        "11017dd8367204911812e13031f1747d1804b0f7"
                    ]
                },
                {
                    "command": [
                        "exact H.",
                        "VernacExtend",
                        "ce8e3e03bec1b3366baf128fe7eab49b160bc6a4"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (Vn n) (Un (S n))) as [H1|H1].",
                        "VernacExtend",
                        "e0b973157fd67b6377e553b704a5cb52d87f512f"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (Un (S n)) (Un (S (S n)))) as [H2|H2].",
                        "VernacExtend",
                        "40b8e73fae0e03878210367c8628711ef7f3efc5"
                    ]
                },
                {
                    "command": [
                        "exact H2.",
                        "VernacExtend",
                        "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (Vn n) (Un (S (S n)))) as [H2|H2].",
                        "VernacExtend",
                        "2d517a4732db8c908145c2c7dec94f00effd6a8f"
                    ]
                },
                {
                    "command": [
                        "exact H2.",
                        "VernacExtend",
                        "6cf1ccd4f667f962fca87ce20ad22b06c15c53ad"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "destruct (ub_to_lub Vn HubV) as (l, Hl).",
                        "VernacExtend",
                        "9a56aa2222ad087a8851ecc346310016944ace65"
                    ]
                },
                {
                    "command": [
                        "unfold lub.",
                        "VernacExtend",
                        "93825f408aac22eaa724a930ee62b1a275eb0781"
                    ]
                },
                {
                    "command": [
                        "destruct (ub_to_lub Un pr) as (l', Hl').",
                        "VernacExtend",
                        "6dd6f813be363b30a3b4546233cf572be4603303"
                    ]
                },
                {
                    "command": [
                        "replace l' with l.",
                        "VernacExtend",
                        "038729405f893071471df19694a3e3d16835a8ef"
                    ]
                },
                {
                    "command": [
                        "intros eps Heps.",
                        "VernacExtend",
                        "7703df655796ea26c6ea499878b7b84d16db4279"
                    ]
                },
                {
                    "command": [
                        "destruct (Un_cv_crit_lub Vn HgrV l Hl eps Heps) as (n, Hn).",
                        "VernacExtend",
                        "f73e703868f47133a31510f9dd7322d2a8ad798b"
                    ]
                },
                {
                    "command": [
                        "exists (In n).",
                        "VernacExtend",
                        "a5b36d1c61363ba24bc9c1b1db0bc636da92e7f5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- VUI.",
                        "VernacExtend",
                        "194770c70ea3083a1ff9681d1b9e86c2e8d0a537"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_minus_sym.",
                        "VernacExtend",
                        "ddb6224679ef13d2115963f7fdb5e59e73f39ad2"
                    ]
                },
                {
                    "command": [
                        "apply Hn.",
                        "VernacExtend",
                        "c5adcc6ecec47fdf9466a9526d44d536ffc16251"
                    ]
                },
                {
                    "command": [
                        "apply le_refl.",
                        "VernacExtend",
                        "cf6c26be2dc0610be68abd6b5b4bb52c94832e79"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym.",
                        "VernacExtend",
                        "8e9431fb6db6f151160007e68131f4f5cb1c7968"
                    ]
                },
                {
                    "command": [
                        "apply Hl.",
                        "VernacExtend",
                        "02df804151e4adadf6baf4a5ea9b58097df0f911"
                    ]
                },
                {
                    "command": [
                        "intros n (k, Hk).",
                        "VernacExtend",
                        "ab6ff8f759c19a4a28608fda082c6e6e40b6fff1"
                    ]
                },
                {
                    "command": [
                        "rewrite Hk, VUI.",
                        "VernacExtend",
                        "d4402c61b5eee7410ba81667315a004f5905d459"
                    ]
                },
                {
                    "command": [
                        "apply Hl'.",
                        "VernacExtend",
                        "6972bbb56a84a920c24e42e8c16e3f1e4b592478"
                    ]
                },
                {
                    "command": [
                        "now exists (In k).",
                        "VernacExtend",
                        "d930891b68f1103f7775ee3e98f10ee4bb026690"
                    ]
                },
                {
                    "command": [
                        "apply Hl'.",
                        "VernacExtend",
                        "6972bbb56a84a920c24e42e8c16e3f1e4b592478"
                    ]
                },
                {
                    "command": [
                        "intros n (k, Hk).",
                        "VernacExtend",
                        "ab6ff8f759c19a4a28608fda082c6e6e40b6fff1"
                    ]
                },
                {
                    "command": [
                        "rewrite Hk.",
                        "VernacExtend",
                        "c5a1e8c9638c5734e858ad671e545e87eb94e50e"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Vn k).",
                        "VernacExtend",
                        "622ebebb91db8736a6085b91fd94f5fc7d897327"
                    ]
                },
                {
                    "command": [
                        "clear.",
                        "VernacExtend",
                        "086ee0db0bdefcfa1ec15bb5cd44d451de64c569"
                    ]
                },
                {
                    "command": [
                        "induction k.",
                        "VernacExtend",
                        "40c5b84c7f25c7c24e470db498af5e654cfce415"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct (Rle_lt_dec (Vn k) (Un (S k))) as [H|H].",
                        "VernacExtend",
                        "6632335876da25415c30b5151fd5bb3deb747de2"
                    ]
                },
                {
                    "command": [
                        "apply Rle_refl.",
                        "VernacExtend",
                        "0a60a50353d5cfa9a4ade0240c47d5160d6d423c"
                    ]
                },
                {
                    "command": [
                        "now apply Rlt_le.",
                        "VernacExtend",
                        "3fa67bbd472123a7abc1f777aecc643fb3862e46"
                    ]
                },
                {
                    "command": [
                        "apply Hl.",
                        "VernacExtend",
                        "02df804151e4adadf6baf4a5ea9b58097df0f911"
                    ]
                },
                {
                    "command": [
                        "now exists k.",
                        "VernacExtend",
                        "9c120dbed1df0ea5a6f910cb2efd9fcfe234a0b6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "approx_min",
            "line_nb": 419,
            "steps": [
                {
                    "command": [
                        "intros Un pr.",
                        "VernacExtend",
                        "9d293033f3f705808be5d5e5cba6b0f2dd1582f7"
                    ]
                },
                {
                    "command": [
                        "unfold glb.",
                        "VernacExtend",
                        "de5d7dc0a2b98cd59f0ad5c868b008125c310a9a"
                    ]
                },
                {
                    "command": [
                        "destruct lb_to_glb as (lb, Hlb).",
                        "VernacExtend",
                        "e6e337aea1edbc5269049b120fb05b696027e350"
                    ]
                },
                {
                    "command": [
                        "intros eps Heps.",
                        "VernacExtend",
                        "7703df655796ea26c6ea499878b7b84d16db4279"
                    ]
                },
                {
                    "command": [
                        "destruct (approx_maj _ pr eps Heps) as (n, Hn).",
                        "VernacExtend",
                        "9adadb027294e131cc05026212dc40011852c323"
                    ]
                },
                {
                    "command": [
                        "exists n.",
                        "VernacExtend",
                        "a97204a252e0d9b7444ffed9b38570a756391511"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus.",
                        "VernacExtend",
                        "be913ef3bb9103a3081d46d811769f83edb6f7a5"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Ropp_plus_distr, Rabs_Ropp.",
                        "VernacExtend",
                        "9ab05dba9c8ddd949362407cea9feea4460610d5"
                    ]
                },
                {
                    "command": [
                        "replace lb with (lub (opp_seq Un) pr).",
                        "VernacExtend",
                        "a5ef195fba69e91f8131406e6808097170bd9188"
                    ]
                },
                {
                    "command": [
                        "now rewrite <- (Ropp_involutive (Un n)).",
                        "VernacExtend",
                        "cb188a50cb06d57fc7c07b08150e61178cf79b34"
                    ]
                },
                {
                    "command": [
                        "unfold lub.",
                        "VernacExtend",
                        "93825f408aac22eaa724a930ee62b1a275eb0781"
                    ]
                },
                {
                    "command": [
                        "destruct ub_to_lub as (ub, Hub).",
                        "VernacExtend",
                        "92605fa59147902ac1dc98b89348b6766c0b70e9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_antisym.",
                        "VernacExtend",
                        "8e9431fb6db6f151160007e68131f4f5cb1c7968"
                    ]
                },
                {
                    "command": [
                        "apply Hub.",
                        "VernacExtend",
                        "88ecc2488b63e46827735699f592921a85d0a25a"
                    ]
                },
                {
                    "command": [
                        "apply Hlb.",
                        "VernacExtend",
                        "ad9ef1d96c511d01147b34c3a7322a87451c292d"
                    ]
                },
                {
                    "command": [
                        "apply Hlb.",
                        "VernacExtend",
                        "ad9ef1d96c511d01147b34c3a7322a87451c292d"
                    ]
                },
                {
                    "command": [
                        "apply Hub.",
                        "VernacExtend",
                        "88ecc2488b63e46827735699f592921a85d0a25a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "UL_sequence",
            "line_nb": 438,
            "steps": [
                {
                    "command": [
                        "intros Un l1 l2; unfold Un_cv; unfold R_dist; intros.",
                        "VernacExtend",
                        "9bd5178dd4ccb27c74798c13a650e1be0fed116d"
                    ]
                },
                {
                    "command": [
                        "apply cond_eq.",
                        "VernacExtend",
                        "d876630090535b5a5f7e7841ae4c0c5219a1ca89"
                    ]
                },
                {
                    "command": [
                        "intros; cut (0 < eps / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
                        "VernacExtend",
                        "fbe90d51ce8a5e2852a2bf79a3cc31e104df7d06"
                    ]
                },
                {
                    "command": [
                        "elim (H (eps / 2) H2); intros.",
                        "VernacExtend",
                        "b663cf2cc4b4080df74976cca805dc7e17f5060a"
                    ]
                },
                {
                    "command": [
                        "elim (H0 (eps / 2) H2); intros.",
                        "VernacExtend",
                        "58e32d30a7b7e5e1875817799f8e978c34012f97"
                    ]
                },
                {
                    "command": [
                        "set (N := max x x0).",
                        "VernacExtend",
                        "aada59eabde7c0462f5cacd2ee4be89852b197bc"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (l1 - Un N) + Rabs (Un N - l2)).",
                        "VernacExtend",
                        "b04a3ef84963f03af3cc3be48c3c64df3d368b46"
                    ]
                },
                {
                    "command": [
                        "replace (l1 - l2) with (l1 - Un N + (Un N - l2)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "e04edb73b1bdbcaf13d05498ca7365b9c77e1d87"
                    ]
                },
                {
                    "command": [
                        "rewrite (double_var eps); apply Rplus_lt_compat.",
                        "VernacExtend",
                        "dd3002897582f3251627e3b8fbd0c2a8c471071b"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H3; unfold ge, N; apply le_max_l.",
                        "VernacExtend",
                        "7d80b9c8f571d6b066167b43b85322cbeaa45f4b"
                    ]
                },
                {
                    "command": [
                        "apply H4; unfold ge, N; apply le_max_r.",
                        "VernacExtend",
                        "54aa1e636dbfce2e33c58bc085635e7d68efe1e0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_plus",
            "line_nb": 451,
            "steps": [
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; intros.",
                        "VernacExtend",
                        "add26482ec443227632a57519752bde439308595"
                    ]
                },
                {
                    "command": [
                        "cut (0 < eps / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
                        "VernacExtend",
                        "8ac1755346ca1cc52f3336146370006f80a4ff61"
                    ]
                },
                {
                    "command": [
                        "elim (H (eps / 2) H2); intros.",
                        "VernacExtend",
                        "b663cf2cc4b4080df74976cca805dc7e17f5060a"
                    ]
                },
                {
                    "command": [
                        "elim (H0 (eps / 2) H2); intros.",
                        "VernacExtend",
                        "58e32d30a7b7e5e1875817799f8e978c34012f97"
                    ]
                },
                {
                    "command": [
                        "set (N := max x x0).",
                        "VernacExtend",
                        "aada59eabde7c0462f5cacd2ee4be89852b197bc"
                    ]
                },
                {
                    "command": [
                        "exists N; intros.",
                        "VernacExtend",
                        "cfd63f1f7fafabc1d063c17632530a627ae99922"
                    ]
                },
                {
                    "command": [
                        "replace (An n + Bn n - (l1 + l2)) with (An n - l1 + (Bn n - l2)); [ idtac | ring ].",
                        "VernacExtend",
                        "68fed07d8a9673ae8d049a7b8e072af6fcc26207"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (An n - l1) + Rabs (Bn n - l2)).",
                        "VernacExtend",
                        "187bc0501a70ab90ef0f464aa0041933d5d30631"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "rewrite (double_var eps); apply Rplus_lt_compat.",
                        "VernacExtend",
                        "dd3002897582f3251627e3b8fbd0c2a8c471071b"
                    ]
                },
                {
                    "command": [
                        "apply H3; unfold ge; apply le_trans with N; [ unfold N; apply le_max_l | assumption ].",
                        "VernacExtend",
                        "4f9c2b37899a01e4cc58e65cb103db1b92c2f25b"
                    ]
                },
                {
                    "command": [
                        "apply H4; unfold ge; apply le_trans with N; [ unfold N; apply le_max_r | assumption ].",
                        "VernacExtend",
                        "d850302794e8fb195e6624b61ba0b87e12b18446"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cv_cvabs",
            "line_nb": 465,
            "steps": [
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; intros.",
                        "VernacExtend",
                        "add26482ec443227632a57519752bde439308595"
                    ]
                },
                {
                    "command": [
                        "elim (H eps H0); intros.",
                        "VernacExtend",
                        "ace4b126c6608622fb1152df39f2724078d34d25"
                    ]
                },
                {
                    "command": [
                        "exists x; intros.",
                        "VernacExtend",
                        "630f24a2d635df94b063a62023a90567ef134b19"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (Un n - l)).",
                        "VernacExtend",
                        "aa383459fe085c0560fc84890aa19b61b590dc1b"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang_inv2.",
                        "VernacExtend",
                        "db3a686e29529c6a07ba47aa021c0e984d49629a"
                    ]
                },
                {
                    "command": [
                        "apply H1; assumption.",
                        "VernacExtend",
                        "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_Cauchy",
            "line_nb": 473,
            "steps": [
                {
                    "command": [
                        "intros Un X; elim X; intros.",
                        "VernacExtend",
                        "45080cc8f2eb31763dd822989d0561f943d2b7fc"
                    ]
                },
                {
                    "command": [
                        "unfold Cauchy_crit; intros.",
                        "VernacExtend",
                        "5332438cc27c8532958cdaa8c48d07862195e393"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv in p; unfold R_dist in p.",
                        "VernacExtend",
                        "008476201ef62d7a4d7a5d821be05042b256cd6a"
                    ]
                },
                {
                    "command": [
                        "cut (0 < eps / 2); [ intro | unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; prove_sup0 ] ].",
                        "VernacExtend",
                        "8ac1755346ca1cc52f3336146370006f80a4ff61"
                    ]
                },
                {
                    "command": [
                        "elim (p (eps / 2) H0); intros.",
                        "VernacExtend",
                        "15880c00810dd295e66745d8c56eaff1a76d8ce9"
                    ]
                },
                {
                    "command": [
                        "exists x0; intros.",
                        "VernacExtend",
                        "5bc9f78cbd3bd0b9d5ad70bca80ff875ab1656fa"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist; apply Rle_lt_trans with (Rabs (Un n - x) + Rabs (x - Un m)).",
                        "VernacExtend",
                        "c054f386e51b0660f097c0fdef97b6633f8d8f5b"
                    ]
                },
                {
                    "command": [
                        "replace (Un n - Un m) with (Un n - x + (x - Un m)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "217c80d6ceb7a8c156529f0008ed7784876c9b6e"
                    ]
                },
                {
                    "command": [
                        "rewrite (double_var eps); apply Rplus_lt_compat.",
                        "VernacExtend",
                        "dd3002897582f3251627e3b8fbd0c2a8c471071b"
                    ]
                },
                {
                    "command": [
                        "apply H1; assumption.",
                        "VernacExtend",
                        "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rabs_Ropp; rewrite Ropp_minus_distr; apply H1; assumption.",
                        "VernacExtend",
                        "842c9f15821b762dbbee1a50bd7ad367e5b5d2bd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "maj_by_pos",
            "line_nb": 486,
            "steps": [
                {
                    "command": [
                        "intros Un X; elim X; intros.",
                        "VernacExtend",
                        "45080cc8f2eb31763dd822989d0561f943d2b7fc"
                    ]
                },
                {
                    "command": [
                        "cut { l:R | Un_cv (fun k:nat => Rabs (Un k)) l }.",
                        "VernacExtend",
                        "4793a09bc76dbce49f67acd4444200612e95fab2"
                    ]
                },
                {
                    "command": [
                        "intro X0.",
                        "VernacExtend",
                        "51ac38a0ee50d186261fb87ba79cee51d717c575"
                    ]
                },
                {
                    "command": [
                        "assert (H := CV_Cauchy (fun k:nat => Rabs (Un k)) X0).",
                        "VernacExtend",
                        "7de95bbc0142920cfcc3bca71a2f50fab31a623e"
                    ]
                },
                {
                    "command": [
                        "assert (H0 := cauchy_bound (fun k:nat => Rabs (Un k)) H).",
                        "VernacExtend",
                        "bbc0d7fa06b845ce816a537553c128a81bcb55ea"
                    ]
                },
                {
                    "command": [
                        "elim H0; intros.",
                        "VernacExtend",
                        "6b83f392a470a8cdaa118e532bc445a009dec854"
                    ]
                },
                {
                    "command": [
                        "exists (x0 + 1).",
                        "VernacExtend",
                        "4ec5d8bac6aaa8f6a0c0709db508913a12842057"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= x0).",
                        "VernacExtend",
                        "9cb0dadd4c64c35233f0bf30dbf7022d3b6ec7e6"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_le_lt_0_compat; [ assumption | apply Rlt_0_1 ].",
                        "VernacExtend",
                        "43752e2a1d81f3523d64cc65d8ba4954274e2995"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with x0.",
                        "VernacExtend",
                        "5fc66bcd849b3049a7c30908f409fe1874b7696f"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H1.",
                        "VernacExtend",
                        "65e27302a9a08c517c1ff84df4472e363cb5a32d"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "exists n; reflexivity.",
                        "VernacExtend",
                        "6ed49d76c89168c40bd2e34b38ed3c4be248fe55"
                    ]
                },
                {
                    "command": [
                        "pattern x0 at 1; rewrite <- Rplus_0_r; apply Rplus_le_compat_l; left; apply Rlt_0_1.",
                        "VernacExtend",
                        "3710cc7c323fd7b577a5586641b1a10b72fbefa9"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Rabs (Un 0%nat)).",
                        "VernacExtend",
                        "9b7703daa222fcd6017c0bfdfe4574661979486b"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "unfold is_upper_bound in H1.",
                        "VernacExtend",
                        "65e27302a9a08c517c1ff84df4472e363cb5a32d"
                    ]
                },
                {
                    "command": [
                        "apply H1.",
                        "VernacExtend",
                        "3fcc9345bbf6ea218ca825a16c0f27912de9bd67"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat; reflexivity.",
                        "VernacExtend",
                        "fe3e4a322fd724f6b5422383151c7be1ffa0f073"
                    ]
                },
                {
                    "command": [
                        "exists (Rabs x).",
                        "VernacExtend",
                        "ef3f321d2847ecdadc6765a8eb3369dd1fa46b0c"
                    ]
                },
                {
                    "command": [
                        "apply cv_cvabs; assumption.",
                        "VernacExtend",
                        "4450e434fb56c1a5af4010c3dad75a2bca5a7782"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_mult",
            "line_nb": 512,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "cut { l:R | Un_cv An l }.",
                        "VernacExtend",
                        "2e67f62ecaf9c8339326a2184aafd9b5b4d34a91"
                    ]
                },
                {
                    "command": [
                        "intro X.",
                        "VernacExtend",
                        "c93bbb51ef8637991b4239865469e36d8e520337"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := maj_by_pos An X).",
                        "VernacExtend",
                        "5fff8436a83500cf3b82437aacdf2f5dacb45f02"
                    ]
                },
                {
                    "command": [
                        "elim H1; intros M H2.",
                        "VernacExtend",
                        "5f55036b3bc2c82538ab4541099c138a287d8234"
                    ]
                },
                {
                    "command": [
                        "elim H2; intros.",
                        "VernacExtend",
                        "1fdc85439644114ac67a1ade25e79a4d8c3588d6"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; intros.",
                        "VernacExtend",
                        "add26482ec443227632a57519752bde439308595"
                    ]
                },
                {
                    "command": [
                        "cut (0 < eps / (2 * M)).",
                        "VernacExtend",
                        "90d64a6a9e70ce27b35e1067d6ece87658c4c056"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec l2 0); intro.",
                        "VernacExtend",
                        "9dca1657c217aee00ef4d09307f3c15e335bd198"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv in H0; unfold R_dist in H0.",
                        "VernacExtend",
                        "b1118ca929986de1cd1f0ab5223a4eacd196ec34"
                    ]
                },
                {
                    "command": [
                        "elim (H0 (eps / (2 * M)) H6); intros.",
                        "VernacExtend",
                        "4e0da423cd7e85363fb3de293e97e0d947bde97a"
                    ]
                },
                {
                    "command": [
                        "exists x; intros.",
                        "VernacExtend",
                        "630f24a2d635df94b063a62023a90567ef134b19"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (An n * Bn n - An n * l2) + Rabs (An n * l2 - l1 * l2)).",
                        "VernacExtend",
                        "4feb60c4b85e4fa46dfca7361d53899c0098455c"
                    ]
                },
                {
                    "command": [
                        "replace (An n * Bn n - l1 * l2) with (An n * Bn n - An n * l2 + (An n * l2 - l1 * l2)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "f004e8586bbef1a10229325e97227113c27c8897"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (An n * Bn n - An n * l2)) with (Rabs (An n) * Rabs (Bn n - l2)).",
                        "VernacExtend",
                        "fc8afd44de80431bcca37b2e9c91377dd00fa54e"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (An n * l2 - l1 * l2)) with 0.",
                        "VernacExtend",
                        "5dcbb2bb1ad1fc0a6f94fee83bc89de18f07271d"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r.",
                        "VernacExtend",
                        "d5c1fdd9d1c31f6ede268b5fbee697b051ea4fe2"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (M * Rabs (Bn n - l2)).",
                        "VernacExtend",
                        "26744342edd2603b25bcb1a6fbce60ffba42ab1a"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rmult_comm (Rabs (Bn n - l2))).",
                        "VernacExtend",
                        "2818202f8238fc140085ae58e8f09de79cc8157c"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (/ M).",
                        "VernacExtend",
                        "79687adc467d58cfdfd071a818d350adbeac1d4c"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply H3.",
                        "VernacExtend",
                        "e9505185ee7159c99fa9cfc81ad9c2a60de244ea"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "eccb067dc9e836ad48bf16c61cd308004f5d6712"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; rewrite (Rmult_comm (/ M)).",
                        "VernacExtend",
                        "5d4d848fa0647cee8a6ea06ead1c49224722f18d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with (eps / (2 * M)).",
                        "VernacExtend",
                        "eba7d46e99be5aa1f4efb21b4f0075aa524441a2"
                    ]
                },
                {
                    "command": [
                        "apply H8; assumption.",
                        "VernacExtend",
                        "df19cbbb8259b05d203bfb898a30426965421383"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "3bf9830f7647c63577f406f658b9e756537f6464"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "6631f3c2df4cb853b13a1c15d269a9146336e287"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "replace (2 * (eps * (/ 2 * / M))) with (2 * / 2 * (eps * / M)); [ idtac | ring ].",
                        "VernacExtend",
                        "5bce7a386901df726439010fdf19719dbd12e050"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "2ca74255a63c294f9442d956f32a2e3784636efb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; rewrite double.",
                        "VernacExtend",
                        "9c26c13cbbf5c8312ae7ea7321291c39e7a50be4"
                    ]
                },
                {
                    "command": [
                        "pattern (eps * / M) at 1; rewrite <- Rplus_0_r.",
                        "VernacExtend",
                        "9b843f21ab8e4e91950bf2f382dc1cfb69ac023a"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; assumption ].",
                        "VernacExtend",
                        "7eb325b97cfde9a5204535f07ff35d357e3d6929"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H10 in H3; elim (Rlt_irrefl _ H3).",
                        "VernacExtend",
                        "dc671ba9b1a7f362f112a8aa7c6ef0ea3ff52307"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H10 in H3; elim (Rlt_irrefl _ H3).",
                        "VernacExtend",
                        "dc671ba9b1a7f362f112a8aa7c6ef0ea3ff52307"
                    ]
                },
                {
                    "command": [
                        "rewrite H7; do 2 rewrite Rmult_0_r; unfold Rminus; rewrite Rplus_opp_r; rewrite Rabs_R0; reflexivity.",
                        "VernacExtend",
                        "348846443ebe8f2058d58c28b21461c7c4651e74"
                    ]
                },
                {
                    "command": [
                        "replace (An n * Bn n - An n * l2) with (An n * (Bn n - l2)); [ idtac | ring ].",
                        "VernacExtend",
                        "3377317aaa575498af313b683777ebc0c727cef1"
                    ]
                },
                {
                    "command": [
                        "symmetry ; apply Rabs_mult.",
                        "VernacExtend",
                        "a2efa94d54be685d351b12f07c03e17286230947"
                    ]
                },
                {
                    "command": [
                        "cut (0 < eps / (2 * Rabs l2)).",
                        "VernacExtend",
                        "4aa0219e0104f8284eb7b0faca5c63be046186af"
                    ]
                },
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv in H; unfold R_dist in H; unfold Un_cv in H0; unfold R_dist in H0.",
                        "VernacExtend",
                        "c2c8c5cc01db40a6ec920286af0c4514c43a004e"
                    ]
                },
                {
                    "command": [
                        "elim (H (eps / (2 * Rabs l2)) H8); intros N1 H9.",
                        "VernacExtend",
                        "b32552429269e0bba09241a9e44e81d38e6c9a7e"
                    ]
                },
                {
                    "command": [
                        "elim (H0 (eps / (2 * M)) H6); intros N2 H10.",
                        "VernacExtend",
                        "e6b791ffb23dcaa217d9c5a0b2c23bcafd229487"
                    ]
                },
                {
                    "command": [
                        "set (N := max N1 N2).",
                        "VernacExtend",
                        "4f50171d76cecbd209de2e30830957d590b70f98"
                    ]
                },
                {
                    "command": [
                        "exists N; intros.",
                        "VernacExtend",
                        "cfd63f1f7fafabc1d063c17632530a627ae99922"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (An n * Bn n - An n * l2) + Rabs (An n * l2 - l1 * l2)).",
                        "VernacExtend",
                        "4feb60c4b85e4fa46dfca7361d53899c0098455c"
                    ]
                },
                {
                    "command": [
                        "replace (An n * Bn n - l1 * l2) with (An n * Bn n - An n * l2 + (An n * l2 - l1 * l2)); [ apply Rabs_triang | ring ].",
                        "VernacExtend",
                        "f004e8586bbef1a10229325e97227113c27c8897"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (An n * Bn n - An n * l2)) with (Rabs (An n) * Rabs (Bn n - l2)).",
                        "VernacExtend",
                        "fc8afd44de80431bcca37b2e9c91377dd00fa54e"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs (An n * l2 - l1 * l2)) with (Rabs l2 * Rabs (An n - l1)).",
                        "VernacExtend",
                        "1a1d0f66799e452258329ca649a1a08373aac4b1"
                    ]
                },
                {
                    "command": [
                        "rewrite (double_var eps); apply Rplus_lt_compat.",
                        "VernacExtend",
                        "dd3002897582f3251627e3b8fbd0c2a8c471071b"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (M * Rabs (Bn n - l2)).",
                        "VernacExtend",
                        "26744342edd2603b25bcb1a6fbce60ffba42ab1a"
                    ]
                },
                {
                    "command": [
                        "do 2 rewrite <- (Rmult_comm (Rabs (Bn n - l2))).",
                        "VernacExtend",
                        "2818202f8238fc140085ae58e8f09de79cc8157c"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "apply H4.",
                        "VernacExtend",
                        "8d6536f7ce69f220eb5e89ccd6a8a69dc270ed4b"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (/ M).",
                        "VernacExtend",
                        "79687adc467d58cfdfd071a818d350adbeac1d4c"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply H3.",
                        "VernacExtend",
                        "e9505185ee7159c99fa9cfc81ad9c2a60de244ea"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "eccb067dc9e836ad48bf16c61cd308004f5d6712"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; rewrite (Rmult_comm (/ M)).",
                        "VernacExtend",
                        "5d4d848fa0647cee8a6ea06ead1c49224722f18d"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (eps / (2 * M)).",
                        "VernacExtend",
                        "cb918d8d02157438ffe100cc9d1080cbfaa87424"
                    ]
                },
                {
                    "command": [
                        "apply H10.",
                        "VernacExtend",
                        "169c3dd7a02593ce4f62696429eb3c1035f98388"
                    ]
                },
                {
                    "command": [
                        "unfold ge; apply le_trans with N.",
                        "VernacExtend",
                        "9ac2ffe83dc996e2342fedd4e0410456bffeae44"
                    ]
                },
                {
                    "command": [
                        "unfold N; apply le_max_r.",
                        "VernacExtend",
                        "25b64a376c94d836945bf1b7c1d8586025f5da56"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "3bf9830f7647c63577f406f658b9e756537f6464"
                    ]
                },
                {
                    "command": [
                        "right; ring.",
                        "VernacExtend",
                        "fd78e12e931c5c888aae66d8787277e6e0aa2249"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H12 in H3; elim (Rlt_irrefl _ H3).",
                        "VernacExtend",
                        "f9cab2c525194e8eeb27ec9528936edcbf72601c"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H12 in H3; elim (Rlt_irrefl _ H3).",
                        "VernacExtend",
                        "f9cab2c525194e8eeb27ec9528936edcbf72601c"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (/ Rabs l2).",
                        "VernacExtend",
                        "7944f179a78ebd07fe63f5dec4cb4d22d73760a7"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply Rabs_pos_lt; assumption.",
                        "VernacExtend",
                        "e4c91a40f2fa1c87312f044d164ffed2c6475792"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "eccb067dc9e836ad48bf16c61cd308004f5d6712"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l; apply Rlt_le_trans with (eps / (2 * Rabs l2)).",
                        "VernacExtend",
                        "c92174900b0cda658c839d70c7f70b9a787efbac"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "unfold ge; apply le_trans with N.",
                        "VernacExtend",
                        "9ac2ffe83dc996e2342fedd4e0410456bffeae44"
                    ]
                },
                {
                    "command": [
                        "unfold N; apply le_max_l.",
                        "VernacExtend",
                        "276b555b39b40f510dcc90e9585bf8a1fd5a87cf"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; right; rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "f1ac5e795fd8c7fc5b99aa30670edde0a6b9f934"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "discrR.",
                        "VernacExtend",
                        "317ae3d71f99da86881f5bad35bdd745e918f381"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_no_R0; assumption.",
                        "VernacExtend",
                        "919603fae9f5552a2987bbb604439a06966af0d9"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_no_R0; assumption.",
                        "VernacExtend",
                        "919603fae9f5552a2987bbb604439a06966af0d9"
                    ]
                },
                {
                    "command": [
                        "replace (An n * l2 - l1 * l2) with (l2 * (An n - l1)); [ symmetry ; apply Rabs_mult | ring ].",
                        "VernacExtend",
                        "ba888cc5847307fc43f4e6b521182d7d8f88478d"
                    ]
                },
                {
                    "command": [
                        "replace (An n * Bn n - An n * l2) with (An n * (Bn n - l2)); [ symmetry ; apply Rabs_mult | ring ].",
                        "VernacExtend",
                        "bc644b072e86fced5cadf0e6757ecbf0c20dd1c6"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7122edbd68559f255bfed03dc640472ed14eb4ef"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply Rmult_lt_0_compat; [ prove_sup0 | apply Rabs_pos_lt; assumption ].",
                        "VernacExtend",
                        "96a5768d514f568ae0621dec8d848fe407c483de"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat; [ assumption | apply Rinv_0_lt_compat; apply Rmult_lt_0_compat; [ prove_sup0 | assumption ] ].",
                        "VernacExtend",
                        "9f5dabd51c951842955e71a85b54e65dba5a273c"
                    ]
                },
                {
                    "command": [
                        "exists l1; assumption.",
                        "VernacExtend",
                        "a9cc112d1cbf7c08021e7b6ce1e5716e2c79de40"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech9",
            "line_nb": 609,
            "steps": [
                {
                    "command": [
                        "intros; unfold Un_growing in H.",
                        "VernacExtend",
                        "2f408cf59c789ca6690306851a0e72fd9247c20d"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "induction m as [| m Hrecm].",
                        "VernacExtend",
                        "93d2b60c268fff5d958c27bdb803738ea66bba5b"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "elim (le_Sn_O _ H0).",
                        "VernacExtend",
                        "912cb990a9402661103be256edde82bfaccb25c8"
                    ]
                },
                {
                    "command": [
                        "cut ((m <= n)%nat \\/ m = S n).",
                        "VernacExtend",
                        "ec696106dd8157f0d9e3657ec92e389aac22ff8d"
                    ]
                },
                {
                    "command": [
                        "intro; elim H1; intro.",
                        "VernacExtend",
                        "1301c759b4c493230f305c8c6fd6d684c10b8bbc"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Un n).",
                        "VernacExtend",
                        "c7389fcabe950a23c5f0aa976182376c7f262216"
                    ]
                },
                {
                    "command": [
                        "apply Hrecn; assumption.",
                        "VernacExtend",
                        "09c4bfc615059e1cf9b030ea0c6389838481a775"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; right; reflexivity.",
                        "VernacExtend",
                        "03b324cc95cb472cd1139b2810eb3aed0e88d18b"
                    ]
                },
                {
                    "command": [
                        "inversion H0.",
                        "VernacExtend",
                        "38a13882efcff2ae2c6c07fc8055d56c6c1776f2"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "tech13",
            "line_nb": 625,
            "steps": [
                {
                    "command": [
                        "intros; exists (k + (1 - k) / 2).",
                        "VernacExtend",
                        "9b1be0135f80e8e4b82f1a5380452a38ee47da22"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "pattern k at 1; rewrite <- Rplus_0_r; apply Rplus_lt_compat_l.",
                        "VernacExtend",
                        "432c3c1855104e90de150ffebf3f3bfebc9016ab"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7122edbd68559f255bfed03dc640472ed14eb4ef"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with k; rewrite Rplus_0_r; replace (k + (1 - k)) with 1; [ elim H; intros; assumption | ring ].",
                        "VernacExtend",
                        "b63baf6973a49ce17136b38efe64134d5092925c"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup0.",
                        "VernacExtend",
                        "ee74bd033c1031a79ef440e1d41037d5c9648214"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with 2.",
                        "VernacExtend",
                        "6631f3c2df4cb853b13a1c15d269a9146336e287"
                    ]
                },
                {
                    "command": [
                        "prove_sup0.",
                        "VernacExtend",
                        "9681c23836ca7f82fee12028ab3f984ae6ec2935"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rmult_1_r; rewrite Rmult_plus_distr_l; pattern 2 at 1; rewrite Rmult_comm; rewrite Rmult_assoc; rewrite <- Rinv_l_sym; [ idtac | discrR ]; rewrite Rmult_1_r; replace (2 * k + (1 - k)) with (1 + k); [ idtac | ring ].",
                        "VernacExtend",
                        "9b86bb06b33ae110f248786cb9427cf046c49c66"
                    ]
                },
                {
                    "command": [
                        "elim H; intros.",
                        "VernacExtend",
                        "79e1c8a1444242deed6d2876e3fe7bb2cf051f26"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_compat_l; assumption.",
                        "VernacExtend",
                        "44ce99cd422bdcc117c49c3d0f1b9cfdbe5e3579"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv in H0; cut (0 < (1 - k) / 2).",
                        "VernacExtend",
                        "f712c310dd24d899ab2adccabb3e12ba18935141"
                    ]
                },
                {
                    "command": [
                        "intro; elim (H0 ((1 - k) / 2) H1); intros.",
                        "VernacExtend",
                        "46821c3b508d7355789bc892fdcd4bd587e29dd8"
                    ]
                },
                {
                    "command": [
                        "exists x; intros.",
                        "VernacExtend",
                        "630f24a2d635df94b063a62023a90567ef134b19"
                    ]
                },
                {
                    "command": [
                        "assert (H4 := H2 n H3).",
                        "VernacExtend",
                        "e2a04925a6423878607f8caff9237ee9c4cd80a4"
                    ]
                },
                {
                    "command": [
                        "unfold R_dist in H4; rewrite <- Rabs_Rabsolu; replace (Rabs (An (S n) / An n)) with (Rabs (An (S n) / An n) - k + k); [ idtac | ring ]; apply Rle_lt_trans with (Rabs (Rabs (An (S n) / An n) - k) + Rabs k).",
                        "VernacExtend",
                        "5c142df57ed390dc6c8b4c51ae9b3e735963adfc"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_triang.",
                        "VernacExtend",
                        "ac95e0693bced827aa4991eb13639b86503a8150"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rabs_right k).",
                        "VernacExtend",
                        "ad6e37b5f7603776ffb50c4ddebfbd8a26791760"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with (- k); rewrite <- (Rplus_comm k); repeat rewrite <- Rplus_assoc; rewrite Rplus_opp_l; repeat rewrite Rplus_0_l; apply H4.",
                        "VernacExtend",
                        "f7694b1ea0a17503bba54f48ac68ff507fa94ef5"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; elim H; intros; assumption.",
                        "VernacExtend",
                        "556e1fc7a6e3a32fd87f2f3711c06f9d695a452d"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7122edbd68559f255bfed03dc640472ed14eb4ef"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with k; rewrite Rplus_0_r; elim H; intros; replace (k + (1 - k)) with 1; [ assumption | ring ].",
                        "VernacExtend",
                        "23c2886e5ef406cc1bffde01514b9ea6459c4f73"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; prove_sup0.",
                        "VernacExtend",
                        "ee74bd033c1031a79ef440e1d41037d5c9648214"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "growing_ineq",
            "line_nb": 651,
            "steps": [
                {
                    "command": [
                        "intros; destruct (total_order_T (Un n) l) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "4b8cb799034d729fccd715b8b9cc488c6cac01ed"
                    ]
                },
                {
                    "command": [
                        "left; assumption.",
                        "VernacExtend",
                        "3caf0ae349d7f7f5e42b9e4faad0c11c70cd858a"
                    ]
                },
                {
                    "command": [
                        "right; assumption.",
                        "VernacExtend",
                        "4b9041b9a9d920fdce6d3e18e05e4d1a743614d5"
                    ]
                },
                {
                    "command": [
                        "cut (0 < Un n - l).",
                        "VernacExtend",
                        "b567da73fdae6495b5548af2f0279a197127aed1"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Un_cv in H0; unfold R_dist in H0.",
                        "VernacExtend",
                        "a12d9e1333f687be203011dfe76761d31af937e9"
                    ]
                },
                {
                    "command": [
                        "elim (H0 (Un n - l) H1); intros N1 H2.",
                        "VernacExtend",
                        "3b5d61b3018bf13f4aa6d107bd0a0269bb7bb306"
                    ]
                },
                {
                    "command": [
                        "set (N := max n N1).",
                        "VernacExtend",
                        "c53c2570ed7536c3c281312078cf8b4a42519247"
                    ]
                },
                {
                    "command": [
                        "cut (Un n - l <= Un N - l).",
                        "VernacExtend",
                        "c5110a9129f5463822ba26bddb2c1ab57cf9e3b2"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Un N - l < Un n - l).",
                        "VernacExtend",
                        "90982ef66771e20346c77768ea338342a8934369"
                    ]
                },
                {
                    "command": [
                        "intro; elim (Rlt_irrefl _ (Rle_lt_trans _ _ _ H3 H4)).",
                        "VernacExtend",
                        "86937ffed7ee1574499d5c3a7587cc1f42be84ed"
                    ]
                },
                {
                    "command": [
                        "apply Rle_lt_trans with (Rabs (Un N - l)).",
                        "VernacExtend",
                        "9d6881889c9cbbf3d8638853d27fc5f0199c4927"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "apply H2.",
                        "VernacExtend",
                        "17101978526a14fb5ad41816224a2fc35cc3d256"
                    ]
                },
                {
                    "command": [
                        "unfold ge, N; apply le_max_r.",
                        "VernacExtend",
                        "81433f17e1c337a8bab89c4a84a4877d9949032d"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; do 2 rewrite <- (Rplus_comm (- l)); apply Rplus_le_compat_l.",
                        "VernacExtend",
                        "77e8b1700d1ed6ceeac8b5ba952f05cb58324117"
                    ]
                },
                {
                    "command": [
                        "apply tech9.",
                        "VernacExtend",
                        "9e7450a2f6b4a56b55973921834e6e2904b3b80a"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold N; apply le_max_l.",
                        "VernacExtend",
                        "276b555b39b40f510dcc90e9585bf8a1fd5a87cf"
                    ]
                },
                {
                    "command": [
                        "apply Rplus_lt_reg_l with l.",
                        "VernacExtend",
                        "59f76e8e454b396a55b0ece9ce2063364048b9a2"
                    ]
                },
                {
                    "command": [
                        "rewrite Rplus_0_r.",
                        "VernacExtend",
                        "d5c1fdd9d1c31f6ede268b5fbee697b051ea4fe2"
                    ]
                },
                {
                    "command": [
                        "replace (l + (Un n - l)) with (Un n); [ assumption | ring ].",
                        "VernacExtend",
                        "1b45fd40d85539d265c9e811fc3bd5164485d16e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_opp",
            "line_nb": 674,
            "steps": [
                {
                    "command": [
                        "intros An l.",
                        "VernacExtend",
                        "0cf30cbe02bcf469caf43d8ce8a7d101e16f2e9c"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; intros.",
                        "VernacExtend",
                        "add26482ec443227632a57519752bde439308595"
                    ]
                },
                {
                    "command": [
                        "elim (H eps H0); intros.",
                        "VernacExtend",
                        "ace4b126c6608622fb1152df39f2724078d34d25"
                    ]
                },
                {
                    "command": [
                        "exists x; intros.",
                        "VernacExtend",
                        "630f24a2d635df94b063a62023a90567ef134b19"
                    ]
                },
                {
                    "command": [
                        "unfold opp_seq; replace (- An n - - l) with (- (An n - l)); [ rewrite Rabs_Ropp | ring ].",
                        "VernacExtend",
                        "1da2e864469e2271bd93134418c3bd955c488cbd"
                    ]
                },
                {
                    "command": [
                        "apply H1; assumption.",
                        "VernacExtend",
                        "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decreasing_ineq",
            "line_nb": 682,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "assert (H1 := decreasing_growing _ H).",
                        "VernacExtend",
                        "c92741a681e9f6a72a655e79fe0b87b41e56d072"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := CV_opp _ _ H0).",
                        "VernacExtend",
                        "989af9e1ccf0ac5f9ed87d49c8f8000e810b24d3"
                    ]
                },
                {
                    "command": [
                        "assert (H3 := growing_ineq _ _ H1 H2).",
                        "VernacExtend",
                        "d140518fd65cbfad69add759e3fa9ea0d5479716"
                    ]
                },
                {
                    "command": [
                        "apply Ropp_le_cancel.",
                        "VernacExtend",
                        "b5845fa505cf45d1b1826b280ab3b8249238dd4d"
                    ]
                },
                {
                    "command": [
                        "unfold opp_seq in H3; apply H3.",
                        "VernacExtend",
                        "a3fea6fbaa39b382e674ca64268d80ce72edb61e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CV_minus",
            "line_nb": 690,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "replace (fun i:nat => An i - Bn i) with (fun i:nat => An i + opp_seq Bn i).",
                        "VernacExtend",
                        "6419d4be2da0190b7c54874d96f959a928ad5ad6"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; apply CV_plus.",
                        "VernacExtend",
                        "d0f9dcf78100bf3573d125c5b4aa28b996fcb191"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply CV_opp; assumption.",
                        "VernacExtend",
                        "148523003c42fc4af0b1d8ff04aee5630b9f3c52"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus, opp_seq; reflexivity.",
                        "VernacExtend",
                        "da1b7268f160a32f0d694093c8e134d7b2093543"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cv_infty_cv_R0",
            "line_nb": 699,
            "steps": [
                {
                    "command": [
                        "unfold cv_infty, Un_cv; unfold R_dist; intros.",
                        "VernacExtend",
                        "5ac26ef74d8122984f83b5d49155eee056d239da"
                    ]
                },
                {
                    "command": [
                        "elim (H0 (/ eps)); intros N0 H2.",
                        "VernacExtend",
                        "b37de0cad0d45838596a8385817f9208fc9dca86"
                    ]
                },
                {
                    "command": [
                        "exists N0; intros.",
                        "VernacExtend",
                        "e5b9decd3fd5f06277bf4eeacb6fae2a2f851d31"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; rewrite (Rabs_Rinv _ (H n)).",
                        "VernacExtend",
                        "3fc57c242ad9916632362f7ae49e1692252df6da"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (Rabs (Un n)).",
                        "VernacExtend",
                        "87ea0970c83764f8b99a010daa583be02d999549"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; apply H.",
                        "VernacExtend",
                        "9b9e792fbe22e3bcf0332d49218d1184fd9b1eaf"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "2ca74255a63c294f9442d956f32a2e3784636efb"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_reg_l with (/ eps).",
                        "VernacExtend",
                        "70eb18807f432c0bd78fe4e65e653436828a9971"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; assumption.",
                        "VernacExtend",
                        "7c8a6c48f8e12a680ed85ee789a9c10a10ee8701"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; rewrite (Rmult_comm (/ eps)); rewrite Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "e02ce435c32348488034fb5ae4776cf797b4cab7"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; apply Rlt_le_trans with (Un n).",
                        "VernacExtend",
                        "b88bd7cd27f6b1af828daf3cf521dd3236518343"
                    ]
                },
                {
                    "command": [
                        "apply H2; assumption.",
                        "VernacExtend",
                        "4a9f5fcfe7fc430a6576d9298552b6fe2f8ad298"
                    ]
                },
                {
                    "command": [
                        "apply RRle_abs.",
                        "VernacExtend",
                        "1333b00626244e19099bec7e0de632062c4070a3"
                    ]
                },
                {
                    "command": [
                        "red; intro; rewrite H4 in H1; elim (Rlt_irrefl _ H1).",
                        "VernacExtend",
                        "07228b8715a43781703305bc17b8287a9149f6cc"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_no_R0; apply H.",
                        "VernacExtend",
                        "c0eac17e7cc00315824d854ecf1e419940c43360"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "decreasing_prop",
            "line_nb": 716,
            "steps": [
                {
                    "command": [
                        "unfold Un_decreasing; intros.",
                        "VernacExtend",
                        "29275cdb441133f6b54fcb524863ddb111d2bc04"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn].",
                        "VernacExtend",
                        "81d1278a66d994c9ef1229ce58d1d47680f3003e"
                    ]
                },
                {
                    "command": [
                        "induction m as [| m Hrecm].",
                        "VernacExtend",
                        "93d2b60c268fff5d958c27bdb803738ea66bba5b"
                    ]
                },
                {
                    "command": [
                        "right; reflexivity.",
                        "VernacExtend",
                        "8c3bb7dc68da0fd9db3afd3e0cbaa04356e7152c"
                    ]
                },
                {
                    "command": [
                        "elim (le_Sn_O _ H0).",
                        "VernacExtend",
                        "912cb990a9402661103be256edde82bfaccb25c8"
                    ]
                },
                {
                    "command": [
                        "cut ((m <= n)%nat \\/ m = S n).",
                        "VernacExtend",
                        "ec696106dd8157f0d9e3657ec92e389aac22ff8d"
                    ]
                },
                {
                    "command": [
                        "intro; elim H1; intro.",
                        "VernacExtend",
                        "1301c759b4c493230f305c8c6fd6d684c10b8bbc"
                    ]
                },
                {
                    "command": [
                        "apply Rle_trans with (Un n).",
                        "VernacExtend",
                        "c7389fcabe950a23c5f0aa976182376c7f262216"
                    ]
                },
                {
                    "command": [
                        "apply H.",
                        "VernacExtend",
                        "4b47b71ad0f800d57cbdc591d68949e07decb540"
                    ]
                },
                {
                    "command": [
                        "apply Hrecn; assumption.",
                        "VernacExtend",
                        "09c4bfc615059e1cf9b030ea0c6389838481a775"
                    ]
                },
                {
                    "command": [
                        "rewrite H2; right; reflexivity.",
                        "VernacExtend",
                        "03b324cc95cb472cd1139b2810eb3aed0e88d18b"
                    ]
                },
                {
                    "command": [
                        "inversion H0; [ right; reflexivity | left; assumption ].",
                        "VernacExtend",
                        "e0ecfe20d3d42c9c578702bb744938f98dc58e2b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "cv_speed_pow_fact",
            "line_nb": 730,
            "steps": [
                {
                    "command": [
                        "intro; cut (Un_cv (fun n:nat => Rabs x ^ n / INR (fact n)) 0 -> Un_cv (fun n:nat => x ^ n / INR (fact n)) 0).",
                        "VernacExtend",
                        "b0964978d86f018abe69a179cbca5f89decfbbb1"
                    ]
                },
                {
                    "command": [
                        "intro; apply H.",
                        "VernacExtend",
                        "2155aadd67abfad07bb52771af5eefbf7e2e6097"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; intros; case (Req_dec x 0); intro.",
                        "VernacExtend",
                        "ccdd20dee1ea8ec563337a80078f920459166e65"
                    ]
                },
                {
                    "command": [
                        "exists 1%nat; intros.",
                        "VernacExtend",
                        "58edafff17b9668bf11ca27a9b37525cb250e4b8"
                    ]
                },
                {
                    "command": [
                        "rewrite H1; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; rewrite Rabs_R0; rewrite pow_ne_zero; [ unfold Rdiv; rewrite Rmult_0_l; rewrite Rabs_R0; assumption | red; intro; rewrite H3 in H2; elim (le_Sn_n _ H2) ].",
                        "VernacExtend",
                        "51078eedb5f66b57c1428f2ce0fd7429ed561a6e"
                    ]
                },
                {
                    "command": [
                        "assert (H2 := Rabs_pos_lt x H1); set (M := up (Rabs x)); cut (0 <= M)%Z.",
                        "VernacExtend",
                        "ac97dec74fd75d305136e1b607e4de124b0f761a"
                    ]
                },
                {
                    "command": [
                        "intro; elim (IZN M H3); intros M_nat H4.",
                        "VernacExtend",
                        "88e9b06ca237cf5bc9b6effd5300004bfa6149ef"
                    ]
                },
                {
                    "command": [
                        "set (Un := fun n:nat => Rabs x ^ (M_nat + n) / INR (fact (M_nat + n))).",
                        "VernacExtend",
                        "cb9584293cbe1be5f0a8ac513a22eb3d9251825b"
                    ]
                },
                {
                    "command": [
                        "cut (Un_cv Un 0); unfold Un_cv; unfold R_dist; intros.",
                        "VernacExtend",
                        "27048a7db0ddcd6d67177cb8aa88e8b196254e79"
                    ]
                },
                {
                    "command": [
                        "elim (H5 eps H0); intros N H6.",
                        "VernacExtend",
                        "ccbe781a586344cb0866304c0121e57d8822ece6"
                    ]
                },
                {
                    "command": [
                        "exists (M_nat + N)%nat; intros; cut (exists p : nat, (p >= N)%nat /\\ n = (M_nat + p)%nat).",
                        "VernacExtend",
                        "7b116214bd388b5b56a5d451cb0ddcb73fe6ca4b"
                    ]
                },
                {
                    "command": [
                        "intro; elim H8; intros p H9.",
                        "VernacExtend",
                        "c48009b29f3e645ada202884e4258302b73ead54"
                    ]
                },
                {
                    "command": [
                        "elim H9; intros; rewrite H11; unfold Un in H6; apply H6; assumption.",
                        "VernacExtend",
                        "9f3ea72ebfdda9dc8a21efa08c415374e6dc090d"
                    ]
                },
                {
                    "command": [
                        "exists (n - M_nat)%nat.",
                        "VernacExtend",
                        "ad26e3c53ba53e1518aca222ff5b00d419aebd44"
                    ]
                },
                {
                    "command": [
                        "split.",
                        "VernacExtend",
                        "55abc140132bd88981001ac656020469a8d503eb"
                    ]
                },
                {
                    "command": [
                        "unfold ge; apply (fun p n m:nat => plus_le_reg_l n m p) with M_nat; rewrite <- le_plus_minus.",
                        "VernacExtend",
                        "bf6ac7cdd5aedbff1bec3038f6fd606468169497"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with (M_nat + N)%nat.",
                        "VernacExtend",
                        "60f6b60a95eb55f920221909e5c1688374d71e86"
                    ]
                },
                {
                    "command": [
                        "apply le_plus_l.",
                        "VernacExtend",
                        "30f3305f62c97c24af24578d88eaa888a0053ec1"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply le_plus_minus; apply le_trans with (M_nat + N)%nat; [ apply le_plus_l | assumption ].",
                        "VernacExtend",
                        "76f8e62177f9e8caa3976554c5419dee705ff7d4"
                    ]
                },
                {
                    "command": [
                        "set (Vn := fun n:nat => Rabs x * (Un 0%nat / INR (S n))).",
                        "VernacExtend",
                        "743e23dcb9d92d58ea793ddfd18a8f1579b4fdfc"
                    ]
                },
                {
                    "command": [
                        "cut (1 <= M_nat)%nat.",
                        "VernacExtend",
                        "958943c52a2b0215f3c29b573eb3071b5d0cd528"
                    ]
                },
                {
                    "command": [
                        "intro; cut (forall n:nat, 0 < Un n).",
                        "VernacExtend",
                        "b45f521bf8190dbafae81b0f702b2d9338601ee9"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Un_decreasing Un).",
                        "VernacExtend",
                        "8a21ba7655f0aebfdd97ad6d6a594cf075cd9c4c"
                    ]
                },
                {
                    "command": [
                        "intro; cut (forall n:nat, Un (S n) <= Vn n).",
                        "VernacExtend",
                        "33b1a0160038d37bbd82d9efbdf55750b4e068fe"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Un_cv Vn 0).",
                        "VernacExtend",
                        "7124bcb98ab6bcc0874a68c883c73dab0936ad3c"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; intros.",
                        "VernacExtend",
                        "add26482ec443227632a57519752bde439308595"
                    ]
                },
                {
                    "command": [
                        "elim (H10 eps0 H5); intros N1 H11.",
                        "VernacExtend",
                        "aa61217828701e4bc84b7e98bd275c8a039468f3"
                    ]
                },
                {
                    "command": [
                        "exists (S N1); intros.",
                        "VernacExtend",
                        "98ed3d41e0e63de246c91d7dba62b8cf65deb727"
                    ]
                },
                {
                    "command": [
                        "cut (forall n:nat, 0 < Vn n).",
                        "VernacExtend",
                        "970d4dc9b851af8880a8a5a9291c519e4b1c80f4"
                    ]
                },
                {
                    "command": [
                        "intro; apply Rle_lt_trans with (Rabs (Vn (pred n) - 0)).",
                        "VernacExtend",
                        "bc3241bd97d9123ca9a857259eff9812340e7f25"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Rabs_right.",
                        "VernacExtend",
                        "5107c29a40d66107cd65c8b15750ff5d33d00b0a"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Ropp_0; do 2 rewrite Rplus_0_r; replace n with (S (pred n)).",
                        "VernacExtend",
                        "acfee042d2181581a9465fa535cf0ecd22d69fbf"
                    ]
                },
                {
                    "command": [
                        "apply H9.",
                        "VernacExtend",
                        "d0479838914cfca7017024564d1663cd6466cb01"
                    ]
                },
                {
                    "command": [
                        "inversion H12; simpl; reflexivity.",
                        "VernacExtend",
                        "5d0ac5b78fdfdf318aedaef08451f1708f73a999"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; left; apply H13.",
                        "VernacExtend",
                        "f1e2c12d655bc4f25fb35c95c0dfc0f857ea2c61"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; unfold Rminus; rewrite Ropp_0; rewrite Rplus_0_r; left; apply H7.",
                        "VernacExtend",
                        "5b61105d0f8c44280583c39e74e5c5af0350e38f"
                    ]
                },
                {
                    "command": [
                        "apply H11; unfold ge; apply le_S_n; replace (S (pred n)) with n; [ unfold ge in H12; exact H12 | inversion H12; simpl; reflexivity ].",
                        "VernacExtend",
                        "284fd968f313f20a6091d0334f879532c584558e"
                    ]
                },
                {
                    "command": [
                        "intro; apply Rlt_le_trans with (Un (S n0)); [ apply H7 | apply H9 ].",
                        "VernacExtend",
                        "9e508fc336d0257df8186c53a0fa544ed9770992"
                    ]
                },
                {
                    "command": [
                        "cut (cv_infty (fun n:nat => INR (S n))).",
                        "VernacExtend",
                        "dfdd3d0d73af9a5e24b6518aa15e2ec76f64d957"
                    ]
                },
                {
                    "command": [
                        "intro; cut (Un_cv (fun n:nat => / INR (S n)) 0).",
                        "VernacExtend",
                        "723e713ea7ba27f9fd5a32c4356ce127b8327773"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv, R_dist; intros; unfold Vn.",
                        "VernacExtend",
                        "139b0869eaa6db9b67aa7d3f9374626ebcd9285e"
                    ]
                },
                {
                    "command": [
                        "cut (0 < eps1 / (Rabs x * Un 0%nat)).",
                        "VernacExtend",
                        "d0ad869974ea3f079298b5b14d4a10ed17c39598"
                    ]
                },
                {
                    "command": [
                        "intro; elim (H11 _ H13); intros N H14.",
                        "VernacExtend",
                        "ac0b15c11ced55505a3436239fa0a8b69757c270"
                    ]
                },
                {
                    "command": [
                        "exists N; intros; replace (Rabs x * (Un 0%nat / INR (S n)) - 0) with (Rabs x * Un 0%nat * (/ INR (S n) - 0)); [ idtac | unfold Rdiv; ring ].",
                        "VernacExtend",
                        "a05b72d20a54a8543c5151741065af251f4133cb"
                    ]
                },
                {
                    "command": [
                        "rewrite Rabs_mult; apply Rmult_lt_reg_l with (/ Rabs (Rabs x * Un 0%nat)).",
                        "VernacExtend",
                        "c79f6beff11f8af964ee2d9cdae962299e54e862"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply Rabs_pos_lt.",
                        "VernacExtend",
                        "6f1b4f322e563834885ccb901ce5726dcbee2da5"
                    ]
                },
                {
                    "command": [
                        "apply prod_neq_R0.",
                        "VernacExtend",
                        "4e401b99cc3c24b61ca502aa7107071c427501ea"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_no_R0; assumption.",
                        "VernacExtend",
                        "919603fae9f5552a2987bbb604439a06966af0d9"
                    ]
                },
                {
                    "command": [
                        "assert (H16 := H7 0%nat); red; intro; rewrite H17 in H16; elim (Rlt_irrefl _ H16).",
                        "VernacExtend",
                        "acf3adc381c32222fe788b15e6b3a008e3f4c606"
                    ]
                },
                {
                    "command": [
                        "rewrite <- Rmult_assoc; rewrite <- Rinv_l_sym.",
                        "VernacExtend",
                        "eccb067dc9e836ad48bf16c61cd308004f5d6712"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "replace (/ Rabs (Rabs x * Un 0%nat) * eps1) with (eps1 / (Rabs x * Un 0%nat)).",
                        "VernacExtend",
                        "a2e03ac7defb63ddbba9633ce7bf174091f7553e"
                    ]
                },
                {
                    "command": [
                        "apply H14; assumption.",
                        "VernacExtend",
                        "338d456a5dab0f1895bf23ff4f31980f32a74fc3"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite (Rabs_right (Rabs x * Un 0%nat)).",
                        "VernacExtend",
                        "4cfc054daeb044a05b4d9a419f53bfd6c4054519"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_comm.",
                        "VernacExtend",
                        "f6a795952024dfb6a8db9b1b3050b14eb7f075aa"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; apply Rmult_le_pos.",
                        "VernacExtend",
                        "7d007ccbe591f3ffd6982f0d57bed1df4ebf343e"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "left; apply H7.",
                        "VernacExtend",
                        "9c9567153cd60ec6528d356fca25028c4bf9101d"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_no_R0.",
                        "VernacExtend",
                        "8d37b098d9cb0f050cfd8b29c49d318c2b960566"
                    ]
                },
                {
                    "command": [
                        "apply prod_neq_R0; [ apply Rabs_no_R0; assumption | assert (H16 := H7 0%nat); red; intro; rewrite H17 in H16; elim (Rlt_irrefl _ H16) ].",
                        "VernacExtend",
                        "0fca49fa3d9bcc9d63514a6fe8fa173744da1e21"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7122edbd68559f255bfed03dc640472ed14eb4ef"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "82903105628960b0c43643a9b600deba7908cccc"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos_lt; assumption.",
                        "VernacExtend",
                        "1143a29168ffe77f62e90c548869eca12a54b7db"
                    ]
                },
                {
                    "command": [
                        "apply H7.",
                        "VernacExtend",
                        "2b15ecb9bfc4fe9c511bb37e66420a222789f1a6"
                    ]
                },
                {
                    "command": [
                        "apply (cv_infty_cv_R0 (fun n:nat => INR (S n))).",
                        "VernacExtend",
                        "1581ddd541ab6786ea2d906ce8563793c78ba007"
                    ]
                },
                {
                    "command": [
                        "intro; apply not_O_INR; discriminate.",
                        "VernacExtend",
                        "26d7e939e984528be20a8deab4078fc7c987fab6"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "unfold cv_infty; intro; destruct (total_order_T M0 0) as [[Hlt|Heq]|Hgt].",
                        "VernacExtend",
                        "6620223b4cfb5a0024cea272437edde34ad8cf9d"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat; intros.",
                        "VernacExtend",
                        "9f406775453fa10dd464f05a32d849b36e740518"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_trans with 0; [ assumption | apply lt_INR_0; apply lt_O_Sn ].",
                        "VernacExtend",
                        "cf32f5abbec2b0e7e08605c29f1a9c1b19e5ad07"
                    ]
                },
                {
                    "command": [
                        "exists 0%nat; intros; rewrite Heq; apply lt_INR_0; apply lt_O_Sn.",
                        "VernacExtend",
                        "5dbd86f76d1c2af866f46c4697c05b9b75afc061"
                    ]
                },
                {
                    "command": [
                        "set (M0_z := up M0).",
                        "VernacExtend",
                        "7b99833d6e2094d032fda8a73e9daf39e06ba0ed"
                    ]
                },
                {
                    "command": [
                        "assert (H10 := archimed M0).",
                        "VernacExtend",
                        "ea643657ab5f4696b451fedd981796c443d85630"
                    ]
                },
                {
                    "command": [
                        "cut (0 <= M0_z)%Z.",
                        "VernacExtend",
                        "394ef99822ebe8218cdc805b1803baf7628e3190"
                    ]
                },
                {
                    "command": [
                        "intro; elim (IZN _ H11); intros M0_nat H12.",
                        "VernacExtend",
                        "9d7cfa0fa89da01ab85bb7e30dac84675e547772"
                    ]
                },
                {
                    "command": [
                        "exists M0_nat; intros.",
                        "VernacExtend",
                        "bc6834b99d1d9c3fe725eac4dbba8f69010d7ab4"
                    ]
                },
                {
                    "command": [
                        "apply Rlt_le_trans with (IZR M0_z).",
                        "VernacExtend",
                        "4927b683fe29bdcc1fe3b3129b14c607b952a94a"
                    ]
                },
                {
                    "command": [
                        "elim H10; intros; assumption.",
                        "VernacExtend",
                        "441b8572d6746494b264263afd889422a8335e89"
                    ]
                },
                {
                    "command": [
                        "rewrite H12; rewrite <- INR_IZR_INZ; apply le_INR.",
                        "VernacExtend",
                        "ba9d3da23305baf75d40ea9db4e04a578d8b04c1"
                    ]
                },
                {
                    "command": [
                        "apply le_trans with n; [ assumption | apply le_n_Sn ].",
                        "VernacExtend",
                        "d30aaffc32e15bdf5638b68f3b5ef7b285285534"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; left; simpl; unfold M0_z; apply Rlt_trans with M0; [ assumption | elim H10; intros; assumption ].",
                        "VernacExtend",
                        "c51e0361bb0e2e02c6141cd886accd90109439bd"
                    ]
                },
                {
                    "command": [
                        "intro; apply Rle_trans with (Rabs x * Un n * / INR (S n)).",
                        "VernacExtend",
                        "59c64491f707cc519a283a0dd13fc358d2282c86"
                    ]
                },
                {
                    "command": [
                        "unfold Un; replace (M_nat + S n)%nat with (M_nat + n + 1)%nat.",
                        "VernacExtend",
                        "0d5eb6c564c2946ff720d0bccb309f05e2b252df"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_add; replace (Rabs x ^ 1) with (Rabs x); [ idtac | simpl; ring ].",
                        "VernacExtend",
                        "fa74ac8c5c19344798b2ae23a948aa13c15f4e05"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite <- (Rmult_comm (Rabs x)); repeat rewrite Rmult_assoc; repeat apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "e6765e15e731d1e491db32ed2bedd895e611d657"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "left; apply pow_lt; assumption.",
                        "VernacExtend",
                        "ee2a78d757c0b0e26dca0d9bbe4a972340951f49"
                    ]
                },
                {
                    "command": [
                        "replace (M_nat + n + 1)%nat with (S (M_nat + n)).",
                        "VernacExtend",
                        "c45f2b87cca3f6ba2aaf0800b23dd302c451f3fd"
                    ]
                },
                {
                    "command": [
                        "rewrite fact_simpl; rewrite mult_comm; rewrite mult_INR; rewrite Rinv_mult_distr.",
                        "VernacExtend",
                        "0606791728efbb48ab3da3fe19d80268c84a2c1c"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "509839294acd7016ba82d594bfdb05afe131eed3"
                    ]
                },
                {
                    "command": [
                        "left; apply Rinv_0_lt_compat; apply lt_INR_0; apply neq_O_lt; red; intro; assert (H10 := eq_sym H9); elim (fact_neq_0 _ H10).",
                        "VernacExtend",
                        "d54d0002365a839e64076b1755b753a31659decf"
                    ]
                },
                {
                    "command": [
                        "left; apply Rinv_lt_contravar.",
                        "VernacExtend",
                        "b2ddbb9d908d1faa2074899fda8a578947b3bc44"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_lt_0_compat; apply lt_INR_0; apply lt_O_Sn.",
                        "VernacExtend",
                        "e9b8cd2735fc0a889e8dbb9fbd722ed991d884e8"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR; apply lt_n_S.",
                        "VernacExtend",
                        "2b89b20d2fc47eb5ec6e796d3f20fe126fc00772"
                    ]
                },
                {
                    "command": [
                        "pattern n at 1; replace n with (0 + n)%nat; [ idtac | reflexivity ].",
                        "VernacExtend",
                        "d9ecf0b2ed168c6ab64de3af51fc9a022c4966ac"
                    ]
                },
                {
                    "command": [
                        "apply plus_lt_compat_r.",
                        "VernacExtend",
                        "294b96a25c631b152bb3601a5898aaf9f8651889"
                    ]
                },
                {
                    "command": [
                        "apply lt_le_trans with 1%nat; [ apply lt_O_Sn | assumption ].",
                        "VernacExtend",
                        "96e5a5f449cae7953a892cd40663623300017d77"
                    ]
                },
                {
                    "command": [
                        "apply INR_fact_neq_0.",
                        "VernacExtend",
                        "9f4443217b6f3c8f07648392448a37630452a203"
                    ]
                },
                {
                    "command": [
                        "apply not_O_INR; discriminate.",
                        "VernacExtend",
                        "b0377726251b564451c17d0f089ec6fd746a82be"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "unfold Vn; rewrite Rmult_assoc; unfold Rdiv; rewrite (Rmult_comm (Un 0%nat)); rewrite (Rmult_comm (Un n)).",
                        "VernacExtend",
                        "294812fd38d12e0220f0235dc25534dbc5076fa0"
                    ]
                },
                {
                    "command": [
                        "repeat apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "1985cca070eeec482993c5ad5a4655ed2e78bfb7"
                    ]
                },
                {
                    "command": [
                        "apply Rabs_pos.",
                        "VernacExtend",
                        "8e57e214403458a4dc8dafc960971b86cf3b856d"
                    ]
                },
                {
                    "command": [
                        "left; apply Rinv_0_lt_compat; apply lt_INR_0; apply lt_O_Sn.",
                        "VernacExtend",
                        "7117f748a26669112ed5e1e738166ad60634e09a"
                    ]
                },
                {
                    "command": [
                        "apply decreasing_prop; [ assumption | apply le_O_n ].",
                        "VernacExtend",
                        "a9ae1e28fa1ea4a5d7233f5903018eaadb38fe6c"
                    ]
                },
                {
                    "command": [
                        "unfold Un_decreasing; intro; unfold Un.",
                        "VernacExtend",
                        "93269e42008751cf5d79d4fa7969762bd372161e"
                    ]
                },
                {
                    "command": [
                        "replace (M_nat + S n)%nat with (M_nat + n + 1)%nat.",
                        "VernacExtend",
                        "4473e7a63a1354e7180d4e5f11cd54409b4cfda7"
                    ]
                },
                {
                    "command": [
                        "rewrite pow_add; unfold Rdiv; rewrite Rmult_assoc; apply Rmult_le_compat_l.",
                        "VernacExtend",
                        "3e272b6e4d3a6ebc04c6871053378520c5b9bc61"
                    ]
                },
                {
                    "command": [
                        "left; apply pow_lt; assumption.",
                        "VernacExtend",
                        "ee2a78d757c0b0e26dca0d9bbe4a972340951f49"
                    ]
                },
                {
                    "command": [
                        "replace (Rabs x ^ 1) with (Rabs x); [ idtac | simpl; ring ].",
                        "VernacExtend",
                        "15f69253a1fe7f6b5fb04a25602052cfef9937dc"
                    ]
                },
                {
                    "command": [
                        "replace (M_nat + n + 1)%nat with (S (M_nat + n)).",
                        "VernacExtend",
                        "c45f2b87cca3f6ba2aaf0800b23dd302c451f3fd"
                    ]
                },
                {
                    "command": [
                        "apply Rmult_le_reg_l with (INR (fact (S (M_nat + n)))).",
                        "VernacExtend",
                        "ba24a5ec459f4c3c40d14a82d524be0fd432d06c"
                    ]
                },
                {
                    "command": [
                        "apply lt_INR_0; apply neq_O_lt; red; intro; assert (H9 := eq_sym H8); elim (fact_neq_0 _ H9).",
                        "VernacExtend",
                        "0fde70b496d2388b37110f72fdc4577fd787a4e6"
                    ]
                },
                {
                    "command": [
                        "rewrite (Rmult_comm (Rabs x)); rewrite <- Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "b1b28a5ce0911f92d5a7752115a5daffc20ce98f"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_l.",
                        "VernacExtend",
                        "1ba58092cf1ca2fa8155dfa9c64894290b0f39df"
                    ]
                },
                {
                    "command": [
                        "rewrite fact_simpl; rewrite mult_INR; rewrite Rmult_assoc; rewrite <- Rinv_r_sym.",
                        "VernacExtend",
                        "94a068c1fd5db483e4a3f68443967739940dbfa9"
                    ]
                },
                {
                    "command": [
                        "rewrite Rmult_1_r; apply Rle_trans with (INR M_nat).",
                        "VernacExtend",
                        "70ba9d1fae03af06e4d84a7bb398fe2e2a6b53e1"
                    ]
                },
                {
                    "command": [
                        "left; rewrite INR_IZR_INZ.",
                        "VernacExtend",
                        "20628c129cde27215b1b3d2e7ed21bf6cb8fc504"
                    ]
                },
                {
                    "command": [
                        "rewrite <- H4; assert (H8 := archimed (Rabs x)); elim H8; intros; assumption.",
                        "VernacExtend",
                        "569b26fffbbb646163721453b92f0d9ffe5c3c4e"
                    ]
                },
                {
                    "command": [
                        "apply le_INR; omega.",
                        "VernacExtend",
                        "fae807d5a7ce9f4f75663f0eb8a547d3d01c722a"
                    ]
                },
                {
                    "command": [
                        "apply INR_fact_neq_0.",
                        "VernacExtend",
                        "9f4443217b6f3c8f07648392448a37630452a203"
                    ]
                },
                {
                    "command": [
                        "apply INR_fact_neq_0.",
                        "VernacExtend",
                        "9f4443217b6f3c8f07648392448a37630452a203"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "ring.",
                        "VernacExtend",
                        "baadd9fc4c175005af409bb466fcea9fab25b4e6"
                    ]
                },
                {
                    "command": [
                        "intro; unfold Un; unfold Rdiv; apply Rmult_lt_0_compat.",
                        "VernacExtend",
                        "7e73a69754d69ea105353badd05d6a0c2071ce1a"
                    ]
                },
                {
                    "command": [
                        "apply pow_lt; assumption.",
                        "VernacExtend",
                        "5f7321ecf7e8d07f288f83dc467e0fce65f0a40b"
                    ]
                },
                {
                    "command": [
                        "apply Rinv_0_lt_compat; apply lt_INR_0; apply neq_O_lt; red; intro; assert (H8 := eq_sym H7); elim (fact_neq_0 _ H8).",
                        "VernacExtend",
                        "3e75c03f338adb583620f2311f9f076eb1cf12c1"
                    ]
                },
                {
                    "command": [
                        "clear Un Vn; apply INR_le; simpl.",
                        "VernacExtend",
                        "971f809933079bd275c47e3b1d847562541f86e6"
                    ]
                },
                {
                    "command": [
                        "induction M_nat as [| M_nat HrecM_nat].",
                        "VernacExtend",
                        "66e4a128b24a1f4dd93dfca7e36b8bd6a0a602d3"
                    ]
                },
                {
                    "command": [
                        "assert (H6 := archimed (Rabs x)); fold M in H6; elim H6; intros.",
                        "VernacExtend",
                        "8cdd2e6d8298a2f2c2cdf4ff268dcfb2b87a174d"
                    ]
                },
                {
                    "command": [
                        "rewrite H4 in H7; rewrite <- INR_IZR_INZ in H7.",
                        "VernacExtend",
                        "b827bd059d3a881268fbdd6d26d65e90edd1402d"
                    ]
                },
                {
                    "command": [
                        "simpl in H7; elim (Rlt_irrefl _ (Rlt_trans _ _ _ H2 H7)).",
                        "VernacExtend",
                        "55f8c0330619a996bf1b4b563d8b102c59520820"
                    ]
                },
                {
                    "command": [
                        "apply (le_INR 1); apply le_n_S; apply le_O_n.",
                        "VernacExtend",
                        "e44e0bb62b2454a6fa68f8358daec7a640a0a457"
                    ]
                },
                {
                    "command": [
                        "apply le_IZR; simpl; left; apply Rlt_trans with (Rabs x).",
                        "VernacExtend",
                        "ceae859ec607c43f86b78ec48f980a18be00a136"
                    ]
                },
                {
                    "command": [
                        "assumption.",
                        "VernacExtend",
                        "41f0308313ff87e6ab2782f90d6021ec4b55d932"
                    ]
                },
                {
                    "command": [
                        "elim (archimed (Rabs x)); intros; assumption.",
                        "VernacExtend",
                        "41319d16c690d0d762f7098dcd707c8b628ba8bc"
                    ]
                },
                {
                    "command": [
                        "unfold Un_cv; unfold R_dist; intros; elim (H eps H0); intros.",
                        "VernacExtend",
                        "d7a54a5606f4526c3ca5d571e8a8ffa4b86059da"
                    ]
                },
                {
                    "command": [
                        "exists x0; intros; apply Rle_lt_trans with (Rabs (Rabs x ^ n / INR (fact n) - 0)).",
                        "VernacExtend",
                        "2714da7d9e1764ce401bdc16919c9bf8417c6b00"
                    ]
                },
                {
                    "command": [
                        "unfold Rminus; rewrite Ropp_0; do 2 rewrite Rplus_0_r; rewrite (Rabs_right (Rabs x ^ n / INR (fact n))).",
                        "VernacExtend",
                        "f06d63e97e8325b0d603ab3f371c8e4977c54094"
                    ]
                },
                {
                    "command": [
                        "unfold Rdiv; rewrite Rabs_mult; rewrite (Rabs_right (/ INR (fact n))).",
                        "VernacExtend",
                        "007e882ba300bb19441118729ca98baf22c007fe"
                    ]
                },
                {
                    "command": [
                        "rewrite RPow_abs; right; reflexivity.",
                        "VernacExtend",
                        "e268343f361fbb885441df499d8a1c1fa47738ce"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; left; apply Rinv_0_lt_compat; apply lt_INR_0; apply neq_O_lt; red; intro; assert (H4 := eq_sym H3); elim (fact_neq_0 _ H4).",
                        "VernacExtend",
                        "51f6fc2dc09fc100201afdf4ada32c08c36315d3"
                    ]
                },
                {
                    "command": [
                        "apply Rle_ge; unfold Rdiv; apply Rmult_le_pos.",
                        "VernacExtend",
                        "7b8055716f7094375c2f1388b0cc102cb268ee7b"
                    ]
                },
                {
                    "command": [
                        "case (Req_dec x 0); intro.",
                        "VernacExtend",
                        "d007216a2c7cab927c7232c952ce1e1fc525442f"
                    ]
                },
                {
                    "command": [
                        "rewrite H3; rewrite Rabs_R0.",
                        "VernacExtend",
                        "3acb406e3067cb91fb699154432b70fa000e7c30"
                    ]
                },
                {
                    "command": [
                        "induction n as [| n Hrecn]; [ simpl; left; apply Rlt_0_1 | simpl; rewrite Rmult_0_l; right; reflexivity ].",
                        "VernacExtend",
                        "913d9d8150e8d7476d06d44d29fa4b2ec5ff6aac"
                    ]
                },
                {
                    "command": [
                        "left; apply pow_lt; apply Rabs_pos_lt; assumption.",
                        "VernacExtend",
                        "ae242ef2c0466ccaa0a47bc0586ea69445593357"
                    ]
                },
                {
                    "command": [
                        "left; apply Rinv_0_lt_compat; apply lt_INR_0; apply neq_O_lt; red; intro; assert (H4 := eq_sym H3); elim (fact_neq_0 _ H4).",
                        "VernacExtend",
                        "964607c8b232135bf8c46aa05630f8decafc46ba"
                    ]
                },
                {
                    "command": [
                        "apply H1; assumption.",
                        "VernacExtend",
                        "fad0ef9dccdc207ba48ae84d9c57202bcc0d529f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}