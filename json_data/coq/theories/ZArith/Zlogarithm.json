{
    "filename": "theories/ZArith/Zlogarithm.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import ZArith_base Omega Zcomplements Zpower.",
            "VernacRequire",
            "7696e025690859b5f15be0f9acc712b83d6bbe4f"
        ],
        [
            "Local Open Scope Z_scope.",
            "VernacOpenCloseScope",
            "5313930c0cd5fa63810c1c79463485ebf0638bad"
        ],
        [
            "Section Log_pos.",
            "VernacBeginSection",
            "6b22adfb5773c6abbe6a17515584ff5dfbf0458c"
        ],
        [
            "Fixpoint log_inf (p:positive) : Z := match p with | xH => 0 | xO q => Z.succ (log_inf q) | xI q => Z.succ (log_inf q) end.",
            "VernacFixpoint",
            "13c587d65a13b686dd5575b64aed83e2486af361"
        ],
        [
            "Fixpoint log_sup (p:positive) : Z := match p with | xH => 0 | xO n => Z.succ (log_sup n) | xI n => Z.succ (Z.succ (log_inf n)) end.",
            "VernacFixpoint",
            "00e0e26d75a4404e33895e73e386087205480ec7"
        ],
        [
            "Hint Unfold log_inf log_sup.",
            "VernacHints",
            "27a5eab91718147e3f7727c67ba5c7c42884752b"
        ],
        [
            "Lemma Psize_log_inf : forall p, Zpos (Pos.size p) = Z.succ (log_inf p).",
            "VernacStartTheoremProof",
            "d2b4d076b5a3838ad51cefa9ba595e6c3899e752"
        ],
        [
            "induction p; simpl; now rewrite ?Pos2Z.inj_succ, ?IHp.",
            "VernacExtend",
            "2d264d96b5eba6bc5514a3f5d37b7fe6f6b345e1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zlog2_log_inf : forall p, Z.log2 (Zpos p) = log_inf p.",
            "VernacStartTheoremProof",
            "6e72c534b5810caa3bcb99b7c1e6f0c09bbe840b"
        ],
        [
            "unfold Z.log2.",
            "VernacExtend",
            "15c81d2bcb15bc4e8ba97120b78ef6e8e2686c89"
        ],
        [
            "destruct p; simpl; trivial; apply Psize_log_inf.",
            "VernacExtend",
            "7a1ec67f4a7af253372def7b93f73dbc715a119d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Zlog2_up_log_sup : forall p, Z.log2_up (Zpos p) = log_sup p.",
            "VernacStartTheoremProof",
            "e5de4bae52ae8319f158161d9b61365bf064c5df"
        ],
        [
            "induction p; simpl log_sup.",
            "VernacExtend",
            "1d144f5ce6360d104d53678acac43bcc2b5ca7d4"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "change (Zpos p~1) with (2*(Zpos p)+1).",
            "VernacExtend",
            "3b32840e92933baa209d50a8243d1ab9f7653b25"
        ],
        [
            "rewrite Z.log2_up_succ_double, Zlog2_log_inf; try easy.",
            "VernacExtend",
            "0fef9f34e0e7716d407419d6ed21dbd3758abec7"
        ],
        [
            "unfold Z.succ.",
            "VernacExtend",
            "d3292e8337e33f78eeb3f491cfdb2987c4452e05"
        ],
        [
            "now rewrite !(Z.add_comm _ 1), Z.add_assoc.",
            "VernacExtend",
            "51f7b64acd4d9707085649e9f5eb4f5eec9b40a3"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "change (Zpos p~0) with (2*Zpos p).",
            "VernacExtend",
            "41a28864a30afbe38ce6cdbc4d5cbec8b95ee828"
        ],
        [
            "now rewrite Z.log2_up_double, IHp.",
            "VernacExtend",
            "5661769c2f5fb1f2c7be6baff8f19b0496bb1364"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Z.le_trans: zarith.",
            "VernacHints",
            "5422d2b5613275bc88ec304e967f217c06e6660c"
        ],
        [
            "Theorem log_inf_correct : forall x:positive, 0 <= log_inf x /\\ two_p (log_inf x) <= Zpos x < two_p (Z.succ (log_inf x)).",
            "VernacStartTheoremProof",
            "823f6ca1a23e1dbf366c9e47fbcd452cc825d926"
        ],
        [
            "simple induction x; intros; simpl; [ elim H; intros Hp HR; clear H; split; [ auto with zarith | rewrite two_p_S with (x := Z.succ (log_inf p)) by (apply Z.le_le_succ_r; trivial); rewrite two_p_S by trivial; rewrite two_p_S in HR by trivial; rewrite (BinInt.Pos2Z.inj_xI p); omega ] | elim H; intros Hp HR; clear H; split; [ auto with zarith | rewrite two_p_S with (x := Z.succ (log_inf p)) by (apply Z.le_le_succ_r; trivial); rewrite two_p_S by trivial; rewrite two_p_S in HR by trivial; rewrite (BinInt.Pos2Z.inj_xO p); omega ] | unfold two_power_pos; unfold shift_pos; simpl; omega ].",
            "VernacExtend",
            "1257163ee1f47b05164bcc73a50a10b9ff755cd7"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition log_inf_correct1 (p:positive) := proj1 (log_inf_correct p).",
            "VernacDefinition",
            "18522cd078daca8ac4d599d8a0f3c06aad3fb16e"
        ],
        [
            "Definition log_inf_correct2 (p:positive) := proj2 (log_inf_correct p).",
            "VernacDefinition",
            "1d6dba4cd28858491e7f6fcf4bbbf3b731fe885e"
        ],
        [
            "Opaque log_inf_correct1 log_inf_correct2.",
            "VernacSetOpacity",
            "b66055fa05da7745850d902d86ff6b9ce3b02b02"
        ],
        [
            "Hint Resolve log_inf_correct1 log_inf_correct2: zarith.",
            "VernacHints",
            "f0147581cbc9ce90637e7f7522e847db7adb5a0c"
        ],
        [
            "Lemma log_sup_correct1 : forall p:positive, 0 <= log_sup p.",
            "VernacStartTheoremProof",
            "207f3d46f60d7ae11d9a8cf673e8eb1123a9204a"
        ],
        [
            "simple induction p; intros; simpl; auto with zarith.",
            "VernacExtend",
            "72b5058b25d1166601035bcdc85abfbcf7ebfb53"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem log_sup_log_inf : forall p:positive, IF Zpos p = two_p (log_inf p) then Zpos p = two_p (log_sup p) else log_sup p = Z.succ (log_inf p).",
            "VernacStartTheoremProof",
            "8aada7df12fadcb0a5a3fd83aad8cf9991197ac3"
        ],
        [
            "simple induction p; intros; [ elim H; right; simpl; rewrite (two_p_S (log_inf p0) (log_inf_correct1 p0)); rewrite BinInt.Pos2Z.inj_xI; unfold Z.succ; omega | elim H; clear H; intro Hif; [ left; simpl; rewrite (two_p_S (log_inf p0) (log_inf_correct1 p0)); rewrite (two_p_S (log_sup p0) (log_sup_correct1 p0)); rewrite <- (proj1 Hif); rewrite <- (proj2 Hif); auto | right; simpl; rewrite (two_p_S (log_inf p0) (log_inf_correct1 p0)); rewrite BinInt.Pos2Z.inj_xO; unfold Z.succ; omega ] | left; auto ].",
            "VernacExtend",
            "09d35d8f1140de2d88f7488fbf486817068e559c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem log_sup_correct2 : forall x:positive, two_p (Z.pred (log_sup x)) < Zpos x <= two_p (log_sup x).",
            "VernacStartTheoremProof",
            "bcfab73015ec1a2a239e6e1cd4c5a4b9010e944e"
        ],
        [
            "intro.",
            "VernacExtend",
            "3999be354c758ba0d1866e0fcc78a7288779a224"
        ],
        [
            "elim (log_sup_log_inf x).",
            "VernacExtend",
            "0c24c9cb3f4112960f54d3ea8040c033243df7a7"
        ],
        [
            "intros [E1 E2]; rewrite E2.",
            "VernacExtend",
            "d683746cf57cc2637b53ca4217e92f344d66cce9"
        ],
        [
            "split; [ apply two_p_pred; apply log_sup_correct1 | apply Z.le_refl ].",
            "VernacExtend",
            "5f6f6970ae8ec0e0c798e3c29cac915c76a0e3c0"
        ],
        [
            "intros [E1 E2]; rewrite E2.",
            "VernacExtend",
            "d683746cf57cc2637b53ca4217e92f344d66cce9"
        ],
        [
            "rewrite (Z.pred_succ (log_inf x)).",
            "VernacExtend",
            "d10b997a03dce8ef6990b132484a7066831b9503"
        ],
        [
            "generalize (log_inf_correct2 x); omega.",
            "VernacExtend",
            "f89bd55ef6f89157fc3d3b5dd30bcc4a7daf139d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma log_inf_le_log_sup : forall p:positive, log_inf p <= log_sup p.",
            "VernacStartTheoremProof",
            "29ae1e565c321077e4d509cb4bdb568529fc7dce"
        ],
        [
            "simple induction p; simpl; intros; omega.",
            "VernacExtend",
            "a914393d443bfd2c5379b350c3e7a8b1c99d8cc1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma log_sup_le_Slog_inf : forall p:positive, log_sup p <= Z.succ (log_inf p).",
            "VernacStartTheoremProof",
            "6d20e5dee3cce0049b76060e88b5a9fe4b4f1506"
        ],
        [
            "simple induction p; simpl; intros; omega.",
            "VernacExtend",
            "a914393d443bfd2c5379b350c3e7a8b1c99d8cc1"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint log_near (x:positive) : Z := match x with | xH => 0 | xO xH => 1 | xI xH => 2 | xO y => Z.succ (log_near y) | xI y => Z.succ (log_near y) end.",
            "VernacFixpoint",
            "5b53f3b5064254b9c94a18767fcceeef382c8b5a"
        ],
        [
            "Theorem log_near_correct1 : forall p:positive, 0 <= log_near p.",
            "VernacStartTheoremProof",
            "16d2e1158f59135437a2462f6eabfd4111d630e9"
        ],
        [
            "simple induction p; simpl; intros; [ elim p0; auto with zarith | elim p0; auto with zarith | trivial with zarith ].",
            "VernacExtend",
            "d52d408177660cf7dcfda3cb8a5641b0eeefbfa1"
        ],
        [
            "intros; apply Z.le_le_succ_r.",
            "VernacExtend",
            "52cb42b43df93f7bb9c98491875a45bbcdf332cd"
        ],
        [
            "generalize H0; now elim p1.",
            "VernacExtend",
            "77b0c7b6ff59aacaf88209cb563d632fcad9b41a"
        ],
        [
            "intros; apply Z.le_le_succ_r.",
            "VernacExtend",
            "52cb42b43df93f7bb9c98491875a45bbcdf332cd"
        ],
        [
            "generalize H0; now elim p1.",
            "VernacExtend",
            "77b0c7b6ff59aacaf88209cb563d632fcad9b41a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem log_near_correct2 : forall p:positive, log_near p = log_inf p \\/ log_near p = log_sup p.",
            "VernacStartTheoremProof",
            "720e1735eb21e1eb66c2dc496f5f6b155abee340"
        ],
        [
            "simple induction p.",
            "VernacExtend",
            "4addd9de6e8f1b3d78834f40fe17a999ad705355"
        ],
        [
            "intros p0 [Einf| Esup].",
            "VernacExtend",
            "d03a5c496c85fb1d6c1ec9145760368f2e8170a7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "rewrite Einf.",
            "VernacExtend",
            "132f75d8baa82060d9a4cdda0f7cffcd0f171c30"
        ],
        [
            "case p0; [ left | left | right ]; reflexivity.",
            "VernacExtend",
            "8424d4c73d280ffce83f728c828657f0d73e5f8e"
        ],
        [
            "simpl; rewrite Esup.",
            "VernacExtend",
            "6ac13232bb9f9b0d2fddb675c95bf612f53cc7b5"
        ],
        [
            "elim (log_sup_log_inf p0).",
            "VernacExtend",
            "0d7d3bdf7f4d291adbc8a3dd7932ec6720037e5e"
        ],
        [
            "generalize (log_inf_le_log_sup p0).",
            "VernacExtend",
            "af863cf0eb693c4827e261b0aead69237417a8bf"
        ],
        [
            "generalize (log_sup_le_Slog_inf p0).",
            "VernacExtend",
            "e10e6863d995ed14f8888aafcd44ba3a7e6ac344"
        ],
        [
            "case p0; auto with zarith.",
            "VernacExtend",
            "086e2096d8a2c8499ea194e9a5581f806bdbcb56"
        ],
        [
            "intros; omega.",
            "VernacExtend",
            "af1ac7136db4b1640d87fb7f4ca1a6f91608cf4b"
        ],
        [
            "case p0; intros; auto with zarith.",
            "VernacExtend",
            "77f40114024e15e7d9370499240ba8eba0cce134"
        ],
        [
            "intros p0 [Einf| Esup].",
            "VernacExtend",
            "d03a5c496c85fb1d6c1ec9145760368f2e8170a7"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite Einf.",
            "VernacExtend",
            "8539caa0ccc6514eda0165d4861870529e6ca46c"
        ],
        [
            "case p0; intros; auto with zarith.",
            "VernacExtend",
            "77f40114024e15e7d9370499240ba8eba0cce134"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "repeat rewrite Esup.",
            "VernacExtend",
            "da7d961e4eb8deec33cf3f0494472840d973a6b8"
        ],
        [
            "case p0; intros; auto with zarith.",
            "VernacExtend",
            "77f40114024e15e7d9370499240ba8eba0cce134"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Log_pos.",
            "VernacEndSegment",
            "5c21e3b663b9846e398535d77c7bbc0104108801"
        ],
        [
            "Section divers.",
            "VernacBeginSection",
            "0cf8c55036240f24a6c7a7dce4bf20c253e9f0ed"
        ],
        [
            "Definition N_digits (x:Z) := match x with | Zpos p => log_inf p | Zneg p => log_inf p | Z0 => 0 end.",
            "VernacDefinition",
            "23a7ca5f59f1e2bd71e8a9cabd4b8d0af467d1eb"
        ],
        [
            "Lemma ZERO_le_N_digits : forall x:Z, 0 <= N_digits x.",
            "VernacStartTheoremProof",
            "66eec5399f0e5ee1cae115d10299aab46d4816ed"
        ],
        [
            "simple induction x; simpl; [ apply Z.le_refl | exact log_inf_correct1 | exact log_inf_correct1 ].",
            "VernacExtend",
            "ad9b003a7a396d440dff7aa0be2d806f1873a1e3"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma log_inf_shift_nat : forall n:nat, log_inf (shift_nat n 1) = Z.of_nat n.",
            "VernacStartTheoremProof",
            "0c853ef16e904dcedf7445a13c5baa4f161829f3"
        ],
        [
            "simple induction n; intros; [ try trivial | rewrite Nat2Z.inj_succ; rewrite <- H; reflexivity ].",
            "VernacExtend",
            "8dd67dab221af4253d94aa21a3dc38fc0e6f0211"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma log_sup_shift_nat : forall n:nat, log_sup (shift_nat n 1) = Z.of_nat n.",
            "VernacStartTheoremProof",
            "62f084e975e5bb5544e1ab2cc7323322fb26e8fc"
        ],
        [
            "simple induction n; intros; [ try trivial | rewrite Nat2Z.inj_succ; rewrite <- H; reflexivity ].",
            "VernacExtend",
            "8dd67dab221af4253d94aa21a3dc38fc0e6f0211"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint Is_power (p:positive) : Prop := match p with | xH => True | xO q => Is_power q | xI q => False end.",
            "VernacFixpoint",
            "ace3e11955483028873d01d50f6459e0bc0f6c55"
        ],
        [
            "Lemma Is_power_correct : forall p:positive, Is_power p <-> (exists y : nat, p = shift_nat y 1).",
            "VernacStartTheoremProof",
            "58c76dbd1638de557157e0157dfbc351872e1840"
        ],
        [
            "split; [ elim p; [ simpl; tauto | simpl; intros; generalize (H H0); intro H1; elim H1; intros y0 Hy0; exists (S y0); rewrite Hy0; reflexivity | intro; exists 0%nat; reflexivity ] | intros; elim H; intros; rewrite H0; elim x; intros; simpl; trivial ].",
            "VernacExtend",
            "67352dadfc9e4ca788070733885152e180b94b2a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma Is_power_or : forall p:positive, Is_power p \\/ ~ Is_power p.",
            "VernacStartTheoremProof",
            "7ee40b1af31719a7f07088e120d9f255bf802668"
        ],
        [
            "simple induction p; [ intros; right; simpl; tauto | intros; elim H; [ intros; left; simpl; exact H0 | intros; right; simpl; exact H0 ] | left; simpl; trivial ].",
            "VernacExtend",
            "ac51b1733825d3178270fe3769f2b506379f6545"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End divers.",
            "VernacEndSegment",
            "2beee6bcd0c5f1fe35dc88d4afa937518f00fb10"
        ]
    ],
    "proofs": [
        {
            "name": "Psize_log_inf",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "induction p; simpl; now rewrite ?Pos2Z.inj_succ, ?IHp.",
                        "VernacExtend",
                        "2d264d96b5eba6bc5514a3f5d37b7fe6f6b345e1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zlog2_log_inf",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "unfold Z.log2.",
                        "VernacExtend",
                        "15c81d2bcb15bc4e8ba97120b78ef6e8e2686c89"
                    ]
                },
                {
                    "command": [
                        "destruct p; simpl; trivial; apply Psize_log_inf.",
                        "VernacExtend",
                        "7a1ec67f4a7af253372def7b93f73dbc715a119d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Zlog2_up_log_sup",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "induction p; simpl log_sup.",
                        "VernacExtend",
                        "1d144f5ce6360d104d53678acac43bcc2b5ca7d4"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "change (Zpos p~1) with (2*(Zpos p)+1).",
                        "VernacExtend",
                        "3b32840e92933baa209d50a8243d1ab9f7653b25"
                    ]
                },
                {
                    "command": [
                        "rewrite Z.log2_up_succ_double, Zlog2_log_inf; try easy.",
                        "VernacExtend",
                        "0fef9f34e0e7716d407419d6ed21dbd3758abec7"
                    ]
                },
                {
                    "command": [
                        "unfold Z.succ.",
                        "VernacExtend",
                        "d3292e8337e33f78eeb3f491cfdb2987c4452e05"
                    ]
                },
                {
                    "command": [
                        "now rewrite !(Z.add_comm _ 1), Z.add_assoc.",
                        "VernacExtend",
                        "51f7b64acd4d9707085649e9f5eb4f5eec9b40a3"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "change (Zpos p~0) with (2*Zpos p).",
                        "VernacExtend",
                        "41a28864a30afbe38ce6cdbc4d5cbec8b95ee828"
                    ]
                },
                {
                    "command": [
                        "now rewrite Z.log2_up_double, IHp.",
                        "VernacExtend",
                        "5661769c2f5fb1f2c7be6baff8f19b0496bb1364"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_inf_correct",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "simple induction x; intros; simpl; [ elim H; intros Hp HR; clear H; split; [ auto with zarith | rewrite two_p_S with (x := Z.succ (log_inf p)) by (apply Z.le_le_succ_r; trivial); rewrite two_p_S by trivial; rewrite two_p_S in HR by trivial; rewrite (BinInt.Pos2Z.inj_xI p); omega ] | elim H; intros Hp HR; clear H; split; [ auto with zarith | rewrite two_p_S with (x := Z.succ (log_inf p)) by (apply Z.le_le_succ_r; trivial); rewrite two_p_S by trivial; rewrite two_p_S in HR by trivial; rewrite (BinInt.Pos2Z.inj_xO p); omega ] | unfold two_power_pos; unfold shift_pos; simpl; omega ].",
                        "VernacExtend",
                        "1257163ee1f47b05164bcc73a50a10b9ff755cd7"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_sup_correct1",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "simple induction p; intros; simpl; auto with zarith.",
                        "VernacExtend",
                        "72b5058b25d1166601035bcdc85abfbcf7ebfb53"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_sup_log_inf",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "simple induction p; intros; [ elim H; right; simpl; rewrite (two_p_S (log_inf p0) (log_inf_correct1 p0)); rewrite BinInt.Pos2Z.inj_xI; unfold Z.succ; omega | elim H; clear H; intro Hif; [ left; simpl; rewrite (two_p_S (log_inf p0) (log_inf_correct1 p0)); rewrite (two_p_S (log_sup p0) (log_sup_correct1 p0)); rewrite <- (proj1 Hif); rewrite <- (proj2 Hif); auto | right; simpl; rewrite (two_p_S (log_inf p0) (log_inf_correct1 p0)); rewrite BinInt.Pos2Z.inj_xO; unfold Z.succ; omega ] | left; auto ].",
                        "VernacExtend",
                        "09d35d8f1140de2d88f7488fbf486817068e559c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_sup_correct2",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "intro.",
                        "VernacExtend",
                        "3999be354c758ba0d1866e0fcc78a7288779a224"
                    ]
                },
                {
                    "command": [
                        "elim (log_sup_log_inf x).",
                        "VernacExtend",
                        "0c24c9cb3f4112960f54d3ea8040c033243df7a7"
                    ]
                },
                {
                    "command": [
                        "intros [E1 E2]; rewrite E2.",
                        "VernacExtend",
                        "d683746cf57cc2637b53ca4217e92f344d66cce9"
                    ]
                },
                {
                    "command": [
                        "split; [ apply two_p_pred; apply log_sup_correct1 | apply Z.le_refl ].",
                        "VernacExtend",
                        "5f6f6970ae8ec0e0c798e3c29cac915c76a0e3c0"
                    ]
                },
                {
                    "command": [
                        "intros [E1 E2]; rewrite E2.",
                        "VernacExtend",
                        "d683746cf57cc2637b53ca4217e92f344d66cce9"
                    ]
                },
                {
                    "command": [
                        "rewrite (Z.pred_succ (log_inf x)).",
                        "VernacExtend",
                        "d10b997a03dce8ef6990b132484a7066831b9503"
                    ]
                },
                {
                    "command": [
                        "generalize (log_inf_correct2 x); omega.",
                        "VernacExtend",
                        "f89bd55ef6f89157fc3d3b5dd30bcc4a7daf139d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_inf_le_log_sup",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "simple induction p; simpl; intros; omega.",
                        "VernacExtend",
                        "a914393d443bfd2c5379b350c3e7a8b1c99d8cc1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_sup_le_Slog_inf",
            "line_nb": 52,
            "steps": [
                {
                    "command": [
                        "simple induction p; simpl; intros; omega.",
                        "VernacExtend",
                        "a914393d443bfd2c5379b350c3e7a8b1c99d8cc1"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_near_correct1",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "simple induction p; simpl; intros; [ elim p0; auto with zarith | elim p0; auto with zarith | trivial with zarith ].",
                        "VernacExtend",
                        "d52d408177660cf7dcfda3cb8a5641b0eeefbfa1"
                    ]
                },
                {
                    "command": [
                        "intros; apply Z.le_le_succ_r.",
                        "VernacExtend",
                        "52cb42b43df93f7bb9c98491875a45bbcdf332cd"
                    ]
                },
                {
                    "command": [
                        "generalize H0; now elim p1.",
                        "VernacExtend",
                        "77b0c7b6ff59aacaf88209cb563d632fcad9b41a"
                    ]
                },
                {
                    "command": [
                        "intros; apply Z.le_le_succ_r.",
                        "VernacExtend",
                        "52cb42b43df93f7bb9c98491875a45bbcdf332cd"
                    ]
                },
                {
                    "command": [
                        "generalize H0; now elim p1.",
                        "VernacExtend",
                        "77b0c7b6ff59aacaf88209cb563d632fcad9b41a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_near_correct2",
            "line_nb": 63,
            "steps": [
                {
                    "command": [
                        "simple induction p.",
                        "VernacExtend",
                        "4addd9de6e8f1b3d78834f40fe17a999ad705355"
                    ]
                },
                {
                    "command": [
                        "intros p0 [Einf| Esup].",
                        "VernacExtend",
                        "d03a5c496c85fb1d6c1ec9145760368f2e8170a7"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "rewrite Einf.",
                        "VernacExtend",
                        "132f75d8baa82060d9a4cdda0f7cffcd0f171c30"
                    ]
                },
                {
                    "command": [
                        "case p0; [ left | left | right ]; reflexivity.",
                        "VernacExtend",
                        "8424d4c73d280ffce83f728c828657f0d73e5f8e"
                    ]
                },
                {
                    "command": [
                        "simpl; rewrite Esup.",
                        "VernacExtend",
                        "6ac13232bb9f9b0d2fddb675c95bf612f53cc7b5"
                    ]
                },
                {
                    "command": [
                        "elim (log_sup_log_inf p0).",
                        "VernacExtend",
                        "0d7d3bdf7f4d291adbc8a3dd7932ec6720037e5e"
                    ]
                },
                {
                    "command": [
                        "generalize (log_inf_le_log_sup p0).",
                        "VernacExtend",
                        "af863cf0eb693c4827e261b0aead69237417a8bf"
                    ]
                },
                {
                    "command": [
                        "generalize (log_sup_le_Slog_inf p0).",
                        "VernacExtend",
                        "e10e6863d995ed14f8888aafcd44ba3a7e6ac344"
                    ]
                },
                {
                    "command": [
                        "case p0; auto with zarith.",
                        "VernacExtend",
                        "086e2096d8a2c8499ea194e9a5581f806bdbcb56"
                    ]
                },
                {
                    "command": [
                        "intros; omega.",
                        "VernacExtend",
                        "af1ac7136db4b1640d87fb7f4ca1a6f91608cf4b"
                    ]
                },
                {
                    "command": [
                        "case p0; intros; auto with zarith.",
                        "VernacExtend",
                        "77f40114024e15e7d9370499240ba8eba0cce134"
                    ]
                },
                {
                    "command": [
                        "intros p0 [Einf| Esup].",
                        "VernacExtend",
                        "d03a5c496c85fb1d6c1ec9145760368f2e8170a7"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Einf.",
                        "VernacExtend",
                        "8539caa0ccc6514eda0165d4861870529e6ca46c"
                    ]
                },
                {
                    "command": [
                        "case p0; intros; auto with zarith.",
                        "VernacExtend",
                        "77f40114024e15e7d9370499240ba8eba0cce134"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "repeat rewrite Esup.",
                        "VernacExtend",
                        "da7d961e4eb8deec33cf3f0494472840d973a6b8"
                    ]
                },
                {
                    "command": [
                        "case p0; intros; auto with zarith.",
                        "VernacExtend",
                        "77f40114024e15e7d9370499240ba8eba0cce134"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ZERO_le_N_digits",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "simple induction x; simpl; [ apply Z.le_refl | exact log_inf_correct1 | exact log_inf_correct1 ].",
                        "VernacExtend",
                        "ad9b003a7a396d440dff7aa0be2d806f1873a1e3"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_inf_shift_nat",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "simple induction n; intros; [ try trivial | rewrite Nat2Z.inj_succ; rewrite <- H; reflexivity ].",
                        "VernacExtend",
                        "8dd67dab221af4253d94aa21a3dc38fc0e6f0211"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "log_sup_shift_nat",
            "line_nb": 94,
            "steps": [
                {
                    "command": [
                        "simple induction n; intros; [ try trivial | rewrite Nat2Z.inj_succ; rewrite <- H; reflexivity ].",
                        "VernacExtend",
                        "8dd67dab221af4253d94aa21a3dc38fc0e6f0211"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Is_power_correct",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "split; [ elim p; [ simpl; tauto | simpl; intros; generalize (H H0); intro H1; elim H1; intros y0 Hy0; exists (S y0); rewrite Hy0; reflexivity | intro; exists 0%nat; reflexivity ] | intros; elim H; intros; rewrite H0; elim x; intros; simpl; trivial ].",
                        "VernacExtend",
                        "67352dadfc9e4ca788070733885152e180b94b2a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Is_power_or",
            "line_nb": 101,
            "steps": [
                {
                    "command": [
                        "simple induction p; [ intros; right; simpl; tauto | intros; elim H; [ intros; left; simpl; exact H0 | intros; right; simpl; exact H0 ] | left; simpl; trivial ].",
                        "VernacExtend",
                        "ac51b1733825d3178270fe3769f2b506379f6545"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}