{
    "filename": "theories/Vectors/VectorDef.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Arith_base.",
            "VernacRequire",
            "0a5c71c154a46f7c67196ddbc87d0f1a6854b630"
        ],
        [
            "Require Vectors.Fin.",
            "VernacRequire",
            "ef1802c05d0cd4c246da59383fecb4b77622a609"
        ],
        [
            "Import EqNotations.",
            "VernacImport",
            "e2dc00d26e8993f9a64b053fd29c9c5376d24f50"
        ],
        [
            "Local Open Scope nat_scope.",
            "VernacOpenCloseScope",
            "7386604700c7eb05ef0ae2947828bc909568dab7"
        ],
        [
            "Inductive t A : nat -> Type := |nil : t A 0 |cons : forall (h:A) (n:nat), t A n -> t A (S n).",
            "VernacInductive",
            "6476003d54914ba4b7417f13fcd40a40d7478158"
        ],
        [
            "Local Notation \"[ ]\" := (nil _) (format \"[ ]\").",
            "VernacNotation",
            "dc57a03f8202ee28f3be701baeb2967773fba4b9"
        ],
        [
            "Local Notation \"h :: t\" := (cons _ h _ t) (at level 60, right associativity).",
            "VernacNotation",
            "3158fe2b9b88617dc8f33b8145d2f1ebfa1cc84e"
        ],
        [
            "Section SCHEMES.",
            "VernacBeginSection",
            "053297928f2faaca859bee28f441a2e399cdc1c3"
        ],
        [
            "Definition rectS {A} (P:forall {n}, t A (S n) -> Type) (bas: forall a: A, P (a :: [])) (rect: forall a {n} (v: t A (S n)), P v -> P (a :: v)) := fix rectS_fix {n} (v: t A (S n)) : P v := match v with |@cons _ a 0 v => match v with |nil _ => bas a |_ => fun devil => False_ind (@IDProp) devil end |@cons _ a (S nn') v => rect a v (rectS_fix v) |_ => fun devil => False_ind (@IDProp) devil end.",
            "VernacDefinition",
            "2ee38c38b0f7acf29fc4cdc8a1f80bf04a7fe361"
        ],
        [
            "Definition case0 {A} (P:t A 0 -> Type) (H:P (nil A)) v:P v := match v with |[] => H |_ => fun devil => False_ind (@IDProp) devil end.",
            "VernacDefinition",
            "17f4f102f0ba08afa6e5261c674891ce13752916"
        ],
        [
            "Definition caseS {A} (P : forall {n}, t A (S n) -> Type) (H : forall h {n} t, @P n (h :: t)) {n} (v: t A (S n)) : P v := match v with |h :: t => H h t |_ => fun devil => False_ind (@IDProp) devil end.",
            "VernacDefinition",
            "ea589ba38be1f1193115cff97c96207d8c627550"
        ],
        [
            "Definition caseS' {A} {n : nat} (v : t A (S n)) : forall (P : t A (S n) -> Type) (H : forall h t, P (h :: t)), P v := match v with | h :: t => fun P H => H h t | _ => fun devil => False_rect (@IDProp) devil end.",
            "VernacDefinition",
            "7d7ef9722255049d28e00d49f9ea651de22a9ee0"
        ],
        [
            "Definition rect2 {A B} (P:forall {n}, t A n -> t B n -> Type) (bas : P [] []) (rect : forall {n v1 v2}, P v1 v2 -> forall a b, P (a :: v1) (b :: v2)) := fix rect2_fix {n} (v1 : t A n) : forall v2 : t B n, P v1 v2 := match v1 with | [] => fun v2 => case0 _ bas v2 | @cons _ h1 n' t1 => fun v2 => caseS' v2 (fun v2' => P (h1::t1) v2') (fun h2 t2 => rect (rect2_fix t1 t2) h1 h2) end.",
            "VernacDefinition",
            "e35cfddb7d5edf9c428d67c840eed2752e51f300"
        ],
        [
            "End SCHEMES.",
            "VernacEndSegment",
            "e2fff6ec6136c5fbaf8d397326b6e4fc05416c54"
        ],
        [
            "Section BASES.",
            "VernacBeginSection",
            "1244ac008144eee7c0ec26cd37f44d054b79ab33"
        ],
        [
            "Definition hd {A} := @caseS _ (fun n v => A) (fun h n t => h).",
            "VernacDefinition",
            "336767978079ffdc073a2b41421a27fff36b2c9b"
        ],
        [
            "Global Arguments hd {A} {n} v.",
            "VernacArguments",
            "4a35cf0e88807dd23cbbf7e73dd9462a2d80fe89"
        ],
        [
            "Definition last {A} := @rectS _ (fun _ _ => A) (fun a => a) (fun _ _ _ H => H).",
            "VernacDefinition",
            "4f1902ce86470d1c5df34adcb2b143c917ee7a0b"
        ],
        [
            "Global Arguments last {A} {n} v.",
            "VernacArguments",
            "d88c5c35e987ec1a6c10b1fd5c1700c0c54e1535"
        ],
        [
            "Definition const {A} (a:A) := nat_rect _ [] (fun n x => cons _ a n x).",
            "VernacDefinition",
            "3ba9fc64fa0d889724b3c44385be8d45253e539d"
        ],
        [
            "Definition nth {A} := fix nth_fix {m} (v' : t A m) (p : Fin.t m) {struct v'} : A := match p in Fin.t m' return t A m' -> A with |Fin.F1 => caseS (fun n v' => A) (fun h n t => h) |Fin.FS p' => fun v => (caseS (fun n v' => Fin.t n -> A) (fun h n t p0 => nth_fix t p0) v) p' end v'.",
            "VernacDefinition",
            "bd19cfe3871e6a738584acfce40c37e35ae170a7"
        ],
        [
            "Definition nth_order {A} {n} (v: t A n) {p} (H: p < n) := (nth v (Fin.of_nat_lt H)).",
            "VernacDefinition",
            "01f08da22bc9d704b8afe650ef31da0fed9d8282"
        ],
        [
            "Fixpoint replace {A n} (v : t A n) (p: Fin.t n) (a : A) {struct p}: t A n := match p with | @Fin.F1 k => fun v': t A (S k) => caseS' v' _ (fun h t => a :: t) | @Fin.FS k p' => fun v' : t A (S k) => (caseS' v' (fun _ => t A (S k)) (fun h t => h :: (replace t p' a))) end v.",
            "VernacFixpoint",
            "2f6194bb8cb8ea6b348b2817d56123357ba9eb31"
        ],
        [
            "Definition replace_order {A n} (v: t A n) {p} (H: p < n) := replace v (Fin.of_nat_lt H).",
            "VernacDefinition",
            "7d1f434115d1cc5a592ac5eeaf690e822b0c8617"
        ],
        [
            "Definition tl {A} := @caseS _ (fun n v => t A n) (fun h n t => t).",
            "VernacDefinition",
            "bbc8699bbe3645fe554dd8034a9168fc8deb0027"
        ],
        [
            "Global Arguments tl {A} {n} v.",
            "VernacArguments",
            "7495469718b4d8e5008a00cf5d40b2cfeda44c01"
        ],
        [
            "Definition shiftout {A} := @rectS _ (fun n _ => t A n) (fun a => []) (fun h _ _ H => h :: H).",
            "VernacDefinition",
            "ac98c908cc5710945208a831624a8fdfe25a35af"
        ],
        [
            "Global Arguments shiftout {A} {n} v.",
            "VernacArguments",
            "fd1b59d747e33eaae968b0165a807338ebb0e4bc"
        ],
        [
            "Fixpoint shiftin {A} {n:nat} (a : A) (v:t A n) : t A (S n) := match v with |[] => a :: [] |h :: t => h :: (shiftin a t) end.",
            "VernacFixpoint",
            "1c23231ddd57b31c877695cedb40819d55d52ac3"
        ],
        [
            "Definition shiftrepeat {A} := @rectS _ (fun n _ => t A (S (S n))) (fun h => h :: h :: []) (fun h _ _ H => h :: H).",
            "VernacDefinition",
            "b3e4cbbcd5e1b8686354b2a4d722fa4a05f5047a"
        ],
        [
            "Global Arguments shiftrepeat {A} {n} v.",
            "VernacArguments",
            "5ebf59af8026d40c812a96edf3791549192a86c5"
        ],
        [
            "Fixpoint take {A} {n} (p:nat) (le:p <= n) (v:t A n) : t A p := match p as p return p <= n -> t A p with | 0 => fun _ => [] | S p' => match v in t _ n return S p' <= n -> t A (S p') with | []=> fun le => False_rect _ (Nat.nle_succ_0 p' le) | x::xs => fun le => x::take p' (le_S_n p' _ le) xs end end le.",
            "VernacFixpoint",
            "6cdc0733359faf9e3a65185037d623bb05d5cf47"
        ],
        [
            "Lemma trunc : forall {A} {n} (p:nat), n > p -> t A n -> t A (n - p).",
            "VernacStartTheoremProof",
            "33bf03b862fdc5aa8f5627e933252c6336ad93a9"
        ],
        [
            "induction p as [| p f]; intros H v.",
            "VernacExtend",
            "0dcc58ad4270b5dd9ef8aedba77762031000a820"
        ],
        [
            "rewrite <- minus_n_O.",
            "VernacExtend",
            "07c627020c0e4bdce7de45e442d614cb6a64a0cf"
        ],
        [
            "exact v.",
            "VernacExtend",
            "62c6810f73b4fffedb9627416dcc4c803290f671"
        ],
        [
            "apply shiftout.",
            "VernacExtend",
            "bc3e43c163f691c91c654aee31bc3e3cd2541ead"
        ],
        [
            "rewrite minus_Sn_m.",
            "VernacExtend",
            "0e21ccba499520e200b98b25d59dc96e608d701d"
        ],
        [
            "apply f.",
            "VernacExtend",
            "851094a1006a80f6de4b5f5d7bde0265b1f2aa77"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "exact v.",
            "VernacExtend",
            "62c6810f73b4fffedb9627416dcc4c803290f671"
        ],
        [
            "auto with *.",
            "VernacExtend",
            "cafee3e5c160f4826f26575cc7be0078a2421ff0"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Fixpoint append {A}{n}{p} (v:t A n) (w:t A p):t A (n+p) := match v with | [] => w | a :: v' => a :: (append v' w) end.",
            "VernacFixpoint",
            "b4c856793ae152050a9cf6a44420e67287fd76ca"
        ],
        [
            "Infix \"++\" := append.",
            "VernacInfix",
            "5634d513303dff059704e55d0e77ae369fb5f66e"
        ],
        [
            "Fixpoint rev_append_tail {A n p} (v : t A n) (w: t A p) : t A (tail_plus n p) := match v with | [] => w | a :: v' => rev_append_tail v' (a :: w) end.",
            "VernacFixpoint",
            "913912d040c61be18c4f7472fede1dae3c4ecf83"
        ],
        [
            "Import EqdepFacts.",
            "VernacImport",
            "46f3d13339854f73da7b828caab0d307334a2184"
        ],
        [
            "Definition rev_append {A n p} (v: t A n) (w: t A p) :t A (n + p) := rew <- (plus_tail_plus n p) in (rev_append_tail v w).",
            "VernacDefinition",
            "fbdc1ad83589456eacdc2a379f957be938cf18a2"
        ],
        [
            "Definition rev {A n} (v : t A n) : t A n := rew <- (plus_n_O _) in (rev_append v []).",
            "VernacDefinition",
            "fcd505fefddf20654b77ec6ee52f10e116a560bd"
        ],
        [
            "End BASES.",
            "VernacEndSegment",
            "f105a4c86e2e763758a940356113a2a810f0741c"
        ],
        [
            "Local Notation \"v [@ p ]\" := (nth v p) (at level 1).",
            "VernacNotation",
            "91119428b5a2991821ad63ae7d4cac46055027c8"
        ],
        [
            "Section ITERATORS.",
            "VernacBeginSection",
            "5466435bce2cfd2659bf5229329eb4871e9baf82"
        ],
        [
            "Definition map {A} {B} (f : A -> B) : forall {n} (v:t A n), t B n := fix map_fix {n} (v : t A n) : t B n := match v with | [] => [] | a :: v' => (f a) :: (map_fix v') end.",
            "VernacDefinition",
            "c72343f96bcaaac599e840367d4eafb485262219"
        ],
        [
            "Definition map2 {A B C} (g:A -> B -> C) : forall (n : nat), t A n -> t B n -> t C n := @rect2 _ _ (fun n _ _ => t C n) (nil C) (fun _ _ _ H a b => (g a b) :: H).",
            "VernacDefinition",
            "02368ce4e345d99986835de1ef4faeeec06cc111"
        ],
        [
            "Global Arguments map2 {A B C} g {n} v1 v2.",
            "VernacArguments",
            "c1a5ebf09a6cc58ccd7800598b756bdccb0d2b4b"
        ],
        [
            "Definition fold_left {A B:Type} (f:B->A->B): forall (b:B) {n} (v:t A n), B := fix fold_left_fix (b:B) {n} (v : t A n) : B := match v with | [] => b | a :: w => (fold_left_fix (f b a) w) end.",
            "VernacDefinition",
            "83ec1b4f7a8cd2aee3cc2d1321f276a5a75b51ba"
        ],
        [
            "Definition fold_right {A B : Type} (f : A->B->B) := fix fold_right_fix {n} (v : t A n) (b:B) {struct v} : B := match v with | [] => b | a :: w => f a (fold_right_fix w b) end.",
            "VernacDefinition",
            "fb4a2e4b9d06218c1d6e2a379bee51273c8f264b"
        ],
        [
            "Definition fold_right2 {A B C} (g:A -> B -> C -> C) (c: C) := @rect2 _ _ (fun _ _ _ => C) c (fun _ _ _ H a b => g a b H).",
            "VernacDefinition",
            "e27849078696f4decb8bc04f7c8953e674953abd"
        ],
        [
            "Definition fold_left2 {A B C: Type} (f : A -> B -> C -> A) := fix fold_left2_fix (a : A) {n} (v : t B n) : t C n -> A := match v in t _ n0 return t C n0 -> A with |[] => fun w => case0 (fun _ => A) a w |@cons _ vh vn vt => fun w => caseS' w (fun _ => A) (fun wh wt => fold_left2_fix (f a vh wh) vt wt) end.",
            "VernacDefinition",
            "f48a7a56c4e8eba0ccf431a7e4c6ae3a67a60f7e"
        ],
        [
            "End ITERATORS.",
            "VernacEndSegment",
            "0f8f0d477427cef21871b8101a22d4fa4cdfd154"
        ],
        [
            "Section SCANNING.",
            "VernacBeginSection",
            "66c91d06f08b2bf19f0e16e589d7a9641a37a9bc"
        ],
        [
            "Inductive Forall {A} (P: A -> Prop): forall {n} (v: t A n), Prop := |Forall_nil: Forall P [] |Forall_cons {n} x (v: t A n): P x -> Forall P v -> Forall P (x::v).",
            "VernacInductive",
            "68e00a57326e8d4d5eb383e153e98af091e13561"
        ],
        [
            "Hint Constructors Forall.",
            "VernacHints",
            "6e154802d9d9f25834d9ab1cfa9c5d4e2d4eb200"
        ],
        [
            "Inductive Exists {A} (P:A->Prop): forall {n}, t A n -> Prop := |Exists_cons_hd {m} x (v: t A m): P x -> Exists P (x::v) |Exists_cons_tl {m} x (v: t A m): Exists P v -> Exists P (x::v).",
            "VernacInductive",
            "d1155bb9ceb44e081a20976fe5d75aed62658e55"
        ],
        [
            "Hint Constructors Exists.",
            "VernacHints",
            "f8e3756699a8854bcbd05c95a2ca3b8b6909658f"
        ],
        [
            "Inductive In {A} (a:A): forall {n}, t A n -> Prop := |In_cons_hd {m} (v: t A m): In a (a::v) |In_cons_tl {m} x (v: t A m): In a v -> In a (x::v).",
            "VernacInductive",
            "6c63a3e4341f0580871adadb4721b9c72bc5375c"
        ],
        [
            "Hint Constructors In.",
            "VernacHints",
            "4b2279c5da98f94a954793a3785aab94c62f010b"
        ],
        [
            "Inductive Forall2 {A B} (P:A->B->Prop): forall {n}, t A n -> t B n -> Prop := |Forall2_nil: Forall2 P [] [] |Forall2_cons {m} x1 x2 (v1:t A m) v2: P x1 x2 -> Forall2 P v1 v2 -> Forall2 P (x1::v1) (x2::v2).",
            "VernacInductive",
            "10c57517f3affe6d14d66c2f998e43f05db08f4a"
        ],
        [
            "Hint Constructors Forall2.",
            "VernacHints",
            "fc7833b6a293e3c37d4834916fc5686660ea0fa4"
        ],
        [
            "Inductive Exists2 {A B} (P:A->B->Prop): forall {n}, t A n -> t B n -> Prop := |Exists2_cons_hd {m} x1 x2 (v1: t A m) (v2: t B m): P x1 x2 -> Exists2 P (x1::v1) (x2::v2) |Exists2_cons_tl {m} x1 x2 (v1:t A m) v2: Exists2 P v1 v2 -> Exists2 P (x1::v1) (x2::v2).",
            "VernacInductive",
            "d4d6e4f26b2126ef1c8fd724f4fb30523c4b4d99"
        ],
        [
            "Hint Constructors Exists2.",
            "VernacHints",
            "fa0fc084f5a1f76050ed78b370585c8b28997007"
        ],
        [
            "End SCANNING.",
            "VernacEndSegment",
            "925fea13485622ea64e6bd090491c0d1dc703100"
        ],
        [
            "Section VECTORLIST.",
            "VernacBeginSection",
            "c3e23b8cf3639b4fe324848cb8c034c0e14d925a"
        ],
        [
            "Fixpoint of_list {A} (l : list A) : t A (length l) := match l as l' return t A (length l') with |Datatypes.nil => [] |(h :: tail)%list => (h :: (of_list tail)) end.",
            "VernacFixpoint",
            "90ee2ffb4ae4d94863a92ec3eedb391e3acc6356"
        ],
        [
            "Definition to_list {A}{n} (v : t A n) : list A := Eval cbv delta beta in fold_right (fun h H => Datatypes.cons h H) v Datatypes.nil.",
            "VernacDefinition",
            "0d01cde16f3109da5d58979d322aa7968b1ce5b8"
        ],
        [
            "End VECTORLIST.",
            "VernacEndSegment",
            "6f054cf29ea550add3ece95537d4377af3e648a8"
        ],
        [
            "Module VectorNotations.",
            "VernacDefineModule",
            "ba7708fac5ebb2c3b1ba9462c504b845d7705c36"
        ],
        [
            "Delimit Scope vector_scope with vector.",
            "VernacDelimiters",
            "64629a1a09aca3caa7963fe50c397115fe924b57"
        ],
        [
            "Notation \"[ ]\" := [] (format \"[ ]\") : vector_scope.",
            "VernacNotation",
            "e9dd35f0fde282b3e94819def7b2074c8468f68d"
        ],
        [
            "Notation \"h :: t\" := (h :: t) (at level 60, right associativity) : vector_scope.",
            "VernacNotation",
            "49ba61ad3c78087f64cafce45ad906bc090061d1"
        ],
        [
            "Notation \"[ x ]\" := (x :: []) : vector_scope.",
            "VernacNotation",
            "eafc5f8d2e3f65f637761012508847a9ff31cc2b"
        ],
        [
            "Notation \"[ x ; y ; .. ; z ]\" := (cons _ x _ (cons _ y _ .. (cons _ z _ (nil _)) ..)) : vector_scope.",
            "VernacNotation",
            "d69d4d95fb2d87e176ca7ab57e9af7a7c9ab82b1"
        ],
        [
            "Notation \"v [@ p ]\" := (nth v p) (at level 1, format \"v [@ p ]\") : vector_scope.",
            "VernacNotation",
            "614900e3f0976d606747a01cacf43b291e50074c"
        ],
        [
            "Infix \"++\" := append : vector_scope.",
            "VernacInfix",
            "0c5578652c558fa4fd4b1e6040cc00f0ea24dfe9"
        ],
        [
            "Open Scope vector_scope.",
            "VernacOpenCloseScope",
            "354c4804e43716fe91c23b355f418525d1f104ed"
        ],
        [
            "End VectorNotations.",
            "VernacEndSegment",
            "25896008cb30a116c5d63e365909f4d3608a184b"
        ]
    ],
    "proofs": [
        {
            "name": "trunc",
            "line_nb": 32,
            "steps": [
                {
                    "command": [
                        "induction p as [| p f]; intros H v.",
                        "VernacExtend",
                        "0dcc58ad4270b5dd9ef8aedba77762031000a820"
                    ]
                },
                {
                    "command": [
                        "rewrite <- minus_n_O.",
                        "VernacExtend",
                        "07c627020c0e4bdce7de45e442d614cb6a64a0cf"
                    ]
                },
                {
                    "command": [
                        "exact v.",
                        "VernacExtend",
                        "62c6810f73b4fffedb9627416dcc4c803290f671"
                    ]
                },
                {
                    "command": [
                        "apply shiftout.",
                        "VernacExtend",
                        "bc3e43c163f691c91c654aee31bc3e3cd2541ead"
                    ]
                },
                {
                    "command": [
                        "rewrite minus_Sn_m.",
                        "VernacExtend",
                        "0e21ccba499520e200b98b25d59dc96e608d701d"
                    ]
                },
                {
                    "command": [
                        "apply f.",
                        "VernacExtend",
                        "851094a1006a80f6de4b5f5d7bde0265b1f2aa77"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "exact v.",
                        "VernacExtend",
                        "62c6810f73b4fffedb9627416dcc4c803290f671"
                    ]
                },
                {
                    "command": [
                        "auto with *.",
                        "VernacExtend",
                        "cafee3e5c160f4826f26575cc7be0078a2421ff0"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}