{
    "filename": "theories/Numbers/Natural/Abstract/NAdd.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Export NBase.",
            "VernacRequire",
            "ae10db066bb68ecba49819a942a09be4942dbdca"
        ],
        [
            "Module NAddProp (Import N : NAxiomsMiniSig').",
            "VernacDefineModule",
            "1b98cfee43205c9cf55a61d28ce376fd79535b94"
        ],
        [
            "Include NBaseProp N.",
            "VernacInclude",
            "129627e93005218b7ea1e444b62f11afce178715"
        ],
        [
            "Theorem eq_add_0 : forall n m, n + m == 0 <-> n == 0 /\\ m == 0.",
            "VernacStartTheoremProof",
            "829b21d66884d66f1f34e893bd4fefc3bdd79c02"
        ],
        [
            "intros n m; induct n.",
            "VernacExtend",
            "d1568f660d2ad27d91d6a4dea90cf933039d13fb"
        ],
        [
            "nzsimpl; intuition.",
            "VernacExtend",
            "6f655d4e5125c21ae48dfacdec999d25617f6b7e"
        ],
        [
            "intros n IH.",
            "VernacExtend",
            "29e262b3c640389d376f6327ae2c3d4078c1f25d"
        ],
        [
            "nzsimpl.",
            "VernacExtend",
            "32a0da57fa9b6fef77a1ba15d7ad314a88420ca3"
        ],
        [
            "setoid_replace (S (n + m) == 0) with False by (apply neg_false; apply neq_succ_0).",
            "VernacExtend",
            "229e3da6b374e57db26e8c693de41facbd9c8937"
        ],
        [
            "setoid_replace (S n == 0) with False by (apply neg_false; apply neq_succ_0).",
            "VernacExtend",
            "48832c3d4a0a7653518d613e848db571ed75e3e8"
        ],
        [
            "tauto.",
            "VernacExtend",
            "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem eq_add_succ : forall n m, (exists p, n + m == S p) <-> (exists n', n == S n') \\/ (exists m', m == S m').",
            "VernacStartTheoremProof",
            "48472126ea73b59fca50f1f55876e5bf0bf86a97"
        ],
        [
            "intros n m; cases n.",
            "VernacExtend",
            "85794e9dfdae7aaeefaf55e27bd51be676162593"
        ],
        [
            "split; intro H.",
            "VernacExtend",
            "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
        ],
        [
            "destruct H as [p H].",
            "VernacExtend",
            "3a6266ea0866c190340021153402f6499608087c"
        ],
        [
            "rewrite add_0_l in H; right; now exists p.",
            "VernacExtend",
            "855fef941f2ab0f8d0270c183d8c4674b08c46ce"
        ],
        [
            "destruct H as [[n' H] | [m' H]].",
            "VernacExtend",
            "aa5562aee05056bf08cbcacbc3956264410c8eca"
        ],
        [
            "symmetry in H; false_hyp H neq_succ_0.",
            "VernacExtend",
            "0fcaa57af6dfee5ce483e1193e94f801b3eb39dc"
        ],
        [
            "exists m'; now rewrite add_0_l.",
            "VernacExtend",
            "202593a3a78ee3e0fd91c571627cdd53d781a767"
        ],
        [
            "intro n; split; intro H.",
            "VernacExtend",
            "f7d2e60d633952cfad11507b7c081dae430aeca4"
        ],
        [
            "left; now exists n.",
            "VernacExtend",
            "16e55193d0099649ef5ece4d89331abfdd85ff45"
        ],
        [
            "exists (n + m); now rewrite add_succ_l.",
            "VernacExtend",
            "9bc04f851cc7c1173d9ae0e609310b98ededf972"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem eq_add_1 : forall n m, n + m == 1 -> n == 1 /\\ m == 0 \\/ n == 0 /\\ m == 1.",
            "VernacStartTheoremProof",
            "ee0f27c9ef74640544314ee31f0fb80b3b0923bb"
        ],
        [
            "intros n m.",
            "VernacExtend",
            "b32939a1d90184ef888d5e875ed5067404699c61"
        ],
        [
            "rewrite one_succ.",
            "VernacExtend",
            "78cd8beb4e0f109aaafc945fbf1f050475b5a04b"
        ],
        [
            "intro H.",
            "VernacExtend",
            "a9535760040671e8853f25f0b4e9eda38ca392a6"
        ],
        [
            "assert (H1 : exists p, n + m == S p) by now exists 0.",
            "VernacExtend",
            "b36fd4934f416d665026c159a44abd95d305e5b0"
        ],
        [
            "apply eq_add_succ in H1.",
            "VernacExtend",
            "25a917a7bc47eb752a5606537bf091256503ab31"
        ],
        [
            "destruct H1 as [[n' H1] | [m' H1]].",
            "VernacExtend",
            "dfc022f646dce23b32237452560bf79592134eb1"
        ],
        [
            "left.",
            "VernacExtend",
            "06dad9fc5698018f3f1213205145fec906c612b1"
        ],
        [
            "rewrite H1 in H; rewrite add_succ_l in H; apply succ_inj in H.",
            "VernacExtend",
            "3f3e02074900b07ec9594e95bac37be128d4b109"
        ],
        [
            "apply eq_add_0 in H.",
            "VernacExtend",
            "e9048e2c1970bb1ae447fb7a10dfb04e1b5e2598"
        ],
        [
            "destruct H as [H2 H3]; rewrite H2 in H1; now split.",
            "VernacExtend",
            "ff211bfc5d352dc6169e494afca95f6580f36818"
        ],
        [
            "right.",
            "VernacExtend",
            "27e417a3497755767e1a1d6ba87753ecddaee6b7"
        ],
        [
            "rewrite H1 in H; rewrite add_succ_r in H; apply succ_inj in H.",
            "VernacExtend",
            "91526e23a8439bb77b4eac59ae195dcc72063170"
        ],
        [
            "apply eq_add_0 in H.",
            "VernacExtend",
            "e9048e2c1970bb1ae447fb7a10dfb04e1b5e2598"
        ],
        [
            "destruct H as [H2 H3]; rewrite H3 in H1; now split.",
            "VernacExtend",
            "ff69ffa6f309faf1d5ef92460907f9cf97709369"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem succ_add_discr : forall n m, m ~= S (n + m).",
            "VernacStartTheoremProof",
            "c935e5cf0b3d7adce6020ff901891e01f1d7a9d0"
        ],
        [
            "intro n; induct m.",
            "VernacExtend",
            "9984f89f271da89eda153e537c6793a27a70a1ed"
        ],
        [
            "apply neq_sym.",
            "VernacExtend",
            "47379d59cdce17616519254ef57ccb5ec59d90ea"
        ],
        [
            "apply neq_succ_0.",
            "VernacExtend",
            "254ac54ad8d63a8fc9b8e9db2c10ee0566a1ec55"
        ],
        [
            "intros m IH H.",
            "VernacExtend",
            "bcba44cddf40557e46d8e6fa3b08cdaedb8c73b2"
        ],
        [
            "apply succ_inj in H.",
            "VernacExtend",
            "96387f39028962a1b17e39f3a600fa80f641e470"
        ],
        [
            "rewrite add_succ_r in H.",
            "VernacExtend",
            "d01c0e94f3b09fbe9f4e13c362c89ea6c062e0ac"
        ],
        [
            "unfold not in IH; now apply IH.",
            "VernacExtend",
            "bcbab4f584b60e429b5198236f2db9d6f3c123f0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem add_pred_l : forall n m, n ~= 0 -> P n + m == P (n + m).",
            "VernacStartTheoremProof",
            "1968ca6aacf2bbd8495581a6cfffe41225470d45"
        ],
        [
            "intros n m; cases n.",
            "VernacExtend",
            "85794e9dfdae7aaeefaf55e27bd51be676162593"
        ],
        [
            "intro H; now elim H.",
            "VernacExtend",
            "051d032c5c577fbe5ea240c84d0d875d55250114"
        ],
        [
            "intros n IH; rewrite add_succ_l; now do 2 rewrite pred_succ.",
            "VernacExtend",
            "8234b1b4f8062478debcd161c746ddb677718206"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem add_pred_r : forall n m, m ~= 0 -> n + P m == P (n + m).",
            "VernacStartTheoremProof",
            "d709157b57b20408c168666dd7140b4df5180483"
        ],
        [
            "intros n m H; rewrite (add_comm n (P m)); rewrite (add_comm n m); now apply add_pred_l.",
            "VernacExtend",
            "1420f985f5d8d012e5a27b58d9be30e10ecc8db4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End NAddProp.",
            "VernacEndSegment",
            "c4ecc7713479ad4a02feb3c2ebbd8b2a3e824f14"
        ]
    ],
    "proofs": [
        {
            "name": "eq_add_0",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros n m; induct n.",
                        "VernacExtend",
                        "d1568f660d2ad27d91d6a4dea90cf933039d13fb"
                    ]
                },
                {
                    "command": [
                        "nzsimpl; intuition.",
                        "VernacExtend",
                        "6f655d4e5125c21ae48dfacdec999d25617f6b7e"
                    ]
                },
                {
                    "command": [
                        "intros n IH.",
                        "VernacExtend",
                        "29e262b3c640389d376f6327ae2c3d4078c1f25d"
                    ]
                },
                {
                    "command": [
                        "nzsimpl.",
                        "VernacExtend",
                        "32a0da57fa9b6fef77a1ba15d7ad314a88420ca3"
                    ]
                },
                {
                    "command": [
                        "setoid_replace (S (n + m) == 0) with False by (apply neg_false; apply neq_succ_0).",
                        "VernacExtend",
                        "229e3da6b374e57db26e8c693de41facbd9c8937"
                    ]
                },
                {
                    "command": [
                        "setoid_replace (S n == 0) with False by (apply neg_false; apply neq_succ_0).",
                        "VernacExtend",
                        "48832c3d4a0a7653518d613e848db571ed75e3e8"
                    ]
                },
                {
                    "command": [
                        "tauto.",
                        "VernacExtend",
                        "9bfafe84fb6724789bdf6cfd21cd721dd63fdabd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_add_succ",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "intros n m; cases n.",
                        "VernacExtend",
                        "85794e9dfdae7aaeefaf55e27bd51be676162593"
                    ]
                },
                {
                    "command": [
                        "split; intro H.",
                        "VernacExtend",
                        "496dd5fc77c723ff896bbd9bc6dee3ccc3aa9bde"
                    ]
                },
                {
                    "command": [
                        "destruct H as [p H].",
                        "VernacExtend",
                        "3a6266ea0866c190340021153402f6499608087c"
                    ]
                },
                {
                    "command": [
                        "rewrite add_0_l in H; right; now exists p.",
                        "VernacExtend",
                        "855fef941f2ab0f8d0270c183d8c4674b08c46ce"
                    ]
                },
                {
                    "command": [
                        "destruct H as [[n' H] | [m' H]].",
                        "VernacExtend",
                        "aa5562aee05056bf08cbcacbc3956264410c8eca"
                    ]
                },
                {
                    "command": [
                        "symmetry in H; false_hyp H neq_succ_0.",
                        "VernacExtend",
                        "0fcaa57af6dfee5ce483e1193e94f801b3eb39dc"
                    ]
                },
                {
                    "command": [
                        "exists m'; now rewrite add_0_l.",
                        "VernacExtend",
                        "202593a3a78ee3e0fd91c571627cdd53d781a767"
                    ]
                },
                {
                    "command": [
                        "intro n; split; intro H.",
                        "VernacExtend",
                        "f7d2e60d633952cfad11507b7c081dae430aeca4"
                    ]
                },
                {
                    "command": [
                        "left; now exists n.",
                        "VernacExtend",
                        "16e55193d0099649ef5ece4d89331abfdd85ff45"
                    ]
                },
                {
                    "command": [
                        "exists (n + m); now rewrite add_succ_l.",
                        "VernacExtend",
                        "9bc04f851cc7c1173d9ae0e609310b98ededf972"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_add_1",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "intros n m.",
                        "VernacExtend",
                        "b32939a1d90184ef888d5e875ed5067404699c61"
                    ]
                },
                {
                    "command": [
                        "rewrite one_succ.",
                        "VernacExtend",
                        "78cd8beb4e0f109aaafc945fbf1f050475b5a04b"
                    ]
                },
                {
                    "command": [
                        "intro H.",
                        "VernacExtend",
                        "a9535760040671e8853f25f0b4e9eda38ca392a6"
                    ]
                },
                {
                    "command": [
                        "assert (H1 : exists p, n + m == S p) by now exists 0.",
                        "VernacExtend",
                        "b36fd4934f416d665026c159a44abd95d305e5b0"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_succ in H1.",
                        "VernacExtend",
                        "25a917a7bc47eb752a5606537bf091256503ab31"
                    ]
                },
                {
                    "command": [
                        "destruct H1 as [[n' H1] | [m' H1]].",
                        "VernacExtend",
                        "dfc022f646dce23b32237452560bf79592134eb1"
                    ]
                },
                {
                    "command": [
                        "left.",
                        "VernacExtend",
                        "06dad9fc5698018f3f1213205145fec906c612b1"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H; rewrite add_succ_l in H; apply succ_inj in H.",
                        "VernacExtend",
                        "3f3e02074900b07ec9594e95bac37be128d4b109"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_0 in H.",
                        "VernacExtend",
                        "e9048e2c1970bb1ae447fb7a10dfb04e1b5e2598"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H2 H3]; rewrite H2 in H1; now split.",
                        "VernacExtend",
                        "ff211bfc5d352dc6169e494afca95f6580f36818"
                    ]
                },
                {
                    "command": [
                        "right.",
                        "VernacExtend",
                        "27e417a3497755767e1a1d6ba87753ecddaee6b7"
                    ]
                },
                {
                    "command": [
                        "rewrite H1 in H; rewrite add_succ_r in H; apply succ_inj in H.",
                        "VernacExtend",
                        "91526e23a8439bb77b4eac59ae195dcc72063170"
                    ]
                },
                {
                    "command": [
                        "apply eq_add_0 in H.",
                        "VernacExtend",
                        "e9048e2c1970bb1ae447fb7a10dfb04e1b5e2598"
                    ]
                },
                {
                    "command": [
                        "destruct H as [H2 H3]; rewrite H3 in H1; now split.",
                        "VernacExtend",
                        "ff69ffa6f309faf1d5ef92460907f9cf97709369"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "succ_add_discr",
            "line_nb": 40,
            "steps": [
                {
                    "command": [
                        "intro n; induct m.",
                        "VernacExtend",
                        "9984f89f271da89eda153e537c6793a27a70a1ed"
                    ]
                },
                {
                    "command": [
                        "apply neq_sym.",
                        "VernacExtend",
                        "47379d59cdce17616519254ef57ccb5ec59d90ea"
                    ]
                },
                {
                    "command": [
                        "apply neq_succ_0.",
                        "VernacExtend",
                        "254ac54ad8d63a8fc9b8e9db2c10ee0566a1ec55"
                    ]
                },
                {
                    "command": [
                        "intros m IH H.",
                        "VernacExtend",
                        "bcba44cddf40557e46d8e6fa3b08cdaedb8c73b2"
                    ]
                },
                {
                    "command": [
                        "apply succ_inj in H.",
                        "VernacExtend",
                        "96387f39028962a1b17e39f3a600fa80f641e470"
                    ]
                },
                {
                    "command": [
                        "rewrite add_succ_r in H.",
                        "VernacExtend",
                        "d01c0e94f3b09fbe9f4e13c362c89ea6c062e0ac"
                    ]
                },
                {
                    "command": [
                        "unfold not in IH; now apply IH.",
                        "VernacExtend",
                        "bcbab4f584b60e429b5198236f2db9d6f3c123f0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_pred_l",
            "line_nb": 49,
            "steps": [
                {
                    "command": [
                        "intros n m; cases n.",
                        "VernacExtend",
                        "85794e9dfdae7aaeefaf55e27bd51be676162593"
                    ]
                },
                {
                    "command": [
                        "intro H; now elim H.",
                        "VernacExtend",
                        "051d032c5c577fbe5ea240c84d0d875d55250114"
                    ]
                },
                {
                    "command": [
                        "intros n IH; rewrite add_succ_l; now do 2 rewrite pred_succ.",
                        "VernacExtend",
                        "8234b1b4f8062478debcd161c746ddb677718206"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "add_pred_r",
            "line_nb": 54,
            "steps": [
                {
                    "command": [
                        "intros n m H; rewrite (add_comm n (P m)); rewrite (add_comm n m); now apply add_pred_l.",
                        "VernacExtend",
                        "1420f985f5d8d012e5a27b58d9be30e10ecc8db4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}