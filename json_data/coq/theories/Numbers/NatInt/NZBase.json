{
    "filename": "theories/Numbers/NatInt/NZBase.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import NZAxioms.",
            "VernacRequire",
            "a119c8ffe42a55963254d4041b8ef43609e620e5"
        ],
        [
            "Module Type NZBaseProp (Import NZ : NZDomainSig').",
            "VernacDeclareModuleType",
            "03dc13842ba5f8e7ca82b4cf3403f6e8929bc9e8"
        ],
        [
            "Include BackportEq NZ NZ.",
            "VernacInclude",
            "e7d1551e8d5f85944e4024769bacefbff350817d"
        ],
        [
            "Lemma eq_sym_iff : forall x y, x==y <-> y==x.",
            "VernacStartTheoremProof",
            "8431eb990f4ce3e5fc4804d235325981f71390b2"
        ],
        [
            "intros; split; symmetry; auto.",
            "VernacExtend",
            "0d764972cd735d412fd3719d5ca7baa82513a706"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem neq_sym : forall n m, n ~= m -> m ~= n.",
            "VernacStartTheoremProof",
            "6a30cf97fb159972248096fe1bac1e1aefd6778b"
        ],
        [
            "intros n m H1 H2; symmetry in H2; false_hyp H2 H1.",
            "VernacExtend",
            "8395fffdf3fbc8d34bfda095c1c980df933f0448"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem eq_stepl : forall x y z, x == y -> x == z -> z == y.",
            "VernacStartTheoremProof",
            "1e30fb3c6b76b48fa5a223fd67f026fd6d353b11"
        ],
        [
            "intros x y z H1 H2; now rewrite <- H1.",
            "VernacExtend",
            "c90d7d4b0ac0eb56d9deba41900f0fa0ad5fce85"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Declare Left Step eq_stepl.",
            "VernacExtend",
            "18214bce51de97a21862b0292de576ebd2ff8d70"
        ],
        [
            "Declare Right Step (@Equivalence_Transitive _ _ eq_equiv).",
            "VernacExtend",
            "8685991f155a32e8e5b287a2971d34fc7b54f021"
        ],
        [
            "Theorem succ_inj : forall n1 n2, S n1 == S n2 -> n1 == n2.",
            "VernacStartTheoremProof",
            "f154f11f4c5e0ce37909c0b8aeefa0fe832cc690"
        ],
        [
            "intros n1 n2 H.",
            "VernacExtend",
            "62fca6d903768769fad1caef47db965b0a38eee4"
        ],
        [
            "apply pred_wd in H.",
            "VernacExtend",
            "328fda7c29c0ad14f3b32d91401b811a146e055d"
        ],
        [
            "now do 2 rewrite pred_succ in H.",
            "VernacExtend",
            "869a2cae0f37d5a978dafd2f0966aa44c79a6715"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem succ_inj_wd : forall n1 n2, S n1 == S n2 <-> n1 == n2.",
            "VernacStartTheoremProof",
            "fd2865ca8073c423d5e47d8909c9cce810d9a7f8"
        ],
        [
            "intros; split.",
            "VernacExtend",
            "786909835bea92a2bb1ac0d0634a6eb379d5f275"
        ],
        [
            "apply succ_inj.",
            "VernacExtend",
            "20bea47dc9639cb7f51951bae01ee9c028f3992f"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "now f_equiv.",
            "VernacExtend",
            "98cbad0c17c93e8efb72200330cc4dc88ee8a339"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem succ_inj_wd_neg : forall n m, S n ~= S m <-> n ~= m.",
            "VernacStartTheoremProof",
            "113023956b1134908e722ddf2d14a0888dc08240"
        ],
        [
            "intros; now rewrite succ_inj_wd.",
            "VernacExtend",
            "1d62910dc3ba51d94602e431604ece0446bcad38"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Section CentralInduction.",
            "VernacBeginSection",
            "d8fa35bf8475be43b3ac7db9e390cd6c2ec1dbd8"
        ],
        [
            "Variable A : t -> Prop.",
            "VernacAssumption",
            "cf1c3c72ece82908729f7912c465b306c3f64f4e"
        ],
        [
            "Hypothesis A_wd : Proper (eq==>iff) A.",
            "VernacAssumption",
            "25da88dd9d1a22050ea905d03c312cdb131cd916"
        ],
        [
            "Theorem central_induction : forall z, A z -> (forall n, A n <-> A (S n)) -> forall n, A n.",
            "VernacStartTheoremProof",
            "1caea1d84eecf153aa4f2bc30b6b98de7ff51074"
        ],
        [
            "intros z Base Step; revert Base; pattern z; apply bi_induction.",
            "VernacExtend",
            "6e7590de10a927af719e5a3266047afa4606f32f"
        ],
        [
            "solve_proper.",
            "VernacExtend",
            "82c8a5c0bba0e15dadfebb3446ef2557300c23ea"
        ],
        [
            "intro; now apply bi_induction.",
            "VernacExtend",
            "b390acb461461fc0913c13bf62bbfc41223b84ff"
        ],
        [
            "intro; pose proof (Step n); tauto.",
            "VernacExtend",
            "6d692a9b3acb9846fce6c1c7168e810a2bfa80a5"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End CentralInduction.",
            "VernacEndSegment",
            "47190d9cd3a55e62491da8e2b7ca6a2f3f73894f"
        ],
        [
            "Tactic Notation \"nzinduct\" ident(n) := induction_maker n ltac:(apply bi_induction).",
            "VernacExtend",
            "48faa9d985735d2a867f0037efd0146691e7407f"
        ],
        [
            "Tactic Notation \"nzinduct\" ident(n) constr(u) := induction_maker n ltac:(apply central_induction with (z := u)).",
            "VernacExtend",
            "60411356c8326d1afa2577154d38369cd0dc2af9"
        ],
        [
            "End NZBaseProp.",
            "VernacEndSegment",
            "ad660603144b8cae2bcaa217f915dc75fcc8822d"
        ]
    ],
    "proofs": [
        {
            "name": "eq_sym_iff",
            "line_nb": 3,
            "steps": [
                {
                    "command": [
                        "intros; split; symmetry; auto.",
                        "VernacExtend",
                        "0d764972cd735d412fd3719d5ca7baa82513a706"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "neq_sym",
            "line_nb": 6,
            "steps": [
                {
                    "command": [
                        "intros n m H1 H2; symmetry in H2; false_hyp H2 H1.",
                        "VernacExtend",
                        "8395fffdf3fbc8d34bfda095c1c980df933f0448"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_stepl",
            "line_nb": 9,
            "steps": [
                {
                    "command": [
                        "intros x y z H1 H2; now rewrite <- H1.",
                        "VernacExtend",
                        "c90d7d4b0ac0eb56d9deba41900f0fa0ad5fce85"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "succ_inj",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros n1 n2 H.",
                        "VernacExtend",
                        "62fca6d903768769fad1caef47db965b0a38eee4"
                    ]
                },
                {
                    "command": [
                        "apply pred_wd in H.",
                        "VernacExtend",
                        "328fda7c29c0ad14f3b32d91401b811a146e055d"
                    ]
                },
                {
                    "command": [
                        "now do 2 rewrite pred_succ in H.",
                        "VernacExtend",
                        "869a2cae0f37d5a978dafd2f0966aa44c79a6715"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "succ_inj_wd",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "intros; split.",
                        "VernacExtend",
                        "786909835bea92a2bb1ac0d0634a6eb379d5f275"
                    ]
                },
                {
                    "command": [
                        "apply succ_inj.",
                        "VernacExtend",
                        "20bea47dc9639cb7f51951bae01ee9c028f3992f"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "now f_equiv.",
                        "VernacExtend",
                        "98cbad0c17c93e8efb72200330cc4dc88ee8a339"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "succ_inj_wd_neg",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "intros; now rewrite succ_inj_wd.",
                        "VernacExtend",
                        "1d62910dc3ba51d94602e431604ece0446bcad38"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "central_induction",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "intros z Base Step; revert Base; pattern z; apply bi_induction.",
                        "VernacExtend",
                        "6e7590de10a927af719e5a3266047afa4606f32f"
                    ]
                },
                {
                    "command": [
                        "solve_proper.",
                        "VernacExtend",
                        "82c8a5c0bba0e15dadfebb3446ef2557300c23ea"
                    ]
                },
                {
                    "command": [
                        "intro; now apply bi_induction.",
                        "VernacExtend",
                        "b390acb461461fc0913c13bf62bbfc41223b84ff"
                    ]
                },
                {
                    "command": [
                        "intro; pose proof (Step n); tauto.",
                        "VernacExtend",
                        "6d692a9b3acb9846fce6c1c7168e810a2bfa80a5"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}