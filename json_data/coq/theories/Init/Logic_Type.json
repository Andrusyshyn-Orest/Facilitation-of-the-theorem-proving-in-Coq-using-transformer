{
    "filename": "theories/Init/Logic_Type.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Import Datatypes.",
            "VernacRequire",
            "350db8f3140677d474467a5e88eca685d88fa9ed"
        ],
        [
            "Require Export Logic.",
            "VernacRequire",
            "72af7dd63aace23822470bcc5a8b39a14bb9fd79"
        ],
        [
            "Definition notT (A:Type) := A -> False.",
            "VernacDefinition",
            "121cdb4435f8eae1ca71bf40ff52213455506d0e"
        ],
        [
            "Section identity_is_a_congruence.",
            "VernacBeginSection",
            "35e4d69bb92466e9204fb96aed37fabf111d9aaf"
        ],
        [
            "Variables A B : Type.",
            "VernacAssumption",
            "b4e42fd426c23cd1c77c79fc26c25f95338235a5"
        ],
        [
            "Variable f : A -> B.",
            "VernacAssumption",
            "3004efd9a4fde9fa8a2da5ba1f90ed0ede9c0963"
        ],
        [
            "Variables x y z : A.",
            "VernacAssumption",
            "5af47a1e5d9b45043af67b41be1fdc1f19ac2962"
        ],
        [
            "Lemma identity_sym : identity x y -> identity y x.",
            "VernacStartTheoremProof",
            "06d4f651d604d86fa169b27345d9294c93d8da0f"
        ],
        [
            "destruct 1; trivial.",
            "VernacExtend",
            "d48c8655680c86337a8e13c47c99bf710c2d6a97"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma identity_trans : identity x y -> identity y z -> identity x z.",
            "VernacStartTheoremProof",
            "f5fafa3e33c638cc8e162e3552c571e090d4071c"
        ],
        [
            "destruct 2; trivial.",
            "VernacExtend",
            "4ca9b57e23fb25fa189fcdfab945a4f568ccc22a"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma identity_congr : identity x y -> identity (f x) (f y).",
            "VernacStartTheoremProof",
            "f5abd9b0874510528f3be6680b13150f652f967b"
        ],
        [
            "destruct 1; trivial.",
            "VernacExtend",
            "d48c8655680c86337a8e13c47c99bf710c2d6a97"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma not_identity_sym : notT (identity x y) -> notT (identity y x).",
            "VernacStartTheoremProof",
            "6c71b2e71f8a41a71478a9d8d2e525f841118afd"
        ],
        [
            "red; intros H H'; apply H; destruct H'; trivial.",
            "VernacExtend",
            "5e5ff01c28c7d6c8ba02d5818e6ae884dcd03f6c"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End identity_is_a_congruence.",
            "VernacEndSegment",
            "15e78822511e6e77272592a4d75b678f8e965466"
        ],
        [
            "Definition identity_ind_r : forall (A:Type) (a:A) (P:A -> Prop), P a -> forall y:A, identity y a -> P y.",
            "VernacDefinition",
            "f16c4e5bef73b7ee741319b1cc7ac5b9be5a6dce"
        ],
        [
            "intros A x P H y H0; case identity_sym with (1 := H0); trivial.",
            "VernacExtend",
            "5c2741f8a9c6dd8f8fb6d157d2f8382f69767675"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition identity_rec_r : forall (A:Type) (a:A) (P:A -> Set), P a -> forall y:A, identity y a -> P y.",
            "VernacDefinition",
            "bd9ffb58447d4ee99ef4db0a9f8e56ee39a3efc8"
        ],
        [
            "intros A x P H y H0; case identity_sym with (1 := H0); trivial.",
            "VernacExtend",
            "5c2741f8a9c6dd8f8fb6d157d2f8382f69767675"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition identity_rect_r : forall (A:Type) (a:A) (P:A -> Type), P a -> forall y:A, identity y a -> P y.",
            "VernacDefinition",
            "3b9ab8d45c880664a9c2cc754090d862727a1a37"
        ],
        [
            "intros A x P H y H0; case identity_sym with (1 := H0); trivial.",
            "VernacExtend",
            "5c2741f8a9c6dd8f8fb6d157d2f8382f69767675"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Hint Immediate identity_sym not_identity_sym: core.",
            "VernacHints",
            "db134dd348bf6a8930bdc4d651880e7f58ab03e2"
        ],
        [
            "Notation refl_id := identity_refl (only parsing).",
            "VernacSyntacticDefinition",
            "761773a5396894b063809e9e9a7295f10082192d"
        ],
        [
            "Notation sym_id := identity_sym (only parsing).",
            "VernacSyntacticDefinition",
            "4c3ab4a6d2c102534abdf4ecff420ce7ed4d7517"
        ],
        [
            "Notation trans_id := identity_trans (only parsing).",
            "VernacSyntacticDefinition",
            "4182851dd5bebd7d8e27076d5e64763827665f0a"
        ],
        [
            "Notation sym_not_id := not_identity_sym (only parsing).",
            "VernacSyntacticDefinition",
            "a5a489c317a166058b3c826c1f323a7910d46755"
        ]
    ],
    "proofs": [
        {
            "name": "identity_sym",
            "line_nb": 8,
            "steps": [
                {
                    "command": [
                        "destruct 1; trivial.",
                        "VernacExtend",
                        "d48c8655680c86337a8e13c47c99bf710c2d6a97"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "identity_trans",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "destruct 2; trivial.",
                        "VernacExtend",
                        "4ca9b57e23fb25fa189fcdfab945a4f568ccc22a"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "identity_congr",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "destruct 1; trivial.",
                        "VernacExtend",
                        "d48c8655680c86337a8e13c47c99bf710c2d6a97"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "not_identity_sym",
            "line_nb": 17,
            "steps": [
                {
                    "command": [
                        "red; intros H H'; apply H; destruct H'; trivial.",
                        "VernacExtend",
                        "5e5ff01c28c7d6c8ba02d5818e6ae884dcd03f6c"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "identity_ind_r",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros A x P H y H0; case identity_sym with (1 := H0); trivial.",
                        "VernacExtend",
                        "5c2741f8a9c6dd8f8fb6d157d2f8382f69767675"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "identity_rec_r",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "intros A x P H y H0; case identity_sym with (1 := H0); trivial.",
                        "VernacExtend",
                        "5c2741f8a9c6dd8f8fb6d157d2f8382f69767675"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "identity_rect_r",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros A x P H y H0; case identity_sym with (1 := H0); trivial.",
                        "VernacExtend",
                        "5c2741f8a9c6dd8f8fb6d157d2f8382f69767675"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}