{
    "filename": "theories/Init/Datatypes.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Require Import Notations.",
            "VernacRequire",
            "a417ebd977b31297f271a9380cd8e45e4058428d"
        ],
        [
            "Require Import Logic.",
            "VernacRequire",
            "2ca6e83156f5377790b2a99f2b4cfefc04ad2cf8"
        ],
        [
            "Inductive Empty_set : Set :=.",
            "VernacInductive",
            "241392ee00153683e692a14bce56596799155c35"
        ],
        [
            "Inductive unit : Set := tt : unit.",
            "VernacInductive",
            "bd7e8229ebe045ac6bd5a27e81438b2c460fdef1"
        ],
        [
            "Inductive bool : Set := | true : bool | false : bool.",
            "VernacInductive",
            "7a445b4415c9dc3f24f5d453df3461d2febd3748"
        ],
        [
            "Add Printing If bool.",
            "VernacAddOption",
            "ed8b46736beea1029fe9834acfcc57b5bea3801c"
        ],
        [
            "Delimit Scope bool_scope with bool.",
            "VernacDelimiters",
            "f5f0ead23ea84f91eb9a75ed3ef82f5c7c7e94b6"
        ],
        [
            "Bind Scope bool_scope with bool.",
            "VernacBindScope",
            "142ee215b3fd2e1dd193b237b74394c72f6a9cd0"
        ],
        [
            "Definition andb (b1 b2:bool) : bool := if b1 then b2 else false.",
            "VernacDefinition",
            "9de1b31ffe018c4005de38892d6042a77c3691eb"
        ],
        [
            "Definition orb (b1 b2:bool) : bool := if b1 then true else b2.",
            "VernacDefinition",
            "f96433d1f383a6b787d6758277edab349e74606b"
        ],
        [
            "Definition implb (b1 b2:bool) : bool := if b1 then b2 else true.",
            "VernacDefinition",
            "fba808011fb6402559b03101cd971e76bf13e71c"
        ],
        [
            "Definition xorb (b1 b2:bool) : bool := match b1, b2 with | true, true => false | true, false => true | false, true => true | false, false => false end.",
            "VernacDefinition",
            "bca89bc7c7483b25e71879a3bfc7f47a338d0810"
        ],
        [
            "Definition negb (b:bool) := if b then false else true.",
            "VernacDefinition",
            "39e5c9cda78ffd5dfac25ea5673c193ff4387f3a"
        ],
        [
            "Infix \"||\" := orb : bool_scope.",
            "VernacInfix",
            "0b5e79f281dc8739925f9fd75cedcff15dadf7d2"
        ],
        [
            "Infix \"&&\" := andb : bool_scope.",
            "VernacInfix",
            "5f6ab8b16bb49165376d63f6aed8d7bbcc8fe1f4"
        ],
        [
            "Lemma andb_prop : forall a b:bool, andb a b = true -> a = true /\\ b = true.",
            "VernacStartTheoremProof",
            "d236dc18bc547e0122dd6b0adf12e07a25018de9"
        ],
        [
            "destruct a, b; repeat split; assumption.",
            "VernacExtend",
            "92eaf8f2088caed48d32051d31979fe327e5f93d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve andb_prop: bool.",
            "VernacHints",
            "f07a1079a36bd0b2bbe695b6c050e06ee6d073a2"
        ],
        [
            "Lemma andb_true_intro : forall b1 b2:bool, b1 = true /\\ b2 = true -> andb b1 b2 = true.",
            "VernacStartTheoremProof",
            "62ca7171ce9bf9f4d07212804de718f8d3b3c493"
        ],
        [
            "destruct b1; destruct b2; simpl; intros [? ?]; assumption.",
            "VernacExtend",
            "7649de812ef336d2286aa8e30d44f39ebb68b8af"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve andb_true_intro: bool.",
            "VernacHints",
            "fa161221e8b28fa11091cf6faebbb113db1a2ff2"
        ],
        [
            "Inductive eq_true : bool -> Prop := is_eq_true : eq_true true.",
            "VernacInductive",
            "7c2625d4b6629fc49c85735f89cfa91d74562ddc"
        ],
        [
            "Hint Constructors eq_true : eq_true.",
            "VernacHints",
            "064ecf215ee6b561bbc20a23a6d8a52e3e6ac7b4"
        ],
        [
            "Definition is_true b := b = true.",
            "VernacDefinition",
            "e4a76e26a70cbe937b60859f5d412f45fd8078aa"
        ],
        [
            "Lemma eq_true_ind_r : forall (P : bool -> Prop) (b : bool), P b -> eq_true b -> P true.",
            "VernacStartTheoremProof",
            "8ad3338f9579f445a741a14a9ab5dc909f2899f2"
        ],
        [
            "intros P b H H0; destruct H0 in H; assumption.",
            "VernacExtend",
            "e645553967a9cd3528b0d248f9f8ba667604495d"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma eq_true_rec_r : forall (P : bool -> Set) (b : bool), P b -> eq_true b -> P true.",
            "VernacStartTheoremProof",
            "e3290c784d4dbc2ab7ded9e9794b298bce984d99"
        ],
        [
            "intros P b H H0; destruct H0 in H; assumption.",
            "VernacExtend",
            "e645553967a9cd3528b0d248f9f8ba667604495d"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Lemma eq_true_rect_r : forall (P : bool -> Type) (b : bool), P b -> eq_true b -> P true.",
            "VernacStartTheoremProof",
            "7422c2b0605148c992835f3cabdc95ab2b625ef5"
        ],
        [
            "intros P b H H0; destruct H0 in H; assumption.",
            "VernacExtend",
            "e645553967a9cd3528b0d248f9f8ba667604495d"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Inductive BoolSpec (P Q : Prop) : bool -> Prop := | BoolSpecT : P -> BoolSpec P Q true | BoolSpecF : Q -> BoolSpec P Q false.",
            "VernacInductive",
            "337260e4ea3736e41807bd6ab45180a00f8aeb67"
        ],
        [
            "Hint Constructors BoolSpec.",
            "VernacHints",
            "3e091cac9653f33106f57b10996e21c8439f4941"
        ],
        [
            "Inductive nat : Set := | O : nat | S : nat -> nat.",
            "VernacInductive",
            "11d6c4ab7049565313bffaf0ce1507c5dc28aa6a"
        ],
        [
            "Delimit Scope nat_scope with nat.",
            "VernacDelimiters",
            "66a5755276765ea06a514d6d6376e9d5cf469f80"
        ],
        [
            "Bind Scope nat_scope with nat.",
            "VernacBindScope",
            "f39b7750fbaaa60060ae8ffa40a6bba5737c34ae"
        ],
        [
            "Arguments S _%nat.",
            "VernacArguments",
            "d578be4cbc212ed72e04073974a4133c26ddc95b"
        ],
        [
            "Inductive option (A:Type) : Type := | Some : A -> option A | None : option A.",
            "VernacInductive",
            "50ce3d645c4d6508e2b02220b852458bcfa3954e"
        ],
        [
            "Arguments Some {A} a.",
            "VernacArguments",
            "7c3128f76a37d40ce29c9acae5510715452b1df6"
        ],
        [
            "Arguments None {A}.",
            "VernacArguments",
            "ccb48aa7492b0b030c2f672778db5b12ca723ae6"
        ],
        [
            "Definition option_map (A B:Type) (f:A->B) (o : option A) : option B := match o with | Some a => @Some B (f a) | None => @None B end.",
            "VernacDefinition",
            "dab21d9ae0eeeec3da48f331cb62936e8b5f5328"
        ],
        [
            "Inductive sum (A B:Type) : Type := | inl : A -> sum A B | inr : B -> sum A B.",
            "VernacInductive",
            "588b59c37e9b76c2535603b12e953b2a9f19dd66"
        ],
        [
            "Notation \"x + y\" := (sum x y) : type_scope.",
            "VernacNotation",
            "c3f0c437368efe95d157d5dd9944f6d292c31deb"
        ],
        [
            "Arguments inl {A B} _ , [A] B _.",
            "VernacArguments",
            "58b7555849314efcbd46681845b27ff8c7e4873a"
        ],
        [
            "Arguments inr {A B} _ , A [B] _.",
            "VernacArguments",
            "1c87db033b37a3f3eb94dd69002b8fa616cafec0"
        ],
        [
            "Inductive prod (A B:Type) : Type := pair : A -> B -> prod A B.",
            "VernacInductive",
            "3374a3925f0cf30a16633b29d83055ed64a8906a"
        ],
        [
            "Add Printing Let prod.",
            "VernacAddOption",
            "d0ecef52beb2d6ccaca0549a6626eaf2fdc4ec20"
        ],
        [
            "Notation \"x * y\" := (prod x y) : type_scope.",
            "VernacNotation",
            "e441a21c10395cc04350ded7bbe3123f9405da5d"
        ],
        [
            "Notation \"( x , y , .. , z )\" := (pair .. (pair x y) .. z) : core_scope.",
            "VernacNotation",
            "7389c72deb2ed584a080514c366b990bc9d12f3c"
        ],
        [
            "Arguments pair {A B} _ _.",
            "VernacArguments",
            "17ebab83f8adde3a93c6048c243a8342a3bc7bb8"
        ],
        [
            "Section projections.",
            "VernacBeginSection",
            "1f94b4ace75a8d25b13f9632643c31a1f39fecab"
        ],
        [
            "Context {A : Type} {B : Type}.",
            "VernacContext",
            "323523a26206bee13b65e268b5ca919c73c95844"
        ],
        [
            "Definition fst (p:A * B) := match p with | (x, y) => x end.",
            "VernacDefinition",
            "34fc06322d0ed5efe9d528f45047bfb4e130c03e"
        ],
        [
            "Definition snd (p:A * B) := match p with | (x, y) => y end.",
            "VernacDefinition",
            "7f111d4f32f639f837741c9fe8e99e8e47634113"
        ],
        [
            "End projections.",
            "VernacEndSegment",
            "be9dc1fd3f6b9ca8178d07a254993da8cfafa819"
        ],
        [
            "Hint Resolve pair inl inr: core.",
            "VernacHints",
            "9436483e6a8ab85ec777f4097d583748c610f7b5"
        ],
        [
            "Lemma surjective_pairing : forall (A B:Type) (p:A * B), p = pair (fst p) (snd p).",
            "VernacStartTheoremProof",
            "cb037e92360c08b16f5b2fe7b162d05a991f8a1a"
        ],
        [
            "destruct p; reflexivity.",
            "VernacExtend",
            "df120dd8b9b654682ce0d9f597aa32f128d53706"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma injective_projections : forall (A B:Type) (p1 p2:A * B), fst p1 = fst p2 -> snd p1 = snd p2 -> p1 = p2.",
            "VernacStartTheoremProof",
            "2a159e096e3f35020f4f33ed64a864d0ac16d2a7"
        ],
        [
            "destruct p1; destruct p2; simpl; intros Hfst Hsnd.",
            "VernacExtend",
            "2ddd8500a0088385aa16975e318405113d6c91be"
        ],
        [
            "rewrite Hfst; rewrite Hsnd; reflexivity.",
            "VernacExtend",
            "aecbf404dc42acdf46d6716ca5809dbbb69c5547"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition prod_uncurry (A B C:Type) (f:prod A B -> C) (x:A) (y:B) : C := f (pair x y).",
            "VernacDefinition",
            "5f7f01619adfcad8ba2b337da168548cc4cd424f"
        ],
        [
            "Definition prod_curry (A B C:Type) (f:A -> B -> C) (p:prod A B) : C := match p with | pair x y => f x y end.",
            "VernacDefinition",
            "a4200584f4eabebb78eec7670571e14a20d05373"
        ],
        [
            "Inductive list (A : Type) : Type := | nil : list A | cons : A -> list A -> list A.",
            "VernacInductive",
            "50abbe0e0968f9a3e17eba154bb7d198d038efca"
        ],
        [
            "Arguments nil {A}.",
            "VernacArguments",
            "3c51e9ecc8700e2268490451cd9e43513e6dcf72"
        ],
        [
            "Arguments cons {A} a l.",
            "VernacArguments",
            "f1e79de5b338f0fcf07efd3acfca34f536ad774a"
        ],
        [
            "Infix \"::\" := cons (at level 60, right associativity) : list_scope.",
            "VernacInfix",
            "c70094bf4cb776995f17bfbc89220bde76b001e6"
        ],
        [
            "Delimit Scope list_scope with list.",
            "VernacDelimiters",
            "9a83bccb3d4030eca495a06c5476967a6471868d"
        ],
        [
            "Bind Scope list_scope with list.",
            "VernacBindScope",
            "7add1878400edcc0703d99fd4fe0f0d3f2057154"
        ],
        [
            "Local Open Scope list_scope.",
            "VernacOpenCloseScope",
            "b7ffbc8664ccf2e54673194b986563efc763189d"
        ],
        [
            "Definition length (A : Type) : list A -> nat := fix length l := match l with | nil => O | _ :: l' => S (length l') end.",
            "VernacDefinition",
            "4a55ae96fcf0efecc3fa22d020d0d2e0f9461580"
        ],
        [
            "Definition app (A : Type) : list A -> list A -> list A := fix app l m := match l with | nil => m | a :: l1 => a :: app l1 m end.",
            "VernacDefinition",
            "6ba1ca38e9ff8801edbd492031f1e59ee1166559"
        ],
        [
            "Infix \"++\" := app (right associativity, at level 60) : list_scope.",
            "VernacInfix",
            "ab2c42e5f1edf3603a554dc95b6ceccd7cf7872e"
        ],
        [
            "Inductive comparison : Set := | Eq : comparison | Lt : comparison | Gt : comparison.",
            "VernacInductive",
            "5471bfa8cde40bb67ec607294d4731c40b480a97"
        ],
        [
            "Lemma comparison_eq_stable : forall c c' : comparison, ~~ c = c' -> c = c'.",
            "VernacStartTheoremProof",
            "b0b48dc7827a6b2a63de09cd6518b904ccb08ed1"
        ],
        [
            "destruct c, c'; intro H; reflexivity || destruct H; discriminate.",
            "VernacExtend",
            "1d8cf27d19934108452e3259b1d24e0b72ea318b"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition CompOpp (r:comparison) := match r with | Eq => Eq | Lt => Gt | Gt => Lt end.",
            "VernacDefinition",
            "7653a67fe0df17233a942995b874f3088f9cf03f"
        ],
        [
            "Lemma CompOpp_involutive : forall c, CompOpp (CompOpp c) = c.",
            "VernacStartTheoremProof",
            "7abc084a5ee1c5242d555289a535771cbce63be7"
        ],
        [
            "destruct c; reflexivity.",
            "VernacExtend",
            "edfe2f63736697c4110e429d594d6cb524694bb0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CompOpp_inj : forall c c', CompOpp c = CompOpp c' -> c = c'.",
            "VernacStartTheoremProof",
            "b104c3152d90dbf6782c6f5395085c5a82eb00c6"
        ],
        [
            "destruct c; destruct c'; auto; discriminate.",
            "VernacExtend",
            "45e266b0498cff8ae2b01ac442f342047d6e0849"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma CompOpp_iff : forall c c', CompOpp c = c' <-> c = CompOpp c'.",
            "VernacStartTheoremProof",
            "f6676b5d92c4dfbd882f28d945d15d27ce899c42"
        ],
        [
            "split; intros; apply CompOpp_inj; rewrite CompOpp_involutive; auto.",
            "VernacExtend",
            "d4d3ab6cc4c6efece1ed2f13152efdffee7c9493"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Inductive CompareSpec (Peq Plt Pgt : Prop) : comparison -> Prop := | CompEq : Peq -> CompareSpec Peq Plt Pgt Eq | CompLt : Plt -> CompareSpec Peq Plt Pgt Lt | CompGt : Pgt -> CompareSpec Peq Plt Pgt Gt.",
            "VernacInductive",
            "b8384ff2725bdc9ce0463e4a57e12c7c730e5ddc"
        ],
        [
            "Hint Constructors CompareSpec.",
            "VernacHints",
            "433d2443218dce0725a37d5ab6c0bdbc7c43f4ee"
        ],
        [
            "Inductive CompareSpecT (Peq Plt Pgt : Prop) : comparison -> Type := | CompEqT : Peq -> CompareSpecT Peq Plt Pgt Eq | CompLtT : Plt -> CompareSpecT Peq Plt Pgt Lt | CompGtT : Pgt -> CompareSpecT Peq Plt Pgt Gt.",
            "VernacInductive",
            "b36affcc3bb68151c65fe35032911b15487115c8"
        ],
        [
            "Hint Constructors CompareSpecT.",
            "VernacHints",
            "fc97cfe3672b1b1b85ebea3131610fcfc7dfc124"
        ],
        [
            "Lemma CompareSpec2Type : forall Peq Plt Pgt c, CompareSpec Peq Plt Pgt c -> CompareSpecT Peq Plt Pgt c.",
            "VernacStartTheoremProof",
            "8223571da2d9186ebb89c6c03f97f67f3da8dfd4"
        ],
        [
            "destruct c; intros H; constructor; inversion_clear H; auto.",
            "VernacExtend",
            "e0ea38e56ad3dfeadb92f03afc36145bfe54e8c8"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Definition CompSpec {A} (eq lt : A->A->Prop)(x y:A) : comparison -> Prop := CompareSpec (eq x y) (lt x y) (lt y x).",
            "VernacDefinition",
            "fc5774fc337601537f695553d33a809102c7d741"
        ],
        [
            "Definition CompSpecT {A} (eq lt : A->A->Prop)(x y:A) : comparison -> Type := CompareSpecT (eq x y) (lt x y) (lt y x).",
            "VernacDefinition",
            "f513066f4fa1c2f1afd14d7b359e879e7ef89078"
        ],
        [
            "Hint Unfold CompSpec CompSpecT.",
            "VernacHints",
            "63089ffc76ccf2116423423c609c386c0b3765b5"
        ],
        [
            "Lemma CompSpec2Type : forall A (eq lt:A->A->Prop) x y c, CompSpec eq lt x y c -> CompSpecT eq lt x y c.",
            "VernacStartTheoremProof",
            "4ef9e55a6ec2bcc20de2a11192a0727e6bc92d14"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply CompareSpec2Type; assumption.",
            "VernacExtend",
            "bffc14d2daa53905073d613c63d5fabfd3f54420"
        ],
        [
            "Defined.",
            "VernacEndProof",
            "88c0be54a50df4bb90276c075406fe442428eb9c"
        ],
        [
            "Inductive identity (A:Type) (a:A) : A -> Type := identity_refl : identity a a.",
            "VernacInductive",
            "b381309ad968e93bb67ddbae73d5daf323012347"
        ],
        [
            "Hint Resolve identity_refl: core.",
            "VernacHints",
            "31b6856ce57e1d4a7981c46d22756d43d74d02ac"
        ],
        [
            "Arguments identity_ind [A] a P f y i.",
            "VernacArguments",
            "fe899fb6932194facb33d1179b8e69792919b2bb"
        ],
        [
            "Arguments identity_rec [A] a P f y i.",
            "VernacArguments",
            "3bd9f329c8406eb703b7a2555c60d758cdb0a26f"
        ],
        [
            "Arguments identity_rect [A] a P f y i.",
            "VernacArguments",
            "639152c631a7f3b399a35a04515161f77cfa4992"
        ],
        [
            "Definition ID := forall A:Type, A -> A.",
            "VernacDefinition",
            "7f6a3328e8d244d955d3b3d048a112371ad5c092"
        ],
        [
            "Definition id : ID := fun A x => x.",
            "VernacDefinition",
            "758c2a14c2828fd116a92d6cb30ef4c716875679"
        ],
        [
            "Definition IDProp := forall A:Prop, A -> A.",
            "VernacDefinition",
            "da0f04fbeb8ad6e3f80680962cbd50f5050e69e9"
        ],
        [
            "Definition idProp : IDProp := fun A x => x.",
            "VernacDefinition",
            "eb4a55b2b08fa23b6615db051c6dde6e6f32c780"
        ],
        [
            "Notation prodT := prod (only parsing).",
            "VernacSyntacticDefinition",
            "55dd317c6b65e99e8ade3f2b22c4859dd157173d"
        ],
        [
            "Notation pairT := pair (only parsing).",
            "VernacSyntacticDefinition",
            "5e54cab36ea6e0fdcb1df34c7032b48bdd5f8f52"
        ],
        [
            "Notation prodT_rect := prod_rect (only parsing).",
            "VernacSyntacticDefinition",
            "b1f9749c4d041ebce1ad47166a354fbafe179d98"
        ],
        [
            "Notation prodT_rec := prod_rec (only parsing).",
            "VernacSyntacticDefinition",
            "ca23c4ede79760d20de6f00ca4dc02041f0ac003"
        ],
        [
            "Notation prodT_ind := prod_ind (only parsing).",
            "VernacSyntacticDefinition",
            "0ea4ed5b012953c56a1b00ae790e11df873d7ab2"
        ],
        [
            "Notation fstT := fst (only parsing).",
            "VernacSyntacticDefinition",
            "7d207e301fd19981a7836ee41fd983f4d2b1ae0a"
        ],
        [
            "Notation sndT := snd (only parsing).",
            "VernacSyntacticDefinition",
            "9233bb6822ed3bdb3b14b9c7a96b21fa6ff96b3a"
        ],
        [
            "Notation prodT_uncurry := prod_uncurry (only parsing).",
            "VernacSyntacticDefinition",
            "7a35bfec70861e6de1634b88b1c2a419b2a72b12"
        ],
        [
            "Notation prodT_curry := prod_curry (only parsing).",
            "VernacSyntacticDefinition",
            "f91f8b8c5b2f7ea6fc064a1c220e984f43313d44"
        ]
    ],
    "proofs": [
        {
            "name": "andb_prop",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "destruct a, b; repeat split; assumption.",
                        "VernacExtend",
                        "92eaf8f2088caed48d32051d31979fe327e5f93d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "andb_true_intro",
            "line_nb": 20,
            "steps": [
                {
                    "command": [
                        "destruct b1; destruct b2; simpl; intros [? ?]; assumption.",
                        "VernacExtend",
                        "7649de812ef336d2286aa8e30d44f39ebb68b8af"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "eq_true_ind_r",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "intros P b H H0; destruct H0 in H; assumption.",
                        "VernacExtend",
                        "e645553967a9cd3528b0d248f9f8ba667604495d"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "eq_true_rec_r",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "intros P b H H0; destruct H0 in H; assumption.",
                        "VernacExtend",
                        "e645553967a9cd3528b0d248f9f8ba667604495d"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "eq_true_rect_r",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "intros P b H H0; destruct H0 in H; assumption.",
                        "VernacExtend",
                        "e645553967a9cd3528b0d248f9f8ba667604495d"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "surjective_pairing",
            "line_nb": 61,
            "steps": [
                {
                    "command": [
                        "destruct p; reflexivity.",
                        "VernacExtend",
                        "df120dd8b9b654682ce0d9f597aa32f128d53706"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "injective_projections",
            "line_nb": 64,
            "steps": [
                {
                    "command": [
                        "destruct p1; destruct p2; simpl; intros Hfst Hsnd.",
                        "VernacExtend",
                        "2ddd8500a0088385aa16975e318405113d6c91be"
                    ]
                },
                {
                    "command": [
                        "rewrite Hfst; rewrite Hsnd; reflexivity.",
                        "VernacExtend",
                        "aecbf404dc42acdf46d6716ca5809dbbb69c5547"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "comparison_eq_stable",
            "line_nb": 81,
            "steps": [
                {
                    "command": [
                        "destruct c, c'; intro H; reflexivity || destruct H; discriminate.",
                        "VernacExtend",
                        "1d8cf27d19934108452e3259b1d24e0b72ea318b"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CompOpp_involutive",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "destruct c; reflexivity.",
                        "VernacExtend",
                        "edfe2f63736697c4110e429d594d6cb524694bb0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CompOpp_inj",
            "line_nb": 88,
            "steps": [
                {
                    "command": [
                        "destruct c; destruct c'; auto; discriminate.",
                        "VernacExtend",
                        "45e266b0498cff8ae2b01ac442f342047d6e0849"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CompOpp_iff",
            "line_nb": 91,
            "steps": [
                {
                    "command": [
                        "split; intros; apply CompOpp_inj; rewrite CompOpp_involutive; auto.",
                        "VernacExtend",
                        "d4d3ab6cc4c6efece1ed2f13152efdffee7c9493"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "CompareSpec2Type",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "destruct c; intros H; constructor; inversion_clear H; auto.",
                        "VernacExtend",
                        "e0ea38e56ad3dfeadb92f03afc36145bfe54e8c8"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        },
        {
            "name": "CompSpec2Type",
            "line_nb": 104,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply CompareSpec2Type; assumption.",
                        "VernacExtend",
                        "bffc14d2daa53905073d613c63d5fabfd3f54420"
                    ]
                },
                {
                    "command": [
                        "Defined.",
                        "VernacEndProof",
                        "88c0be54a50df4bb90276c075406fe442428eb9c"
                    ]
                }
            ]
        }
    ]
}