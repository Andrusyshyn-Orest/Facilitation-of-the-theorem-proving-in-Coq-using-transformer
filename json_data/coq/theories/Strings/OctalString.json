{
    "filename": "theories/Strings/OctalString.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Ascii String.",
            "VernacRequire",
            "e692811779218ba321ba408ada0f358c19af5606"
        ],
        [
            "Require Import BinNums.",
            "VernacRequire",
            "edbef0a4da1bba0656d5c4f56721a64722efc493"
        ],
        [
            "Import BinNatDef.",
            "VernacImport",
            "2ffcebb6bdab3e20028a47800f8a579bd535c72c"
        ],
        [
            "Import BinIntDef.",
            "VernacImport",
            "1c8cf25bf3b920415fe7dba780340dc9679e565f"
        ],
        [
            "Import BinPosDef.",
            "VernacImport",
            "2ded832a132dbb19830f6e101e88e4fbf3f25b91"
        ],
        [
            "Local Open Scope positive_scope.",
            "VernacOpenCloseScope",
            "373b6149b002bb2947d7edec759c86b4538856cb"
        ],
        [
            "Local Open Scope string_scope.",
            "VernacOpenCloseScope",
            "347f91aff322dccfab9c81382e495d8430d8e803"
        ],
        [
            "Definition ascii_to_digit (ch : ascii) : option N := (if ascii_dec ch \"0\" then Some 0 else if ascii_dec ch \"1\" then Some 1 else if ascii_dec ch \"2\" then Some 2 else if ascii_dec ch \"3\" then Some 3 else if ascii_dec ch \"4\" then Some 4 else if ascii_dec ch \"5\" then Some 5 else if ascii_dec ch \"6\" then Some 6 else if ascii_dec ch \"7\" then Some 7 else None)%N.",
            "VernacDefinition",
            "06aecb2e2724e4aacf6bd57004b54bf4aee74617"
        ],
        [
            "Fixpoint pos_oct_app (p q:positive) : positive := match q with | 1 => p~0~0~1 | 2 => p~0~1~0 | 3 => p~0~1~1 | 4 => p~1~0~0 | 5 => p~1~0~1 | 6 => p~1~1~0 | 7 => p~1~1~1 | q~0~0~0 => (pos_oct_app p q)~0~0~0 | q~0~0~1 => (pos_oct_app p q)~0~0~1 | q~0~1~0 => (pos_oct_app p q)~0~1~0 | q~0~1~1 => (pos_oct_app p q)~0~1~1 | q~1~0~0 => (pos_oct_app p q)~1~0~0 | q~1~0~1 => (pos_oct_app p q)~1~0~1 | q~1~1~0 => (pos_oct_app p q)~1~1~0 | q~1~1~1 => (pos_oct_app p q)~1~1~1 end.",
            "VernacFixpoint",
            "2fc81d4f25b7b39d9653f5ba9372651d121ddf2c"
        ],
        [
            "Module Raw.",
            "VernacDefineModule",
            "d1044187bf73f07090e152616f4d5a5d245c74fd"
        ],
        [
            "Fixpoint of_pos (p : positive) (rest : string) : string := match p with | 1 => String \"1\" rest | 2 => String \"2\" rest | 3 => String \"3\" rest | 4 => String \"4\" rest | 5 => String \"5\" rest | 6 => String \"6\" rest | 7 => String \"7\" rest | p'~0~0~0 => of_pos p' (String \"0\" rest) | p'~0~0~1 => of_pos p' (String \"1\" rest) | p'~0~1~0 => of_pos p' (String \"2\" rest) | p'~0~1~1 => of_pos p' (String \"3\" rest) | p'~1~0~0 => of_pos p' (String \"4\" rest) | p'~1~0~1 => of_pos p' (String \"5\" rest) | p'~1~1~0 => of_pos p' (String \"6\" rest) | p'~1~1~1 => of_pos p' (String \"7\" rest) end.",
            "VernacFixpoint",
            "5a55ac2ee2a3a705172f8edd68880ce879c86377"
        ],
        [
            "Fixpoint to_N (s : string) (rest : N) : N := match s with | \"\" => rest | String ch s' => to_N s' match ascii_to_digit ch with | Some v => N.add v (N.mul 8 rest) | None => N0 end end.",
            "VernacFixpoint",
            "60b235f8804de6552d90934d85a7ae363cc5f92d"
        ],
        [
            "Fixpoint to_N_of_pos (p : positive) (rest : string) (base : N) : to_N (of_pos p rest) base = to_N rest match base with | N0 => N.pos p | Npos v => Npos (pos_oct_app v p) end.",
            "VernacFixpoint",
            "739001c9c38752f52f6134171e52f2b18698bb22"
        ],
        [
            "do 3 try destruct p as [p|p|]; destruct base; try reflexivity; cbn; rewrite to_N_of_pos; reflexivity.",
            "VernacExtend",
            "9125aa85391bd9dfb54ea126dfdd0bced8efd15d"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Raw.",
            "VernacEndSegment",
            "2fd749d80ea291efaaecadd9d1993cc21838a722"
        ],
        [
            "Definition of_pos (p : positive) : string := String \"0\" (String \"o\" (Raw.of_pos p \"\")).",
            "VernacDefinition",
            "e85768eee7090f36927816f8d5de4fab40816fb0"
        ],
        [
            "Definition of_N (n : N) : string := match n with | N0 => \"0o0\" | Npos p => of_pos p end.",
            "VernacDefinition",
            "df52d548075c4e31fbf42d60be84a19c9cd20b67"
        ],
        [
            "Definition of_Z (z : Z) : string := match z with | Zneg p => String \"-\" (of_pos p) | Z0 => \"0o0\" | Zpos p => of_pos p end.",
            "VernacDefinition",
            "c69c2773dadd48c44ef862ea3a51bddb7fa481d9"
        ],
        [
            "Definition of_nat (n : nat) : string := of_N (N.of_nat n).",
            "VernacDefinition",
            "9c4e8a32a9eb0f85ba377c1dca2d4749c876b4f7"
        ],
        [
            "Definition to_N (s : string) : N := match s with | String s0 (String so s) => if ascii_dec s0 \"0\" then if ascii_dec so \"o\" then Raw.to_N s N0 else N0 else N0 | _ => N0 end.",
            "VernacDefinition",
            "2ba039e1267b58ce115c7a86e069eeb3d031806a"
        ],
        [
            "Definition to_pos (s : string) : positive := match to_N s with | N0 => 1 | Npos p => p end.",
            "VernacDefinition",
            "adc9b1a9a8e89a5163d7fe5692ba030f0edf3e4c"
        ],
        [
            "Definition to_Z (s : string) : Z := let '(is_neg, n) := match s with | String s0 s' => if ascii_dec s0 \"-\" then (true, to_N s') else (false, to_N s) | EmptyString => (false, to_N s) end in match n with | N0 => Z0 | Npos p => if is_neg then Zneg p else Zpos p end.",
            "VernacDefinition",
            "04015e420ad8e4bab25031bda1df4b7df0a22fcc"
        ],
        [
            "Definition to_nat (s : string) : nat := N.to_nat (to_N s).",
            "VernacDefinition",
            "df453223f9b95861c4185ccb90b883cc4e264098"
        ],
        [
            "Lemma to_N_of_N (n : N) : to_N (of_N n) = n.",
            "VernacStartTheoremProof",
            "9a7f7082f2f00fccb7f5d5c8bf18cc0b57f4378a"
        ],
        [
            "destruct n; [ reflexivity | apply Raw.to_N_of_pos ].",
            "VernacExtend",
            "c323d5d31a2b96a7f55c35e4426242d415436cc0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma to_Z_of_Z (z : Z) : to_Z (of_Z z) = z.",
            "VernacStartTheoremProof",
            "12899c3a3abb610ca05f17ec41bf003ad48b870b"
        ],
        [
            "cbv [of_Z to_Z]; destruct z as [|z|z]; cbn; try reflexivity; rewrite Raw.to_N_of_pos; cbn; reflexivity.",
            "VernacExtend",
            "c6bba449105f372ad3e65af21d788f2469b21c74"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma to_nat_of_nat (n : nat) : to_nat (of_nat n) = n.",
            "VernacStartTheoremProof",
            "f008e85c261d7ac97bae63ea3b8f65ffe7b7f11f"
        ],
        [
            "cbv [to_nat of_nat]; rewrite to_N_of_N, Nnat.Nat2N.id; reflexivity.",
            "VernacExtend",
            "07f3a8ccb607e2ea8da1e2d670eaf8ff32ed30b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma to_pos_of_pos (p : positive) : to_pos (of_pos p) = p.",
            "VernacStartTheoremProof",
            "fd53fc76e999e6cf74689199659c070125bd0009"
        ],
        [
            "cbv [of_pos to_pos to_N]; cbn; rewrite Raw.to_N_of_pos; cbn; reflexivity.",
            "VernacExtend",
            "64177dca65b2a04897cede5b71c1ad3313334106"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Example of_pos_1 : of_pos 1 = \"0o1\" := eq_refl.",
            "VernacDefinition",
            "a5925cf58c2952039b4d236d4675429fb93f6fc1"
        ],
        [
            "Example of_pos_2 : of_pos 2 = \"0o2\" := eq_refl.",
            "VernacDefinition",
            "72446f2c45b4b1fbc0007a99986118e20e809196"
        ],
        [
            "Example of_pos_3 : of_pos 3 = \"0o3\" := eq_refl.",
            "VernacDefinition",
            "526d41bcbeb134c6accbc1d4e8aa05aae15d6ae2"
        ],
        [
            "Example of_pos_7 : of_pos 7 = \"0o7\" := eq_refl.",
            "VernacDefinition",
            "3a3cfd899f77f1627d8da82ca250d96ebc10b833"
        ],
        [
            "Example of_pos_8 : of_pos 8 = \"0o10\" := eq_refl.",
            "VernacDefinition",
            "2bebc55dc7c2d4b468558015cce9dc7818e3218e"
        ],
        [
            "Example of_N_0 : of_N 0 = \"0o0\" := eq_refl.",
            "VernacDefinition",
            "5f5778b6788c0cc390de2f5740c4e6c0420f87ea"
        ],
        [
            "Example of_Z_0 : of_Z 0 = \"0o0\" := eq_refl.",
            "VernacDefinition",
            "a87b443ac42e0618373435666f4c5c5d4db892e5"
        ],
        [
            "Example of_Z_m1 : of_Z (-1) = \"-0o1\" := eq_refl.",
            "VernacDefinition",
            "6a5df4fb18ef7e1207f6c6351ccf2fc6100cc87b"
        ],
        [
            "Example of_nat_0 : of_nat 0 = \"0o0\" := eq_refl.",
            "VernacDefinition",
            "73ddd0c5c1562e5627cd047f0cbdb23a6031f4a5"
        ]
    ],
    "proofs": [
        {
            "name": "to_N_of_pos",
            "line_nb": 12,
            "steps": [
                {
                    "command": [
                        "do 3 try destruct p as [p|p|]; destruct base; try reflexivity; cbn; rewrite to_N_of_pos; reflexivity.",
                        "VernacExtend",
                        "9125aa85391bd9dfb54ea126dfdd0bced8efd15d"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_N_of_N",
            "line_nb": 24,
            "steps": [
                {
                    "command": [
                        "destruct n; [ reflexivity | apply Raw.to_N_of_pos ].",
                        "VernacExtend",
                        "c323d5d31a2b96a7f55c35e4426242d415436cc0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_Z_of_Z",
            "line_nb": 27,
            "steps": [
                {
                    "command": [
                        "cbv [of_Z to_Z]; destruct z as [|z|z]; cbn; try reflexivity; rewrite Raw.to_N_of_pos; cbn; reflexivity.",
                        "VernacExtend",
                        "c6bba449105f372ad3e65af21d788f2469b21c74"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_nat_of_nat",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "cbv [to_nat of_nat]; rewrite to_N_of_N, Nnat.Nat2N.id; reflexivity.",
                        "VernacExtend",
                        "07f3a8ccb607e2ea8da1e2d670eaf8ff32ed30b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_pos_of_pos",
            "line_nb": 33,
            "steps": [
                {
                    "command": [
                        "cbv [of_pos to_pos to_N]; cbn; rewrite Raw.to_N_of_pos; cbn; reflexivity.",
                        "VernacExtend",
                        "64177dca65b2a04897cede5b71c1ad3313334106"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}