{
    "filename": "theories/Strings/HexString.v",
    "coq_project": "coq",
    "vernac_cmds": [
        [
            "Require Import Ascii String.",
            "VernacRequire",
            "e692811779218ba321ba408ada0f358c19af5606"
        ],
        [
            "Require Import BinNums.",
            "VernacRequire",
            "edbef0a4da1bba0656d5c4f56721a64722efc493"
        ],
        [
            "Import BinNatDef.",
            "VernacImport",
            "2ffcebb6bdab3e20028a47800f8a579bd535c72c"
        ],
        [
            "Import BinIntDef.",
            "VernacImport",
            "1c8cf25bf3b920415fe7dba780340dc9679e565f"
        ],
        [
            "Import BinPosDef.",
            "VernacImport",
            "2ded832a132dbb19830f6e101e88e4fbf3f25b91"
        ],
        [
            "Local Open Scope positive_scope.",
            "VernacOpenCloseScope",
            "373b6149b002bb2947d7edec759c86b4538856cb"
        ],
        [
            "Local Open Scope string_scope.",
            "VernacOpenCloseScope",
            "347f91aff322dccfab9c81382e495d8430d8e803"
        ],
        [
            "Local Notation \"a || b\" := (if a then true else if b then true else false).",
            "VernacNotation",
            "9d353d0358ed0bcaa9885777c9e5931d1e187d71"
        ],
        [
            "Definition ascii_to_digit (ch : ascii) : option N := (if ascii_dec ch \"0\" then Some 0 else if ascii_dec ch \"1\" then Some 1 else if ascii_dec ch \"2\" then Some 2 else if ascii_dec ch \"3\" then Some 3 else if ascii_dec ch \"4\" then Some 4 else if ascii_dec ch \"5\" then Some 5 else if ascii_dec ch \"6\" then Some 6 else if ascii_dec ch \"7\" then Some 7 else if ascii_dec ch \"8\" then Some 8 else if ascii_dec ch \"9\" then Some 9 else if ascii_dec ch \"a\" || ascii_dec ch \"A\" then Some 10 else if ascii_dec ch \"b\" || ascii_dec ch \"B\" then Some 11 else if ascii_dec ch \"c\" || ascii_dec ch \"C\" then Some 12 else if ascii_dec ch \"d\" || ascii_dec ch \"D\" then Some 13 else if ascii_dec ch \"e\" || ascii_dec ch \"E\" then Some 14 else if ascii_dec ch \"f\" || ascii_dec ch \"F\" then Some 15 else None)%N.",
            "VernacDefinition",
            "bf4e656870376610aac8df21ff5152400b9a28f9"
        ],
        [
            "Fixpoint pos_hex_app (p q:positive) : positive := match q with | 1 => p~0~0~0~1 | 2 => p~0~0~1~0 | 3 => p~0~0~1~1 | 4 => p~0~1~0~0 | 5 => p~0~1~0~1 | 6 => p~0~1~1~0 | 7 => p~0~1~1~1 | 8 => p~1~0~0~0 | 9 => p~1~0~0~1 | 10 => p~1~0~1~0 | 11 => p~1~0~1~1 | 12 => p~1~1~0~0 | 13 => p~1~1~0~1 | 14 => p~1~1~1~0 | 15 => p~1~1~1~1 | q~0~0~0~0 => (pos_hex_app p q)~0~0~0~0 | q~0~0~0~1 => (pos_hex_app p q)~0~0~0~1 | q~0~0~1~0 => (pos_hex_app p q)~0~0~1~0 | q~0~0~1~1 => (pos_hex_app p q)~0~0~1~1 | q~0~1~0~0 => (pos_hex_app p q)~0~1~0~0 | q~0~1~0~1 => (pos_hex_app p q)~0~1~0~1 | q~0~1~1~0 => (pos_hex_app p q)~0~1~1~0 | q~0~1~1~1 => (pos_hex_app p q)~0~1~1~1 | q~1~0~0~0 => (pos_hex_app p q)~1~0~0~0 | q~1~0~0~1 => (pos_hex_app p q)~1~0~0~1 | q~1~0~1~0 => (pos_hex_app p q)~1~0~1~0 | q~1~0~1~1 => (pos_hex_app p q)~1~0~1~1 | q~1~1~0~0 => (pos_hex_app p q)~1~1~0~0 | q~1~1~0~1 => (pos_hex_app p q)~1~1~0~1 | q~1~1~1~0 => (pos_hex_app p q)~1~1~1~0 | q~1~1~1~1 => (pos_hex_app p q)~1~1~1~1 end.",
            "VernacFixpoint",
            "ac195e91b0aeb1d3b3814bf4245fd9a799b508e7"
        ],
        [
            "Module Raw.",
            "VernacDefineModule",
            "d1044187bf73f07090e152616f4d5a5d245c74fd"
        ],
        [
            "Fixpoint of_pos (p : positive) (rest : string) : string := match p with | 1 => String \"1\" rest | 2 => String \"2\" rest | 3 => String \"3\" rest | 4 => String \"4\" rest | 5 => String \"5\" rest | 6 => String \"6\" rest | 7 => String \"7\" rest | 8 => String \"8\" rest | 9 => String \"9\" rest | 10 => String \"a\" rest | 11 => String \"b\" rest | 12 => String \"c\" rest | 13 => String \"d\" rest | 14 => String \"e\" rest | 15 => String \"f\" rest | p'~0~0~0~0 => of_pos p' (String \"0\" rest) | p'~0~0~0~1 => of_pos p' (String \"1\" rest) | p'~0~0~1~0 => of_pos p' (String \"2\" rest) | p'~0~0~1~1 => of_pos p' (String \"3\" rest) | p'~0~1~0~0 => of_pos p' (String \"4\" rest) | p'~0~1~0~1 => of_pos p' (String \"5\" rest) | p'~0~1~1~0 => of_pos p' (String \"6\" rest) | p'~0~1~1~1 => of_pos p' (String \"7\" rest) | p'~1~0~0~0 => of_pos p' (String \"8\" rest) | p'~1~0~0~1 => of_pos p' (String \"9\" rest) | p'~1~0~1~0 => of_pos p' (String \"a\" rest) | p'~1~0~1~1 => of_pos p' (String \"b\" rest) | p'~1~1~0~0 => of_pos p' (String \"c\" rest) | p'~1~1~0~1 => of_pos p' (String \"d\" rest) | p'~1~1~1~0 => of_pos p' (String \"e\" rest) | p'~1~1~1~1 => of_pos p' (String \"f\" rest) end.",
            "VernacFixpoint",
            "b19dbb8626a03708c0a3e1f9a5a0ee4f31d3fc9b"
        ],
        [
            "Fixpoint to_N (s : string) (rest : N) : N := match s with | \"\" => rest | String ch s' => to_N s' match ascii_to_digit ch with | Some v => N.add v (N.mul 16 rest) | None => N0 end end.",
            "VernacFixpoint",
            "0fa4a21d0a20a751c834a4787eee4352c5adbddc"
        ],
        [
            "Fixpoint to_N_of_pos (p : positive) (rest : string) (base : N) : to_N (of_pos p rest) base = to_N rest match base with | N0 => N.pos p | Npos v => Npos (pos_hex_app v p) end.",
            "VernacFixpoint",
            "3e67d0e4af7d85aebe56af81f958c6243d259170"
        ],
        [
            "do 4 try destruct p as [p|p|]; destruct base; try reflexivity; cbn; rewrite to_N_of_pos; reflexivity.",
            "VernacExtend",
            "e83b033d09c2eebcea72602c936e25e1c702750e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Raw.",
            "VernacEndSegment",
            "2fd749d80ea291efaaecadd9d1993cc21838a722"
        ],
        [
            "Definition of_pos (p : positive) : string := String \"0\" (String \"x\" (Raw.of_pos p \"\")).",
            "VernacDefinition",
            "e46f2206a40a442111f4d179c30ccc282eaa9e03"
        ],
        [
            "Definition of_N (n : N) : string := match n with | N0 => \"0x0\" | Npos p => of_pos p end.",
            "VernacDefinition",
            "0e84a0d04dedbfd68a9ba8d37385047e7475ff7f"
        ],
        [
            "Definition of_Z (z : Z) : string := match z with | Zneg p => String \"-\" (of_pos p) | Z0 => \"0x0\" | Zpos p => of_pos p end.",
            "VernacDefinition",
            "b017b754809ca4a05002c8a42b8f6db2addb8a35"
        ],
        [
            "Definition of_nat (n : nat) : string := of_N (N.of_nat n).",
            "VernacDefinition",
            "9c4e8a32a9eb0f85ba377c1dca2d4749c876b4f7"
        ],
        [
            "Definition to_N (s : string) : N := match s with | String s0 (String so s) => if ascii_dec s0 \"0\" then if ascii_dec so \"x\" then Raw.to_N s N0 else N0 else N0 | _ => N0 end.",
            "VernacDefinition",
            "241b8e13b88ce0cd0db8846fd28b266e2ba2e4fa"
        ],
        [
            "Definition to_pos (s : string) : positive := match to_N s with | N0 => 1 | Npos p => p end.",
            "VernacDefinition",
            "adc9b1a9a8e89a5163d7fe5692ba030f0edf3e4c"
        ],
        [
            "Definition to_Z (s : string) : Z := let '(is_neg, n) := match s with | String s0 s' => if ascii_dec s0 \"-\" then (true, to_N s') else (false, to_N s) | EmptyString => (false, to_N s) end in match n with | N0 => Z0 | Npos p => if is_neg then Zneg p else Zpos p end.",
            "VernacDefinition",
            "04015e420ad8e4bab25031bda1df4b7df0a22fcc"
        ],
        [
            "Definition to_nat (s : string) : nat := N.to_nat (to_N s).",
            "VernacDefinition",
            "df453223f9b95861c4185ccb90b883cc4e264098"
        ],
        [
            "Lemma to_N_of_N (n : N) : to_N (of_N n) = n.",
            "VernacStartTheoremProof",
            "9a7f7082f2f00fccb7f5d5c8bf18cc0b57f4378a"
        ],
        [
            "destruct n; [ reflexivity | apply Raw.to_N_of_pos ].",
            "VernacExtend",
            "c323d5d31a2b96a7f55c35e4426242d415436cc0"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma to_Z_of_Z (z : Z) : to_Z (of_Z z) = z.",
            "VernacStartTheoremProof",
            "12899c3a3abb610ca05f17ec41bf003ad48b870b"
        ],
        [
            "cbv [of_Z to_Z]; destruct z as [|z|z]; cbn; try reflexivity; rewrite Raw.to_N_of_pos; cbn; reflexivity.",
            "VernacExtend",
            "c6bba449105f372ad3e65af21d788f2469b21c74"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma to_nat_of_nat (n : nat) : to_nat (of_nat n) = n.",
            "VernacStartTheoremProof",
            "f008e85c261d7ac97bae63ea3b8f65ffe7b7f11f"
        ],
        [
            "cbv [to_nat of_nat]; rewrite to_N_of_N, Nnat.Nat2N.id; reflexivity.",
            "VernacExtend",
            "07f3a8ccb607e2ea8da1e2d670eaf8ff32ed30b4"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma to_pos_of_pos (p : positive) : to_pos (of_pos p) = p.",
            "VernacStartTheoremProof",
            "fd53fc76e999e6cf74689199659c070125bd0009"
        ],
        [
            "cbv [of_pos to_pos to_N]; cbn; rewrite Raw.to_N_of_pos; cbn; reflexivity.",
            "VernacExtend",
            "64177dca65b2a04897cede5b71c1ad3313334106"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Example of_pos_1 : of_pos 1 = \"0x1\" := eq_refl.",
            "VernacDefinition",
            "87de618d1e8196030379649677bd085b71c59664"
        ],
        [
            "Example of_pos_2 : of_pos 2 = \"0x2\" := eq_refl.",
            "VernacDefinition",
            "dd5a89678970626f9a7327929b240f7901151f84"
        ],
        [
            "Example of_pos_3 : of_pos 3 = \"0x3\" := eq_refl.",
            "VernacDefinition",
            "e3e588773abd1f53e506266325321fe380340788"
        ],
        [
            "Example of_pos_7 : of_pos 7 = \"0x7\" := eq_refl.",
            "VernacDefinition",
            "f45550206c183d8a2cc974e1bed7f390d5b7a742"
        ],
        [
            "Example of_pos_8 : of_pos 8 = \"0x8\" := eq_refl.",
            "VernacDefinition",
            "d17d2495bae6fa6abe834d009a5ab4b738b3cfae"
        ],
        [
            "Example of_pos_9 : of_pos 9 = \"0x9\" := eq_refl.",
            "VernacDefinition",
            "4df9f23f52a671a9f31f95223d727bead43bd6bb"
        ],
        [
            "Example of_pos_10 : of_pos 10 = \"0xa\" := eq_refl.",
            "VernacDefinition",
            "f51ae0103e4965ae0abb9230b5b1a0cfc49ca0b5"
        ],
        [
            "Example of_pos_11 : of_pos 11 = \"0xb\" := eq_refl.",
            "VernacDefinition",
            "f85f2b3b6d5fd634ec7a746bb87fc339483d1e43"
        ],
        [
            "Example of_pos_12 : of_pos 12 = \"0xc\" := eq_refl.",
            "VernacDefinition",
            "4e506a6e5c9ec764d4de2625e325213137042daa"
        ],
        [
            "Example of_pos_13 : of_pos 13 = \"0xd\" := eq_refl.",
            "VernacDefinition",
            "f4fe21839ceb806397248175feb474715d0080f0"
        ],
        [
            "Example of_pos_14 : of_pos 14 = \"0xe\" := eq_refl.",
            "VernacDefinition",
            "24a08502c61f08b54fefb1545bab6f416dca2af6"
        ],
        [
            "Example of_pos_15 : of_pos 15 = \"0xf\" := eq_refl.",
            "VernacDefinition",
            "9d4b33f69c17ea70039059b1ad360e74ea152ec7"
        ],
        [
            "Example of_pos_16 : of_pos 16 = \"0x10\" := eq_refl.",
            "VernacDefinition",
            "3b25a62c6e92bd28a28cab6d9a356b0fde227d66"
        ],
        [
            "Example of_N_0 : of_N 0 = \"0x0\" := eq_refl.",
            "VernacDefinition",
            "71e8fb5ad55d42ca6c108ebc7d2d0f021f441019"
        ],
        [
            "Example of_Z_0 : of_Z 0 = \"0x0\" := eq_refl.",
            "VernacDefinition",
            "267955e47da7841822c39b5ed18d0d50bc0e49c5"
        ],
        [
            "Example of_Z_m1 : of_Z (-1) = \"-0x1\" := eq_refl.",
            "VernacDefinition",
            "e80722ea6ba22f120118d277ab91d5aced8e70f6"
        ],
        [
            "Example of_nat_0 : of_nat 0 = \"0x0\" := eq_refl.",
            "VernacDefinition",
            "65d15e4852a492152438ecf05aee5279a1e40f1e"
        ]
    ],
    "proofs": [
        {
            "name": "to_N_of_pos",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "do 4 try destruct p as [p|p|]; destruct base; try reflexivity; cbn; rewrite to_N_of_pos; reflexivity.",
                        "VernacExtend",
                        "e83b033d09c2eebcea72602c936e25e1c702750e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_N_of_N",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "destruct n; [ reflexivity | apply Raw.to_N_of_pos ].",
                        "VernacExtend",
                        "c323d5d31a2b96a7f55c35e4426242d415436cc0"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_Z_of_Z",
            "line_nb": 28,
            "steps": [
                {
                    "command": [
                        "cbv [of_Z to_Z]; destruct z as [|z|z]; cbn; try reflexivity; rewrite Raw.to_N_of_pos; cbn; reflexivity.",
                        "VernacExtend",
                        "c6bba449105f372ad3e65af21d788f2469b21c74"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_nat_of_nat",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "cbv [to_nat of_nat]; rewrite to_N_of_N, Nnat.Nat2N.id; reflexivity.",
                        "VernacExtend",
                        "07f3a8ccb607e2ea8da1e2d670eaf8ff32ed30b4"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "to_pos_of_pos",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "cbv [of_pos to_pos to_N]; cbn; rewrite Raw.to_N_of_pos; cbn; reflexivity.",
                        "VernacExtend",
                        "64177dca65b2a04897cede5b71c1ad3313334106"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}