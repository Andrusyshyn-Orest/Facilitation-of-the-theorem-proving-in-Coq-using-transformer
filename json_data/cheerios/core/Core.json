{
    "filename": "core/Core.v",
    "coq_project": "cheerios",
    "vernac_cmds": [
        [
            "Require Import Ascii List ZArith.",
            "VernacRequire",
            "0d2b486350dfdc02cf2cce9191a18f79f9491371"
        ],
        [
            "Import ListNotations.",
            "VernacImport",
            "52647db2a3b752153a8cbd37039246f200bccdee"
        ],
        [
            "Require Import Cheerios.Types.",
            "VernacRequire",
            "46b2cecda127dda2359c33e53831c86a39bf3e81"
        ],
        [
            "Require Import Cheerios.ByteDecidable.",
            "VernacRequire",
            "9bf379341e4fcecb4028ce3e72d62eaab12f30f8"
        ],
        [
            "Set Implicit Arguments.",
            "VernacSetOption",
            "9e84ff8896f028601d8aded48c1d4aebe60aa584"
        ],
        [
            "Module IOStreamWriter : WRITER.",
            "VernacDefineModule",
            "253d54053eac473756974fedfacb71ac002c70d3"
        ],
        [
            "Inductive iostream := | Empty : iostream | WriteByte : byte -> iostream | Seq : iostream -> (unit -> iostream) -> iostream.",
            "VernacInductive",
            "b70e5fc803fdea934ea9598733c3d836337a93b1"
        ],
        [
            "Definition t := iostream.",
            "VernacDefinition",
            "a99a3dfda5a32b38388be9f219ef53ac2d3d6847"
        ],
        [
            "Fixpoint iostreamDenote (i : iostream) : list byte := match i with | Empty => [] | WriteByte b => [b] | Seq i1 i2 => iostreamDenote i1 ++ iostreamDenote (i2 tt) end.",
            "VernacFixpoint",
            "8394f33756ec188d10a50e55d9cb70cbb425dbac"
        ],
        [
            "Definition unwrap := iostreamDenote.",
            "VernacDefinition",
            "7926882d1314d19d119ba2fb049bf8069d682a69"
        ],
        [
            "Definition empty : iostream := Empty.",
            "VernacDefinition",
            "5511f08bbc34a7454f1bd519f2aa023760720b13"
        ],
        [
            "Definition putByte : byte -> iostream := WriteByte.",
            "VernacDefinition",
            "a3df54f689c0ee6c552be142a863214076525d84"
        ],
        [
            "Definition append : (unit -> iostream) -> (unit -> iostream) -> iostream := fun t1 t2 => Seq (t1 tt) t2.",
            "VernacDefinition",
            "c27c3656540f4243d99f9b1aadaa075eddb4a417"
        ],
        [
            "Lemma empty_unwrap : unwrap empty = [].",
            "VernacStartTheoremProof",
            "f7a42d168d57fa359403fe32f8fc14c17f2e37a7"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma append_unwrap : forall x y : unit -> t, unwrap (append x y) = unwrap (x tt) ++ unwrap (y tt).",
            "VernacStartTheoremProof",
            "581102276fb375a72d4fe4b26761f9aafeed0cae"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma putByte_unwrap : forall (a : byte), unwrap (putByte a) = [a].",
            "VernacStartTheoremProof",
            "cf796bba239a9c17aa5029733b7f0c07e55322d6"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition wire := list byte.",
            "VernacDefinition",
            "7c8d0116d2983d692fed02bfc742b1c015d43156"
        ],
        [
            "Definition wire_eq_dec := list_eq_dec byte_eq_dec.",
            "VernacDefinition",
            "97acc29a86a311e5e94ca6cdaf81c8686d601940"
        ],
        [
            "Definition wire_wrap := unwrap.",
            "VernacDefinition",
            "5a19ad63d788e667de118d7fb35d87c3c76af6a9"
        ],
        [
            "Definition wire_unwrap (x : wire) := x.",
            "VernacDefinition",
            "c6e6c3eb4fb545eeb1b8180cf5dcecc4e8a04e90"
        ],
        [
            "Lemma wire_wrap_unwrap : forall x, wire_unwrap (wire_wrap x) = unwrap x.",
            "VernacStartTheoremProof",
            "dc9ec8896d1daa1ac9a1cbe7292a7c3d790ff7a9"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition out_channel := list byte.",
            "VernacDefinition",
            "39260b207a87d24dfb754c2da943f0ab21211732"
        ],
        [
            "Definition in_channel := list byte.",
            "VernacDefinition",
            "73cfe99b5264f4b12de6d91b020e59650d1aff67"
        ],
        [
            "Definition out_channel_wrap s := unwrap s.",
            "VernacDefinition",
            "4d299f0069e301d35d19eeb794611714661fd812"
        ],
        [
            "Definition channel_send (o : out_channel) : in_channel := o.",
            "VernacDefinition",
            "2d336cc14e188f98c551c590f55d784892873e89"
        ],
        [
            "Definition in_channel_unwrap (i : in_channel) : list byte := i.",
            "VernacDefinition",
            "1edc5e5688ea2cdc0df32a330953542a440fdf78"
        ],
        [
            "Theorem channel_wrap_unwrap : forall x, in_channel_unwrap (channel_send (out_channel_wrap x)) = unwrap x.",
            "VernacStartTheoremProof",
            "2f12642189e51a02b5de8d533672a7f557322a56"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End IOStreamWriter.",
            "VernacEndSegment",
            "a439f9a38cc3a744ba2082e6817c5017c4f204f2"
        ],
        [
            "Notation \"a +$+ b\" := (IOStreamWriter.append (fun _ => a) (fun _ => b)) (at level 60, right associativity).",
            "VernacNotation",
            "924475d7819254557c4b1f3350ef69e0a80ba363"
        ],
        [
            "Module ByteListReader : READER.",
            "VernacDefineModule",
            "bf3364eea7bac7f0f67f8836ee301eb4f9b09145"
        ],
        [
            "Definition t (A : Type) := list byte -> option (A * list byte).",
            "VernacDefinition",
            "ce3ba5082d6467b2593e0afc845af597175961fd"
        ],
        [
            "Definition unwrap {A} (x : t A) := x.",
            "VernacDefinition",
            "019b0a51259eeed3f1a9190198ced81375d50886"
        ],
        [
            "Definition getByte (l : list byte) := match l with | [] => None | b :: l => Some (b, l) end.",
            "VernacDefinition",
            "4ec69de26abb5780a67b136423adbbc8e5e1daf0"
        ],
        [
            "Definition ret {A} (a : A) : t A := fun s => Some (a, s).",
            "VernacDefinition",
            "6218406df56f978f7988ecb3122fcbad63afce88"
        ],
        [
            "Definition bind {A B} (m : t A) (f : A -> t B) : t B := fun s => match m s with None => None | Some (a, s') => f a s' end.",
            "VernacDefinition",
            "58d3ed5d238f61569739fc13a2af6f66fc1c3302"
        ],
        [
            "Definition map {A B} (f : A -> B) (d : t A) : t B := bind d (fun a => ret (f a)).",
            "VernacDefinition",
            "dd1cb855db1378c0429952edf30582222c5dbfda"
        ],
        [
            "Definition error {A} : t A := fun l => None.",
            "VernacDefinition",
            "c7d77fc9ea89f74352ff46ab3fdf2ba3d3d42b4c"
        ],
        [
            "Lemma getByte_unwrap : forall l, unwrap getByte l = match l with | [] => None | b :: l => Some (b, l) end.",
            "VernacStartTheoremProof",
            "7f42be5c076772b90083dec8b390d22853a6a3a9"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma bind_unwrap : forall A B (m : t A) (f : A -> t B) bytes, unwrap (bind m f) bytes = match unwrap m bytes with | None => None | Some (v, bytes) => unwrap (f v) bytes end.",
            "VernacStartTheoremProof",
            "eafbc6f3c664ef9b1b0d2548143ea0cd3b69e7aa"
        ],
        [
            "unfold bind.",
            "VernacExtend",
            "92681da8eee126803006dd670c74799566b9f60d"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Fixpoint fold {S A} (f : byte -> S -> fold_state S A) (s : S) (l : list byte) := match l with | [] => None | b :: l => match f b s with | Done a => Some (a, l) | More s => fold f s l | Error => None end end.",
            "VernacFixpoint",
            "27eb4bc440d844527a5be0bed1ce1689f5377084"
        ],
        [
            "Lemma ret_unwrap : forall {A} (x: A) bytes, unwrap (ret x) bytes = Some (x, bytes).",
            "VernacStartTheoremProof",
            "e019b2799db561bc135dee305d09c45507606550"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma map_unwrap: forall A B (f: A -> B) (d: t A) bytes, unwrap (map f d) bytes = match (unwrap d bytes) with | None => None | Some (v, bytes) => Some (f v, bytes) end.",
            "VernacStartTheoremProof",
            "fb45d15f9350635cb45a30471470e8c98e95d250"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma fold_unwrap : forall {S A : Type} (f : byte -> S -> fold_state S A) (s : S) l, unwrap (fold f s) l = match l with | [] => None | b :: l => match f b s with | Done a => Some (a, l) | More s => unwrap (fold f s) l | Error => None end end.",
            "VernacStartTheoremProof",
            "f6c560614e47505ac427b804d009a695d11edd02"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "simpl.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "destruct l; reflexivity.",
            "VernacExtend",
            "42b473bf3e8933eacdf63f985b424a7e6c62ee2e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End ByteListReader.",
            "VernacEndSegment",
            "98884829f59cb78d4784a588f0daf41025086016"
        ],
        [
            "Arguments ByteListReader.error {_}.",
            "VernacArguments",
            "f7de38b7856028add89c2a71da57f8262e6bdb4f"
        ],
        [
            "Notation serialize_deserialize_id_spec s d := (forall a bytes, ByteListReader.unwrap d (IOStreamWriter.unwrap (s a) ++ bytes) = Some(a, bytes)).",
            "VernacSyntacticDefinition",
            "24c1d17af6125615b459dbcc65c20334878e4e19"
        ],
        [
            "Class Serializer (A : Type) : Type := { serialize : A -> IOStreamWriter.t; deserialize : ByteListReader.t A; serialize_deserialize_id : serialize_deserialize_id_spec serialize deserialize }.",
            "VernacInductive",
            "49ec4067ee208adcebead9e8726c2f21943df57e"
        ],
        [
            "Hint Rewrite @serialize_deserialize_id : cheerios.",
            "VernacExtend",
            "bc9883576e44411cbfa9ec6a014d556ded08046b"
        ],
        [
            "Lemma serialize_deserialize_id_nil : forall A (sA : Serializer A) a, ByteListReader.unwrap deserialize (IOStreamWriter.unwrap (serialize a)) = Some (a, []).",
            "VernacStartTheoremProof",
            "a191649ad5c37e570f615dd7669c55077b5cdd48"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "pose proof serialize_deserialize_id a [].",
            "VernacExtend",
            "1462e0e698bc2ab003b4e04e08d1908097a0e1a3"
        ],
        [
            "now rewrite app_nil_r in *.",
            "VernacExtend",
            "d67a1961274d82bd44b49c9ff07412f50703475f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition serialize_top (s : IOStreamWriter.t) : IOStreamWriter.wire := IOStreamWriter.wire_wrap s.",
            "VernacDefinition",
            "3b77525fe0e4f14b9ce218c2805f0a6c6fc8fc74"
        ],
        [
            "Definition deserialize_top {A: Type} (d : ByteListReader.t A) (w : IOStreamWriter.wire) : option A := match ByteListReader.unwrap d (IOStreamWriter.wire_unwrap w) with | Some (a, []) => Some a | _ => None end.",
            "VernacDefinition",
            "4c170eb19eb35281f3a9557a7ded60d7c5215d16"
        ],
        [
            "Lemma serialize_deserialize_top_id' : forall {A} (d : ByteListReader.t A) s v, ByteListReader.unwrap d (IOStreamWriter.unwrap s) = Some (v, []) -> deserialize_top d (serialize_top s) = Some v.",
            "VernacStartTheoremProof",
            "a24b0cb29dcfbf1ab5ff88203f7f988283723eba"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold serialize_top, deserialize_top.",
            "VernacExtend",
            "ba3781461c2649d24d8850a004f206962e5ba52a"
        ],
        [
            "rewrite IOStreamWriter.wire_wrap_unwrap, H.",
            "VernacExtend",
            "8a9690b13471db3e52ba8701180034b2188bd54c"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma serialize_deserialize_top_invert : forall {A} (d : ByteListReader.t A) s v, deserialize_top d (serialize_top s) = Some v -> ByteListReader.unwrap d (IOStreamWriter.unwrap s) = Some (v, []).",
            "VernacStartTheoremProof",
            "c44ef4b5d4361e405de4ff2da45a6ad21901e9f0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold serialize_top, deserialize_top.",
            "VernacExtend",
            "ba3781461c2649d24d8850a004f206962e5ba52a"
        ],
        [
            "rewrite <-IOStreamWriter.wire_wrap_unwrap.",
            "VernacExtend",
            "9bd8cb122e841884153296332c5cf0cde52d85e1"
        ],
        [
            "unfold deserialize_top, serialize_top in H.",
            "VernacExtend",
            "881d664c814996d7339fcec39781ebf166d6cf3a"
        ],
        [
            "destruct (ByteListReader.unwrap d (IOStreamWriter.wire_unwrap (IOStreamWriter.wire_wrap s))).",
            "VernacExtend",
            "0c71d86af7a30b7ae086756c907f9e81b91a096e"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "destruct p.",
            "VernacExtend",
            "b4e16e38d42fc59fab0ab4e95e065fc358d5a1ad"
        ],
        [
            "destruct l; inversion H.",
            "VernacExtend",
            "f74db49357a4a21614cd8e21566ebe5f5f0e336d"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "-",
            "VernacBullet",
            "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
        ],
        [
            "inversion H.",
            "VernacExtend",
            "ee20838bdd77512b43142d655a3924bf07bffebb"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Theorem serialize_deserialize_top_id : forall {A : Type} {sA: Serializer A} a, deserialize_top deserialize (serialize_top (serialize a)) = Some a.",
            "VernacStartTheoremProof",
            "88ce65922db9feff40120e34434a8f4ad803b284"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "apply serialize_deserialize_top_id'.",
            "VernacExtend",
            "cd2df3fbd44dafa857abf64528a8ee2db5dcf4bd"
        ],
        [
            "apply serialize_deserialize_id_nil.",
            "VernacExtend",
            "e0aa8f2037a9ce35917aa8a01b368baf5c4228ca"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Axiom wire_serialize : IOStreamWriter.wire -> IOStreamWriter.t.",
            "VernacAssumption",
            "db4d3e5ce722135a3a44849dd39985152a200f26"
        ],
        [
            "Axiom wire_deserialize : ByteListReader.t IOStreamWriter.wire.",
            "VernacAssumption",
            "c99e91f84cfb20528264fedf44c72dedcae76e57"
        ],
        [
            "Axiom wire_serialize_deserialize_id : serialize_deserialize_id_spec wire_serialize wire_deserialize.",
            "VernacAssumption",
            "a357a0a57bc0aed66294a0b9c8e71e5c86d53f39"
        ],
        [
            "Instance wire_Serializer : Serializer IOStreamWriter.wire.",
            "VernacInstance",
            "48b2459d0b1a3bbbfca13bddc28cea80a9e2c462"
        ],
        [
            "exact {| serialize := wire_serialize; deserialize := wire_deserialize; serialize_deserialize_id := wire_serialize_deserialize_id |}.",
            "VernacExtend",
            "4fbbbc38efebd04e5010d2f538808c7af5332c90"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition to_channel : IOStreamWriter.t -> IOStreamWriter.out_channel := IOStreamWriter.out_channel_wrap.",
            "VernacDefinition",
            "6e69df9aa0b79559e7256e355daf0cd1898f277f"
        ],
        [
            "Definition from_channel {A} (d : ByteListReader.t A) (i : IOStreamWriter.in_channel) := match ByteListReader.unwrap d (IOStreamWriter.in_channel_unwrap i) with | Some (a, []) => Some a | _ => None end.",
            "VernacDefinition",
            "8ba717c7dd4153ccfdc6b419a53dfc75881b6c3a"
        ],
        [
            "Theorem serialize_deserialize_channel_id : forall {A} {sA : Serializer A} a, from_channel deserialize (IOStreamWriter.channel_send (to_channel (serialize a))) = Some a.",
            "VernacStartTheoremProof",
            "11d6e6f881c563d8d8cb14b146cdb7b1a40767d0"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "unfold to_channel, from_channel.",
            "VernacExtend",
            "8e826dd16890f4114c5f624e7febdc41cef4852d"
        ],
        [
            "rewrite IOStreamWriter.channel_wrap_unwrap.",
            "VernacExtend",
            "239cd5e83a35f93f3ef68242ed568957930ebfe3"
        ],
        [
            "rewrite serialize_deserialize_id_nil.",
            "VernacExtend",
            "9c9f86ad47e17a61cfb5f2a4f2708bd52378c7aa"
        ],
        [
            "reflexivity.",
            "VernacExtend",
            "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "empty_unwrap",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "append_unwrap",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "putByte_unwrap",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wire_wrap_unwrap",
            "line_nb": 26,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "channel_wrap_unwrap",
            "line_nb": 34,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "getByte_unwrap",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "bind_unwrap",
            "line_nb": 50,
            "steps": [
                {
                    "command": [
                        "unfold bind.",
                        "VernacExtend",
                        "92681da8eee126803006dd670c74799566b9f60d"
                    ]
                },
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "ret_unwrap",
            "line_nb": 56,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "map_unwrap",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fold_unwrap",
            "line_nb": 62,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "simpl.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "destruct l; reflexivity.",
                        "VernacExtend",
                        "42b473bf3e8933eacdf63f985b424a7e6c62ee2e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "serialize_deserialize_id_nil",
            "line_nb": 72,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "pose proof serialize_deserialize_id a [].",
                        "VernacExtend",
                        "1462e0e698bc2ab003b4e04e08d1908097a0e1a3"
                    ]
                },
                {
                    "command": [
                        "now rewrite app_nil_r in *.",
                        "VernacExtend",
                        "d67a1961274d82bd44b49c9ff07412f50703475f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "serialize_deserialize_top_id'",
            "line_nb": 79,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold serialize_top, deserialize_top.",
                        "VernacExtend",
                        "ba3781461c2649d24d8850a004f206962e5ba52a"
                    ]
                },
                {
                    "command": [
                        "rewrite IOStreamWriter.wire_wrap_unwrap, H.",
                        "VernacExtend",
                        "8a9690b13471db3e52ba8701180034b2188bd54c"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "serialize_deserialize_top_invert",
            "line_nb": 85,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold serialize_top, deserialize_top.",
                        "VernacExtend",
                        "ba3781461c2649d24d8850a004f206962e5ba52a"
                    ]
                },
                {
                    "command": [
                        "rewrite <-IOStreamWriter.wire_wrap_unwrap.",
                        "VernacExtend",
                        "9bd8cb122e841884153296332c5cf0cde52d85e1"
                    ]
                },
                {
                    "command": [
                        "unfold deserialize_top, serialize_top in H.",
                        "VernacExtend",
                        "881d664c814996d7339fcec39781ebf166d6cf3a"
                    ]
                },
                {
                    "command": [
                        "destruct (ByteListReader.unwrap d (IOStreamWriter.wire_unwrap (IOStreamWriter.wire_wrap s))).",
                        "VernacExtend",
                        "0c71d86af7a30b7ae086756c907f9e81b91a096e"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "destruct p.",
                        "VernacExtend",
                        "b4e16e38d42fc59fab0ab4e95e065fc358d5a1ad"
                    ]
                },
                {
                    "command": [
                        "destruct l; inversion H.",
                        "VernacExtend",
                        "f74db49357a4a21614cd8e21566ebe5f5f0e336d"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "-",
                        "VernacBullet",
                        "581cab4bf49fa4b495e569bbda96fc8d28fddcc0"
                    ]
                },
                {
                    "command": [
                        "inversion H.",
                        "VernacExtend",
                        "ee20838bdd77512b43142d655a3924bf07bffebb"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "serialize_deserialize_top_id",
            "line_nb": 98,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "apply serialize_deserialize_top_id'.",
                        "VernacExtend",
                        "cd2df3fbd44dafa857abf64528a8ee2db5dcf4bd"
                    ]
                },
                {
                    "command": [
                        "apply serialize_deserialize_id_nil.",
                        "VernacExtend",
                        "e0aa8f2037a9ce35917aa8a01b368baf5c4228ca"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "wire_Serializer",
            "line_nb": 106,
            "steps": [
                {
                    "command": [
                        "exact {| serialize := wire_serialize; deserialize := wire_deserialize; serialize_deserialize_id := wire_serialize_deserialize_id |}.",
                        "VernacExtend",
                        "4fbbbc38efebd04e5010d2f538808c7af5332c90"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "serialize_deserialize_channel_id",
            "line_nb": 111,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "unfold to_channel, from_channel.",
                        "VernacExtend",
                        "8e826dd16890f4114c5f624e7febdc41cef4852d"
                    ]
                },
                {
                    "command": [
                        "rewrite IOStreamWriter.channel_wrap_unwrap.",
                        "VernacExtend",
                        "239cd5e83a35f93f3ef68242ed568957930ebfe3"
                    ]
                },
                {
                    "command": [
                        "rewrite serialize_deserialize_id_nil.",
                        "VernacExtend",
                        "9c9f86ad47e17a61cfb5f2a4f2708bd52378c7aa"
                    ]
                },
                {
                    "command": [
                        "reflexivity.",
                        "VernacExtend",
                        "5cd1ae044f26cd6d89a5a5147c1d4fc5fc719d83"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}