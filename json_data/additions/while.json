{
    "filename": "while.v",
    "coq_project": "additions",
    "vernac_cmds": [
        [
            "Global Set Asymmetric Patterns.",
            "VernacSetOption",
            "2cc91d0a437fbd1f49bf43960caf4a2b10040c6b"
        ],
        [
            "Section while_do.",
            "VernacBeginSection",
            "369731e8560b0a68235084a4bcbee6cb7638bf75"
        ],
        [
            "Variable St : Set.",
            "VernacAssumption",
            "772314579030b32b1fdc537f8f64605a1358cf4e"
        ],
        [
            "Variable postcond : St -> Prop.",
            "VernacAssumption",
            "bd3d102366222b63967b84b5e0badd2ee929ea6c"
        ],
        [
            "Variable precond : St -> Prop.",
            "VernacAssumption",
            "b0e92bb5acf521c0ee8ab2f527c993625050540e"
        ],
        [
            "Variable Invar : St -> Prop.",
            "VernacAssumption",
            "efc5981cb9e2e3d4f8f6358661668e0c3a7d876b"
        ],
        [
            "Variable term_order : St -> St -> Prop.",
            "VernacAssumption",
            "431df6498f88da008fffc611568a2582547b7c7e"
        ],
        [
            "Variable LoopExit : St -> Prop.",
            "VernacAssumption",
            "e29f8a1bba664558427c12a85e79a423a04d57b5"
        ],
        [
            "Hypothesis LoopExit_dec : forall s : St, Invar s -> {LoopExit s} + {~ LoopExit s}.",
            "VernacAssumption",
            "2bc62b75eba2d5199b07f8c43a36e8c8eb361fbe"
        ],
        [
            "Hypothesis Onestep : forall s : St, ~ LoopExit s -> Invar s -> {s' : St | Invar s' /\\ term_order s' s}.",
            "VernacAssumption",
            "ba47eae6332b404848a4c3619d63628bd34ce9d4"
        ],
        [
            "Hypothesis LoopExit_ok : forall s : St, LoopExit s -> Invar s -> postcond s.",
            "VernacAssumption",
            "4dc6290c14380e482644ec5b4dc71c22bee1326c"
        ],
        [
            "Hypothesis loopstart : forall s : St, precond s -> Invar s.",
            "VernacAssumption",
            "65c9c7145a42a8bf39afcc4ac30ab8a14feb86e3"
        ],
        [
            "Hypothesis Termi : well_founded term_order.",
            "VernacAssumption",
            "70ae4b919bb4ab11b3e37ce3244f05f9facc5f47"
        ],
        [
            "Remark loopexec : forall s : St, Invar s -> {s' : St | Invar s' /\\ LoopExit s'}.",
            "VernacStartTheoremProof",
            "02f89a98c8ea37e42124b97250e1793ecb225232"
        ],
        [
            "refine (well_founded_induction Termi (fun s => _) (fun s hr i => match LoopExit_dec s i with | left _ => exist _ s _ | right _ => match Onestep s _ _ with | exist s' h' => match hr s' _ _ with | exist s'' _ => exist _ s'' _ end end end)); auto; elim h'; auto.",
            "VernacExtend",
            "065078386de1b9b375273edf8d6dd451b370fffd"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma startloop : forall s : St, precond s -> {s' : St | Invar s' /\\ LoopExit s'}.",
            "VernacStartTheoremProof",
            "17044cb3419551a31ebc97f9a6a8ac878efe7119"
        ],
        [
            "intros s p; apply loopexec with s; auto.",
            "VernacExtend",
            "6c0b8ee932d2c49f317d4c395a1516f211a16007"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma while_not : forall s : St, precond s -> {s' : St | postcond s'}.",
            "VernacStartTheoremProof",
            "4ffa80b566654cf6d2a617fdc4d7bbba2643eccf"
        ],
        [
            "refine (fun s p => match startloop s p with | exist s' h' => exist _ s' _ end); elim h'; auto.",
            "VernacExtend",
            "e6a3b7ff62078fc3dd97687a5f70951b101cb3a9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End while_do.",
            "VernacEndSegment",
            "e18f621a3c8fdb28f44f3d98bd1d286503410c8c"
        ]
    ],
    "proofs": [
        {
            "name": "loopexec",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "refine (well_founded_induction Termi (fun s => _) (fun s hr i => match LoopExit_dec s i with | left _ => exist _ s _ | right _ => match Onestep s _ _ with | exist s' h' => match hr s' _ _ with | exist s'' _ => exist _ s'' _ end end end)); auto; elim h'; auto.",
                        "VernacExtend",
                        "065078386de1b9b375273edf8d6dd451b370fffd"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "startloop",
            "line_nb": 16,
            "steps": [
                {
                    "command": [
                        "intros s p; apply loopexec with s; auto.",
                        "VernacExtend",
                        "6c0b8ee932d2c49f317d4c395a1516f211a16007"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "while_not",
            "line_nb": 19,
            "steps": [
                {
                    "command": [
                        "refine (fun s p => match startloop s p with | exist s' h' => exist _ s' _ end); elim h'; auto.",
                        "VernacExtend",
                        "e6a3b7ff62078fc3dd97687a5f70951b101cb3a9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}