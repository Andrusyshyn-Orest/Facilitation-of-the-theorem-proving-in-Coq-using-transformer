{
    "filename": "log2_spec.v",
    "coq_project": "additions",
    "vernac_cmds": [
        [
            "Require Import Arith.",
            "VernacRequire",
            "7f40051ec5b363eee0bbfd802b43ad2f8b97479f"
        ],
        [
            "Require Import Peano_dec.",
            "VernacRequire",
            "5f49ca778918c88f400242f11d696ec23079b44f"
        ],
        [
            "Require Import Constants.",
            "VernacRequire",
            "14418e3e4e499aa89eb4e9ac8e2c3218989f5a1f"
        ],
        [
            "Require Import Mult_compl.",
            "VernacRequire",
            "5c9c42ad0e826e562e958bc20d98dcce07a439cf"
        ],
        [
            "Require Import Wf_nat.",
            "VernacRequire",
            "e78e8b6524a9771b7c95f37880c2b88f96465784"
        ],
        [
            "Require Import euclid.",
            "VernacRequire",
            "2c4bf8f3e4058d398953e55885bbfdf41a4113cd"
        ],
        [
            "Require Import Le_lt_compl.",
            "VernacRequire",
            "f183c51d0c6d6360a134c6a11db00c5081abf4d0"
        ],
        [
            "Require Import shift.",
            "VernacRequire",
            "d22f2d835a5ff0b78532a2bfc619efeb185d78eb"
        ],
        [
            "Require Import Compare_dec.",
            "VernacRequire",
            "96b495dc82d6bd54e62353acae7d6e61222564e6"
        ],
        [
            "Require Import two_power.",
            "VernacRequire",
            "7d5ca9a1af3de98b54e6baa9cbe6dbfd1c444d9a"
        ],
        [
            "Definition log2_spec (n0 : nat) := {l : nat & {n0 = two_power l} + {two_power l < n0 /\\ n0 < two_power (S l)}}.",
            "VernacDefinition",
            "ebf149d4f0145e7cc456724bcbc824fd30ebd03f"
        ],
        [
            "Section applications.",
            "VernacBeginSection",
            "3f142cff400559d341a58b1f0bab096afedaa186"
        ],
        [
            "Variable log2 : forall n : nat, 0 < n -> log2_spec n.",
            "VernacAssumption",
            "3037deb52e976b362cc2c74af91fd80014573be0"
        ],
        [
            "Lemma ceiling_log2 : forall n : nat, one < n -> {l : nat | two_power (pred l) < n /\\ n <= two_power l}.",
            "VernacStartTheoremProof",
            "b9181efd6d0a5f4b166c0bae3f2442908973a211"
        ],
        [
            "refine (fun n _ => match log2 n _ with | existS l b => match b with | left e => exist _ l _ | right a => exist _ (S l) _ end end).",
            "VernacExtend",
            "49acef2abe18a38f234d7a682f6b632d284c7cb9"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "rewrite e; split.",
            "VernacExtend",
            "bf05da2c6f13f80681b0e1fa13e85c8989826ee6"
        ],
        [
            "apply two_power_mono.",
            "VernacExtend",
            "160ac2c0d4ef99becdcf4195e0bc563f83635abb"
        ],
        [
            "cut (0 < l).",
            "VernacExtend",
            "96adda3521fd3b14d6a91e5f8c64ae9432bea953"
        ],
        [
            "generalize l; induction l as [| l Hrecl]; auto with arith.",
            "VernacExtend",
            "62add112af1b42ca02aaaddba4831d1bf3fb9a7f"
        ],
        [
            "case (lt_or_Zero l); [ auto with arith | intro eg ].",
            "VernacExtend",
            "9260a64d857a3bb36b64f6b168a909897186d937"
        ],
        [
            "absurd (one < n); [ rewrite e; rewrite eg; simpl in |- *; auto with arith | auto with arith ].",
            "VernacExtend",
            "bc7e99616adaa2c0726e2baa1d85fc1410ec3924"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "unfold pred in |- *; elim a; auto with arith.",
            "VernacExtend",
            "78e4b084e834721deb2bba3d6576f40e4d3cd17e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma floor_log2 : forall n : nat, 0 < n -> {l : nat | two_power l <= n /\\ n < two_power (S l)}.",
            "VernacStartTheoremProof",
            "26c863b47b9c53dc331299f7db4a5f638e217c0f"
        ],
        [
            "refine (fun n _ => match log2 n _ with | existS l b => exist _ l _ end).",
            "VernacExtend",
            "09c992bce0423cbbac4542f1ea77d7ed4f683dd3"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "elim b; intro.",
            "VernacExtend",
            "9ac42db59af54349b151d52654f91dc016dc3cac"
        ],
        [
            "rewrite a; split; auto with arith.",
            "VernacExtend",
            "b20833b76fc11e98558ced486be898ca2a109d36"
        ],
        [
            "elim b0; auto with arith.",
            "VernacExtend",
            "dda29c4230c5d08116c87de7af994cdacceedbac"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End applications.",
            "VernacEndSegment",
            "2f94807dfb0043fac539e96c20055ed40ff74135"
        ]
    ],
    "proofs": [
        {
            "name": "ceiling_log2",
            "line_nb": 13,
            "steps": [
                {
                    "command": [
                        "refine (fun n _ => match log2 n _ with | existS l b => match b with | left e => exist _ l _ | right a => exist _ (S l) _ end end).",
                        "VernacExtend",
                        "49acef2abe18a38f234d7a682f6b632d284c7cb9"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "rewrite e; split.",
                        "VernacExtend",
                        "bf05da2c6f13f80681b0e1fa13e85c8989826ee6"
                    ]
                },
                {
                    "command": [
                        "apply two_power_mono.",
                        "VernacExtend",
                        "160ac2c0d4ef99becdcf4195e0bc563f83635abb"
                    ]
                },
                {
                    "command": [
                        "cut (0 < l).",
                        "VernacExtend",
                        "96adda3521fd3b14d6a91e5f8c64ae9432bea953"
                    ]
                },
                {
                    "command": [
                        "generalize l; induction l as [| l Hrecl]; auto with arith.",
                        "VernacExtend",
                        "62add112af1b42ca02aaaddba4831d1bf3fb9a7f"
                    ]
                },
                {
                    "command": [
                        "case (lt_or_Zero l); [ auto with arith | intro eg ].",
                        "VernacExtend",
                        "9260a64d857a3bb36b64f6b168a909897186d937"
                    ]
                },
                {
                    "command": [
                        "absurd (one < n); [ rewrite e; rewrite eg; simpl in |- *; auto with arith | auto with arith ].",
                        "VernacExtend",
                        "bc7e99616adaa2c0726e2baa1d85fc1410ec3924"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "unfold pred in |- *; elim a; auto with arith.",
                        "VernacExtend",
                        "78e4b084e834721deb2bba3d6576f40e4d3cd17e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "floor_log2",
            "line_nb": 25,
            "steps": [
                {
                    "command": [
                        "refine (fun n _ => match log2 n _ with | existS l b => exist _ l _ end).",
                        "VernacExtend",
                        "09c992bce0423cbbac4542f1ea77d7ed4f683dd3"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "elim b; intro.",
                        "VernacExtend",
                        "9ac42db59af54349b151d52654f91dc016dc3cac"
                    ]
                },
                {
                    "command": [
                        "rewrite a; split; auto with arith.",
                        "VernacExtend",
                        "b20833b76fc11e98558ced486be898ca2a109d36"
                    ]
                },
                {
                    "command": [
                        "elim b0; auto with arith.",
                        "VernacExtend",
                        "dda29c4230c5d08116c87de7af994cdacceedbac"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}