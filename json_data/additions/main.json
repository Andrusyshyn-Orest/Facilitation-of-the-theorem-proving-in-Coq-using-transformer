{
    "filename": "main.v",
    "coq_project": "additions",
    "vernac_cmds": [
        [
            "Require Import Constants.",
            "VernacRequire",
            "14418e3e4e499aa89eb4e9ac8e2c3218989f5a1f"
        ],
        [
            "Require Import generation.",
            "VernacRequire",
            "4d6ab0d3e4bc44864f21d286f94760692fa145af"
        ],
        [
            "Require Import monoid.",
            "VernacRequire",
            "5175badd18113e8306f870657ff8501572699af4"
        ],
        [
            "Require Import machine.",
            "VernacRequire",
            "2d6e7ef731334fdf987f3e86c0d3800f2a963121"
        ],
        [
            "Require Import strategies.",
            "VernacRequire",
            "30e3d02a76650e1017d538e1587d111505ee7fad"
        ],
        [
            "Require Import spec.",
            "VernacRequire",
            "32cc48fe5efb2161567672bac6e06946f389f273"
        ],
        [
            "Require Import log2_spec.",
            "VernacRequire",
            "9091821f504835494d7d76d70a10479db920159a"
        ],
        [
            "Require Import log2_implementation.",
            "VernacRequire",
            "a143d8f0cd6d51685749539b662d4e3818767f4d"
        ],
        [
            "Require Import Compare_dec.",
            "VernacRequire",
            "96b495dc82d6bd54e62353acae7d6e61222564e6"
        ],
        [
            "Require Import while.",
            "VernacRequire",
            "22f0c13dc45d9c3168bc0fcc4fda47f2d4728c58"
        ],
        [
            "Require Import imperative.",
            "VernacRequire",
            "15b446292759177285b0e8ebc9e6bfa322ebbe8e"
        ],
        [
            "Require Import develop.",
            "VernacRequire",
            "82e8bdb9ff19705d1088f72f57c4a618675aa069"
        ],
        [
            "Require Import dicho_strat.",
            "VernacRequire",
            "2390e2bfde0945b1fc55c022b350934932d80533"
        ],
        [
            "Require Import binary_strat.",
            "VernacRequire",
            "f4d935604b10f6e07af4f47f20f8ce4a3c6be712"
        ],
        [
            "Require Import trivial.",
            "VernacRequire",
            "30a0150172b2c2e856704a3e5e52d20e26c65bfe"
        ],
        [
            "Require Import standard.",
            "VernacRequire",
            "292eaac9063a29415b5f148af8862423a3186e22"
        ],
        [
            "Require Import monofun.",
            "VernacRequire",
            "9f21e41ecefeae2a7ad74154799ac59d43531ca3"
        ],
        [
            "Require Import matrix.",
            "VernacRequire",
            "ab7290e5f3726c5eda7d71f3294c9f5abf583b8d"
        ],
        [
            "Require Import ZArith.",
            "VernacRequire",
            "12e7bb35b490128f5b015cdb4af7d2255de07134"
        ],
        [
            "Definition code_gen (s : strategy) := chain_algo s log2_impl.",
            "VernacDefinition",
            "70e96dcf78da597861b12220cd38fbc849d94f0a"
        ],
        [
            "Definition power_algo_r (s : strategy) := power_algo s log2_impl.",
            "VernacDefinition",
            "d3373634aac69dc8d5fe2df6b625e3219a338141"
        ],
        [
            "Theorem addchains : forall (gamma : strategy) (n : nat) (M : Set) (MO : monoid M) (a : M), {b : M | b = power M MO a n}.",
            "VernacStartTheoremProof",
            "2b160de6a466ec0a1744f29eb503ef94f8fe9b4c"
        ],
        [
            "intros gamma n M MO a; elim (zerop n); intro H; [ exists (u M MO) | exists (config_X M (Exec M MO match power_algo gamma log2_impl n H with | addchain_spec_intro gc => match gc with | gencode_intro co _ => co end end (config M a (emptystack M)))) ].",
            "VernacExtend",
            "bc2e4ea9248b4263cdacc32216a82a5842edc2da"
        ],
        [
            "rewrite H; auto with arith.",
            "VernacExtend",
            "8392a856d0dbbc586f2ccf3f38a822850be88673"
        ],
        [
            "elim (power_algo gamma log2_impl n H); intro g; elim g; intros co s.",
            "VernacExtend",
            "2667cdf9d4f17a3dafbd23616d0c803a4913ad8d"
        ],
        [
            "inversion_clear s.",
            "VernacExtend",
            "6411650c694566c5ecf0f8a2317dc2bd181cb4f2"
        ],
        [
            "rewrite H0; simpl in |- *; auto with arith.",
            "VernacExtend",
            "45816adf57ae5e50025cee76f4efa3674356330a"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Definition dic := dicho log2_impl.",
            "VernacDefinition",
            "fd71769f3584e7ce0c714786229410822dc6602a"
        ],
        [
            "Opaque matrix.",
            "VernacSetOpacity",
            "b5911f47ee5c92dc895c0cccccda73192665384a"
        ],
        [
            "Lemma fibonacci : forall n : nat, {q : Z | q = Z_of_nat (Fib n)}.",
            "VernacStartTheoremProof",
            "866275127744bffa63a7a5f1df9a1a595a0fe5f6"
        ],
        [
            "refine (fun n => match zerop n with | left e => exist _ 1%Z _ | right l => match addchains dic n Mat2 matrix fib_mat with | exist m e => exist _ (M11 m) _ end end).",
            "VernacExtend",
            "39fb4fdee4f2e8c44bba3d02e15d7ab48d519eb7"
        ],
        [
            "rewrite e; rewrite Unfold_FibO; auto with arith.",
            "VernacExtend",
            "01f5da996725a789cd2106fd3e82990d8e52631b"
        ],
        [
            "rewrite fib_computation.",
            "VernacExtend",
            "3bde4394b06b460220e46cd56b9195e0c334a3ba"
        ],
        [
            "rewrite e; auto with arith.",
            "VernacExtend",
            "3721e322f96f73dda7c273e6680084f15de0c1cc"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Transparent matrix.",
            "VernacSetOpacity",
            "18ec154151df682ef560e255248447c9283c2280"
        ]
    ],
    "proofs": [
        {
            "name": "addchains",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "intros gamma n M MO a; elim (zerop n); intro H; [ exists (u M MO) | exists (config_X M (Exec M MO match power_algo gamma log2_impl n H with | addchain_spec_intro gc => match gc with | gencode_intro co _ => co end end (config M a (emptystack M)))) ].",
                        "VernacExtend",
                        "bc2e4ea9248b4263cdacc32216a82a5842edc2da"
                    ]
                },
                {
                    "command": [
                        "rewrite H; auto with arith.",
                        "VernacExtend",
                        "8392a856d0dbbc586f2ccf3f38a822850be88673"
                    ]
                },
                {
                    "command": [
                        "elim (power_algo gamma log2_impl n H); intro g; elim g; intros co s.",
                        "VernacExtend",
                        "2667cdf9d4f17a3dafbd23616d0c803a4913ad8d"
                    ]
                },
                {
                    "command": [
                        "inversion_clear s.",
                        "VernacExtend",
                        "6411650c694566c5ecf0f8a2317dc2bd181cb4f2"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; simpl in |- *; auto with arith.",
                        "VernacExtend",
                        "45816adf57ae5e50025cee76f4efa3674356330a"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "fibonacci",
            "line_nb": 30,
            "steps": [
                {
                    "command": [
                        "refine (fun n => match zerop n with | left e => exist _ 1%Z _ | right l => match addchains dic n Mat2 matrix fib_mat with | exist m e => exist _ (M11 m) _ end end).",
                        "VernacExtend",
                        "39fb4fdee4f2e8c44bba3d02e15d7ab48d519eb7"
                    ]
                },
                {
                    "command": [
                        "rewrite e; rewrite Unfold_FibO; auto with arith.",
                        "VernacExtend",
                        "01f5da996725a789cd2106fd3e82990d8e52631b"
                    ]
                },
                {
                    "command": [
                        "rewrite fib_computation.",
                        "VernacExtend",
                        "3bde4394b06b460220e46cd56b9195e0c334a3ba"
                    ]
                },
                {
                    "command": [
                        "rewrite e; auto with arith.",
                        "VernacExtend",
                        "3721e322f96f73dda7c273e6680084f15de0c1cc"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}