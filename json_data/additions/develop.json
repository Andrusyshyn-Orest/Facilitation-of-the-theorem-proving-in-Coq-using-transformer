{
    "filename": "develop.v",
    "coq_project": "additions",
    "vernac_cmds": [
        [
            "Require Import Constants.",
            "VernacRequire",
            "14418e3e4e499aa89eb4e9ac8e2c3218989f5a1f"
        ],
        [
            "Require Import monoid.",
            "VernacRequire",
            "5175badd18113e8306f870657ff8501572699af4"
        ],
        [
            "Require Import spec.",
            "VernacRequire",
            "32cc48fe5efb2161567672bac6e06946f389f273"
        ],
        [
            "Require Import machine.",
            "VernacRequire",
            "2d6e7ef731334fdf987f3e86c0d3800f2a963121"
        ],
        [
            "Require Import Wf_compl.",
            "VernacRequire",
            "d2691859fd35245c22d23a8a86f5171092620e60"
        ],
        [
            "Require Import Plus.",
            "VernacRequire",
            "a18284a3c28ae9356bfc5084ee8540c5d50631e5"
        ],
        [
            "Require Import Mult.",
            "VernacRequire",
            "2f212547234b36011df39fc4af8aa026cbf75aee"
        ],
        [
            "Require Import Lt.",
            "VernacRequire",
            "fe47d80ebda42c5f075a36fb67288742f8593767"
        ],
        [
            "Require Import Mult_compl.",
            "VernacRequire",
            "5c9c42ad0e826e562e958bc20d98dcce07a439cf"
        ],
        [
            "Require Import euclid.",
            "VernacRequire",
            "2c4bf8f3e4058d398953e55885bbfdf41a4113cd"
        ],
        [
            "Require Import two_power.",
            "VernacRequire",
            "7d5ca9a1af3de98b54e6baa9cbe6dbfd1c444d9a"
        ],
        [
            "Lemma M3 : gencode (Call_M three).",
            "VernacStartTheoremProof",
            "e80a4bd490ef0acd686e2c9f1a417899bcfb12cb"
        ],
        [
            "refine (gencode_intro _ (seq PUSH (seq SQR (seq MUL End))) _).",
            "VernacExtend",
            "1e5761656bc81707ff03bf95003a7e4d5b1a0eeb"
        ],
        [
            "constructor 1.",
            "VernacExtend",
            "08a5b9fd59ad59b27ce13f998c760c4014bfab97"
        ],
        [
            "simpl in |- *; unfold power, three in |- *; intros.",
            "VernacExtend",
            "793d22fa15a26a23af8fcba97d3f2c34906ae8b1"
        ],
        [
            "rewrite (u_neutral_r M MO).",
            "VernacExtend",
            "ff4515b4c6e074a4e6567dce580abdbf89f76051"
        ],
        [
            "rewrite <- (point_assoc M MO); auto with arith.",
            "VernacExtend",
            "50de62b7ad7f676ea8a0e47223c913238bd37e65"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma M2q : forall q : nat, gencode (Call_M (two_power q)).",
            "VernacStartTheoremProof",
            "146bbca77da4620268531a24156cfad5e4c65250"
        ],
        [
            "refine (let t := fun q : nat => gencode (Call_M (two_power q)) in (fix M2q (q : nat) : t q := match q as x return (t x) with | O => gencode_intro _ End _ | S p => match M2q p with | gencode_intro c s => gencode_intro _ (seq SQR c) _ end end)).",
            "VernacExtend",
            "3d34d2df4e93067bffe9948d6f85266f731ce68f"
        ],
        [
            "constructor 1.",
            "VernacExtend",
            "08a5b9fd59ad59b27ce13f998c760c4014bfab97"
        ],
        [
            "unfold power in |- *; simpl in |- *.",
            "VernacExtend",
            "f4d7b6c14939b9bce9bf645870bd19db38437f58"
        ],
        [
            "intros; rewrite (u_neutral_r M MO); auto with arith.",
            "VernacExtend",
            "fa550a3f4dcd75520da59266972259a53aff994a"
        ],
        [
            "constructor 1; auto with arith.",
            "VernacExtend",
            "f997fe99834429c567455a58532ed4fcf8ffdd0e"
        ],
        [
            "intros; simpl in |- *.",
            "VernacExtend",
            "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
        ],
        [
            "inversion_clear s.",
            "VernacExtend",
            "6411650c694566c5ecf0f8a2317dc2bd181cb4f2"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "apply Config_inv; auto with arith.",
            "VernacExtend",
            "247f0c8a2b189999f11f39824286afda4c7678c6"
        ],
        [
            "rewrite <- plus_n_O.",
            "VernacExtend",
            "82e76fe4a7447040940c37f8f7935de7fb153db6"
        ],
        [
            "apply a2x; auto with arith.",
            "VernacExtend",
            "fe448d58a08e0f79a46e9a6d79ca026f3605dc9e"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma C2M : forall p q : nat, gencode (Call_C p q) -> gencode (Call_M p).",
            "VernacStartTheoremProof",
            "58b886325dc4ebe128b009a39ebbbae3417375f9"
        ],
        [
            "refine (fun p q g => match g with | gencode_intro c s => gencode_intro _ c _ end).",
            "VernacExtend",
            "a03a4d38a4ebfae0aa7208ad8ebdd5429774f1ab"
        ],
        [
            "constructor 1.",
            "VernacExtend",
            "08a5b9fd59ad59b27ce13f998c760c4014bfab97"
        ],
        [
            "inversion_clear s.",
            "VernacExtend",
            "6411650c694566c5ecf0f8a2317dc2bd181cb4f2"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma MMC : forall p q : nat, gencode (Call_M p) -> gencode (Call_M q) -> gencode (Call_C (q * p) p).",
            "VernacStartTheoremProof",
            "88998d2bddffa797155ad2bb394b35d02e0cf025"
        ],
        [
            "refine (fun p q g g' => match g with | gencode_intro c s => match g' with | gencode_intro c' s0 => gencode_intro _ (app c c') _ end end).",
            "VernacExtend",
            "fdc6369e23eff783f4ac3339f6f2cd21d19955f4"
        ],
        [
            "constructor 2.",
            "VernacExtend",
            "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
        ],
        [
            "intros; rewrite Exec_app.",
            "VernacExtend",
            "914bf2c6a317d975252a00c8c0e2c32e9a64ad03"
        ],
        [
            "inversion_clear s.",
            "VernacExtend",
            "6411650c694566c5ecf0f8a2317dc2bd181cb4f2"
        ],
        [
            "rewrite H.",
            "VernacExtend",
            "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
        ],
        [
            "inversion_clear s0.",
            "VernacExtend",
            "61c8abe9c7110ae7b59443cacf48fcd95d90c21a"
        ],
        [
            "rewrite (H0 M MO).",
            "VernacExtend",
            "09d56dfcc6f5667f5d17039386d28886850f1ffc"
        ],
        [
            "rewrite power_mult; auto with arith.",
            "VernacExtend",
            "465264b10ef4a7787ae6dba3ba0a2ed3787f05d9"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma KMC : forall p q r : nat, gencode (Call_K p r) -> gencode (Call_M q) -> gencode (Call_C (q * p + r) p).",
            "VernacStartTheoremProof",
            "b24a20c3405f1d0f2acb8a88b3250148f2c1e88e"
        ],
        [
            "refine (fun p q r g g' => match g with | gencode_intro cpr s => match g' with | gencode_intro cq s0 => gencode_intro _ (app cpr (app cq (seq MUL End))) _ end end).",
            "VernacExtend",
            "3a4cfdb41ec9754aedcbb0a9396d7c3c815fbca2"
        ],
        [
            "inversion_clear s; inversion_clear s0.",
            "VernacExtend",
            "703cfc699235f490a2366f1b95fbe319fb6c4fa8"
        ],
        [
            "constructor 2.",
            "VernacExtend",
            "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
        ],
        [
            "intros; rewrite Exec_app.",
            "VernacExtend",
            "914bf2c6a317d975252a00c8c0e2c32e9a64ad03"
        ],
        [
            "rewrite (H M MO a).",
            "VernacExtend",
            "951ee10851ba3a5838bdb4c02e93afb84752a61e"
        ],
        [
            "rewrite (Exec_app M MO); simpl in |- *; rewrite H0.",
            "VernacExtend",
            "d38e03ba21bdf4a422afd2a3c2b35e858fa3c684"
        ],
        [
            "simpl in |- *.",
            "VernacExtend",
            "1b93169f4cf876d207c1fab22a2347202ab48d85"
        ],
        [
            "apply Config_inv.",
            "VernacExtend",
            "5eb7b85073cf6502a2fc05b9857ec49269b22934"
        ],
        [
            "rewrite power_eucl; auto with arith.",
            "VernacExtend",
            "8bbb6c1e4da9584b9ec9910b560c3027e8d9d186"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma MMK : forall p q : nat, gencode (Call_M p) -> gencode (Call_M q) -> gencode (Call_K (q * p) p).",
            "VernacStartTheoremProof",
            "78e844f955ff335c23962dbb8e5e24e4f4d97816"
        ],
        [
            "refine (fun p q g g' => match g with | gencode_intro cp s => match g' with | gencode_intro cq s0 => gencode_intro _ (app cp (seq PUSH cq)) _ end end).",
            "VernacExtend",
            "2892ff2b1fffcbe10b4aaaa39fc47c656761b174"
        ],
        [
            "inversion_clear s; inversion_clear s0.",
            "VernacExtend",
            "703cfc699235f490a2366f1b95fbe319fb6c4fa8"
        ],
        [
            "constructor 3.",
            "VernacExtend",
            "fc203c31040684912422f2b19644a4136ee46779"
        ],
        [
            "intros; rewrite Exec_app.",
            "VernacExtend",
            "914bf2c6a317d975252a00c8c0e2c32e9a64ad03"
        ],
        [
            "rewrite H; simpl in |- *.",
            "VernacExtend",
            "9d8fceb2956840b5cbf41ba3844c2d68196d141c"
        ],
        [
            "rewrite H0; simpl in |- *.",
            "VernacExtend",
            "2523d8787e2d3d9372387c776fdd44c2630b7972"
        ],
        [
            "apply Config_inv; auto with arith.",
            "VernacExtend",
            "247f0c8a2b189999f11f39824286afda4c7678c6"
        ],
        [
            "rewrite <- power_mult; auto with arith.",
            "VernacExtend",
            "dca568a1c4796093cf81374588b18f7acbc4ef1f"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Lemma KMK : forall p q r : nat, gencode (Call_K p r) -> gencode (Call_M q) -> gencode (Call_K (q * p + r) p).",
            "VernacStartTheoremProof",
            "9976de3cc438c20c073396e2a88a0a0c5aded939"
        ],
        [
            "refine (fun p q r g g' => match g with | gencode_intro kpr s => match g' with | gencode_intro mq s0 => gencode_intro _ (app kpr (seq PUSH (seq SWAP (app mq (seq MUL End))))) _ end end).",
            "VernacExtend",
            "6418188afdcf9200fc8192e163853e0686432e42"
        ],
        [
            "inversion_clear s; inversion_clear s0.",
            "VernacExtend",
            "703cfc699235f490a2366f1b95fbe319fb6c4fa8"
        ],
        [
            "constructor 3.",
            "VernacExtend",
            "fc203c31040684912422f2b19644a4136ee46779"
        ],
        [
            "intros; rewrite Exec_app.",
            "VernacExtend",
            "914bf2c6a317d975252a00c8c0e2c32e9a64ad03"
        ],
        [
            "rewrite H; simpl in |- *.",
            "VernacExtend",
            "9d8fceb2956840b5cbf41ba3844c2d68196d141c"
        ],
        [
            "rewrite Exec_app.",
            "VernacExtend",
            "30b3bf1762de700f40ce012ae59e9a8dcd55f145"
        ],
        [
            "rewrite H0; simpl in |- *.",
            "VernacExtend",
            "2523d8787e2d3d9372387c776fdd44c2630b7972"
        ],
        [
            "auto with arith.",
            "VernacExtend",
            "0a06d2be3685676bb8fa998f149557e231db6506"
        ],
        [
            "rewrite power_eucl; auto with arith.",
            "VernacExtend",
            "8bbb6c1e4da9584b9ec9910b560c3027e8d9d186"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ]
    ],
    "proofs": [
        {
            "name": "M3",
            "line_nb": 11,
            "steps": [
                {
                    "command": [
                        "refine (gencode_intro _ (seq PUSH (seq SQR (seq MUL End))) _).",
                        "VernacExtend",
                        "1e5761656bc81707ff03bf95003a7e4d5b1a0eeb"
                    ]
                },
                {
                    "command": [
                        "constructor 1.",
                        "VernacExtend",
                        "08a5b9fd59ad59b27ce13f998c760c4014bfab97"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *; unfold power, three in |- *; intros.",
                        "VernacExtend",
                        "793d22fa15a26a23af8fcba97d3f2c34906ae8b1"
                    ]
                },
                {
                    "command": [
                        "rewrite (u_neutral_r M MO).",
                        "VernacExtend",
                        "ff4515b4c6e074a4e6567dce580abdbf89f76051"
                    ]
                },
                {
                    "command": [
                        "rewrite <- (point_assoc M MO); auto with arith.",
                        "VernacExtend",
                        "50de62b7ad7f676ea8a0e47223c913238bd37e65"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "M2q",
            "line_nb": 18,
            "steps": [
                {
                    "command": [
                        "refine (let t := fun q : nat => gencode (Call_M (two_power q)) in (fix M2q (q : nat) : t q := match q as x return (t x) with | O => gencode_intro _ End _ | S p => match M2q p with | gencode_intro c s => gencode_intro _ (seq SQR c) _ end end)).",
                        "VernacExtend",
                        "3d34d2df4e93067bffe9948d6f85266f731ce68f"
                    ]
                },
                {
                    "command": [
                        "constructor 1.",
                        "VernacExtend",
                        "08a5b9fd59ad59b27ce13f998c760c4014bfab97"
                    ]
                },
                {
                    "command": [
                        "unfold power in |- *; simpl in |- *.",
                        "VernacExtend",
                        "f4d7b6c14939b9bce9bf645870bd19db38437f58"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite (u_neutral_r M MO); auto with arith.",
                        "VernacExtend",
                        "fa550a3f4dcd75520da59266972259a53aff994a"
                    ]
                },
                {
                    "command": [
                        "constructor 1; auto with arith.",
                        "VernacExtend",
                        "f997fe99834429c567455a58532ed4fcf8ffdd0e"
                    ]
                },
                {
                    "command": [
                        "intros; simpl in |- *.",
                        "VernacExtend",
                        "3da5a0bf1c6e40c602010ee4543b1d990c82e623"
                    ]
                },
                {
                    "command": [
                        "inversion_clear s.",
                        "VernacExtend",
                        "6411650c694566c5ecf0f8a2317dc2bd181cb4f2"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "apply Config_inv; auto with arith.",
                        "VernacExtend",
                        "247f0c8a2b189999f11f39824286afda4c7678c6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- plus_n_O.",
                        "VernacExtend",
                        "82e76fe4a7447040940c37f8f7935de7fb153db6"
                    ]
                },
                {
                    "command": [
                        "apply a2x; auto with arith.",
                        "VernacExtend",
                        "fe448d58a08e0f79a46e9a6d79ca026f3605dc9e"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "C2M",
            "line_nb": 31,
            "steps": [
                {
                    "command": [
                        "refine (fun p q g => match g with | gencode_intro c s => gencode_intro _ c _ end).",
                        "VernacExtend",
                        "a03a4d38a4ebfae0aa7208ad8ebdd5429774f1ab"
                    ]
                },
                {
                    "command": [
                        "constructor 1.",
                        "VernacExtend",
                        "08a5b9fd59ad59b27ce13f998c760c4014bfab97"
                    ]
                },
                {
                    "command": [
                        "inversion_clear s.",
                        "VernacExtend",
                        "6411650c694566c5ecf0f8a2317dc2bd181cb4f2"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MMC",
            "line_nb": 37,
            "steps": [
                {
                    "command": [
                        "refine (fun p q g g' => match g with | gencode_intro c s => match g' with | gencode_intro c' s0 => gencode_intro _ (app c c') _ end end).",
                        "VernacExtend",
                        "fdc6369e23eff783f4ac3339f6f2cd21d19955f4"
                    ]
                },
                {
                    "command": [
                        "constructor 2.",
                        "VernacExtend",
                        "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite Exec_app.",
                        "VernacExtend",
                        "914bf2c6a317d975252a00c8c0e2c32e9a64ad03"
                    ]
                },
                {
                    "command": [
                        "inversion_clear s.",
                        "VernacExtend",
                        "6411650c694566c5ecf0f8a2317dc2bd181cb4f2"
                    ]
                },
                {
                    "command": [
                        "rewrite H.",
                        "VernacExtend",
                        "6192df8b89486a3ba89a78e26e0d70cae2dc94c2"
                    ]
                },
                {
                    "command": [
                        "inversion_clear s0.",
                        "VernacExtend",
                        "61c8abe9c7110ae7b59443cacf48fcd95d90c21a"
                    ]
                },
                {
                    "command": [
                        "rewrite (H0 M MO).",
                        "VernacExtend",
                        "09d56dfcc6f5667f5d17039386d28886850f1ffc"
                    ]
                },
                {
                    "command": [
                        "rewrite power_mult; auto with arith.",
                        "VernacExtend",
                        "465264b10ef4a7787ae6dba3ba0a2ed3787f05d9"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "KMC",
            "line_nb": 47,
            "steps": [
                {
                    "command": [
                        "refine (fun p q r g g' => match g with | gencode_intro cpr s => match g' with | gencode_intro cq s0 => gencode_intro _ (app cpr (app cq (seq MUL End))) _ end end).",
                        "VernacExtend",
                        "3a4cfdb41ec9754aedcbb0a9396d7c3c815fbca2"
                    ]
                },
                {
                    "command": [
                        "inversion_clear s; inversion_clear s0.",
                        "VernacExtend",
                        "703cfc699235f490a2366f1b95fbe319fb6c4fa8"
                    ]
                },
                {
                    "command": [
                        "constructor 2.",
                        "VernacExtend",
                        "3bbfaccba5e1a5a8e417cf2575e634e4c10773fe"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite Exec_app.",
                        "VernacExtend",
                        "914bf2c6a317d975252a00c8c0e2c32e9a64ad03"
                    ]
                },
                {
                    "command": [
                        "rewrite (H M MO a).",
                        "VernacExtend",
                        "951ee10851ba3a5838bdb4c02e93afb84752a61e"
                    ]
                },
                {
                    "command": [
                        "rewrite (Exec_app M MO); simpl in |- *; rewrite H0.",
                        "VernacExtend",
                        "d38e03ba21bdf4a422afd2a3c2b35e858fa3c684"
                    ]
                },
                {
                    "command": [
                        "simpl in |- *.",
                        "VernacExtend",
                        "1b93169f4cf876d207c1fab22a2347202ab48d85"
                    ]
                },
                {
                    "command": [
                        "apply Config_inv.",
                        "VernacExtend",
                        "5eb7b85073cf6502a2fc05b9857ec49269b22934"
                    ]
                },
                {
                    "command": [
                        "rewrite power_eucl; auto with arith.",
                        "VernacExtend",
                        "8bbb6c1e4da9584b9ec9910b560c3027e8d9d186"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "MMK",
            "line_nb": 59,
            "steps": [
                {
                    "command": [
                        "refine (fun p q g g' => match g with | gencode_intro cp s => match g' with | gencode_intro cq s0 => gencode_intro _ (app cp (seq PUSH cq)) _ end end).",
                        "VernacExtend",
                        "2892ff2b1fffcbe10b4aaaa39fc47c656761b174"
                    ]
                },
                {
                    "command": [
                        "inversion_clear s; inversion_clear s0.",
                        "VernacExtend",
                        "703cfc699235f490a2366f1b95fbe319fb6c4fa8"
                    ]
                },
                {
                    "command": [
                        "constructor 3.",
                        "VernacExtend",
                        "fc203c31040684912422f2b19644a4136ee46779"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite Exec_app.",
                        "VernacExtend",
                        "914bf2c6a317d975252a00c8c0e2c32e9a64ad03"
                    ]
                },
                {
                    "command": [
                        "rewrite H; simpl in |- *.",
                        "VernacExtend",
                        "9d8fceb2956840b5cbf41ba3844c2d68196d141c"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; simpl in |- *.",
                        "VernacExtend",
                        "2523d8787e2d3d9372387c776fdd44c2630b7972"
                    ]
                },
                {
                    "command": [
                        "apply Config_inv; auto with arith.",
                        "VernacExtend",
                        "247f0c8a2b189999f11f39824286afda4c7678c6"
                    ]
                },
                {
                    "command": [
                        "rewrite <- power_mult; auto with arith.",
                        "VernacExtend",
                        "dca568a1c4796093cf81374588b18f7acbc4ef1f"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "KMK",
            "line_nb": 69,
            "steps": [
                {
                    "command": [
                        "refine (fun p q r g g' => match g with | gencode_intro kpr s => match g' with | gencode_intro mq s0 => gencode_intro _ (app kpr (seq PUSH (seq SWAP (app mq (seq MUL End))))) _ end end).",
                        "VernacExtend",
                        "6418188afdcf9200fc8192e163853e0686432e42"
                    ]
                },
                {
                    "command": [
                        "inversion_clear s; inversion_clear s0.",
                        "VernacExtend",
                        "703cfc699235f490a2366f1b95fbe319fb6c4fa8"
                    ]
                },
                {
                    "command": [
                        "constructor 3.",
                        "VernacExtend",
                        "fc203c31040684912422f2b19644a4136ee46779"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite Exec_app.",
                        "VernacExtend",
                        "914bf2c6a317d975252a00c8c0e2c32e9a64ad03"
                    ]
                },
                {
                    "command": [
                        "rewrite H; simpl in |- *.",
                        "VernacExtend",
                        "9d8fceb2956840b5cbf41ba3844c2d68196d141c"
                    ]
                },
                {
                    "command": [
                        "rewrite Exec_app.",
                        "VernacExtend",
                        "30b3bf1762de700f40ce012ae59e9a8dcd55f145"
                    ]
                },
                {
                    "command": [
                        "rewrite H0; simpl in |- *.",
                        "VernacExtend",
                        "2523d8787e2d3d9372387c776fdd44c2630b7972"
                    ]
                },
                {
                    "command": [
                        "auto with arith.",
                        "VernacExtend",
                        "0a06d2be3685676bb8fa998f149557e231db6506"
                    ]
                },
                {
                    "command": [
                        "rewrite power_eucl; auto with arith.",
                        "VernacExtend",
                        "8bbb6c1e4da9584b9ec9910b560c3027e8d9d186"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}