{
    "filename": "machine.v",
    "coq_project": "additions",
    "vernac_cmds": [
        [
            "Require Import monoid.",
            "VernacRequire",
            "5175badd18113e8306f870657ff8501572699af4"
        ],
        [
            "Require Import Constants.",
            "VernacRequire",
            "14418e3e4e499aa89eb4e9ac8e2c3218989f5a1f"
        ],
        [
            "Inductive Instr : Set := | MUL : Instr | SQR : Instr | PUSH : Instr | SWAP : Instr.",
            "VernacInductive",
            "7289823aa49a8cb5600ed9ceb3db230de65c126a"
        ],
        [
            "Inductive Code : Set := | End : Code | seq : Instr -> Code -> Code.",
            "VernacInductive",
            "f4a30bba1d9321fcadcbe85052265741a81364e9"
        ],
        [
            "Fixpoint app (c : Code) : Code -> Code := fun c' : Code => match c with | End => c' | seq i c => seq i (app c c') end.",
            "VernacFixpoint",
            "c9589a3936012b9f781055315f49293a5498c8ed"
        ],
        [
            "Section Monoid.",
            "VernacBeginSection",
            "3960827460538e0f27c2dad7a5f6fe64bed2cc27"
        ],
        [
            "Variable M : Set.",
            "VernacAssumption",
            "d2c475de3dc605f1deabc8cd593f3d6f401f8909"
        ],
        [
            "Variable MO : monoid M.",
            "VernacAssumption",
            "3b318504688cb3c45cbadfc36fa8aadb9cd8654f"
        ],
        [
            "Let uM := u _ MO.",
            "VernacDefinition",
            "45fb550f8cfb83f29a66ccafb9791ece90931ada"
        ],
        [
            "Let oM := o _ MO.",
            "VernacDefinition",
            "b20df2e431cb01f0d48135262d173ef203d961ee"
        ],
        [
            "Inductive Stack : Set := | emptystack : Stack | push : M -> Stack -> Stack.",
            "VernacInductive",
            "bbc86f346be2d904453d6b9e7a414a2e050ca8d8"
        ],
        [
            "Definition top (s : Stack) := match s return M with | emptystack => uM | push m _ => m end.",
            "VernacDefinition",
            "691dc1bee85e37c72ba8ad6ce043a24b23c36eb6"
        ],
        [
            "Definition pop (s : Stack) := match s return Stack with | emptystack => emptystack | push _ r => r end.",
            "VernacDefinition",
            "5e6bdec83a02fa5986d41d24fec6aae8cb9a6a1c"
        ],
        [
            "Record Config : Set := config {config_X : M; config_S : Stack}.",
            "VernacInductive",
            "adc1649a49246c4a457fa46ed7e6ef3c29a6b9a0"
        ],
        [
            "Lemma Config_inv : forall (a a' : M) (s s' : Stack), a = a' -> s = s' -> config a s = config a' s'.",
            "VernacStartTheoremProof",
            "500fd0866d5addcb555e14a5d5b41310ddb69b14"
        ],
        [
            "intros.",
            "VernacExtend",
            "1b4df911c5412d25278e46f48402870ba987996b"
        ],
        [
            "rewrite H; rewrite H0; auto.",
            "VernacExtend",
            "9a1a39a7fca888617757ad84b3313685aa8424f6"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "Hint Resolve Config_inv: arith.",
            "VernacHints",
            "e9b8ae05e9aad3f5dc3e4f139e4f9935355e598d"
        ],
        [
            "Definition Exec1 (c : Instr) (v : Config) : Config := let (m, s) := v in match c with | MUL => config (oM m (top s)) (pop s) | SQR => config (oM m m) s | PUSH => config m (push m s) | SWAP => config m (push (top (pop s)) (push (top s) (pop (pop s)))) end.",
            "VernacDefinition",
            "058ac7e0ef93cb63c7c8acbdc7a5dcd29edfed91"
        ],
        [
            "Fixpoint Exec (c : Code) : Config -> Config := fun v : Config => match c with | End => v | seq i c => Exec c (Exec1 i v) end.",
            "VernacFixpoint",
            "51833ec9cddeff6de574f51a8f3821dd967973b7"
        ],
        [
            "Lemma Exec_app : forall (c c' : Code) (v : Config), Exec (app c c') v = Exec c' (Exec c v).",
            "VernacStartTheoremProof",
            "4406b37502df6549d12acf3f421400eabc3c88ab"
        ],
        [
            "simple induction c; simpl in |- *.",
            "VernacExtend",
            "3c5019667381aee8501b2fb643a5a89d00b67fb6"
        ],
        [
            "auto.",
            "VernacExtend",
            "1f09da0addd069b3b65326f8c71967acc1e985af"
        ],
        [
            "intros; rewrite H; auto.",
            "VernacExtend",
            "2129e25ac9d107422a9b610c0a4b072d70a8c035"
        ],
        [
            "Qed.",
            "VernacEndProof",
            "6eee6c55dea8e22a11abc36404343a43e520a888"
        ],
        [
            "End Monoid.",
            "VernacEndSegment",
            "6c93219965c411f47de628b74a689cd4a4bf720b"
        ]
    ],
    "proofs": [
        {
            "name": "Config_inv",
            "line_nb": 14,
            "steps": [
                {
                    "command": [
                        "intros.",
                        "VernacExtend",
                        "1b4df911c5412d25278e46f48402870ba987996b"
                    ]
                },
                {
                    "command": [
                        "rewrite H; rewrite H0; auto.",
                        "VernacExtend",
                        "9a1a39a7fca888617757ad84b3313685aa8424f6"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        },
        {
            "name": "Exec_app",
            "line_nb": 21,
            "steps": [
                {
                    "command": [
                        "simple induction c; simpl in |- *.",
                        "VernacExtend",
                        "3c5019667381aee8501b2fb643a5a89d00b67fb6"
                    ]
                },
                {
                    "command": [
                        "auto.",
                        "VernacExtend",
                        "1f09da0addd069b3b65326f8c71967acc1e985af"
                    ]
                },
                {
                    "command": [
                        "intros; rewrite H; auto.",
                        "VernacExtend",
                        "2129e25ac9d107422a9b610c0a4b072d70a8c035"
                    ]
                },
                {
                    "command": [
                        "Qed.",
                        "VernacEndProof",
                        "6eee6c55dea8e22a11abc36404343a43e520a888"
                    ]
                }
            ]
        }
    ]
}